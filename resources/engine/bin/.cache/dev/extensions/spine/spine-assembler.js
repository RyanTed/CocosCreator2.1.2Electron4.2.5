(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/spine-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Skeleton = require('./Skeleton');
        var spine = require('./lib/spine');
        var RenderFlow = require('../../cocos2d/core/renderer/render-flow');
        var VertexFormat = require('../../cocos2d/core/renderer/webgl/vertex-format');
        var VFOneColor = VertexFormat.vfmtPosUvColor;
        var VFTwoColor = VertexFormat.vfmtPosUvTwoColor;
        var gfx = cc.gfx;
        var FLAG_BATCH = 16;
        var FLAG_TWO_COLOR = 1;
        var NOT_BATCH_ONE_COLOR = 0;
        var NOT_BATCH_TWO_COLOR = 1;
        var BATCH_ONE_COLOR = 16;
        var BATCH_TWO_COLOR = 17;
        var _handleVal = 0;
        var _quadTriangles = [
            0,
            1,
            2,
            2,
            3,
            0
        ];
        var _slotColor = cc.color(0, 0, 255, 255);
        var _boneColor = cc.color(255, 0, 0, 255);
        var _originColor = cc.color(0, 255, 0, 255);
        var _finalColor = undefined;
        var _darkColor = undefined;
        if (!CC_JSB) {
            _finalColor = new spine.Color(1, 1, 1, 1);
            _darkColor = new spine.Color(1, 1, 1, 1);
        }
        var _premultipliedAlpha = void 0;
        var _multiplier = void 0;
        var _slotRangeStart = void 0;
        var _slotRangeEnd = void 0;
        var _useTint = void 0;
        var _debugSlots = void 0;
        var _debugBones = void 0;
        var _nodeR = void 0, _nodeG = void 0, _nodeB = void 0, _nodeA = void 0;
        var _finalColor32 = void 0, _darkColor32 = void 0;
        var _vertexFormat = void 0;
        var _perVertexSize = void 0;
        var _perClipVertexSize = void 0;
        var _vertexFloatCount = 0, _vertexCount = 0, _vertexFloatOffset = 0, _vertexOffset = 0, _indexCount = 0, _indexOffset = 0, _vfOffset = 0;
        var _tempr = void 0, _tempg = void 0, _tempb = void 0;
        var _inRange = void 0;
        var _mustFlush = void 0;
        var _x = void 0, _y = void 0, _m00 = void 0, _m04 = void 0, _m12 = void 0, _m01 = void 0, _m05 = void 0, _m13 = void 0;
        var _r = void 0, _g = void 0, _b = void 0, _fr = void 0, _fg = void 0, _fb = void 0, _fa = void 0, _dr = void 0, _dg = void 0, _db = void 0, _da = void 0;
        var _comp = void 0, _buffer = void 0, _renderer = void 0, _node = void 0, _needColor = void 0;
        function _getSlotMaterial(tex, blendMode) {
            var src = void 0, dst = void 0;
            switch (blendMode) {
            case spine.BlendMode.Additive:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE;
                break;
            case spine.BlendMode.Multiply:
                src = cc.macro.DST_COLOR;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            case spine.BlendMode.Screen:
                src = cc.macro.ONE;
                dst = cc.macro.ONE_MINUS_SRC_COLOR;
                break;
            case spine.BlendMode.Normal:
            default:
                src = _premultipliedAlpha ? cc.macro.ONE : cc.macro.SRC_ALPHA;
                dst = cc.macro.ONE_MINUS_SRC_ALPHA;
                break;
            }
            var useModel = !_comp.enableBatch;
            var key = tex.url + src + dst + _useTint + useModel;
            var baseMaterial = _comp.sharedMaterials[0];
            if (!baseMaterial)
                return null;
            var materialCache = _comp._materialCache;
            var material = materialCache[key];
            if (!material) {
                var baseKey = baseMaterial._hash;
                if (!materialCache[baseKey]) {
                    material = baseMaterial;
                } else {
                    material = new cc.Material();
                    material.copy(baseMaterial);
                }
                material.define('_USE_MODEL', useModel);
                material.define('USE_TINT', _useTint);
                material.setProperty('texture', tex);
                var pass = material.effect.getDefaultTechnique().passes[0];
                pass.setBlend(true, gfx.BLEND_FUNC_ADD, src, dst, gfx.BLEND_FUNC_ADD, src, dst);
                material.updateHash(key);
                materialCache[key] = material;
            } else if (material.getProperty('texture') !== tex) {
                material.setProperty('texture', tex);
                material.updateHash(key);
            }
            return material;
        }
        function _handleColor(color) {
            _fa = color.fa * _nodeA;
            _multiplier = _premultipliedAlpha ? _fa / 255 : 1;
            _r = _nodeR * _multiplier;
            _g = _nodeG * _multiplier;
            _b = _nodeB * _multiplier;
            _fr = color.fr * _r;
            _fg = color.fg * _g;
            _fb = color.fb * _b;
            _finalColor32 = (_fa << 24 >>> 0) + (_fb << 16) + (_fg << 8) + _fr;
            _dr = color.dr * _r;
            _dg = color.dg * _g;
            _db = color.db * _b;
            _da = _premultipliedAlpha ? 255 : 0;
            _darkColor32 = (_da << 24 >>> 0) + (_db << 16) + (_dg << 8) + _dr;
        }
        var spineAssembler = {
            updateRenderData: function updateRenderData(comp) {
                var skeleton = comp._skeleton;
                if (skeleton) {
                    skeleton.updateWorldTransform();
                }
            },
            fillVertices: function fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot) {
                var vbuf = _buffer._vData, ibuf = _buffer._iData, uintVData = _buffer._uintVData;
                var offsetInfo = void 0;
                _finalColor.a = slotColor.a * attachmentColor.a * skeletonColor.a * _nodeA * 255;
                _multiplier = _premultipliedAlpha ? _finalColor.a : 255;
                _tempr = _nodeR * attachmentColor.r * skeletonColor.r * _multiplier;
                _tempg = _nodeG * attachmentColor.g * skeletonColor.g * _multiplier;
                _tempb = _nodeB * attachmentColor.b * skeletonColor.b * _multiplier;
                _finalColor.r = _tempr * slotColor.r;
                _finalColor.g = _tempg * slotColor.g;
                _finalColor.b = _tempb * slotColor.b;
                if (slot.darkColor == null) {
                    _darkColor.set(0, 0, 0, 1);
                } else {
                    _darkColor.r = slot.darkColor.r * _tempr;
                    _darkColor.g = slot.darkColor.g * _tempg;
                    _darkColor.b = slot.darkColor.b * _tempb;
                }
                _darkColor.a = _premultipliedAlpha ? 255 : 0;
                if (!clipper.isClipping()) {
                    _finalColor32 = (_finalColor.a << 24 >>> 0) + (_finalColor.b << 16) + (_finalColor.g << 8) + _finalColor.r;
                    _darkColor32 = (_darkColor.a << 24 >>> 0) + (_darkColor.b << 16) + (_darkColor.g << 8) + _darkColor.r;
                    if (!_useTint) {
                        for (var v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount; v < n; v += _perVertexSize) {
                            uintVData[v + 4] = _finalColor32;
                        }
                    } else {
                        for (var _v = _vertexFloatOffset, _n = _vertexFloatOffset + _vertexFloatCount; _v < _n; _v += _perVertexSize) {
                            uintVData[_v + 4] = _finalColor32;
                            uintVData[_v + 5] = _darkColor32;
                        }
                    }
                } else {
                    var uvs = vbuf.subarray(_vertexFloatOffset + 2);
                    clipper.clipTriangles(vbuf.subarray(_vertexFloatOffset), _vertexFloatCount, ibuf.subarray(_indexOffset), _indexCount, uvs, _finalColor, _darkColor, _useTint, _perVertexSize);
                    var clippedVertices = new Float32Array(clipper.clippedVertices);
                    var clippedTriangles = clipper.clippedTriangles;
                    _indexCount = clippedTriangles.length;
                    _vertexFloatCount = clippedVertices.length / _perClipVertexSize * _perVertexSize;
                    offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);
                    _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                    vbuf = _buffer._vData, ibuf = _buffer._iData;
                    uintVData = _buffer._uintVData;
                    ibuf.set(clippedTriangles, _indexOffset);
                    if (!_useTint) {
                        for (var _v2 = 0, _n2 = clippedVertices.length, offset = _vertexFloatOffset; _v2 < _n2; _v2 += 8, offset += _perVertexSize) {
                            vbuf[offset] = clippedVertices[_v2];
                            vbuf[offset + 1] = clippedVertices[_v2 + 1];
                            vbuf[offset + 2] = clippedVertices[_v2 + 6];
                            vbuf[offset + 3] = clippedVertices[_v2 + 7];
                            _finalColor32 = (clippedVertices[_v2 + 5] << 24 >>> 0) + (clippedVertices[_v2 + 4] << 16) + (clippedVertices[_v2 + 3] << 8) + clippedVertices[_v2 + 2];
                            uintVData[offset + 4] = _finalColor32;
                        }
                    } else {
                        for (var _v3 = 0, _n3 = clippedVertices.length, _offset = _vertexFloatOffset; _v3 < _n3; _v3 += 12, _offset += _perVertexSize) {
                            vbuf[_offset] = clippedVertices[_v3];
                            vbuf[_offset + 1] = clippedVertices[_v3 + 1];
                            vbuf[_offset + 2] = clippedVertices[_v3 + 6];
                            vbuf[_offset + 3] = clippedVertices[_v3 + 7];
                            _finalColor32 = (clippedVertices[_v3 + 5] << 24 >>> 0) + (clippedVertices[_v3 + 4] << 16) + (clippedVertices[_v3 + 3] << 8) + clippedVertices[_v3 + 2];
                            uintVData[_offset + 4] = _finalColor32;
                            _darkColor32 = (clippedVertices[_v3 + 11] << 24 >>> 0) + (clippedVertices[_v3 + 10] << 16) + (clippedVertices[_v3 + 9] << 8) + clippedVertices[_v3 + 8];
                            uintVData[_offset + 5] = _darkColor32;
                        }
                    }
                }
            },
            realTimeTraverse: function realTimeTraverse(worldMat) {
                var vbuf = void 0;
                var ibuf = void 0;
                var locSkeleton = _comp._skeleton;
                var skeletonColor = locSkeleton.color;
                var graphics = _comp._debugRenderer;
                var clipper = _comp._clipper;
                var material = null;
                var attachment = void 0, attachmentColor = void 0, slotColor = void 0, uvs = void 0, triangles = void 0;
                var isRegion = void 0, isMesh = void 0, isClip = void 0;
                var offsetInfo = void 0;
                var slot = void 0;
                _slotRangeStart = _comp._startSlotIndex;
                _slotRangeEnd = _comp._endSlotIndex;
                _inRange = false;
                if (_slotRangeStart == -1)
                    _inRange = true;
                _debugSlots = _comp.debugSlots;
                _debugBones = _comp.debugBones;
                if (graphics && (_debugBones || _debugSlots)) {
                    graphics.clear();
                    graphics.strokeColor = _slotColor;
                    graphics.lineWidth = 5;
                }
                _perClipVertexSize = _useTint ? 12 : 8;
                _vertexFloatCount = 0;
                _vertexFloatOffset = 0;
                _vertexOffset = 0;
                _indexCount = 0;
                _indexOffset = 0;
                for (var slotIdx = 0, slotCount = locSkeleton.drawOrder.length; slotIdx < slotCount; slotIdx++) {
                    slot = locSkeleton.drawOrder[slotIdx];
                    if (_slotRangeStart >= 0 && _slotRangeStart == slot.data.index) {
                        _inRange = true;
                    }
                    if (!_inRange) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    if (_slotRangeEnd >= 0 && _slotRangeEnd == slot.data.index) {
                        _inRange = false;
                    }
                    _vertexFloatCount = 0;
                    _indexCount = 0;
                    attachment = slot.getAttachment();
                    if (!attachment) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    isRegion = attachment instanceof spine.RegionAttachment;
                    isMesh = attachment instanceof spine.MeshAttachment;
                    isClip = attachment instanceof spine.ClippingAttachment;
                    if (isClip) {
                        clipper.clipStart(slot, attachment);
                        continue;
                    }
                    if (!isRegion && !isMesh) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    material = _getSlotMaterial(attachment.region.texture._texture, slot.data.blendMode);
                    if (!material) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    if (_mustFlush || material._hash !== _renderer.material._hash) {
                        _mustFlush = false;
                        _renderer._flush();
                        _renderer.node = _node;
                        _renderer.material = material;
                    }
                    if (isRegion) {
                        triangles = _quadTriangles;
                        _vertexFloatCount = 4 * _perVertexSize;
                        _indexCount = 6;
                        offsetInfo = _buffer.request(4, 6);
                        _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                        vbuf = _buffer._vData, ibuf = _buffer._iData;
                        attachment.computeWorldVertices(slot.bone, vbuf, _vertexFloatOffset, _perVertexSize);
                        if (graphics && _debugSlots) {
                            graphics.moveTo(vbuf[_vertexFloatOffset], vbuf[_vertexFloatOffset + 1]);
                            for (var ii = _vertexFloatOffset + _perVertexSize, nn = _vertexFloatOffset + _vertexFloatCount; ii < nn; ii += _perVertexSize) {
                                graphics.lineTo(vbuf[ii], vbuf[ii + 1]);
                            }
                            graphics.close();
                            graphics.stroke();
                        }
                    } else if (isMesh) {
                        triangles = attachment.triangles;
                        _vertexFloatCount = (attachment.worldVerticesLength >> 1) * _perVertexSize;
                        _indexCount = triangles.length;
                        offsetInfo = _buffer.request(_vertexFloatCount / _perVertexSize, _indexCount);
                        _indexOffset = offsetInfo.indiceOffset, _vertexOffset = offsetInfo.vertexOffset, _vertexFloatOffset = offsetInfo.byteOffset >> 2;
                        vbuf = _buffer._vData, ibuf = _buffer._iData;
                        attachment.computeWorldVertices(slot, 0, attachment.worldVerticesLength, vbuf, _vertexFloatOffset, _perVertexSize);
                    }
                    if (_vertexFloatCount == 0 || _indexCount == 0) {
                        clipper.clipEndWithSlot(slot);
                        continue;
                    }
                    ibuf.set(triangles, _indexOffset);
                    uvs = attachment.uvs;
                    for (var v = _vertexFloatOffset, n = _vertexFloatOffset + _vertexFloatCount, u = 0; v < n; v += _perVertexSize, u += 2) {
                        vbuf[v + 2] = uvs[u];
                        vbuf[v + 3] = uvs[u + 1];
                    }
                    attachmentColor = attachment.color, slotColor = slot.color;
                    this.fillVertices(skeletonColor, attachmentColor, slotColor, clipper, slot);
                    if (_indexCount > 0) {
                        for (var _ii = _indexOffset, _nn = _indexOffset + _indexCount; _ii < _nn; _ii++) {
                            ibuf[_ii] += _vertexOffset;
                        }
                        if (worldMat) {
                            _m00 = worldMat.m00;
                            _m04 = worldMat.m04;
                            _m12 = worldMat.m12;
                            _m01 = worldMat.m01;
                            _m05 = worldMat.m05;
                            _m13 = worldMat.m13;
                            for (var _ii2 = _vertexFloatOffset, _nn2 = _vertexFloatOffset + _vertexFloatCount; _ii2 < _nn2; _ii2 += _perVertexSize) {
                                _x = vbuf[_ii2];
                                _y = vbuf[_ii2 + 1];
                                vbuf[_ii2] = _x * _m00 + _y * _m04 + _m12;
                                vbuf[_ii2 + 1] = _x * _m01 + _y * _m05 + _m13;
                            }
                        }
                        _buffer.adjust(_vertexFloatCount / _perVertexSize, _indexCount);
                    }
                    clipper.clipEndWithSlot(slot);
                }
                clipper.clipEnd();
                if (graphics && _debugBones) {
                    var bone = void 0;
                    graphics.strokeColor = _boneColor;
                    graphics.fillColor = _slotColor;
                    for (var i = 0, _n4 = locSkeleton.bones.length; i < _n4; i++) {
                        bone = locSkeleton.bones[i];
                        var x = bone.data.length * bone.a + bone.worldX;
                        var y = bone.data.length * bone.c + bone.worldY;
                        graphics.moveTo(bone.worldX, bone.worldY);
                        graphics.lineTo(x, y);
                        graphics.stroke();
                        graphics.circle(bone.worldX, bone.worldY, Math.PI * 2);
                        graphics.fill();
                        if (i === 0) {
                            graphics.fillColor = _originColor;
                        }
                    }
                }
            },
            cacheTraverse: function cacheTraverse(worldMat) {
                var frame = _comp._curFrame;
                if (!frame)
                    return;
                var segments = frame.segments;
                if (segments.length == 0)
                    return;
                var vbuf = void 0, ibuf = void 0, uintbuf = void 0;
                var material = void 0;
                var offsetInfo = void 0;
                var vertices = frame.vertices;
                var indices = frame.indices;
                var uintVert = frame.uintVert;
                var frameVFOffset = 0, frameIndexOffset = 0, segVFCount = 0;
                if (worldMat) {
                    _m00 = worldMat.m00;
                    _m04 = worldMat.m04;
                    _m12 = worldMat.m12;
                    _m01 = worldMat.m01;
                    _m05 = worldMat.m05;
                    _m13 = worldMat.m13;
                }
                var colorOffset = 0;
                var colors = frame.colors;
                var nowColor = colors[colorOffset++];
                var maxVFOffset = nowColor.vfOffset;
                _handleColor(nowColor);
                for (var i = 0, n = segments.length; i < n; i++) {
                    var segInfo = segments[i];
                    material = _getSlotMaterial(segInfo.tex, segInfo.blendMode);
                    if (!material)
                        continue;
                    if (_mustFlush || material._hash !== _renderer.material._hash) {
                        _mustFlush = false;
                        _renderer._flush();
                        _renderer.node = _node;
                        _renderer.material = material;
                    }
                    _vertexCount = segInfo.vertexCount;
                    _indexCount = segInfo.indexCount;
                    _vertexFloatCount = _vertexCount * _perVertexSize;
                    offsetInfo = _buffer.request(_vertexCount, _indexCount);
                    _indexOffset = offsetInfo.indiceOffset;
                    _vertexOffset = offsetInfo.vertexOffset;
                    _vfOffset = offsetInfo.byteOffset >> 2;
                    vbuf = _buffer._vData;
                    ibuf = _buffer._iData;
                    uintbuf = _buffer._uintVData;
                    for (var ii = _indexOffset, il = _indexOffset + _indexCount; ii < il; ii++) {
                        ibuf[ii] = _vertexOffset + indices[frameIndexOffset++];
                    }
                    segVFCount = segInfo.vfCount;
                    switch (_handleVal) {
                    case NOT_BATCH_ONE_COLOR:
                        for (var _ii3 = _vfOffset, _il = _vfOffset + _vertexFloatCount; _ii3 < _il;) {
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            vbuf[_ii3++] = vertices[frameVFOffset++];
                            uintbuf[_ii3++] = uintVert[frameVFOffset++];
                            frameVFOffset++;
                        }
                        break;
                    case NOT_BATCH_TWO_COLOR:
                        vbuf.set(vertices.subarray(frameVFOffset, frameVFOffset + _vertexFloatCount), _vfOffset);
                        frameVFOffset += _vertexFloatCount;
                        break;
                    case BATCH_ONE_COLOR:
                        for (var _ii4 = _vfOffset, _il2 = _vfOffset + _vertexFloatCount; _ii4 < _il2;) {
                            _x = vertices[frameVFOffset++];
                            _y = vertices[frameVFOffset++];
                            vbuf[_ii4++] = _x * _m00 + _y * _m04 + _m12;
                            vbuf[_ii4++] = _x * _m01 + _y * _m05 + _m13;
                            vbuf[_ii4++] = vertices[frameVFOffset++];
                            vbuf[_ii4++] = vertices[frameVFOffset++];
                            uintbuf[_ii4++] = uintVert[frameVFOffset++];
                            frameVFOffset++;
                        }
                        break;
                    case BATCH_TWO_COLOR:
                        for (var _ii5 = _vfOffset, _il3 = _vfOffset + _vertexFloatCount; _ii5 < _il3;) {
                            _x = vertices[frameVFOffset++];
                            _y = vertices[frameVFOffset++];
                            vbuf[_ii5++] = _x * _m00 + _y * _m04 + _m12;
                            vbuf[_ii5++] = _x * _m01 + _y * _m05 + _m13;
                            vbuf[_ii5++] = vertices[frameVFOffset++];
                            vbuf[_ii5++] = vertices[frameVFOffset++];
                            uintbuf[_ii5++] = uintVert[frameVFOffset++];
                            uintbuf[_ii5++] = uintVert[frameVFOffset++];
                        }
                        break;
                    }
                    _buffer.adjust(_vertexCount, _indexCount);
                    if (!_needColor)
                        continue;
                    var frameColorOffset = frameVFOffset - segVFCount;
                    for (var _ii6 = _vfOffset + 4, _il4 = _vfOffset + 4 + _vertexFloatCount; _ii6 < _il4; _ii6 += _perVertexSize, frameColorOffset += 6) {
                        if (frameColorOffset >= maxVFOffset) {
                            nowColor = colors[colorOffset++];
                            _handleColor(nowColor);
                            maxVFOffset = nowColor.vfOffset;
                        }
                        uintbuf[_ii6] = _finalColor32;
                        _useTint && (uintbuf[_ii6 + 1] = _darkColor32);
                    }
                }
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                if (!comp._skeleton)
                    return;
                var nodeColor = node._color;
                _nodeR = nodeColor.r / 255;
                _nodeG = nodeColor.g / 255;
                _nodeB = nodeColor.b / 255;
                _nodeA = nodeColor.a / 255;
                _useTint = comp.useTint;
                _vertexFormat = _useTint ? VFTwoColor : VFOneColor;
                _perVertexSize = _useTint ? 6 : 5;
                _node = comp.node;
                _buffer = renderer.getBuffer('spine', _vertexFormat);
                _renderer = renderer;
                _comp = comp;
                _mustFlush = true;
                _premultipliedAlpha = comp.premultipliedAlpha;
                _multiplier = 1;
                _handleVal = 0;
                _needColor = false;
                if (nodeColor._val !== 4294967295 || _premultipliedAlpha) {
                    _needColor = true;
                }
                if (_useTint) {
                    _handleVal |= FLAG_TWO_COLOR;
                }
                var worldMat = undefined;
                if (_comp.enableBatch) {
                    worldMat = _node._worldMatrix;
                    _mustFlush = false;
                    _handleVal |= FLAG_BATCH;
                }
                if (comp.isAnimationCached()) {
                    this.cacheTraverse(worldMat);
                } else {
                    this.realTimeTraverse(worldMat);
                }
                _node = undefined;
                _buffer = undefined;
                _renderer = undefined;
                _comp = undefined;
            }
        };
        Skeleton._assembler = spineAssembler;
        module.exports = spineAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,