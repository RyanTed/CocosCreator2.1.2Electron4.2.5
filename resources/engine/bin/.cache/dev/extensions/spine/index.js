(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/spine/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _global = typeof window === 'undefined' ? global : window;
        var _isUseSpine = true;
        if (CC_JSB && _global.spine === undefined) {
            _isUseSpine = false;
        }
        if (_isUseSpine) {
            _global.sp = {};
            sp._timeScale = 1;
            Object.defineProperty(sp, 'timeScale', {
                get: function get() {
                    return this._timeScale;
                },
                set: function set(value) {
                    this._timeScale = value;
                },
                configurable: true
            });
            sp.ATTACHMENT_TYPE = {
                REGION: 0,
                BOUNDING_BOX: 1,
                MESH: 2,
                SKINNED_MESH: 3
            };
            sp.AnimationEventType = cc.Enum({
                START: 0,
                INTERRUPT: 1,
                END: 2,
                DISPOSE: 3,
                COMPLETE: 4,
                EVENT: 5
            });
            if (!CC_EDITOR || !Editor.isMainProcess) {
                if (CC_JSB) {
                    sp.spine = _global.spine;
                } else {
                    sp.spine = require('./lib/spine');
                }
                require('./skeleton-texture');
                require('./skeleton-data');
                require('./Skeleton');
                require('./spine-assembler');
            } else {
                require('./skeleton-data');
            }
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,