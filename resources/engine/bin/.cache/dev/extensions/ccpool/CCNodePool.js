(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/ccpool/CCNodePool.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.NodePool = function (poolHandlerComp) {
            this.poolHandlerComp = poolHandlerComp;
            this._pool = [];
        };
        cc.NodePool.prototype = {
            constructor: cc.NodePool,
            size: function size() {
                return this._pool.length;
            },
            clear: function clear() {
                var count = this._pool.length;
                for (var i = 0; i < count; ++i) {
                    this._pool[i].destroy();
                }
                this._pool.length = 0;
            },
            put: function put(obj) {
                if (obj && this._pool.indexOf(obj) === -1) {
                    obj.removeFromParent(false);
                    var handler = this.poolHandlerComp ? obj.getComponent(this.poolHandlerComp) : null;
                    if (handler && handler.unuse) {
                        handler.unuse();
                    }
                    this._pool.push(obj);
                }
            },
            get: function get() {
                var last = this._pool.length - 1;
                if (last < 0) {
                    return null;
                } else {
                    var obj = this._pool[last];
                    this._pool.length = last;
                    var handler = this.poolHandlerComp ? obj.getComponent(this.poolHandlerComp) : null;
                    if (handler && handler.reuse) {
                        handler.reuse.apply(handler, arguments);
                    }
                    return obj;
                }
            }
        };
        module.exports = cc.NodePool;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,