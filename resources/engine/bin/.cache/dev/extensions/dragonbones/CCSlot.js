(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCSlot.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../../cocos2d/core/vmath');
        var BinaryOffset = dragonBones.BinaryOffset;
        var BoneType = dragonBones.BoneType;
        dragonBones.CCSlot = cc.Class({
            name: 'dragonBones.CCSlot',
            extends: dragonBones.Slot,
            ctor: function ctor() {
                this._localVertices = [];
                this._indices = [];
                this._matrix = _vmath.mat4.create();
                this._worldMatrix = _vmath.mat4.create();
                this._worldMatrixDirty = true;
                this._visible = false;
                this._color = cc.color();
            },
            _onClear: function _onClear() {
                this._super();
                this._localVertices.length = 0;
                this._indices.length = 0;
                _vmath.mat4.identity(this._matrix);
                _vmath.mat4.identity(this._worldMatrix);
                this._worldMatrixDirty = true;
                this._color = cc.color();
                this._visible = false;
            },
            statics: {
                toString: function toString() {
                    return '[class dragonBones.CCSlot]';
                }
            },
            _onUpdateDisplay: function _onUpdateDisplay() {
            },
            _initDisplay: function _initDisplay(value) {
            },
            _addDisplay: function _addDisplay() {
                this._visible = true;
            },
            _replaceDisplay: function _replaceDisplay(value) {
            },
            _removeDisplay: function _removeDisplay() {
                this._visible = false;
            },
            _disposeDisplay: function _disposeDisplay(object) {
            },
            _updateVisible: function _updateVisible() {
            },
            _updateZOrder: function _updateZOrder() {
            },
            _updateBlendMode: function _updateBlendMode() {
                if (this._childArmature) {
                    var childSlots = this._childArmature.getSlots();
                    for (var i = 0, l = childSlots.length; i < l; i++) {
                        var slot = childSlots[i];
                        slot._blendMode = this._blendMode;
                        slot._updateBlendMode();
                    }
                }
            },
            _updateColor: function _updateColor() {
                var c = this._color;
                c.r = this._colorTransform.redMultiplier * 255;
                c.g = this._colorTransform.greenMultiplier * 255;
                c.b = this._colorTransform.blueMultiplier * 255;
                c.a = this._colorTransform.alphaMultiplier * 255;
            },
            getTexture: function getTexture() {
                return this._textureData && this._textureData.spriteFrame && this._textureData.spriteFrame.getTexture();
            },
            _updateFrame: function _updateFrame() {
                this._indices.length = 0;
                var indices = this._indices, localVertices = this._localVertices;
                var indexOffset = 0, vfOffset = 0;
                var currentTextureData = this._textureData;
                if (!this._display || this._displayIndex < 0 || !currentTextureData)
                    return;
                var currentDisplayData = this._displayIndex < this.rawDisplayDatas.length ? this.rawDisplayDatas[this._displayIndex] : null;
                var textureAtlas = this._armature._replacedTexture || currentTextureData.parent.renderTexture;
                if (textureAtlas && (!currentTextureData.spriteFrame || currentTextureData.spriteFrame.getTexture() !== textureAtlas)) {
                    var rect = cc.rect(currentTextureData.region.x, currentTextureData.region.y, currentTextureData.region.width, currentTextureData.region.height);
                    var offset = cc.v2(0, 0);
                    var size = cc.size(currentTextureData.region.width, currentTextureData.region.height);
                    currentTextureData.spriteFrame = new cc.SpriteFrame();
                    currentTextureData.spriteFrame.setTexture(textureAtlas, rect, false, offset, size);
                }
                var textureAtlasWidth = textureAtlas.width;
                var textureAtlasHeight = textureAtlas.height;
                var region = currentTextureData.region;
                var meshData = this._meshData;
                if (meshData) {
                    var scale = this._armature._armatureData.scale;
                    var data = meshData.parent.parent.parent;
                    var intArray = data.intArray;
                    var floatArray = data.floatArray;
                    var vertexCount = intArray[meshData.offset + BinaryOffset.MeshVertexCount];
                    var triangleCount = intArray[meshData.offset + BinaryOffset.MeshTriangleCount];
                    var vertexOffset = intArray[meshData.offset + BinaryOffset.MeshFloatOffset];
                    if (vertexOffset < 0) {
                        vertexOffset += 65536;
                    }
                    var uvOffset = vertexOffset + vertexCount * 2;
                    for (var i = 0, l = vertexCount; i < l; i++) {
                        localVertices[vfOffset++] = floatArray[vertexOffset + i * 2] * scale;
                        localVertices[vfOffset++] = -floatArray[vertexOffset + i * 2 + 1] * scale;
                        localVertices[vfOffset++] = (region.x + floatArray[uvOffset + i * 2] * region.width) / textureAtlasWidth;
                        localVertices[vfOffset++] = (region.y + floatArray[uvOffset + i * 2 + 1] * region.height) / textureAtlasHeight;
                    }
                    for (var _i = 0; _i < triangleCount * 3; ++_i) {
                        indices[indexOffset++] = intArray[meshData.offset + BinaryOffset.MeshVertexIndices + _i];
                    }
                    localVertices.length = vfOffset;
                    indices.length = indexOffset;
                    this._pivotX = 0;
                    this._pivotY = 0;
                } else {
                    var _scale = this._armature.armatureData.scale;
                    this._pivotX = currentDisplayData.pivot.x;
                    this._pivotY = currentDisplayData.pivot.y;
                    var rectData = currentTextureData.frame || currentTextureData.region;
                    var width = rectData.width * _scale;
                    var height = rectData.height * _scale;
                    if (!currentTextureData.frame && currentTextureData.rotated) {
                        width = rectData.height;
                        height = rectData.width;
                    }
                    this._pivotX *= width;
                    this._pivotY *= height;
                    if (currentTextureData.frame) {
                        this._pivotX += currentTextureData.frame.x * _scale;
                        this._pivotY += currentTextureData.frame.y * _scale;
                    }
                    this._pivotY -= region.height * _scale;
                    var _l = region.x / textureAtlasWidth;
                    var b = (region.y + region.height) / textureAtlasHeight;
                    var r = (region.x + region.width) / textureAtlasWidth;
                    var t = region.y / textureAtlasHeight;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = _l;
                    localVertices[vfOffset++] = b;
                    localVertices[vfOffset++] = region.width;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = r;
                    localVertices[vfOffset++] = b;
                    localVertices[vfOffset++] = 0;
                    localVertices[vfOffset++] = region.height;
                    ;
                    localVertices[vfOffset++] = _l;
                    localVertices[vfOffset++] = t;
                    localVertices[vfOffset++] = region.width;
                    localVertices[vfOffset++] = region.height;
                    ;
                    localVertices[vfOffset++] = r;
                    localVertices[vfOffset++] = t;
                    indices[0] = 0;
                    indices[1] = 1;
                    indices[2] = 2;
                    indices[3] = 1;
                    indices[4] = 3;
                    indices[5] = 2;
                    localVertices.length = vfOffset;
                    indices.length = 6;
                    this._blendModeDirty = true;
                }
            },
            _updateMesh: function _updateMesh() {
                var scale = this._armature._armatureData.scale;
                var meshData = this._meshData;
                var hasDeform = this._deformVertices.length > 0 && meshData.inheritDeform;
                var weight = meshData.weight;
                var localVertices = this._localVertices;
                if (weight !== null) {
                    var data = meshData.parent.parent.parent;
                    var intArray = data.intArray;
                    var floatArray = data.floatArray;
                    var vertexCount = intArray[meshData.offset + BinaryOffset.MeshVertexCount];
                    var weightFloatOffset = intArray[weight.offset + BinaryOffset.WeigthFloatOffset];
                    if (weightFloatOffset < 0) {
                        weightFloatOffset += 65536;
                    }
                    for (var i = 0, iB = weight.offset + BinaryOffset.WeigthBoneIndices + weight.bones.length, iV = weightFloatOffset, iF = 0, lvi = 0; i < vertexCount; i++, lvi += 4) {
                        var boneCount = intArray[iB++];
                        var xG = 0, yG = 0;
                        for (var j = 0; j < boneCount; ++j) {
                            var boneIndex = intArray[iB++];
                            var bone = this._meshBones[boneIndex];
                            if (bone !== null) {
                                var matrix = bone.globalTransformMatrix;
                                var _weight = floatArray[iV++];
                                var xL = floatArray[iV++] * scale;
                                var yL = floatArray[iV++] * scale;
                                if (hasDeform) {
                                    xL += this._deformVertices[iF++];
                                    yL += this._deformVertices[iF++];
                                }
                                xG += (matrix.a * xL + matrix.c * yL + matrix.tx) * _weight;
                                yG += (matrix.b * xL + matrix.d * yL + matrix.ty) * _weight;
                            }
                        }
                        localVertices[lvi] = xG;
                        localVertices[lvi + 1] = -yG;
                    }
                } else if (hasDeform) {
                    var isSurface = this._parent._boneData.type !== BoneType.Bone;
                    var _data = meshData.parent.parent.parent;
                    var _intArray = _data.intArray;
                    var _floatArray = _data.floatArray;
                    var _vertexCount = _intArray[meshData.offset + BinaryOffset.MeshVertexCount];
                    var vertexOffset = _intArray[meshData.offset + BinaryOffset.MeshFloatOffset];
                    if (vertexOffset < 0) {
                        vertexOffset += 65536;
                    }
                    for (var _i2 = 0, l = _vertexCount, _lvi = 0; _i2 < l; _i2++, _lvi += 4) {
                        var x = _floatArray[vertexOffset + _i2 * 2] * scale + this._deformVertices[_i2 * 2];
                        var y = _floatArray[vertexOffset + _i2 * 2 + 1] * scale + this._deformVertices[_i2 * 2 + 1];
                        if (isSurface) {
                            var _matrix = this._parent._getGlobalTransformMatrix(x, y);
                            localVertices[_lvi] = _matrix.a * x + _matrix.c * y + _matrix.tx;
                            localVertices[_lvi + 1] = -_matrix.b * x + _matrix.d * y + _matrix.ty;
                        } else {
                            localVertices[_lvi] = x;
                            localVertices[_lvi + 1] = -y;
                        }
                    }
                }
            },
            _updateTransform: function _updateTransform() {
                var t = this._matrix;
                t.m00 = this.globalTransformMatrix.a;
                t.m01 = -this.globalTransformMatrix.b;
                t.m04 = -this.globalTransformMatrix.c;
                t.m05 = this.globalTransformMatrix.d;
                t.m12 = this.globalTransformMatrix.tx - (this.globalTransformMatrix.a * this._pivotX + this.globalTransformMatrix.c * this._pivotY);
                t.m13 = -(this.globalTransformMatrix.ty - (this.globalTransformMatrix.b * this._pivotX + this.globalTransformMatrix.d * this._pivotY));
                this._worldMatrixDirty = true;
            },
            updateWorldMatrix: function updateWorldMatrix() {
                if (!this._armature)
                    return;
                var parentSlot = this._armature._parent;
                if (parentSlot) {
                    parentSlot.updateWorldMatrix();
                }
                if (this._worldMatrixDirty) {
                    this.calculWorldMatrix();
                    var childArmature = this.childArmature;
                    if (!childArmature)
                        return;
                    var slots = childArmature.getSlots();
                    for (var i = 0, n = slots.length; i < n; i++) {
                        var slot = slots[i];
                        if (slot) {
                            slot._worldMatrixDirty = true;
                        }
                    }
                }
            },
            _mulMat: function _mulMat(out, a, b) {
                var aa = a.m00, ab = a.m01, ac = a.m04, ad = a.m05, atx = a.m12, aty = a.m13;
                var ba = b.m00, bb = b.m01, bc = b.m04, bd = b.m05, btx = b.m12, bty = b.m13;
                if (ab !== 0 || ac !== 0) {
                    out.m00 = ba * aa + bb * ac;
                    out.m01 = ba * ab + bb * ad;
                    out.m04 = bc * aa + bd * ac;
                    out.m05 = bc * ab + bd * ad;
                    out.m12 = aa * btx + ac * bty + atx;
                    out.m13 = ab * btx + ad * bty + aty;
                } else {
                    out.m00 = ba * aa;
                    out.m01 = bb * ad;
                    out.m04 = bc * aa;
                    out.m05 = bd * ad;
                    out.m12 = aa * btx + atx;
                    out.m13 = ad * bty + aty;
                }
            },
            calculWorldMatrix: function calculWorldMatrix() {
                var parent = this._armature._parent;
                if (parent) {
                    this._mulMat(this._worldMatrix, parent._worldMatrix, this._matrix);
                } else {
                    _vmath.mat4.copy(this._worldMatrix, this._matrix);
                }
                this._worldMatrixDirty = false;
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,