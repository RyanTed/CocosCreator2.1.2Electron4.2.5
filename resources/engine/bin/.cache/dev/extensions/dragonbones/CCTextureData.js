(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCTextureData.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        dragonBones.CCTextureAtlasData = cc.Class({
            extends: dragonBones.TextureAtlasData,
            properties: {
                texture: {
                    default: null,
                    serializable: false
                }
            },
            statics: {
                toString: function toString() {
                    return '[class dragonBones.CCTextureAtlasData]';
                }
            },
            _onClear: function _onClear() {
                dragonBones.TextureAtlasData.prototype._onClear.call(this);
                this.texture = null;
            },
            createTexture: function createTexture() {
                return dragonBones.BaseObject.borrowObject(dragonBones.CCTextureData);
            }
        });
        dragonBones.CCTextureData = cc.Class({
            extends: dragonBones.TextureData,
            properties: {
                texture: {
                    default: null,
                    serializable: false
                }
            },
            statics: {
                toString: function toString() {
                    return '[class dragonBones.CCTextureData]';
                }
            },
            _onClear: function _onClear() {
                dragonBones.TextureData.prototype._onClear.call(this);
                this.texture = null;
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,