(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/ArmatureCache.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var MaxCacheTime = 30;
        var FrameTime = 1 / 60;
        var _vertices = [];
        var _indices = [];
        var _vertexOffset = 0;
        var _indexOffset = 0;
        var _vfOffset = 0;
        var _preTexUrl = null;
        var _preBlendMode = null;
        var _segVCount = 0;
        var _segICount = 0;
        var _segOffset = 0;
        var _colorOffset = 0;
        var _preColor = null;
        var _x = void 0, _y = void 0;
        var AnimationCache = cc.Class({
            ctor: function ctor() {
                this.frames = [];
                this.totalTime = 0;
                this.isCompleted = false;
                this._frameIdx = -1;
                this._armatureInfo = null;
                this._animationName = null;
                this._tempSegments = null;
                this._tempColors = null;
            },
            init: function init(armatureInfo, animationName) {
                this._armatureInfo = armatureInfo;
                this._animationName = animationName;
            },
            clear: function clear() {
                for (var i = 0, n = this.frames.length; i < n; i++) {
                    var frame = this.frames[i];
                    frame.segments.length = 0;
                }
            },
            begin: function begin() {
                var armatureInfo = this._armatureInfo;
                if (armatureInfo.curAnimationCache) {
                    armatureInfo.curAnimationCache.updateToFrame();
                }
                var armature = armatureInfo.armature;
                var animation = armature.animation;
                animation.play(this._animationName, 1);
                armatureInfo.curAnimationCache = this;
                this._frameIdx = -1;
                this.totalTime = 0;
                this.isCompleted = false;
            },
            end: function end() {
                if (!this._needToUpdate()) {
                    this._armatureInfo.curAnimationCache = null;
                    this.frames.length = this._frameIdx + 1;
                    this.isCompleted = true;
                }
            },
            _needToUpdate: function _needToUpdate(toFrameIdx) {
                var armatureInfo = this._armatureInfo;
                var armature = armatureInfo.armature;
                var animation = armature.animation;
                return !animation.isCompleted && this.totalTime < MaxCacheTime && (toFrameIdx == undefined || this._frameIdx < toFrameIdx);
            },
            updateToFrame: function updateToFrame(toFrameIdx) {
                if (!this._needToUpdate(toFrameIdx))
                    return;
                var armatureInfo = this._armatureInfo;
                var armature = armatureInfo.armature;
                do {
                    armature.advanceTime(FrameTime);
                    this._frameIdx++;
                    this._updateFrame(armature, this._frameIdx);
                    this.totalTime += FrameTime;
                } while (this._needToUpdate(toFrameIdx));
                this.end();
            },
            updateAllFrame: function updateAllFrame() {
                this.begin();
                this.updateToFrame();
            },
            _updateFrame: function _updateFrame(armature, index) {
                _vfOffset = 0;
                _indexOffset = 0;
                _vertexOffset = 0;
                _preTexUrl = null;
                _preBlendMode = null;
                _segVCount = 0;
                _segICount = 0;
                _segOffset = 0;
                _colorOffset = 0;
                _preColor = null;
                this.frames[index] = this.frames[index] || {
                    segments: [],
                    colors: [],
                    vertices: null,
                    uintVert: null,
                    indices: null
                };
                var frame = this.frames[index];
                var segments = this._tempSegments = frame.segments;
                var colors = this._tempColors = frame.colors;
                this._traverseArmature(armature);
                if (_colorOffset > 0) {
                    colors[_colorOffset - 1].vfOffset = _vfOffset;
                }
                colors.length = _colorOffset;
                var preSegOffset = _segOffset - 1;
                if (preSegOffset >= 0) {
                    if (_segICount > 0) {
                        var preSegInfo = segments[preSegOffset];
                        preSegInfo.indexCount = _segICount;
                        preSegInfo.vfCount = _segVCount * 5;
                        preSegInfo.vertexCount = _segVCount;
                        segments.length = _segOffset;
                    } else {
                        segments.length = _segOffset - 1;
                    }
                }
                if (segments.length === 0)
                    return;
                var vertices = frame.vertices || new Float32Array(_vfOffset);
                var uintVert = frame.uintVert || new Uint32Array(vertices.buffer);
                for (var i = 0, j = 0; i < _vfOffset;) {
                    vertices[i++] = _vertices[j++];
                    vertices[i++] = _vertices[j++];
                    vertices[i++] = _vertices[j++];
                    vertices[i++] = _vertices[j++];
                    uintVert[i++] = _vertices[j++];
                }
                var indices = frame.indices || new Uint16Array(_indexOffset);
                for (var _i = 0; _i < _indexOffset; _i++) {
                    indices[_i] = _indices[_i];
                }
                frame.vertices = vertices;
                frame.uintVert = uintVert;
                frame.indices = indices;
            },
            _traverseArmature: function _traverseArmature(armature) {
                var colors = this._tempColors;
                var segments = this._tempSegments;
                var gVertices = _vertices;
                var gIndices = _indices;
                var slotVertices = void 0, slotIndices = void 0;
                var slots = armature._slots, slot = void 0, slotMatrix = void 0, slotColor = void 0, colorVal = void 0;
                var texture = void 0;
                var preSegOffset = void 0, preSegInfo = void 0;
                for (var i = 0, l = slots.length; i < l; i++) {
                    slot = slots[i];
                    if (!slot._visible || !slot._displayData)
                        continue;
                    slot.updateWorldMatrix();
                    if (slot.childArmature) {
                        this._traverseArmature(slot.childArmature);
                        continue;
                    }
                    texture = slot.getTexture();
                    if (!texture)
                        continue;
                    slotColor = slot._color;
                    if (_preTexUrl !== texture.url || _preBlendMode !== slot._blendMode) {
                        _preTexUrl = texture.url;
                        _preBlendMode = slot._blendMode;
                        preSegOffset = _segOffset - 1;
                        if (preSegOffset >= 0) {
                            if (_segICount > 0) {
                                preSegInfo = segments[preSegOffset];
                                preSegInfo.indexCount = _segICount;
                                preSegInfo.vertexCount = _segVCount;
                                preSegInfo.vfCount = _segVCount * 5;
                            } else {
                                _segOffset--;
                            }
                        }
                        segments[_segOffset] = {
                            tex: texture,
                            blendMode: slot._blendMode,
                            indexCount: 0,
                            vertexCount: 0,
                            vfCount: 0
                        };
                        _segOffset++;
                        _segICount = 0;
                        _segVCount = 0;
                    }
                    colorVal = (slotColor.a << 24 >>> 0) + (slotColor.b << 16) + (slotColor.g << 8) + slotColor.r;
                    if (_preColor !== colorVal) {
                        _preColor = colorVal;
                        if (_colorOffset > 0) {
                            colors[_colorOffset - 1].vfOffset = _vfOffset;
                        }
                        colors[_colorOffset++] = {
                            r: slotColor.r,
                            g: slotColor.g,
                            b: slotColor.b,
                            a: slotColor.a,
                            vfOffset: 0
                        };
                    }
                    slotVertices = slot._localVertices;
                    slotIndices = slot._indices;
                    slotMatrix = slot._worldMatrix;
                    for (var j = 0, vl = slotVertices.length; j < vl;) {
                        _x = slotVertices[j++];
                        _y = slotVertices[j++];
                        gVertices[_vfOffset++] = _x * slotMatrix.m00 + _y * slotMatrix.m04 + slotMatrix.m12;
                        gVertices[_vfOffset++] = _x * slotMatrix.m01 + _y * slotMatrix.m05 + slotMatrix.m13;
                        gVertices[_vfOffset++] = slotVertices[j++];
                        gVertices[_vfOffset++] = slotVertices[j++];
                        gVertices[_vfOffset++] = colorVal;
                    }
                    for (var ii = 0, il = slotIndices.length; ii < il; ii++) {
                        gIndices[_indexOffset++] = _segVCount + slotIndices[ii];
                    }
                    _vertexOffset = _vfOffset / 5;
                    _segICount += slotIndices.length;
                    _segVCount += slotVertices.length / 4;
                }
            }
        });
        var ArmatureCache = cc.Class({
            ctor: function ctor() {
                this._animationPool = {};
                this._armatureCache = {};
            },
            dispose: function dispose() {
                for (var key in this._armatureCache) {
                    var armatureInfo = this._armatureCache[key];
                    if (armatureInfo) {
                        var armature = armatureInfo.armature;
                        armature && armature.dispose();
                    }
                }
                this._armatureCache = null;
                this._animationPool = null;
            },
            _removeArmature: function _removeArmature(armatureKey) {
                var armatureInfo = this._armatureCache[armatureKey];
                var animationsCache = armatureInfo.animationsCache;
                for (var aniKey in animationsCache) {
                    var animationCache = animationsCache[aniKey];
                    if (!animationCache)
                        continue;
                    this._animationPool[armatureKey + '#' + aniKey] = animationCache;
                    animationCache.clear();
                }
                var armature = armatureInfo.armature;
                armature && armature.dispose();
                delete this._armatureCache[armatureKey];
            },
            resetArmature: function resetArmature(uuid) {
                for (var armatureKey in this._armatureCache) {
                    if (armatureKey.indexOf(uuid) == -1)
                        continue;
                    this._removeArmature(armatureKey);
                }
            },
            getArmatureCache: function getArmatureCache(armatureName, armatureKey, atlasUUID) {
                var armatureInfo = this._armatureCache[armatureKey];
                var armature = void 0;
                if (!armatureInfo) {
                    var factory = dragonBones.CCFactory.getInstance();
                    var proxy = factory.buildArmatureDisplay(armatureName, armatureKey, '', atlasUUID);
                    if (!proxy || !proxy._armature)
                        return;
                    armature = proxy._armature;
                    if (!ArmatureCache.canCache(armature)) {
                        armature.dispose();
                        return;
                    }
                    this._armatureCache[armatureKey] = {
                        armature: armature,
                        animationsCache: {},
                        curAnimationCache: null
                    };
                } else {
                    armature = armatureInfo.armature;
                }
                return armature;
            },
            getAnimationCache: function getAnimationCache(armatureKey, animationName) {
                var armatureInfo = this._armatureCache[armatureKey];
                if (!armatureInfo)
                    return null;
                var animationsCache = armatureInfo.animationsCache;
                return animationsCache[animationName];
            },
            initAnimationCache: function initAnimationCache(armatureKey, animationName) {
                if (!animationName)
                    return null;
                var armatureInfo = this._armatureCache[armatureKey];
                var armature = armatureInfo && armatureInfo.armature;
                if (!armature)
                    return null;
                var animation = armature.animation;
                var hasAni = animation.hasAnimation(animationName);
                if (!hasAni)
                    return null;
                var animationsCache = armatureInfo.animationsCache;
                var animationCache = animationsCache[animationName];
                if (!animationCache) {
                    var poolKey = armatureKey + '#' + animationName;
                    animationCache = this._animationPool[poolKey];
                    if (animationCache) {
                        delete this._animationPool[poolKey];
                    } else {
                        animationCache = new AnimationCache();
                    }
                    animationCache.init(armatureInfo, animationName);
                    animationsCache[animationName] = animationCache;
                }
                return animationCache;
            },
            updateAnimationCache: function updateAnimationCache(armatureKey, animationName) {
                var animationCache = this.initAnimationCache(armatureKey, animationName);
                if (!animationCache)
                    return;
                animationCache.updateAllFrame();
                if (animationCache.totalTime >= MaxCacheTime) {
                    cc.warn('Animation cache is overflow, maybe animation\'s frame is infinite, please change armature render mode to REALTIME, dragonbones uuid is [%s], animation name is [%s]', armatureKey, animationName);
                }
                return animationCache;
            }
        });
        ArmatureCache.FrameTime = FrameTime;
        ArmatureCache.sharedCache = new ArmatureCache();
        ArmatureCache.canCache = function (armature) {
            var slots = armature._slots;
            for (var i = 0, l = slots.length; i < l; i++) {
                var slot = slots[i];
                if (slot.childArmature) {
                    return false;
                }
            }
            return true;
        }, module.exports = ArmatureCache;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,