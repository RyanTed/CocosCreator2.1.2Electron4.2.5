(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extensions/dragonbones/CCFactory.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BaseObject = dragonBones.BaseObject, BaseFactory = dragonBones.BaseFactory;
        var CCFactory = dragonBones.CCFactory = cc.Class({
            name: 'dragonBones.CCFactory',
            extends: BaseFactory,
            statics: {
                _factory: null,
                getInstance: function getInstance() {
                    if (!CCFactory._factory) {
                        CCFactory._factory = new CCFactory();
                    }
                    return CCFactory._factory;
                }
            },
            ctor: function ctor() {
                var eventManager = new dragonBones.CCArmatureDisplay();
                this._dragonBones = new dragonBones.DragonBones(eventManager);
                if (!CC_JSB && !CC_EDITOR && cc.director._scheduler) {
                    cc.game.on(cc.game.EVENT_RESTART, this.initUpdate, this);
                    this.initUpdate();
                }
            },
            initUpdate: function initUpdate(dt) {
                cc.director._scheduler.enableForTarget(this);
                cc.director._scheduler.scheduleUpdate(this, cc.Scheduler.PRIORITY_SYSTEM, false);
            },
            update: function update(dt) {
                this._dragonBones.advanceTime(dt);
            },
            getDragonBonesDataByRawData: function getDragonBonesDataByRawData(rawData) {
                var dataParser = rawData instanceof ArrayBuffer ? BaseFactory._binaryParser : this._dataParser;
                return dataParser.parseDragonBonesData(rawData, 1);
            },
            buildArmatureDisplay: function buildArmatureDisplay(armatureName, dragonBonesName, skinName, textureAtlasName) {
                var armature = this.buildArmature(armatureName, dragonBonesName, skinName, textureAtlasName);
                return armature && armature._display;
            },
            createArmatureNode: function createArmatureNode(comp, armatureName, node) {
                node = node || new cc.Node();
                var display = node.getComponent(dragonBones.ArmatureDisplay);
                if (!display) {
                    display = node.addComponent(dragonBones.ArmatureDisplay);
                }
                node.name = armatureName;
                display._armatureName = armatureName;
                display._N$dragonAsset = comp.dragonAsset;
                display._N$dragonAtlasAsset = comp.dragonAtlasAsset;
                display._init();
                return display;
            },
            _buildTextureAtlasData: function _buildTextureAtlasData(textureAtlasData, textureAtlas) {
                if (textureAtlasData) {
                    textureAtlasData.renderTexture = textureAtlas;
                } else {
                    textureAtlasData = BaseObject.borrowObject(dragonBones.CCTextureAtlasData);
                }
                return textureAtlasData;
            },
            _sortSlots: function _sortSlots() {
                var slots = this._slots;
                var sortedSlots = [];
                for (var i = 0, l = slots.length; i < l; i++) {
                    var slot = slots[i];
                    var zOrder = slot._zOrder;
                    var inserted = false;
                    for (var j = sortedSlots.length - 1; j >= 0; j--) {
                        if (zOrder >= sortedSlots[j]._zOrder) {
                            sortedSlots.splice(j + 1, 0, slot);
                            inserted = true;
                            break;
                        }
                    }
                    if (!inserted) {
                        sortedSlots.splice(0, 0, slot);
                    }
                }
                this._slots = sortedSlots;
            },
            _buildArmature: function _buildArmature(dataPackage) {
                var armature = BaseObject.borrowObject(dragonBones.Armature);
                armature._skinData = dataPackage.skin;
                armature._animation = BaseObject.borrowObject(dragonBones.Animation);
                armature._animation._armature = armature;
                armature._animation.animations = dataPackage.armature.animations;
                armature._isChildArmature = false;
                var display = new dragonBones.CCArmatureDisplay();
                armature.init(dataPackage.armature, display, display, this._dragonBones);
                return armature;
            },
            _buildSlot: function _buildSlot(dataPackage, slotData, displays) {
                var slot = BaseObject.borrowObject(dragonBones.CCSlot);
                var display = slot;
                slot.init(slotData, displays, display, display);
                return slot;
            },
            getDragonBonesDataByUUID: function getDragonBonesDataByUUID(uuid) {
                for (var name in this._dragonBonesDataMap) {
                    if (name.indexOf(uuid) != -1) {
                        return this._dragonBonesDataMap[name];
                    }
                }
                return null;
            },
            removeDragonBonesDataByUUID: function removeDragonBonesDataByUUID(uuid, disposeData) {
                if (disposeData === void 0) {
                    disposeData = true;
                }
                for (var name in this._dragonBonesDataMap) {
                    if (name.indexOf(uuid) === -1)
                        continue;
                    if (disposeData) {
                        this._dragonBones.bufferObject(this._dragonBonesDataMap[name]);
                    }
                    delete this._dragonBonesDataMap[name];
                }
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDRmFjdG9yeS5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2V4dGVuc2lvbnMvZHJhZ29uYm9uZXMvQ0NGYWN0b3J5LmpzIl0sIm5hbWVzIjpbIkJhc2VPYmplY3QiLCJkcmFnb25Cb25lcyIsIkJhc2VGYWN0b3J5IiwiQ0NGYWN0b3J5IiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwic3RhdGljcyIsIl9mYWN0b3J5IiwiZ2V0SW5zdGFuY2UiLCJjdG9yIiwiZXZlbnRNYW5hZ2VyIiwiQ0NBcm1hdHVyZURpc3BsYXkiLCJfZHJhZ29uQm9uZXMiLCJEcmFnb25Cb25lcyIsIkNDX0pTQiIsIkNDX0VESVRPUiIsImRpcmVjdG9yIiwiX3NjaGVkdWxlciIsImdhbWUiLCJvbiIsIkVWRU5UX1JFU1RBUlQiLCJpbml0VXBkYXRlIiwiZHQiLCJlbmFibGVGb3JUYXJnZXQiLCJzY2hlZHVsZVVwZGF0ZSIsIlNjaGVkdWxlciIsIlBSSU9SSVRZX1NZU1RFTSIsInVwZGF0ZSIsImFkdmFuY2VUaW1lIiwiZ2V0RHJhZ29uQm9uZXNEYXRhQnlSYXdEYXRhIiwicmF3RGF0YSIsImRhdGFQYXJzZXIiLCJBcnJheUJ1ZmZlciIsIl9iaW5hcnlQYXJzZXIiLCJfZGF0YVBhcnNlciIsInBhcnNlRHJhZ29uQm9uZXNEYXRhIiwiYnVpbGRBcm1hdHVyZURpc3BsYXkiLCJhcm1hdHVyZU5hbWUiLCJkcmFnb25Cb25lc05hbWUiLCJza2luTmFtZSIsInRleHR1cmVBdGxhc05hbWUiLCJhcm1hdHVyZSIsImJ1aWxkQXJtYXR1cmUiLCJfZGlzcGxheSIsImNyZWF0ZUFybWF0dXJlTm9kZSIsImNvbXAiLCJub2RlIiwiTm9kZSIsImRpc3BsYXkiLCJnZXRDb21wb25lbnQiLCJBcm1hdHVyZURpc3BsYXkiLCJhZGRDb21wb25lbnQiLCJfYXJtYXR1cmVOYW1lIiwiX04kZHJhZ29uQXNzZXQiLCJkcmFnb25Bc3NldCIsIl9OJGRyYWdvbkF0bGFzQXNzZXQiLCJkcmFnb25BdGxhc0Fzc2V0IiwiX2luaXQiLCJfYnVpbGRUZXh0dXJlQXRsYXNEYXRhIiwidGV4dHVyZUF0bGFzRGF0YSIsInRleHR1cmVBdGxhcyIsInJlbmRlclRleHR1cmUiLCJib3Jyb3dPYmplY3QiLCJDQ1RleHR1cmVBdGxhc0RhdGEiLCJfc29ydFNsb3RzIiwic2xvdHMiLCJfc2xvdHMiLCJzb3J0ZWRTbG90cyIsImkiLCJsIiwibGVuZ3RoIiwic2xvdCIsInpPcmRlciIsIl96T3JkZXIiLCJpbnNlcnRlZCIsImoiLCJzcGxpY2UiLCJfYnVpbGRBcm1hdHVyZSIsImRhdGFQYWNrYWdlIiwiQXJtYXR1cmUiLCJfc2tpbkRhdGEiLCJza2luIiwiX2FuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIl9hcm1hdHVyZSIsImFuaW1hdGlvbnMiLCJfaXNDaGlsZEFybWF0dXJlIiwiaW5pdCIsIl9idWlsZFNsb3QiLCJzbG90RGF0YSIsImRpc3BsYXlzIiwiQ0NTbG90IiwiZ2V0RHJhZ29uQm9uZXNEYXRhQnlVVUlEIiwidXVpZCIsIl9kcmFnb25Cb25lc0RhdGFNYXAiLCJpbmRleE9mIiwicmVtb3ZlRHJhZ29uQm9uZXNEYXRhQnlVVUlEIiwiZGlzcG9zZURhdGEiLCJidWZmZXJPYmplY3QiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQXlCQSxJQUFJQSxVQUFBQSxHQUFhQyxXQUFBQSxDQUFZRCxVQUE3QixFQUNJRSxXQUFBQSxHQUFjRCxXQUFBQSxDQUFZQyxXQUQ5QjtRQVdBLElBQUlDLFNBQUFBLEdBQVlGLFdBQUFBLENBQVlFLFNBQVpGLEdBQXdCRyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDN0NFLElBQUFBLEVBQU0sdUJBRHVDO0FBQUEsWUFFN0NDLE9BQUFBLEVBQVNMLFdBRm9DO0FBQUEsWUFVN0NNLE9BQUFBLEVBQVM7QUFBQSxnQkFDTEMsUUFBQUEsRUFBVSxJQURMO0FBQUEsZ0JBRUxDLFdBQUFBLEVBRkssU0FBQSxXQUFBLEdBRVU7QUFBQSxvQkFDWCxJQUFJLENBQUNQLFNBQUFBLENBQVVNLFFBQWYsRUFBeUI7QUFBQSx3QkFDckJOLFNBQUFBLENBQVVNLFFBQVZOLEdBQXFCLElBQUlBLFNBQUosRUFBckJBLENBRHFCO0FBQUEscUJBRGQ7QUFBQSxvQkFJWCxPQUFPQSxTQUFBQSxDQUFVTSxRQUFqQixDQUpXO0FBQUEsaUJBRlY7QUFBQSxhQVZvQztBQUFBLFlBb0I3Q0UsSUFBQUEsRUFwQjZDLFNBQUEsSUFBQSxHQW9CckM7QUFBQSxnQkFDSixJQUFJQyxZQUFBQSxHQUFlLElBQUlYLFdBQUFBLENBQVlZLGlCQUFoQixFQUFuQixDQURJO0FBQUEsZ0JBRUosS0FBS0MsWUFBTCxHQUFvQixJQUFJYixXQUFBQSxDQUFZYyxXQUFoQixDQUE0QkgsWUFBNUIsQ0FBcEIsQ0FGSTtBQUFBLGdCQUlKLElBQUksQ0FBQ0ksTUFBRCxJQUFXLENBQUNDLFNBQVosSUFBeUJiLEVBQUFBLENBQUdjLFFBQUhkLENBQVllLFVBQXpDLEVBQXFEO0FBQUEsb0JBQ2pEZixFQUFBQSxDQUFHZ0IsSUFBSGhCLENBQVFpQixFQUFSakIsQ0FBV0EsRUFBQUEsQ0FBR2dCLElBQUhoQixDQUFRa0IsYUFBbkJsQixFQUFrQyxLQUFLbUIsVUFBdkNuQixFQUFtRCxJQUFuREEsRUFEaUQ7QUFBQSxvQkFFakQsS0FBS21CLFVBQUwsR0FGaUQ7QUFBQSxpQkFKakQ7QUFBQSxhQXBCcUM7QUFBQSxZQThCN0NBLFVBQUFBLEVBOUI2QyxTQUFBLFVBQUEsQ0E4QmpDQyxFQTlCaUMsRUE4QjdCO0FBQUEsZ0JBQ1pwQixFQUFBQSxDQUFHYyxRQUFIZCxDQUFZZSxVQUFaZixDQUF1QnFCLGVBQXZCckIsQ0FBdUMsSUFBdkNBLEVBRFk7QUFBQSxnQkFFWkEsRUFBQUEsQ0FBR2MsUUFBSGQsQ0FBWWUsVUFBWmYsQ0FBdUJzQixjQUF2QnRCLENBQXNDLElBQXRDQSxFQUE0Q0EsRUFBQUEsQ0FBR3VCLFNBQUh2QixDQUFhd0IsZUFBekR4QixFQUEwRSxLQUExRUEsRUFGWTtBQUFBLGFBOUI2QjtBQUFBLFlBbUM3Q3lCLE1BQUFBLEVBbkM2QyxTQUFBLE1BQUEsQ0FtQ3JDTCxFQW5DcUMsRUFtQ2pDO0FBQUEsZ0JBQ1IsS0FBS1YsWUFBTCxDQUFrQmdCLFdBQWxCLENBQThCTixFQUE5QixFQURRO0FBQUEsYUFuQ2lDO0FBQUEsWUF1QzdDTywyQkFBQUEsRUF2QzZDLFNBQUEsMkJBQUEsQ0F1Q2hCQyxPQXZDZ0IsRUF1Q1A7QUFBQSxnQkFDbEMsSUFBSUMsVUFBQUEsR0FBYUQsT0FBQUEsWUFBbUJFLFdBQW5CRixHQUFpQzlCLFdBQUFBLENBQVlpQyxhQUE3Q0gsR0FBNkQsS0FBS0ksV0FBbkYsQ0FEa0M7QUFBQSxnQkFFbEMsT0FBT0gsVUFBQUEsQ0FBV0ksb0JBQVhKLENBQWdDRCxPQUFoQ0MsRUFBeUMsQ0FBekNBLENBQVAsQ0FGa0M7QUFBQSxhQXZDTztBQUFBLFlBNkM3Q0ssb0JBQUFBLEVBN0M2QyxTQUFBLG9CQUFBLENBNkN2QkMsWUE3Q3VCLEVBNkNUQyxlQTdDUyxFQTZDUUMsUUE3Q1IsRUE2Q2tCQyxnQkE3Q2xCLEVBNkNvQztBQUFBLGdCQUM3RSxJQUFJQyxRQUFBQSxHQUFXLEtBQUtDLGFBQUwsQ0FBbUJMLFlBQW5CLEVBQWlDQyxlQUFqQyxFQUFrREMsUUFBbEQsRUFBNERDLGdCQUE1RCxDQUFmLENBRDZFO0FBQUEsZ0JBRTdFLE9BQU9DLFFBQUFBLElBQVlBLFFBQUFBLENBQVNFLFFBQTVCLENBRjZFO0FBQUEsYUE3Q3BDO0FBQUEsWUFxRDdDQyxrQkFBQUEsRUFyRDZDLFNBQUEsa0JBQUEsQ0FxRHpCQyxJQXJEeUIsRUFxRG5CUixZQXJEbUIsRUFxRExTLElBckRLLEVBcURDO0FBQUEsZ0JBQzFDQSxJQUFBQSxHQUFPQSxJQUFBQSxJQUFRLElBQUk1QyxFQUFBQSxDQUFHNkMsSUFBUCxFQUFmRCxDQUQwQztBQUFBLGdCQUUxQyxJQUFJRSxPQUFBQSxHQUFVRixJQUFBQSxDQUFLRyxZQUFMSCxDQUFrQi9DLFdBQUFBLENBQVltRCxlQUE5QkosQ0FBZCxDQUYwQztBQUFBLGdCQUcxQyxJQUFJLENBQUNFLE9BQUwsRUFBYztBQUFBLG9CQUNWQSxPQUFBQSxHQUFVRixJQUFBQSxDQUFLSyxZQUFMTCxDQUFrQi9DLFdBQUFBLENBQVltRCxlQUE5QkosQ0FBVkUsQ0FEVTtBQUFBLGlCQUg0QjtBQUFBLGdCQU8xQ0YsSUFBQUEsQ0FBSzFDLElBQUwwQyxHQUFZVCxZQUFaUyxDQVAwQztBQUFBLGdCQVMxQ0UsT0FBQUEsQ0FBUUksYUFBUkosR0FBd0JYLFlBQXhCVyxDQVQwQztBQUFBLGdCQVUxQ0EsT0FBQUEsQ0FBUUssY0FBUkwsR0FBeUJILElBQUFBLENBQUtTLFdBQTlCTixDQVYwQztBQUFBLGdCQVcxQ0EsT0FBQUEsQ0FBUU8sbUJBQVJQLEdBQThCSCxJQUFBQSxDQUFLVyxnQkFBbkNSLENBWDBDO0FBQUEsZ0JBWTFDQSxPQUFBQSxDQUFRUyxLQUFSVCxHQVowQztBQUFBLGdCQWMxQyxPQUFPQSxPQUFQLENBZDBDO0FBQUEsYUFyREQ7QUFBQSxZQXNFN0NVLHNCQUFBQSxFQXRFNkMsU0FBQSxzQkFBQSxDQXNFckJDLGdCQXRFcUIsRUFzRUhDLFlBdEVHLEVBc0VXO0FBQUEsZ0JBQ3BELElBQUlELGdCQUFKLEVBQXNCO0FBQUEsb0JBQ2xCQSxnQkFBQUEsQ0FBaUJFLGFBQWpCRixHQUFpQ0MsWUFBakNELENBRGtCO0FBQUEsaUJBQXRCLE1BR0s7QUFBQSxvQkFDREEsZ0JBQUFBLEdBQW1CN0QsVUFBQUEsQ0FBV2dFLFlBQVhoRSxDQUF3QkMsV0FBQUEsQ0FBWWdFLGtCQUFwQ2pFLENBQW5CNkQsQ0FEQztBQUFBLGlCQUorQztBQUFBLGdCQU9wRCxPQUFPQSxnQkFBUCxDQVBvRDtBQUFBLGFBdEVYO0FBQUEsWUFnRjdDSyxVQUFBQSxFQWhGNkMsU0FBQSxVQUFBLEdBZ0YvQjtBQUFBLGdCQUNWLElBQUlDLEtBQUFBLEdBQVEsS0FBS0MsTUFBakIsQ0FEVTtBQUFBLGdCQUVWLElBQUlDLFdBQUFBLEdBQWMsRUFBbEIsQ0FGVTtBQUFBLGdCQUdWLEtBQUssSUFBSUMsQ0FBQUEsR0FBSSxDQUFSLEVBQVdDLENBQUFBLEdBQUlKLEtBQUFBLENBQU1LLE1BQXJCLENBQUwsQ0FBa0NGLENBQUFBLEdBQUlDLENBQXRDLEVBQXlDRCxDQUFBQSxFQUF6QyxFQUE4QztBQUFBLG9CQUMxQyxJQUFJRyxJQUFBQSxHQUFPTixLQUFBQSxDQUFNRyxDQUFOSCxDQUFYLENBRDBDO0FBQUEsb0JBRTFDLElBQUlPLE1BQUFBLEdBQVNELElBQUFBLENBQUtFLE9BQWxCLENBRjBDO0FBQUEsb0JBRzFDLElBQUlDLFFBQUFBLEdBQVcsS0FBZixDQUgwQztBQUFBLG9CQUkxQyxLQUFLLElBQUlDLENBQUFBLEdBQUlSLFdBQUFBLENBQVlHLE1BQVpILEdBQXFCLENBQTdCLENBQUwsQ0FBcUNRLENBQUFBLElBQUssQ0FBMUMsRUFBNkNBLENBQUFBLEVBQTdDLEVBQWtEO0FBQUEsd0JBQzlDLElBQUlILE1BQUFBLElBQVVMLFdBQUFBLENBQVlRLENBQVpSLEVBQWVNLE9BQTdCLEVBQXNDO0FBQUEsNEJBQ2xDTixXQUFBQSxDQUFZUyxNQUFaVCxDQUFtQlEsQ0FBQUEsR0FBRSxDQUFyQlIsRUFBd0IsQ0FBeEJBLEVBQTJCSSxJQUEzQkosRUFEa0M7QUFBQSw0QkFFbENPLFFBQUFBLEdBQVcsSUFBWEEsQ0FGa0M7QUFBQSw0QkFHbEMsTUFIa0M7QUFBQSx5QkFEUTtBQUFBLHFCQUpSO0FBQUEsb0JBVzFDLElBQUksQ0FBQ0EsUUFBTCxFQUFlO0FBQUEsd0JBQ1hQLFdBQUFBLENBQVlTLE1BQVpULENBQW1CLENBQW5CQSxFQUFzQixDQUF0QkEsRUFBeUJJLElBQXpCSixFQURXO0FBQUEscUJBWDJCO0FBQUEsaUJBSHBDO0FBQUEsZ0JBa0JWLEtBQUtELE1BQUwsR0FBY0MsV0FBZCxDQWxCVTtBQUFBLGFBaEYrQjtBQUFBLFlBcUc3Q1UsY0FBQUEsRUFyRzZDLFNBQUEsY0FBQSxDQXFHN0JDLFdBckc2QixFQXFHaEI7QUFBQSxnQkFDekIsSUFBSXJDLFFBQUFBLEdBQVczQyxVQUFBQSxDQUFXZ0UsWUFBWGhFLENBQXdCQyxXQUFBQSxDQUFZZ0YsUUFBcENqRixDQUFmLENBRHlCO0FBQUEsZ0JBR3pCMkMsUUFBQUEsQ0FBU3VDLFNBQVR2QyxHQUFxQnFDLFdBQUFBLENBQVlHLElBQWpDeEMsQ0FIeUI7QUFBQSxnQkFJekJBLFFBQUFBLENBQVN5QyxVQUFUekMsR0FBc0IzQyxVQUFBQSxDQUFXZ0UsWUFBWGhFLENBQXdCQyxXQUFBQSxDQUFZb0YsU0FBcENyRixDQUF0QjJDLENBSnlCO0FBQUEsZ0JBS3pCQSxRQUFBQSxDQUFTeUMsVUFBVHpDLENBQW9CMkMsU0FBcEIzQyxHQUFnQ0EsUUFBaENBLENBTHlCO0FBQUEsZ0JBTXpCQSxRQUFBQSxDQUFTeUMsVUFBVHpDLENBQW9CNEMsVUFBcEI1QyxHQUFpQ3FDLFdBQUFBLENBQVlyQyxRQUFacUMsQ0FBcUJPLFVBQXRENUMsQ0FOeUI7QUFBQSxnQkFRekJBLFFBQUFBLENBQVM2QyxnQkFBVDdDLEdBQTRCLEtBQTVCQSxDQVJ5QjtBQUFBLGdCQWF6QixJQUFJTyxPQUFBQSxHQUFVLElBQUlqRCxXQUFBQSxDQUFZWSxpQkFBaEIsRUFBZCxDQWJ5QjtBQUFBLGdCQWV6QjhCLFFBQUFBLENBQVM4QyxJQUFUOUMsQ0FBY3FDLFdBQUFBLENBQVlyQyxRQUExQkEsRUFDSU8sT0FESlAsRUFDYU8sT0FEYlAsRUFDc0IsS0FBSzdCLFlBRDNCNkIsRUFmeUI7QUFBQSxnQkFtQnpCLE9BQU9BLFFBQVAsQ0FuQnlCO0FBQUEsYUFyR2dCO0FBQUEsWUEySDdDK0MsVUFBQUEsRUEzSDZDLFNBQUEsVUFBQSxDQTJIakNWLFdBM0hpQyxFQTJIcEJXLFFBM0hvQixFQTJIVkMsUUEzSFUsRUEySEE7QUFBQSxnQkFDekMsSUFBSW5CLElBQUFBLEdBQU96RSxVQUFBQSxDQUFXZ0UsWUFBWGhFLENBQXdCQyxXQUFBQSxDQUFZNEYsTUFBcEM3RixDQUFYLENBRHlDO0FBQUEsZ0JBRXpDLElBQUlrRCxPQUFBQSxHQUFVdUIsSUFBZCxDQUZ5QztBQUFBLGdCQUd6Q0EsSUFBQUEsQ0FBS2dCLElBQUxoQixDQUFVa0IsUUFBVmxCLEVBQW9CbUIsUUFBcEJuQixFQUE4QnZCLE9BQTlCdUIsRUFBdUN2QixPQUF2Q3VCLEVBSHlDO0FBQUEsZ0JBSXpDLE9BQU9BLElBQVAsQ0FKeUM7QUFBQSxhQTNIQTtBQUFBLFlBa0k3Q3FCLHdCQUFBQSxFQWxJNkMsU0FBQSx3QkFBQSxDQWtJbkJDLElBbEltQixFQWtJYjtBQUFBLGdCQUM1QixTQUFTekYsSUFBVCxJQUFpQixLQUFLMEYsbUJBQXRCLEVBQTJDO0FBQUEsb0JBQ3ZDLElBQUkxRixJQUFBQSxDQUFLMkYsT0FBTDNGLENBQWF5RixJQUFiekYsS0FBc0IsQ0FBQyxDQUEzQixFQUE4QjtBQUFBLHdCQUMxQixPQUFPLEtBQUswRixtQkFBTCxDQUF5QjFGLElBQXpCLENBQVAsQ0FEMEI7QUFBQSxxQkFEUztBQUFBLGlCQURmO0FBQUEsZ0JBTTVCLE9BQU8sSUFBUCxDQU40QjtBQUFBLGFBbElhO0FBQUEsWUEySTdDNEYsMkJBQUFBLEVBM0k2QyxTQUFBLDJCQUFBLENBMkloQkgsSUEzSWdCLEVBMklWSSxXQTNJVSxFQTJJRztBQUFBLGdCQUM1QyxJQUFJQSxXQUFBQSxLQUFnQixLQUFLLENBQXpCLEVBQTRCO0FBQUEsb0JBQUVBLFdBQUFBLEdBQWMsSUFBZEEsQ0FBRjtBQUFBLGlCQURnQjtBQUFBLGdCQUU1QyxTQUFTN0YsSUFBVCxJQUFpQixLQUFLMEYsbUJBQXRCLEVBQTJDO0FBQUEsb0JBQ3ZDLElBQUkxRixJQUFBQSxDQUFLMkYsT0FBTDNGLENBQWF5RixJQUFiekYsTUFBdUIsQ0FBQyxDQUE1QjtBQUFBLHdCQUErQixTQURRO0FBQUEsb0JBRXZDLElBQUk2RixXQUFKLEVBQWlCO0FBQUEsd0JBQ2IsS0FBS3JGLFlBQUwsQ0FBa0JzRixZQUFsQixDQUErQixLQUFLSixtQkFBTCxDQUF5QjFGLElBQXpCLENBQS9CLEVBRGE7QUFBQSxxQkFGc0I7QUFBQSxvQkFLdkMsT0FBTyxLQUFLMEYsbUJBQUwsQ0FBeUIxRixJQUF6QixDQUFQLENBTHVDO0FBQUEsaUJBRkM7QUFBQSxhQTNJSDtBQUFBLFNBQVRGLENBQXhDIiwiZmlsZSI6IkNDRmFjdG9yeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5sZXQgQmFzZU9iamVjdCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QsXHJcbiAgICBCYXNlRmFjdG9yeSA9IGRyYWdvbkJvbmVzLkJhc2VGYWN0b3J5O1xyXG5cclxuLyoqXHJcbiAqIEBtb2R1bGUgZHJhZ29uQm9uZXNcclxuKi9cclxuXHJcbi8qKlxyXG4gKiBAY2xhc3MgQ0NGYWN0b3J5XHJcbiAqIEBleHRlbmRzIEJhc2VGYWN0b3J5XHJcbiovXHJcbnZhciBDQ0ZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkgPSBjYy5DbGFzcyh7XHJcbiAgICBuYW1lOiAnZHJhZ29uQm9uZXMuQ0NGYWN0b3J5JyxcclxuICAgIGV4dGVuZHM6IEJhc2VGYWN0b3J5LFxyXG4gICAgLyoqXHJcbiAgICAgKiBAbWV0aG9kIGdldEluc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJuIHtDQ0ZhY3Rvcnl9XHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogbGV0IGZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICovXHJcbiAgICBzdGF0aWNzOiB7XHJcbiAgICAgICAgX2ZhY3Rvcnk6IG51bGwsXHJcbiAgICAgICAgZ2V0SW5zdGFuY2UgKCkge1xyXG4gICAgICAgICAgICBpZiAoIUNDRmFjdG9yeS5fZmFjdG9yeSkge1xyXG4gICAgICAgICAgICAgICAgQ0NGYWN0b3J5Ll9mYWN0b3J5ID0gbmV3IENDRmFjdG9yeSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBDQ0ZhY3RvcnkuX2ZhY3Rvcnk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBjdG9yICgpIHtcclxuICAgICAgICBsZXQgZXZlbnRNYW5hZ2VyID0gbmV3IGRyYWdvbkJvbmVzLkNDQXJtYXR1cmVEaXNwbGF5KCk7XHJcbiAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMgPSBuZXcgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMoZXZlbnRNYW5hZ2VyKTtcclxuXHJcbiAgICAgICAgaWYgKCFDQ19KU0IgJiYgIUNDX0VESVRPUiAmJiBjYy5kaXJlY3Rvci5fc2NoZWR1bGVyKSB7XHJcbiAgICAgICAgICAgIGNjLmdhbWUub24oY2MuZ2FtZS5FVkVOVF9SRVNUQVJULCB0aGlzLmluaXRVcGRhdGUsIHRoaXMpO1xyXG4gICAgICAgICAgICB0aGlzLmluaXRVcGRhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGluaXRVcGRhdGUgKGR0KSB7XHJcbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlci5lbmFibGVGb3JUYXJnZXQodGhpcyk7XHJcbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlci5zY2hlZHVsZVVwZGF0ZSh0aGlzLCBjYy5TY2hlZHVsZXIuUFJJT1JJVFlfU1lTVEVNLCBmYWxzZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHVwZGF0ZSAoZHQpIHtcclxuICAgICAgICB0aGlzLl9kcmFnb25Cb25lcy5hZHZhbmNlVGltZShkdCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGdldERyYWdvbkJvbmVzRGF0YUJ5UmF3RGF0YSAocmF3RGF0YSkge1xyXG4gICAgICAgIHZhciBkYXRhUGFyc2VyID0gcmF3RGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gQmFzZUZhY3RvcnkuX2JpbmFyeVBhcnNlciA6IHRoaXMuX2RhdGFQYXJzZXI7XHJcbiAgICAgICAgcmV0dXJuIGRhdGFQYXJzZXIucGFyc2VEcmFnb25Cb25lc0RhdGEocmF3RGF0YSwgMS4wKTtcclxuICAgIH0sXHJcblxyXG4gICAgLy8gQnVpbGQgbmV3IGFyYW10dXJlIHdpdGggYSBuZXcgZGlzcGxheS5cclxuICAgIGJ1aWxkQXJtYXR1cmVEaXNwbGF5IChhcm1hdHVyZU5hbWUsIGRyYWdvbkJvbmVzTmFtZSwgc2tpbk5hbWUsIHRleHR1cmVBdGxhc05hbWUpIHtcclxuICAgICAgICBsZXQgYXJtYXR1cmUgPSB0aGlzLmJ1aWxkQXJtYXR1cmUoYXJtYXR1cmVOYW1lLCBkcmFnb25Cb25lc05hbWUsIHNraW5OYW1lLCB0ZXh0dXJlQXRsYXNOYW1lKTtcclxuICAgICAgICByZXR1cm4gYXJtYXR1cmUgJiYgYXJtYXR1cmUuX2Rpc3BsYXk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vIEJ1aWxkIHN1YiBhcm1hdHVyZSBmcm9tIGFuIGV4aXN0IGFybWF0dXJlIGNvbXBvbmVudC5cclxuICAgIC8vIEl0IHdpbGwgc2hhcmUgZHJhZ29uQXNzZXQgYW5kIGRyYWdvbkF0bGFzQXNzZXQuXHJcbiAgICAvLyBCdXQgbm9kZSBjYW4gbm90IHNoYXJlLG9yIHdpbGwgY2F1c2UgcmVuZGVyIGVycm9yLlxyXG4gICAgY3JlYXRlQXJtYXR1cmVOb2RlIChjb21wLCBhcm1hdHVyZU5hbWUsIG5vZGUpIHtcclxuICAgICAgICBub2RlID0gbm9kZSB8fCBuZXcgY2MuTm9kZSgpO1xyXG4gICAgICAgIGxldCBkaXNwbGF5ID0gbm9kZS5nZXRDb21wb25lbnQoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5KTtcclxuICAgICAgICBpZiAoIWRpc3BsYXkpIHtcclxuICAgICAgICAgICAgZGlzcGxheSA9IG5vZGUuYWRkQ29tcG9uZW50KGRyYWdvbkJvbmVzLkFybWF0dXJlRGlzcGxheSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBub2RlLm5hbWUgPSBhcm1hdHVyZU5hbWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGlzcGxheS5fYXJtYXR1cmVOYW1lID0gYXJtYXR1cmVOYW1lO1xyXG4gICAgICAgIGRpc3BsYXkuX04kZHJhZ29uQXNzZXQgPSBjb21wLmRyYWdvbkFzc2V0O1xyXG4gICAgICAgIGRpc3BsYXkuX04kZHJhZ29uQXRsYXNBc3NldCA9IGNvbXAuZHJhZ29uQXRsYXNBc3NldDtcclxuICAgICAgICBkaXNwbGF5Ll9pbml0KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBkaXNwbGF5O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2J1aWxkVGV4dHVyZUF0bGFzRGF0YSAodGV4dHVyZUF0bGFzRGF0YSwgdGV4dHVyZUF0bGFzKSB7XHJcbiAgICAgICAgaWYgKHRleHR1cmVBdGxhc0RhdGEpIHtcclxuICAgICAgICAgICAgdGV4dHVyZUF0bGFzRGF0YS5yZW5kZXJUZXh0dXJlID0gdGV4dHVyZUF0bGFzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGV4dHVyZUF0bGFzRGF0YSA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkNDVGV4dHVyZUF0bGFzRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0ZXh0dXJlQXRsYXNEYXRhO1xyXG4gICAgfSxcclxuXHJcbiAgICBfc29ydFNsb3RzICgpIHtcclxuICAgICAgICBsZXQgc2xvdHMgPSB0aGlzLl9zbG90cztcclxuICAgICAgICBsZXQgc29ydGVkU2xvdHMgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHNsb3RzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgc2xvdCA9IHNsb3RzW2ldO1xyXG4gICAgICAgICAgICBsZXQgek9yZGVyID0gc2xvdC5fek9yZGVyO1xyXG4gICAgICAgICAgICBsZXQgaW5zZXJ0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaiA9IHNvcnRlZFNsb3RzLmxlbmd0aCAtIDE7IGogPj0gMDsgai0tKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoek9yZGVyID49IHNvcnRlZFNsb3RzW2pdLl96T3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBzb3J0ZWRTbG90cy5zcGxpY2UoaisxLCAwLCBzbG90KTtcclxuICAgICAgICAgICAgICAgICAgICBpbnNlcnRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCFpbnNlcnRlZCkge1xyXG4gICAgICAgICAgICAgICAgc29ydGVkU2xvdHMuc3BsaWNlKDAsIDAsIHNsb3QpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuX3Nsb3RzID0gc29ydGVkU2xvdHM7XHJcbiAgICB9LFxyXG5cclxuICAgIF9idWlsZEFybWF0dXJlIChkYXRhUGFja2FnZSkge1xyXG4gICAgICAgIGxldCBhcm1hdHVyZSA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkFybWF0dXJlKTtcclxuXHJcbiAgICAgICAgYXJtYXR1cmUuX3NraW5EYXRhID0gZGF0YVBhY2thZ2Uuc2tpbjtcclxuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQW5pbWF0aW9uKTtcclxuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uLl9hcm1hdHVyZSA9IGFybWF0dXJlO1xyXG4gICAgICAgIGFybWF0dXJlLl9hbmltYXRpb24uYW5pbWF0aW9ucyA9IGRhdGFQYWNrYWdlLmFybWF0dXJlLmFuaW1hdGlvbnM7XHJcblxyXG4gICAgICAgIGFybWF0dXJlLl9pc0NoaWxkQXJtYXR1cmUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgLy8gZml4ZWQgZHJhZ29uYm9uZXMgc29ydCBpc3N1ZVxyXG4gICAgICAgIC8vIGFybWF0dXJlLl9zb3J0U2xvdHMgPSB0aGlzLl9zb3J0U2xvdHM7XHJcblxyXG4gICAgICAgIHZhciBkaXNwbGF5ID0gbmV3IGRyYWdvbkJvbmVzLkNDQXJtYXR1cmVEaXNwbGF5KCk7XHJcblxyXG4gICAgICAgIGFybWF0dXJlLmluaXQoZGF0YVBhY2thZ2UuYXJtYXR1cmUsXHJcbiAgICAgICAgICAgIGRpc3BsYXksIGRpc3BsYXksIHRoaXMuX2RyYWdvbkJvbmVzXHJcbiAgICAgICAgKTtcclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gYXJtYXR1cmU7XHJcbiAgICB9LFxyXG5cclxuICAgIF9idWlsZFNsb3QgKGRhdGFQYWNrYWdlLCBzbG90RGF0YSwgZGlzcGxheXMpIHtcclxuICAgICAgICBsZXQgc2xvdCA9IEJhc2VPYmplY3QuYm9ycm93T2JqZWN0KGRyYWdvbkJvbmVzLkNDU2xvdCk7XHJcbiAgICAgICAgbGV0IGRpc3BsYXkgPSBzbG90O1xyXG4gICAgICAgIHNsb3QuaW5pdChzbG90RGF0YSwgZGlzcGxheXMsIGRpc3BsYXksIGRpc3BsYXkpO1xyXG4gICAgICAgIHJldHVybiBzbG90O1xyXG4gICAgfSxcclxuXHJcbiAgICBnZXREcmFnb25Cb25lc0RhdGFCeVVVSUQgKHV1aWQpIHtcclxuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcCkge1xyXG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKHV1aWQpICE9IC0xKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwW25hbWVdO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICByZW1vdmVEcmFnb25Cb25lc0RhdGFCeVVVSUQgKHV1aWQsIGRpc3Bvc2VEYXRhKSB7XHJcbiAgICAgICAgaWYgKGRpc3Bvc2VEYXRhID09PSB2b2lkIDApIHsgZGlzcG9zZURhdGEgPSB0cnVlOyB9XHJcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcclxuICAgICAgICAgICAgaWYgKG5hbWUuaW5kZXhPZih1dWlkKSA9PT0gLTEpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICBpZiAoZGlzcG9zZURhdGEpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdCh0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV07XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgQmFzZU9iamVjdCA9IGRyYWdvbkJvbmVzLkJhc2VPYmplY3QsXG4gICAgQmFzZUZhY3RvcnkgPSBkcmFnb25Cb25lcy5CYXNlRmFjdG9yeTtcblxuLyoqXHJcbiAqIEBtb2R1bGUgZHJhZ29uQm9uZXNcclxuKi9cblxuLyoqXHJcbiAqIEBjbGFzcyBDQ0ZhY3RvcnlcclxuICogQGV4dGVuZHMgQmFzZUZhY3RvcnlcclxuKi9cbnZhciBDQ0ZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2RyYWdvbkJvbmVzLkNDRmFjdG9yeScsXG4gICAgZXh0ZW5kczogQmFzZUZhY3RvcnksXG4gICAgLyoqXHJcbiAgICAgKiBAbWV0aG9kIGdldEluc3RhbmNlXHJcbiAgICAgKiBAcmV0dXJuIHtDQ0ZhY3Rvcnl9XHJcbiAgICAgKiBAc3RhdGljXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogbGV0IGZhY3RvcnkgPSBkcmFnb25Cb25lcy5DQ0ZhY3RvcnkuZ2V0SW5zdGFuY2UoKTtcclxuICAgICovXG4gICAgc3RhdGljczoge1xuICAgICAgICBfZmFjdG9yeTogbnVsbCxcbiAgICAgICAgZ2V0SW5zdGFuY2U6IGZ1bmN0aW9uIGdldEluc3RhbmNlKCkge1xuICAgICAgICAgICAgaWYgKCFDQ0ZhY3RvcnkuX2ZhY3RvcnkpIHtcbiAgICAgICAgICAgICAgICBDQ0ZhY3RvcnkuX2ZhY3RvcnkgPSBuZXcgQ0NGYWN0b3J5KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gQ0NGYWN0b3J5Ll9mYWN0b3J5O1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgICAgIHZhciBldmVudE1hbmFnZXIgPSBuZXcgZHJhZ29uQm9uZXMuQ0NBcm1hdHVyZURpc3BsYXkoKTtcbiAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMgPSBuZXcgZHJhZ29uQm9uZXMuRHJhZ29uQm9uZXMoZXZlbnRNYW5hZ2VyKTtcblxuICAgICAgICBpZiAoIUNDX0pTQiAmJiAhQ0NfRURJVE9SICYmIGNjLmRpcmVjdG9yLl9zY2hlZHVsZXIpIHtcbiAgICAgICAgICAgIGNjLmdhbWUub24oY2MuZ2FtZS5FVkVOVF9SRVNUQVJULCB0aGlzLmluaXRVcGRhdGUsIHRoaXMpO1xuICAgICAgICAgICAgdGhpcy5pbml0VXBkYXRlKCk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGluaXRVcGRhdGU6IGZ1bmN0aW9uIGluaXRVcGRhdGUoZHQpIHtcbiAgICAgICAgY2MuZGlyZWN0b3IuX3NjaGVkdWxlci5lbmFibGVGb3JUYXJnZXQodGhpcyk7XG4gICAgICAgIGNjLmRpcmVjdG9yLl9zY2hlZHVsZXIuc2NoZWR1bGVVcGRhdGUodGhpcywgY2MuU2NoZWR1bGVyLlBSSU9SSVRZX1NZU1RFTSwgZmFsc2UpO1xuICAgIH0sXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgdGhpcy5fZHJhZ29uQm9uZXMuYWR2YW5jZVRpbWUoZHQpO1xuICAgIH0sXG4gICAgZ2V0RHJhZ29uQm9uZXNEYXRhQnlSYXdEYXRhOiBmdW5jdGlvbiBnZXREcmFnb25Cb25lc0RhdGFCeVJhd0RhdGEocmF3RGF0YSkge1xuICAgICAgICB2YXIgZGF0YVBhcnNlciA9IHJhd0RhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IEJhc2VGYWN0b3J5Ll9iaW5hcnlQYXJzZXIgOiB0aGlzLl9kYXRhUGFyc2VyO1xuICAgICAgICByZXR1cm4gZGF0YVBhcnNlci5wYXJzZURyYWdvbkJvbmVzRGF0YShyYXdEYXRhLCAxLjApO1xuICAgIH0sXG5cblxuICAgIC8vIEJ1aWxkIG5ldyBhcmFtdHVyZSB3aXRoIGEgbmV3IGRpc3BsYXkuXG4gICAgYnVpbGRBcm1hdHVyZURpc3BsYXk6IGZ1bmN0aW9uIGJ1aWxkQXJtYXR1cmVEaXNwbGF5KGFybWF0dXJlTmFtZSwgZHJhZ29uQm9uZXNOYW1lLCBza2luTmFtZSwgdGV4dHVyZUF0bGFzTmFtZSkge1xuICAgICAgICB2YXIgYXJtYXR1cmUgPSB0aGlzLmJ1aWxkQXJtYXR1cmUoYXJtYXR1cmVOYW1lLCBkcmFnb25Cb25lc05hbWUsIHNraW5OYW1lLCB0ZXh0dXJlQXRsYXNOYW1lKTtcbiAgICAgICAgcmV0dXJuIGFybWF0dXJlICYmIGFybWF0dXJlLl9kaXNwbGF5O1xuICAgIH0sXG5cblxuICAgIC8vIEJ1aWxkIHN1YiBhcm1hdHVyZSBmcm9tIGFuIGV4aXN0IGFybWF0dXJlIGNvbXBvbmVudC5cbiAgICAvLyBJdCB3aWxsIHNoYXJlIGRyYWdvbkFzc2V0IGFuZCBkcmFnb25BdGxhc0Fzc2V0LlxuICAgIC8vIEJ1dCBub2RlIGNhbiBub3Qgc2hhcmUsb3Igd2lsbCBjYXVzZSByZW5kZXIgZXJyb3IuXG4gICAgY3JlYXRlQXJtYXR1cmVOb2RlOiBmdW5jdGlvbiBjcmVhdGVBcm1hdHVyZU5vZGUoY29tcCwgYXJtYXR1cmVOYW1lLCBub2RlKSB7XG4gICAgICAgIG5vZGUgPSBub2RlIHx8IG5ldyBjYy5Ob2RlKCk7XG4gICAgICAgIHZhciBkaXNwbGF5ID0gbm9kZS5nZXRDb21wb25lbnQoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5KTtcbiAgICAgICAgaWYgKCFkaXNwbGF5KSB7XG4gICAgICAgICAgICBkaXNwbGF5ID0gbm9kZS5hZGRDb21wb25lbnQoZHJhZ29uQm9uZXMuQXJtYXR1cmVEaXNwbGF5KTtcbiAgICAgICAgfVxuXG4gICAgICAgIG5vZGUubmFtZSA9IGFybWF0dXJlTmFtZTtcblxuICAgICAgICBkaXNwbGF5Ll9hcm1hdHVyZU5hbWUgPSBhcm1hdHVyZU5hbWU7XG4gICAgICAgIGRpc3BsYXkuX04kZHJhZ29uQXNzZXQgPSBjb21wLmRyYWdvbkFzc2V0O1xuICAgICAgICBkaXNwbGF5Ll9OJGRyYWdvbkF0bGFzQXNzZXQgPSBjb21wLmRyYWdvbkF0bGFzQXNzZXQ7XG4gICAgICAgIGRpc3BsYXkuX2luaXQoKTtcblxuICAgICAgICByZXR1cm4gZGlzcGxheTtcbiAgICB9LFxuICAgIF9idWlsZFRleHR1cmVBdGxhc0RhdGE6IGZ1bmN0aW9uIF9idWlsZFRleHR1cmVBdGxhc0RhdGEodGV4dHVyZUF0bGFzRGF0YSwgdGV4dHVyZUF0bGFzKSB7XG4gICAgICAgIGlmICh0ZXh0dXJlQXRsYXNEYXRhKSB7XG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhLnJlbmRlclRleHR1cmUgPSB0ZXh0dXJlQXRsYXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZXh0dXJlQXRsYXNEYXRhID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQ0NUZXh0dXJlQXRsYXNEYXRhKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGV4dHVyZUF0bGFzRGF0YTtcbiAgICB9LFxuICAgIF9zb3J0U2xvdHM6IGZ1bmN0aW9uIF9zb3J0U2xvdHMoKSB7XG4gICAgICAgIHZhciBzbG90cyA9IHRoaXMuX3Nsb3RzO1xuICAgICAgICB2YXIgc29ydGVkU2xvdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBzbG90cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzbG90ID0gc2xvdHNbaV07XG4gICAgICAgICAgICB2YXIgek9yZGVyID0gc2xvdC5fek9yZGVyO1xuICAgICAgICAgICAgdmFyIGluc2VydGVkID0gZmFsc2U7XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gc29ydGVkU2xvdHMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcbiAgICAgICAgICAgICAgICBpZiAoek9yZGVyID49IHNvcnRlZFNsb3RzW2pdLl96T3JkZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkU2xvdHMuc3BsaWNlKGogKyAxLCAwLCBzbG90KTtcbiAgICAgICAgICAgICAgICAgICAgaW5zZXJ0ZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWluc2VydGVkKSB7XG4gICAgICAgICAgICAgICAgc29ydGVkU2xvdHMuc3BsaWNlKDAsIDAsIHNsb3QpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3Nsb3RzID0gc29ydGVkU2xvdHM7XG4gICAgfSxcbiAgICBfYnVpbGRBcm1hdHVyZTogZnVuY3Rpb24gX2J1aWxkQXJtYXR1cmUoZGF0YVBhY2thZ2UpIHtcbiAgICAgICAgdmFyIGFybWF0dXJlID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQXJtYXR1cmUpO1xuXG4gICAgICAgIGFybWF0dXJlLl9za2luRGF0YSA9IGRhdGFQYWNrYWdlLnNraW47XG4gICAgICAgIGFybWF0dXJlLl9hbmltYXRpb24gPSBCYXNlT2JqZWN0LmJvcnJvd09iamVjdChkcmFnb25Cb25lcy5BbmltYXRpb24pO1xuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uLl9hcm1hdHVyZSA9IGFybWF0dXJlO1xuICAgICAgICBhcm1hdHVyZS5fYW5pbWF0aW9uLmFuaW1hdGlvbnMgPSBkYXRhUGFja2FnZS5hcm1hdHVyZS5hbmltYXRpb25zO1xuXG4gICAgICAgIGFybWF0dXJlLl9pc0NoaWxkQXJtYXR1cmUgPSBmYWxzZTtcblxuICAgICAgICAvLyBmaXhlZCBkcmFnb25ib25lcyBzb3J0IGlzc3VlXG4gICAgICAgIC8vIGFybWF0dXJlLl9zb3J0U2xvdHMgPSB0aGlzLl9zb3J0U2xvdHM7XG5cbiAgICAgICAgdmFyIGRpc3BsYXkgPSBuZXcgZHJhZ29uQm9uZXMuQ0NBcm1hdHVyZURpc3BsYXkoKTtcblxuICAgICAgICBhcm1hdHVyZS5pbml0KGRhdGFQYWNrYWdlLmFybWF0dXJlLCBkaXNwbGF5LCBkaXNwbGF5LCB0aGlzLl9kcmFnb25Cb25lcyk7XG5cbiAgICAgICAgcmV0dXJuIGFybWF0dXJlO1xuICAgIH0sXG4gICAgX2J1aWxkU2xvdDogZnVuY3Rpb24gX2J1aWxkU2xvdChkYXRhUGFja2FnZSwgc2xvdERhdGEsIGRpc3BsYXlzKSB7XG4gICAgICAgIHZhciBzbG90ID0gQmFzZU9iamVjdC5ib3Jyb3dPYmplY3QoZHJhZ29uQm9uZXMuQ0NTbG90KTtcbiAgICAgICAgdmFyIGRpc3BsYXkgPSBzbG90O1xuICAgICAgICBzbG90LmluaXQoc2xvdERhdGEsIGRpc3BsYXlzLCBkaXNwbGF5LCBkaXNwbGF5KTtcbiAgICAgICAgcmV0dXJuIHNsb3Q7XG4gICAgfSxcbiAgICBnZXREcmFnb25Cb25lc0RhdGFCeVVVSUQ6IGZ1bmN0aW9uIGdldERyYWdvbkJvbmVzRGF0YUJ5VVVJRCh1dWlkKSB7XG4gICAgICAgIGZvciAodmFyIG5hbWUgaW4gdGhpcy5fZHJhZ29uQm9uZXNEYXRhTWFwKSB7XG4gICAgICAgICAgICBpZiAobmFtZS5pbmRleE9mKHV1aWQpICE9IC0xKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9LFxuICAgIHJlbW92ZURyYWdvbkJvbmVzRGF0YUJ5VVVJRDogZnVuY3Rpb24gcmVtb3ZlRHJhZ29uQm9uZXNEYXRhQnlVVUlEKHV1aWQsIGRpc3Bvc2VEYXRhKSB7XG4gICAgICAgIGlmIChkaXNwb3NlRGF0YSA9PT0gdm9pZCAwKSB7XG4gICAgICAgICAgICBkaXNwb3NlRGF0YSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXApIHtcbiAgICAgICAgICAgIGlmIChuYW1lLmluZGV4T2YodXVpZCkgPT09IC0xKSBjb250aW51ZTtcbiAgICAgICAgICAgIGlmIChkaXNwb3NlRGF0YSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2RyYWdvbkJvbmVzLmJ1ZmZlck9iamVjdCh0aGlzLl9kcmFnb25Cb25lc0RhdGFNYXBbbmFtZV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2RyYWdvbkJvbmVzRGF0YU1hcFtuYW1lXTtcbiAgICAgICAgfVxuICAgIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFJtRmpkRzl5ZVM1cWN5SmRMQ0p1WVcxbGN5STZXeUpDWVhObFQySnFaV04wSWl3aVpISmhaMjl1UW05dVpYTWlMQ0pDWVhObFJtRmpkRzl5ZVNJc0lrTkRSbUZqZEc5eWVTSXNJbU5qSWl3aVEyeGhjM01pTENKdVlXMWxJaXdpWlhoMFpXNWtjeUlzSW5OMFlYUnBZM01pTENKZlptRmpkRzl5ZVNJc0ltZGxkRWx1YzNSaGJtTmxJaXdpWTNSdmNpSXNJbVYyWlc1MFRXRnVZV2RsY2lJc0lrTkRRWEp0WVhSMWNtVkVhWE53YkdGNUlpd2lYMlJ5WVdkdmJrSnZibVZ6SWl3aVJISmhaMjl1UW05dVpYTWlMQ0pEUTE5S1UwSWlMQ0pEUTE5RlJFbFVUMUlpTENKa2FYSmxZM1J2Y2lJc0lsOXpZMmhsWkhWc1pYSWlMQ0puWVcxbElpd2liMjRpTENKRlZrVk9WRjlTUlZOVVFWSlVJaXdpYVc1cGRGVndaR0YwWlNJc0ltUjBJaXdpWlc1aFlteGxSbTl5VkdGeVoyVjBJaXdpYzJOb1pXUjFiR1ZWY0dSaGRHVWlMQ0pUWTJobFpIVnNaWElpTENKUVVrbFBVa2xVV1Y5VFdWTlVSVTBpTENKMWNHUmhkR1VpTENKaFpIWmhibU5sVkdsdFpTSXNJbWRsZEVSeVlXZHZia0p2Ym1WelJHRjBZVUo1VW1GM1JHRjBZU0lzSW5KaGQwUmhkR0VpTENKa1lYUmhVR0Z5YzJWeUlpd2lRWEp5WVhsQ2RXWm1aWElpTENKZlltbHVZWEo1VUdGeWMyVnlJaXdpWDJSaGRHRlFZWEp6WlhJaUxDSndZWEp6WlVSeVlXZHZia0p2Ym1WelJHRjBZU0lzSW1KMWFXeGtRWEp0WVhSMWNtVkVhWE53YkdGNUlpd2lZWEp0WVhSMWNtVk9ZVzFsSWl3aVpISmhaMjl1UW05dVpYTk9ZVzFsSWl3aWMydHBiazVoYldVaUxDSjBaWGgwZFhKbFFYUnNZWE5PWVcxbElpd2lZWEp0WVhSMWNtVWlMQ0ppZFdsc1pFRnliV0YwZFhKbElpd2lYMlJwYzNCc1lYa2lMQ0pqY21WaGRHVkJjbTFoZEhWeVpVNXZaR1VpTENKamIyMXdJaXdpYm05a1pTSXNJazV2WkdVaUxDSmthWE53YkdGNUlpd2laMlYwUTI5dGNHOXVaVzUwSWl3aVFYSnRZWFIxY21WRWFYTndiR0Y1SWl3aVlXUmtRMjl0Y0c5dVpXNTBJaXdpWDJGeWJXRjBkWEpsVG1GdFpTSXNJbDlPSkdSeVlXZHZia0Z6YzJWMElpd2laSEpoWjI5dVFYTnpaWFFpTENKZlRpUmtjbUZuYjI1QmRHeGhjMEZ6YzJWMElpd2laSEpoWjI5dVFYUnNZWE5CYzNObGRDSXNJbDlwYm1sMElpd2lYMkoxYVd4a1ZHVjRkSFZ5WlVGMGJHRnpSR0YwWVNJc0luUmxlSFIxY21WQmRHeGhjMFJoZEdFaUxDSjBaWGgwZFhKbFFYUnNZWE1pTENKeVpXNWtaWEpVWlhoMGRYSmxJaXdpWW05eWNtOTNUMkpxWldOMElpd2lRME5VWlhoMGRYSmxRWFJzWVhORVlYUmhJaXdpWDNOdmNuUlRiRzkwY3lJc0luTnNiM1J6SWl3aVgzTnNiM1J6SWl3aWMyOXlkR1ZrVTJ4dmRITWlMQ0pwSWl3aWJDSXNJbXhsYm1kMGFDSXNJbk5zYjNRaUxDSjZUM0prWlhJaUxDSmZlazl5WkdWeUlpd2lhVzV6WlhKMFpXUWlMQ0pxSWl3aWMzQnNhV05sSWl3aVgySjFhV3hrUVhKdFlYUjFjbVVpTENKa1lYUmhVR0ZqYTJGblpTSXNJa0Z5YldGMGRYSmxJaXdpWDNOcmFXNUVZWFJoSWl3aWMydHBiaUlzSWw5aGJtbHRZWFJwYjI0aUxDSkJibWx0WVhScGIyNGlMQ0pmWVhKdFlYUjFjbVVpTENKaGJtbHRZWFJwYjI1eklpd2lYMmx6UTJocGJHUkJjbTFoZEhWeVpTSXNJbWx1YVhRaUxDSmZZblZwYkdSVGJHOTBJaXdpYzJ4dmRFUmhkR0VpTENKa2FYTndiR0Y1Y3lJc0lrTkRVMnh2ZENJc0ltZGxkRVJ5WVdkdmJrSnZibVZ6UkdGMFlVSjVWVlZKUkNJc0luVjFhV1FpTENKZlpISmhaMjl1UW05dVpYTkVZWFJoVFdGd0lpd2lhVzVrWlhoUFppSXNJbkpsYlc5MlpVUnlZV2R2YmtKdmJtVnpSR0YwWVVKNVZWVkpSQ0lzSW1ScGMzQnZjMlZFWVhSaElpd2lZblZtWm1WeVQySnFaV04wSWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQmVVSkJMRWxCUVVsQkxHRkJRV0ZETEZsQlFWbEVMRlZCUVRkQ08wRkJRVUVzU1VGRFNVVXNZMEZCWTBRc1dVRkJXVU1zVjBGRU9VSTdPMEZCUjBFN096czdRVUZKUVRzN096dEJRVWxCTEVsQlFVbERMRmxCUVZsR0xGbEJRVmxGTEZOQlFWb3NSMEZCZDBKRExFZEJRVWRETEV0QlFVZ3NRMEZCVXp0QlFVTTNRME1zVlVGQlRTeDFRa0ZFZFVNN1FVRkZOME5ETEdGQlFWTk1MRmRCUm05RE8wRkJSemRET3pzN096czdPMEZCVDBGTkxHRkJRVk03UVVGRFRFTXNhMEpCUVZVc1NVRkVURHRCUVVWTVF5eHRRa0ZHU3l4NVFrRkZWVHRCUVVOWUxHZENRVUZKTEVOQlFVTlFMRlZCUVZWTkxGRkJRV1lzUlVGQmVVSTdRVUZEY2tKT0xEQkNRVUZWVFN4UlFVRldMRWRCUVhGQ0xFbEJRVWxPTEZOQlFVb3NSVUZCY2tJN1FVRkRTRHRCUVVORUxHMUNRVUZQUVN4VlFVRlZUU3hSUVVGcVFqdEJRVU5JTzBGQlVFa3NTMEZXYjBNN08wRkJiMEkzUTBVc1VVRndRalpETEd0Q1FXOUNja003UVVGRFNpeFpRVUZKUXl4bFFVRmxMRWxCUVVsWUxGbEJRVmxaTEdsQ1FVRm9RaXhGUVVGdVFqdEJRVU5CTEdGQlFVdERMRmxCUVV3c1IwRkJiMElzU1VGQlNXSXNXVUZCV1dNc1YwRkJhRUlzUTBGQk5FSklMRmxCUVRWQ0xFTkJRWEJDT3p0QlFVVkJMRmxCUVVrc1EwRkJRMGtzVFVGQlJDeEpRVUZYTEVOQlFVTkRMRk5CUVZvc1NVRkJlVUppTEVkQlFVZGpMRkZCUVVnc1EwRkJXVU1zVlVGQmVrTXNSVUZCY1VRN1FVRkRha1JtTEdWQlFVZG5RaXhKUVVGSUxFTkJRVkZETEVWQlFWSXNRMEZCVjJwQ0xFZEJRVWRuUWl4SlFVRklMRU5CUVZGRkxHRkJRVzVDTEVWQlFXdERMRXRCUVV0RExGVkJRWFpETEVWQlFXMUVMRWxCUVc1RU8wRkJRMEVzYVVKQlFVdEJMRlZCUVV3N1FVRkRTRHRCUVVOS0xFdEJOVUkwUXp0QlFUaENOME5CTEdOQk9VSTJReXh6UWtFNFFtcERReXhGUVRsQ2FVTXNSVUU0UWpkQ08wRkJRMXB3UWl4WFFVRkhZeXhSUVVGSUxFTkJRVmxETEZWQlFWb3NRMEZCZFVKTkxHVkJRWFpDTEVOQlFYVkRMRWxCUVhaRE8wRkJRMEZ5UWl4WFFVRkhZeXhSUVVGSUxFTkJRVmxETEZWQlFWb3NRMEZCZFVKUExHTkJRWFpDTEVOQlFYTkRMRWxCUVhSRExFVkJRVFJEZEVJc1IwRkJSM1ZDTEZOQlFVZ3NRMEZCWVVNc1pVRkJla1FzUlVGQk1FVXNTMEZCTVVVN1FVRkRTQ3hMUVdwRE5FTTdRVUZ0UXpkRFF5eFZRVzVETmtNc2EwSkJiVU55UTB3c1JVRnVRM0ZETEVWQmJVTnFRenRCUVVOU0xHRkJRVXRXTEZsQlFVd3NRMEZCYTBKblFpeFhRVUZzUWl4RFFVRTRRazRzUlVGQk9VSTdRVUZEU0N4TFFYSkRORU03UVVGMVF6ZERUeXdyUWtGMlF6WkRMSFZEUVhWRGFFSkRMRTlCZGtOblFpeEZRWFZEVUR0QlFVTnNReXhaUVVGSlF5eGhRVUZoUkN4dFFrRkJiVUpGTEZkQlFXNUNMRWRCUVdsRGFFTXNXVUZCV1dsRExHRkJRVGRETEVkQlFUWkVMRXRCUVV0RExGZEJRVzVHTzBGQlEwRXNaVUZCVDBnc1YwRkJWMGtzYjBKQlFWZ3NRMEZCWjBOTUxFOUJRV2hETEVWQlFYbERMRWRCUVhwRExFTkJRVkE3UVVGRFNDeExRVEZETkVNN096dEJRVFJETjBNN1FVRkRRVTBzZDBKQk4wTTJReXhuUTBFMlEzWkNReXhaUVRkRGRVSXNSVUUyUTFSRExHVkJOME5UTEVWQk5rTlJReXhSUVRkRFVpeEZRVFpEYTBKRExHZENRVGREYkVJc1JVRTJRMjlETzBGQlF6ZEZMRmxCUVVsRExGZEJRVmNzUzBGQlMwTXNZVUZCVEN4RFFVRnRRa3dzV1VGQmJrSXNSVUZCYVVORExHVkJRV3BETEVWQlFXdEVReXhSUVVGc1JDeEZRVUUwUkVNc1owSkJRVFZFTEVOQlFXWTdRVUZEUVN4bFFVRlBReXhaUVVGWlFTeFRRVUZUUlN4UlFVRTFRanRCUVVOSUxFdEJhRVEwUXpzN08wRkJhMFEzUXp0QlFVTkJPMEZCUTBFN1FVRkRRVU1zYzBKQmNrUTJReXc0UWtGeFJIcENReXhKUVhKRWVVSXNSVUZ4Ukc1Q1VpeFpRWEpFYlVJc1JVRnhSRXhUTEVsQmNrUkxMRVZCY1VSRE8wRkJRekZEUVN4bFFVRlBRU3hSUVVGUkxFbEJRVWsxUXl4SFFVRkhOa01zU1VGQlVDeEZRVUZtTzBGQlEwRXNXVUZCU1VNc1ZVRkJWVVlzUzBGQlMwY3NXVUZCVEN4RFFVRnJRbXhFTEZsQlFWbHRSQ3hsUVVFNVFpeERRVUZrTzBGQlEwRXNXVUZCU1N4RFFVRkRSaXhQUVVGTUxFVkJRV003UVVGRFZrRXNjMEpCUVZWR0xFdEJRVXRMTEZsQlFVd3NRMEZCYTBKd1JDeFpRVUZaYlVRc1pVRkJPVUlzUTBGQlZqdEJRVU5JT3p0QlFVVkVTaXhoUVVGTE1VTXNTVUZCVEN4SFFVRlphVU1zV1VGQldqczdRVUZGUVZjc1owSkJRVkZKTEdGQlFWSXNSMEZCZDBKbUxGbEJRWGhDTzBGQlEwRlhMR2RDUVVGUlN5eGpRVUZTTEVkQlFYbENVaXhMUVVGTFV5eFhRVUU1UWp0QlFVTkJUaXhuUWtGQlVVOHNiVUpCUVZJc1IwRkJPRUpXTEV0QlFVdFhMR2RDUVVGdVF6dEJRVU5CVWl4blFrRkJVVk1zUzBGQlVqczdRVUZGUVN4bFFVRlBWQ3hQUVVGUU8wRkJRMGdzUzBGd1JUUkRPMEZCYzBVM1ExVXNNRUpCZEVVMlF5eHJRMEZ6UlhKQ1F5eG5Ra0YwUlhGQ0xFVkJjMFZJUXl4WlFYUkZSeXhGUVhORlZ6dEJRVU53UkN4WlFVRkpSQ3huUWtGQlNpeEZRVUZ6UWp0QlFVTnNRa0VzTmtKQlFXbENSU3hoUVVGcVFpeEhRVUZwUTBRc1dVRkJha003UVVGRFNDeFRRVVpFTEUxQlIwczdRVUZEUkVRc0swSkJRVzFDTjBRc1YwRkJWMmRGTEZsQlFWZ3NRMEZCZDBJdlJDeFpRVUZaWjBVc2EwSkJRWEJETEVOQlFXNUNPMEZCUTBnN1FVRkRSQ3hsUVVGUFNpeG5Ra0ZCVUR0QlFVTklMRXRCT1VVMFF6dEJRV2RHTjBOTExHTkJhRVkyUXl4M1FrRm5SaTlDTzBGQlExWXNXVUZCU1VNc1VVRkJVU3hMUVVGTFF5eE5RVUZxUWp0QlFVTkJMRmxCUVVsRExHTkJRV01zUlVGQmJFSTdRVUZEUVN4aFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQlVpeEZRVUZYUXl4SlFVRkpTaXhOUVVGTlN5eE5RVUV4UWl4RlFVRnJRMFlzU1VGQlNVTXNRMEZCZEVNc1JVRkJlVU5FTEVkQlFYcERMRVZCUVRoRE8wRkJRekZETEdkQ1FVRkpSeXhQUVVGUFRpeE5RVUZOUnl4RFFVRk9MRU5CUVZnN1FVRkRRU3huUWtGQlNVa3NVMEZCVTBRc1MwRkJTMFVzVDBGQmJFSTdRVUZEUVN4blFrRkJTVU1zVjBGQlZ5eExRVUZtTzBGQlEwRXNhVUpCUVVzc1NVRkJTVU1zU1VGQlNWSXNXVUZCV1Vjc1RVRkJXaXhIUVVGeFFpeERRVUZzUXl4RlFVRnhRMHNzUzBGQlN5eERRVUV4UXl4RlFVRTJRMEVzUjBGQk4wTXNSVUZCYTBRN1FVRkRPVU1zYjBKQlFVbElMRlZCUVZWTUxGbEJRVmxSTEVOQlFWb3NSVUZCWlVZc1QwRkJOMElzUlVGQmMwTTdRVUZEYkVOT0xHZERRVUZaVXl4TlFVRmFMRU5CUVcxQ1JDeEpRVUZGTEVOQlFYSkNMRVZCUVhkQ0xFTkJRWGhDTEVWQlFUSkNTaXhKUVVFelFqdEJRVU5CUnl3clFrRkJWeXhKUVVGWU8wRkJRMEU3UVVGRFNEdEJRVU5LTzBGQlEwUXNaMEpCUVVrc1EwRkJRMEVzVVVGQlRDeEZRVUZsTzBGQlExaFFMRFJDUVVGWlV5eE5RVUZhTEVOQlFXMUNMRU5CUVc1Q0xFVkJRWE5DTEVOQlFYUkNMRVZCUVhsQ1RDeEpRVUY2UWp0QlFVTklPMEZCUTBvN1FVRkRSQ3hoUVVGTFRDeE5RVUZNTEVkQlFXTkRMRmRCUVdRN1FVRkRTQ3hMUVc1SE5FTTdRVUZ4UnpkRFZTeHJRa0Z5UnpaRExEQkNRWEZITjBKRExGZEJja2MyUWl4RlFYRkhhRUk3UVVGRGVrSXNXVUZCU1hKRExGZEJRVmN6UXl4WFFVRlhaMFVzV1VGQldDeERRVUYzUWk5RUxGbEJRVmxuUml4UlFVRndReXhEUVVGbU96dEJRVVZCZEVNc2FVSkJRVk4xUXl4VFFVRlVMRWRCUVhGQ1JpeFpRVUZaUnl4SlFVRnFRenRCUVVOQmVFTXNhVUpCUVZONVF5eFZRVUZVTEVkQlFYTkNjRVlzVjBGQlYyZEZMRmxCUVZnc1EwRkJkMEl2UkN4WlFVRlpiMFlzVTBGQmNFTXNRMEZCZEVJN1FVRkRRVEZETEdsQ1FVRlRlVU1zVlVGQlZDeERRVUZ2UWtVc1UwRkJjRUlzUjBGQlowTXpReXhSUVVGb1F6dEJRVU5CUVN4cFFrRkJVM2xETEZWQlFWUXNRMEZCYjBKSExGVkJRWEJDTEVkQlFXbERVQ3haUVVGWmNrTXNVVUZCV2l4RFFVRnhRalJETEZWQlFYUkVPenRCUVVWQk5VTXNhVUpCUVZNMlF5eG5Ra0ZCVkN4SFFVRTBRaXhMUVVFMVFqczdRVUZGUVR0QlFVTkJPenRCUVVWQkxGbEJRVWwwUXl4VlFVRlZMRWxCUVVscVJDeFpRVUZaV1N4cFFrRkJhRUlzUlVGQlpEczdRVUZGUVRoQ0xHbENRVUZUT0VNc1NVRkJWQ3hEUVVGalZDeFpRVUZaY2tNc1VVRkJNVUlzUlVGRFNVOHNUMEZFU2l4RlFVTmhRU3hQUVVSaUxFVkJRM05DTEV0QlFVdHdReXhaUVVRelFqczdRVUZKUVN4bFFVRlBOa0lzVVVGQlVEdEJRVU5JTEV0QmVrZzBRenRCUVRKSU4wTXJReXhqUVROSU5rTXNjMEpCTWtocVExWXNWMEV6U0dsRExFVkJNa2h3UWxjc1VVRXpTRzlDTEVWQk1raFdReXhSUVROSVZTeEZRVEpJUVR0QlFVTjZReXhaUVVGSmJrSXNUMEZCVDNwRkxGZEJRVmRuUlN4WlFVRllMRU5CUVhkQ0wwUXNXVUZCV1RSR0xFMUJRWEJETEVOQlFWZzdRVUZEUVN4WlFVRkpNME1zVlVGQlZYVkNMRWxCUVdRN1FVRkRRVUVzWVVGQlMyZENMRWxCUVV3c1EwRkJWVVVzVVVGQlZpeEZRVUZ2UWtNc1VVRkJjRUlzUlVGQk9FSXhReXhQUVVFNVFpeEZRVUYxUTBFc1QwRkJka003UVVGRFFTeGxRVUZQZFVJc1NVRkJVRHRCUVVOSUxFdEJhRWswUXp0QlFXdEpOME54UWl3MFFrRnNTVFpETEc5RFFXdEpia0pETEVsQmJFbHRRaXhGUVd0SllqdEJRVU0xUWl4aFFVRkxMRWxCUVVsNlJpeEpRVUZVTEVsQlFXbENMRXRCUVVzd1JpeHRRa0ZCZEVJc1JVRkJNa003UVVGRGRrTXNaMEpCUVVreFJpeExRVUZMTWtZc1QwRkJUQ3hEUVVGaFJpeEpRVUZpTEV0QlFYTkNMRU5CUVVNc1EwRkJNMElzUlVGQk9FSTdRVUZETVVJc2RVSkJRVThzUzBGQlMwTXNiVUpCUVV3c1EwRkJlVUl4Uml4SlFVRjZRaXhEUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTEdWQlFVOHNTVUZCVUR0QlFVTklMRXRCZWtrMFF6dEJRVEpKTjBNMFJpd3JRa0V6U1RaRExIVkRRVEpKYUVKSUxFbEJNMGxuUWl4RlFUSkpWa2tzVjBFelNWVXNSVUV5U1VjN1FVRkROVU1zV1VGQlNVRXNaMEpCUVdkQ0xFdEJRVXNzUTBGQmVrSXNSVUZCTkVJN1FVRkJSVUVzTUVKQlFXTXNTVUZCWkR0QlFVRnhRanRCUVVOdVJDeGhRVUZMTEVsQlFVazNSaXhKUVVGVUxFbEJRV2xDTEV0QlFVc3dSaXh0UWtGQmRFSXNSVUZCTWtNN1FVRkRka01zWjBKQlFVa3hSaXhMUVVGTE1rWXNUMEZCVEN4RFFVRmhSaXhKUVVGaUxFMUJRWFZDTEVOQlFVTXNRMEZCTlVJc1JVRkJLMEk3UVVGREwwSXNaMEpCUVVsSkxGZEJRVW9zUlVGQmFVSTdRVUZEWWl4eFFrRkJTM0pHTEZsQlFVd3NRMEZCYTBKelJpeFpRVUZzUWl4RFFVRXJRaXhMUVVGTFNpeHRRa0ZCVEN4RFFVRjVRakZHTEVsQlFYcENMRU5CUVM5Q08wRkJRMGc3UVVGRFJDeHRRa0ZCVHl4TFFVRkxNRVlzYlVKQlFVd3NRMEZCZVVJeFJpeEpRVUY2UWl4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVhCS05FTXNRMEZCVkN4RFFVRjRReUlzSW1acGJHVWlPaUpEUTBaaFkzUnZjbmt1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4eVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTJJRU5vZFd0dmJtY2dWR1ZqYUc1dmJHOW5hV1Z6SUVsdVl5NWNjbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4eVhHNWNjbHh1SUdoMGRIQTZMeTkzZDNjdVkyOWpiM015WkMxNExtOXlaMXh5WEc1Y2NseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2NseHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pHOWpkVzFsYm5SaGRHbHZiaUJtYVd4bGN5QW9kR2hsSUZ3aVUyOW1kSGRoY21WY0lpa3NJSFJ2SUdSbFlXeGNjbHh1SUdsdUlIUm9aU0JUYjJaMGQyRnlaU0IzYVhSb2IzVjBJSEpsYzNSeWFXTjBhVzl1TENCcGJtTnNkV1JwYm1jZ2QybDBhRzkxZENCc2FXMXBkR0YwYVc5dUlIUm9aU0J5YVdkb2RITmNjbHh1SUhSdklIVnpaU3dnWTI5d2VTd2diVzlrYVdaNUxDQnRaWEpuWlN3Z2NIVmliR2x6YUN3Z1pHbHpkSEpwWW5WMFpTd2djM1ZpYkdsalpXNXpaU3dnWVc1a0wyOXlJSE5sYkd4Y2NseHVJR052Y0dsbGN5QnZaaUIwYUdVZ1UyOW1kSGRoY21Vc0lHRnVaQ0IwYnlCd1pYSnRhWFFnY0dWeWMyOXVjeUIwYnlCM2FHOXRJSFJvWlNCVGIyWjBkMkZ5WlNCcGMxeHlYRzRnWm5WeWJtbHphR1ZrSUhSdklHUnZJSE52TENCemRXSnFaV04wSUhSdklIUm9aU0JtYjJ4c2IzZHBibWNnWTI5dVpHbDBhVzl1Y3pwY2NseHVYSEpjYmlCVWFHVWdZV0p2ZG1VZ1kyOXdlWEpwWjJoMElHNXZkR2xqWlNCaGJtUWdkR2hwY3lCd1pYSnRhWE56YVc5dUlHNXZkR2xqWlNCemFHRnNiQ0JpWlNCcGJtTnNkV1JsWkNCcGJseHlYRzRnWVd4c0lHTnZjR2xsY3lCdmNpQnpkV0p6ZEdGdWRHbGhiQ0J3YjNKMGFXOXVjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXVYSEpjYmx4eVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4eVhHNGdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NYSEpjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNjbHh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjY2x4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEhKY2JpQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVVnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9YSEpjYmlCVVNFVWdVMDlHVkZkQlVrVXVYSEpjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh5WEc1Y2NseHViR1YwSUVKaGMyVlBZbXBsWTNRZ1BTQmtjbUZuYjI1Q2IyNWxjeTVDWVhObFQySnFaV04wTEZ4eVhHNGdJQ0FnUW1GelpVWmhZM1J2Y25rZ1BTQmtjbUZuYjI1Q2IyNWxjeTVDWVhObFJtRmpkRzl5ZVR0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQWJXOWtkV3hsSUdSeVlXZHZia0p2Ym1WelhISmNiaW92WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUUdOc1lYTnpJRU5EUm1GamRHOXllVnh5WEc0Z0tpQkFaWGgwWlc1a2N5QkNZWE5sUm1GamRHOXllVnh5WEc0cUwxeHlYRzUyWVhJZ1EwTkdZV04wYjNKNUlEMGdaSEpoWjI5dVFtOXVaWE11UTBOR1lXTjBiM0o1SUQwZ1kyTXVRMnhoYzNNb2UxeHlYRzRnSUNBZ2JtRnRaVG9nSjJSeVlXZHZia0p2Ym1WekxrTkRSbUZqZEc5eWVTY3NYSEpjYmlBZ0lDQmxlSFJsYm1Sek9pQkNZWE5sUm1GamRHOXllU3hjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUkpibk4wWVc1alpWeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRME5HWVdOMGIzSjVmVnh5WEc0Z0lDQWdJQ29nUUhOMFlYUnBZMXh5WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDQWdJQ0FxSUd4bGRDQm1ZV04wYjNKNUlEMGdaSEpoWjI5dVFtOXVaWE11UTBOR1lXTjBiM0o1TG1kbGRFbHVjM1JoYm1ObEtDazdYSEpjYmlBZ0lDQXFMMXh5WEc0Z0lDQWdjM1JoZEdsamN6b2dlMXh5WEc0Z0lDQWdJQ0FnSUY5bVlXTjBiM0o1T2lCdWRXeHNMRnh5WEc0Z0lDQWdJQ0FnSUdkbGRFbHVjM1JoYm1ObElDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGRFEwWmhZM1J2Y25rdVgyWmhZM1J2Y25rcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRU5EUm1GamRHOXllUzVmWm1GamRHOXllU0E5SUc1bGR5QkRRMFpoWTNSdmNua29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1EwTkdZV04wYjNKNUxsOW1ZV04wYjNKNU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ1kzUnZjaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUdWMlpXNTBUV0Z1WVdkbGNpQTlJRzVsZHlCa2NtRm5iMjVDYjI1bGN5NURRMEZ5YldGMGRYSmxSR2x6Y0d4aGVTZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMlJ5WVdkdmJrSnZibVZ6SUQwZ2JtVjNJR1J5WVdkdmJrSnZibVZ6TGtSeVlXZHZia0p2Ym1WektHVjJaVzUwVFdGdVlXZGxjaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR2xtSUNnaFEwTmZTbE5DSUNZbUlDRkRRMTlGUkVsVVQxSWdKaVlnWTJNdVpHbHlaV04wYjNJdVgzTmphR1ZrZFd4bGNpa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmpZeTVuWVcxbExtOXVLR05qTG1kaGJXVXVSVlpGVGxSZlVrVlRWRUZTVkN3Z2RHaHBjeTVwYm1sMFZYQmtZWFJsTENCMGFHbHpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1cGJtbDBWWEJrWVhSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQnBibWwwVlhCa1lYUmxJQ2hrZENrZ2UxeHlYRzRnSUNBZ0lDQWdJR05qTG1ScGNtVmpkRzl5TGw5elkyaGxaSFZzWlhJdVpXNWhZbXhsUm05eVZHRnlaMlYwS0hSb2FYTXBPMXh5WEc0Z0lDQWdJQ0FnSUdOakxtUnBjbVZqZEc5eUxsOXpZMmhsWkhWc1pYSXVjMk5vWldSMWJHVlZjR1JoZEdVb2RHaHBjeXdnWTJNdVUyTm9aV1IxYkdWeUxsQlNTVTlTU1ZSWlgxTlpVMVJGVFN3Z1ptRnNjMlVwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQjFjR1JoZEdVZ0tHUjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWkhKaFoyOXVRbTl1WlhNdVlXUjJZVzVqWlZScGJXVW9aSFFwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQm5aWFJFY21GbmIyNUNiMjVsYzBSaGRHRkNlVkpoZDBSaGRHRWdLSEpoZDBSaGRHRXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdaR0YwWVZCaGNuTmxjaUE5SUhKaGQwUmhkR0VnYVc1emRHRnVZMlZ2WmlCQmNuSmhlVUoxWm1abGNpQS9JRUpoYzJWR1lXTjBiM0o1TGw5aWFXNWhjbmxRWVhKelpYSWdPaUIwYUdsekxsOWtZWFJoVUdGeWMyVnlPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrWVhSaFVHRnljMlZ5TG5CaGNuTmxSSEpoWjI5dVFtOXVaWE5FWVhSaEtISmhkMFJoZEdFc0lERXVNQ2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHZJRUoxYVd4a0lHNWxkeUJoY21GdGRIVnlaU0IzYVhSb0lHRWdibVYzSUdScGMzQnNZWGt1WEhKY2JpQWdJQ0JpZFdsc1pFRnliV0YwZFhKbFJHbHpjR3hoZVNBb1lYSnRZWFIxY21WT1lXMWxMQ0JrY21GbmIyNUNiMjVsYzA1aGJXVXNJSE5yYVc1T1lXMWxMQ0IwWlhoMGRYSmxRWFJzWVhOT1lXMWxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJR0Z5YldGMGRYSmxJRDBnZEdocGN5NWlkV2xzWkVGeWJXRjBkWEpsS0dGeWJXRjBkWEpsVG1GdFpTd2daSEpoWjI5dVFtOXVaWE5PWVcxbExDQnphMmx1VG1GdFpTd2dkR1Y0ZEhWeVpVRjBiR0Z6VG1GdFpTazdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0Z5YldGMGRYSmxJQ1ltSUdGeWJXRjBkWEpsTGw5a2FYTndiR0Y1TzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZMeUJDZFdsc1pDQnpkV0lnWVhKdFlYUjFjbVVnWm5KdmJTQmhiaUJsZUdsemRDQmhjbTFoZEhWeVpTQmpiMjF3YjI1bGJuUXVYSEpjYmlBZ0lDQXZMeUJKZENCM2FXeHNJSE5vWVhKbElHUnlZV2R2YmtGemMyVjBJR0Z1WkNCa2NtRm5iMjVCZEd4aGMwRnpjMlYwTGx4eVhHNGdJQ0FnTHk4Z1FuVjBJRzV2WkdVZ1kyRnVJRzV2ZENCemFHRnlaU3h2Y2lCM2FXeHNJR05oZFhObElISmxibVJsY2lCbGNuSnZjaTVjY2x4dUlDQWdJR055WldGMFpVRnliV0YwZFhKbFRtOWtaU0FvWTI5dGNDd2dZWEp0WVhSMWNtVk9ZVzFsTENCdWIyUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2JtOWtaU0E5SUc1dlpHVWdmSHdnYm1WM0lHTmpMazV2WkdVb0tUdGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ1pHbHpjR3hoZVNBOUlHNXZaR1V1WjJWMFEyOXRjRzl1Wlc1MEtHUnlZV2R2YmtKdmJtVnpMa0Z5YldGMGRYSmxSR2x6Y0d4aGVTazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmthWE53YkdGNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUnBjM0JzWVhrZ1BTQnViMlJsTG1Ga1pFTnZiWEJ2Ym1WdWRDaGtjbUZuYjI1Q2IyNWxjeTVCY20xaGRIVnlaVVJwYzNCc1lYa3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYm05a1pTNXVZVzFsSUQwZ1lYSnRZWFIxY21WT1lXMWxPMXh5WEc0Z0lDQWdJQ0FnSUZ4eVhHNGdJQ0FnSUNBZ0lHUnBjM0JzWVhrdVgyRnliV0YwZFhKbFRtRnRaU0E5SUdGeWJXRjBkWEpsVG1GdFpUdGNjbHh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVMbDlPSkdSeVlXZHZia0Z6YzJWMElEMGdZMjl0Y0M1a2NtRm5iMjVCYzNObGREdGNjbHh1SUNBZ0lDQWdJQ0JrYVhOd2JHRjVMbDlPSkdSeVlXZHZia0YwYkdGelFYTnpaWFFnUFNCamIyMXdMbVJ5WVdkdmJrRjBiR0Z6UVhOelpYUTdYSEpjYmlBZ0lDQWdJQ0FnWkdsemNHeGhlUzVmYVc1cGRDZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1pHbHpjR3hoZVR0Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCY2NseHVJQ0FnSUY5aWRXbHNaRlJsZUhSMWNtVkJkR3hoYzBSaGRHRWdLSFJsZUhSMWNtVkJkR3hoYzBSaGRHRXNJSFJsZUhSMWNtVkJkR3hoY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMFpYaDBkWEpsUVhSc1lYTkVZWFJoS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGVIUjFjbVZCZEd4aGMwUmhkR0V1Y21WdVpHVnlWR1Y0ZEhWeVpTQTlJSFJsZUhSMWNtVkJkR3hoY3p0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxlSFIxY21WQmRHeGhjMFJoZEdFZ1BTQkNZWE5sVDJKcVpXTjBMbUp2Y25KdmQwOWlhbVZqZENoa2NtRm5iMjVDYjI1bGN5NURRMVJsZUhSMWNtVkJkR3hoYzBSaGRHRXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVjRkSFZ5WlVGMGJHRnpSR0YwWVR0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdYM052Y25SVGJHOTBjeUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhOc2IzUnpJRDBnZEdocGN5NWZjMnh2ZEhNN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhOdmNuUmxaRk5zYjNSeklEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQnpiRzkwY3k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSE5zYjNRZ1BTQnpiRzkwYzF0cFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JHVjBJSHBQY21SbGNpQTlJSE5zYjNRdVgzcFBjbVJsY2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkdWMElHbHVjMlZ5ZEdWa0lEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdvZ1BTQnpiM0owWldSVGJHOTBjeTVzWlc1bmRHZ2dMU0F4T3lCcUlENDlJREE3SUdvdExTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIcFBjbVJsY2lBK1BTQnpiM0owWldSVGJHOTBjMXRxWFM1ZmVrOXlaR1Z5S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYzI5eWRHVmtVMnh2ZEhNdWMzQnNhV05sS0dvck1Td2dNQ3dnYzJ4dmRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXNXpaWEowWldRZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0p5WldGck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2doYVc1elpYSjBaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lITnZjblJsWkZOc2IzUnpMbk53YkdsalpTZ3dMQ0F3TENCemJHOTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjBhR2x6TGw5emJHOTBjeUE5SUhOdmNuUmxaRk5zYjNSek8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0JmWW5WcGJHUkJjbTFoZEhWeVpTQW9aR0YwWVZCaFkydGhaMlVwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnWVhKdFlYUjFjbVVnUFNCQ1lYTmxUMkpxWldOMExtSnZjbkp2ZDA5aWFtVmpkQ2hrY21GbmIyNUNiMjVsY3k1QmNtMWhkSFZ5WlNrN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUdGeWJXRjBkWEpsTGw5emEybHVSR0YwWVNBOUlHUmhkR0ZRWVdOcllXZGxMbk5yYVc0N1hISmNiaUFnSUNBZ0lDQWdZWEp0WVhSMWNtVXVYMkZ1YVcxaGRHbHZiaUE5SUVKaGMyVlBZbXBsWTNRdVltOXljbTkzVDJKcVpXTjBLR1J5WVdkdmJrSnZibVZ6TGtGdWFXMWhkR2x2YmlrN1hISmNiaUFnSUNBZ0lDQWdZWEp0WVhSMWNtVXVYMkZ1YVcxaGRHbHZiaTVmWVhKdFlYUjFjbVVnUFNCaGNtMWhkSFZ5WlR0Y2NseHVJQ0FnSUNBZ0lDQmhjbTFoZEhWeVpTNWZZVzVwYldGMGFXOXVMbUZ1YVcxaGRHbHZibk1nUFNCa1lYUmhVR0ZqYTJGblpTNWhjbTFoZEhWeVpTNWhibWx0WVhScGIyNXpPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmhjbTFoZEhWeVpTNWZhWE5EYUdsc1pFRnliV0YwZFhKbElEMGdabUZzYzJVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklHWnBlR1ZrSUdSeVlXZHZibUp2Ym1WeklITnZjblFnYVhOemRXVmNjbHh1SUNBZ0lDQWdJQ0F2THlCaGNtMWhkSFZ5WlM1ZmMyOXlkRk5zYjNSeklEMGdkR2hwY3k1ZmMyOXlkRk5zYjNSek8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdaR2x6Y0d4aGVTQTlJRzVsZHlCa2NtRm5iMjVDYjI1bGN5NURRMEZ5YldGMGRYSmxSR2x6Y0d4aGVTZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmhjbTFoZEhWeVpTNXBibWwwS0dSaGRHRlFZV05yWVdkbExtRnliV0YwZFhKbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2FYTndiR0Y1TENCa2FYTndiR0Y1TENCMGFHbHpMbDlrY21GbmIyNUNiMjVsYzF4eVhHNGdJQ0FnSUNBZ0lDazdYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGeWJXRjBkWEpsTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQmZZblZwYkdSVGJHOTBJQ2hrWVhSaFVHRmphMkZuWlN3Z2MyeHZkRVJoZEdFc0lHUnBjM0JzWVhsektTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElITnNiM1FnUFNCQ1lYTmxUMkpxWldOMExtSnZjbkp2ZDA5aWFtVmpkQ2hrY21GbmIyNUNiMjVsY3k1RFExTnNiM1FwTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JrYVhOd2JHRjVJRDBnYzJ4dmREdGNjbHh1SUNBZ0lDQWdJQ0J6Ykc5MExtbHVhWFFvYzJ4dmRFUmhkR0VzSUdScGMzQnNZWGx6TENCa2FYTndiR0Y1TENCa2FYTndiR0Y1S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2MyeHZkRHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ1oyVjBSSEpoWjI5dVFtOXVaWE5FWVhSaFFubFZWVWxFSUNoMWRXbGtLU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2JtRnRaU0JwYmlCMGFHbHpMbDlrY21GbmIyNUNiMjVsYzBSaGRHRk5ZWEFwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHNWhiV1V1YVc1a1pYaFBaaWgxZFdsa0tTQWhQU0F0TVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJSeVlXZHZia0p2Ym1WelJHRjBZVTFoY0Z0dVlXMWxYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2JuVnNiRHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ2NtVnRiM1psUkhKaFoyOXVRbTl1WlhORVlYUmhRbmxWVlVsRUlDaDFkV2xrTENCa2FYTndiM05sUkdGMFlTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGthWE53YjNObFJHRjBZU0E5UFQwZ2RtOXBaQ0F3S1NCN0lHUnBjM0J2YzJWRVlYUmhJRDBnZEhKMVpUc2dmVnh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUc1aGJXVWdhVzRnZEdocGN5NWZaSEpoWjI5dVFtOXVaWE5FWVhSaFRXRndLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNodVlXMWxMbWx1WkdWNFQyWW9kWFZwWkNrZ1BUMDlJQzB4S1NCamIyNTBhVzUxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUnBjM0J2YzJWRVlYUmhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrY21GbmIyNUNiMjVsY3k1aWRXWm1aWEpQWW1wbFkzUW9kR2hwY3k1ZlpISmhaMjl1UW05dVpYTkVZWFJoVFdGd1cyNWhiV1ZkS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWld4bGRHVWdkR2hwY3k1ZlpISmhaMjl1UW05dVpYTkVZWFJoVFdGd1cyNWhiV1ZkTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1ZlNrN1hISmNiaUpkZlE9PSJdfQ==