(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _global = typeof window === 'undefined' ? global : window;
        _global.cc = _global.cc || {};
        _global._cc = _global._cc || {};
        require('./predefine');
        require('./polyfill/string');
        require('./polyfill/misc');
        require('./polyfill/array');
        require('./polyfill/object');
        require('./polyfill/array-buffer');
        require('./polyfill/number');
        if (!(CC_EDITOR && Editor.isMainProcess)) {
            require('./polyfill/typescript');
        }
        require('./cocos2d/core/predefine');
        if (!(CC_EDITOR && Editor.isMainProcess)) {
            require('./cocos2d');
        }
        require('./extends');
        if (CC_EDITOR) {
            if (Editor.isMainProcess) {
                Editor.versions['cocos2d'] = require('./package').version;
            }
        }
        module.exports = _global.cc;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIiwiQzovVXNlcnMvbmFudGFzL2ZpcmViYWxsLXgvZmJfMjEtcmVsZWFzZS9lbmdpbmUvaW5kZXguanMiXSwibmFtZXMiOlsiX2dsb2JhbCIsIndpbmRvdyIsImdsb2JhbCIsImNjIiwiX2NjIiwicmVxdWlyZSIsIkNDX0VESVRPUiIsIkVkaXRvciIsImlzTWFpblByb2Nlc3MiLCJ2ZXJzaW9ucyIsInZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUE2QkEsSUFBSUEsT0FBQUEsR0FBVSxPQUFPQyxNQUFQLEtBQWtCLFdBQWxCLEdBQWdDQyxNQUFoQyxHQUF5Q0QsTUFBdkQ7UUFVQUQsT0FBQUEsQ0FBUUcsRUFBUkgsR0FBYUEsT0FBQUEsQ0FBUUcsRUFBUkgsSUFBYyxFQUEzQkE7UUFHQUEsT0FBQUEsQ0FBUUksR0FBUkosR0FBY0EsT0FBQUEsQ0FBUUksR0FBUkosSUFBZSxFQUE3QkE7UUFFQUssT0FBQUEsQ0FBUSxhQUFSQTtRQUdBQSxPQUFBQSxDQUFRLG1CQUFSQTtRQUNBQSxPQUFBQSxDQUFRLGlCQUFSQTtRQUNBQSxPQUFBQSxDQUFRLGtCQUFSQTtRQUNBQSxPQUFBQSxDQUFRLG1CQUFSQTtRQUNBQSxPQUFBQSxDQUFRLHlCQUFSQTtRQUNBQSxPQUFBQSxDQUFRLG1CQUFSQTtRQUNBLElBQUksQ0FBRUMsQ0FBQUEsU0FBQUEsSUFBYUMsTUFBQUEsQ0FBT0MsYUFBcEJGLENBQU4sRUFBMEM7QUFBQSxZQUN0Q0QsT0FBQUEsQ0FBUSx1QkFBUkEsRUFEc0M7QUFBQTtRQUkxQ0EsT0FBQUEsQ0FBUSwwQkFBUkE7UUFJQSxJQUFJLENBQUVDLENBQUFBLFNBQUFBLElBQWFDLE1BQUFBLENBQU9DLGFBQXBCRixDQUFOLEVBQTBDO0FBQUEsWUFDdENELE9BQUFBLENBQVEsV0FBUkEsRUFEc0M7QUFBQTtRQU0xQ0EsT0FBQUEsQ0FBUSxXQUFSQTtRQUVBLElBQUlDLFNBQUosRUFBZTtBQUFBLFlBQ1gsSUFBSUMsTUFBQUEsQ0FBT0MsYUFBWCxFQUEwQjtBQUFBLGdCQUN0QkQsTUFBQUEsQ0FBT0UsUUFBUEYsQ0FBZ0IsU0FBaEJBLElBQTZCRixPQUFBQSxDQUFRLFdBQVJBLEVBQXFCSyxPQUFsREgsQ0FEc0I7QUFBQSxhQURmO0FBQUE7UUFNZkksTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJYLE9BQUFBLENBQVFHLEVBQXpCUSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8vIFBSRURFRklORVxyXG5cclxuLy8gd2luZG93IG1heSBiZSB1bmRlZmluZWQgd2hlbiBmaXJzdCBsb2FkIGVuZ2luZSBmcm9tIGVkaXRvclxyXG52YXIgX2dsb2JhbCA9IHR5cGVvZiB3aW5kb3cgPT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDogd2luZG93O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogVGhlIG1haW4gbmFtZXNwYWNlIG9mIENvY29zMmQtSlMsIGFsbCBlbmdpbmUgY29yZSBjbGFzc2VzLCBmdW5jdGlvbnMsIHByb3BlcnRpZXMgYW5kIGNvbnN0YW50cyBhcmUgZGVmaW5lZCBpbiB0aGlzIG5hbWVzcGFjZS5cclxuICogISN6aFxyXG4gKiBDb2NvcyDlvJXmk47nmoTkuLvopoHlkb3lkI3nqbrpl7TvvIzlvJXmk47ku6PnoIHkuK3miYDmnInnmoTnsbvvvIzlh73mlbDvvIzlsZ7mgKflkozluLjph4/pg73lnKjov5nkuKrlkb3lkI3nqbrpl7TkuK3lrprkuYnjgIJcclxuICogQG1vZHVsZSBjY1xyXG4gKiBAbWFpbiBjY1xyXG4gKi9cclxuX2dsb2JhbC5jYyA9IF9nbG9iYWwuY2MgfHwge307XHJcblxyXG4vLyBGb3IgaW50ZXJuYWwgdXNhZ2VcclxuX2dsb2JhbC5fY2MgPSBfZ2xvYmFsLl9jYyB8fCB7fTtcclxuXHJcbnJlcXVpcmUoJy4vcHJlZGVmaW5lJyk7XHJcblxyXG4vLyBwb2x5ZmlsbHNcclxucmVxdWlyZSgnLi9wb2x5ZmlsbC9zdHJpbmcnKTtcclxucmVxdWlyZSgnLi9wb2x5ZmlsbC9taXNjJyk7XHJcbnJlcXVpcmUoJy4vcG9seWZpbGwvYXJyYXknKTtcclxucmVxdWlyZSgnLi9wb2x5ZmlsbC9vYmplY3QnKTtcclxucmVxdWlyZSgnLi9wb2x5ZmlsbC9hcnJheS1idWZmZXInKTtcclxucmVxdWlyZSgnLi9wb2x5ZmlsbC9udW1iZXInKTtcclxuaWYgKCEoQ0NfRURJVE9SICYmIEVkaXRvci5pc01haW5Qcm9jZXNzKSkge1xyXG4gICAgcmVxdWlyZSgnLi9wb2x5ZmlsbC90eXBlc2NyaXB0Jyk7XHJcbn1cclxuXHJcbnJlcXVpcmUoJy4vY29jb3MyZC9jb3JlL3ByZWRlZmluZScpO1xyXG5cclxuLy8gTE9BRCBDT0NPUzJEIEVOR0lORSBDT0RFXHJcblxyXG5pZiAoIShDQ19FRElUT1IgJiYgRWRpdG9yLmlzTWFpblByb2Nlc3MpKSB7XHJcbiAgICByZXF1aXJlKCcuL2NvY29zMmQnKTtcclxufVxyXG5cclxuLy8gTE9BRCBFWFRFTkRTXHJcblxyXG5yZXF1aXJlKCcuL2V4dGVuZHMnKTtcclxuXHJcbmlmIChDQ19FRElUT1IpIHtcclxuICAgIGlmIChFZGl0b3IuaXNNYWluUHJvY2Vzcykge1xyXG4gICAgICAgIEVkaXRvci52ZXJzaW9uc1snY29jb3MyZCddID0gcmVxdWlyZSgnLi9wYWNrYWdlJykudmVyc2lvbjtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBfZ2xvYmFsLmNjOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vLyBQUkVERUZJTkVcblxuLy8gd2luZG93IG1heSBiZSB1bmRlZmluZWQgd2hlbiBmaXJzdCBsb2FkIGVuZ2luZSBmcm9tIGVkaXRvclxudmFyIF9nbG9iYWwgPSB0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJyA/IGdsb2JhbCA6IHdpbmRvdztcblxuLyoqXHJcbiAqICEjZW5cclxuICogVGhlIG1haW4gbmFtZXNwYWNlIG9mIENvY29zMmQtSlMsIGFsbCBlbmdpbmUgY29yZSBjbGFzc2VzLCBmdW5jdGlvbnMsIHByb3BlcnRpZXMgYW5kIGNvbnN0YW50cyBhcmUgZGVmaW5lZCBpbiB0aGlzIG5hbWVzcGFjZS5cclxuICogISN6aFxyXG4gKiBDb2NvcyDlvJXmk47nmoTkuLvopoHlkb3lkI3nqbrpl7TvvIzlvJXmk47ku6PnoIHkuK3miYDmnInnmoTnsbvvvIzlh73mlbDvvIzlsZ7mgKflkozluLjph4/pg73lnKjov5nkuKrlkb3lkI3nqbrpl7TkuK3lrprkuYnjgIJcclxuICogQG1vZHVsZSBjY1xyXG4gKiBAbWFpbiBjY1xyXG4gKi9cbl9nbG9iYWwuY2MgPSBfZ2xvYmFsLmNjIHx8IHt9O1xuXG4vLyBGb3IgaW50ZXJuYWwgdXNhZ2Vcbl9nbG9iYWwuX2NjID0gX2dsb2JhbC5fY2MgfHwge307XG5cbnJlcXVpcmUoJy4vcHJlZGVmaW5lJyk7XG5cbi8vIHBvbHlmaWxsc1xucmVxdWlyZSgnLi9wb2x5ZmlsbC9zdHJpbmcnKTtcbnJlcXVpcmUoJy4vcG9seWZpbGwvbWlzYycpO1xucmVxdWlyZSgnLi9wb2x5ZmlsbC9hcnJheScpO1xucmVxdWlyZSgnLi9wb2x5ZmlsbC9vYmplY3QnKTtcbnJlcXVpcmUoJy4vcG9seWZpbGwvYXJyYXktYnVmZmVyJyk7XG5yZXF1aXJlKCcuL3BvbHlmaWxsL251bWJlcicpO1xuaWYgKCEoQ0NfRURJVE9SICYmIEVkaXRvci5pc01haW5Qcm9jZXNzKSkge1xuICByZXF1aXJlKCcuL3BvbHlmaWxsL3R5cGVzY3JpcHQnKTtcbn1cblxucmVxdWlyZSgnLi9jb2NvczJkL2NvcmUvcHJlZGVmaW5lJyk7XG5cbi8vIExPQUQgQ09DT1MyRCBFTkdJTkUgQ09ERVxuXG5pZiAoIShDQ19FRElUT1IgJiYgRWRpdG9yLmlzTWFpblByb2Nlc3MpKSB7XG4gIHJlcXVpcmUoJy4vY29jb3MyZCcpO1xufVxuXG4vLyBMT0FEIEVYVEVORFNcblxucmVxdWlyZSgnLi9leHRlbmRzJyk7XG5cbmlmIChDQ19FRElUT1IpIHtcbiAgaWYgKEVkaXRvci5pc01haW5Qcm9jZXNzKSB7XG4gICAgRWRpdG9yLnZlcnNpb25zWydjb2NvczJkJ10gPSByZXF1aXJlKCcuL3BhY2thZ2UnKS52ZXJzaW9uO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dsb2JhbC5jYztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltbHVaR1Y0TG1weklsMHNJbTVoYldWeklqcGJJbDluYkc5aVlXd2lMQ0ozYVc1a2IzY2lMQ0puYkc5aVlXd2lMQ0pqWXlJc0lsOWpZeUlzSW5KbGNYVnBjbVVpTENKRFExOUZSRWxVVDFJaUxDSkZaR2wwYjNJaUxDSnBjMDFoYVc1UWNtOWpaWE56SWl3aWRtVnljMmx2Ym5NaUxDSjJaWEp6YVc5dUlpd2liVzlrZFd4bElpd2laWGh3YjNKMGN5SmRMQ0p0WVhCd2FXNW5jeUk2SWpzN1FVRkJRVHM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUV3UWtFN08wRkJSVUU3UVVGRFFTeEpRVUZKUVN4VlFVRlZMRTlCUVU5RExFMUJRVkFzUzBGQmEwSXNWMEZCYkVJc1IwRkJaME5ETEUxQlFXaERMRWRCUVhsRFJDeE5RVUYyUkRzN1FVRkZRVHM3T3pzN096czdRVUZSUVVRc1VVRkJVVWNzUlVGQlVpeEhRVUZoU0N4UlFVRlJSeXhGUVVGU0xFbEJRV01zUlVGQk0wSTdPMEZCUlVFN1FVRkRRVWdzVVVGQlVVa3NSMEZCVWl4SFFVRmpTaXhSUVVGUlNTeEhRVUZTTEVsQlFXVXNSVUZCTjBJN08wRkJSVUZETEZGQlFWRXNZVUZCVWpzN1FVRkZRVHRCUVVOQlFTeFJRVUZSTEcxQ1FVRlNPMEZCUTBGQkxGRkJRVkVzYVVKQlFWSTdRVUZEUVVFc1VVRkJVU3hyUWtGQlVqdEJRVU5CUVN4UlFVRlJMRzFDUVVGU08wRkJRMEZCTEZGQlFWRXNlVUpCUVZJN1FVRkRRVUVzVVVGQlVTeHRRa0ZCVWp0QlFVTkJMRWxCUVVrc1JVRkJSVU1zWVVGQllVTXNUMEZCVDBNc1lVRkJkRUlzUTBGQlNpeEZRVUV3UXp0QlFVTjBRMGdzVlVGQlVTeDFRa0ZCVWp0QlFVTklPenRCUVVWRVFTeFJRVUZSTERCQ1FVRlNPenRCUVVWQk96dEJRVVZCTEVsQlFVa3NSVUZCUlVNc1lVRkJZVU1zVDBGQlQwTXNZVUZCZEVJc1EwRkJTaXhGUVVFd1F6dEJRVU4wUTBnc1ZVRkJVU3hYUVVGU08wRkJRMGc3TzBGQlJVUTdPMEZCUlVGQkxGRkJRVkVzVjBGQlVqczdRVUZGUVN4SlFVRkpReXhUUVVGS0xFVkJRV1U3UVVGRFdDeE5RVUZKUXl4UFFVRlBReXhoUVVGWUxFVkJRVEJDTzBGQlEzUkNSQ3hYUVVGUFJTeFJRVUZRTEVOQlFXZENMRk5CUVdoQ0xFbEJRVFpDU2l4UlFVRlJMRmRCUVZJc1JVRkJjVUpMTEU5QlFXeEVPMEZCUTBnN1FVRkRTanM3UVVGRlJFTXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFsb3NVVUZCVVVjc1JVRkJla0lpTENKbWFXeGxJam9pYVc1a1pYZ3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh5WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxUSXdNVFlnUTJoMWEyOXVaeUJVWldOb2JtOXNiMmRwWlhNZ1NXNWpMbHh5WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdVhISmNibHh5WEc0Z2FIUjBjSE02THk5M2QzY3VZMjlqYjNNdVkyOXRMMXh5WEc1Y2NseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2NseHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh5WEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjY2x4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hISmNiaUFnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHlYRzRnSUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjY2x4dUlDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjY2x4dVhISmNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh5WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2NseHVYSEpjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYSEpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2NseHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4eVhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHlYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNjbHh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2NseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2NseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhISmNibHh5WEc0dkx5QlFVa1ZFUlVaSlRrVmNjbHh1WEhKY2JpOHZJSGRwYm1SdmR5QnRZWGtnWW1VZ2RXNWtaV1pwYm1Wa0lIZG9aVzRnWm1seWMzUWdiRzloWkNCbGJtZHBibVVnWm5KdmJTQmxaR2wwYjNKY2NseHVkbUZ5SUY5bmJHOWlZV3dnUFNCMGVYQmxiMllnZDJsdVpHOTNJRDA5UFNBbmRXNWtaV1pwYm1Wa0p5QS9JR2RzYjJKaGJDQTZJSGRwYm1SdmR6dGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQWhJMlZ1WEhKY2JpQXFJRlJvWlNCdFlXbHVJRzVoYldWemNHRmpaU0J2WmlCRGIyTnZjekprTFVwVExDQmhiR3dnWlc1bmFXNWxJR052Y21VZ1kyeGhjM05sY3l3Z1puVnVZM1JwYjI1ekxDQndjbTl3WlhKMGFXVnpJR0Z1WkNCamIyNXpkR0Z1ZEhNZ1lYSmxJR1JsWm1sdVpXUWdhVzRnZEdocGN5QnVZVzFsYzNCaFkyVXVYSEpjYmlBcUlDRWplbWhjY2x4dUlDb2dRMjlqYjNNZzVieVY1cE9PNTVxRTVMaTc2S2FCNVpHOTVaQ041Nm02NlplMDc3eU01YnlWNXBPTzVMdWo1NkNCNUxpdDVvbUE1cHlKNTVxRTU3Rzc3N3lNNVllOTVwV3c3N3lNNWJHZTVvQ241WktNNWJpNDZZZVA2WU85NVp5bzZMK1o1TGlxNVpHOTVaQ041Nm02NlplMDVMaXQ1YTZhNUxtSjQ0Q0NYSEpjYmlBcUlFQnRiMlIxYkdVZ1kyTmNjbHh1SUNvZ1FHMWhhVzRnWTJOY2NseHVJQ292WEhKY2JsOW5iRzlpWVd3dVkyTWdQU0JmWjJ4dlltRnNMbU5qSUh4OElIdDlPMXh5WEc1Y2NseHVMeThnUm05eUlHbHVkR1Z5Ym1Gc0lIVnpZV2RsWEhKY2JsOW5iRzlpWVd3dVgyTmpJRDBnWDJkc2IySmhiQzVmWTJNZ2ZId2dlMzA3WEhKY2JseHlYRzV5WlhGMWFYSmxLQ2N1TDNCeVpXUmxabWx1WlNjcE8xeHlYRzVjY2x4dUx5OGdjRzlzZVdacGJHeHpYSEpjYm5KbGNYVnBjbVVvSnk0dmNHOXNlV1pwYkd3dmMzUnlhVzVuSnlrN1hISmNibkpsY1hWcGNtVW9KeTR2Y0c5c2VXWnBiR3d2Yldsell5Y3BPMXh5WEc1eVpYRjFhWEpsS0NjdUwzQnZiSGxtYVd4c0wyRnljbUY1SnlrN1hISmNibkpsY1hWcGNtVW9KeTR2Y0c5c2VXWnBiR3d2YjJKcVpXTjBKeWs3WEhKY2JuSmxjWFZwY21Vb0p5NHZjRzlzZVdacGJHd3ZZWEp5WVhrdFluVm1abVZ5SnlrN1hISmNibkpsY1hWcGNtVW9KeTR2Y0c5c2VXWnBiR3d2Ym5WdFltVnlKeWs3WEhKY2JtbG1JQ2doS0VORFgwVkVTVlJQVWlBbUppQkZaR2wwYjNJdWFYTk5ZV2x1VUhKdlkyVnpjeWtwSUh0Y2NseHVJQ0FnSUhKbGNYVnBjbVVvSnk0dmNHOXNlV1pwYkd3dmRIbHdaWE5qY21sd2RDY3BPMXh5WEc1OVhISmNibHh5WEc1eVpYRjFhWEpsS0NjdUwyTnZZMjl6TW1RdlkyOXlaUzl3Y21Wa1pXWnBibVVuS1R0Y2NseHVYSEpjYmk4dklFeFBRVVFnUTA5RFQxTXlSQ0JGVGtkSlRrVWdRMDlFUlZ4eVhHNWNjbHh1YVdZZ0tDRW9RME5mUlVSSlZFOVNJQ1ltSUVWa2FYUnZjaTVwYzAxaGFXNVFjbTlqWlhOektTa2dlMXh5WEc0Z0lDQWdjbVZ4ZFdseVpTZ25MaTlqYjJOdmN6SmtKeWs3WEhKY2JuMWNjbHh1WEhKY2JpOHZJRXhQUVVRZ1JWaFVSVTVFVTF4eVhHNWNjbHh1Y21WeGRXbHlaU2duTGk5bGVIUmxibVJ6SnlrN1hISmNibHh5WEc1cFppQW9RME5mUlVSSlZFOVNLU0I3WEhKY2JpQWdJQ0JwWmlBb1JXUnBkRzl5TG1selRXRnBibEJ5YjJObGMzTXBJSHRjY2x4dUlDQWdJQ0FnSUNCRlpHbDBiM0l1ZG1WeWMybHZibk5iSjJOdlkyOXpNbVFuWFNBOUlISmxjWFZwY21Vb0p5NHZjR0ZqYTJGblpTY3BMblpsY25OcGIyNDdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm0xdlpIVnNaUzVsZUhCdmNuUnpJRDBnWDJkc2IySmhiQzVqWXpzaVhYMD0iXX0=