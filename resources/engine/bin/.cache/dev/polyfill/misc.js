(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/polyfill/misc.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (!Math.sign) {
            Math.sign = function (x) {
                x = +x;
                if (x === 0 || isNaN(x)) {
                    return x;
                }
                return x > 0 ? 1 : -1;
            };
        }
        if (!Math.log2) {
            Math.log2 = function (x) {
                return Math.log(x) * Math.LOG2E;
            };
        }
        if (!Number.isInteger) {
            Number.isInteger = function (value) {
                return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
            };
        }
        if (CC_JSB || CC_RUNTIME || !console.time) {
            var Timer = window.performance || Date;
            var _timerTable = Object.create(null);
            console.time = function (label) {
                _timerTable[label] = Timer.now();
            };
            console.timeEnd = function (label) {
                var startTime = _timerTable[label];
                var duration = Timer.now() - startTime;
                console.log(label + ': ' + duration + 'ms');
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1pc2MuanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9wb2x5ZmlsbC9taXNjLmpzIl0sIm5hbWVzIjpbImlzTmFOIiwiTWF0aCIsInNpZ24iLCJ4IiwibG9nMiIsImxvZyIsIkxPRzJFIiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwidmFsdWUiLCJpc0Zpbml0ZSIsImZsb29yIiwiQ0NfSlNCIiwiQ0NfUlVOVElNRSIsImNvbnNvbGUiLCJ0aW1lIiwiVGltZXIiLCJ3aW5kb3ciLCJwZXJmb3JtYW5jZSIsIkRhdGUiLCJfdGltZXJUYWJsZSIsIk9iamVjdCIsImNyZWF0ZSIsImxhYmVsIiwibm93IiwidGltZUVuZCIsInN0YXJ0VGltZSIsImR1cmF0aW9uIl0sIm1hcHBpbmdzIjoiO0lBQWdCLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBO0lBQ0EsSUFBQSxRQUFBLEdBQWEsT0FBQSxHQUFBLE1BQUEsR0FBQSxFQUFBLE9BQUEsRUFBQSxFQUFBLEVBQWI7SUFDQSxJQUFBLFVBQUEsR0FBQSw2QkFBQTtJQUNKLElBQVdBLFNBQUFBLEdBQVUsT0FBQSxHQUFBLFVBQUEsT0FBQSxFQUFBO0FBQUEsUUFDckIsT0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBRHFCO0FBQUEsS0FBQSxHQUV4QixVQUFBLE9BQUEsRUFBQTtBQUFBLFFBQ00sT0FBUCxpQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQSxDQUFPLENBRE47QUFBQSxLQUZHO0lBS1gsU0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLEVBQUE7QUFBQTs7U0FBQTtBQUFBO1FBUkQsSUFBSSxDQUFDQyxJQUFBQSxDQUFLQyxJQUFWLEVBQWdCO0FBQUEsWUFDWkQsSUFBQUEsQ0FBS0MsSUFBTEQsR0FBWSxVQUFVRSxDQUFWLEVBQWE7QUFBQSxnQkFDckJBLENBQUFBLEdBQUksQ0FBQ0EsQ0FBTEEsQ0FEcUI7QUFBQSxnQkFFckIsSUFBSUEsQ0FBQUEsS0FBTSxDQUFOQSxJQUFXSCxLQUFBQSxDQUFNRyxDQUFOSCxDQUFmLEVBQXlCO0FBQUEsb0JBQ3JCLE9BQU9HLENBQVAsQ0FEcUI7QUFBQSxpQkFGSjtBQUFBLGdCQUtyQixPQUFPQSxDQUFBQSxHQUFJLENBQUpBLEdBQVEsQ0FBUkEsR0FBWSxDQUFDLENBQXBCLENBTHFCO0FBQUEsYUFBekJGLENBRFk7QUFBQTtRQVVoQixJQUFJLENBQUNBLElBQUFBLENBQUtHLElBQVYsRUFBZ0I7QUFBQSxZQUNaSCxJQUFBQSxDQUFLRyxJQUFMSCxHQUFZLFVBQVVFLENBQVYsRUFBYTtBQUFBLGdCQUNyQixPQUFPRixJQUFBQSxDQUFLSSxHQUFMSixDQUFTRSxDQUFURixJQUFjQSxJQUFBQSxDQUFLSyxLQUExQixDQURxQjtBQUFBLGFBQXpCTCxDQURZO0FBQUE7UUFNaEIsSUFBSSxDQUFDTSxNQUFBQSxDQUFPQyxTQUFaLEVBQXVCO0FBQUEsWUFDbkJELE1BQUFBLENBQU9DLFNBQVBELEdBQW1CLFVBQVVFLEtBQVYsRUFBaUI7QUFBQSxnQkFDaEMsT0FBTyxPQUFPQSxLQUFQLEtBQWlCLFFBQWpCLElBQTZCQyxRQUFBQSxDQUFTRCxLQUFUQyxDQUE3QixJQUFnRFQsSUFBQUEsQ0FBS1UsS0FBTFYsQ0FBV1EsS0FBWFIsTUFBc0JRLEtBQTdFLENBRGdDO0FBQUEsYUFBcENGLENBRG1CO0FBQUE7UUFNdkIsSUFBSUssTUFBQUEsSUFBVUMsVUFBVkQsSUFBd0IsQ0FBQ0UsT0FBQUEsQ0FBUUMsSUFBckMsRUFBMkM7QUFBQSxZQUN2QyxJQUFJQyxLQUFBQSxHQUFRQyxNQUFBQSxDQUFPQyxXQUFQRCxJQUFzQkUsSUFBbEMsQ0FEdUM7QUFBQSxZQUV2QyxJQUFJQyxXQUFBQSxHQUFjQyxNQUFBQSxDQUFPQyxNQUFQRCxDQUFjLElBQWRBLENBQWxCLENBRnVDO0FBQUEsWUFHdkNQLE9BQUFBLENBQVFDLElBQVJELEdBQWUsVUFBVVMsS0FBVixFQUFpQjtBQUFBLGdCQUM1QkgsV0FBQUEsQ0FBWUcsS0FBWkgsSUFBcUJKLEtBQUFBLENBQU1RLEdBQU5SLEVBQXJCSSxDQUQ0QjtBQUFBLGFBQWhDTixDQUh1QztBQUFBLFlBTXZDQSxPQUFBQSxDQUFRVyxPQUFSWCxHQUFrQixVQUFVUyxLQUFWLEVBQWlCO0FBQUEsZ0JBQy9CLElBQUlHLFNBQUFBLEdBQVlOLFdBQUFBLENBQVlHLEtBQVpILENBQWhCLENBRCtCO0FBQUEsZ0JBRS9CLElBQUlPLFFBQUFBLEdBQVdYLEtBQUFBLENBQU1RLEdBQU5SLEtBQWNVLFNBQTdCLENBRitCO0FBQUEsZ0JBRy9CWixPQUFBQSxDQUFRVCxHQUFSUyxDQUFlUyxLQUFBQSxHQUFmLElBQWVBLEdBQVVJLFFBQVZKLEdBQWYsSUFBQVQsRUFIK0I7QUFBQSxhQUFuQ0EsQ0FOdUM7QUFBQSxTQWQxQztBQUFBO0lBR2UsSUFBQSxPQUFBLEVBQWE7QUFBQSxRQUNMWCxRQUFBQSxDQUFLRixRQUFBQSxDQUFyQixPQUFnQkUsRUFBaEIsU0FBZ0JBLEVBQWhCLFFBQWdCQSxFQURLO0FBQUEsS0FBYixNQUdmO0FBQUE7WUFFc0IsUUFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUE7V0FGdEI7QUFBQSIsImZpbGUiOiJtaXNjLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaWYgKCFNYXRoLnNpZ24pIHtcclxuICAgIE1hdGguc2lnbiA9IGZ1bmN0aW9uICh4KSB7XHJcbiAgICAgICAgeCA9ICt4OyAvLyBjb252ZXJ0IHRvIGEgbnVtYmVyXHJcbiAgICAgICAgaWYgKHggPT09IDAgfHwgaXNOYU4oeCkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB4ID4gMCA/IDEgOiAtMTtcclxuICAgIH07XHJcbn1cclxuXHJcbmlmICghTWF0aC5sb2cyKSB7XHJcbiAgICBNYXRoLmxvZzIgPSBmdW5jdGlvbiAoeCkge1xyXG4gICAgICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMkU7XHJcbiAgICB9O1xyXG59XHJcblxyXG5pZiAoIU51bWJlci5pc0ludGVnZXIpIHtcclxuICAgIE51bWJlci5pc0ludGVnZXIgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xyXG4gICAgfTtcclxufVxyXG5cclxuaWYgKENDX0pTQiB8fCBDQ19SVU5USU1FIHx8ICFjb25zb2xlLnRpbWUpIHtcclxuICAgIHZhciBUaW1lciA9IHdpbmRvdy5wZXJmb3JtYW5jZSB8fCBEYXRlO1xyXG4gICAgdmFyIF90aW1lclRhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcclxuICAgIGNvbnNvbGUudGltZSA9IGZ1bmN0aW9uIChsYWJlbCkge1xyXG4gICAgICAgIF90aW1lclRhYmxlW2xhYmVsXSA9IFRpbWVyLm5vdygpO1xyXG4gICAgfTtcclxuICAgIGNvbnNvbGUudGltZUVuZCA9IGZ1bmN0aW9uIChsYWJlbCkge1xyXG4gICAgICAgIHZhciBzdGFydFRpbWUgPSBfdGltZXJUYWJsZVtsYWJlbF07XHJcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gVGltZXIubm93KCkgLSBzdGFydFRpbWU7XHJcbiAgICAgICAgY29uc29sZS5sb2coYCR7bGFiZWx9OiAke2R1cmF0aW9ufW1zYCk7XHJcbiAgICB9O1xyXG59XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFNYXRoLnNpZ24pIHtcbiAgICBNYXRoLnNpZ24gPSBmdW5jdGlvbiAoeCkge1xuICAgICAgICB4ID0gK3g7IC8vIGNvbnZlcnQgdG8gYSBudW1iZXJcbiAgICAgICAgaWYgKHggPT09IDAgfHwgaXNOYU4oeCkpIHtcbiAgICAgICAgICAgIHJldHVybiB4O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4ID4gMCA/IDEgOiAtMTtcbiAgICB9O1xufVxuXG5pZiAoIU1hdGgubG9nMikge1xuICAgIE1hdGgubG9nMiA9IGZ1bmN0aW9uICh4KSB7XG4gICAgICAgIHJldHVybiBNYXRoLmxvZyh4KSAqIE1hdGguTE9HMkU7XG4gICAgfTtcbn1cblxuaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKSB7XG4gICAgTnVtYmVyLmlzSW50ZWdlciA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWx1ZSkgJiYgTWF0aC5mbG9vcih2YWx1ZSkgPT09IHZhbHVlO1xuICAgIH07XG59XG5cbmlmIChDQ19KU0IgfHwgQ0NfUlVOVElNRSB8fCAhY29uc29sZS50aW1lKSB7XG4gICAgdmFyIFRpbWVyID0gd2luZG93LnBlcmZvcm1hbmNlIHx8IERhdGU7XG4gICAgdmFyIF90aW1lclRhYmxlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zb2xlLnRpbWUgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgX3RpbWVyVGFibGVbbGFiZWxdID0gVGltZXIubm93KCk7XG4gICAgfTtcbiAgICBjb25zb2xlLnRpbWVFbmQgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgdmFyIHN0YXJ0VGltZSA9IF90aW1lclRhYmxlW2xhYmVsXTtcbiAgICAgICAgdmFyIGR1cmF0aW9uID0gVGltZXIubm93KCkgLSBzdGFydFRpbWU7XG4gICAgICAgIGNvbnNvbGUubG9nKGxhYmVsICsgJzogJyArIGR1cmF0aW9uICsgJ21zJyk7XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMXBjMk11YW5NaVhTd2libUZ0WlhNaU9sc2lUV0YwYUNJc0luTnBaMjRpTENKNElpd2lhWE5PWVU0aUxDSnNiMmN5SWl3aWJHOW5JaXdpVEU5SE1rVWlMQ0pPZFcxaVpYSWlMQ0pwYzBsdWRHVm5aWElpTENKMllXeDFaU0lzSW1selJtbHVhWFJsSWl3aVpteHZiM0lpTENKRFExOUtVMElpTENKRFExOVNWVTVVU1UxRklpd2lZMjl1YzI5c1pTSXNJblJwYldVaUxDSlVhVzFsY2lJc0luZHBibVJ2ZHlJc0luQmxjbVp2Y20xaGJtTmxJaXdpUkdGMFpTSXNJbDkwYVcxbGNsUmhZbXhsSWl3aVQySnFaV04wSWl3aVkzSmxZWFJsSWl3aWJHRmlaV3dpTENKdWIzY2lMQ0owYVcxbFJXNWtJaXdpYzNSaGNuUlVhVzFsSWl3aVpIVnlZWFJwYjI0aVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRXNTVUZCU1N4RFFVRkRRU3hMUVVGTFF5eEpRVUZXTEVWQlFXZENPMEZCUTFwRUxGTkJRVXRETEVsQlFVd3NSMEZCV1N4VlFVRlZReXhEUVVGV0xFVkJRV0U3UVVGRGNrSkJMRmxCUVVrc1EwRkJRMEVzUTBGQlRDeERRVVJ4UWl4RFFVTmlPMEZCUTFJc1dVRkJTVUVzVFVGQlRTeERRVUZPTEVsQlFWZERMRTFCUVUxRUxFTkJRVTRzUTBGQlppeEZRVUY1UWp0QlFVTnlRaXh0UWtGQlQwRXNRMEZCVUR0QlFVTklPMEZCUTBRc1pVRkJUMEVzU1VGQlNTeERRVUZLTEVkQlFWRXNRMEZCVWl4SFFVRlpMRU5CUVVNc1EwRkJjRUk3UVVGRFNDeExRVTVFTzBGQlQwZzdPMEZCUlVRc1NVRkJTU3hEUVVGRFJpeExRVUZMU1N4SlFVRldMRVZCUVdkQ08wRkJRMXBLTEZOQlFVdEpMRWxCUVV3c1IwRkJXU3hWUVVGVlJpeERRVUZXTEVWQlFXRTdRVUZEY2tJc1pVRkJUMFlzUzBGQlMwc3NSMEZCVEN4RFFVRlRTQ3hEUVVGVUxFbEJRV05HTEV0QlFVdE5MRXRCUVRGQ08wRkJRMGdzUzBGR1JEdEJRVWRJT3p0QlFVVkVMRWxCUVVrc1EwRkJRME1zVDBGQlQwTXNVMEZCV2l4RlFVRjFRanRCUVVOdVFrUXNWMEZCVDBNc1UwRkJVQ3hIUVVGdFFpeFZRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRMmhETEdWQlFVOHNUMEZCVDBFc1MwRkJVQ3hMUVVGcFFpeFJRVUZxUWl4SlFVRTJRa01zVTBGQlUwUXNTMEZCVkN4RFFVRTNRaXhKUVVGblJGUXNTMEZCUzFjc1MwRkJUQ3hEUVVGWFJpeExRVUZZTEUxQlFYTkNRU3hMUVVFM1JUdEJRVU5JTEV0QlJrUTdRVUZIU0RzN1FVRkZSQ3hKUVVGSlJ5eFZRVUZWUXl4VlFVRldMRWxCUVhkQ0xFTkJRVU5ETEZGQlFWRkRMRWxCUVhKRExFVkJRVEpETzBGQlEzWkRMRkZCUVVsRExGRkJRVkZETEU5QlFVOURMRmRCUVZBc1NVRkJjMEpETEVsQlFXeERPMEZCUTBFc1VVRkJTVU1zWTBGQlkwTXNUMEZCVDBNc1RVRkJVQ3hEUVVGakxFbEJRV1FzUTBGQmJFSTdRVUZEUVZJc1dVRkJVVU1zU1VGQlVpeEhRVUZsTEZWQlFWVlJMRXRCUVZZc1JVRkJhVUk3UVVGRE5VSklMRzlDUVVGWlJ5eExRVUZhTEVsQlFYRkNVQ3hOUVVGTlVTeEhRVUZPTEVWQlFYSkNPMEZCUTBnc1MwRkdSRHRCUVVkQlZpeFpRVUZSVnl4UFFVRlNMRWRCUVd0Q0xGVkJRVlZHTEV0QlFWWXNSVUZCYVVJN1FVRkRMMElzV1VGQlNVY3NXVUZCV1U0c1dVRkJXVWNzUzBGQldpeERRVUZvUWp0QlFVTkJMRmxCUVVsSkxGZEJRVmRZTEUxQlFVMVJMRWRCUVU0c1MwRkJZMFVzVTBGQk4wSTdRVUZEUVZvc1owSkJRVkZVTEVkQlFWSXNRMEZCWld0Q0xFdEJRV1lzVlVGQmVVSkpMRkZCUVhwQ08wRkJRMGdzUzBGS1JEdEJRVXRJSWl3aVptbHNaU0k2SW0xcGMyTXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lKcFppQW9JVTFoZEdndWMybG5iaWtnZTF4eVhHNGdJQ0FnVFdGMGFDNXphV2R1SUQwZ1puVnVZM1JwYjI0Z0tIZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCNElEMGdLM2c3SUM4dklHTnZiblpsY25RZ2RHOGdZU0J1ZFcxaVpYSmNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2VDQTlQVDBnTUNCOGZDQnBjMDVoVGloNEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhnZ1BpQXdJRDhnTVNBNklDMHhPMXh5WEc0Z0lDQWdmVHRjY2x4dWZWeHlYRzVjY2x4dWFXWWdLQ0ZOWVhSb0xteHZaeklwSUh0Y2NseHVJQ0FnSUUxaGRHZ3ViRzluTWlBOUlHWjFibU4wYVc5dUlDaDRLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3ViRzluS0hncElDb2dUV0YwYUM1TVQwY3lSVHRjY2x4dUlDQWdJSDA3WEhKY2JuMWNjbHh1WEhKY2JtbG1JQ2doVG5WdFltVnlMbWx6U1c1MFpXZGxjaWtnZTF4eVhHNGdJQ0FnVG5WdFltVnlMbWx6U1c1MFpXZGxjaUE5SUdaMWJtTjBhVzl1SUNoMllXeDFaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGVYQmxiMllnZG1Gc2RXVWdQVDA5SUNkdWRXMWlaWEluSUNZbUlHbHpSbWx1YVhSbEtIWmhiSFZsS1NBbUppQk5ZWFJvTG1ac2IyOXlLSFpoYkhWbEtTQTlQVDBnZG1Gc2RXVTdYSEpjYmlBZ0lDQjlPMXh5WEc1OVhISmNibHh5WEc1cFppQW9RME5mU2xOQ0lIeDhJRU5EWDFKVlRsUkpUVVVnZkh3Z0lXTnZibk52YkdVdWRHbHRaU2tnZTF4eVhHNGdJQ0FnZG1GeUlGUnBiV1Z5SUQwZ2QybHVaRzkzTG5CbGNtWnZjbTFoYm1ObElIeDhJRVJoZEdVN1hISmNiaUFnSUNCMllYSWdYM1JwYldWeVZHRmliR1VnUFNCUFltcGxZM1F1WTNKbFlYUmxLRzUxYkd3cE8xeHlYRzRnSUNBZ1kyOXVjMjlzWlM1MGFXMWxJRDBnWm5WdVkzUnBiMjRnS0d4aFltVnNLU0I3WEhKY2JpQWdJQ0FnSUNBZ1gzUnBiV1Z5VkdGaWJHVmJiR0ZpWld4ZElEMGdWR2x0WlhJdWJtOTNLQ2s3WEhKY2JpQWdJQ0I5TzF4eVhHNGdJQ0FnWTI5dWMyOXNaUzUwYVcxbFJXNWtJRDBnWm5WdVkzUnBiMjRnS0d4aFltVnNLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE4wWVhKMFZHbHRaU0E5SUY5MGFXMWxjbFJoWW14bFcyeGhZbVZzWFR0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWkhWeVlYUnBiMjRnUFNCVWFXMWxjaTV1YjNjb0tTQXRJSE4wWVhKMFZHbHRaVHRjY2x4dUlDQWdJQ0FnSUNCamIyNXpiMnhsTG14dlp5aGdKSHRzWVdKbGJIMDZJQ1I3WkhWeVlYUnBiMjU5YlhOZ0tUdGNjbHh1SUNBZ0lIMDdYSEpjYm4xY2NseHVJbDE5Il19