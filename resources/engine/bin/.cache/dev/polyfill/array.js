(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/polyfill/array.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (!Array.isArray) {
            Array.isArray = function (arg) {
                return Object.prototype.toString.call(arg) === '[object Array]';
            };
        }
        if (!Array.prototype.find) {
            Array.prototype.find = function (callback) {
                var length = this.length;
                for (var i = 0; i < length; i++) {
                    var element = this[i];
                    if (callback.call(this, element, i, this)) {
                        return element;
                    }
                }
                return undefined;
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFycmF5LmpzIiwiQzovVXNlcnMvbmFudGFzL2ZpcmViYWxsLXgvZmJfMjEtcmVsZWFzZS9lbmdpbmUvcG9seWZpbGwvYXJyYXkuanMiXSwibmFtZXMiOlsiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJmaW5kIiwibGVuZ3RoIiwiaSIsIkFycmF5IiwiaXNBcnJheSIsImFyZyIsImNhbGwiLCJjYWxsYmFjayIsImVsZW1lbnQiLCJ1bmRlZmluZWQiXSwibWFwcGluZ3MiOiI7SUFBb0IsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7SUFDQSxJQUFBLFFBQUEsR0FBZSxPQUFBLEdBQUEsTUFBQSxHQUFBLEVBQUEsT0FBQSxFQUFBLEVBQUEsRUFBZjtJQUNMQSxJQUFPQyxVQUFBQSxHQUFVQyw4QkFBakJGO0lBRFgsSUFBQSxTQUFBLEdBQUEsT0FBQSxHQUFBLFVBQUEsT0FBQSxFQUFBO0FBQUEsUUFHSCxPQUFBLE9BQUEsQ0FBQSxPQUFBLENBQUEsQ0FIRztBQUFBLEtBQUE7UUFLaUJHLE9BQU0saUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFVBQUEsQ0FBTkE7S0FMakI7SUFPUUMsU0FBY0EsUUFBZEEsQ0FBSixPQUFJQSxFQUFKLE9BQUlBLEVBQUosTUFBSUEsRUFBSjtBQUFBLFFBQ2dCQyxJQUFJRCxDQUFBQSxPQUFKQyxFQUFZQTtBQUFBQSxZQUE1QixpQkFBQSxDQUFpQyxjQUFqQyxDQUFpQyxVQUFqQyxFQUFpQyxNQUFqQyxFQUE0QkE7QUFBQUEsU0FENUI7QUFBQTtRQVJSLElBQUksQ0FBQ0MsS0FBQUEsQ0FBTUMsT0FBWCxFQUFvQjtBQUFBLFlBQ2hCRCxLQUFBQSxDQUFNQyxPQUFORCxHQUFnQixVQUFVRSxHQUFWLEVBQWU7QUFBQSxnQkFDM0IsT0FBT1IsTUFBQUEsQ0FBT0MsU0FBUEQsQ0FBaUJFLFFBQWpCRixDQUEwQlMsSUFBMUJULENBQStCUSxHQUEvQlIsTUFBd0MsZ0JBQS9DLENBRDJCO0FBQUEsYUFBL0JNLENBRGdCO0FBQUE7UUFNcEIsSUFBSSxDQUFDQSxLQUFBQSxDQUFNTCxTQUFOSyxDQUFnQkgsSUFBckIsRUFBMkI7QUFBQSxZQUN2QkcsS0FBQUEsQ0FBTUwsU0FBTkssQ0FBZ0JILElBQWhCRyxHQUF1QixVQUFVSSxRQUFWLEVBQW9CO0FBQUEsZ0JBQ3ZDLElBQUlOLE1BQUFBLEdBQVMsS0FBS0EsTUFBbEIsQ0FEdUM7QUFBQSxnQkFFdkMsS0FBSyxJQUFJQyxDQUFBQSxHQUFJLENBQVIsQ0FBTCxDQUFnQkEsQ0FBQUEsR0FBSUQsTUFBcEIsRUFBNEJDLENBQUFBLEVBQTVCLEVBQWlDO0FBQUEsb0JBQzdCLElBQUlNLE9BQUFBLEdBQVUsS0FBS04sQ0FBTCxDQUFkLENBRDZCO0FBQUEsb0JBRTdCLElBQUlLLFFBQUFBLENBQVNELElBQVRDLENBQWMsSUFBZEEsRUFBb0JDLE9BQXBCRCxFQUE2QkwsQ0FBN0JLLEVBQWdDLElBQWhDQSxDQUFKLEVBQTJDO0FBQUEsd0JBQ3ZDLE9BQU9DLE9BQVAsQ0FEdUM7QUFBQSxxQkFGZDtBQUFBLGlCQUZNO0FBQUEsZ0JBU3ZDLE9BQU9DLFNBQVAsQ0FUdUM7QUFBQSxhQUEzQ04sQ0FEdUI7QUFBQSxTQUVuQjtBQUFBO0lBR1FJLElBQUFBLE9BQUFBLEVBQWM7QUFBQSxRQUNQQyxRQUFBQSxDQUFQLFFBQUEsQ0FBQSxPQUFPQSxFQUFQLFNBQU9BLEVBQVAsUUFBT0EsRUFETztBQUFBLEtBQWRELE1BR1A7QUFBQTtZQUVELFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBO1dBRkM7QUFBQSIsImZpbGUiOiJhcnJheS5qcyIsInNvdXJjZXNDb250ZW50IjpbImlmICghQXJyYXkuaXNBcnJheSkge1xyXG4gICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uIChhcmcpIHtcclxuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFyZykgPT09ICdbb2JqZWN0IEFycmF5XSc7XHJcbiAgICB9O1xyXG59XHJcblxyXG5pZiAoIUFycmF5LnByb3RvdHlwZS5maW5kKSB7XHJcbiAgICBBcnJheS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aDtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpc1tpXTtcclxuICAgICAgICAgICAgaWYgKGNhbGxiYWNrLmNhbGwodGhpcywgZWxlbWVudCwgaSwgdGhpcykpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgfTtcclxufSIsIid1c2Ugc3RyaWN0JztcblxuaWYgKCFBcnJheS5pc0FycmF5KSB7XG4gICAgQXJyYXkuaXNBcnJheSA9IGZ1bmN0aW9uIChhcmcpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmcpID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIH07XG59XG5cbmlmICghQXJyYXkucHJvdG90eXBlLmZpbmQpIHtcbiAgICBBcnJheS5wcm90b3R5cGUuZmluZCA9IGZ1bmN0aW9uIChjYWxsYmFjaykge1xuICAgICAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGg7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBlbGVtZW50ID0gdGhpc1tpXTtcbiAgICAgICAgICAgIGlmIChjYWxsYmFjay5jYWxsKHRoaXMsIGVsZW1lbnQsIGksIHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUZ5Y21GNUxtcHpJbDBzSW01aGJXVnpJanBiSWtGeWNtRjVJaXdpYVhOQmNuSmhlU0lzSW1GeVp5SXNJazlpYW1WamRDSXNJbkJ5YjNSdmRIbHdaU0lzSW5SdlUzUnlhVzVuSWl3aVkyRnNiQ0lzSW1acGJtUWlMQ0pqWVd4c1ltRmpheUlzSW14bGJtZDBhQ0lzSW1raUxDSmxiR1Z0Wlc1MElpd2lkVzVrWldacGJtVmtJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCTEVsQlFVa3NRMEZCUTBFc1RVRkJUVU1zVDBGQldDeEZRVUZ2UWp0QlFVTm9Ra1FzVlVGQlRVTXNUMEZCVGl4SFFVRm5RaXhWUVVGVlF5eEhRVUZXTEVWQlFXVTdRVUZETTBJc1pVRkJUME1zVDBGQlQwTXNVMEZCVUN4RFFVRnBRa01zVVVGQmFrSXNRMEZCTUVKRExFbEJRVEZDTEVOQlFTdENTaXhIUVVFdlFpeE5RVUYzUXl4blFrRkJMME03UVVGRFNDeExRVVpFTzBGQlIwZzdPMEZCUlVRc1NVRkJTU3hEUVVGRFJpeE5RVUZOU1N4VFFVRk9MRU5CUVdkQ1J5eEpRVUZ5UWl4RlFVRXlRanRCUVVOMlFsQXNWVUZCVFVrc1UwRkJUaXhEUVVGblFrY3NTVUZCYUVJc1IwRkJkVUlzVlVGQlZVTXNVVUZCVml4RlFVRnZRanRCUVVOMlF5eFpRVUZKUXl4VFFVRlRMRXRCUVV0QkxFMUJRV3hDTzBGQlEwRXNZVUZCU3l4SlFVRkpReXhKUVVGSkxFTkJRV0lzUlVGQlowSkJMRWxCUVVsRUxFMUJRWEJDTEVWQlFUUkNReXhIUVVFMVFpeEZRVUZwUXp0QlFVTTNRaXhuUWtGQlNVTXNWVUZCVlN4TFFVRkxSQ3hEUVVGTUxFTkJRV1E3UVVGRFFTeG5Ra0ZCU1VZc1UwRkJVMFlzU1VGQlZDeERRVUZqTEVsQlFXUXNSVUZCYjBKTExFOUJRWEJDTEVWQlFUWkNSQ3hEUVVFM1FpeEZRVUZuUXl4SlFVRm9ReXhEUVVGS0xFVkJRVEpETzBGQlEzWkRMSFZDUVVGUFF5eFBRVUZRTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3hsUVVGUFF5eFRRVUZRTzBGQlEwZ3NTMEZXUkR0QlFWZElJaXdpWm1sc1pTSTZJbUZ5Y21GNUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYVdZZ0tDRkJjbkpoZVM1cGMwRnljbUY1S1NCN1hISmNiaUFnSUNCQmNuSmhlUzVwYzBGeWNtRjVJRDBnWm5WdVkzUnBiMjRnS0dGeVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJQWW1wbFkzUXVjSEp2ZEc5MGVYQmxMblJ2VTNSeWFXNW5MbU5oYkd3b1lYSm5LU0E5UFQwZ0oxdHZZbXBsWTNRZ1FYSnlZWGxkSnp0Y2NseHVJQ0FnSUgwN1hISmNibjFjY2x4dVhISmNibWxtSUNnaFFYSnlZWGt1Y0hKdmRHOTBlWEJsTG1acGJtUXBJSHRjY2x4dUlDQWdJRUZ5Y21GNUxuQnliM1J2ZEhsd1pTNW1hVzVrSUQwZ1puVnVZM1JwYjI0Z0tHTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHeGxibWQwYUNBOUlIUm9hWE11YkdWdVozUm9PMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCMGFHbHpXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRnNiR0poWTJzdVkyRnNiQ2gwYUdsekxDQmxiR1Z0Wlc1MExDQnBMQ0IwYUdsektTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1ZzWlcxbGJuUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjFibVJsWm1sdVpXUTdYSEpjYmlBZ0lDQjlPMXh5WEc1OUlsMTkiXX0=