(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/compression/ZipUtils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var codec = { name: 'Jacob__Codec' };
        codec.Base64 = require('./base64');
        codec.GZip = require('./gzip');
        codec.unzip = function () {
            return codec.GZip.gunzip.apply(codec.GZip, arguments);
        };
        codec.unzipBase64 = function () {
            var buffer = codec.Base64.decode.apply(codec.Base64, arguments);
            try {
                return codec.GZip.gunzip.call(codec.GZip, buffer);
            } catch (e) {
                return buffer.slice(7);
            }
        };
        codec.unzipBase64AsArray = function (input, bytes) {
            bytes = bytes || 1;
            var dec = this.unzipBase64(input), ar = [], i, j, len;
            for (i = 0, len = dec.length / bytes; i < len; i++) {
                ar[i] = 0;
                for (j = bytes - 1; j >= 0; --j) {
                    ar[i] += dec.charCodeAt(i * bytes + j) << j * 8;
                }
            }
            return ar;
        };
        codec.unzipAsArray = function (input, bytes) {
            bytes = bytes || 1;
            var dec = this.unzip(input), ar = [], i, j, len;
            for (i = 0, len = dec.length / bytes; i < len; i++) {
                ar[i] = 0;
                for (j = bytes - 1; j >= 0; --j) {
                    ar[i] += dec.charCodeAt(i * bytes + j) << j * 8;
                }
            }
            return ar;
        };
        cc.codec = module.exports = codec;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,