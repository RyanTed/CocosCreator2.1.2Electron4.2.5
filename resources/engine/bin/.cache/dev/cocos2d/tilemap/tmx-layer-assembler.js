(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/tmx-layer-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../core/vmath');
        var TiledLayer = require('./CCTiledLayer');
        var TiledMap = require('./CCTiledMap');
        var RenderFlow = require('../core/renderer/render-flow');
        var Orientation = TiledMap.Orientation;
        var TileFlag = TiledMap.TileFlag;
        var FLIPPED_MASK = TileFlag.FLIPPED_MASK;
        var StaggerAxis = TiledMap.StaggerAxis;
        var StaggerIndex = TiledMap.StaggerIndex;
        var _mat4_temp = _vmath.mat4.create();
        var _mat4_temp2 = _vmath.mat4.create();
        var _vec3_temp = _vmath.vec3.create();
        var tmxAssembler = {
            updateRenderData: function updateRenderData(comp) {
                var renderData = comp._renderData;
                if (!renderData) {
                    renderData = comp._renderData = comp.requestRenderData();
                }
                var size = comp.node._contentSize;
                var anchor = comp.node._anchorPoint;
                renderData.updateSizeNPivot(size.width, size.height, anchor.x, anchor.y);
                renderData.material = comp.sharedMaterials[0];
                this.updateVertices(comp);
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var renderData = comp._renderData;
                var data = renderData._data;
                var buffer = renderer._meshBuffer, vertexCount = renderData.vertexCount;
                var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
                var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, ibuf = buffer._iData, uintbuf = buffer._uintVData;
                for (var i = 0, l = renderData.vertexCount; i < l; i++) {
                    var vert = data[i];
                    vbuf[vertexOffset++] = vert.x;
                    vbuf[vertexOffset++] = vert.y;
                    vbuf[vertexOffset++] = vert.u;
                    vbuf[vertexOffset++] = vert.v;
                    uintbuf[vertexOffset++] = vert.color;
                }
                for (var _i = 0, _l = renderData.indiceCount; _i < _l; _i += 6) {
                    ibuf[indiceOffset++] = vertexId;
                    ibuf[indiceOffset++] = vertexId + 1;
                    ibuf[indiceOffset++] = vertexId + 2;
                    ibuf[indiceOffset++] = vertexId + 1;
                    ibuf[indiceOffset++] = vertexId + 3;
                    ibuf[indiceOffset++] = vertexId + 2;
                    vertexId += 4;
                }
                comp.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
            },
            updateVertices: function updateVertices(comp) {
                var node = comp.node;
                var renderData = comp._renderData;
                var data = renderData._data;
                var color = node._color._val;
                var opacity = node._color.a;
                renderData.dataLength = renderData.vertexCount = renderData.indiceCount = 0;
                var layerOrientation = comp._layerOrientation, tiles = comp._tiles;
                if (!tiles || !comp._tileset) {
                    return;
                }
                var appx = node._anchorPoint.x * node._contentSize.width, appy = node._anchorPoint.y * node._contentSize.height;
                _vmath.mat4.copy(_mat4_temp, node._worldMatrix);
                _vmath.vec3.set(_vec3_temp, -appx, -appy, 0);
                _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                var a = _mat4_temp.m00, b = _mat4_temp.m01, c = _mat4_temp.m04, d = _mat4_temp.m05, tx = _mat4_temp.m12, ty = _mat4_temp.m13;
                var maptw = comp._mapTileSize.width, mapth = comp._mapTileSize.height, tilew = comp._tileset._tileSize.width, tileh = comp._tileset._tileSize.height, extw = tilew - maptw, exth = tileh - mapth, winw = cc.winSize.width, winh = cc.winSize.height, rows = comp._layerSize.height, cols = comp._layerSize.width, grids = comp._texGrids, tiledTiles = comp._tiledTiles, ox = comp._offset.x, oy = comp._offset.y, w = tilew * a, h = tileh * d;
                tx += ox * a + oy * c;
                ty += ox * b + oy * d;
                var startCol = 0, startRow = 0, maxCol = cols, maxRow = rows;
                var cullingA = a, cullingD = d, cullingMapx = tx, cullingMapy = ty, cullingW = w, cullingH = h;
                var enabledCulling = !CC_EDITOR && cc.macro.ENABLE_TILEDMAP_CULLING;
                if (enabledCulling) {
                    var camera = cc.Camera.findCamera(comp.node);
                    if (camera) {
                        camera.getWorldToCameraMatrix(_mat4_temp2);
                        _vmath.mat4.mul(_mat4_temp, _mat4_temp2, _mat4_temp);
                        cullingA = _mat4_temp.m00;
                        cullingD = _mat4_temp.m05;
                        cullingMapx = ox * cullingA + oy * _mat4_temp.m04 + _mat4_temp.m12;
                        cullingMapy = ox * _mat4_temp.m01 + oy * cullingD + _mat4_temp.m13;
                        cullingW = tilew * cullingA;
                        cullingH = tileh * cullingD;
                    }
                    if (layerOrientation === Orientation.ORTHO) {
                        _vmath.mat4.invert(_mat4_temp, _mat4_temp);
                        var rect = cc.visibleRect;
                        var _a = _mat4_temp.m00, _b = _mat4_temp.m01, _c = _mat4_temp.m04, _d = _mat4_temp.m05, _tx = _mat4_temp.m12, _ty = _mat4_temp.m13;
                        var v0x = rect.topLeft.x * _a + rect.topLeft.y * _c + _tx;
                        var v0y = rect.topLeft.x * _b + rect.topLeft.y * _d + _ty;
                        var v1x = rect.bottomLeft.x * _a + rect.bottomLeft.y * _c + _tx;
                        var v1y = rect.bottomLeft.x * _b + rect.bottomLeft.y * _d + _ty;
                        var v2x = rect.topRight.x * _a + rect.topRight.y * _c + _tx;
                        var v2y = rect.topRight.x * _b + rect.topRight.y * _d + _ty;
                        var v3x = rect.bottomRight.x * _a + rect.bottomRight.y * _c + _tx;
                        var v3y = rect.bottomRight.x * _b + rect.bottomRight.y * _d + _ty;
                        var minx = Math.min(v0x, v1x, v2x, v3x), maxx = Math.max(v0x, v1x, v2x, v3x), miny = Math.min(v0y, v1y, v2y, v3y), maxy = Math.max(v0y, v1y, v2y, v3y);
                        startCol = Math.floor(minx / maptw);
                        startRow = rows - Math.ceil(maxy / mapth);
                        maxCol = Math.ceil((maxx + extw) / maptw);
                        maxRow = rows - Math.floor((miny - exth) / mapth);
                        if (startCol < 0)
                            startCol = 0;
                        if (startRow < 0)
                            startRow = 0;
                        if (maxCol > cols)
                            maxCol = cols;
                        if (maxRow > rows)
                            maxRow = rows;
                    }
                }
                var colOffset = startRow * cols, gid = void 0, grid = void 0, top = void 0, left = void 0, bottom = void 0, right = void 0, gt = void 0, gl = void 0, gb = void 0, gr = void 0, axis = void 0, tileOffset = void 0, diffX1 = void 0, diffY1 = void 0, odd_even = void 0;
                if (layerOrientation === Orientation.HEX) {
                    var hexSideLength = comp._hexSideLength;
                    axis = comp._staggerAxis;
                    tileOffset = comp._tileset.tileOffset;
                    odd_even = comp._staggerIndex === StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
                    diffX1 = axis === StaggerAxis.STAGGERAXIS_X ? (maptw - hexSideLength) / 2 : 0;
                    diffY1 = axis === StaggerAxis.STAGGERAXIS_Y ? (mapth - hexSideLength) / 2 : 0;
                }
                var dataOffset = 0;
                var a2 = void 0, b2 = void 0, c2 = void 0, d2 = void 0, tx2 = void 0, ty2 = void 0, color2 = void 0;
                for (var row = startRow; row < maxRow; ++row) {
                    for (var col = startCol; col < maxCol; ++col) {
                        var index = colOffset + col;
                        var flippedX = false, flippedY = false;
                        var tiledTile = tiledTiles[index];
                        if (tiledTile) {
                            gid = tiledTile.gid;
                        } else {
                            gid = comp._tiles[index];
                        }
                        grid = grids[(gid & FLIPPED_MASK) >>> 0];
                        if (!grid) {
                            continue;
                        }
                        switch (layerOrientation) {
                        case Orientation.ORTHO:
                            left = col * maptw;
                            bottom = (rows - row - 1) * mapth;
                            break;
                        case Orientation.ISO:
                            left = maptw / 2 * (cols + col - row - 1);
                            bottom = mapth / 2 * (rows * 2 - col - row - 2);
                            break;
                        case Orientation.HEX:
                            var diffX2 = axis === StaggerAxis.STAGGERAXIS_Y && row % 2 === 1 ? maptw / 2 * odd_even : 0;
                            left = col * (maptw - diffX1) + diffX2 + tileOffset.x;
                            var diffY2 = axis === StaggerAxis.STAGGERAXIS_X && col % 2 === 1 ? mapth / 2 * -odd_even : 0;
                            bottom = (rows - row - 1) * (mapth - diffY1) + diffY2 - tileOffset.y;
                            break;
                        }
                        if (tiledTile) {
                            var tiledNode = tiledTile.node;
                            color2 = color;
                            var newOpacity = tiledNode.opacity * opacity / 255;
                            color = tiledNode.color.setA(newOpacity)._val;
                            a2 = a;
                            b2 = b;
                            c2 = c;
                            d2 = d;
                            tx2 = tx;
                            ty2 = ty;
                            tiledNode._updateLocalMatrix();
                            _vmath.mat4.copy(_mat4_temp, tiledNode._matrix);
                            _vmath.vec3.set(_vec3_temp, -left, -bottom, 0);
                            _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                            _vmath.mat4.multiply(_mat4_temp, node._worldMatrix, _mat4_temp);
                            a = _mat4_temp.m00;
                            b = _mat4_temp.m01;
                            c = _mat4_temp.m04;
                            d = _mat4_temp.m05;
                            tx = _mat4_temp.m12;
                            ty = _mat4_temp.m13;
                        }
                        right = left + tilew;
                        top = bottom + tileh;
                        if (enabledCulling && layerOrientation === Orientation.ISO) {
                            gb = cullingMapy + bottom * cullingD;
                            if (gb > winh + cullingH) {
                                col += Math.floor((gb - winh) * 2 / cullingH) - 1;
                                continue;
                            }
                            gr = cullingMapx + right * cullingA;
                            if (gr < -cullingW) {
                                col += Math.floor(-gr * 2 / cullingW) - 1;
                                continue;
                            }
                            gl = cullingMapx + left * cullingA;
                            gt = cullingMapy + top * cullingD;
                            if (gl > winw || gt < 0) {
                                col = maxCol;
                                continue;
                            }
                        }
                        if (gid > TileFlag.DIAGONAL) {
                            flippedX = (gid & TileFlag.HORIZONTAL) >>> 0;
                            flippedY = (gid & TileFlag.VERTICAL) >>> 0;
                        }
                        renderData.vertexCount += 4;
                        renderData.indiceCount += 6;
                        renderData.dataLength = renderData.vertexCount;
                        data[dataOffset].x = left * a + top * c + tx;
                        data[dataOffset].y = left * b + top * d + ty;
                        data[dataOffset].u = flippedX ? grid.r : grid.l;
                        data[dataOffset].v = flippedY ? grid.b : grid.t;
                        data[dataOffset].color = color;
                        dataOffset++;
                        data[dataOffset].x = left * a + bottom * c + tx;
                        data[dataOffset].y = left * b + bottom * d + ty;
                        data[dataOffset].u = flippedX ? grid.r : grid.l;
                        data[dataOffset].v = flippedY ? grid.t : grid.b;
                        data[dataOffset].color = color;
                        dataOffset++;
                        data[dataOffset].x = right * a + top * c + tx;
                        data[dataOffset].y = right * b + top * d + ty;
                        data[dataOffset].u = flippedX ? grid.l : grid.r;
                        data[dataOffset].v = flippedY ? grid.b : grid.t;
                        data[dataOffset].color = color;
                        dataOffset++;
                        data[dataOffset].x = right * a + bottom * c + tx;
                        data[dataOffset].y = right * b + bottom * d + ty;
                        data[dataOffset].u = flippedX ? grid.l : grid.r;
                        data[dataOffset].v = flippedY ? grid.t : grid.b;
                        data[dataOffset].color = color;
                        dataOffset++;
                        if (tiledTile) {
                            color = color2;
                            a = a2;
                            b = b2;
                            c = c2;
                            d = d2;
                            tx = tx2;
                            ty = ty2;
                        }
                    }
                    colOffset += cols;
                }
            }
        };
        module.exports = TiledLayer._assembler = tmxAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,