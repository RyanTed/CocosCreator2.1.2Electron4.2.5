(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/tilemap/CCTiledMapAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var TiledMapAsset = cc.Class({
            name: 'cc.TiledMapAsset',
            extends: cc.Asset,
            properties: {
                tmxXmlStr: '',
                textures: {
                    default: [],
                    type: [cc.Texture2D]
                },
                textureNames: [cc.String],
                tsxFiles: [cc.TextAsset],
                tsxFileNames: [cc.String]
            },
            statics: { preventDeferredLoadDependents: true },
            createNode: CC_EDITOR && function (callback) {
                var node = new cc.Node(this.name);
                var tiledMap = node.addComponent(cc.TiledMap);
                tiledMap.tmxAsset = this;
                return callback(null, node);
            }
        });
        cc.TiledMapAsset = TiledMapAsset;
        module.exports = TiledMapAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDVGlsZWRNYXBBc3NldC5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvdGlsZW1hcC9DQ1RpbGVkTWFwQXNzZXQuanMiXSwibmFtZXMiOlsiVGlsZWRNYXBBc3NldCIsImNjIiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsIkFzc2V0IiwicHJvcGVydGllcyIsInRteFhtbFN0ciIsInRleHR1cmVzIiwiZGVmYXVsdCIsInR5cGUiLCJUZXh0dXJlMkQiLCJ0ZXh0dXJlTmFtZXMiLCJTdHJpbmciLCJ0c3hGaWxlcyIsIlRleHRBc3NldCIsInRzeEZpbGVOYW1lcyIsInN0YXRpY3MiLCJwcmV2ZW50RGVmZXJyZWRMb2FkRGVwZW5kZW50cyIsImNyZWF0ZU5vZGUiLCJDQ19FRElUT1IiLCJjYWxsYmFjayIsIm5vZGUiLCJOb2RlIiwidGlsZWRNYXAiLCJhZGRDb21wb25lbnQiLCJUaWxlZE1hcCIsInRteEFzc2V0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBZ0NBLElBQUlBLGFBQUFBLEdBQWdCQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDekJFLElBQUFBLEVBQU0sa0JBRG1CO0FBQUEsWUFFekJDLE9BQUFBLEVBQVNILEVBQUFBLENBQUdJLEtBRmE7QUFBQSxZQUl6QkMsVUFBQUEsRUFBWTtBQUFBLGdCQUNSQyxTQUFBQSxFQUFXLEVBREg7QUFBQSxnQkFNUkMsUUFBQUEsRUFBVTtBQUFBLG9CQUNOQyxPQUFBQSxFQUFTLEVBREg7QUFBQSxvQkFFTkMsSUFBQUEsRUFBTSxDQUFDVCxFQUFBQSxDQUFHVSxTQUFKLENBRkE7QUFBQSxpQkFORjtBQUFBLGdCQWNSQyxZQUFBQSxFQUFjLENBQUNYLEVBQUFBLENBQUdZLE1BQUosQ0FkTjtBQUFBLGdCQWdCUkMsUUFBQUEsRUFBVSxDQUFDYixFQUFBQSxDQUFHYyxTQUFKLENBaEJGO0FBQUEsZ0JBaUJSQyxZQUFBQSxFQUFjLENBQUNmLEVBQUFBLENBQUdZLE1BQUosQ0FqQk47QUFBQSxhQUphO0FBQUEsWUF3QnpCSSxPQUFBQSxFQUFTLEVBQ0xDLDZCQUFBQSxFQUErQixJQUQxQixFQXhCZ0I7QUFBQSxZQTRCekJDLFVBQUFBLEVBQVlDLFNBQUFBLElBQWEsVUFBVUMsUUFBVixFQUFvQjtBQUFBLGdCQUN6QyxJQUFJQyxJQUFBQSxHQUFPLElBQUlyQixFQUFBQSxDQUFHc0IsSUFBUCxDQUFZLEtBQUtwQixJQUFqQixDQUFYLENBRHlDO0FBQUEsZ0JBRXpDLElBQUlxQixRQUFBQSxHQUFXRixJQUFBQSxDQUFLRyxZQUFMSCxDQUFrQnJCLEVBQUFBLENBQUd5QixRQUFyQkosQ0FBZixDQUZ5QztBQUFBLGdCQUd6Q0UsUUFBQUEsQ0FBU0csUUFBVEgsR0FBb0IsSUFBcEJBLENBSHlDO0FBQUEsZ0JBS3pDLE9BQU9ILFFBQUFBLENBQVMsSUFBVEEsRUFBZUMsSUFBZkQsQ0FBUCxDQUx5QztBQUFBLGFBNUJwQjtBQUFBLFNBQVRwQixDQUFwQjtRQXFDQUEsRUFBQUEsQ0FBR0QsYUFBSEMsR0FBbUJELGFBQW5CQztRQUNBMkIsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUI1QixhQUFqQjRCIiwiZmlsZSI6IkNDVGlsZWRNYXBBc3NldC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBDbGFzcyBmb3IgdGlsZWQgbWFwIGFzc2V0IGhhbmRsaW5nLlxyXG4gKiBAY2xhc3MgVGlsZWRNYXBBc3NldFxyXG4gKiBAZXh0ZW5kcyBBc3NldFxyXG4gKlxyXG4gKi9cclxubGV0IFRpbGVkTWFwQXNzZXQgPSBjYy5DbGFzcyh7XHJcbiAgICBuYW1lOiAnY2MuVGlsZWRNYXBBc3NldCcsXHJcbiAgICBleHRlbmRzOiBjYy5Bc3NldCxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgdG14WG1sU3RyOiAnJyxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtUZXh0dXJlMkRbXX0gdGV4dHVyZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0ZXh0dXJlczoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBbXSxcclxuICAgICAgICAgICAgdHlwZTogW2NjLlRleHR1cmUyRF1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJvcGVydHkge1N0cmluZ1tdfSB0ZXh0dXJlTmFtZXNcclxuICAgICAgICAgKi9cclxuICAgICAgICB0ZXh0dXJlTmFtZXM6IFtjYy5TdHJpbmddLFxyXG5cclxuICAgICAgICB0c3hGaWxlczogW2NjLlRleHRBc3NldF0sXHJcbiAgICAgICAgdHN4RmlsZU5hbWVzOiBbY2MuU3RyaW5nXSxcclxuICAgIH0sXHJcblxyXG4gICAgc3RhdGljczoge1xyXG4gICAgICAgIHByZXZlbnREZWZlcnJlZExvYWREZXBlbmRlbnRzOiB0cnVlXHJcbiAgICB9LFxyXG5cclxuICAgIGNyZWF0ZU5vZGU6IENDX0VESVRPUiAmJiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICBsZXQgbm9kZSA9IG5ldyBjYy5Ob2RlKHRoaXMubmFtZSk7XHJcbiAgICAgICAgbGV0IHRpbGVkTWFwID0gbm9kZS5hZGRDb21wb25lbnQoY2MuVGlsZWRNYXApO1xyXG4gICAgICAgIHRpbGVkTWFwLnRteEFzc2V0ID0gdGhpcztcclxuXHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKG51bGwsIG5vZGUpO1xyXG4gICAgfVxyXG59KTtcclxuXHJcbmNjLlRpbGVkTWFwQXNzZXQgPSBUaWxlZE1hcEFzc2V0O1xyXG5tb2R1bGUuZXhwb3J0cyA9IFRpbGVkTWFwQXNzZXQ7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcclxuICogQ2xhc3MgZm9yIHRpbGVkIG1hcCBhc3NldCBoYW5kbGluZy5cclxuICogQGNsYXNzIFRpbGVkTWFwQXNzZXRcclxuICogQGV4dGVuZHMgQXNzZXRcclxuICpcclxuICovXG52YXIgVGlsZWRNYXBBc3NldCA9IGNjLkNsYXNzKHtcbiAgbmFtZTogJ2NjLlRpbGVkTWFwQXNzZXQnLFxuICBleHRlbmRzOiBjYy5Bc3NldCxcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgdG14WG1sU3RyOiAnJyxcblxuICAgIC8qKlxyXG4gICAgICogQHByb3BlcnR5IHtUZXh0dXJlMkRbXX0gdGV4dHVyZXNcclxuICAgICAqL1xuICAgIHRleHR1cmVzOiB7XG4gICAgICBkZWZhdWx0OiBbXSxcbiAgICAgIHR5cGU6IFtjYy5UZXh0dXJlMkRdXG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmdbXX0gdGV4dHVyZU5hbWVzXHJcbiAgICAgKi9cbiAgICB0ZXh0dXJlTmFtZXM6IFtjYy5TdHJpbmddLFxuXG4gICAgdHN4RmlsZXM6IFtjYy5UZXh0QXNzZXRdLFxuICAgIHRzeEZpbGVOYW1lczogW2NjLlN0cmluZ11cbiAgfSxcblxuICBzdGF0aWNzOiB7XG4gICAgcHJldmVudERlZmVycmVkTG9hZERlcGVuZGVudHM6IHRydWVcbiAgfSxcblxuICBjcmVhdGVOb2RlOiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgdmFyIG5vZGUgPSBuZXcgY2MuTm9kZSh0aGlzLm5hbWUpO1xuICAgIHZhciB0aWxlZE1hcCA9IG5vZGUuYWRkQ29tcG9uZW50KGNjLlRpbGVkTWFwKTtcbiAgICB0aWxlZE1hcC50bXhBc3NldCA9IHRoaXM7XG5cbiAgICByZXR1cm4gY2FsbGJhY2sobnVsbCwgbm9kZSk7XG4gIH1cbn0pO1xuXG5jYy5UaWxlZE1hcEFzc2V0ID0gVGlsZWRNYXBBc3NldDtcbm1vZHVsZS5leHBvcnRzID0gVGlsZWRNYXBBc3NldDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRWR2xzWldSTllYQkJjM05sZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpVYVd4bFpFMWhjRUZ6YzJWMElpd2lZMk1pTENKRGJHRnpjeUlzSW01aGJXVWlMQ0psZUhSbGJtUnpJaXdpUVhOelpYUWlMQ0p3Y205d1pYSjBhV1Z6SWl3aWRHMTRXRzFzVTNSeUlpd2lkR1Y0ZEhWeVpYTWlMQ0prWldaaGRXeDBJaXdpZEhsd1pTSXNJbFJsZUhSMWNtVXlSQ0lzSW5SbGVIUjFjbVZPWVcxbGN5SXNJbE4wY21sdVp5SXNJblJ6ZUVacGJHVnpJaXdpVkdWNGRFRnpjMlYwSWl3aWRITjRSbWxzWlU1aGJXVnpJaXdpYzNSaGRHbGpjeUlzSW5CeVpYWmxiblJFWldabGNuSmxaRXh2WVdSRVpYQmxibVJsYm5Seklpd2lZM0psWVhSbFRtOWtaU0lzSWtORFgwVkVTVlJQVWlJc0ltTmhiR3hpWVdOcklpd2libTlrWlNJc0lrNXZaR1VpTENKMGFXeGxaRTFoY0NJc0ltRmtaRU52YlhCdmJtVnVkQ0lzSWxScGJHVmtUV0Z3SWl3aWRHMTRRWE56WlhRaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRVEJDUVRzN096czdPMEZCVFVFc1NVRkJTVUVzWjBKQlFXZENReXhIUVVGSFF5eExRVUZJTEVOQlFWTTdRVUZEZWtKRExGRkJRVTBzYTBKQlJHMUNPMEZCUlhwQ1F5eFhRVUZUU0N4SFFVRkhTU3hMUVVaaE96dEJRVWw2UWtNc1kwRkJXVHRCUVVOU1F5eGxRVUZYTEVWQlJFZzdPMEZCUjFJN096dEJRVWRCUXl4alFVRlZPMEZCUTA1RExHVkJRVk1zUlVGRVNEdEJRVVZPUXl4WlFVRk5MRU5CUVVOVUxFZEJRVWRWTEZOQlFVbzdRVUZHUVN4TFFVNUdPenRCUVZkU096czdRVUZIUVVNc2EwSkJRV01zUTBGQlExZ3NSMEZCUjFrc1RVRkJTaXhEUVdST096dEJRV2RDVWtNc1kwRkJWU3hEUVVGRFlpeEhRVUZIWXl4VFFVRktMRU5CYUVKR08wRkJhVUpTUXl4clFrRkJZeXhEUVVGRFppeEhRVUZIV1N4TlFVRktPMEZCYWtKT0xFZEJTbUU3TzBGQmQwSjZRa2tzVjBGQlV6dEJRVU5NUXl4dFEwRkJLMEk3UVVGRU1VSXNSMEY0UW1kQ096dEJRVFJDZWtKRExHTkJRVmxETEdGQlFXRXNWVUZCVlVNc1VVRkJWaXhGUVVGdlFqdEJRVU42UXl4UlFVRkpReXhQUVVGUExFbEJRVWx5UWl4SFFVRkhjMElzU1VGQlVDeERRVUZaTEV0QlFVdHdRaXhKUVVGcVFpeERRVUZZTzBGQlEwRXNVVUZCU1hGQ0xGZEJRVmRHTEV0QlFVdEhMRmxCUVV3c1EwRkJhMEo0UWl4SFFVRkhlVUlzVVVGQmNrSXNRMEZCWmp0QlFVTkJSaXhoUVVGVFJ5eFJRVUZVTEVkQlFXOUNMRWxCUVhCQ096dEJRVVZCTEZkQlFVOU9MRk5CUVZNc1NVRkJWQ3hGUVVGbFF5eEpRVUZtTEVOQlFWQTdRVUZEU0R0QlFXeERkMElzUTBGQlZDeERRVUZ3UWpzN1FVRnhRMEZ5UWl4SFFVRkhSQ3hoUVVGSUxFZEJRVzFDUVN4aFFVRnVRanRCUVVOQk5FSXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFqZENMR0ZCUVdwQ0lpd2labWxzWlNJNklrTkRWR2xzWldSTllYQkJjM05sZEM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjY2x4dVhISmNiaUJvZEhSd2N6b3ZMM2QzZHk1amIyTnZjeTVqYjIwdlhISmNibHh5WEc0Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdFZ1kyOXdlVnh5WEc0Z2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JsYm1kcGJtVWdjMjkxY21ObElHTnZaR1VnS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCaElHeHBiV2wwWldRc1hISmNiaUFnZDI5eWJHUjNhV1JsTENCeWIzbGhiSFI1TFdaeVpXVXNJRzV2YmkxaGMzTnBaMjVoWW14bExDQnlaWFp2WTJGaWJHVWdZVzVrSUc1dmJpMWxlR05zZFhOcGRtVWdiR2xqWlc1elpWeHlYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjY2x4dUlDQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEhKY2JpQWdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHlYRzRnSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHlYRzVjY2x4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhISmNiaUJZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM0Z2NtVnpaWEoyWlhNZ1lXeHNJSEpwWjJoMGN5QnViM1FnWlhod2NtVnpjMng1SUdkeVlXNTBaV1FnZEc4Z2VXOTFMbHh5WEc1Y2NseHVJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU1nVDFKY2NseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh5WEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYSEpjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEhKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4eVhHNGdUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGSUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUbHh5WEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh5WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljY2x4dVhISmNiaThxS2x4eVhHNGdLaUJEYkdGemN5Qm1iM0lnZEdsc1pXUWdiV0Z3SUdGemMyVjBJR2hoYm1Sc2FXNW5MbHh5WEc0Z0tpQkFZMnhoYzNNZ1ZHbHNaV1JOWVhCQmMzTmxkRnh5WEc0Z0tpQkFaWGgwWlc1a2N5QkJjM05sZEZ4eVhHNGdLbHh5WEc0Z0tpOWNjbHh1YkdWMElGUnBiR1ZrVFdGd1FYTnpaWFFnUFNCall5NURiR0Z6Y3loN1hISmNiaUFnSUNCdVlXMWxPaUFuWTJNdVZHbHNaV1JOWVhCQmMzTmxkQ2NzWEhKY2JpQWdJQ0JsZUhSbGJtUnpPaUJqWXk1QmMzTmxkQ3hjY2x4dVhISmNiaUFnSUNCd2NtOXdaWEowYVdWek9pQjdYSEpjYmlBZ0lDQWdJQ0FnZEcxNFdHMXNVM1J5T2lBbkp5eGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIdFVaWGgwZFhKbE1rUmJYWDBnZEdWNGRIVnlaWE5jY2x4dUlDQWdJQ0FnSUNBZ0tpOWNjbHh1SUNBZ0lDQWdJQ0IwWlhoMGRYSmxjem9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWldaaGRXeDBPaUJiWFN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dXMk5qTGxSbGVIUjFjbVV5UkYxY2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dlMU4wY21sdVoxdGRmU0IwWlhoMGRYSmxUbUZ0WlhOY2NseHVJQ0FnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnSUNCMFpYaDBkWEpsVG1GdFpYTTZJRnRqWXk1VGRISnBibWRkTEZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0IwYzNoR2FXeGxjem9nVzJOakxsUmxlSFJCYzNObGRGMHNYSEpjYmlBZ0lDQWdJQ0FnZEhONFJtbHNaVTVoYldWek9pQmJZMk11VTNSeWFXNW5YU3hjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ2MzUmhkR2xqY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJSEJ5WlhabGJuUkVaV1psY25KbFpFeHZZV1JFWlhCbGJtUmxiblJ6T2lCMGNuVmxYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUdOeVpXRjBaVTV2WkdVNklFTkRYMFZFU1ZSUFVpQW1KaUJtZFc1amRHbHZiaUFvWTJGc2JHSmhZMnNwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYm05a1pTQTlJRzVsZHlCall5NU9iMlJsS0hSb2FYTXVibUZ0WlNrN1hISmNiaUFnSUNBZ0lDQWdiR1YwSUhScGJHVmtUV0Z3SUQwZ2JtOWtaUzVoWkdSRGIyMXdiMjVsYm5Rb1kyTXVWR2xzWldSTllYQXBPMXh5WEc0Z0lDQWdJQ0FnSUhScGJHVmtUV0Z3TG5SdGVFRnpjMlYwSUQwZ2RHaHBjenRjY2x4dVhISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHTmhiR3hpWVdOcktHNTFiR3dzSUc1dlpHVXBPMXh5WEc0Z0lDQWdmVnh5WEc1OUtUdGNjbHh1WEhKY2JtTmpMbFJwYkdWa1RXRndRWE56WlhRZ1BTQlVhV3hsWkUxaGNFRnpjMlYwTzF4eVhHNXRiMlIxYkdVdVpYaHdiM0owY3lBOUlGUnBiR1ZrVFdGd1FYTnpaWFE3WEhKY2JpSmRmUT09Il19