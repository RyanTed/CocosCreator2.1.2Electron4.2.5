(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/videoplayer/video-player-impl.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../core/vmath');
        var utils = require('../core/platform/utils');
        var sys = require('../core/platform/CCSys');
        var READY_STATE = {
            HAVE_NOTHING: 0,
            HAVE_METADATA: 1,
            HAVE_CURRENT_DATA: 2,
            HAVE_FUTURE_DATA: 3,
            HAVE_ENOUGH_DATA: 4
        };
        var _mat4_temp = _vmath.mat4.create();
        var VideoPlayerImpl = cc.Class({
            name: 'VideoPlayerImpl',
            ctor: function ctor() {
                this._EventList = {};
                this._video = null;
                this._url = '';
                this._preFullScreenEnabled = undefined;
                this._fullScreenEnabled = false;
                this._loadedmeta = false;
                this._loaded = false;
                this._visible = false;
                this._playing = false;
                this._ignorePause = false;
                this._forceUpdate = true;
                this._m00 = 0;
                this._m01 = 0;
                this._m04 = 0;
                this._m05 = 0;
                this._m12 = 0;
                this._m13 = 0;
                this._w = 0;
                this._h = 0;
                this.__eventListeners = {};
            },
            _bindEvent: function _bindEvent() {
                var video = this._video, self = this;
                var cbs = this.__eventListeners;
                cbs.loadedmetadata = function () {
                    self._loadedmeta = true;
                    if (self._preFullScreenEnabled !== undefined) {
                        self._toggleFullscreen(self._preFullScreenEnabled);
                    }
                    self._dispatchEvent(VideoPlayerImpl.EventType.META_LOADED);
                };
                cbs.ended = function () {
                    if (self._video !== video)
                        return;
                    self._playing = false;
                    self._dispatchEvent(VideoPlayerImpl.EventType.COMPLETED);
                };
                cbs.play = function () {
                    if (self._video !== video)
                        return;
                    self._playing = true;
                    self._updateVisibility();
                    self._dispatchEvent(VideoPlayerImpl.EventType.PLAYING);
                };
                cbs.pause = function () {
                    if (self._video !== video) {
                        return;
                    }
                    self._playing = false;
                    if (!self._ignorePause) {
                        self._dispatchEvent(VideoPlayerImpl.EventType.PAUSED);
                    }
                };
                cbs.click = function () {
                    self._dispatchEvent(VideoPlayerImpl.EventType.CLICKED);
                };
                video.addEventListener('loadedmetadata', cbs.loadedmetadata);
                video.addEventListener('ended', cbs.ended);
                video.addEventListener('play', cbs.play);
                video.addEventListener('pause', cbs.pause);
                video.addEventListener('click', cbs.click);
                function onCanPlay() {
                    if (self._loaded || self._playing)
                        return;
                    var video = self._video;
                    if (video.readyState === READY_STATE.HAVE_ENOUGH_DATA || video.readyState === READY_STATE.HAVE_METADATA) {
                        video.currentTime = 0;
                        self._loaded = true;
                        self._dispatchEvent(VideoPlayerImpl.EventType.READY_TO_PLAY);
                        self._updateVisibility();
                    }
                }
                cbs.onCanPlay = onCanPlay;
                video.addEventListener('canplay', cbs.onCanPlay);
                video.addEventListener('canplaythrough', cbs.onCanPlay);
                video.addEventListener('suspend', cbs.onCanPlay);
            },
            _updateVisibility: function _updateVisibility() {
                var video = this._video;
                if (!video)
                    return;
                if (this._visible) {
                    video.style.visibility = 'visible';
                    this._forceUpdate = true;
                } else {
                    video.style.visibility = 'hidden';
                    video.pause();
                    this._playing = false;
                    this._forceUpdate = false;
                }
            },
            _updateSize: function _updateSize(width, height) {
                var video = this._video;
                if (!video)
                    return;
                video.style.width = width + 'px';
                video.style.height = height + 'px';
            },
            _createDom: function _createDom(muted) {
                var video = document.createElement('video');
                video.style.position = 'absolute';
                video.style.bottom = '0px';
                video.style.left = '0px';
                video.className = 'cocosVideo';
                video.setAttribute('preload', 'auto');
                video.setAttribute('webkit-playsinline', '');
                video.setAttribute('x5-playsinline', '');
                video.setAttribute('playsinline', '');
                if (muted) {
                    video.setAttribute('muted', '');
                }
                this._video = video;
                cc.game.container.appendChild(video);
            },
            createDomElementIfNeeded: function createDomElementIfNeeded(muted) {
                if (!this._video) {
                    this._createDom(muted);
                }
            },
            removeDom: function removeDom() {
                var video = this._video;
                if (video) {
                    var hasChild = utils.contains(cc.game.container, video);
                    if (hasChild)
                        cc.game.container.removeChild(video);
                    var cbs = this.__eventListeners;
                    video.removeEventListener('loadedmetadata', cbs.loadedmetadata);
                    video.removeEventListener('ended', cbs.ended);
                    video.removeEventListener('play', cbs.play);
                    video.removeEventListener('pause', cbs.pause);
                    video.removeEventListener('click', cbs.click);
                    video.removeEventListener('canplay', cbs.onCanPlay);
                    video.removeEventListener('canplaythrough', cbs.onCanPlay);
                    video.removeEventListener('suspend', cbs.onCanPlay);
                    cbs.loadedmetadata = null;
                    cbs.ended = null;
                    cbs.play = null;
                    cbs.pause = null;
                    cbs.click = null;
                    cbs.onCanPlay = null;
                }
                this._video = null;
                this._url = '';
            },
            setURL: function setURL(path, muted) {
                var source = void 0, extname = void 0;
                if (this._url === path) {
                    return;
                }
                this._url = path;
                this.removeDom();
                this.createDomElementIfNeeded(muted);
                this._bindEvent();
                var video = this._video;
                video.style['visibility'] = 'hidden';
                this._loaded = false;
                this._playing = false;
                this._loadedmeta = false;
                source = document.createElement('source');
                source.src = path;
                video.appendChild(source);
                extname = cc.path.extname(path);
                var polyfill = VideoPlayerImpl._polyfill;
                for (var i = 0; i < polyfill.canPlayType.length; i++) {
                    if (extname !== polyfill.canPlayType[i]) {
                        source = document.createElement('source');
                        source.src = path.replace(extname, polyfill.canPlayType[i]);
                        video.appendChild(source);
                    }
                }
            },
            getURL: function getURL() {
                return this._url;
            },
            play: function play() {
                var video = this._video;
                if (!video || !this._visible || this._playing)
                    return;
                if (VideoPlayerImpl._polyfill.autoplayAfterOperation) {
                    var self = this;
                    setTimeout(function () {
                        video.play();
                    }, 20);
                } else {
                    video.play();
                }
            },
            pause: function pause() {
                var video = this._video;
                if (!this._playing || !video)
                    return;
                video.pause();
            },
            resume: function resume() {
                this.play();
            },
            stop: function stop() {
                var video = this._video;
                if (!video || !this._visible)
                    return;
                this._ignorePause = true;
                video.currentTime = 0;
                video.pause();
                setTimeout(function () {
                    this._dispatchEvent(VideoPlayerImpl.EventType.STOPPED);
                    this._ignorePause = false;
                }.bind(this), 0);
            },
            setVolume: function setVolume(volume) {
                var video = this._video;
                if (video) {
                    video.volume = volume;
                }
            },
            seekTo: function seekTo(time) {
                var video = this._video;
                if (!video)
                    return;
                if (this._loaded) {
                    video.currentTime = time;
                } else {
                    var cb = function cb() {
                        video.currentTime = time;
                        video.removeEventListener(VideoPlayerImpl._polyfill.event, cb);
                    };
                    video.addEventListener(VideoPlayerImpl._polyfill.event, cb);
                }
                if (VideoPlayerImpl._polyfill.autoplayAfterOperation && this.isPlaying()) {
                    setTimeout(function () {
                        video.play();
                    }, 20);
                }
            },
            isPlaying: function isPlaying() {
                var video = this._video;
                if (VideoPlayerImpl._polyfill.autoplayAfterOperation && this._playing) {
                    setTimeout(function () {
                        video.play();
                    }, 20);
                }
                return this._playing;
            },
            duration: function duration() {
                var video = this._video;
                var duration = -1;
                if (!video)
                    return duration;
                duration = video.duration;
                if (duration <= 0) {
                    cc.logID(7702);
                }
                return duration;
            },
            currentTime: function currentTime() {
                var video = this._video;
                if (!video)
                    return -1;
                return video.currentTime;
            },
            setKeepAspectRatioEnabled: function setKeepAspectRatioEnabled() {
                if (CC_EDITOR) {
                    return;
                }
                cc.logID(7700);
            },
            isKeepAspectRatioEnabled: function isKeepAspectRatioEnabled() {
                return true;
            },
            _toggleFullscreen: function _toggleFullscreen(enable) {
                var self = this, video = this._video;
                if (!video) {
                    return;
                }
                function handleFullscreenChange(event) {
                    var fullscreenElement = sys.browserType === sys.BROWSER_TYPE_IE ? document.msFullscreenElement : document.fullscreenElement;
                    self._fullScreenEnabled = fullscreenElement === video;
                }
                function handleFullScreenError(event) {
                    self._fullScreenEnabled = false;
                }
                if (enable) {
                    if (sys.browserType === sys.BROWSER_TYPE_IE) {
                        video.style['transform'] = '';
                    }
                    cc.screen.requestFullScreen(video, handleFullscreenChange, handleFullScreenError);
                } else if (cc.screen.fullScreen()) {
                    cc.screen.exitFullScreen(video);
                }
            },
            setFullScreenEnabled: function setFullScreenEnabled(enable) {
                if (!this._loadedmeta) {
                    this._preFullScreenEnabled = enable;
                } else {
                    this._toggleFullscreen(enable);
                }
            },
            isFullScreenEnabled: function isFullScreenEnabled() {
                return this._fullScreenEnabled;
            },
            setEventListener: function setEventListener(event, callback) {
                this._EventList[event] = callback;
            },
            removeEventListener: function removeEventListener(event) {
                this._EventList[event] = null;
            },
            _dispatchEvent: function _dispatchEvent(event) {
                var callback = this._EventList[event];
                if (callback)
                    callback.call(this, this, this._video.src);
            },
            onPlayEvent: function onPlayEvent() {
                var callback = this._EventList[VideoPlayerImpl.EventType.PLAYING];
                callback.call(this, this, this._video.src);
            },
            enable: function enable() {
                var list = VideoPlayerImpl.elements;
                if (list.indexOf(this) === -1)
                    list.push(this);
                this.setVisible(true);
            },
            disable: function disable() {
                var list = VideoPlayerImpl.elements;
                var index = list.indexOf(this);
                if (index !== -1)
                    list.splice(index, 1);
                this.setVisible(false);
            },
            destroy: function destroy() {
                this.disable();
                this.removeDom();
            },
            setVisible: function setVisible(visible) {
                if (this._visible !== visible) {
                    this._visible = !!visible;
                    this._updateVisibility();
                }
            },
            updateMatrix: function updateMatrix(node) {
                if (!this._video || !this._visible || this._fullScreenEnabled)
                    return;
                node.getWorldMatrix(_mat4_temp);
                var renderCamera = cc.Camera._findRendererCamera(node);
                if (renderCamera) {
                    renderCamera.worldMatrixToScreen(_mat4_temp, _mat4_temp, cc.visibleRect.width, cc.visibleRect.height);
                }
                if (!this._forceUpdate && this._m00 === _mat4_temp.m00 && this._m01 === _mat4_temp.m01 && this._m04 === _mat4_temp.m04 && this._m05 === _mat4_temp.m05 && this._m12 === _mat4_temp.m12 && this._m13 === _mat4_temp.m13 && this._w === node._contentSize.width && this._h === node._contentSize.height) {
                    return;
                }
                this._m00 = _mat4_temp.m00;
                this._m01 = _mat4_temp.m01;
                this._m04 = _mat4_temp.m04;
                this._m05 = _mat4_temp.m05;
                this._m12 = _mat4_temp.m12;
                this._m13 = _mat4_temp.m13;
                this._w = node._contentSize.width;
                this._h = node._contentSize.height;
                var scaleX = cc.view._scaleX, scaleY = cc.view._scaleY;
                var dpr = cc.view._devicePixelRatio;
                scaleX /= dpr;
                scaleY /= dpr;
                var container = cc.game.container;
                var a = _mat4_temp.m00 * scaleX, b = _mat4_temp.m01, c = _mat4_temp.m04, d = _mat4_temp.m05 * scaleY;
                var offsetX = container && container.style.paddingLeft ? parseInt(container.style.paddingLeft) : 0;
                var offsetY = container && container.style.paddingBottom ? parseInt(container.style.paddingBottom) : 0;
                var w = void 0, h = void 0;
                if (VideoPlayerImpl._polyfill.zoomInvalid) {
                    this._updateSize(this._w * a, this._h * d);
                    a = 1;
                    d = 1;
                    w = this._w * scaleX;
                    h = this._h * scaleY;
                } else {
                    w = this._w * scaleX;
                    h = this._h * scaleY;
                    this._updateSize(this._w, this._h);
                }
                var appx = w * _mat4_temp.m00 * node._anchorPoint.x;
                var appy = h * _mat4_temp.m05 * node._anchorPoint.y;
                var viewport = cc.view._viewportRect;
                offsetX += viewport.x / dpr;
                offsetY += viewport.y / dpr;
                var tx = _mat4_temp.m12 * scaleX - appx + offsetX, ty = _mat4_temp.m13 * scaleY - appy + offsetY;
                var matrix = 'matrix(' + a + ',' + -b + ',' + -c + ',' + d + ',' + tx + ',' + -ty + ')';
                this._video.style['transform'] = matrix;
                this._video.style['-webkit-transform'] = matrix;
                this._video.style['transform-origin'] = '0px 100% 0px';
                this._video.style['-webkit-transform-origin'] = '0px 100% 0px';
            }
        });
        VideoPlayerImpl.EventType = {
            PLAYING: 0,
            PAUSED: 1,
            STOPPED: 2,
            COMPLETED: 3,
            META_LOADED: 4,
            CLICKED: 5,
            READY_TO_PLAY: 6
        };
        VideoPlayerImpl.elements = [];
        VideoPlayerImpl.pauseElements = [];
        cc.game.on(cc.game.EVENT_HIDE, function () {
            var list = VideoPlayerImpl.elements;
            for (var element, i = 0; i < list.length; i++) {
                element = list[i];
                if (element.isPlaying()) {
                    element.pause();
                    VideoPlayerImpl.pauseElements.push(element);
                }
            }
        });
        cc.game.on(cc.game.EVENT_SHOW, function () {
            var list = VideoPlayerImpl.pauseElements;
            var element = list.pop();
            while (element) {
                element.play();
                element = list.pop();
            }
        });
        VideoPlayerImpl._polyfill = {
            devicePixelRatio: false,
            event: 'canplay',
            canPlayType: []
        };
        var isXiaomiGame = cc.sys.platform === cc.sys.XIAOMI_GAME;
        var isBaiduGame = cc.sys.platform === cc.sys.BAIDU_GAME;
        var dom = document.createElement('video');
        if (!CC_WECHATGAME && !isBaiduGame && !isXiaomiGame) {
            if (dom.canPlayType('video/ogg')) {
                VideoPlayerImpl._polyfill.canPlayType.push('.ogg');
                VideoPlayerImpl._polyfill.canPlayType.push('.ogv');
            }
            if (dom.canPlayType('video/mp4'))
                VideoPlayerImpl._polyfill.canPlayType.push('.mp4');
            if (dom.canPlayType('video/webm'))
                VideoPlayerImpl._polyfill.canPlayType.push('.webm');
        }
        if (sys.browserType === sys.BROWSER_TYPE_FIREFOX) {
            VideoPlayerImpl._polyfill.autoplayAfterOperation = true;
        }
        if (sys.OS_ANDROID === sys.os && (sys.browserType === sys.BROWSER_TYPE_SOUGOU || sys.browserType === sys.BROWSER_TYPE_360)) {
            VideoPlayerImpl._polyfill.zoomInvalid = true;
        }
        var style = document.createElement('style');
        style.innerHTML = '.cocosVideo:-moz-full-screen{transform:matrix(1,0,0,1,0,0) !important;}' + '.cocosVideo:full-screen{transform:matrix(1,0,0,1,0,0) !important;}' + '.cocosVideo:-webkit-full-screen{transform:matrix(1,0,0,1,0,0) !important;}';
        document.head.appendChild(style);
        module.exports = VideoPlayerImpl;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,