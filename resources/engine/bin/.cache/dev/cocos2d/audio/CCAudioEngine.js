(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/audio/CCAudioEngine.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Audio = require('./CCAudio');
        var AudioClip = require('../core/assets/CCAudioClip');
        var js = cc.js;
        var _instanceId = 0;
        var _id2audio = js.createMap(true);
        var _url2id = {};
        var _audioPool = [];
        var recycleAudio = function recycleAudio(audio) {
            audio._finishCallback = null;
            if (_audioPool.length < 32) {
                audio.off('ended');
                audio.off('stop');
                audio.src = null;
                if (!_audioPool.includes(audio)) {
                    _audioPool.push(audio);
                }
            } else {
                audio.destroy();
            }
        };
        var getAudioFromPath = function getAudioFromPath(path) {
            var id = _instanceId++;
            var list = _url2id[path];
            if (!list) {
                list = _url2id[path] = [];
            }
            if (audioEngine._maxAudioInstance <= list.length) {
                var oldId = list.shift();
                var oldAudio = getAudioFromId(oldId);
                oldAudio.stop();
            }
            var audio = _audioPool.pop() || new Audio();
            var callback = function callback() {
                var audioInList = getAudioFromId(this.id);
                if (audioInList) {
                    delete _id2audio[this.id];
                    var index = list.indexOf(this.id);
                    cc.js.array.fastRemoveAt(list, index);
                }
                recycleAudio(this);
            };
            audio.on('ended', function () {
                if (this._finishCallback) {
                    this._finishCallback();
                }
                callback.call(this);
            }, audio);
            audio.on('stop', callback, audio);
            audio.id = id;
            _id2audio[id] = audio;
            list.push(id);
            return audio;
        };
        var getAudioFromId = function getAudioFromId(id) {
            return _id2audio[id];
        };
        var handleVolume = function handleVolume(volume) {
            if (volume === undefined) {
                volume = 1;
            } else if (typeof volume === 'string') {
                volume = Number.parseFloat(volume);
            }
            return volume;
        };
        var audioEngine = {
            AudioState: Audio.State,
            _maxWebAudioSize: 2097152,
            _maxAudioInstance: 24,
            _id2audio: _id2audio,
            play: function play(clip, loop, volume) {
                var path = clip;
                var audio;
                if (typeof clip === 'string') {
                    cc.warnID(8401, 'cc.audioEngine', 'cc.AudioClip', 'AudioClip', 'cc.AudioClip', 'audio');
                    path = clip;
                    audio = getAudioFromPath(path);
                    AudioClip._loadByUrl(path, function (err, clip) {
                        if (clip) {
                            audio.src = clip;
                        }
                    });
                } else {
                    if (!clip) {
                        return;
                    }
                    path = clip.nativeUrl;
                    audio = getAudioFromPath(path);
                    audio.src = clip;
                }
                audio.setLoop(loop || false);
                volume = handleVolume(volume);
                audio.setVolume(volume);
                audio.play();
                return audio.id;
            },
            setLoop: function setLoop(audioID, loop) {
                var audio = getAudioFromId(audioID);
                if (!audio || !audio.setLoop)
                    return;
                audio.setLoop(loop);
            },
            isLoop: function isLoop(audioID) {
                var audio = getAudioFromId(audioID);
                if (!audio || !audio.getLoop)
                    return false;
                return audio.getLoop();
            },
            setVolume: function setVolume(audioID, volume) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.setVolume(volume);
                }
            },
            getVolume: function getVolume(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getVolume() : 1;
            },
            setCurrentTime: function setCurrentTime(audioID, sec) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.setCurrentTime(sec);
                    return true;
                } else {
                    return false;
                }
            },
            getCurrentTime: function getCurrentTime(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getCurrentTime() : 0;
            },
            getDuration: function getDuration(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getDuration() : 0;
            },
            getState: function getState(audioID) {
                var audio = getAudioFromId(audioID);
                return audio ? audio.getState() : this.AudioState.ERROR;
            },
            setFinishCallback: function setFinishCallback(audioID, callback) {
                var audio = getAudioFromId(audioID);
                if (!audio)
                    return;
                audio._finishCallback = callback;
            },
            pause: function pause(audioID) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.pause();
                    return true;
                } else {
                    return false;
                }
            },
            _pauseIDCache: [],
            pauseAll: function pauseAll() {
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    var state = audio.getState();
                    if (state === Audio.State.PLAYING) {
                        this._pauseIDCache.push(id);
                        audio.pause();
                    }
                }
            },
            resume: function resume(audioID) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.resume();
                }
            },
            resumeAll: function resumeAll() {
                for (var i = 0; i < this._pauseIDCache.length; ++i) {
                    var id = this._pauseIDCache[i];
                    var audio = getAudioFromId(id);
                    if (audio)
                        audio.resume();
                }
                this._pauseIDCache.length = 0;
            },
            stop: function stop(audioID) {
                var audio = getAudioFromId(audioID);
                if (audio) {
                    audio.stop();
                    return true;
                } else {
                    return false;
                }
            },
            stopAll: function stopAll() {
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (audio) {
                        audio.stop();
                    }
                }
            },
            setMaxAudioInstance: function setMaxAudioInstance(num) {
                this._maxAudioInstance = num;
            },
            getMaxAudioInstance: function getMaxAudioInstance() {
                return this._maxAudioInstance;
            },
            uncache: function uncache(clip) {
                var filePath = clip;
                if (typeof clip === 'string') {
                    cc.warnID(8401, 'cc.audioEngine', 'cc.AudioClip', 'AudioClip', 'cc.AudioClip', 'audio');
                    filePath = clip;
                } else {
                    if (!clip) {
                        return;
                    }
                    filePath = clip.nativeUrl;
                }
                var list = _url2id[filePath];
                if (!list)
                    return;
                while (list.length > 0) {
                    var id = list.pop();
                    var audio = _id2audio[id];
                    if (audio) {
                        audio.stop();
                        delete _id2audio[id];
                    }
                }
            },
            uncacheAll: function uncacheAll() {
                this.stopAll();
                var audio = void 0;
                for (var id in _id2audio) {
                    audio = _id2audio[id];
                    if (audio) {
                        audio.destroy();
                    }
                }
                while (audio = _audioPool.pop()) {
                    audio.destroy();
                }
                _id2audio = js.createMap(true);
                _url2id = {};
            },
            getProfile: function getProfile(profileName) {
            },
            preload: function preload(filePath, callback) {
                if (CC_DEBUG) {
                    cc.warn('`cc.audioEngine.preload` is deprecated, use `cc.loader.loadRes(url, cc.AudioClip)` instead please.');
                }
                cc.loader.load(filePath, callback && function (error) {
                    if (!error) {
                        callback();
                    }
                });
            },
            setMaxWebAudioSize: function setMaxWebAudioSize(kb) {
                this._maxWebAudioSize = kb * 1024;
            },
            _breakCache: null,
            _break: function _break() {
                this._breakCache = [];
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    var state = audio.getState();
                    if (state === Audio.State.PLAYING) {
                        this._breakCache.push(id);
                        audio.pause();
                    }
                }
            },
            _restore: function _restore() {
                if (!this._breakCache)
                    return;
                while (this._breakCache.length > 0) {
                    var id = this._breakCache.pop();
                    var audio = getAudioFromId(id);
                    if (audio && audio.resume)
                        audio.resume();
                }
                this._breakCache = null;
            },
            _music: {
                id: -1,
                loop: false,
                volume: 1
            },
            _effect: {
                volume: 1,
                pauseCache: []
            },
            playMusic: function playMusic(clip, loop) {
                var music = this._music;
                this.stop(music.id);
                music.id = this.play(clip, loop, music.volume);
                music.loop = loop;
                return music.id;
            },
            stopMusic: function stopMusic() {
                this.stop(this._music.id);
            },
            pauseMusic: function pauseMusic() {
                this.pause(this._music.id);
                return this._music.id;
            },
            resumeMusic: function resumeMusic() {
                this.resume(this._music.id);
                return this._music.id;
            },
            getMusicVolume: function getMusicVolume() {
                return this._music.volume;
            },
            setMusicVolume: function setMusicVolume(volume) {
                volume = handleVolume(volume);
                var music = this._music;
                music.volume = volume;
                this.setVolume(music.id, music.volume);
                return music.volume;
            },
            isMusicPlaying: function isMusicPlaying() {
                return this.getState(this._music.id) === this.AudioState.PLAYING;
            },
            playEffect: function playEffect(clip, loop) {
                return this.play(clip, loop || false, this._effect.volume);
            },
            setEffectsVolume: function setEffectsVolume(volume) {
                volume = handleVolume(volume);
                var musicId = this._music.id;
                this._effect.volume = volume;
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (!audio || audio.id === musicId)
                        continue;
                    audioEngine.setVolume(id, volume);
                }
            },
            getEffectsVolume: function getEffectsVolume() {
                return this._effect.volume;
            },
            pauseEffect: function pauseEffect(audioID) {
                return this.pause(audioID);
            },
            pauseAllEffects: function pauseAllEffects() {
                var musicId = this._music.id;
                var effect = this._effect;
                effect.pauseCache.length = 0;
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (!audio || audio.id === musicId)
                        continue;
                    var state = audio.getState();
                    if (state === this.AudioState.PLAYING) {
                        effect.pauseCache.push(id);
                        audio.pause();
                    }
                }
            },
            resumeEffect: function resumeEffect(id) {
                this.resume(id);
            },
            resumeAllEffects: function resumeAllEffects() {
                var pauseIDCache = this._effect.pauseCache;
                for (var i = 0; i < pauseIDCache.length; ++i) {
                    var id = pauseIDCache[i];
                    var audio = _id2audio[id];
                    if (audio)
                        audio.resume();
                }
            },
            stopEffect: function stopEffect(audioID) {
                return this.stop(audioID);
            },
            stopAllEffects: function stopAllEffects() {
                var musicId = this._music.id;
                for (var id in _id2audio) {
                    var audio = _id2audio[id];
                    if (!audio || audio.id === musicId)
                        continue;
                    var state = audio.getState();
                    if (state === audioEngine.AudioState.PLAYING) {
                        audio.stop();
                    }
                }
            }
        };
        module.exports = cc.audioEngine = audioEngine;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQXVkaW9FbmdpbmUuanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL2F1ZGlvL0NDQXVkaW9FbmdpbmUuanMiXSwibmFtZXMiOlsiQXVkaW8iLCJyZXF1aXJlIiwiQXVkaW9DbGlwIiwianMiLCJjYyIsIl9pbnN0YW5jZUlkIiwiX2lkMmF1ZGlvIiwiY3JlYXRlTWFwIiwiX3VybDJpZCIsIl9hdWRpb1Bvb2wiLCJyZWN5Y2xlQXVkaW8iLCJhdWRpbyIsIl9maW5pc2hDYWxsYmFjayIsImxlbmd0aCIsIm9mZiIsInNyYyIsImluY2x1ZGVzIiwicHVzaCIsImRlc3Ryb3kiLCJnZXRBdWRpb0Zyb21QYXRoIiwicGF0aCIsImlkIiwibGlzdCIsImF1ZGlvRW5naW5lIiwiX21heEF1ZGlvSW5zdGFuY2UiLCJvbGRJZCIsInNoaWZ0Iiwib2xkQXVkaW8iLCJnZXRBdWRpb0Zyb21JZCIsInN0b3AiLCJwb3AiLCJjYWxsYmFjayIsImF1ZGlvSW5MaXN0IiwiaW5kZXgiLCJpbmRleE9mIiwiYXJyYXkiLCJmYXN0UmVtb3ZlQXQiLCJvbiIsImNhbGwiLCJoYW5kbGVWb2x1bWUiLCJ2b2x1bWUiLCJ1bmRlZmluZWQiLCJOdW1iZXIiLCJwYXJzZUZsb2F0IiwiQXVkaW9TdGF0ZSIsIlN0YXRlIiwiX21heFdlYkF1ZGlvU2l6ZSIsInBsYXkiLCJjbGlwIiwibG9vcCIsIndhcm5JRCIsIl9sb2FkQnlVcmwiLCJlcnIiLCJuYXRpdmVVcmwiLCJzZXRMb29wIiwic2V0Vm9sdW1lIiwiYXVkaW9JRCIsImlzTG9vcCIsImdldExvb3AiLCJnZXRWb2x1bWUiLCJzZXRDdXJyZW50VGltZSIsInNlYyIsImdldEN1cnJlbnRUaW1lIiwiZ2V0RHVyYXRpb24iLCJnZXRTdGF0ZSIsIkVSUk9SIiwic2V0RmluaXNoQ2FsbGJhY2siLCJwYXVzZSIsIl9wYXVzZUlEQ2FjaGUiLCJwYXVzZUFsbCIsInN0YXRlIiwiUExBWUlORyIsInJlc3VtZSIsInJlc3VtZUFsbCIsImkiLCJzdG9wQWxsIiwic2V0TWF4QXVkaW9JbnN0YW5jZSIsIm51bSIsImdldE1heEF1ZGlvSW5zdGFuY2UiLCJ1bmNhY2hlIiwiZmlsZVBhdGgiLCJ1bmNhY2hlQWxsIiwiZ2V0UHJvZmlsZSIsInByb2ZpbGVOYW1lIiwicHJlbG9hZCIsIkNDX0RFQlVHIiwid2FybiIsImxvYWRlciIsImxvYWQiLCJlcnJvciIsInNldE1heFdlYkF1ZGlvU2l6ZSIsImtiIiwiX2JyZWFrQ2FjaGUiLCJfYnJlYWsiLCJfcmVzdG9yZSIsIl9tdXNpYyIsIl9lZmZlY3QiLCJwYXVzZUNhY2hlIiwicGxheU11c2ljIiwibXVzaWMiLCJzdG9wTXVzaWMiLCJwYXVzZU11c2ljIiwicmVzdW1lTXVzaWMiLCJnZXRNdXNpY1ZvbHVtZSIsInNldE11c2ljVm9sdW1lIiwiaXNNdXNpY1BsYXlpbmciLCJwbGF5RWZmZWN0Iiwic2V0RWZmZWN0c1ZvbHVtZSIsIm11c2ljSWQiLCJnZXRFZmZlY3RzVm9sdW1lIiwicGF1c2VFZmZlY3QiLCJwYXVzZUFsbEVmZmVjdHMiLCJlZmZlY3QiLCJyZXN1bWVFZmZlY3QiLCJyZXN1bWVBbGxFZmZlY3RzIiwicGF1c2VJRENhY2hlIiwic3RvcEVmZmVjdCIsInN0b3BBbGxFZmZlY3RzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMkJBLElBQU1BLEtBQUFBLEdBQVFDLE9BQUFBLENBQVEsV0FBUkEsQ0FBZDtRQUNBLElBQU1DLFNBQUFBLEdBQVlELE9BQUFBLENBQVEsNEJBQVJBLENBQWxCO1FBQ0EsSUFBTUUsRUFBQUEsR0FBS0MsRUFBQUEsQ0FBR0QsRUFBZDtRQUVBLElBQUlFLFdBQUFBLEdBQWMsQ0FBbEI7UUFDQSxJQUFJQyxTQUFBQSxHQUFZSCxFQUFBQSxDQUFHSSxTQUFISixDQUFhLElB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Q0lBLEtBQUFBLENBQU02RCxNQUFON0QsR0FKc0M7QUFBQSxpQkFGcEI7QUFBQSxhQXRwQmhCO0FBQUEsWUF3cUJkeUcsVUFBQUEsRUFBWSxTQUFBLFVBQUEsQ0FBVTVELE9BQVYsRUFBbUI7QUFBQSxnQkFDM0IsT0FBTyxLQUFLM0IsSUFBTCxDQUFVMkIsT0FBVixDQUFQLENBRDJCO0FBQUEsYUF4cUJqQjtBQUFBLFlBbXJCZDZELGNBQUFBLEVBQWdCLFNBQUEsY0FBQSxHQUFZO0FBQUEsZ0JBQ3hCLElBQUlULE9BQUFBLEdBQVUsS0FBS2IsTUFBTCxDQUFZMUUsRUFBMUIsQ0FEd0I7QUFBQSxnQkFFeEIsU0FBU0EsRUFBVCxJQUFlZixTQUFmLEVBQTBCO0FBQUEsb0JBQ3RCLElBQUlLLEtBQUFBLEdBQVFMLFNBQUFBLENBQVVlLEVBQVZmLENBQVosQ0FEc0I7QUFBQSxvQkFFdEIsSUFBSSxDQUFDSyxLQUFELElBQVVBLEtBQUFBLENBQU1VLEVBQU5WLEtBQWFpRyxPQUEzQjtBQUFBLHdCQUFvQyxTQUZkO0FBQUEsb0JBR3RCLElBQUl0QyxLQUFBQSxHQUFRM0QsS0FBQUEsQ0FBTXFELFFBQU5yRCxFQUFaLENBSHNCO0FBQUEsb0JBSXRCLElBQUkyRCxLQUFBQSxLQUFVL0MsV0FBQUEsQ0FBWXFCLFVBQVpyQixDQUF1QmdELE9BQXJDLEVBQThDO0FBQUEsd0JBQzFDNUQsS0FBQUEsQ0FBTWtCLElBQU5sQixHQUQwQztBQUFBLHFCQUp4QjtBQUFBLGlCQUZGO0FBQUEsYUFuckJkO0FBQUEsU0FBbEI7UUFnc0JBMkcsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJsSCxFQUFBQSxDQUFHbUIsV0FBSG5CLEdBQWlCbUIsV0FBbEMrRiIsImZpbGUiOiJDQ0F1ZGlvRW5naW5lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAwOC0yMDEwIFJpY2FyZG8gUXVlc2FkYVxyXG4gQ29weXJpZ2h0IChjKSAyMDExLTIwMTIgY29jb3MyZC14Lm9yZ1xyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5jb25zdCBBdWRpbyA9IHJlcXVpcmUoJy4vQ0NBdWRpbycpO1xyXG5jb25zdCBBdWRpb0NsaXAgPSByZXF1aXJlKCcuLi9jb3JlL2Fzc2V0cy9DQ0F1ZGlvQ2xpcCcpO1xyXG5jb25zdCBqcyA9IGNjLmpzO1xyXG5cclxubGV0IF9pbnN0YW5jZUlkID0gMDtcclxubGV0IF9pZDJhdWRpbyA9IGpzLmNyZWF0ZU1hcCh0cnVlKTtcclxubGV0IF91cmwyaWQgPSB7fTtcclxubGV0IF9hdWRpb1Bvb2wgPSBbXTtcclxuXHJcbmxldCByZWN5Y2xlQXVkaW8gPSBmdW5jdGlvbiAoYXVkaW8pIHtcclxuICAgIGF1ZGlvLl9maW5pc2hDYWxsYmFjayA9IG51bGw7XHJcbiAgICBpZiAoX2F1ZGlvUG9vbC5sZW5ndGggPCAzMikge1xyXG4gICAgICAgIGF1ZGlvLm9mZignZW5kZWQnKTtcclxuICAgICAgICBhdWRpby5vZmYoJ3N0b3AnKTtcclxuICAgICAgICBhdWRpby5zcmMgPSBudWxsO1xyXG4gICAgICAgIC8vIEluIGNhc2UgcmVwZWF0bHkgcmVjeWNsZSBhdWRpb1xyXG4gICAgICAgIGlmICghX2F1ZGlvUG9vbC5pbmNsdWRlcyhhdWRpbykpIHtcclxuICAgICAgICAgICAgX2F1ZGlvUG9vbC5wdXNoKGF1ZGlvKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBhdWRpby5kZXN0cm95KCk7XHJcbiAgICB9XHJcbn07XHJcblxyXG5sZXQgZ2V0QXVkaW9Gcm9tUGF0aCA9IGZ1bmN0aW9uIChwYXRoKSB7XHJcbiAgICB2YXIgaWQgPSBfaW5zdGFuY2VJZCsrO1xyXG4gICAgdmFyIGxpc3QgPSBfdXJsMmlkW3BhdGhdO1xyXG4gICAgaWYgKCFsaXN0KSB7XHJcbiAgICAgICAgbGlzdCA9IF91cmwyaWRbcGF0aF0gPSBbXTtcclxuICAgIH1cclxuICAgIGlmIChhdWRpb0VuZ2luZS5fbWF4QXVkaW9JbnN0YW5jZSA8PSBsaXN0Lmxlbmd0aCkge1xyXG4gICAgICAgIHZhciBvbGRJZCA9IGxpc3Quc2hpZnQoKTtcclxuICAgICAgICB2YXIgb2xkQXVkaW8gPSBnZXRBdWRpb0Zyb21JZChvbGRJZCk7XHJcbiAgICAgICAgLy8gU3RvcCB3aWxsIHJlY3ljbGUgYXVkaW8gYXV0b21hdGljYWxseSBieSBldmVudCBjYWxsYmFja1xyXG4gICAgICAgIG9sZEF1ZGlvLnN0b3AoKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgYXVkaW8gPSBfYXVkaW9Qb29sLnBvcCgpIHx8IG5ldyBBdWRpbygpO1xyXG4gICAgdmFyIGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhdWRpb0luTGlzdCA9IGdldEF1ZGlvRnJvbUlkKHRoaXMuaWQpO1xyXG4gICAgICAgIGlmIChhdWRpb0luTGlzdCkge1xyXG4gICAgICAgICAgICBkZWxldGUgX2lkMmF1ZGlvW3RoaXMuaWRdO1xyXG4gICAgICAgICAgICB2YXIgaW5kZXggPSBsaXN0LmluZGV4T2YodGhpcy5pZCk7XHJcbiAgICAgICAgICAgIGNjLmpzLmFycmF5LmZhc3RSZW1vdmVBdChsaXN0LCBpbmRleCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlY3ljbGVBdWRpbyh0aGlzKTtcclxuICAgIH07XHJcblxyXG4gICAgYXVkaW8ub24oJ2VuZGVkJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLl9maW5pc2hDYWxsYmFjaykge1xyXG4gICAgICAgICAgICB0aGlzLl9maW5pc2hDYWxsYmFjaygpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMpO1xyXG4gICAgfSwgYXVkaW8pO1xyXG5cclxuICAgIGF1ZGlvLm9uKCdzdG9wJywgY2FsbGJhY2ssIGF1ZGlvKTtcclxuICAgIGF1ZGlvLmlkID0gaWQ7XHJcbiAgICBfaWQyYXVkaW9baWRdID0gYXVkaW87XHJcbiAgICBsaXN0LnB1c2goaWQpO1xyXG5cclxuICAgIHJldHVybiBhdWRpbztcclxufTtcclxuXHJcbmxldCBnZXRBdWRpb0Zyb21JZCA9IGZ1bmN0aW9uIChpZCkge1xyXG4gICAgcmV0dXJuIF9pZDJhdWRpb1tpZF07XHJcbn07XHJcblxyXG5sZXQgaGFuZGxlVm9sdW1lICA9IGZ1bmN0aW9uICh2b2x1bWUpIHtcclxuICAgIGlmICh2b2x1bWUgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IHZvbHVtZSBhcyAxXHJcbiAgICAgICAgdm9sdW1lID0gMTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiB2b2x1bWUgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgdm9sdW1lID0gTnVtYmVyLnBhcnNlRmxvYXQodm9sdW1lKTtcclxuICAgIH1cclxuICAgIHJldHVybiB2b2x1bWU7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlbiBjYy5hdWRpb0VuZ2luZSBpcyB0aGUgc2luZ2xldG9uIG9iamVjdCwgaXQgcHJvdmlkZSBzaW1wbGUgYXVkaW8gQVBJcy5cclxuICogISN6aFxyXG4gKiBjYy5hdWRpb2VuZ2luZeaYr+WNleS+i+WvueixoeOAgjxici8+XHJcbiAqIOS4u+imgeeUqOadpeaSreaUvumfs+mike+8jOaSreaUvueahOaXtuWAmeS8mui/lOWbnuS4gOS4qiBhdWRpb0lE77yM5LmL5ZCO6YO95Y+v5Lul6YCa6L+H6L+Z5LiqIGF1ZGlvSUQg5p2l5pON5L2c6L+Z5Liq6Z+z6aKR5a+56LGh44CCPGJyLz5cclxuICog5LiN5L2/55So55qE5pe25YCZ77yM6K+35L2/55SoIGNjLmF1ZGlvRW5naW5lLnVuY2FjaGUoZmlsZVBhdGgpOyDov5vooYzotYTmupDph4rmlL4gPGJyLz5cclxuICog5rOo5oSP77yaPGJyLz5cclxuICog5ZyoIEFuZHJvaWQg57O757uf5rWP6KeI5Zmo5LiK77yM5LiN5ZCM5rWP6KeI5Zmo77yM5LiN5ZCM54mI5pys55qE5pWI5p6c5LiN5bC955u45ZCM44CCPGJyLz5cclxuICog5q+U5aaC6K+077ya5aSn5aSa5pWw5rWP6KeI5Zmo6YO96ZyA6KaB55So5oi354mp55CG5Lqk5LqS5omN5Y+v5Lul5byA5aeL5pKt5pS+6Z+z5pWI77yM5pyJ5LiA5Lqb5LiN5pSv5oyBIFdlYkF1ZGlv77yMPGJyLz5cclxuICog5pyJ5LiA5Lqb5LiN5pSv5oyB5aSa6Z+z6L2o5pKt5pS+44CC5oC75LmL5aaC5p6c5a+56Z+z5LmQ5L6d6LWW5q+U6L6D5by677yM6K+35YGa5bC95Y+v6IO95aSa55qE5rWL6K+V44CCXHJcbiAqIEBjbGFzcyBhdWRpb0VuZ2luZVxyXG4gKiBAc3RhdGljXHJcbiAqL1xyXG52YXIgYXVkaW9FbmdpbmUgPSB7XHJcblxyXG4gICAgQXVkaW9TdGF0ZTogQXVkaW8uU3RhdGUsXHJcblxyXG4gICAgX21heFdlYkF1ZGlvU2l6ZTogMjA5NzE1MiwgLy8gMjA0OGtiICogMTAyNFxyXG4gICAgX21heEF1ZGlvSW5zdGFuY2U6IDI0LFxyXG5cclxuICAgIF9pZDJhdWRpbzogX2lkMmF1ZGlvLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBQbGF5IGF1ZGlvLlxyXG4gICAgICogISN6aCDmkq3mlL7pn7PpopFcclxuICAgICAqIEBtZXRob2QgcGxheVxyXG4gICAgICogQHBhcmFtIHtBdWRpb0NsaXB9IGNsaXAgLSBUaGUgYXVkaW8gY2xpcCB0byBwbGF5LlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBsb29wIC0gV2hldGhlciB0aGUgbXVzaWMgbG9vcCBvciBub3QuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdm9sdW1lIC0gVm9sdW1lIHNpemUuXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGF1ZGlvSWRcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5sb2FkZXIubG9hZFJlcyh1cmwsIGNjLkF1ZGlvQ2xpcCwgZnVuY3Rpb24gKGVyciwgY2xpcCkge1xyXG4gICAgICogICAgIHZhciBhdWRpb0lEID0gY2MuYXVkaW9FbmdpbmUucGxheShjbGlwLCBmYWxzZSwgMC41KTtcclxuICAgICAqIH0pO1xyXG4gICAgICovXHJcbiAgICBwbGF5OiBmdW5jdGlvbiAoY2xpcCwgbG9vcCwgdm9sdW1lLyosIHByb2ZpbGUqLykge1xyXG4gICAgICAgIHZhciBwYXRoID0gY2xpcDtcclxuICAgICAgICB2YXIgYXVkaW87XHJcbiAgICAgICAgaWYgKHR5cGVvZiBjbGlwID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICAvLyBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHNpbmNlIDEuMTBcclxuICAgICAgICAgICAgY2Mud2FybklEKDg0MDEsICdjYy5hdWRpb0VuZ2luZScsICdjYy5BdWRpb0NsaXAnLCAnQXVkaW9DbGlwJywgJ2NjLkF1ZGlvQ2xpcCcsICdhdWRpbycpO1xyXG4gICAgICAgICAgICBwYXRoID0gY2xpcDtcclxuICAgICAgICAgICAgLy8gbG9hZCBjbGlwXHJcbiAgICAgICAgICAgIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tUGF0aChwYXRoKTtcclxuICAgICAgICAgICAgQXVkaW9DbGlwLl9sb2FkQnlVcmwocGF0aCwgZnVuY3Rpb24gKGVyciwgY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGNsaXApIHtcclxuICAgICAgICAgICAgICAgICAgICBhdWRpby5zcmMgPSBjbGlwO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHBhdGggPSBjbGlwLm5hdGl2ZVVybDtcclxuICAgICAgICAgICAgYXVkaW8gPSBnZXRBdWRpb0Zyb21QYXRoKHBhdGgpO1xyXG4gICAgICAgICAgICBhdWRpby5zcmMgPSBjbGlwO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgYXVkaW8uc2V0TG9vcChsb29wIHx8IGZhbHNlKTtcclxuICAgICAgICB2b2x1bWUgPSBoYW5kbGVWb2x1bWUodm9sdW1lKTtcclxuICAgICAgICBhdWRpby5zZXRWb2x1bWUodm9sdW1lKTtcclxuICAgICAgICBhdWRpby5wbGF5KCk7XHJcblxyXG4gICAgICAgIHJldHVybiBhdWRpby5pZDtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCBhdWRpbyBsb29wLlxyXG4gICAgICogISN6aCDorr7nva7pn7PpopHmmK/lkKblvqrnjq/jgIJcclxuICAgICAqIEBtZXRob2Qgc2V0TG9vcFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9vcCAtIFdoZXRoZXIgY3ljbGUuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc2V0TG9vcChpZCwgdHJ1ZSk7XHJcbiAgICAgKi9cclxuICAgIHNldExvb3A6IGZ1bmN0aW9uIChhdWRpb0lELCBsb29wKSB7XHJcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XHJcbiAgICAgICAgaWYgKCFhdWRpbyB8fCAhYXVkaW8uc2V0TG9vcClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGF1ZGlvLnNldExvb3AobG9vcCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgYXVkaW8gY3ljbGUgc3RhdGUuXHJcbiAgICAgKiAhI3poIOiOt+WPlumfs+mikeeahOW+queOr+eKtuaAgeOAglxyXG4gICAgICogQG1ldGhvZCBpc0xvb3BcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gYXVkaW8gaWQuXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufSBXaGV0aGVyIGN5Y2xlLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLmlzTG9vcChpZCk7XHJcbiAgICAgKi9cclxuICAgIGlzTG9vcDogZnVuY3Rpb24gKGF1ZGlvSUQpIHtcclxuICAgICAgICB2YXIgYXVkaW8gPSBnZXRBdWRpb0Zyb21JZChhdWRpb0lEKTtcclxuICAgICAgICBpZiAoIWF1ZGlvIHx8ICFhdWRpby5nZXRMb29wKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIGF1ZGlvLmdldExvb3AoKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCB0aGUgdm9sdW1lIG9mIGF1ZGlvLlxyXG4gICAgICogISN6aCDorr7nva7pn7Pph4/vvIgwLjAgfiAxLjDvvInjgIJcclxuICAgICAqIEBtZXRob2Qgc2V0Vm9sdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZvbHVtZSAtIFZvbHVtZSBtdXN0IGJlIGluIDAuMH4xLjAgLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldFZvbHVtZShpZCwgMC41KTtcclxuICAgICAqL1xyXG4gICAgc2V0Vm9sdW1lOiBmdW5jdGlvbiAoYXVkaW9JRCwgdm9sdW1lKSB7XHJcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XHJcbiAgICAgICAgaWYgKGF1ZGlvKSB7XHJcbiAgICAgICAgICAgIGF1ZGlvLnNldFZvbHVtZSh2b2x1bWUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSB2b2x1bWUgb2YgdGhlIG11c2ljIG1heCB2YWx1ZSBpcyAxLjAsdGhlIG1pbiB2YWx1ZSBpcyAwLjAgLlxyXG4gICAgICogISN6aCDojrflj5bpn7Pph4/vvIgwLjAgfiAxLjDvvInjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0Vm9sdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciB2b2x1bWUgPSBjYy5hdWRpb0VuZ2luZS5nZXRWb2x1bWUoaWQpO1xyXG4gICAgICovXHJcbiAgICBnZXRWb2x1bWU6IGZ1bmN0aW9uIChhdWRpb0lEKSB7XHJcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XHJcbiAgICAgICAgcmV0dXJuIGF1ZGlvID8gYXVkaW8uZ2V0Vm9sdW1lKCkgOiAxO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0IGN1cnJlbnQgdGltZVxyXG4gICAgICogISN6aCDorr7nva7lvZPliY3nmoTpn7PpopHml7bpl7TjgIJcclxuICAgICAqIEBtZXRob2Qgc2V0Q3VycmVudFRpbWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gYXVkaW8gaWQuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc2VjIC0gY3VycmVudCB0aW1lLlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5zZXRDdXJyZW50VGltZShpZCwgMik7XHJcbiAgICAgKi9cclxuICAgIHNldEN1cnJlbnRUaW1lOiBmdW5jdGlvbiAoYXVkaW9JRCwgc2VjKSB7XHJcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XHJcbiAgICAgICAgaWYgKGF1ZGlvKSB7XHJcbiAgICAgICAgICAgIGF1ZGlvLnNldEN1cnJlbnRUaW1lKHNlYyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIEdldCBjdXJyZW50IHRpbWVcclxuICAgICAqICEjemgg6I635Y+W5b2T5YmN55qE6Z+z6aKR5pKt5pS+5pe26Ze044CCXHJcbiAgICAgKiBAbWV0aG9kIGdldEN1cnJlbnRUaW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhdWRpbyBjdXJyZW50IHRpbWUuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIHRpbWUgPSBjYy5hdWRpb0VuZ2luZS5nZXRDdXJyZW50VGltZShpZCk7XHJcbiAgICAgKi9cclxuICAgIGdldEN1cnJlbnRUaW1lOiBmdW5jdGlvbiAoYXVkaW9JRCkge1xyXG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xyXG4gICAgICAgIHJldHVybiBhdWRpbyA/IGF1ZGlvLmdldEN1cnJlbnRUaW1lKCkgOiAwO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IGF1ZGlvIGR1cmF0aW9uXHJcbiAgICAgKiAhI3poIOiOt+WPlumfs+mikeaAu+aXtumVv+OAglxyXG4gICAgICogQG1ldGhvZCBnZXREdXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYXVkaW8gZHVyYXRpb24uXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIHRpbWUgPSBjYy5hdWRpb0VuZ2luZS5nZXREdXJhdGlvbihpZCk7XHJcbiAgICAgKi9cclxuICAgIGdldER1cmF0aW9uOiBmdW5jdGlvbiAoYXVkaW9JRCkge1xyXG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xyXG4gICAgICAgIHJldHVybiBhdWRpbyA/IGF1ZGlvLmdldER1cmF0aW9uKCkgOiAwO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IGF1ZGlvIHN0YXRlXHJcbiAgICAgKiAhI3poIOiOt+WPlumfs+mikeeKtuaAgeOAglxyXG4gICAgICogQG1ldGhvZCBnZXRTdGF0ZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEByZXR1cm4ge2F1ZGlvRW5naW5lLkF1ZGlvU3RhdGV9IGF1ZGlvIGR1cmF0aW9uLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBzdGF0ZSA9IGNjLmF1ZGlvRW5naW5lLmdldFN0YXRlKGlkKTtcclxuICAgICAqL1xyXG4gICAgZ2V0U3RhdGU6IGZ1bmN0aW9uIChhdWRpb0lEKSB7XHJcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XHJcbiAgICAgICAgcmV0dXJuIGF1ZGlvID8gYXVkaW8uZ2V0U3RhdGUoKSA6IHRoaXMuQXVkaW9TdGF0ZS5FUlJPUjtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCBBdWRpbyBmaW5pc2ggY2FsbGJhY2tcclxuICAgICAqICEjemgg6K6+572u5LiA5Liq6Z+z6aKR57uT5p2f5ZCO55qE5Zue6LCDXHJcbiAgICAgKiBAbWV0aG9kIHNldEZpbmlzaENhbGxiYWNrXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgLSBsb2FkZWQgY2FsbGJhY2suXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc2V0RmluaXNoQ2FsbGJhY2soaWQsIGZ1bmN0aW9uICgpIHt9KTtcclxuICAgICAqL1xyXG4gICAgc2V0RmluaXNoQ2FsbGJhY2s6IGZ1bmN0aW9uIChhdWRpb0lELCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xyXG4gICAgICAgIGlmICghYXVkaW8pXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBhdWRpby5fZmluaXNoQ2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFBhdXNlIHBsYXlpbmcgYXVkaW8uXHJcbiAgICAgKiAhI3poIOaaguWBnOato+WcqOaSreaUvumfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCBwYXVzZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBUaGUgcmV0dXJuIHZhbHVlIG9mIGZ1bmN0aW9uIHBsYXkuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUucGF1c2UoYXVkaW9JRCk7XHJcbiAgICAgKi9cclxuICAgIHBhdXNlOiBmdW5jdGlvbiAoYXVkaW9JRCkge1xyXG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xyXG4gICAgICAgIGlmIChhdWRpbykge1xyXG4gICAgICAgICAgICBhdWRpby5wYXVzZSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9wYXVzZUlEQ2FjaGU6IFtdLFxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFBhdXNlIGFsbCBwbGF5aW5nIGF1ZGlvXHJcbiAgICAgKiAhI3poIOaaguWBnOeOsOWcqOato+WcqOaSreaUvueahOaJgOaciemfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCBwYXVzZUFsbFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnBhdXNlQWxsKCk7XHJcbiAgICAgKi9cclxuICAgIHBhdXNlQWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XHJcbiAgICAgICAgICAgIHZhciBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XHJcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGF1ZGlvLmdldFN0YXRlKCk7XHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gQXVkaW8uU3RhdGUuUExBWUlORykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcGF1c2VJRENhY2hlLnB1c2goaWQpO1xyXG4gICAgICAgICAgICAgICAgYXVkaW8ucGF1c2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFJlc3VtZSBwbGF5aW5nIGF1ZGlvLlxyXG4gICAgICogISN6aCDmgaLlpI3mkq3mlL7mjIflrprnmoTpn7PpopHjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIFRoZSByZXR1cm4gdmFsdWUgb2YgZnVuY3Rpb24gcGxheS5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5yZXN1bWUoYXVkaW9JRCk7XHJcbiAgICAgKi9cclxuICAgIHJlc3VtZTogZnVuY3Rpb24gKGF1ZGlvSUQpIHtcclxuICAgICAgICB2YXIgYXVkaW8gPSBnZXRBdWRpb0Zyb21JZChhdWRpb0lEKTtcclxuICAgICAgICBpZiAoYXVkaW8pIHtcclxuICAgICAgICAgICAgYXVkaW8ucmVzdW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gUmVzdW1lIGFsbCBwbGF5aW5nIGF1ZGlvLlxyXG4gICAgICogISN6aCDmgaLlpI3mkq3mlL7miYDmnInkuYvliY3mmoLlgZznmoTmiYDmnInpn7PpopHjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lQWxsXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUucmVzdW1lQWxsKCk7XHJcbiAgICAgKi9cclxuICAgIHJlc3VtZUFsbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fcGF1c2VJRENhY2hlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuX3BhdXNlSURDYWNoZVtpXTtcclxuICAgICAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoaWQpO1xyXG4gICAgICAgICAgICBpZiAoYXVkaW8pXHJcbiAgICAgICAgICAgICAgICBhdWRpby5yZXN1bWUoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fcGF1c2VJRENhY2hlLmxlbmd0aCA9IDA7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBTdG9wIHBsYXlpbmcgYXVkaW8uXHJcbiAgICAgKiAhI3poIOWBnOatouaSreaUvuaMh+Wumumfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCBzdG9wXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIFRoZSByZXR1cm4gdmFsdWUgb2YgZnVuY3Rpb24gcGxheS5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5zdG9wKGF1ZGlvSUQpO1xyXG4gICAgICovXHJcbiAgICBzdG9wOiBmdW5jdGlvbiAoYXVkaW9JRCkge1xyXG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xyXG4gICAgICAgIGlmIChhdWRpbykge1xyXG4gICAgICAgICAgICAvLyBTdG9wIHdpbGwgcmVjeWNsZSBhdWRpbyBhdXRvbWF0aWNhbGx5IGJ5IGV2ZW50IGNhbGxiYWNrXHJcbiAgICAgICAgICAgIGF1ZGlvLnN0b3AoKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU3RvcCBhbGwgcGxheWluZyBhdWRpby5cclxuICAgICAqICEjemgg5YGc5q2i5q2j5Zyo5pKt5pS+55qE5omA5pyJ6Z+z6aKR44CCXHJcbiAgICAgKiBAbWV0aG9kIHN0b3BBbGxcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5zdG9wQWxsKCk7XHJcbiAgICAgKi9cclxuICAgIHN0b3BBbGw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmb3IgKHZhciBpZCBpbiBfaWQyYXVkaW8pIHtcclxuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcclxuICAgICAgICAgICAgaWYgKGF1ZGlvKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wIHdpbGwgcmVjeWNsZSBhdWRpbyBhdXRvbWF0aWNhbGx5IGJ5IGV2ZW50IGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBhdWRpby5zdG9wKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBTZXQgdXAgYW4gYXVkaW8gY2FuIGdlbmVyYXRlIGEgZmV3IGV4YW1wbGVzLlxyXG4gICAgICogISN6aCDorr7nva7kuIDkuKrpn7PpopHlj6/ku6Xorr7nva7lh6DkuKrlrp7kvotcclxuICAgICAqIEBtZXRob2Qgc2V0TWF4QXVkaW9JbnN0YW5jZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG51bSAtIGEgbnVtYmVyIG9mIGluc3RhbmNlcyB0byBiZSBjcmVhdGVkIGZyb20gd2l0aGluIGFuIGF1ZGlvXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc2V0TWF4QXVkaW9JbnN0YW5jZSgyMCk7XHJcbiAgICAgKi9cclxuICAgIHNldE1heEF1ZGlvSW5zdGFuY2U6IGZ1bmN0aW9uIChudW0pIHtcclxuICAgICAgICB0aGlzLl9tYXhBdWRpb0luc3RhbmNlID0gbnVtO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0dGluZyBhdWRpbyBjYW4gcHJvZHVjZSBzZXZlcmFsIGV4YW1wbGVzLlxyXG4gICAgICogISN6aCDojrflj5bkuIDkuKrpn7PpopHlj6/ku6Xorr7nva7lh6DkuKrlrp7kvotcclxuICAgICAqIEBtZXRob2QgZ2V0TWF4QXVkaW9JbnN0YW5jZVxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhIC0gbnVtYmVyIG9mIGluc3RhbmNlcyB0byBiZSBjcmVhdGVkIGZyb20gd2l0aGluIGFuIGF1ZGlvXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuZ2V0TWF4QXVkaW9JbnN0YW5jZSgpO1xyXG4gICAgICovXHJcbiAgICBnZXRNYXhBdWRpb0luc3RhbmNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21heEF1ZGlvSW5zdGFuY2U7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBVbmxvYWQgdGhlIHByZWxvYWRlZCBhdWRpbyBmcm9tIGludGVybmFsIGJ1ZmZlci5cclxuICAgICAqICEjemgg5Y246L296aKE5Yqg6L2955qE6Z+z6aKR44CCXHJcbiAgICAgKiBAbWV0aG9kIHVuY2FjaGVcclxuICAgICAqIEBwYXJhbSB7QXVkaW9DbGlwfSBjbGlwXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUudW5jYWNoZShmaWxlUGF0aCk7XHJcbiAgICAgKi9cclxuICAgIHVuY2FjaGU6IGZ1bmN0aW9uIChjbGlwKSB7XHJcbiAgICAgICAgdmFyIGZpbGVQYXRoID0gY2xpcDtcclxuICAgICAgICBpZiAodHlwZW9mIGNsaXAgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgc2luY2UgMS4xMFxyXG4gICAgICAgICAgICBjYy53YXJuSUQoODQwMSwgJ2NjLmF1ZGlvRW5naW5lJywgJ2NjLkF1ZGlvQ2xpcCcsICdBdWRpb0NsaXAnLCAnY2MuQXVkaW9DbGlwJywgJ2F1ZGlvJyk7XHJcbiAgICAgICAgICAgIGZpbGVQYXRoID0gY2xpcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghY2xpcCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZpbGVQYXRoID0gY2xpcC5uYXRpdmVVcmw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgbGlzdCA9IF91cmwyaWRbZmlsZVBhdGhdO1xyXG4gICAgICAgIGlmICghbGlzdCkgcmV0dXJuO1xyXG4gICAgICAgIHdoaWxlIChsaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgdmFyIGlkID0gbGlzdC5wb3AoKTtcclxuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcclxuICAgICAgICAgICAgaWYgKGF1ZGlvKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBTdG9wIHdpbGwgcmVjeWNsZSBhdWRpbyBhdXRvbWF0aWNhbGx5IGJ5IGV2ZW50IGNhbGxiYWNrXHJcbiAgICAgICAgICAgICAgICBhdWRpby5zdG9wKCk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgX2lkMmF1ZGlvW2lkXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFVubG9hZCBhbGwgYXVkaW8gZnJvbSBpbnRlcm5hbCBidWZmZXIuXHJcbiAgICAgKiAhI3poIOWNuOi9veaJgOaciemfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCB1bmNhY2hlQWxsXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUudW5jYWNoZUFsbCgpO1xyXG4gICAgICovXHJcbiAgICB1bmNhY2hlQWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5zdG9wQWxsKCk7XHJcbiAgICAgICAgbGV0IGF1ZGlvO1xyXG4gICAgICAgIGZvciAobGV0IGlkIGluIF9pZDJhdWRpbykge1xyXG4gICAgICAgICAgICBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XHJcbiAgICAgICAgICAgIGlmIChhdWRpbykge1xyXG4gICAgICAgICAgICAgICAgYXVkaW8uZGVzdHJveSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlIChhdWRpbyA9IF9hdWRpb1Bvb2wucG9wKCkpIHtcclxuICAgICAgICAgICAgYXVkaW8uZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBfaWQyYXVkaW8gPSBqcy5jcmVhdGVNYXAodHJ1ZSk7XHJcbiAgICAgICAgX3VybDJpZCA9IHt9O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0cyBhbiBhdWRpbyBwcm9maWxlIGJ5IG5hbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHByb2ZpbGVOYW1lIEEgbmFtZSBvZiBhdWRpbyBwcm9maWxlLlxyXG4gICAgICogQHJldHVybiBUaGUgYXVkaW8gcHJvZmlsZS5cclxuICAgICAqL1xyXG4gICAgZ2V0UHJvZmlsZTogZnVuY3Rpb24gKHByb2ZpbGVOYW1lKSB7fSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gUHJlbG9hZCBhdWRpbyBmaWxlLlxyXG4gICAgICogISN6aCDpooTliqDovb3kuIDkuKrpn7PpopFcclxuICAgICAqIEBtZXRob2QgcHJlbG9hZFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGZpbGVQYXRoIC0gVGhlIGZpbGUgcGF0aCBvZiBhbiBhdWRpby5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IFtjYWxsYmFja10gLSBUaGUgY2FsbGJhY2sgb2YgYW4gYXVkaW8uXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUucHJlbG9hZChwYXRoKTtcclxuICAgICAqIEBkZXByZWNhdGVkIGBjYy5hdWRpb0VuZ2luZS5wcmVsb2FkYCBpcyBkZXByZWNhdGVkLCB1c2UgYGNjLmxvYWRlci5sb2FkUmVzKHVybCwgY2MuQXVkaW9DbGlwKWAgaW5zdGVhZCBwbGVhc2UuXHJcbiAgICAgKi9cclxuICAgIHByZWxvYWQ6IGZ1bmN0aW9uIChmaWxlUGF0aCwgY2FsbGJhY2spIHtcclxuICAgICAgICBpZiAoQ0NfREVCVUcpIHtcclxuICAgICAgICAgICAgY2Mud2FybignYGNjLmF1ZGlvRW5naW5lLnByZWxvYWRgIGlzIGRlcHJlY2F0ZWQsIHVzZSBgY2MubG9hZGVyLmxvYWRSZXModXJsLCBjYy5BdWRpb0NsaXApYCBpbnN0ZWFkIHBsZWFzZS4nKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjLmxvYWRlci5sb2FkKGZpbGVQYXRoLCBjYWxsYmFjayAmJiBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgaWYgKCFlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2soKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0IGEgc2l6ZSwgdGhlIHVuaXQgaXMgS0IuIE92ZXIgdGhpcyBzaXplIGlzIGRpcmVjdGx5IHJlc29sdmVkIGludG8gRE9NIG5vZGVzLlxyXG4gICAgICogISN6aCDorr7nva7kuIDkuKrku6UgS0Ig5Li65Y2V5L2N55qE5bC65a+477yM5aSn5LqO6L+Z5Liq5bC65a+455qE6Z+z6aKR5Zyo5Yqg6L2955qE5pe25YCZ5Lya5by65Yi25L2/55SoIGRvbSDmlrnlvI/liqDovb1cclxuICAgICAqIEBtZXRob2Qgc2V0TWF4V2ViQXVkaW9TaXplXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga2IgLSBUaGUgZmlsZSBwYXRoIG9mIGFuIGF1ZGlvLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldE1heFdlYkF1ZGlvU2l6ZSgzMDApO1xyXG4gICAgICovXHJcbiAgICAvLyBCZWNhdXNlIHdlYkF1ZGlvIHRha2VzIHVwIHRvbyBtdWNoIG1lbW9yee+8jFNvIGFsbG93IHVzZXJzIHRvIG1hbnVhbGx5IGNob29zZVxyXG4gICAgc2V0TWF4V2ViQXVkaW9TaXplOiBmdW5jdGlvbiAoa2IpIHtcclxuICAgICAgICB0aGlzLl9tYXhXZWJBdWRpb1NpemUgPSBrYiAqIDEwMjQ7XHJcbiAgICB9LFxyXG5cclxuICAgIF9icmVha0NhY2hlOiBudWxsLFxyXG4gICAgX2JyZWFrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fYnJlYWtDYWNoZSA9IFtdO1xyXG4gICAgICAgIGZvciAodmFyIGlkIGluIF9pZDJhdWRpbykge1xyXG4gICAgICAgICAgICB2YXIgYXVkaW8gPSBfaWQyYXVkaW9baWRdO1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBhdWRpby5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IEF1ZGlvLlN0YXRlLlBMQVlJTkcpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2JyZWFrQ2FjaGUucHVzaChpZCk7XHJcbiAgICAgICAgICAgICAgICBhdWRpby5wYXVzZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBfcmVzdG9yZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5fYnJlYWtDYWNoZSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB3aGlsZSAodGhpcy5fYnJlYWtDYWNoZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHRoaXMuX2JyZWFrQ2FjaGUucG9wKCk7XHJcbiAgICAgICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGlkKTtcclxuICAgICAgICAgICAgaWYgKGF1ZGlvICYmIGF1ZGlvLnJlc3VtZSlcclxuICAgICAgICAgICAgICAgIGF1ZGlvLnJlc3VtZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9icmVha0NhY2hlID0gbnVsbDtcclxuICAgIH0sXHJcblxyXG4gICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gQ2xhc3NpZmljYXRpb24gb2YgaW50ZXJmYWNlXHJcblxyXG4gICAgX211c2ljOiB7XHJcbiAgICAgICAgaWQ6IC0xLFxyXG4gICAgICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgICAgIHZvbHVtZTogMSxcclxuICAgIH0sXHJcblxyXG4gICAgX2VmZmVjdDoge1xyXG4gICAgICAgIHZvbHVtZTogMSxcclxuICAgICAgICBwYXVzZUNhY2hlOiBbXSxcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFBsYXkgYmFja2dyb3VuZCBtdXNpY1xyXG4gICAgICogISN6aCDmkq3mlL7og4zmma/pn7PkuZBcclxuICAgICAqIEBtZXRob2QgcGxheU11c2ljXHJcbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ2xpcH0gY2xpcCAtIFRoZSBhdWRpbyBjbGlwIHRvIHBsYXkuXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvb3AgLSBXaGV0aGVyIHRoZSBtdXNpYyBsb29wIG9yIG5vdC5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYXVkaW9JZFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmxvYWRlci5sb2FkUmVzKHVybCwgY2MuQXVkaW9DbGlwLCBmdW5jdGlvbiAoZXJyLCBjbGlwKSB7XHJcbiAgICAgKiAgICAgdmFyIGF1ZGlvSUQgPSBjYy5hdWRpb0VuZ2luZS5wbGF5TXVzaWMoY2xpcCwgZmFsc2UpO1xyXG4gICAgICogfSk7XHJcbiAgICAgKi9cclxuICAgIHBsYXlNdXNpYzogZnVuY3Rpb24gKGNsaXAsIGxvb3ApIHtcclxuICAgICAgICB2YXIgbXVzaWMgPSB0aGlzLl9tdXNpYztcclxuICAgICAgICB0aGlzLnN0b3AobXVzaWMuaWQpO1xyXG4gICAgICAgIG11c2ljLmlkID0gdGhpcy5wbGF5KGNsaXAsIGxvb3AsIG11c2ljLnZvbHVtZSk7XHJcbiAgICAgICAgbXVzaWMubG9vcCA9IGxvb3A7XHJcbiAgICAgICAgcmV0dXJuIG11c2ljLmlkO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU3RvcCBiYWNrZ3JvdW5kIG11c2ljLlxyXG4gICAgICogISN6aCDlgZzmraLmkq3mlL7og4zmma/pn7PkuZDjgIJcclxuICAgICAqIEBtZXRob2Qgc3RvcE11c2ljXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc3RvcE11c2ljKCk7XHJcbiAgICAgKi9cclxuICAgIHN0b3BNdXNpYzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuc3RvcCh0aGlzLl9tdXNpYy5pZCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBQYXVzZSB0aGUgYmFja2dyb3VuZCBtdXNpYy5cclxuICAgICAqICEjemgg5pqC5YGc5pKt5pS+6IOM5pmv6Z+z5LmQ44CCXHJcbiAgICAgKiBAbWV0aG9kIHBhdXNlTXVzaWNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5wYXVzZU11c2ljKCk7XHJcbiAgICAgKi9cclxuICAgIHBhdXNlTXVzaWM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLnBhdXNlKHRoaXMuX211c2ljLmlkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbXVzaWMuaWQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZXN1bWUgcGxheWluZyBiYWNrZ3JvdW5kIG11c2ljLlxyXG4gICAgICogISN6aCDmgaLlpI3mkq3mlL7og4zmma/pn7PkuZDjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lTXVzaWNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5yZXN1bWVNdXNpYygpO1xyXG4gICAgICovXHJcbiAgICByZXN1bWVNdXNpYzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMucmVzdW1lKHRoaXMuX211c2ljLmlkKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbXVzaWMuaWQ7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgdGhlIHZvbHVtZSgwLjAgfiAxLjApLlxyXG4gICAgICogISN6aCDojrflj5bpn7Pph4/vvIgwLjAgfiAxLjDvvInjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0TXVzaWNWb2x1bWVcclxuICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgdm9sdW1lID0gY2MuYXVkaW9FbmdpbmUuZ2V0TXVzaWNWb2x1bWUoKTtcclxuICAgICAqL1xyXG4gICAgZ2V0TXVzaWNWb2x1bWU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fbXVzaWMudm9sdW1lO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0IHRoZSBiYWNrZ3JvdW5kIG11c2ljIHZvbHVtZS5cclxuICAgICAqICEjemgg6K6+572u6IOM5pmv6Z+z5LmQ6Z+z6YeP77yIMC4wIH4gMS4w77yJ44CCXHJcbiAgICAgKiBAbWV0aG9kIHNldE11c2ljVm9sdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdm9sdW1lIC0gVm9sdW1lIG11c3QgYmUgaW4gMC4wfjEuMC5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5zZXRNdXNpY1ZvbHVtZSgwLjUpO1xyXG4gICAgICovXHJcbiAgICBzZXRNdXNpY1ZvbHVtZTogZnVuY3Rpb24gKHZvbHVtZSkge1xyXG4gICAgICAgIHZvbHVtZSA9IGhhbmRsZVZvbHVtZSh2b2x1bWUpO1xyXG4gICAgICAgIHZhciBtdXNpYyA9IHRoaXMuX211c2ljO1xyXG4gICAgICAgIG11c2ljLnZvbHVtZSA9IHZvbHVtZTtcclxuICAgICAgICB0aGlzLnNldFZvbHVtZShtdXNpYy5pZCwgbXVzaWMudm9sdW1lKTtcclxuICAgICAgICByZXR1cm4gbXVzaWMudm9sdW1lO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gQmFja2dyb3VuZCBtdXNpYyBwbGF5aW5nIHN0YXRlXHJcbiAgICAgKiAhI3poIOiDjOaZr+mfs+S5kOaYr+WQpuato+WcqOaSreaUvlxyXG4gICAgICogQG1ldGhvZCBpc011c2ljUGxheWluZ1xyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5pc011c2ljUGxheWluZygpO1xyXG4gICAgICovXHJcbiAgICBpc011c2ljUGxheWluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldFN0YXRlKHRoaXMuX211c2ljLmlkKSA9PT0gdGhpcy5BdWRpb1N0YXRlLlBMQVlJTkc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBQbGF5IGVmZmVjdCBhdWRpby5cclxuICAgICAqICEjemgg5pKt5pS+6Z+z5pWIXHJcbiAgICAgKiBAbWV0aG9kIHBsYXlFZmZlY3RcclxuICAgICAqIEBwYXJhbSB7QXVkaW9DbGlwfSBjbGlwIC0gVGhlIGF1ZGlvIGNsaXAgdG8gcGxheS5cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9vcCAtIFdoZXRoZXIgdGhlIG11c2ljIGxvb3Agb3Igbm90LlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhdWRpb0lkXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MubG9hZGVyLmxvYWRSZXModXJsLCBjYy5BdWRpb0NsaXAsIGZ1bmN0aW9uIChlcnIsIGNsaXApIHtcclxuICAgICAqICAgICB2YXIgYXVkaW9JRCA9IGNjLmF1ZGlvRW5naW5lLnBsYXlFZmZlY3QoY2xpcCwgZmFsc2UpO1xyXG4gICAgICogfSk7XHJcbiAgICAgKi9cclxuICAgIHBsYXlFZmZlY3Q6IGZ1bmN0aW9uIChjbGlwLCBsb29wKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucGxheShjbGlwLCBsb29wIHx8IGZhbHNlLCB0aGlzLl9lZmZlY3Qudm9sdW1lKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCB0aGUgdm9sdW1lIG9mIGVmZmVjdCBhdWRpby5cclxuICAgICAqICEjemgg6K6+572u6Z+z5pWI6Z+z6YeP77yIMC4wIH4gMS4w77yJ44CCXHJcbiAgICAgKiBAbWV0aG9kIHNldEVmZmVjdHNWb2x1bWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB2b2x1bWUgLSBWb2x1bWUgbXVzdCBiZSBpbiAwLjB+MS4wLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldEVmZmVjdHNWb2x1bWUoMC41KTtcclxuICAgICAqL1xyXG4gICAgc2V0RWZmZWN0c1ZvbHVtZTogZnVuY3Rpb24gKHZvbHVtZSkge1xyXG4gICAgICAgIHZvbHVtZSA9IGhhbmRsZVZvbHVtZSh2b2x1bWUpO1xyXG4gICAgICAgIHZhciBtdXNpY0lkID0gdGhpcy5fbXVzaWMuaWQ7XHJcbiAgICAgICAgdGhpcy5fZWZmZWN0LnZvbHVtZSA9IHZvbHVtZTtcclxuICAgICAgICBmb3IgKHZhciBpZCBpbiBfaWQyYXVkaW8pIHtcclxuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcclxuICAgICAgICAgICAgaWYgKCFhdWRpbyB8fCBhdWRpby5pZCA9PT0gbXVzaWNJZCkgY29udGludWU7XHJcbiAgICAgICAgICAgIGF1ZGlvRW5naW5lLnNldFZvbHVtZShpZCwgdm9sdW1lKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBUaGUgdm9sdW1lIG9mIHRoZSBlZmZlY3QgYXVkaW8gbWF4IHZhbHVlIGlzIDEuMCx0aGUgbWluIHZhbHVlIGlzIDAuMCAuXHJcbiAgICAgKiAhI3poIOiOt+WPlumfs+aViOmfs+mHj++8iDAuMCB+IDEuMO+8ieOAglxyXG4gICAgICogQG1ldGhvZCBnZXRFZmZlY3RzVm9sdW1lXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIHZvbHVtZSA9IGNjLmF1ZGlvRW5naW5lLmdldEVmZmVjdHNWb2x1bWUoKTtcclxuICAgICAqL1xyXG4gICAgZ2V0RWZmZWN0c1ZvbHVtZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9lZmZlY3Qudm9sdW1lO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gUGF1c2UgZWZmZWN0IGF1ZGlvLlxyXG4gICAgICogISN6aCDmmoLlgZzmkq3mlL7pn7PmlYjjgIJcclxuICAgICAqIEBtZXRob2QgcGF1c2VFZmZlY3RcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gYXVkaW8gaWQuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUucGF1c2VFZmZlY3QoYXVkaW9JRCk7XHJcbiAgICAgKi9cclxuICAgIHBhdXNlRWZmZWN0OiBmdW5jdGlvbiAoYXVkaW9JRCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnBhdXNlKGF1ZGlvSUQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU3RvcCBwbGF5aW5nIGFsbCB0aGUgc291bmQgZWZmZWN0cy5cclxuICAgICAqICEjemgg5pqC5YGc5pKt5pS+5omA5pyJ6Z+z5pWI44CCXHJcbiAgICAgKiBAbWV0aG9kIHBhdXNlQWxsRWZmZWN0c1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnBhdXNlQWxsRWZmZWN0cygpO1xyXG4gICAgICovXHJcbiAgICBwYXVzZUFsbEVmZmVjdHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgbXVzaWNJZCA9IHRoaXMuX211c2ljLmlkO1xyXG4gICAgICAgIHZhciBlZmZlY3QgPSB0aGlzLl9lZmZlY3Q7XHJcbiAgICAgICAgZWZmZWN0LnBhdXNlQ2FjaGUubGVuZ3RoID0gMDtcclxuXHJcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XHJcbiAgICAgICAgICAgIHZhciBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XHJcbiAgICAgICAgICAgIGlmICghYXVkaW8gfHwgYXVkaW8uaWQgPT09IG11c2ljSWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBhdWRpby5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IHRoaXMuQXVkaW9TdGF0ZS5QTEFZSU5HKSB7XHJcbiAgICAgICAgICAgICAgICBlZmZlY3QucGF1c2VDYWNoZS5wdXNoKGlkKTtcclxuICAgICAgICAgICAgICAgIGF1ZGlvLnBhdXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZXN1bWUgZWZmZWN0IGF1ZGlvLlxyXG4gICAgICogISN6aCDmgaLlpI3mkq3mlL7pn7PmlYjpn7PpopHjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lRWZmZWN0XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIFRoZSByZXR1cm4gdmFsdWUgb2YgZnVuY3Rpb24gcGxheS5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5yZXN1bWVFZmZlY3QoYXVkaW9JRCk7XHJcbiAgICAgKi9cclxuICAgIHJlc3VtZUVmZmVjdDogZnVuY3Rpb24gKGlkKSB7XHJcbiAgICAgICAgdGhpcy5yZXN1bWUoaWQpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gUmVzdW1lIGFsbCBlZmZlY3QgYXVkaW8uXHJcbiAgICAgKiAhI3poIOaBouWkjeaSreaUvuaJgOacieS5i+WJjeaaguWBnOeahOmfs+aViOOAglxyXG4gICAgICogQG1ldGhvZCByZXN1bWVBbGxFZmZlY3RzXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUucmVzdW1lQWxsRWZmZWN0cygpO1xyXG4gICAgICovXHJcbiAgICByZXN1bWVBbGxFZmZlY3RzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHBhdXNlSURDYWNoZSA9IHRoaXMuX2VmZmVjdC5wYXVzZUNhY2hlO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcGF1c2VJRENhY2hlLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHZhciBpZCA9IHBhdXNlSURDYWNoZVtpXTtcclxuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcclxuICAgICAgICAgICAgaWYgKGF1ZGlvKVxyXG4gICAgICAgICAgICAgICAgYXVkaW8ucmVzdW1lKCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU3RvcCBwbGF5aW5nIHRoZSBlZmZlY3QgYXVkaW8uXHJcbiAgICAgKiAhI3poIOWBnOatouaSreaUvumfs+aViOOAglxyXG4gICAgICogQG1ldGhvZCBzdG9wRWZmZWN0XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnN0b3BFZmZlY3QoaWQpO1xyXG4gICAgICovXHJcbiAgICBzdG9wRWZmZWN0OiBmdW5jdGlvbiAoYXVkaW9JRCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0b3AoYXVkaW9JRCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBTdG9wIHBsYXlpbmcgYWxsIHRoZSBlZmZlY3RzLlxyXG4gICAgICogISN6aCDlgZzmraLmkq3mlL7miYDmnInpn7PmlYjjgIJcclxuICAgICAqIEBtZXRob2Qgc3RvcEFsbEVmZmVjdHNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5zdG9wQWxsRWZmZWN0cygpO1xyXG4gICAgICovXHJcbiAgICBzdG9wQWxsRWZmZWN0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBtdXNpY0lkID0gdGhpcy5fbXVzaWMuaWQ7XHJcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XHJcbiAgICAgICAgICAgIHZhciBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XHJcbiAgICAgICAgICAgIGlmICghYXVkaW8gfHwgYXVkaW8uaWQgPT09IG11c2ljSWQpIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBhdWRpby5nZXRTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IGF1ZGlvRW5naW5lLkF1ZGlvU3RhdGUuUExBWUlORykge1xyXG4gICAgICAgICAgICAgICAgYXVkaW8uc3RvcCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjYy5hdWRpb0VuZ2luZSA9IGF1ZGlvRW5naW5lOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAwOC0yMDEwIFJpY2FyZG8gUXVlc2FkYVxyXG4gQ29weXJpZ2h0IChjKSAyMDExLTIwMTIgY29jb3MyZC14Lm9yZ1xyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cDovL3d3dy5jb2NvczJkLXgub3JnXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxyXG4gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xyXG4gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxyXG4gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXHJcbiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxyXG5cclxuIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXHJcbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBBdWRpbyA9IHJlcXVpcmUoJy4vQ0NBdWRpbycpO1xudmFyIEF1ZGlvQ2xpcCA9IHJlcXVpcmUoJy4uL2NvcmUvYXNzZXRzL0NDQXVkaW9DbGlwJyk7XG52YXIganMgPSBjYy5qcztcblxudmFyIF9pbnN0YW5jZUlkID0gMDtcbnZhciBfaWQyYXVkaW8gPSBqcy5jcmVhdGVNYXAodHJ1ZSk7XG52YXIgX3VybDJpZCA9IHt9O1xudmFyIF9hdWRpb1Bvb2wgPSBbXTtcblxudmFyIHJlY3ljbGVBdWRpbyA9IGZ1bmN0aW9uIHJlY3ljbGVBdWRpbyhhdWRpbykge1xuICAgIGF1ZGlvLl9maW5pc2hDYWxsYmFjayA9IG51bGw7XG4gICAgaWYgKF9hdWRpb1Bvb2wubGVuZ3RoIDwgMzIpIHtcbiAgICAgICAgYXVkaW8ub2ZmKCdlbmRlZCcpO1xuICAgICAgICBhdWRpby5vZmYoJ3N0b3AnKTtcbiAgICAgICAgYXVkaW8uc3JjID0gbnVsbDtcbiAgICAgICAgLy8gSW4gY2FzZSByZXBlYXRseSByZWN5Y2xlIGF1ZGlvXG4gICAgICAgIGlmICghX2F1ZGlvUG9vbC5pbmNsdWRlcyhhdWRpbykpIHtcbiAgICAgICAgICAgIF9hdWRpb1Bvb2wucHVzaChhdWRpbyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBhdWRpby5kZXN0cm95KCk7XG4gICAgfVxufTtcblxudmFyIGdldEF1ZGlvRnJvbVBhdGggPSBmdW5jdGlvbiBnZXRBdWRpb0Zyb21QYXRoKHBhdGgpIHtcbiAgICB2YXIgaWQgPSBfaW5zdGFuY2VJZCsrO1xuICAgIHZhciBsaXN0ID0gX3VybDJpZFtwYXRoXTtcbiAgICBpZiAoIWxpc3QpIHtcbiAgICAgICAgbGlzdCA9IF91cmwyaWRbcGF0aF0gPSBbXTtcbiAgICB9XG4gICAgaWYgKGF1ZGlvRW5naW5lLl9tYXhBdWRpb0luc3RhbmNlIDw9IGxpc3QubGVuZ3RoKSB7XG4gICAgICAgIHZhciBvbGRJZCA9IGxpc3Quc2hpZnQoKTtcbiAgICAgICAgdmFyIG9sZEF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQob2xkSWQpO1xuICAgICAgICAvLyBTdG9wIHdpbGwgcmVjeWNsZSBhdWRpbyBhdXRvbWF0aWNhbGx5IGJ5IGV2ZW50IGNhbGxiYWNrXG4gICAgICAgIG9sZEF1ZGlvLnN0b3AoKTtcbiAgICB9XG5cbiAgICB2YXIgYXVkaW8gPSBfYXVkaW9Qb29sLnBvcCgpIHx8IG5ldyBBdWRpbygpO1xuICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuICAgICAgICB2YXIgYXVkaW9Jbkxpc3QgPSBnZXRBdWRpb0Zyb21JZCh0aGlzLmlkKTtcbiAgICAgICAgaWYgKGF1ZGlvSW5MaXN0KSB7XG4gICAgICAgICAgICBkZWxldGUgX2lkMmF1ZGlvW3RoaXMuaWRdO1xuICAgICAgICAgICAgdmFyIGluZGV4ID0gbGlzdC5pbmRleE9mKHRoaXMuaWQpO1xuICAgICAgICAgICAgY2MuanMuYXJyYXkuZmFzdFJlbW92ZUF0KGxpc3QsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByZWN5Y2xlQXVkaW8odGhpcyk7XG4gICAgfTtcblxuICAgIGF1ZGlvLm9uKCdlbmRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbmlzaENhbGxiYWNrKSB7XG4gICAgICAgICAgICB0aGlzLl9maW5pc2hDYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgICAgIGNhbGxiYWNrLmNhbGwodGhpcyk7XG4gICAgfSwgYXVkaW8pO1xuXG4gICAgYXVkaW8ub24oJ3N0b3AnLCBjYWxsYmFjaywgYXVkaW8pO1xuICAgIGF1ZGlvLmlkID0gaWQ7XG4gICAgX2lkMmF1ZGlvW2lkXSA9IGF1ZGlvO1xuICAgIGxpc3QucHVzaChpZCk7XG5cbiAgICByZXR1cm4gYXVkaW87XG59O1xuXG52YXIgZ2V0QXVkaW9Gcm9tSWQgPSBmdW5jdGlvbiBnZXRBdWRpb0Zyb21JZChpZCkge1xuICAgIHJldHVybiBfaWQyYXVkaW9baWRdO1xufTtcblxudmFyIGhhbmRsZVZvbHVtZSA9IGZ1bmN0aW9uIGhhbmRsZVZvbHVtZSh2b2x1bWUpIHtcbiAgICBpZiAodm9sdW1lID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gc2V0IGRlZmF1bHQgdm9sdW1lIGFzIDFcbiAgICAgICAgdm9sdW1lID0gMTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiB2b2x1bWUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZvbHVtZSA9IE51bWJlci5wYXJzZUZsb2F0KHZvbHVtZSk7XG4gICAgfVxuICAgIHJldHVybiB2b2x1bWU7XG59O1xuXG4vKipcclxuICogISNlbiBjYy5hdWRpb0VuZ2luZSBpcyB0aGUgc2luZ2xldG9uIG9iamVjdCwgaXQgcHJvdmlkZSBzaW1wbGUgYXVkaW8gQVBJcy5cclxuICogISN6aFxyXG4gKiBjYy5hdWRpb2VuZ2luZeaYr+WNleS+i+WvueixoeOAgjxici8+XHJcbiAqIOS4u+imgeeUqOadpeaSreaUvumfs+mike+8jOaSreaUvueahOaXtuWAmeS8mui/lOWbnuS4gOS4qiBhdWRpb0lE77yM5LmL5ZCO6YO95Y+v5Lul6YCa6L+H6L+Z5LiqIGF1ZGlvSUQg5p2l5pON5L2c6L+Z5Liq6Z+z6aKR5a+56LGh44CCPGJyLz5cclxuICog5LiN5L2/55So55qE5pe25YCZ77yM6K+35L2/55SoIGNjLmF1ZGlvRW5naW5lLnVuY2FjaGUoZmlsZVBhdGgpOyDov5vooYzotYTmupDph4rmlL4gPGJyLz5cclxuICog5rOo5oSP77yaPGJyLz5cclxuICog5ZyoIEFuZHJvaWQg57O757uf5rWP6KeI5Zmo5LiK77yM5LiN5ZCM5rWP6KeI5Zmo77yM5LiN5ZCM54mI5pys55qE5pWI5p6c5LiN5bC955u45ZCM44CCPGJyLz5cclxuICog5q+U5aaC6K+077ya5aSn5aSa5pWw5rWP6KeI5Zmo6YO96ZyA6KaB55So5oi354mp55CG5Lqk5LqS5omN5Y+v5Lul5byA5aeL5pKt5pS+6Z+z5pWI77yM5pyJ5LiA5Lqb5LiN5pSv5oyBIFdlYkF1ZGlv77yMPGJyLz5cclxuICog5pyJ5LiA5Lqb5LiN5pSv5oyB5aSa6Z+z6L2o5pKt5pS+44CC5oC75LmL5aaC5p6c5a+56Z+z5LmQ5L6d6LWW5q+U6L6D5by677yM6K+35YGa5bC95Y+v6IO95aSa55qE5rWL6K+V44CCXHJcbiAqIEBjbGFzcyBhdWRpb0VuZ2luZVxyXG4gKiBAc3RhdGljXHJcbiAqL1xudmFyIGF1ZGlvRW5naW5lID0ge1xuXG4gICAgQXVkaW9TdGF0ZTogQXVkaW8uU3RhdGUsXG5cbiAgICBfbWF4V2ViQXVkaW9TaXplOiAyMDk3MTUyLCAvLyAyMDQ4a2IgKiAxMDI0XG4gICAgX21heEF1ZGlvSW5zdGFuY2U6IDI0LFxuXG4gICAgX2lkMmF1ZGlvOiBfaWQyYXVkaW8sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gUGxheSBhdWRpby5cclxuICAgICAqICEjemgg5pKt5pS+6Z+z6aKRXHJcbiAgICAgKiBAbWV0aG9kIHBsYXlcclxuICAgICAqIEBwYXJhbSB7QXVkaW9DbGlwfSBjbGlwIC0gVGhlIGF1ZGlvIGNsaXAgdG8gcGxheS5cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9vcCAtIFdoZXRoZXIgdGhlIG11c2ljIGxvb3Agb3Igbm90LlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZvbHVtZSAtIFZvbHVtZSBzaXplLlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhdWRpb0lkXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MubG9hZGVyLmxvYWRSZXModXJsLCBjYy5BdWRpb0NsaXAsIGZ1bmN0aW9uIChlcnIsIGNsaXApIHtcclxuICAgICAqICAgICB2YXIgYXVkaW9JRCA9IGNjLmF1ZGlvRW5naW5lLnBsYXkoY2xpcCwgZmFsc2UsIDAuNSk7XHJcbiAgICAgKiB9KTtcclxuICAgICAqL1xuICAgIHBsYXk6IGZ1bmN0aW9uIHBsYXkoY2xpcCwgbG9vcCwgdm9sdW1lIC8qLCBwcm9maWxlKi8pIHtcbiAgICAgICAgdmFyIHBhdGggPSBjbGlwO1xuICAgICAgICB2YXIgYXVkaW87XG4gICAgICAgIGlmICh0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgc2luY2UgMS4xMFxuICAgICAgICAgICAgY2Mud2FybklEKDg0MDEsICdjYy5hdWRpb0VuZ2luZScsICdjYy5BdWRpb0NsaXAnLCAnQXVkaW9DbGlwJywgJ2NjLkF1ZGlvQ2xpcCcsICdhdWRpbycpO1xuICAgICAgICAgICAgcGF0aCA9IGNsaXA7XG4gICAgICAgICAgICAvLyBsb2FkIGNsaXBcbiAgICAgICAgICAgIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tUGF0aChwYXRoKTtcbiAgICAgICAgICAgIEF1ZGlvQ2xpcC5fbG9hZEJ5VXJsKHBhdGgsIGZ1bmN0aW9uIChlcnIsIGNsaXApIHtcbiAgICAgICAgICAgICAgICBpZiAoY2xpcCkge1xuICAgICAgICAgICAgICAgICAgICBhdWRpby5zcmMgPSBjbGlwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFjbGlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcGF0aCA9IGNsaXAubmF0aXZlVXJsO1xuICAgICAgICAgICAgYXVkaW8gPSBnZXRBdWRpb0Zyb21QYXRoKHBhdGgpO1xuICAgICAgICAgICAgYXVkaW8uc3JjID0gY2xpcDtcbiAgICAgICAgfVxuXG4gICAgICAgIGF1ZGlvLnNldExvb3AobG9vcCB8fCBmYWxzZSk7XG4gICAgICAgIHZvbHVtZSA9IGhhbmRsZVZvbHVtZSh2b2x1bWUpO1xuICAgICAgICBhdWRpby5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgYXVkaW8ucGxheSgpO1xuXG4gICAgICAgIHJldHVybiBhdWRpby5pZDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCBhdWRpbyBsb29wLlxyXG4gICAgICogISN6aCDorr7nva7pn7PpopHmmK/lkKblvqrnjq/jgIJcclxuICAgICAqIEBtZXRob2Qgc2V0TG9vcFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gbG9vcCAtIFdoZXRoZXIgY3ljbGUuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc2V0TG9vcChpZCwgdHJ1ZSk7XHJcbiAgICAgKi9cbiAgICBzZXRMb29wOiBmdW5jdGlvbiBzZXRMb29wKGF1ZGlvSUQsIGxvb3ApIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIGlmICghYXVkaW8gfHwgIWF1ZGlvLnNldExvb3ApIHJldHVybjtcbiAgICAgICAgYXVkaW8uc2V0TG9vcChsb29wKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIEdldCBhdWRpbyBjeWNsZSBzdGF0ZS5cclxuICAgICAqICEjemgg6I635Y+W6Z+z6aKR55qE5b6q546v54q25oCB44CCXHJcbiAgICAgKiBAbWV0aG9kIGlzTG9vcFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59IFdoZXRoZXIgY3ljbGUuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuaXNMb29wKGlkKTtcclxuICAgICAqL1xuICAgIGlzTG9vcDogZnVuY3Rpb24gaXNMb29wKGF1ZGlvSUQpIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIGlmICghYXVkaW8gfHwgIWF1ZGlvLmdldExvb3ApIHJldHVybiBmYWxzZTtcbiAgICAgICAgcmV0dXJuIGF1ZGlvLmdldExvb3AoKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCB0aGUgdm9sdW1lIG9mIGF1ZGlvLlxyXG4gICAgICogISN6aCDorr7nva7pn7Pph4/vvIgwLjAgfiAxLjDvvInjgIJcclxuICAgICAqIEBtZXRob2Qgc2V0Vm9sdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZvbHVtZSAtIFZvbHVtZSBtdXN0IGJlIGluIDAuMH4xLjAgLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldFZvbHVtZShpZCwgMC41KTtcclxuICAgICAqL1xuICAgIHNldFZvbHVtZTogZnVuY3Rpb24gc2V0Vm9sdW1lKGF1ZGlvSUQsIHZvbHVtZSkge1xuICAgICAgICB2YXIgYXVkaW8gPSBnZXRBdWRpb0Zyb21JZChhdWRpb0lEKTtcbiAgICAgICAgaWYgKGF1ZGlvKSB7XG4gICAgICAgICAgICBhdWRpby5zZXRWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gVGhlIHZvbHVtZSBvZiB0aGUgbXVzaWMgbWF4IHZhbHVlIGlzIDEuMCx0aGUgbWluIHZhbHVlIGlzIDAuMCAuXHJcbiAgICAgKiAhI3poIOiOt+WPlumfs+mHj++8iDAuMCB+IDEuMO+8ieOAglxyXG4gICAgICogQG1ldGhvZCBnZXRWb2x1bWVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gYXVkaW8gaWQuXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIHZvbHVtZSA9IGNjLmF1ZGlvRW5naW5lLmdldFZvbHVtZShpZCk7XHJcbiAgICAgKi9cbiAgICBnZXRWb2x1bWU6IGZ1bmN0aW9uIGdldFZvbHVtZShhdWRpb0lEKSB7XG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xuICAgICAgICByZXR1cm4gYXVkaW8gPyBhdWRpby5nZXRWb2x1bWUoKSA6IDE7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBTZXQgY3VycmVudCB0aW1lXHJcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOmfs+mikeaXtumXtOOAglxyXG4gICAgICogQG1ldGhvZCBzZXRDdXJyZW50VGltZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzZWMgLSBjdXJyZW50IHRpbWUuXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldEN1cnJlbnRUaW1lKGlkLCAyKTtcclxuICAgICAqL1xuICAgIHNldEN1cnJlbnRUaW1lOiBmdW5jdGlvbiBzZXRDdXJyZW50VGltZShhdWRpb0lELCBzZWMpIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIGlmIChhdWRpbykge1xuICAgICAgICAgICAgYXVkaW8uc2V0Q3VycmVudFRpbWUoc2VjKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgY3VycmVudCB0aW1lXHJcbiAgICAgKiAhI3poIOiOt+WPluW9k+WJjeeahOmfs+mikeaSreaUvuaXtumXtOOAglxyXG4gICAgICogQG1ldGhvZCBnZXRDdXJyZW50VGltZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYXVkaW8gY3VycmVudCB0aW1lLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciB0aW1lID0gY2MuYXVkaW9FbmdpbmUuZ2V0Q3VycmVudFRpbWUoaWQpO1xyXG4gICAgICovXG4gICAgZ2V0Q3VycmVudFRpbWU6IGZ1bmN0aW9uIGdldEN1cnJlbnRUaW1lKGF1ZGlvSUQpIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIHJldHVybiBhdWRpbyA/IGF1ZGlvLmdldEN1cnJlbnRUaW1lKCkgOiAwO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IGF1ZGlvIGR1cmF0aW9uXHJcbiAgICAgKiAhI3poIOiOt+WPlumfs+mikeaAu+aXtumVv+OAglxyXG4gICAgICogQG1ldGhvZCBnZXREdXJhdGlvblxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYXVkaW8gZHVyYXRpb24uXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIHRpbWUgPSBjYy5hdWRpb0VuZ2luZS5nZXREdXJhdGlvbihpZCk7XHJcbiAgICAgKi9cbiAgICBnZXREdXJhdGlvbjogZnVuY3Rpb24gZ2V0RHVyYXRpb24oYXVkaW9JRCkge1xuICAgICAgICB2YXIgYXVkaW8gPSBnZXRBdWRpb0Zyb21JZChhdWRpb0lEKTtcbiAgICAgICAgcmV0dXJuIGF1ZGlvID8gYXVkaW8uZ2V0RHVyYXRpb24oKSA6IDA7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgYXVkaW8gc3RhdGVcclxuICAgICAqICEjemgg6I635Y+W6Z+z6aKR54q25oCB44CCXHJcbiAgICAgKiBAbWV0aG9kIGdldFN0YXRlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIGF1ZGlvIGlkLlxyXG4gICAgICogQHJldHVybiB7YXVkaW9FbmdpbmUuQXVkaW9TdGF0ZX0gYXVkaW8gZHVyYXRpb24uXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIHN0YXRlID0gY2MuYXVkaW9FbmdpbmUuZ2V0U3RhdGUoaWQpO1xyXG4gICAgICovXG4gICAgZ2V0U3RhdGU6IGZ1bmN0aW9uIGdldFN0YXRlKGF1ZGlvSUQpIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIHJldHVybiBhdWRpbyA/IGF1ZGlvLmdldFN0YXRlKCkgOiB0aGlzLkF1ZGlvU3RhdGUuRVJST1I7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBTZXQgQXVkaW8gZmluaXNoIGNhbGxiYWNrXHJcbiAgICAgKiAhI3poIOiuvue9ruS4gOS4qumfs+mikee7k+adn+WQjueahOWbnuiwg1xyXG4gICAgICogQG1ldGhvZCBzZXRGaW5pc2hDYWxsYmFja1xyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIC0gbG9hZGVkIGNhbGxiYWNrLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldEZpbmlzaENhbGxiYWNrKGlkLCBmdW5jdGlvbiAoKSB7fSk7XHJcbiAgICAgKi9cbiAgICBzZXRGaW5pc2hDYWxsYmFjazogZnVuY3Rpb24gc2V0RmluaXNoQ2FsbGJhY2soYXVkaW9JRCwgY2FsbGJhY2spIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIGlmICghYXVkaW8pIHJldHVybjtcbiAgICAgICAgYXVkaW8uX2ZpbmlzaENhbGxiYWNrID0gY2FsbGJhY2s7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBQYXVzZSBwbGF5aW5nIGF1ZGlvLlxyXG4gICAgICogISN6aCDmmoLlgZzmraPlnKjmkq3mlL7pn7PpopHjgIJcclxuICAgICAqIEBtZXRob2QgcGF1c2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gVGhlIHJldHVybiB2YWx1ZSBvZiBmdW5jdGlvbiBwbGF5LlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnBhdXNlKGF1ZGlvSUQpO1xyXG4gICAgICovXG4gICAgcGF1c2U6IGZ1bmN0aW9uIHBhdXNlKGF1ZGlvSUQpIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIGlmIChhdWRpbykge1xuICAgICAgICAgICAgYXVkaW8ucGF1c2UoKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9wYXVzZUlEQ2FjaGU6IFtdLFxuICAgIC8qKlxyXG4gICAgICogISNlbiBQYXVzZSBhbGwgcGxheWluZyBhdWRpb1xyXG4gICAgICogISN6aCDmmoLlgZznjrDlnKjmraPlnKjmkq3mlL7nmoTmiYDmnInpn7PpopHjgIJcclxuICAgICAqIEBtZXRob2QgcGF1c2VBbGxcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5wYXVzZUFsbCgpO1xyXG4gICAgICovXG4gICAgcGF1c2VBbGw6IGZ1bmN0aW9uIHBhdXNlQWxsKCkge1xuICAgICAgICBmb3IgKHZhciBpZCBpbiBfaWQyYXVkaW8pIHtcbiAgICAgICAgICAgIHZhciBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBhdWRpby5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSBBdWRpby5TdGF0ZS5QTEFZSU5HKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGF1c2VJRENhY2hlLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIGF1ZGlvLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFJlc3VtZSBwbGF5aW5nIGF1ZGlvLlxyXG4gICAgICogISN6aCDmgaLlpI3mkq3mlL7mjIflrprnmoTpn7PpopHjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYXVkaW9JRCAtIFRoZSByZXR1cm4gdmFsdWUgb2YgZnVuY3Rpb24gcGxheS5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5yZXN1bWUoYXVkaW9JRCk7XHJcbiAgICAgKi9cbiAgICByZXN1bWU6IGZ1bmN0aW9uIHJlc3VtZShhdWRpb0lEKSB7XG4gICAgICAgIHZhciBhdWRpbyA9IGdldEF1ZGlvRnJvbUlkKGF1ZGlvSUQpO1xuICAgICAgICBpZiAoYXVkaW8pIHtcbiAgICAgICAgICAgIGF1ZGlvLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZXN1bWUgYWxsIHBsYXlpbmcgYXVkaW8uXHJcbiAgICAgKiAhI3poIOaBouWkjeaSreaUvuaJgOacieS5i+WJjeaaguWBnOeahOaJgOaciemfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCByZXN1bWVBbGxcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5yZXN1bWVBbGwoKTtcclxuICAgICAqL1xuICAgIHJlc3VtZUFsbDogZnVuY3Rpb24gcmVzdW1lQWxsKCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX3BhdXNlSURDYWNoZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgdmFyIGlkID0gdGhpcy5fcGF1c2VJRENhY2hlW2ldO1xuICAgICAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoaWQpO1xuICAgICAgICAgICAgaWYgKGF1ZGlvKSBhdWRpby5yZXN1bWUoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wYXVzZUlEQ2FjaGUubGVuZ3RoID0gMDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFN0b3AgcGxheWluZyBhdWRpby5cclxuICAgICAqICEjemgg5YGc5q2i5pKt5pS+5oyH5a6a6Z+z6aKR44CCXHJcbiAgICAgKiBAbWV0aG9kIHN0b3BcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gVGhlIHJldHVybiB2YWx1ZSBvZiBmdW5jdGlvbiBwbGF5LlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnN0b3AoYXVkaW9JRCk7XHJcbiAgICAgKi9cbiAgICBzdG9wOiBmdW5jdGlvbiBzdG9wKGF1ZGlvSUQpIHtcbiAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoYXVkaW9JRCk7XG4gICAgICAgIGlmIChhdWRpbykge1xuICAgICAgICAgICAgLy8gU3RvcCB3aWxsIHJlY3ljbGUgYXVkaW8gYXV0b21hdGljYWxseSBieSBldmVudCBjYWxsYmFja1xuICAgICAgICAgICAgYXVkaW8uc3RvcCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFN0b3AgYWxsIHBsYXlpbmcgYXVkaW8uXHJcbiAgICAgKiAhI3poIOWBnOatouato+WcqOaSreaUvueahOaJgOaciemfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCBzdG9wQWxsXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc3RvcEFsbCgpO1xyXG4gICAgICovXG4gICAgc3RvcEFsbDogZnVuY3Rpb24gc3RvcEFsbCgpIHtcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgYXVkaW8gPSBfaWQyYXVkaW9baWRdO1xuICAgICAgICAgICAgaWYgKGF1ZGlvKSB7XG4gICAgICAgICAgICAgICAgLy8gU3RvcCB3aWxsIHJlY3ljbGUgYXVkaW8gYXV0b21hdGljYWxseSBieSBldmVudCBjYWxsYmFja1xuICAgICAgICAgICAgICAgIGF1ZGlvLnN0b3AoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0IHVwIGFuIGF1ZGlvIGNhbiBnZW5lcmF0ZSBhIGZldyBleGFtcGxlcy5cclxuICAgICAqICEjemgg6K6+572u5LiA5Liq6Z+z6aKR5Y+v5Lul6K6+572u5Yeg5Liq5a6e5L6LXHJcbiAgICAgKiBAbWV0aG9kIHNldE1heEF1ZGlvSW5zdGFuY2VcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBudW0gLSBhIG51bWJlciBvZiBpbnN0YW5jZXMgdG8gYmUgY3JlYXRlZCBmcm9tIHdpdGhpbiBhbiBhdWRpb1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldE1heEF1ZGlvSW5zdGFuY2UoMjApO1xyXG4gICAgICovXG4gICAgc2V0TWF4QXVkaW9JbnN0YW5jZTogZnVuY3Rpb24gc2V0TWF4QXVkaW9JbnN0YW5jZShudW0pIHtcbiAgICAgICAgdGhpcy5fbWF4QXVkaW9JbnN0YW5jZSA9IG51bTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIEdldHRpbmcgYXVkaW8gY2FuIHByb2R1Y2Ugc2V2ZXJhbCBleGFtcGxlcy5cclxuICAgICAqICEjemgg6I635Y+W5LiA5Liq6Z+z6aKR5Y+v5Lul6K6+572u5Yeg5Liq5a6e5L6LXHJcbiAgICAgKiBAbWV0aG9kIGdldE1heEF1ZGlvSW5zdGFuY2VcclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYSAtIG51bWJlciBvZiBpbnN0YW5jZXMgdG8gYmUgY3JlYXRlZCBmcm9tIHdpdGhpbiBhbiBhdWRpb1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLmdldE1heEF1ZGlvSW5zdGFuY2UoKTtcclxuICAgICAqL1xuICAgIGdldE1heEF1ZGlvSW5zdGFuY2U6IGZ1bmN0aW9uIGdldE1heEF1ZGlvSW5zdGFuY2UoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXhBdWRpb0luc3RhbmNlO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gVW5sb2FkIHRoZSBwcmVsb2FkZWQgYXVkaW8gZnJvbSBpbnRlcm5hbCBidWZmZXIuXHJcbiAgICAgKiAhI3poIOWNuOi9vemihOWKoOi9veeahOmfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCB1bmNhY2hlXHJcbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ2xpcH0gY2xpcFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnVuY2FjaGUoZmlsZVBhdGgpO1xyXG4gICAgICovXG4gICAgdW5jYWNoZTogZnVuY3Rpb24gdW5jYWNoZShjbGlwKSB7XG4gICAgICAgIHZhciBmaWxlUGF0aCA9IGNsaXA7XG4gICAgICAgIGlmICh0eXBlb2YgY2xpcCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIC8vIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgc2luY2UgMS4xMFxuICAgICAgICAgICAgY2Mud2FybklEKDg0MDEsICdjYy5hdWRpb0VuZ2luZScsICdjYy5BdWRpb0NsaXAnLCAnQXVkaW9DbGlwJywgJ2NjLkF1ZGlvQ2xpcCcsICdhdWRpbycpO1xuICAgICAgICAgICAgZmlsZVBhdGggPSBjbGlwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKCFjbGlwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlsZVBhdGggPSBjbGlwLm5hdGl2ZVVybDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsaXN0ID0gX3VybDJpZFtmaWxlUGF0aF07XG4gICAgICAgIGlmICghbGlzdCkgcmV0dXJuO1xuICAgICAgICB3aGlsZSAobGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSBsaXN0LnBvcCgpO1xuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcbiAgICAgICAgICAgIGlmIChhdWRpbykge1xuICAgICAgICAgICAgICAgIC8vIFN0b3Agd2lsbCByZWN5Y2xlIGF1ZGlvIGF1dG9tYXRpY2FsbHkgYnkgZXZlbnQgY2FsbGJhY2tcbiAgICAgICAgICAgICAgICBhdWRpby5zdG9wKCk7XG4gICAgICAgICAgICAgICAgZGVsZXRlIF9pZDJhdWRpb1tpZF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFVubG9hZCBhbGwgYXVkaW8gZnJvbSBpbnRlcm5hbCBidWZmZXIuXHJcbiAgICAgKiAhI3poIOWNuOi9veaJgOaciemfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCB1bmNhY2hlQWxsXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUudW5jYWNoZUFsbCgpO1xyXG4gICAgICovXG4gICAgdW5jYWNoZUFsbDogZnVuY3Rpb24gdW5jYWNoZUFsbCgpIHtcbiAgICAgICAgdGhpcy5zdG9wQWxsKCk7XG4gICAgICAgIHZhciBhdWRpbyA9IHZvaWQgMDtcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XG4gICAgICAgICAgICBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XG4gICAgICAgICAgICBpZiAoYXVkaW8pIHtcbiAgICAgICAgICAgICAgICBhdWRpby5kZXN0cm95KCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKGF1ZGlvID0gX2F1ZGlvUG9vbC5wb3AoKSkge1xuICAgICAgICAgICAgYXVkaW8uZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIF9pZDJhdWRpbyA9IGpzLmNyZWF0ZU1hcCh0cnVlKTtcbiAgICAgICAgX3VybDJpZCA9IHt9O1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0cyBhbiBhdWRpbyBwcm9maWxlIGJ5IG5hbWUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHByb2ZpbGVOYW1lIEEgbmFtZSBvZiBhdWRpbyBwcm9maWxlLlxyXG4gICAgICogQHJldHVybiBUaGUgYXVkaW8gcHJvZmlsZS5cclxuICAgICAqL1xuICAgIGdldFByb2ZpbGU6IGZ1bmN0aW9uIGdldFByb2ZpbGUocHJvZmlsZU5hbWUpIHt9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFByZWxvYWQgYXVkaW8gZmlsZS5cclxuICAgICAqICEjemgg6aKE5Yqg6L295LiA5Liq6Z+z6aKRXHJcbiAgICAgKiBAbWV0aG9kIHByZWxvYWRcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmaWxlUGF0aCAtIFRoZSBmaWxlIHBhdGggb2YgYW4gYXVkaW8uXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY2FsbGJhY2tdIC0gVGhlIGNhbGxiYWNrIG9mIGFuIGF1ZGlvLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnByZWxvYWQocGF0aCk7XHJcbiAgICAgKiBAZGVwcmVjYXRlZCBgY2MuYXVkaW9FbmdpbmUucHJlbG9hZGAgaXMgZGVwcmVjYXRlZCwgdXNlIGBjYy5sb2FkZXIubG9hZFJlcyh1cmwsIGNjLkF1ZGlvQ2xpcClgIGluc3RlYWQgcGxlYXNlLlxyXG4gICAgICovXG4gICAgcHJlbG9hZDogZnVuY3Rpb24gcHJlbG9hZChmaWxlUGF0aCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKENDX0RFQlVHKSB7XG4gICAgICAgICAgICBjYy53YXJuKCdgY2MuYXVkaW9FbmdpbmUucHJlbG9hZGAgaXMgZGVwcmVjYXRlZCwgdXNlIGBjYy5sb2FkZXIubG9hZFJlcyh1cmwsIGNjLkF1ZGlvQ2xpcClgIGluc3RlYWQgcGxlYXNlLicpO1xuICAgICAgICB9XG5cbiAgICAgICAgY2MubG9hZGVyLmxvYWQoZmlsZVBhdGgsIGNhbGxiYWNrICYmIGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0IGEgc2l6ZSwgdGhlIHVuaXQgaXMgS0IuIE92ZXIgdGhpcyBzaXplIGlzIGRpcmVjdGx5IHJlc29sdmVkIGludG8gRE9NIG5vZGVzLlxyXG4gICAgICogISN6aCDorr7nva7kuIDkuKrku6UgS0Ig5Li65Y2V5L2N55qE5bC65a+477yM5aSn5LqO6L+Z5Liq5bC65a+455qE6Z+z6aKR5Zyo5Yqg6L2955qE5pe25YCZ5Lya5by65Yi25L2/55SoIGRvbSDmlrnlvI/liqDovb1cclxuICAgICAqIEBtZXRob2Qgc2V0TWF4V2ViQXVkaW9TaXplXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0ga2IgLSBUaGUgZmlsZSBwYXRoIG9mIGFuIGF1ZGlvLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnNldE1heFdlYkF1ZGlvU2l6ZSgzMDApO1xyXG4gICAgICovXG4gICAgLy8gQmVjYXVzZSB3ZWJBdWRpbyB0YWtlcyB1cCB0b28gbXVjaCBtZW1vcnnvvIxTbyBhbGxvdyB1c2VycyB0byBtYW51YWxseSBjaG9vc2VcbiAgICBzZXRNYXhXZWJBdWRpb1NpemU6IGZ1bmN0aW9uIHNldE1heFdlYkF1ZGlvU2l6ZShrYikge1xuICAgICAgICB0aGlzLl9tYXhXZWJBdWRpb1NpemUgPSBrYiAqIDEwMjQ7XG4gICAgfSxcblxuICAgIF9icmVha0NhY2hlOiBudWxsLFxuICAgIF9icmVhazogZnVuY3Rpb24gX2JyZWFrKCkge1xuICAgICAgICB0aGlzLl9icmVha0NhY2hlID0gW107XG4gICAgICAgIGZvciAodmFyIGlkIGluIF9pZDJhdWRpbykge1xuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcbiAgICAgICAgICAgIHZhciBzdGF0ZSA9IGF1ZGlvLmdldFN0YXRlKCk7XG4gICAgICAgICAgICBpZiAoc3RhdGUgPT09IEF1ZGlvLlN0YXRlLlBMQVlJTkcpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9icmVha0NhY2hlLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIGF1ZGlvLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgX3Jlc3RvcmU6IGZ1bmN0aW9uIF9yZXN0b3JlKCkge1xuICAgICAgICBpZiAoIXRoaXMuX2JyZWFrQ2FjaGUpIHJldHVybjtcblxuICAgICAgICB3aGlsZSAodGhpcy5fYnJlYWtDYWNoZS5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICB2YXIgaWQgPSB0aGlzLl9icmVha0NhY2hlLnBvcCgpO1xuICAgICAgICAgICAgdmFyIGF1ZGlvID0gZ2V0QXVkaW9Gcm9tSWQoaWQpO1xuICAgICAgICAgICAgaWYgKGF1ZGlvICYmIGF1ZGlvLnJlc3VtZSkgYXVkaW8ucmVzdW1lKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fYnJlYWtDYWNoZSA9IG51bGw7XG4gICAgfSxcblxuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgICAvLyBDbGFzc2lmaWNhdGlvbiBvZiBpbnRlcmZhY2VcblxuICAgIF9tdXNpYzoge1xuICAgICAgICBpZDogLTEsXG4gICAgICAgIGxvb3A6IGZhbHNlLFxuICAgICAgICB2b2x1bWU6IDFcbiAgICB9LFxuXG4gICAgX2VmZmVjdDoge1xuICAgICAgICB2b2x1bWU6IDEsXG4gICAgICAgIHBhdXNlQ2FjaGU6IFtdXG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBQbGF5IGJhY2tncm91bmQgbXVzaWNcclxuICAgICAqICEjemgg5pKt5pS+6IOM5pmv6Z+z5LmQXHJcbiAgICAgKiBAbWV0aG9kIHBsYXlNdXNpY1xyXG4gICAgICogQHBhcmFtIHtBdWRpb0NsaXB9IGNsaXAgLSBUaGUgYXVkaW8gY2xpcCB0byBwbGF5LlxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBsb29wIC0gV2hldGhlciB0aGUgbXVzaWMgbG9vcCBvciBub3QuXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGF1ZGlvSWRcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5sb2FkZXIubG9hZFJlcyh1cmwsIGNjLkF1ZGlvQ2xpcCwgZnVuY3Rpb24gKGVyciwgY2xpcCkge1xyXG4gICAgICogICAgIHZhciBhdWRpb0lEID0gY2MuYXVkaW9FbmdpbmUucGxheU11c2ljKGNsaXAsIGZhbHNlKTtcclxuICAgICAqIH0pO1xyXG4gICAgICovXG4gICAgcGxheU11c2ljOiBmdW5jdGlvbiBwbGF5TXVzaWMoY2xpcCwgbG9vcCkge1xuICAgICAgICB2YXIgbXVzaWMgPSB0aGlzLl9tdXNpYztcbiAgICAgICAgdGhpcy5zdG9wKG11c2ljLmlkKTtcbiAgICAgICAgbXVzaWMuaWQgPSB0aGlzLnBsYXkoY2xpcCwgbG9vcCwgbXVzaWMudm9sdW1lKTtcbiAgICAgICAgbXVzaWMubG9vcCA9IGxvb3A7XG4gICAgICAgIHJldHVybiBtdXNpYy5pZDtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFN0b3AgYmFja2dyb3VuZCBtdXNpYy5cclxuICAgICAqICEjemgg5YGc5q2i5pKt5pS+6IOM5pmv6Z+z5LmQ44CCXHJcbiAgICAgKiBAbWV0aG9kIHN0b3BNdXNpY1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnN0b3BNdXNpYygpO1xyXG4gICAgICovXG4gICAgc3RvcE11c2ljOiBmdW5jdGlvbiBzdG9wTXVzaWMoKSB7XG4gICAgICAgIHRoaXMuc3RvcCh0aGlzLl9tdXNpYy5pZCk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBQYXVzZSB0aGUgYmFja2dyb3VuZCBtdXNpYy5cclxuICAgICAqICEjemgg5pqC5YGc5pKt5pS+6IOM5pmv6Z+z5LmQ44CCXHJcbiAgICAgKiBAbWV0aG9kIHBhdXNlTXVzaWNcclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5wYXVzZU11c2ljKCk7XHJcbiAgICAgKi9cbiAgICBwYXVzZU11c2ljOiBmdW5jdGlvbiBwYXVzZU11c2ljKCkge1xuICAgICAgICB0aGlzLnBhdXNlKHRoaXMuX211c2ljLmlkKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211c2ljLmlkO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gUmVzdW1lIHBsYXlpbmcgYmFja2dyb3VuZCBtdXNpYy5cclxuICAgICAqICEjemgg5oGi5aSN5pKt5pS+6IOM5pmv6Z+z5LmQ44CCXHJcbiAgICAgKiBAbWV0aG9kIHJlc3VtZU11c2ljXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUucmVzdW1lTXVzaWMoKTtcclxuICAgICAqL1xuICAgIHJlc3VtZU11c2ljOiBmdW5jdGlvbiByZXN1bWVNdXNpYygpIHtcbiAgICAgICAgdGhpcy5yZXN1bWUodGhpcy5fbXVzaWMuaWQpO1xuICAgICAgICByZXR1cm4gdGhpcy5fbXVzaWMuaWQ7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgdGhlIHZvbHVtZSgwLjAgfiAxLjApLlxyXG4gICAgICogISN6aCDojrflj5bpn7Pph4/vvIgwLjAgfiAxLjDvvInjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0TXVzaWNWb2x1bWVcclxuICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgdm9sdW1lID0gY2MuYXVkaW9FbmdpbmUuZ2V0TXVzaWNWb2x1bWUoKTtcclxuICAgICAqL1xuICAgIGdldE11c2ljVm9sdW1lOiBmdW5jdGlvbiBnZXRNdXNpY1ZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX211c2ljLnZvbHVtZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCB0aGUgYmFja2dyb3VuZCBtdXNpYyB2b2x1bWUuXHJcbiAgICAgKiAhI3poIOiuvue9ruiDjOaZr+mfs+S5kOmfs+mHj++8iDAuMCB+IDEuMO+8ieOAglxyXG4gICAgICogQG1ldGhvZCBzZXRNdXNpY1ZvbHVtZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZvbHVtZSAtIFZvbHVtZSBtdXN0IGJlIGluIDAuMH4xLjAuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc2V0TXVzaWNWb2x1bWUoMC41KTtcclxuICAgICAqL1xuICAgIHNldE11c2ljVm9sdW1lOiBmdW5jdGlvbiBzZXRNdXNpY1ZvbHVtZSh2b2x1bWUpIHtcbiAgICAgICAgdm9sdW1lID0gaGFuZGxlVm9sdW1lKHZvbHVtZSk7XG4gICAgICAgIHZhciBtdXNpYyA9IHRoaXMuX211c2ljO1xuICAgICAgICBtdXNpYy52b2x1bWUgPSB2b2x1bWU7XG4gICAgICAgIHRoaXMuc2V0Vm9sdW1lKG11c2ljLmlkLCBtdXNpYy52b2x1bWUpO1xuICAgICAgICByZXR1cm4gbXVzaWMudm9sdW1lO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gQmFja2dyb3VuZCBtdXNpYyBwbGF5aW5nIHN0YXRlXHJcbiAgICAgKiAhI3poIOiDjOaZr+mfs+S5kOaYr+WQpuato+WcqOaSreaUvlxyXG4gICAgICogQG1ldGhvZCBpc011c2ljUGxheWluZ1xyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn1cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5pc011c2ljUGxheWluZygpO1xyXG4gICAgICovXG4gICAgaXNNdXNpY1BsYXlpbmc6IGZ1bmN0aW9uIGlzTXVzaWNQbGF5aW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXRTdGF0ZSh0aGlzLl9tdXNpYy5pZCkgPT09IHRoaXMuQXVkaW9TdGF0ZS5QTEFZSU5HO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gUGxheSBlZmZlY3QgYXVkaW8uXHJcbiAgICAgKiAhI3poIOaSreaUvumfs+aViFxyXG4gICAgICogQG1ldGhvZCBwbGF5RWZmZWN0XHJcbiAgICAgKiBAcGFyYW0ge0F1ZGlvQ2xpcH0gY2xpcCAtIFRoZSBhdWRpbyBjbGlwIHRvIHBsYXkuXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IGxvb3AgLSBXaGV0aGVyIHRoZSBtdXNpYyBsb29wIG9yIG5vdC5cclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYXVkaW9JZFxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmxvYWRlci5sb2FkUmVzKHVybCwgY2MuQXVkaW9DbGlwLCBmdW5jdGlvbiAoZXJyLCBjbGlwKSB7XHJcbiAgICAgKiAgICAgdmFyIGF1ZGlvSUQgPSBjYy5hdWRpb0VuZ2luZS5wbGF5RWZmZWN0KGNsaXAsIGZhbHNlKTtcclxuICAgICAqIH0pO1xyXG4gICAgICovXG4gICAgcGxheUVmZmVjdDogZnVuY3Rpb24gcGxheUVmZmVjdChjbGlwLCBsb29wKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBsYXkoY2xpcCwgbG9vcCB8fCBmYWxzZSwgdGhpcy5fZWZmZWN0LnZvbHVtZSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBTZXQgdGhlIHZvbHVtZSBvZiBlZmZlY3QgYXVkaW8uXHJcbiAgICAgKiAhI3poIOiuvue9rumfs+aViOmfs+mHj++8iDAuMCB+IDEuMO+8ieOAglxyXG4gICAgICogQG1ldGhvZCBzZXRFZmZlY3RzVm9sdW1lXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdm9sdW1lIC0gVm9sdW1lIG11c3QgYmUgaW4gMC4wfjEuMC5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5zZXRFZmZlY3RzVm9sdW1lKDAuNSk7XHJcbiAgICAgKi9cbiAgICBzZXRFZmZlY3RzVm9sdW1lOiBmdW5jdGlvbiBzZXRFZmZlY3RzVm9sdW1lKHZvbHVtZSkge1xuICAgICAgICB2b2x1bWUgPSBoYW5kbGVWb2x1bWUodm9sdW1lKTtcbiAgICAgICAgdmFyIG11c2ljSWQgPSB0aGlzLl9tdXNpYy5pZDtcbiAgICAgICAgdGhpcy5fZWZmZWN0LnZvbHVtZSA9IHZvbHVtZTtcbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgYXVkaW8gPSBfaWQyYXVkaW9baWRdO1xuICAgICAgICAgICAgaWYgKCFhdWRpbyB8fCBhdWRpby5pZCA9PT0gbXVzaWNJZCkgY29udGludWU7XG4gICAgICAgICAgICBhdWRpb0VuZ2luZS5zZXRWb2x1bWUoaWQsIHZvbHVtZSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSB2b2x1bWUgb2YgdGhlIGVmZmVjdCBhdWRpbyBtYXggdmFsdWUgaXMgMS4wLHRoZSBtaW4gdmFsdWUgaXMgMC4wIC5cclxuICAgICAqICEjemgg6I635Y+W6Z+z5pWI6Z+z6YeP77yIMC4wIH4gMS4w77yJ44CCXHJcbiAgICAgKiBAbWV0aG9kIGdldEVmZmVjdHNWb2x1bWVcclxuICAgICAqIEByZXR1cm4ge051bWJlcn1cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgdm9sdW1lID0gY2MuYXVkaW9FbmdpbmUuZ2V0RWZmZWN0c1ZvbHVtZSgpO1xyXG4gICAgICovXG4gICAgZ2V0RWZmZWN0c1ZvbHVtZTogZnVuY3Rpb24gZ2V0RWZmZWN0c1ZvbHVtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2VmZmVjdC52b2x1bWU7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBQYXVzZSBlZmZlY3QgYXVkaW8uXHJcbiAgICAgKiAhI3poIOaaguWBnOaSreaUvumfs+aViOOAglxyXG4gICAgICogQG1ldGhvZCBwYXVzZUVmZmVjdFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGF1ZGlvSUQgLSBhdWRpbyBpZC5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiBjYy5hdWRpb0VuZ2luZS5wYXVzZUVmZmVjdChhdWRpb0lEKTtcclxuICAgICAqL1xuICAgIHBhdXNlRWZmZWN0OiBmdW5jdGlvbiBwYXVzZUVmZmVjdChhdWRpb0lEKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnBhdXNlKGF1ZGlvSUQpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gU3RvcCBwbGF5aW5nIGFsbCB0aGUgc291bmQgZWZmZWN0cy5cclxuICAgICAqICEjemgg5pqC5YGc5pKt5pS+5omA5pyJ6Z+z5pWI44CCXHJcbiAgICAgKiBAbWV0aG9kIHBhdXNlQWxsRWZmZWN0c1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnBhdXNlQWxsRWZmZWN0cygpO1xyXG4gICAgICovXG4gICAgcGF1c2VBbGxFZmZlY3RzOiBmdW5jdGlvbiBwYXVzZUFsbEVmZmVjdHMoKSB7XG4gICAgICAgIHZhciBtdXNpY0lkID0gdGhpcy5fbXVzaWMuaWQ7XG4gICAgICAgIHZhciBlZmZlY3QgPSB0aGlzLl9lZmZlY3Q7XG4gICAgICAgIGVmZmVjdC5wYXVzZUNhY2hlLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgZm9yICh2YXIgaWQgaW4gX2lkMmF1ZGlvKSB7XG4gICAgICAgICAgICB2YXIgYXVkaW8gPSBfaWQyYXVkaW9baWRdO1xuICAgICAgICAgICAgaWYgKCFhdWRpbyB8fCBhdWRpby5pZCA9PT0gbXVzaWNJZCkgY29udGludWU7XG4gICAgICAgICAgICB2YXIgc3RhdGUgPSBhdWRpby5nZXRTdGF0ZSgpO1xuICAgICAgICAgICAgaWYgKHN0YXRlID09PSB0aGlzLkF1ZGlvU3RhdGUuUExBWUlORykge1xuICAgICAgICAgICAgICAgIGVmZmVjdC5wYXVzZUNhY2hlLnB1c2goaWQpO1xuICAgICAgICAgICAgICAgIGF1ZGlvLnBhdXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFJlc3VtZSBlZmZlY3QgYXVkaW8uXHJcbiAgICAgKiAhI3poIOaBouWkjeaSreaUvumfs+aViOmfs+mikeOAglxyXG4gICAgICogQG1ldGhvZCByZXN1bWVFZmZlY3RcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gVGhlIHJldHVybiB2YWx1ZSBvZiBmdW5jdGlvbiBwbGF5LlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnJlc3VtZUVmZmVjdChhdWRpb0lEKTtcclxuICAgICAqL1xuICAgIHJlc3VtZUVmZmVjdDogZnVuY3Rpb24gcmVzdW1lRWZmZWN0KGlkKSB7XG4gICAgICAgIHRoaXMucmVzdW1lKGlkKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFJlc3VtZSBhbGwgZWZmZWN0IGF1ZGlvLlxyXG4gICAgICogISN6aCDmgaLlpI3mkq3mlL7miYDmnInkuYvliY3mmoLlgZznmoTpn7PmlYjjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lQWxsRWZmZWN0c1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnJlc3VtZUFsbEVmZmVjdHMoKTtcclxuICAgICAqL1xuICAgIHJlc3VtZUFsbEVmZmVjdHM6IGZ1bmN0aW9uIHJlc3VtZUFsbEVmZmVjdHMoKSB7XG4gICAgICAgIHZhciBwYXVzZUlEQ2FjaGUgPSB0aGlzLl9lZmZlY3QucGF1c2VDYWNoZTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXVzZUlEQ2FjaGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBpZCA9IHBhdXNlSURDYWNoZVtpXTtcbiAgICAgICAgICAgIHZhciBhdWRpbyA9IF9pZDJhdWRpb1tpZF07XG4gICAgICAgICAgICBpZiAoYXVkaW8pIGF1ZGlvLnJlc3VtZSgpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBTdG9wIHBsYXlpbmcgdGhlIGVmZmVjdCBhdWRpby5cclxuICAgICAqICEjemgg5YGc5q2i5pKt5pS+6Z+z5pWI44CCXHJcbiAgICAgKiBAbWV0aG9kIHN0b3BFZmZlY3RcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhdWRpb0lEIC0gYXVkaW8gaWQuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogY2MuYXVkaW9FbmdpbmUuc3RvcEVmZmVjdChpZCk7XHJcbiAgICAgKi9cbiAgICBzdG9wRWZmZWN0OiBmdW5jdGlvbiBzdG9wRWZmZWN0KGF1ZGlvSUQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RvcChhdWRpb0lEKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFN0b3AgcGxheWluZyBhbGwgdGhlIGVmZmVjdHMuXHJcbiAgICAgKiAhI3poIOWBnOatouaSreaUvuaJgOaciemfs+aViOOAglxyXG4gICAgICogQG1ldGhvZCBzdG9wQWxsRWZmZWN0c1xyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIGNjLmF1ZGlvRW5naW5lLnN0b3BBbGxFZmZlY3RzKCk7XHJcbiAgICAgKi9cbiAgICBzdG9wQWxsRWZmZWN0czogZnVuY3Rpb24gc3RvcEFsbEVmZmVjdHMoKSB7XG4gICAgICAgIHZhciBtdXNpY0lkID0gdGhpcy5fbXVzaWMuaWQ7XG4gICAgICAgIGZvciAodmFyIGlkIGluIF9pZDJhdWRpbykge1xuICAgICAgICAgICAgdmFyIGF1ZGlvID0gX2lkMmF1ZGlvW2lkXTtcbiAgICAgICAgICAgIGlmICghYXVkaW8gfHwgYXVkaW8uaWQgPT09IG11c2ljSWQpIGNvbnRpbnVlO1xuICAgICAgICAgICAgdmFyIHN0YXRlID0gYXVkaW8uZ2V0U3RhdGUoKTtcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gYXVkaW9FbmdpbmUuQXVkaW9TdGF0ZS5QTEFZSU5HKSB7XG4gICAgICAgICAgICAgICAgYXVkaW8uc3RvcCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYy5hdWRpb0VuZ2luZSA9IGF1ZGlvRW5naW5lO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFFYVmthVzlGYm1kcGJtVXVhbk1pWFN3aWJtRnRaWE1pT2xzaVFYVmthVzhpTENKeVpYRjFhWEpsSWl3aVFYVmthVzlEYkdsd0lpd2lhbk1pTENKall5SXNJbDlwYm5OMFlXNWpaVWxrSWl3aVgybGtNbUYxWkdsdklpd2lZM0psWVhSbFRXRndJaXdpWDNWeWJESnBaQ0lzSWw5aGRXUnBiMUJ2YjJ3aUxDSnlaV041WTJ4bFFYVmthVzhpTENKaGRXUnBieUlzSWw5bWFXNXBjMmhEWVd4c1ltRmpheUlzSW14bGJtZDBhQ0lzSW05bVppSXNJbk55WXlJc0ltbHVZMngxWkdWeklpd2ljSFZ6YUNJc0ltUmxjM1J5YjNraUxDSm5aWFJCZFdScGIwWnliMjFRWVhSb0lpd2ljR0YwYUNJc0ltbGtJaXdpYkdsemRDSXNJbUYxWkdsdlJXNW5hVzVsSWl3aVgyMWhlRUYxWkdsdlNXNXpkR0Z1WTJVaUxDSnZiR1JKWkNJc0luTm9hV1owSWl3aWIyeGtRWFZrYVc4aUxDSm5aWFJCZFdScGIwWnliMjFKWkNJc0luTjBiM0FpTENKd2IzQWlMQ0pqWVd4c1ltRmpheUlzSW1GMVpHbHZTVzVNYVhOMElpd2lhVzVrWlhnaUxDSnBibVJsZUU5bUlpd2lZWEp5WVhraUxDSm1ZWE4wVW1WdGIzWmxRWFFpTENKdmJpSXNJbU5oYkd3aUxDSm9ZVzVrYkdWV2IyeDFiV1VpTENKMmIyeDFiV1VpTENKMWJtUmxabWx1WldRaUxDSk9kVzFpWlhJaUxDSndZWEp6WlVac2IyRjBJaXdpUVhWa2FXOVRkR0YwWlNJc0lsTjBZWFJsSWl3aVgyMWhlRmRsWWtGMVpHbHZVMmw2WlNJc0luQnNZWGtpTENKamJHbHdJaXdpYkc5dmNDSXNJbmRoY201SlJDSXNJbDlzYjJGa1FubFZjbXdpTENKbGNuSWlMQ0p1WVhScGRtVlZjbXdpTENKelpYUk1iMjl3SWl3aWMyVjBWbTlzZFcxbElpd2lZWFZrYVc5SlJDSXNJbWx6VEc5dmNDSXNJbWRsZEV4dmIzQWlMQ0puWlhSV2IyeDFiV1VpTENKelpYUkRkWEp5Wlc1MFZHbHRaU0lzSW5ObFl5SXNJbWRsZEVOMWNuSmxiblJVYVcxbElpd2laMlYwUkhWeVlYUnBiMjRpTENKblpYUlRkR0YwWlNJc0lrVlNVazlTSWl3aWMyVjBSbWx1YVhOb1EyRnNiR0poWTJzaUxDSndZWFZ6WlNJc0lsOXdZWFZ6WlVsRVEyRmphR1VpTENKd1lYVnpaVUZzYkNJc0luTjBZWFJsSWl3aVVFeEJXVWxPUnlJc0luSmxjM1Z0WlNJc0luSmxjM1Z0WlVGc2JDSXNJbWtpTENKemRHOXdRV3hzSWl3aWMyVjBUV0Y0UVhWa2FXOUpibk4wWVc1alpTSXNJbTUxYlNJc0ltZGxkRTFoZUVGMVpHbHZTVzV6ZEdGdVkyVWlMQ0oxYm1OaFkyaGxJaXdpWm1sc1pWQmhkR2dpTENKMWJtTmhZMmhsUVd4c0lpd2laMlYwVUhKdlptbHNaU0lzSW5CeWIyWnBiR1ZPWVcxbElpd2ljSEpsYkc5aFpDSXNJa05EWDBSRlFsVkhJaXdpZDJGeWJpSXNJbXh2WVdSbGNpSXNJbXh2WVdRaUxDSmxjbkp2Y2lJc0luTmxkRTFoZUZkbFlrRjFaR2x2VTJsNlpTSXNJbXRpSWl3aVgySnlaV0ZyUTJGamFHVWlMQ0pmWW5KbFlXc2lMQ0pmY21WemRHOXlaU0lzSWw5dGRYTnBZeUlzSWw5bFptWmxZM1FpTENKd1lYVnpaVU5oWTJobElpd2ljR3hoZVUxMWMybGpJaXdpYlhWemFXTWlMQ0p6ZEc5d1RYVnphV01pTENKd1lYVnpaVTExYzJsaklpd2ljbVZ6ZFcxbFRYVnphV01pTENKblpYUk5kWE5wWTFadmJIVnRaU0lzSW5ObGRFMTFjMmxqVm05c2RXMWxJaXdpYVhOTmRYTnBZMUJzWVhscGJtY2lMQ0p3YkdGNVJXWm1aV04wSWl3aWMyVjBSV1ptWldOMGMxWnZiSFZ0WlNJc0ltMTFjMmxqU1dRaUxDSm5aWFJGWm1abFkzUnpWbTlzZFcxbElpd2ljR0YxYzJWRlptWmxZM1FpTENKd1lYVnpaVUZzYkVWbVptVmpkSE1pTENKbFptWmxZM1FpTENKeVpYTjFiV1ZGWm1abFkzUWlMQ0p5WlhOMWJXVkJiR3hGWm1abFkzUnpJaXdpY0dGMWMyVkpSRU5oWTJobElpd2ljM1J2Y0VWbVptVmpkQ0lzSW5OMGIzQkJiR3hGWm1abFkzUnpJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVRzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1rSkJMRWxCUVUxQkxGRkJRVkZETEZGQlFWRXNWMEZCVWl4RFFVRmtPMEZCUTBFc1NVRkJUVU1zV1VGQldVUXNVVUZCVVN3MFFrRkJVaXhEUVVGc1FqdEJRVU5CTEVsQlFVMUZMRXRCUVV0RExFZEJRVWRFTEVWQlFXUTdPMEZCUlVFc1NVRkJTVVVzWTBGQll5eERRVUZzUWp0QlFVTkJMRWxCUVVsRExGbEJRVmxJTEVkQlFVZEpMRk5CUVVnc1EwRkJZU3hKUVVGaUxFTkJRV2hDTzBGQlEwRXNTVUZCU1VNc1ZVRkJWU3hGUVVGa08wRkJRMEVzU1VGQlNVTXNZVUZCWVN4RlFVRnFRanM3UVVGRlFTeEpRVUZKUXl4bFFVRmxMRk5CUVdaQkxGbEJRV1VzUTBGQlZVTXNTMEZCVml4RlFVRnBRanRCUVVOb1EwRXNWVUZCVFVNc1pVRkJUaXhIUVVGM1FpeEpRVUY0UWp0QlFVTkJMRkZCUVVsSUxGZEJRVmRKTEUxQlFWZ3NSMEZCYjBJc1JVRkJlRUlzUlVGQk5FSTdRVUZEZUVKR0xHTkJRVTFITEVkQlFVNHNRMEZCVlN4UFFVRldPMEZCUTBGSUxHTkJRVTFITEVkQlFVNHNRMEZCVlN4TlFVRldPMEZCUTBGSUxHTkJRVTFKTEVkQlFVNHNSMEZCV1N4SlFVRmFPMEZCUTBFN1FVRkRRU3haUVVGSkxFTkJRVU5PTEZkQlFWZFBMRkZCUVZnc1EwRkJiMEpNTEV0QlFYQkNMRU5CUVV3c1JVRkJhVU03UVVGRE4wSkdMSFZDUVVGWFVTeEpRVUZZTEVOQlFXZENUaXhMUVVGb1FqdEJRVU5JTzBGQlEwb3NTMEZTUkN4TlFWTkxPMEZCUTBSQkxHTkJRVTFQTEU5QlFVNDdRVUZEU0R0QlFVTktMRU5CWkVRN08wRkJaMEpCTEVsQlFVbERMRzFDUVVGdFFpeFRRVUZ1UWtFc1owSkJRVzFDTEVOQlFWVkRMRWxCUVZZc1JVRkJaMEk3UVVGRGJrTXNVVUZCU1VNc1MwRkJTMmhDTEdGQlFWUTdRVUZEUVN4UlFVRkphVUlzVDBGQlQyUXNVVUZCVVZrc1NVRkJVaXhEUVVGWU8wRkJRMEVzVVVGQlNTeERRVUZEUlN4SlFVRk1MRVZCUVZjN1FVRkRVRUVzWlVGQlQyUXNVVUZCVVZrc1NVRkJVaXhKUVVGblFpeEZRVUYyUWp0QlFVTklPMEZCUTBRc1VVRkJTVWNzV1VGQldVTXNhVUpCUVZvc1NVRkJhVU5HTEV0QlFVdFVMRTFCUVRGRExFVkJRV3RFTzBGQlF6bERMRmxCUVVsWkxGRkJRVkZJTEV0QlFVdEpMRXRCUVV3c1JVRkJXanRCUVVOQkxGbEJRVWxETEZkQlFWZERMR1ZCUVdWSUxFdEJRV1lzUTBGQlpqdEJRVU5CTzBGQlEwRkZMR2xDUVVGVFJTeEpRVUZVTzBGQlEwZzdPMEZCUlVRc1VVRkJTV3hDTEZGQlFWRkdMRmRCUVZkeFFpeEhRVUZZTEUxQlFXOUNMRWxCUVVrNVFpeExRVUZLTEVWQlFXaERPMEZCUTBFc1VVRkJTU3RDTEZkQlFWY3NVMEZCV0VFc1VVRkJWeXhIUVVGWk8wRkJRM1pDTEZsQlFVbERMR05CUVdOS0xHVkJRV1VzUzBGQlMxQXNSVUZCY0VJc1EwRkJiRUk3UVVGRFFTeFpRVUZKVnl4WFFVRktMRVZCUVdsQ08wRkJRMklzYlVKQlFVOHhRaXhWUVVGVkxFdEJRVXRsTEVWQlFXWXNRMEZCVUR0QlFVTkJMR2RDUVVGSldTeFJRVUZSV0N4TFFVRkxXU3hQUVVGTUxFTkJRV0VzUzBGQlMySXNSVUZCYkVJc1EwRkJXanRCUVVOQmFrSXNaVUZCUjBRc1JVRkJTQ3hEUVVGTlowTXNTMEZCVGl4RFFVRlpReXhaUVVGYUxFTkJRWGxDWkN4SlFVRjZRaXhGUVVFclFsY3NTMEZCTDBJN1FVRkRTRHRCUVVORWRrSXNjVUpCUVdFc1NVRkJZanRCUVVOSUxFdEJVa1E3TzBGQlZVRkRMRlZCUVUwd1FpeEZRVUZPTEVOQlFWTXNUMEZCVkN4RlFVRnJRaXhaUVVGWk8wRkJRekZDTEZsQlFVa3NTMEZCUzNwQ0xHVkJRVlFzUlVGQk1FSTdRVUZEZEVJc2FVSkJRVXRCTEdWQlFVdzdRVUZEU0R0QlFVTkViVUlzYVVKQlFWTlBMRWxCUVZRc1EwRkJZeXhKUVVGa08wRkJRMGdzUzBGTVJDeEZRVXRITTBJc1MwRk1TRHM3UVVGUFFVRXNWVUZCVFRCQ0xFVkJRVTRzUTBGQlV5eE5RVUZVTEVWQlFXbENUaXhSUVVGcVFpeEZRVUV5UW5CQ0xFdEJRVE5DTzBGQlEwRkJMRlZCUVUxVkxFVkJRVTRzUjBGQlYwRXNSVUZCV0R0QlFVTkJaaXhqUVVGVlpTeEZRVUZXTEVsQlFXZENWaXhMUVVGb1FqdEJRVU5CVnl4VFFVRkxUQ3hKUVVGTUxFTkJRVlZKTEVWQlFWWTdPMEZCUlVFc1YwRkJUMVlzUzBGQlVEdEJRVU5JTEVOQmNrTkVPenRCUVhWRFFTeEpRVUZKYVVJc2FVSkJRV2xDTEZOQlFXcENRU3hqUVVGcFFpeERRVUZWVUN4RlFVRldMRVZCUVdNN1FVRkRMMElzVjBGQlQyWXNWVUZCVldVc1JVRkJWaXhEUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVN4SlFVRkphMElzWlVGQlowSXNVMEZCYUVKQkxGbEJRV2RDTEVOQlFWVkRMRTFCUVZZc1JVRkJhMEk3UVVGRGJFTXNVVUZCU1VFc1YwRkJWME1zVTBGQlppeEZRVUV3UWp0QlFVTjBRanRCUVVOQlJDeHBRa0ZCVXl4RFFVRlVPMEZCUTBnc1MwRklSQ3hOUVVsTExFbEJRVWtzVDBGQlQwRXNUVUZCVUN4TFFVRnJRaXhSUVVGMFFpeEZRVUZuUXp0QlFVTnFRMEVzYVVKQlFWTkZMRTlCUVU5RExGVkJRVkFzUTBGQmEwSklMRTFCUVd4Q0xFTkJRVlE3UVVGRFNEdEJRVU5FTEZkQlFVOUJMRTFCUVZBN1FVRkRTQ3hEUVZSRU96dEJRVmRCT3pzN096czdPenM3T3pzN08wRkJZVUVzU1VGQlNXcENMR05CUVdNN08wRkJSV1J4UWl4blFrRkJXVFZETEUxQlFVMDJReXhMUVVaS096dEJRVWxrUXl4elFrRkJhMElzVDBGS1NpeEZRVWxoTzBGQlF6TkNkRUlzZFVKQlFXMUNMRVZCVEV3N08wRkJUMlJzUWl4bFFVRlhRU3hUUVZCSE96dEJRVk5rT3pzN096czdPenM3T3pzN08wRkJZVUY1UXl4VlFVRk5MR05CUVZWRExFbEJRVllzUlVGQlowSkRMRWxCUVdoQ0xFVkJRWE5DVkN4TlFVRjBRaXhEUVVFMFFpeGhRVUUxUWl4RlFVRXlRenRCUVVNM1F5eFpRVUZKY0VJc1QwRkJUelJDTEVsQlFWZzdRVUZEUVN4WlFVRkpja01zUzBGQlNqdEJRVU5CTEZsQlFVa3NUMEZCVDNGRExFbEJRVkFzUzBGQlowSXNVVUZCY0VJc1JVRkJPRUk3UVVGRE1VSTdRVUZEUVRWRExHVkJRVWM0UXl4TlFVRklMRU5CUVZVc1NVRkJWaXhGUVVGblFpeG5Ra0ZCYUVJc1JVRkJhME1zWTBGQmJFTXNSVUZCYTBRc1YwRkJiRVFzUlVGQkswUXNZMEZCTDBRc1JVRkJLMFVzVDBGQkwwVTdRVUZEUVRsQ0xHMUNRVUZQTkVJc1NVRkJVRHRCUVVOQk8wRkJRMEZ5UXl4dlFrRkJVVkVzYVVKQlFXbENReXhKUVVGcVFpeERRVUZTTzBGQlEwRnNRaXh6UWtGQlZXbEVMRlZCUVZZc1EwRkJjVUl2UWl4SlFVRnlRaXhGUVVFeVFpeFZRVUZWWjBNc1IwRkJWaXhGUVVGbFNpeEpRVUZtTEVWQlFYRkNPMEZCUXpWRExHOUNRVUZKUVN4SlFVRktMRVZCUVZVN1FVRkRUbkpETERCQ1FVRk5TU3hIUVVGT0xFZEJRVmxwUXl4SlFVRmFPMEZCUTBnN1FVRkRTaXhoUVVwRU8wRkJTMGdzVTBGWVJDeE5RVmxMTzBGQlEwUXNaMEpCUVVrc1EwRkJRMEVzU1VGQlRDeEZRVUZYTzBGQlExQTdRVUZEU0R0QlFVTkVOVUlzYlVKQlFVODBRaXhMUVVGTFN5eFRRVUZhTzBGQlEwRXhReXh2UWtGQlVWRXNhVUpCUVdsQ1F5eEpRVUZxUWl4RFFVRlNPMEZCUTBGVUxHdENRVUZOU1N4SFFVRk9MRWRCUVZscFF5eEpRVUZhTzBGQlEwZzdPMEZCUlVSeVF5eGpRVUZOTWtNc1QwRkJUaXhEUVVGalRDeFJRVUZSTEV0QlFYUkNPMEZCUTBGVUxHbENRVUZUUkN4aFFVRmhReXhOUVVGaUxFTkJRVlE3UVVGRFFUZENMR05CUVUwMFF5eFRRVUZPTEVOQlFXZENaaXhOUVVGb1FqdEJRVU5CTjBJc1kwRkJUVzlETEVsQlFVNDdPMEZCUlVFc1pVRkJUM0JETEUxQlFVMVZMRVZCUVdJN1FVRkRTQ3hMUVhCRVlUczdRVUZ6UkdRN096czdPenM3T3p0QlFWTkJhVU1zWVVGQlV5eHBRa0ZCVlVVc1QwRkJWaXhGUVVGdFFsQXNTVUZCYmtJc1JVRkJlVUk3UVVGRE9VSXNXVUZCU1hSRExGRkJRVkZwUWl4bFFVRmxORUlzVDBGQlppeERRVUZhTzBGQlEwRXNXVUZCU1N4RFFVRkROME1zUzBGQlJDeEpRVUZWTEVOQlFVTkJMRTFCUVUweVF5eFBRVUZ5UWl4RlFVTkpPMEZCUTBvelF5eGpRVUZOTWtNc1QwRkJUaXhEUVVGalRDeEpRVUZrTzBGQlEwZ3NTMEZ3UldFN08wRkJjMFZrT3pzN096czdPenM3UVVGVFFWRXNXVUZCVVN4blFrRkJWVVFzVDBGQlZpeEZRVUZ0UWp0QlFVTjJRaXhaUVVGSk4wTXNVVUZCVVdsQ0xHVkJRV1UwUWl4UFFVRm1MRU5CUVZvN1FVRkRRU3haUVVGSkxFTkJRVU0zUXl4TFFVRkVMRWxCUVZVc1EwRkJRMEVzVFVGQlRTdERMRTlCUVhKQ0xFVkJRMGtzVDBGQlR5eExRVUZRTzBGQlEwb3NaVUZCVHk5RExFMUJRVTByUXl4UFFVRk9MRVZCUVZBN1FVRkRTQ3hMUVhCR1lUczdRVUZ6Um1RN096czdPenM3T3p0QlFWTkJTQ3hsUVVGWExHMUNRVUZWUXl4UFFVRldMRVZCUVcxQ2FFSXNUVUZCYmtJc1JVRkJNa0k3UVVGRGJFTXNXVUZCU1RkQ0xGRkJRVkZwUWl4bFFVRmxORUlzVDBGQlppeERRVUZhTzBGQlEwRXNXVUZCU1RkRExFdEJRVW9zUlVGQlZ6dEJRVU5RUVN4clFrRkJUVFJETEZOQlFVNHNRMEZCWjBKbUxFMUJRV2hDTzBGQlEwZzdRVUZEU2l4TFFYQkhZVHM3UVVGelIyUTdPenM3T3pzN096dEJRVk5CYlVJc1pVRkJWeXh0UWtGQlZVZ3NUMEZCVml4RlFVRnRRanRCUVVNeFFpeFpRVUZKTjBNc1VVRkJVV2xDTEdWQlFXVTBRaXhQUVVGbUxFTkJRVm83UVVGRFFTeGxRVUZQTjBNc1VVRkJVVUVzVFVGQlRXZEVMRk5CUVU0c1JVRkJVaXhIUVVFMFFpeERRVUZ1UXp0QlFVTklMRXRCYkVoaE96dEJRVzlJWkRzN096czdPenM3T3p0QlFWVkJReXh2UWtGQlowSXNkMEpCUVZWS0xFOUJRVllzUlVGQmJVSkxMRWRCUVc1Q0xFVkJRWGRDTzBGQlEzQkRMRmxCUVVsc1JDeFJRVUZSYVVJc1pVRkJaVFJDTEU5QlFXWXNRMEZCV2p0QlFVTkJMRmxCUVVrM1F5eExRVUZLTEVWQlFWYzdRVUZEVUVFc2EwSkJRVTFwUkN4alFVRk9MRU5CUVhGQ1F5eEhRVUZ5UWp0QlFVTkJMRzFDUVVGUExFbEJRVkE3UVVGRFNDeFRRVWhFTEUxQlNVczdRVUZEUkN4dFFrRkJUeXhMUVVGUU8wRkJRMGc3UVVGRFNpeExRWFpKWVRzN1FVRjVTV1E3T3pzN096czdPenRCUVZOQlF5eHZRa0ZCWjBJc2QwSkJRVlZPTEU5QlFWWXNSVUZCYlVJN1FVRkRMMElzV1VGQlNUZERMRkZCUVZGcFFpeGxRVUZsTkVJc1QwRkJaaXhEUVVGYU8wRkJRMEVzWlVGQlR6ZERMRkZCUVZGQkxFMUJRVTF0UkN4alFVRk9MRVZCUVZJc1IwRkJhVU1zUTBGQmVFTTdRVUZEU0N4TFFYSktZVHM3UVVGMVNtUTdPenM3T3pzN096dEJRVk5CUXl4cFFrRkJZU3h4UWtGQlZWQXNUMEZCVml4RlFVRnRRanRCUVVNMVFpeFpRVUZKTjBNc1VVRkJVV2xDTEdWQlFXVTBRaXhQUVVGbUxFTkJRVm83UVVGRFFTeGxRVUZQTjBNc1VVRkJVVUVzVFVGQlRXOUVMRmRCUVU0c1JVRkJVaXhIUVVFNFFpeERRVUZ5UXp0QlFVTklMRXRCYmt0aE96dEJRWEZMWkRzN096czdPenM3TzBGQlUwRkRMR05CUVZVc2EwSkJRVlZTTEU5QlFWWXNSVUZCYlVJN1FVRkRla0lzV1VGQlNUZERMRkZCUVZGcFFpeGxRVUZsTkVJc1QwRkJaaXhEUVVGYU8wRkJRMEVzWlVGQlR6ZERMRkZCUVZGQkxFMUJRVTF4UkN4UlFVRk9MRVZCUVZJc1IwRkJNa0lzUzBGQlMzQkNMRlZCUVV3c1EwRkJaMEp4UWl4TFFVRnNSRHRCUVVOSUxFdEJha3hoT3p0QlFXMU1aRHM3T3pzN096czdPMEZCVTBGRExIVkNRVUZ0UWl3eVFrRkJWVllzVDBGQlZpeEZRVUZ0UW5wQ0xGRkJRVzVDTEVWQlFUWkNPMEZCUXpWRExGbEJRVWx3UWl4UlFVRlJhVUlzWlVGQlpUUkNMRTlCUVdZc1EwRkJXanRCUVVOQkxGbEJRVWtzUTBGQlF6ZERMRXRCUVV3c1JVRkRTVHRCUVVOS1FTeGpRVUZOUXl4bFFVRk9MRWRCUVhkQ2JVSXNVVUZCZUVJN1FVRkRTQ3hMUVdwTllUczdRVUZ0VFdRN096czdPenM3TzBGQlVVRnZReXhYUVVGUExHVkJRVlZZTEU5QlFWWXNSVUZCYlVJN1FVRkRkRUlzV1VGQlNUZERMRkZCUVZGcFFpeGxRVUZsTkVJc1QwRkJaaXhEUVVGYU8wRkJRMEVzV1VGQlNUZERMRXRCUVVvc1JVRkJWenRCUVVOUVFTeHJRa0ZCVFhkRUxFdEJRVTQ3UVVGRFFTeHRRa0ZCVHl4SlFVRlFPMEZCUTBnc1UwRklSQ3hOUVVsTE8wRkJRMFFzYlVKQlFVOHNTMEZCVUR0QlFVTklPMEZCUTBvc1MwRndUbUU3TzBGQmMwNWtReXh0UWtGQlpTeEZRWFJPUkR0QlFYVk9aRHM3T3pzN096dEJRVTlCUXl4alFVRlZMRzlDUVVGWk8wRkJRMnhDTEdGQlFVc3NTVUZCU1doRUxFVkJRVlFzU1VGQlpXWXNVMEZCWml4RlFVRXdRanRCUVVOMFFpeG5Ra0ZCU1Vzc1VVRkJVVXdzVlVGQlZXVXNSVUZCVml4RFFVRmFPMEZCUTBFc1owSkJRVWxwUkN4UlFVRlJNMFFzVFVGQlRYRkVMRkZCUVU0c1JVRkJXanRCUVVOQkxHZENRVUZKVFN4VlFVRlZkRVVzVFVGQlRUWkRMRXRCUVU0c1EwRkJXVEJDTEU5QlFURkNMRVZCUVcxRE8wRkJReTlDTEhGQ1FVRkxTQ3hoUVVGTUxFTkJRVzFDYmtRc1NVRkJia0lzUTBGQmQwSkpMRVZCUVhoQ08wRkJRMEZXTEhOQ1FVRk5kMFFzUzBGQlRqdEJRVU5JTzBGQlEwbzdRVUZEU2l4TFFYWlBZVHM3UVVGNVQyUTdPenM3T3pzN08wRkJVVUZMTEZsQlFWRXNaMEpCUVZWb1FpeFBRVUZXTEVWQlFXMUNPMEZCUTNaQ0xGbEJRVWszUXl4UlFVRlJhVUlzWlVGQlpUUkNMRTlCUVdZc1EwRkJXanRCUVVOQkxGbEJRVWszUXl4TFFVRktMRVZCUVZjN1FVRkRVRUVzYTBKQlFVMDJSQ3hOUVVGT08wRkJRMGc3UVVGRFNpeExRWFJRWVRzN1FVRjNVR1E3T3pzN096czdRVUZQUVVNc1pVRkJWeXh4UWtGQldUdEJRVU51UWl4aFFVRkxMRWxCUVVsRExFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTU3hMUVVGTFRpeGhRVUZNTEVOQlFXMUNka1FzVFVGQmRrTXNSVUZCSzBNc1JVRkJSVFpFTEVOQlFXcEVMRVZCUVc5RU8wRkJRMmhFTEdkQ1FVRkpja1FzUzBGQlN5eExRVUZMSzBNc1lVRkJUQ3hEUVVGdFFrMHNRMEZCYmtJc1EwRkJWRHRCUVVOQkxHZENRVUZKTDBRc1VVRkJVV2xDTEdWQlFXVlFMRVZCUVdZc1EwRkJXanRCUVVOQkxHZENRVUZKVml4TFFVRktMRVZCUTBsQkxFMUJRVTAyUkN4TlFVRk9PMEZCUTFBN1FVRkRSQ3hoUVVGTFNpeGhRVUZNTEVOQlFXMUNka1FzVFVGQmJrSXNSMEZCTkVJc1EwRkJOVUk3UVVGRFNDeExRWFpSWVRzN1FVRjVVV1E3T3pzN096czdPMEZCVVVGblFpeFZRVUZOTEdOQlFWVXlRaXhQUVVGV0xFVkJRVzFDTzBGQlEzSkNMRmxCUVVrM1F5eFJRVUZSYVVJc1pVRkJaVFJDTEU5QlFXWXNRMEZCV2p0QlFVTkJMRmxCUVVrM1F5eExRVUZLTEVWQlFWYzdRVUZEVUR0QlFVTkJRU3hyUWtGQlRXdENMRWxCUVU0N1FVRkRRU3h0UWtGQlR5eEpRVUZRTzBGQlEwZ3NVMEZLUkN4TlFVdExPMEZCUTBRc2JVSkJRVThzUzBGQlVEdEJRVU5JTzBGQlEwb3NTMEV6VW1FN08wRkJObEprT3pzN096czdPMEZCVDBFNFF5eGhRVUZUTEcxQ1FVRlpPMEZCUTJwQ0xHRkJRVXNzU1VGQlNYUkVMRVZCUVZRc1NVRkJaV1lzVTBGQlppeEZRVUV3UWp0QlFVTjBRaXhuUWtGQlNVc3NVVUZCVVV3c1ZVRkJWV1VzUlVGQlZpeERRVUZhTzBGQlEwRXNaMEpCUVVsV0xFdEJRVW9zUlVGQlZ6dEJRVU5RTzBGQlEwRkJMSE5DUVVGTmEwSXNTVUZCVGp0QlFVTklPMEZCUTBvN1FVRkRTaXhMUVRWVFlUczdRVUU0VTJRN096czdPenM3TzBGQlVVRXJReXg1UWtGQmNVSXNOa0pCUVZWRExFZEJRVllzUlVGQlpUdEJRVU5vUXl4aFFVRkxja1FzYVVKQlFVd3NSMEZCZVVKeFJDeEhRVUY2UWp0QlFVTklMRXRCZUZSaE96dEJRVEJVWkRzN096czdPenM3UVVGUlFVTXNlVUpCUVhGQ0xDdENRVUZaTzBGQlF6ZENMR1ZCUVU4c1MwRkJTM1JFTEdsQ1FVRmFPMEZCUTBnc1MwRndWV0U3TzBGQmMxVmtPenM3T3pzN096dEJRVkZCZFVRc1lVRkJVeXhwUWtGQlZTOUNMRWxCUVZZc1JVRkJaMEk3UVVGRGNrSXNXVUZCU1dkRExGZEJRVmRvUXl4SlFVRm1PMEZCUTBFc1dVRkJTU3hQUVVGUFFTeEpRVUZRTEV0QlFXZENMRkZCUVhCQ0xFVkJRVGhDTzBGQlF6RkNPMEZCUTBFMVF5eGxRVUZIT0VNc1RVRkJTQ3hEUVVGVkxFbEJRVllzUlVGQlowSXNaMEpCUVdoQ0xFVkJRV3RETEdOQlFXeERMRVZCUVd0RUxGZEJRV3hFTEVWQlFTdEVMR05CUVM5RUxFVkJRU3RGTEU5QlFTOUZPMEZCUTBFNFFpeDFRa0ZCVjJoRExFbEJRVmc3UVVGRFNDeFRRVXBFTEUxQlMwczdRVUZEUkN4blFrRkJTU3hEUVVGRFFTeEpRVUZNTEVWQlFWYzdRVUZEVUR0QlFVTklPMEZCUTBSblF5eDFRa0ZCVjJoRExFdEJRVXRMTEZOQlFXaENPMEZCUTBnN08wRkJSVVFzV1VGQlNTOUNMRTlCUVU5a0xGRkJRVkYzUlN4UlFVRlNMRU5CUVZnN1FVRkRRU3haUVVGSkxFTkJRVU14UkN4SlFVRk1MRVZCUVZjN1FVRkRXQ3hsUVVGUFFTeExRVUZMVkN4TlFVRk1MRWRCUVdNc1EwRkJja0lzUlVGQmQwSTdRVUZEY0VJc1owSkJRVWxSTEV0QlFVdERMRXRCUVV0UkxFZEJRVXdzUlVGQlZEdEJRVU5CTEdkQ1FVRkpia0lzVVVGQlVVd3NWVUZCVldVc1JVRkJWaXhEUVVGYU8wRkJRMEVzWjBKQlFVbFdMRXRCUVVvc1JVRkJWenRCUVVOUU8wRkJRMEZCTEhOQ1FVRk5hMElzU1VGQlRqdEJRVU5CTEhWQ1FVRlBka0lzVlVGQlZXVXNSVUZCVml4RFFVRlFPMEZCUTBnN1FVRkRTanRCUVVOS0xFdEJkbGRoT3p0QlFYbFhaRHM3T3pzN096dEJRVTlCTkVRc1owSkJRVmtzYzBKQlFWazdRVUZEY0VJc1lVRkJTMDRzVDBGQlREdEJRVU5CTEZsQlFVbG9SU3hqUVVGS08wRkJRMEVzWVVGQlN5eEpRVUZKVlN4RlFVRlVMRWxCUVdWbUxGTkJRV1lzUlVGQk1FSTdRVUZEZEVKTExHOUNRVUZSVEN4VlFVRlZaU3hGUVVGV0xFTkJRVkk3UVVGRFFTeG5Ra0ZCU1ZZc1MwRkJTaXhGUVVGWE8wRkJRMUJCTEhOQ1FVRk5UeXhQUVVGT08wRkJRMGc3UVVGRFNqdEJRVU5FTEdWQlFVOVFMRkZCUVZGR0xGZEJRVmR4UWl4SFFVRllMRVZCUVdZc1JVRkJhVU03UVVGRE4wSnVRaXhyUWtGQlRVOHNUMEZCVGp0QlFVTklPMEZCUTBSYUxHOUNRVUZaU0N4SFFVRkhTU3hUUVVGSUxFTkJRV0VzU1VGQllpeERRVUZhTzBGQlEwRkRMR3RDUVVGVkxFVkJRVlk3UVVGRFNDeExRVGxZWVRzN1FVRm5XV1E3T3pzN096dEJRVTFCTUVVc1owSkJRVmtzYjBKQlFWVkRMRmRCUVZZc1JVRkJkVUlzUTBGQlJTeERRWFJaZGtJN08wRkJkMWxrT3pzN096czdPenM3TzBGQlZVRkRMR0ZCUVZNc2FVSkJRVlZLTEZGQlFWWXNSVUZCYjBKcVJDeFJRVUZ3UWl4RlFVRTRRanRCUVVOdVF5eFpRVUZKYzBRc1VVRkJTaXhGUVVGak8wRkJRMVpxUml4bFFVRkhhMFlzU1VGQlNDeERRVUZSTEc5SFFVRlNPMEZCUTBnN08wRkJSVVJzUml4WFFVRkhiVVlzVFVGQlNDeERRVUZWUXl4SlFVRldMRU5CUVdWU0xGRkJRV1lzUlVGQmVVSnFSQ3haUVVGWkxGVkJRVlV3UkN4TFFVRldMRVZCUVdsQ08wRkJRMnhFTEdkQ1FVRkpMRU5CUVVOQkxFdEJRVXdzUlVGQldUdEJRVU5TTVVRN1FVRkRTRHRCUVVOS0xGTkJTa1E3UVVGTFNDeExRVFZhWVRzN1FVRTRXbVE3T3pzN096czdPMEZCVVVFN1FVRkRRVEpFTEhkQ1FVRnZRaXcwUWtGQlZVTXNSVUZCVml4RlFVRmpPMEZCUXpsQ0xHRkJRVXMzUXl4blFrRkJUQ3hIUVVGM1FqWkRMRXRCUVVzc1NVRkJOMEk3UVVGRFNDeExRWHBoWVRzN1FVRXlZV1JETEdsQ1FVRmhMRWxCTTJGRE8wRkJOR0ZrUXl4WlFVRlJMR3RDUVVGWk8wRkJRMmhDTEdGQlFVdEVMRmRCUVV3c1IwRkJiVUlzUlVGQmJrSTdRVUZEUVN4aFFVRkxMRWxCUVVsMlJTeEZRVUZVTEVsQlFXVm1MRk5CUVdZc1JVRkJNRUk3UVVGRGRFSXNaMEpCUVVsTExGRkJRVkZNTEZWQlFWVmxMRVZCUVZZc1EwRkJXanRCUVVOQkxHZENRVUZKYVVRc1VVRkJVVE5FTEUxQlFVMXhSQ3hSUVVGT0xFVkJRVm83UVVGRFFTeG5Ra0ZCU1Uwc1ZVRkJWWFJGTEUxQlFVMDJReXhMUVVGT0xFTkJRVmt3UWl4UFFVRXhRaXhGUVVGdFF6dEJRVU12UWl4eFFrRkJTM0ZDTEZkQlFVd3NRMEZCYVVJelJTeEpRVUZxUWl4RFFVRnpRa2tzUlVGQmRFSTdRVUZEUVZZc2MwSkJRVTEzUkN4TFFVRk9PMEZCUTBnN1FVRkRTanRCUVVOS0xFdEJkR0poT3p0QlFYZGlaREpDTEdOQlFWVXNiMEpCUVZrN1FVRkRiRUlzV1VGQlNTeERRVUZETEV0QlFVdEdMRmRCUVZZc1JVRkJkVUk3TzBGQlJYWkNMR1ZCUVU4c1MwRkJTMEVzVjBGQlRDeERRVUZwUWk5RkxFMUJRV3BDTEVkQlFUQkNMRU5CUVdwRExFVkJRVzlETzBGQlEyaERMR2RDUVVGSlVTeExRVUZMTEV0QlFVdDFSU3hYUVVGTUxFTkJRV2xDT1VRc1IwRkJha0lzUlVGQlZEdEJRVU5CTEdkQ1FVRkpia0lzVVVGQlVXbENMR1ZCUVdWUUxFVkJRV1lzUTBGQldqdEJRVU5CTEdkQ1FVRkpWaXhUUVVGVFFTeE5RVUZOTmtRc1RVRkJia0lzUlVGRFNUZEVMRTFCUVUwMlJDeE5RVUZPTzBGQlExQTdRVUZEUkN4aFFVRkxiMElzVjBGQlRDeEhRVUZ0UWl4SlFVRnVRanRCUVVOSUxFdEJiR05oT3p0QlFXOWpaRHRCUVVOQk96dEJRVVZCUnl4WlFVRlJPMEZCUTBveFJTeFpRVUZKTEVOQlFVTXNRMEZFUkR0QlFVVktORUlzWTBGQlRTeExRVVpHTzBGQlIwcFVMR2RDUVVGUk8wRkJTRW9zUzBGMlkwMDdPMEZCTm1Oa2QwUXNZVUZCVXp0QlFVTk1lRVFzWjBKQlFWRXNRMEZFU0R0QlFVVk1lVVFzYjBKQlFWazdRVUZHVUN4TFFUZGpTenM3UVVGclpHUTdPenM3T3pzN096czdPenRCUVZsQlF5eGxRVUZYTEcxQ1FVRlZiRVFzU1VGQlZpeEZRVUZuUWtNc1NVRkJhRUlzUlVGQmMwSTdRVUZETjBJc1dVRkJTV3RFTEZGQlFWRXNTMEZCUzBvc1RVRkJha0k3UVVGRFFTeGhRVUZMYkVVc1NVRkJUQ3hEUVVGVmMwVXNUVUZCVFRsRkxFVkJRV2hDTzBGQlEwRTRSU3hqUVVGTk9VVXNSVUZCVGl4SFFVRlhMRXRCUVVzd1FpeEpRVUZNTEVOQlFWVkRMRWxCUVZZc1JVRkJaMEpETEVsQlFXaENMRVZCUVhOQ2EwUXNUVUZCVFRORUxFMUJRVFZDTEVOQlFWZzdRVUZEUVRKRUxHTkJRVTFzUkN4SlFVRk9MRWRCUVdGQkxFbEJRV0k3UVVGRFFTeGxRVUZQYTBRc1RVRkJUVGxGTEVWQlFXSTdRVUZEU0N4TFFYQmxZVHM3UVVGelpXUTdPenM3T3pzN1FVRlBRU3RGTEdWQlFWY3NjVUpCUVZrN1FVRkRia0lzWVVGQlMzWkZMRWxCUVV3c1EwRkJWU3hMUVVGTGEwVXNUVUZCVEN4RFFVRlpNVVVzUlVGQmRFSTdRVUZEU0N4TFFTOWxZVHM3UVVGcFptUTdPenM3T3pzN1FVRlBRV2RHTEdkQ1FVRlpMSE5DUVVGWk8wRkJRM0JDTEdGQlFVdHNReXhMUVVGTUxFTkJRVmNzUzBGQlN6UkNMRTFCUVV3c1EwRkJXVEZGTEVWQlFYWkNPMEZCUTBFc1pVRkJUeXhMUVVGTE1FVXNUVUZCVEN4RFFVRlpNVVVzUlVGQmJrSTdRVUZEU0N4TFFUTm1ZVHM3UVVFMlptUTdPenM3T3pzN1FVRlBRV2xHTEdsQ1FVRmhMSFZDUVVGWk8wRkJRM0pDTEdGQlFVczVRaXhOUVVGTUxFTkJRVmtzUzBGQlMzVkNMRTFCUVV3c1EwRkJXVEZGTEVWQlFYaENPMEZCUTBFc1pVRkJUeXhMUVVGTE1FVXNUVUZCVEN4RFFVRlpNVVVzUlVGQmJrSTdRVUZEU0N4TFFYWm5RbUU3TzBGQmVXZENaRHM3T3pzN096czdRVUZSUVd0R0xHOUNRVUZuUWl3d1FrRkJXVHRCUVVONFFpeGxRVUZQTEV0QlFVdFNMRTFCUVV3c1EwRkJXWFpFTEUxQlFXNUNPMEZCUTBnc1MwRnVhRUpoT3p0QlFYRm9RbVE3T3pzN096czdPMEZCVVVGblJTeHZRa0ZCWjBJc2QwSkJRVlZvUlN4TlFVRldMRVZCUVd0Q08wRkJRemxDUVN4cFFrRkJVMFFzWVVGQllVTXNUVUZCWWl4RFFVRlVPMEZCUTBFc1dVRkJTVEpFTEZGQlFWRXNTMEZCUzBvc1RVRkJha0k3UVVGRFFVa3NZMEZCVFRORUxFMUJRVTRzUjBGQlpVRXNUVUZCWmp0QlFVTkJMR0ZCUVV0bExGTkJRVXdzUTBGQlpUUkRMRTFCUVUwNVJTeEZRVUZ5UWl4RlFVRjVRamhGTEUxQlFVMHpSQ3hOUVVFdlFqdEJRVU5CTEdWQlFVOHlSQ3hOUVVGTk0wUXNUVUZCWWp0QlFVTklMRXRCYm1sQ1lUczdRVUZ4YVVKa096czdPenM3T3p0QlFWRkJhVVVzYjBKQlFXZENMREJDUVVGWk8wRkJRM2hDTEdWQlFVOHNTMEZCUzNwRExGRkJRVXdzUTBGQll5eExRVUZMSzBJc1RVRkJUQ3hEUVVGWk1VVXNSVUZCTVVJc1RVRkJhME1zUzBGQlMzVkNMRlZCUVV3c1EwRkJaMEl5UWl4UFFVRjZSRHRCUVVOSUxFdEJMMmxDWVRzN1FVRnBha0prT3pzN096czdPenM3T3pzN1FVRlpRVzFETEdkQ1FVRlpMRzlDUVVGVk1VUXNTVUZCVml4RlFVRm5Ra01zU1VGQmFFSXNSVUZCYzBJN1FVRkRPVUlzWlVGQlR5eExRVUZMUml4SlFVRk1MRU5CUVZWRExFbEJRVllzUlVGQlowSkRMRkZCUVZFc1MwRkJlRUlzUlVGQkswSXNTMEZCU3l0RExFOUJRVXdzUTBGQllYaEVMRTFCUVRWRExFTkJRVkE3UVVGRFNDeExRUzlxUW1FN08wRkJhV3RDWkRzN096czdPenM3UVVGUlFXMUZMSE5DUVVGclFpd3dRa0ZCVlc1RkxFMUJRVllzUlVGQmEwSTdRVUZEYUVOQkxHbENRVUZUUkN4aFFVRmhReXhOUVVGaUxFTkJRVlE3UVVGRFFTeFpRVUZKYjBVc1ZVRkJWU3hMUVVGTFlpeE5RVUZNTEVOQlFWa3hSU3hGUVVFeFFqdEJRVU5CTEdGQlFVc3lSU3hQUVVGTUxFTkJRV0Y0UkN4TlFVRmlMRWRCUVhOQ1FTeE5RVUYwUWp0QlFVTkJMR0ZCUVVzc1NVRkJTVzVDTEVWQlFWUXNTVUZCWldZc1UwRkJaaXhGUVVFd1FqdEJRVU4wUWl4blFrRkJTVXNzVVVGQlVVd3NWVUZCVldVc1JVRkJWaXhEUVVGYU8wRkJRMEVzWjBKQlFVa3NRMEZCUTFZc1MwRkJSQ3hKUVVGVlFTeE5RVUZOVlN4RlFVRk9MRXRCUVdGMVJpeFBRVUV6UWl4RlFVRnZRenRCUVVOd1EzSkdMSGRDUVVGWlowTXNVMEZCV2l4RFFVRnpRbXhETEVWQlFYUkNMRVZCUVRCQ2JVSXNUVUZCTVVJN1FVRkRTRHRCUVVOS0xFdEJiR3hDWVRzN1FVRnZiRUprT3pzN096czdPenRCUVZGQmNVVXNjMEpCUVd0Q0xEUkNRVUZaTzBGQlF6RkNMR1ZCUVU4c1MwRkJTMklzVDBGQlRDeERRVUZoZUVRc1RVRkJjRUk3UVVGRFNDeExRVGxzUW1FN08wRkJaMjFDWkRzN096czdPenM3UVVGUlFYTkZMR2xDUVVGaExIRkNRVUZWZEVRc1QwRkJWaXhGUVVGdFFqdEJRVU0xUWl4bFFVRlBMRXRCUVV0WExFdEJRVXdzUTBGQlYxZ3NUMEZCV0N4RFFVRlFPMEZCUTBnc1MwRXhiVUpoT3p0QlFUUnRRbVE3T3pzN096czdRVUZQUVhWRUxIRkNRVUZwUWl3eVFrRkJXVHRCUVVONlFpeFpRVUZKU0N4VlFVRlZMRXRCUVV0aUxFMUJRVXdzUTBGQldURkZMRVZCUVRGQ08wRkJRMEVzV1VGQlNUSkdMRk5CUVZNc1MwRkJTMmhDTEU5QlFXeENPMEZCUTBGblFpeGxRVUZQWml4VlFVRlFMRU5CUVd0Q2NFWXNUVUZCYkVJc1IwRkJNa0lzUTBGQk0wSTdPMEZCUlVFc1lVRkJTeXhKUVVGSlVTeEZRVUZVTEVsQlFXVm1MRk5CUVdZc1JVRkJNRUk3UVVGRGRFSXNaMEpCUVVsTExGRkJRVkZNTEZWQlFWVmxMRVZCUVZZc1EwRkJXanRCUVVOQkxHZENRVUZKTEVOQlFVTldMRXRCUVVRc1NVRkJWVUVzVFVGQlRWVXNSVUZCVGl4TFFVRmhkVVlzVDBGQk0wSXNSVUZCYjBNN1FVRkRjRU1zWjBKQlFVbDBReXhSUVVGUk0wUXNUVUZCVFhGRUxGRkJRVTRzUlVGQldqdEJRVU5CTEdkQ1FVRkpUU3hWUVVGVkxFdEJRVXN4UWl4VlFVRk1MRU5CUVdkQ01rSXNUMEZCT1VJc1JVRkJkVU03UVVGRGJrTjVReXgxUWtGQlQyWXNWVUZCVUN4RFFVRnJRbWhHTEVsQlFXeENMRU5CUVhWQ1NTeEZRVUYyUWp0QlFVTkJWaXh6UWtGQlRYZEVMRXRCUVU0N1FVRkRTRHRCUVVOS08wRkJRMG9zUzBGcWIwSmhPenRCUVcxdlFtUTdPenM3T3pzN08wRkJVVUU0UXl4clFrRkJZeXh6UWtGQlZUVkdMRVZCUVZZc1JVRkJZenRCUVVONFFpeGhRVUZMYlVRc1RVRkJUQ3hEUVVGWmJrUXNSVUZCV2p0QlFVTklMRXRCTjI5Q1lUczdRVUVyYjBKa096czdPenM3TzBGQlQwRTJSaXh6UWtGQmEwSXNORUpCUVZrN1FVRkRNVUlzV1VGQlNVTXNaVUZCWlN4TFFVRkxia0lzVDBGQlRDeERRVUZoUXl4VlFVRm9RenRCUVVOQkxHRkJRVXNzU1VGQlNYWkNMRWxCUVVrc1EwRkJZaXhGUVVGblFrRXNTVUZCU1hsRExHRkJRV0YwUnl4TlFVRnFReXhGUVVGNVF5eEZRVUZGTmtRc1EwRkJNME1zUlVGQk9FTTdRVUZETVVNc1owSkJRVWx5UkN4TFFVRkxPRVlzWVVGQllYcERMRU5CUVdJc1EwRkJWRHRCUVVOQkxHZENRVUZKTDBRc1VVRkJVVXdzVlVGQlZXVXNSVUZCVml4RFFVRmFPMEZCUTBFc1owSkJRVWxXTEV0QlFVb3NSVUZEU1VFc1RVRkJUVFpFTEUxQlFVNDdRVUZEVUR0QlFVTktMRXRCT1hCQ1lUczdRVUZuY1VKa096czdPenM3T3p0QlFWRkJORU1zWjBKQlFWa3NiMEpCUVZVMVJDeFBRVUZXTEVWQlFXMUNPMEZCUXpOQ0xHVkJRVThzUzBGQlN6TkNMRWxCUVV3c1EwRkJWVEpDTEU5QlFWWXNRMEZCVUR0QlFVTklMRXRCTVhGQ1lUczdRVUUwY1VKa096czdPenM3TzBGQlQwRTJSQ3h2UWtGQlowSXNNRUpCUVZrN1FVRkRlRUlzV1VGQlNWUXNWVUZCVlN4TFFVRkxZaXhOUVVGTUxFTkJRVmt4UlN4RlFVRXhRanRCUVVOQkxHRkJRVXNzU1VGQlNVRXNSVUZCVkN4SlFVRmxaaXhUUVVGbUxFVkJRVEJDTzBGQlEzUkNMR2RDUVVGSlN5eFJRVUZSVEN4VlFVRlZaU3hGUVVGV0xFTkJRVm83UVVGRFFTeG5Ra0ZCU1N4RFFVRkRWaXhMUVVGRUxFbEJRVlZCTEUxQlFVMVZMRVZCUVU0c1MwRkJZWFZHTEU5QlFUTkNMRVZCUVc5RE8wRkJRM0JETEdkQ1FVRkpkRU1zVVVGQlVUTkVMRTFCUVUxeFJDeFJRVUZPTEVWQlFWbzdRVUZEUVN4blFrRkJTVTBzVlVGQlZTOURMRmxCUVZseFFpeFZRVUZhTEVOQlFYVkNNa0lzVDBGQmNrTXNSVUZCT0VNN1FVRkRNVU0xUkN4elFrRkJUV3RDTEVsQlFVNDdRVUZEU0R0QlFVTktPMEZCUTBvN1FVRTNja0poTEVOQlFXeENPenRCUVdkelFrRjVSaXhQUVVGUFF5eFBRVUZRTEVkQlFXbENia2dzUjBGQlIyMUNMRmRCUVVnc1IwRkJhVUpCTEZkQlFXeERJaXdpWm1sc1pTSTZJa05EUVhWa2FXOUZibWRwYm1VdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHlYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREE0TFRJd01UQWdVbWxqWVhKa2J5QlJkV1Z6WVdSaFhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVEV0TWpBeE1pQmpiMk52Y3pKa0xYZ3ViM0puWEhKY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UTXRNakF4TmlCRGFIVnJiMjVuSUZSbFkyaHViMnh2WjJsbGN5QkpibU11WEhKY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNjbHh1WEhKY2JpQm9kSFJ3T2k4dmQzZDNMbU52WTI5ek1tUXRlQzV2Y21kY2NseHVYSEpjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYSEpjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1J2WTNWdFpXNTBZWFJwYjI0Z1ptbHNaWE1nS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCMGJ5QmtaV0ZzWEhKY2JpQnBiaUIwYUdVZ1UyOW1kSGRoY21VZ2QybDBhRzkxZENCeVpYTjBjbWxqZEdsdmJpd2dhVzVqYkhWa2FXNW5JSGRwZEdodmRYUWdiR2x0YVhSaGRHbHZiaUIwYUdVZ2NtbG5hSFJ6WEhKY2JpQjBieUIxYzJVc0lHTnZjSGtzSUcxdlpHbG1lU3dnYldWeVoyVXNJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNYSEpjYmlCamIzQnBaWE1nYjJZZ2RHaGxJRk52Wm5SM1lYSmxMQ0JoYm1RZ2RHOGdjR1Z5YldsMElIQmxjbk52Ym5NZ2RHOGdkMmh2YlNCMGFHVWdVMjltZEhkaGNtVWdhWE5jY2x4dUlHWjFjbTVwYzJobFpDQjBieUJrYnlCemJ5d2djM1ZpYW1WamRDQjBieUIwYUdVZ1ptOXNiRzkzYVc1bklHTnZibVJwZEdsdmJuTTZYSEpjYmx4eVhHNGdWR2hsSUdGaWIzWmxJR052Y0hseWFXZG9kQ0J1YjNScFkyVWdZVzVrSUhSb2FYTWdjR1Z5YldsemMybHZiaUJ1YjNScFkyVWdjMmhoYkd3Z1ltVWdhVzVqYkhWa1pXUWdhVzVjY2x4dUlHRnNiQ0JqYjNCcFpYTWdiM0lnYzNWaWMzUmhiblJwWVd3Z2NHOXlkR2x2Ym5NZ2IyWWdkR2hsSUZOdlpuUjNZWEpsTGx4eVhHNWNjbHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNjbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4eVhHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEhKY2JpQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxDQkVRVTFCUjBWVElFOVNJRTlVU0VWU1hISmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHlYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4eVhHNGdWRWhGSUZOUFJsUlhRVkpGTGx4eVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2NseHVYSEpjYm1OdmJuTjBJRUYxWkdsdklEMGdjbVZ4ZFdseVpTZ25MaTlEUTBGMVpHbHZKeWs3WEhKY2JtTnZibk4wSUVGMVpHbHZRMnhwY0NBOUlISmxjWFZwY21Vb0p5NHVMMk52Y21VdllYTnpaWFJ6TDBORFFYVmthVzlEYkdsd0p5azdYSEpjYm1OdmJuTjBJR3B6SUQwZ1kyTXVhbk03WEhKY2JseHlYRzVzWlhRZ1gybHVjM1JoYm1ObFNXUWdQU0F3TzF4eVhHNXNaWFFnWDJsa01tRjFaR2x2SUQwZ2FuTXVZM0psWVhSbFRXRndLSFJ5ZFdVcE8xeHlYRzVzWlhRZ1gzVnliREpwWkNBOUlIdDlPMXh5WEc1c1pYUWdYMkYxWkdsdlVHOXZiQ0E5SUZ0ZE8xeHlYRzVjY2x4dWJHVjBJSEpsWTNsamJHVkJkV1JwYnlBOUlHWjFibU4wYVc5dUlDaGhkV1JwYnlrZ2UxeHlYRzRnSUNBZ1lYVmthVzh1WDJacGJtbHphRU5oYkd4aVlXTnJJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lHbG1JQ2hmWVhWa2FXOVFiMjlzTG14bGJtZDBhQ0E4SURNeUtTQjdYSEpjYmlBZ0lDQWdJQ0FnWVhWa2FXOHViMlptS0NkbGJtUmxaQ2NwTzF4eVhHNGdJQ0FnSUNBZ0lHRjFaR2x2TG05bVppZ25jM1J2Y0NjcE8xeHlYRzRnSUNBZ0lDQWdJR0YxWkdsdkxuTnlZeUE5SUc1MWJHdzdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1NXNGdZMkZ6WlNCeVpYQmxZWFJzZVNCeVpXTjVZMnhsSUdGMVpHbHZYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmZZWFZrYVc5UWIyOXNMbWx1WTJ4MVpHVnpLR0YxWkdsdktTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmZZWFZrYVc5UWIyOXNMbkIxYzJnb1lYVmthVzhwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lHRjFaR2x2TG1SbGMzUnliM2tvS1R0Y2NseHVJQ0FnSUgxY2NseHVmVHRjY2x4dVhISmNibXhsZENCblpYUkJkV1JwYjBaeWIyMVFZWFJvSUQwZ1puVnVZM1JwYjI0Z0tIQmhkR2dwSUh0Y2NseHVJQ0FnSUhaaGNpQnBaQ0E5SUY5cGJuTjBZVzVqWlVsa0t5czdYSEpjYmlBZ0lDQjJZWElnYkdsemRDQTlJRjkxY213eWFXUmJjR0YwYUYwN1hISmNiaUFnSUNCcFppQW9JV3hwYzNRcElIdGNjbHh1SUNBZ0lDQWdJQ0JzYVhOMElEMGdYM1Z5YkRKcFpGdHdZWFJvWFNBOUlGdGRPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdhV1lnS0dGMVpHbHZSVzVuYVc1bExsOXRZWGhCZFdScGIwbHVjM1JoYm1ObElEdzlJR3hwYzNRdWJHVnVaM1JvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUc5c1pFbGtJRDBnYkdsemRDNXphR2xtZENncE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdmJHUkJkV1JwYnlBOUlHZGxkRUYxWkdsdlJuSnZiVWxrS0c5c1pFbGtLVHRjY2x4dUlDQWdJQ0FnSUNBdkx5QlRkRzl3SUhkcGJHd2djbVZqZVdOc1pTQmhkV1JwYnlCaGRYUnZiV0YwYVdOaGJHeDVJR0o1SUdWMlpXNTBJR05oYkd4aVlXTnJYSEpjYmlBZ0lDQWdJQ0FnYjJ4a1FYVmthVzh1YzNSdmNDZ3BPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQmhkV1JwYnlBOUlGOWhkV1JwYjFCdmIyd3VjRzl3S0NrZ2ZId2dibVYzSUVGMVpHbHZLQ2s3WEhKY2JpQWdJQ0IyWVhJZ1kyRnNiR0poWTJzZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR0YxWkdsdlNXNU1hWE4wSUQwZ1oyVjBRWFZrYVc5R2NtOXRTV1FvZEdocGN5NXBaQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR0YxWkdsdlNXNU1hWE4wS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdSbGJHVjBaU0JmYVdReVlYVmthVzliZEdocGN5NXBaRjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCcGJtUmxlQ0E5SUd4cGMzUXVhVzVrWlhoUFppaDBhR2x6TG1sa0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyTXVhbk11WVhKeVlYa3VabUZ6ZEZKbGJXOTJaVUYwS0d4cGMzUXNJR2x1WkdWNEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVmplV05zWlVGMVpHbHZLSFJvYVhNcE8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0JoZFdScGJ5NXZiaWduWlc1a1pXUW5MQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMlpwYm1semFFTmhiR3hpWVdOcktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJacGJtbHphRU5oYkd4aVlXTnJLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR05oYkd4aVlXTnJMbU5oYkd3b2RHaHBjeWs3WEhKY2JpQWdJQ0I5TENCaGRXUnBieWs3WEhKY2JseHlYRzRnSUNBZ1lYVmthVzh1YjI0b0ozTjBiM0FuTENCallXeHNZbUZqYXl3Z1lYVmthVzhwTzF4eVhHNGdJQ0FnWVhWa2FXOHVhV1FnUFNCcFpEdGNjbHh1SUNBZ0lGOXBaREpoZFdScGIxdHBaRjBnUFNCaGRXUnBienRjY2x4dUlDQWdJR3hwYzNRdWNIVnphQ2hwWkNrN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHRjFaR2x2TzF4eVhHNTlPMXh5WEc1Y2NseHViR1YwSUdkbGRFRjFaR2x2Um5KdmJVbGtJRDBnWm5WdVkzUnBiMjRnS0dsa0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1gybGtNbUYxWkdsdlcybGtYVHRjY2x4dWZUdGNjbHh1WEhKY2JteGxkQ0JvWVc1a2JHVldiMngxYldVZ0lEMGdablZ1WTNScGIyNGdLSFp2YkhWdFpTa2dlMXh5WEc0Z0lDQWdhV1lnS0hadmJIVnRaU0E5UFQwZ2RXNWtaV1pwYm1Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnTHk4Z2MyVjBJR1JsWm1GMWJIUWdkbTlzZFcxbElHRnpJREZjY2x4dUlDQWdJQ0FnSUNCMmIyeDFiV1VnUFNBeE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1pXeHpaU0JwWmlBb2RIbHdaVzltSUhadmJIVnRaU0E5UFQwZ0ozTjBjbWx1WnljcElIdGNjbHh1SUNBZ0lDQWdJQ0IyYjJ4MWJXVWdQU0JPZFcxaVpYSXVjR0Z5YzJWR2JHOWhkQ2gyYjJ4MWJXVXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdjbVYwZFhKdUlIWnZiSFZ0WlR0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdUlHTmpMbUYxWkdsdlJXNW5hVzVsSUdseklIUm9aU0J6YVc1bmJHVjBiMjRnYjJKcVpXTjBMQ0JwZENCd2NtOTJhV1JsSUhOcGJYQnNaU0JoZFdScGJ5QkJVRWx6TGx4eVhHNGdLaUFoSTNwb1hISmNiaUFxSUdOakxtRjFaR2x2Wlc1bmFXNWw1cGl2NVkyVjVMNkw1YSs1NkxHaDQ0Q0NQR0p5THo1Y2NseHVJQ29nNUxpNzZLYUI1NVNvNXAybDVwS3Q1cFMrNlorejZhS1I3N3lNNXBLdDVwUys1NXFFNXBlMjVZQ1o1THlhNkwrVTVadWU1TGlBNUxpcUlHRjFaR2x2U1VUdnZJemt1WXZsa0k3cGc3M2xqNi9rdTZYcGdKcm92NGZvdjVua3VLb2dZWFZrYVc5SlJDRG1uYVhtazQza3Zaem92NW5rdUtycG43UHBvcEhscjdub3NhSGpnSUk4WW5JdlBseHlYRzRnS2lEa3VJM2t2Yi9ubEtqbm1vVG1sN2JsZ0pudnZJem9yN2ZrdmIvbmxLZ2dZMk11WVhWa2FXOUZibWRwYm1VdWRXNWpZV05vWlNobWFXeGxVR0YwYUNrN0lPaS9tK2loak9pMWhPYTZrT21IaXVhVXZpQThZbkl2UGx4eVhHNGdLaURtczZqbWhJL3Z2Sm84WW5JdlBseHlYRzRnS2lEbG5LZ2dRVzVrY205cFpDRG5zN3ZudTUvbXRZL29wNGpsbWFqa3VJcnZ2SXprdUkzbGtJem10WS9vcDRqbG1hanZ2SXprdUkzbGtJem5pWWptbkt6bm1vVG1sWWptbnB6a3VJM2xzTDNubTdqbGtJempnSUk4WW5JdlBseHlYRzRnS2lEbXI1VGxwb0xvcjdUdnZKcmxwS2ZscEpybWxiRG10WS9vcDRqbG1hanBnNzNwbklEb3BvSG5sS2ptaUxmbmlhbm5rSWJrdXFUa3VwTG1pWTNsajYva3U2WGx2SURscDR2bWtxM21sTDdwbjdQbWxZanZ2SXptbklua3VJRGt1cHZrdUkzbWxLL21qSUVnVjJWaVFYVmthVy92dkl3OFluSXZQbHh5WEc0Z0tpRG1uSW5rdUlEa3Vwdmt1STNtbEsvbWpJSGxwSnJwbjdQb3Zham1rcTNtbEw3amdJTG1nTHZrdVl2bHBvTG1ucHpscjducG43UGt1WkRrdnAzb3RaYm1yNVRvdm9QbHZMcnZ2SXpvcjdmbGdacmxzTDNsajYvb2c3M2xwSnJubW9UbXRZdm9yNVhqZ0lKY2NseHVJQ29nUUdOc1lYTnpJR0YxWkdsdlJXNW5hVzVsWEhKY2JpQXFJRUJ6ZEdGMGFXTmNjbHh1SUNvdlhISmNiblpoY2lCaGRXUnBiMFZ1WjJsdVpTQTlJSHRjY2x4dVhISmNiaUFnSUNCQmRXUnBiMU4wWVhSbE9pQkJkV1JwYnk1VGRHRjBaU3hjY2x4dVhISmNiaUFnSUNCZmJXRjRWMlZpUVhWa2FXOVRhWHBsT2lBeU1EazNNVFV5TENBdkx5QXlNRFE0YTJJZ0tpQXhNREkwWEhKY2JpQWdJQ0JmYldGNFFYVmthVzlKYm5OMFlXNWpaVG9nTWpRc1hISmNibHh5WEc0Z0lDQWdYMmxrTW1GMVpHbHZPaUJmYVdReVlYVmthVzhzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGQnNZWGtnWVhWa2FXOHVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPYVNyZWFVdnVtZnMrbWlrVnh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J3YkdGNVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwRjFaR2x2UTJ4cGNIMGdZMnhwY0NBdElGUm9aU0JoZFdScGJ5QmpiR2x3SUhSdklIQnNZWGt1WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUd4dmIzQWdMU0JYYUdWMGFHVnlJSFJvWlNCdGRYTnBZeUJzYjI5d0lHOXlJRzV2ZEM1Y2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCMmIyeDFiV1VnTFNCV2IyeDFiV1VnYzJsNlpTNWNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMDUxYldKbGNuMGdZWFZrYVc5SlpGeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJR05qTG14dllXUmxjaTVzYjJGa1VtVnpLSFZ5YkN3Z1kyTXVRWFZrYVc5RGJHbHdMQ0JtZFc1amRHbHZiaUFvWlhKeUxDQmpiR2x3S1NCN1hISmNiaUFnSUNBZ0tpQWdJQ0FnZG1GeUlHRjFaR2x2U1VRZ1BTQmpZeTVoZFdScGIwVnVaMmx1WlM1d2JHRjVLR05zYVhBc0lHWmhiSE5sTENBd0xqVXBPMXh5WEc0Z0lDQWdJQ29nZlNrN1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQnNZWGs2SUdaMWJtTjBhVzl1SUNoamJHbHdMQ0JzYjI5d0xDQjJiMngxYldVdktpd2djSEp2Wm1sc1pTb3ZLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEJoZEdnZ1BTQmpiR2x3TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJoZFdScGJ6dGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUdOc2FYQWdQVDA5SUNkemRISnBibWNuS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUM4dklHSmhZMnQzWVhKa0lHTnZiWEJoZEdsaWFXeHBkSGtnYzJsdVkyVWdNUzR4TUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVTVVFvT0RRd01Td2dKMk5qTG1GMVpHbHZSVzVuYVc1bEp5d2dKMk5qTGtGMVpHbHZRMnhwY0Njc0lDZEJkV1JwYjBOc2FYQW5MQ0FuWTJNdVFYVmthVzlEYkdsd0p5d2dKMkYxWkdsdkp5azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQmhkR2dnUFNCamJHbHdPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJzYjJGa0lHTnNhWEJjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZWFZrYVc4Z1BTQm5aWFJCZFdScGIwWnliMjFRWVhSb0tIQmhkR2dwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JCZFdScGIwTnNhWEF1WDJ4dllXUkNlVlZ5YkNod1lYUm9MQ0JtZFc1amRHbHZiaUFvWlhKeUxDQmpiR2x3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWTJ4cGNDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjFaR2x2TG5OeVl5QTlJR05zYVhBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tDRmpiR2x3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY0dGMGFDQTlJR05zYVhBdWJtRjBhWFpsVlhKc08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGRXUnBieUE5SUdkbGRFRjFaR2x2Um5KdmJWQmhkR2dvY0dGMGFDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjFaR2x2TG5OeVl5QTlJR05zYVhBN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmhkV1JwYnk1elpYUk1iMjl3S0d4dmIzQWdmSHdnWm1Gc2MyVXBPMXh5WEc0Z0lDQWdJQ0FnSUhadmJIVnRaU0E5SUdoaGJtUnNaVlp2YkhWdFpTaDJiMngxYldVcE8xeHlYRzRnSUNBZ0lDQWdJR0YxWkdsdkxuTmxkRlp2YkhWdFpTaDJiMngxYldVcE8xeHlYRzRnSUNBZ0lDQWdJR0YxWkdsdkxuQnNZWGtvS1R0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR0YxWkdsdkxtbGtPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJQ0VqWlc0Z1UyVjBJR0YxWkdsdklHeHZiM0F1WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2l1dnVlOXJ1bWZzK21pa2VhWXIrV1FwdVcrcXVlT3IrT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSTWIyOXdYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdZWFZrYVc5SlJDQXRJR0YxWkdsdklHbGtMbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRDYjI5c1pXRnVmU0JzYjI5d0lDMGdWMmhsZEdobGNpQmplV05zWlM1Y2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQmpZeTVoZFdScGIwVnVaMmx1WlM1elpYUk1iMjl3S0dsa0xDQjBjblZsS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2MyVjBURzl2Y0RvZ1puVnVZM1JwYjI0Z0tHRjFaR2x2U1VRc0lHeHZiM0FwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhWa2FXOGdQU0JuWlhSQmRXUnBiMFp5YjIxSlpDaGhkV1JwYjBsRUtUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXRjFaR2x2SUh4OElDRmhkV1JwYnk1elpYUk1iMjl3S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnWVhWa2FXOHVjMlYwVEc5dmNDaHNiMjl3S1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRWRsZENCaGRXUnBieUJqZVdOc1pTQnpkR0YwWlM1Y2NseHVJQ0FnSUNBcUlDRWplbWdnNkk2MzVZK1c2Wit6NmFLUjU1cUU1YjZxNTQ2djU0cTI1b0NCNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHbHpURzl2Y0Z4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdGMVpHbHZTVVFnTFNCaGRXUnBieUJwWkM1Y2NseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwSnZiMnhsWVc1OUlGZG9aWFJvWlhJZ1kzbGpiR1V1WEhKY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4eVhHNGdJQ0FnSUNvZ1kyTXVZWFZrYVc5RmJtZHBibVV1YVhOTWIyOXdLR2xrS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2FYTk1iMjl3T2lCbWRXNWpkR2x2YmlBb1lYVmthVzlKUkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCaGRXUnBieUE5SUdkbGRFRjFaR2x2Um5KdmJVbGtLR0YxWkdsdlNVUXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hZWFZrYVc4Z2ZId2dJV0YxWkdsdkxtZGxkRXh2YjNBcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJtWVd4elpUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWFZrYVc4dVoyVjBURzl2Y0NncE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVTJWMElIUm9aU0IyYjJ4MWJXVWdiMllnWVhWa2FXOHVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPaXV2dWU5cnVtZnMrbUhqKys4aURBdU1DQitJREV1TU8rOGllT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSV2IyeDFiV1ZjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JoZFdScGIwbEVJQzBnWVhWa2FXOGdhV1F1WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnZG05c2RXMWxJQzBnVm05c2RXMWxJRzExYzNRZ1ltVWdhVzRnTUM0d2ZqRXVNQ0F1WEhKY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4eVhHNGdJQ0FnSUNvZ1kyTXVZWFZrYVc5RmJtZHBibVV1YzJWMFZtOXNkVzFsS0dsa0xDQXdMalVwTzF4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCelpYUldiMngxYldVNklHWjFibU4wYVc5dUlDaGhkV1JwYjBsRUxDQjJiMngxYldVcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ1lYVmthVzhnUFNCblpYUkJkV1JwYjBaeWIyMUpaQ2hoZFdScGIwbEVLVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9ZWFZrYVc4cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lYVmthVzh1YzJWMFZtOXNkVzFsS0hadmJIVnRaU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVkdobElIWnZiSFZ0WlNCdlppQjBhR1VnYlhWemFXTWdiV0Y0SUhaaGJIVmxJR2x6SURFdU1DeDBhR1VnYldsdUlIWmhiSFZsSUdseklEQXVNQ0F1WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2lPdCtXUGx1bWZzK21IaisrOGlEQXVNQ0IrSURFdU1PKzhpZU9BZ2x4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUldiMngxYldWY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCaGRXUnBiMGxFSUMwZ1lYVmthVzhnYVdRdVhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdE9kVzFpWlhKOVhISmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHlYRzRnSUNBZ0lDb2dkbUZ5SUhadmJIVnRaU0E5SUdOakxtRjFaR2x2Ulc1bmFXNWxMbWRsZEZadmJIVnRaU2hwWkNrN1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHZGxkRlp2YkhWdFpUb2dablZ1WTNScGIyNGdLR0YxWkdsdlNVUXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZWFZrYVc4Z1BTQm5aWFJCZFdScGIwWnliMjFKWkNoaGRXUnBiMGxFS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1lYVmthVzhnUHlCaGRXUnBieTVuWlhSV2IyeDFiV1VvS1NBNklERTdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCVFpYUWdZM1Z5Y21WdWRDQjBhVzFsWEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2l1dnVlOXJ1VzlrK1dKamVlYWhPbWZzK21pa2VhWHR1bVh0T09BZ2x4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUkRkWEp5Wlc1MFZHbHRaVnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR0YxWkdsdlNVUWdMU0JoZFdScGJ5QnBaQzVjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J6WldNZ0xTQmpkWEp5Wlc1MElIUnBiV1V1WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4eVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2NseHVJQ0FnSUNBcUlHTmpMbUYxWkdsdlJXNW5hVzVsTG5ObGRFTjFjbkpsYm5SVWFXMWxLR2xrTENBeUtUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjMlYwUTNWeWNtVnVkRlJwYldVNklHWjFibU4wYVc5dUlDaGhkV1JwYjBsRUxDQnpaV01wSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhWa2FXOGdQU0JuWlhSQmRXUnBiMFp5YjIxSlpDaGhkV1JwYjBsRUtUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1lYVmthVzhwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWa2FXOHVjMlYwUTNWeWNtVnVkRlJwYldVb2MyVmpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUNFalpXNGdSMlYwSUdOMWNuSmxiblFnZEdsdFpWeHlYRzRnSUNBZ0lDb2dJU042YUNEb2pyZmxqNWJsdlpQbGlZM25tb1RwbjdQcG9wSG1rcTNtbEw3bWw3YnBsN1RqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1oyVjBRM1Z5Y21WdWRGUnBiV1ZjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JoZFdScGIwbEVJQzBnWVhWa2FXOGdhV1F1WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0T2RXMWlaWEo5SUdGMVpHbHZJR04xY25KbGJuUWdkR2x0WlM1Y2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQjJZWElnZEdsdFpTQTlJR05qTG1GMVpHbHZSVzVuYVc1bExtZGxkRU4xY25KbGJuUlVhVzFsS0dsa0tUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdaMlYwUTNWeWNtVnVkRlJwYldVNklHWjFibU4wYVc5dUlDaGhkV1JwYjBsRUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHRjFaR2x2SUQwZ1oyVjBRWFZrYVc5R2NtOXRTV1FvWVhWa2FXOUpSQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdGMVpHbHZJRDhnWVhWa2FXOHVaMlYwUTNWeWNtVnVkRlJwYldVb0tTQTZJREE3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQkhaWFFnWVhWa2FXOGdaSFZ5WVhScGIyNWNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZJNjM1WStXNlorejZhS1I1b0M3NXBlMjZaVy80NENDWEhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdkbGRFUjFjbUYwYVc5dVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1lYVmthVzlKUkNBdElHRjFaR2x2SUdsa0xseHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZTQmhkV1JwYnlCa2RYSmhkR2x2Ymk1Y2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQjJZWElnZEdsdFpTQTlJR05qTG1GMVpHbHZSVzVuYVc1bExtZGxkRVIxY21GMGFXOXVLR2xrS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ1oyVjBSSFZ5WVhScGIyNDZJR1oxYm1OMGFXOXVJQ2hoZFdScGIwbEVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR0YxWkdsdklEMGdaMlYwUVhWa2FXOUdjbTl0U1dRb1lYVmthVzlKUkNrN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHRjFaR2x2SUQ4Z1lYVmthVzh1WjJWMFJIVnlZWFJwYjI0b0tTQTZJREE3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQkhaWFFnWVhWa2FXOGdjM1JoZEdWY2NseHVJQ0FnSUNBcUlDRWplbWdnNkk2MzVZK1c2Wit6NmFLUjU0cTI1b0NCNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRk4wWVhSbFhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1lYVmthVzlKUkNBdElHRjFaR2x2SUdsa0xseHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdZWFZrYVc5RmJtZHBibVV1UVhWa2FXOVRkR0YwWlgwZ1lYVmthVzhnWkhWeVlYUnBiMjR1WEhKY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4eVhHNGdJQ0FnSUNvZ2RtRnlJSE4wWVhSbElEMGdZMk11WVhWa2FXOUZibWRwYm1VdVoyVjBVM1JoZEdVb2FXUXBPMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JuWlhSVGRHRjBaVG9nWm5WdVkzUnBiMjRnS0dGMVpHbHZTVVFwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhWa2FXOGdQU0JuWlhSQmRXUnBiMFp5YjIxSlpDaGhkV1JwYjBsRUtUdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdZWFZrYVc4Z1B5QmhkV1JwYnk1blpYUlRkR0YwWlNncElEb2dkR2hwY3k1QmRXUnBiMU4wWVhSbExrVlNVazlTTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUNFalpXNGdVMlYwSUVGMVpHbHZJR1pwYm1semFDQmpZV3hzWW1GamExeHlYRzRnSUNBZ0lDb2dJU042YUNEb3JyN252YTdrdUlEa3VLcnBuN1Bwb3BIbnU1UG1uWi9sa0k3bm1vVGxtNTdvc0lOY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBSbWx1YVhOb1EyRnNiR0poWTJ0Y2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCaGRXUnBiMGxFSUMwZ1lYVmthVzhnYVdRdVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpZV3hzWW1GamF5QXRJR3h2WVdSbFpDQmpZV3hzWW1GamF5NWNjbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYSEpjYmlBZ0lDQWdLaUJqWXk1aGRXUnBiMFZ1WjJsdVpTNXpaWFJHYVc1cGMyaERZV3hzWW1GamF5aHBaQ3dnWm5WdVkzUnBiMjRnS0NrZ2UzMHBPMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0J6WlhSR2FXNXBjMmhEWVd4c1ltRmphem9nWm5WdVkzUnBiMjRnS0dGMVpHbHZTVVFzSUdOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdGMVpHbHZJRDBnWjJWMFFYVmthVzlHY205dFNXUW9ZWFZrYVc5SlJDazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRmhkV1JwYnlsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUdGMVpHbHZMbDltYVc1cGMyaERZV3hzWW1GamF5QTlJR05oYkd4aVlXTnJPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJQ0VqWlc0Z1VHRjFjMlVnY0d4aGVXbHVaeUJoZFdScGJ5NWNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzVwcUM1WUdjNXEyajVaeW81cEt0NXBTKzZaK3o2YUtSNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lIQmhkWE5sWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnWVhWa2FXOUpSQ0F0SUZSb1pTQnlaWFIxY200Z2RtRnNkV1VnYjJZZ1puVnVZM1JwYjI0Z2NHeGhlUzVjY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCall5NWhkV1JwYjBWdVoybHVaUzV3WVhWelpTaGhkV1JwYjBsRUtUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjR0YxYzJVNklHWjFibU4wYVc5dUlDaGhkV1JwYjBsRUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHRjFaR2x2SUQwZ1oyVjBRWFZrYVc5R2NtOXRTV1FvWVhWa2FXOUpSQ2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR0YxWkdsdktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjFaR2x2TG5CaGRYTmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdYM0JoZFhObFNVUkRZV05vWlRvZ1cxMHNYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUNFalpXNGdVR0YxYzJVZ1lXeHNJSEJzWVhscGJtY2dZWFZrYVc5Y2NseHVJQ0FnSUNBcUlDRWplbWdnNXBxQzVZR2M1NDZ3NVp5bzVxMmo1WnlvNXBLdDVwUys1NXFFNW9tQTVweUo2Wit6NmFLUjQ0Q0NYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSEJoZFhObFFXeHNYSEpjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh5WEc0Z0lDQWdJQ29nWTJNdVlYVmthVzlGYm1kcGJtVXVjR0YxYzJWQmJHd29LVHRjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnY0dGMWMyVkJiR3c2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwWkNCcGJpQmZhV1F5WVhWa2FXOHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGMVpHbHZJRDBnWDJsa01tRjFaR2x2VzJsa1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSE4wWVhSbElEMGdZWFZrYVc4dVoyVjBVM1JoZEdVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSE4wWVhSbElEMDlQU0JCZFdScGJ5NVRkR0YwWlM1UVRFRlpTVTVIS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5d1lYVnpaVWxFUTJGamFHVXVjSFZ6YUNocFpDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFdScGJ5NXdZWFZ6WlNncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJQ0VqWlc0Z1VtVnpkVzFsSUhCc1lYbHBibWNnWVhWa2FXOHVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPYUJvdVdramVhU3JlYVV2dWFNaCtXdW11ZWFoT21mcyttaWtlT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J5WlhOMWJXVmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmhkV1JwYjBsRUlDMGdWR2hsSUhKbGRIVnliaUIyWVd4MVpTQnZaaUJtZFc1amRHbHZiaUJ3YkdGNUxseHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJR05qTG1GMVpHbHZSVzVuYVc1bExuSmxjM1Z0WlNoaGRXUnBiMGxFS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NtVnpkVzFsT2lCbWRXNWpkR2x2YmlBb1lYVmthVzlKUkNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCaGRXUnBieUE5SUdkbGRFRjFaR2x2Um5KdmJVbGtLR0YxWkdsdlNVUXBPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGhkV1JwYnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGRXUnBieTV5WlhOMWJXVW9LVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJTWlhOMWJXVWdZV3hzSUhCc1lYbHBibWNnWVhWa2FXOHVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPYUJvdVdramVhU3JlYVV2dWFKZ09hY2llUzVpK1dKamVhYWd1V0JuT2VhaE9hSmdPYWNpZW1mcyttaWtlT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J5WlhOMWJXVkJiR3hjY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCall5NWhkV1JwYjBWdVoybHVaUzV5WlhOMWJXVkJiR3dvS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NtVnpkVzFsUVd4c09pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQjBhR2x6TGw5d1lYVnpaVWxFUTJGamFHVXViR1Z1WjNSb095QXJLMmtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHbGtJRDBnZEdocGN5NWZjR0YxYzJWSlJFTmhZMmhsVzJsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWFZrYVc4Z1BTQm5aWFJCZFdScGIwWnliMjFKWkNocFpDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hoZFdScGJ5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR0YxWkdsdkxuSmxjM1Z0WlNncE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl3WVhWelpVbEVRMkZqYUdVdWJHVnVaM1JvSUQwZ01EdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUZOMGIzQWdjR3hoZVdsdVp5QmhkV1JwYnk1Y2NseHVJQ0FnSUNBcUlDRWplbWdnNVlHYzVxMmk1cEt0NXBTKzVveUg1YTZhNlorejZhS1I0NENDWEhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhOMGIzQmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQmhkV1JwYjBsRUlDMGdWR2hsSUhKbGRIVnliaUIyWVd4MVpTQnZaaUJtZFc1amRHbHZiaUJ3YkdGNUxseHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJR05qTG1GMVpHbHZSVzVuYVc1bExuTjBiM0FvWVhWa2FXOUpSQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhOMGIzQTZJR1oxYm1OMGFXOXVJQ2hoZFdScGIwbEVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR0YxWkdsdklEMGdaMlYwUVhWa2FXOUdjbTl0U1dRb1lYVmthVzlKUkNrN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dGMVpHbHZLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUZOMGIzQWdkMmxzYkNCeVpXTjVZMnhsSUdGMVpHbHZJR0YxZEc5dFlYUnBZMkZzYkhrZ1lua2daWFpsYm5RZ1kyRnNiR0poWTJ0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWa2FXOHVjM1J2Y0NncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCVGRHOXdJR0ZzYkNCd2JHRjVhVzVuSUdGMVpHbHZMbHh5WEc0Z0lDQWdJQ29nSVNONmFDRGxnWnptcmFMbXJhUGxuS2pta3EzbWxMN25tb1RtaVlEbW5JbnBuN1Bwb3BIamdJSmNjbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjM1J2Y0VGc2JGeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJR05qTG1GMVpHbHZSVzVuYVc1bExuTjBiM0JCYkd3b0tUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjM1J2Y0VGc2JEb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvZG1GeUlHbGtJR2x1SUY5cFpESmhkV1JwYnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWFZrYVc4Z1BTQmZhV1F5WVhWa2FXOWJhV1JkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYVmthVzhwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk4wYjNBZ2QybHNiQ0J5WldONVkyeGxJR0YxWkdsdklHRjFkRzl0WVhScFkyRnNiSGtnWW5rZ1pYWmxiblFnWTJGc2JHSmhZMnRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMVpHbHZMbk4wYjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGTmxkQ0IxY0NCaGJpQmhkV1JwYnlCallXNGdaMlZ1WlhKaGRHVWdZU0JtWlhjZ1pYaGhiWEJzWlhNdVhISmNiaUFnSUNBZ0tpQWhJM3BvSU9pdXZ1ZTlydVM0Z09TNHF1bWZzK21pa2VXUHIrUzdwZWl1dnVlOXJ1V0hvT1M0cXVXdW51UytpMXh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSTllYaEJkV1JwYjBsdWMzUmhibU5sWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYm5WdElDMGdZU0J1ZFcxaVpYSWdiMllnYVc1emRHRnVZMlZ6SUhSdklHSmxJR055WldGMFpXUWdabkp2YlNCM2FYUm9hVzRnWVc0Z1lYVmthVzljY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCall5NWhkV1JwYjBWdVoybHVaUzV6WlhSTllYaEJkV1JwYjBsdWMzUmhibU5sS0RJd0tUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjMlYwVFdGNFFYVmthVzlKYm5OMFlXNWpaVG9nWm5WdVkzUnBiMjRnS0c1MWJTa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFoZUVGMVpHbHZTVzV6ZEdGdVkyVWdQU0J1ZFcwN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJIWlhSMGFXNW5JR0YxWkdsdklHTmhiaUJ3Y205a2RXTmxJSE5sZG1WeVlXd2daWGhoYlhCc1pYTXVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPaU90K1dQbHVTNGdPUzRxdW1mcyttaWtlV1ByK1M3cGVpdXZ1ZTlydVdIb09TNHF1V3VudVMraTF4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUk5ZWGhCZFdScGIwbHVjM1JoYm1ObFhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdE9kVzFpWlhKOUlHRWdMU0J1ZFcxaVpYSWdiMllnYVc1emRHRnVZMlZ6SUhSdklHSmxJR055WldGMFpXUWdabkp2YlNCM2FYUm9hVzRnWVc0Z1lYVmthVzljY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCall5NWhkV1JwYjBWdVoybHVaUzVuWlhSTllYaEJkV1JwYjBsdWMzUmhibU5sS0NrN1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHZGxkRTFoZUVGMVpHbHZTVzV6ZEdGdVkyVTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTVmYldGNFFYVmthVzlKYm5OMFlXNWpaVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGVnViRzloWkNCMGFHVWdjSEpsYkc5aFpHVmtJR0YxWkdsdklHWnliMjBnYVc1MFpYSnVZV3dnWW5WbVptVnlMbHh5WEc0Z0lDQWdJQ29nSVNONmFDRGxqYmpvdmIzcG9vVGxpcURvdmIzbm1vVHBuN1Bwb3BIamdJSmNjbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdkVzVqWVdOb1pWeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEJkV1JwYjBOc2FYQjlJR05zYVhCY2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQmpZeTVoZFdScGIwVnVaMmx1WlM1MWJtTmhZMmhsS0dacGJHVlFZWFJvS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2RXNWpZV05vWlRvZ1puVnVZM1JwYjI0Z0tHTnNhWEFwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWm1sc1pWQmhkR2dnUFNCamJHbHdPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBlWEJsYjJZZ1kyeHBjQ0E5UFQwZ0ozTjBjbWx1WnljcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZbUZqYTNkaGNtUWdZMjl0Y0dGMGFXSnBiR2wwZVNCemFXNWpaU0F4TGpFd1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdOakxuZGhjbTVKUkNnNE5EQXhMQ0FuWTJNdVlYVmthVzlGYm1kcGJtVW5MQ0FuWTJNdVFYVmthVzlEYkdsd0p5d2dKMEYxWkdsdlEyeHBjQ2NzSUNkall5NUJkV1JwYjBOc2FYQW5MQ0FuWVhWa2FXOG5LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzWlZCaGRHZ2dQU0JqYkdsd08xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGamJHbHdLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabWxzWlZCaGRHZ2dQU0JqYkdsd0xtNWhkR2wyWlZWeWJEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCc2FYTjBJRDBnWDNWeWJESnBaRnRtYVd4bFVHRjBhRjA3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0ZzYVhOMEtTQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHeHBjM1F1YkdWdVozUm9JRDRnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdhV1FnUFNCc2FYTjBMbkJ2Y0NncE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdZWFZrYVc4Z1BTQmZhV1F5WVhWa2FXOWJhV1JkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1lYVmthVzhwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJRk4wYjNBZ2QybHNiQ0J5WldONVkyeGxJR0YxWkdsdklHRjFkRzl0WVhScFkyRnNiSGtnWW5rZ1pYWmxiblFnWTJGc2JHSmhZMnRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdGMVpHbHZMbk4wYjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1JsYkdWMFpTQmZhV1F5WVhWa2FXOWJhV1JkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVlc1c2IyRmtJR0ZzYkNCaGRXUnBieUJtY205dElHbHVkR1Z5Ym1Gc0lHSjFabVpsY2k1Y2NseHVJQ0FnSUNBcUlDRWplbWdnNVkyNDZMMjk1b21BNXB5SjZaK3o2YUtSNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lIVnVZMkZqYUdWQmJHeGNjbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYSEpjYmlBZ0lDQWdLaUJqWXk1aGRXUnBiMFZ1WjJsdVpTNTFibU5oWTJobFFXeHNLQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhWdVkyRmphR1ZCYkd3NklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbk4wYjNCQmJHd29LVHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdZWFZrYVc4N1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoc1pYUWdhV1FnYVc0Z1gybGtNbUYxWkdsdktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHRjFaR2x2SUQwZ1gybGtNbUYxWkdsdlcybGtYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dGMVpHbHZLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGRXUnBieTVrWlhOMGNtOTVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkMmhwYkdVZ0tHRjFaR2x2SUQwZ1gyRjFaR2x2VUc5dmJDNXdiM0FvS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaGRXUnBieTVrWlhOMGNtOTVLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRjlwWkRKaGRXUnBieUE5SUdwekxtTnlaV0YwWlUxaGNDaDBjblZsS1R0Y2NseHVJQ0FnSUNBZ0lDQmZkWEpzTW1sa0lEMGdlMzA3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQkhaWFJ6SUdGdUlHRjFaR2x2SUhCeWIyWnBiR1VnWW5rZ2JtRnRaUzVjY2x4dUlDQWdJQ0FxWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnY0hKdlptbHNaVTVoYldVZ1FTQnVZVzFsSUc5bUlHRjFaR2x2SUhCeWIyWnBiR1V1WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUZSb1pTQmhkV1JwYnlCd2NtOW1hV3hsTGx4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCblpYUlFjbTltYVd4bE9pQm1kVzVqZEdsdmJpQW9jSEp2Wm1sc1pVNWhiV1VwSUh0OUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJRY21Wc2IyRmtJR0YxWkdsdklHWnBiR1V1WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT21paE9XS29PaTl2ZVM0Z09TNHF1bWZzK21pa1Z4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCd2NtVnNiMkZrWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnWm1sc1pWQmhkR2dnTFNCVWFHVWdabWxzWlNCd1lYUm9JRzltSUdGdUlHRjFaR2x2TGx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0R2RXNWpkR2x2Ym4wZ1cyTmhiR3hpWVdOclhTQXRJRlJvWlNCallXeHNZbUZqYXlCdlppQmhiaUJoZFdScGJ5NWNjbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYSEpjYmlBZ0lDQWdLaUJqWXk1aGRXUnBiMFZ1WjJsdVpTNXdjbVZzYjJGa0tIQmhkR2dwTzF4eVhHNGdJQ0FnSUNvZ1FHUmxjSEpsWTJGMFpXUWdZR05qTG1GMVpHbHZSVzVuYVc1bExuQnlaV3h2WVdSZ0lHbHpJR1JsY0hKbFkyRjBaV1FzSUhWelpTQmdZMk11Ykc5aFpHVnlMbXh2WVdSU1pYTW9kWEpzTENCall5NUJkV1JwYjBOc2FYQXBZQ0JwYm5OMFpXRmtJSEJzWldGelpTNWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjSEpsYkc5aFpEb2dablZ1WTNScGIyNGdLR1pwYkdWUVlYUm9MQ0JqWVd4c1ltRmpheWtnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RVJVSlZSeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JqWXk1M1lYSnVLQ2RnWTJNdVlYVmthVzlGYm1kcGJtVXVjSEpsYkc5aFpHQWdhWE1nWkdWd2NtVmpZWFJsWkN3Z2RYTmxJR0JqWXk1c2IyRmtaWEl1Ykc5aFpGSmxjeWgxY213c0lHTmpMa0YxWkdsdlEyeHBjQ2xnSUdsdWMzUmxZV1FnY0d4bFlYTmxMaWNwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ1kyTXViRzloWkdWeUxteHZZV1FvWm1sc1pWQmhkR2dzSUdOaGJHeGlZV05ySUNZbUlHWjFibU4wYVc5dUlDaGxjbkp2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1Z5Y205eUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWVd4c1ltRmpheWdwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCVFpYUWdZU0J6YVhwbExDQjBhR1VnZFc1cGRDQnBjeUJMUWk0Z1QzWmxjaUIwYUdseklITnBlbVVnYVhNZ1pHbHlaV04wYkhrZ2NtVnpiMngyWldRZ2FXNTBieUJFVDAwZ2JtOWtaWE11WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2l1dnVlOXJ1UzRnT1M0cXVTN3BTQkxRaURrdUxybGpaWGt2WTNubW9UbHNMcmxyN2p2dkl6bHBLZmt1bzdvdjVua3VLcmxzTHJscjdqbm1vVHBuN1Bwb3BIbG5LamxpcURvdmIzbm1vVG1sN2JsZ0pua3ZKcmx2THJsaUxia3ZiL25sS2dnWkc5dElPYVd1ZVc4aitXS29PaTl2Vnh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSTllYaFhaV0pCZFdScGIxTnBlbVZjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JyWWlBdElGUm9aU0JtYVd4bElIQmhkR2dnYjJZZ1lXNGdZWFZrYVc4dVhISmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHlYRzRnSUNBZ0lDb2dZMk11WVhWa2FXOUZibWRwYm1VdWMyVjBUV0Y0VjJWaVFYVmthVzlUYVhwbEtETXdNQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUM4dklFSmxZMkYxYzJVZ2QyVmlRWFZrYVc4Z2RHRnJaWE1nZFhBZ2RHOXZJRzExWTJnZ2JXVnRiM0o1Nzd5TVUyOGdZV3hzYjNjZ2RYTmxjbk1nZEc4Z2JXRnVkV0ZzYkhrZ1kyaHZiM05sWEhKY2JpQWdJQ0J6WlhSTllYaFhaV0pCZFdScGIxTnBlbVU2SUdaMWJtTjBhVzl1SUNocllpa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjFoZUZkbFlrRjFaR2x2VTJsNlpTQTlJR3RpSUNvZ01UQXlORHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ1gySnlaV0ZyUTJGamFHVTZJRzUxYkd3c1hISmNiaUFnSUNCZlluSmxZV3M2SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWljbVZoYTBOaFkyaGxJRDBnVzEwN1hISmNiaUFnSUNBZ0lDQWdabTl5SUNoMllYSWdhV1FnYVc0Z1gybGtNbUYxWkdsdktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJoZFdScGJ5QTlJRjlwWkRKaGRXUnBiMXRwWkYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpkR0YwWlNBOUlHRjFaR2x2TG1kbGRGTjBZWFJsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlNBOVBUMGdRWFZrYVc4dVUzUmhkR1V1VUV4QldVbE9SeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWW5KbFlXdERZV05vWlM1d2RYTm9LR2xrS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHRjFaR2x2TG5CaGRYTmxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJRjl5WlhOMGIzSmxPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMGFHbHpMbDlpY21WaGEwTmhZMmhsS1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSGRvYVd4bElDaDBhR2x6TGw5aWNtVmhhME5oWTJobExteGxibWQwYUNBK0lEQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdsa0lEMGdkR2hwY3k1ZlluSmxZV3REWVdOb1pTNXdiM0FvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRjFaR2x2SUQwZ1oyVjBRWFZrYVc5R2NtOXRTV1FvYVdRcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9ZWFZrYVc4Z0ppWWdZWFZrYVc4dWNtVnpkVzFsS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYVmthVzh1Y21WemRXMWxLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgySnlaV0ZyUTJGamFHVWdQU0J1ZFd4c08xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dkx5OHZMeTh2THk4dlhISmNiaUFnSUNBdkx5QkRiR0Z6YzJsbWFXTmhkR2x2YmlCdlppQnBiblJsY21aaFkyVmNjbHh1WEhKY2JpQWdJQ0JmYlhWemFXTTZJSHRjY2x4dUlDQWdJQ0FnSUNCcFpEb2dMVEVzWEhKY2JpQWdJQ0FnSUNBZ2JHOXZjRG9nWm1Gc2MyVXNYSEpjYmlBZ0lDQWdJQ0FnZG05c2RXMWxPaUF4TEZ4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQmZaV1ptWldOME9pQjdYSEpjYmlBZ0lDQWdJQ0FnZG05c2RXMWxPaUF4TEZ4eVhHNGdJQ0FnSUNBZ0lIQmhkWE5sUTJGamFHVTZJRnRkTEZ4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUNFalpXNGdVR3hoZVNCaVlXTnJaM0p2ZFc1a0lHMTFjMmxqWEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2FTcmVhVXZ1aURqT2FacittZnMrUzVrRnh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J3YkdGNVRYVnphV05jY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3UVhWa2FXOURiR2x3ZlNCamJHbHdJQzBnVkdobElHRjFaR2x2SUdOc2FYQWdkRzhnY0d4aGVTNWNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdRbTl2YkdWaGJuMGdiRzl2Y0NBdElGZG9aWFJvWlhJZ2RHaGxJRzExYzJsaklHeHZiM0FnYjNJZ2JtOTBMbHh5WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0JoZFdScGIwbGtYSEpjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh5WEc0Z0lDQWdJQ29nWTJNdWJHOWhaR1Z5TG14dllXUlNaWE1vZFhKc0xDQmpZeTVCZFdScGIwTnNhWEFzSUdaMWJtTjBhVzl1SUNobGNuSXNJR05zYVhBcElIdGNjbHh1SUNBZ0lDQXFJQ0FnSUNCMllYSWdZWFZrYVc5SlJDQTlJR05qTG1GMVpHbHZSVzVuYVc1bExuQnNZWGxOZFhOcFl5aGpiR2x3TENCbVlXeHpaU2s3WEhKY2JpQWdJQ0FnS2lCOUtUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjR3hoZVUxMWMybGpPaUJtZFc1amRHbHZiaUFvWTJ4cGNDd2diRzl2Y0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdGRYTnBZeUE5SUhSb2FYTXVYMjExYzJsak8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWMzUnZjQ2h0ZFhOcFl5NXBaQ2s3WEhKY2JpQWdJQ0FnSUNBZ2JYVnphV011YVdRZ1BTQjBhR2x6TG5Cc1lYa29ZMnhwY0N3Z2JHOXZjQ3dnYlhWemFXTXVkbTlzZFcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0J0ZFhOcFl5NXNiMjl3SUQwZ2JHOXZjRHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYlhWemFXTXVhV1E3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQlRkRzl3SUdKaFkydG5jbTkxYm1RZ2JYVnphV011WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT1dCbk9hdG91YVNyZWFVdnVpRGpPYVpyK21mcytTNWtPT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6ZEc5d1RYVnphV05jY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCall5NWhkV1JwYjBWdVoybHVaUzV6ZEc5d1RYVnphV01vS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2MzUnZjRTExYzJsak9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV6ZEc5d0tIUm9hWE11WDIxMWMybGpMbWxrS1R0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRkJoZFhObElIUm9aU0JpWVdOclozSnZkVzVrSUcxMWMybGpMbHh5WEc0Z0lDQWdJQ29nSVNONmFDRG1tb0xsZ1p6bWtxM21sTDdvZzR6bW1hL3BuN1BrdVpEamdJSmNjbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjR0YxYzJWTmRYTnBZMXh5WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDQWdJQ0FxSUdOakxtRjFaR2x2Ulc1bmFXNWxMbkJoZFhObFRYVnphV01vS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NHRjFjMlZOZFhOcFl6b2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11Y0dGMWMyVW9kR2hwY3k1ZmJYVnphV011YVdRcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dGRYTnBZeTVwWkR0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRkpsYzNWdFpTQndiR0Y1YVc1bklHSmhZMnRuY205MWJtUWdiWFZ6YVdNdVhISmNiaUFnSUNBZ0tpQWhJM3BvSU9hQm91V2tqZWFTcmVhVXZ1aURqT2FacittZnMrUzVrT09BZ2x4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCeVpYTjFiV1ZOZFhOcFkxeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJR05qTG1GMVpHbHZSVzVuYVc1bExuSmxjM1Z0WlUxMWMybGpLQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhKbGMzVnRaVTExYzJsak9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTV5WlhOMWJXVW9kR2hwY3k1ZmJYVnphV011YVdRcE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dGRYTnBZeTVwWkR0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRWRsZENCMGFHVWdkbTlzZFcxbEtEQXVNQ0IrSURFdU1Da3VYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPaU90K1dQbHVtZnMrbUhqKys4aURBdU1DQitJREV1TU8rOGllT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSTmRYTnBZMVp2YkhWdFpWeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZWeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJSFpoY2lCMmIyeDFiV1VnUFNCall5NWhkV1JwYjBWdVoybHVaUzVuWlhSTmRYTnBZMVp2YkhWdFpTZ3BPMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JuWlhSTmRYTnBZMVp2YkhWdFpUb2dablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDl0ZFhOcFl5NTJiMngxYldVN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJUWlhRZ2RHaGxJR0poWTJ0bmNtOTFibVFnYlhWemFXTWdkbTlzZFcxbExseHlYRzRnSUNBZ0lDb2dJU042YUNEb3JyN252YTdvZzR6bW1hL3BuN1BrdVpEcG43UHBoNC92dklnd0xqQWdmaUF4TGpEdnZJbmpnSUpjY2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJWMFRYVnphV05XYjJ4MWJXVmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjJiMngxYldVZ0xTQldiMngxYldVZ2JYVnpkQ0JpWlNCcGJpQXdMakIrTVM0d0xseHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJR05qTG1GMVpHbHZSVzVuYVc1bExuTmxkRTExYzJsalZtOXNkVzFsS0RBdU5TazdYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSE5sZEUxMWMybGpWbTlzZFcxbE9pQm1kVzVqZEdsdmJpQW9kbTlzZFcxbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG05c2RXMWxJRDBnYUdGdVpHeGxWbTlzZFcxbEtIWnZiSFZ0WlNrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUcxMWMybGpJRDBnZEdocGN5NWZiWFZ6YVdNN1hISmNiaUFnSUNBZ0lDQWdiWFZ6YVdNdWRtOXNkVzFsSUQwZ2RtOXNkVzFsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11YzJWMFZtOXNkVzFsS0cxMWMybGpMbWxrTENCdGRYTnBZeTUyYjJ4MWJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ0ZFhOcFl5NTJiMngxYldVN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJDWVdOclozSnZkVzVrSUcxMWMybGpJSEJzWVhscGJtY2djM1JoZEdWY2NseHVJQ0FnSUNBcUlDRWplbWdnNklPTTVwbXY2Wit6NUxtUTVwaXY1WkNtNXEyajVaeW81cEt0NXBTK1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHbHpUWFZ6YVdOUWJHRjVhVzVuWEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0Q2IyOXNaV0Z1ZlZ4eVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2NseHVJQ0FnSUNBcUlHTmpMbUYxWkdsdlJXNW5hVzVsTG1selRYVnphV05RYkdGNWFXNW5LQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUdselRYVnphV05RYkdGNWFXNW5PaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WjJWMFUzUmhkR1VvZEdocGN5NWZiWFZ6YVdNdWFXUXBJRDA5UFNCMGFHbHpMa0YxWkdsdlUzUmhkR1V1VUV4QldVbE9SenRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGQnNZWGtnWldabVpXTjBJR0YxWkdsdkxseHlYRzRnSUNBZ0lDb2dJU042YUNEbWtxM21sTDdwbjdQbWxZaGNjbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjR3hoZVVWbVptVmpkRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRCZFdScGIwTnNhWEI5SUdOc2FYQWdMU0JVYUdVZ1lYVmthVzhnWTJ4cGNDQjBieUJ3YkdGNUxseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQnNiMjl3SUMwZ1YyaGxkR2hsY2lCMGFHVWdiWFZ6YVdNZ2JHOXZjQ0J2Y2lCdWIzUXVYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRPZFcxaVpYSjlJR0YxWkdsdlNXUmNjbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYSEpjYmlBZ0lDQWdLaUJqWXk1c2IyRmtaWEl1Ykc5aFpGSmxjeWgxY213c0lHTmpMa0YxWkdsdlEyeHBjQ3dnWm5WdVkzUnBiMjRnS0dWeWNpd2dZMnhwY0NrZ2UxeHlYRzRnSUNBZ0lDb2dJQ0FnSUhaaGNpQmhkV1JwYjBsRUlEMGdZMk11WVhWa2FXOUZibWRwYm1VdWNHeGhlVVZtWm1WamRDaGpiR2x3TENCbVlXeHpaU2s3WEhKY2JpQWdJQ0FnS2lCOUtUdGNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjR3hoZVVWbVptVmpkRG9nWm5WdVkzUnBiMjRnS0dOc2FYQXNJR3h2YjNBcElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1d2JHRjVLR05zYVhBc0lHeHZiM0FnZkh3Z1ptRnNjMlVzSUhSb2FYTXVYMlZtWm1WamRDNTJiMngxYldVcE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVTJWMElIUm9aU0IyYjJ4MWJXVWdiMllnWldabVpXTjBJR0YxWkdsdkxseHlYRzRnSUNBZ0lDb2dJU042YUNEb3JyN252YTdwbjdQbWxZanBuN1BwaDQvdnZJZ3dMakFnZmlBeExqRHZ2SW5qZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBSV1ptWldOMGMxWnZiSFZ0WlZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhadmJIVnRaU0F0SUZadmJIVnRaU0J0ZFhOMElHSmxJR2x1SURBdU1INHhMakF1WEhKY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4eVhHNGdJQ0FnSUNvZ1kyTXVZWFZrYVc5RmJtZHBibVV1YzJWMFJXWm1aV04wYzFadmJIVnRaU2d3TGpVcE8xeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQnpaWFJGWm1abFkzUnpWbTlzZFcxbE9pQm1kVzVqZEdsdmJpQW9kbTlzZFcxbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG05c2RXMWxJRDBnYUdGdVpHeGxWbTlzZFcxbEtIWnZiSFZ0WlNrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUcxMWMybGpTV1FnUFNCMGFHbHpMbDl0ZFhOcFl5NXBaRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDlsWm1abFkzUXVkbTlzZFcxbElEMGdkbTlzZFcxbE8xeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2xrSUdsdUlGOXBaREpoZFdScGJ5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjJZWElnWVhWa2FXOGdQU0JmYVdReVlYVmthVzliYVdSZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV0YxWkdsdklIeDhJR0YxWkdsdkxtbGtJRDA5UFNCdGRYTnBZMGxrS1NCamIyNTBhVzUxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWVhWa2FXOUZibWRwYm1VdWMyVjBWbTlzZFcxbEtHbGtMQ0IyYjJ4MWJXVXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRlJvWlNCMmIyeDFiV1VnYjJZZ2RHaGxJR1ZtWm1WamRDQmhkV1JwYnlCdFlYZ2dkbUZzZFdVZ2FYTWdNUzR3TEhSb1pTQnRhVzRnZG1Gc2RXVWdhWE1nTUM0d0lDNWNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZJNjM1WStXNlorejVwV0k2Wit6NlllUDc3eUlNQzR3SUg0Z01TNHc3N3lKNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRVZtWm1WamRITldiMngxYldWY2NseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24xY2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQjJZWElnZG05c2RXMWxJRDBnWTJNdVlYVmthVzlGYm1kcGJtVXVaMlYwUldabVpXTjBjMVp2YkhWdFpTZ3BPMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JuWlhSRlptWmxZM1J6Vm05c2RXMWxPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDJWbVptVmpkQzUyYjJ4MWJXVTdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCUVlYVnpaU0JsWm1abFkzUWdZWFZrYVc4dVhISmNiaUFnSUNBZ0tpQWhJM3BvSU9hYWd1V0JuT2FTcmVhVXZ1bWZzK2FWaU9PQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQndZWFZ6WlVWbVptVmpkRnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR0YxWkdsdlNVUWdMU0JoZFdScGJ5QnBaQzVjY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCall5NWhkV1JwYjBWdVoybHVaUzV3WVhWelpVVm1abVZqZENoaGRXUnBiMGxFS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NHRjFjMlZGWm1abFkzUTZJR1oxYm1OMGFXOXVJQ2hoZFdScGIwbEVLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTXVjR0YxYzJVb1lYVmthVzlKUkNrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJUZEc5d0lIQnNZWGxwYm1jZ1lXeHNJSFJvWlNCemIzVnVaQ0JsWm1abFkzUnpMbHh5WEc0Z0lDQWdJQ29nSVNONmFDRG1tb0xsZ1p6bWtxM21sTDdtaVlEbW5JbnBuN1BtbFlqamdJSmNjbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdjR0YxYzJWQmJHeEZabVpsWTNSelhISmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHlYRzRnSUNBZ0lDb2dZMk11WVhWa2FXOUZibWRwYm1VdWNHRjFjMlZCYkd4RlptWmxZM1J6S0NrN1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQmhkWE5sUVd4c1JXWm1aV04wY3pvZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnRkWE5wWTBsa0lEMGdkR2hwY3k1ZmJYVnphV011YVdRN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdWbVptVmpkQ0E5SUhSb2FYTXVYMlZtWm1WamREdGNjbHh1SUNBZ0lDQWdJQ0JsWm1abFkzUXVjR0YxYzJWRFlXTm9aUzVzWlc1bmRHZ2dQU0F3TzF4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JtYjNJZ0tIWmhjaUJwWkNCcGJpQmZhV1F5WVhWa2FXOHBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZ5SUdGMVpHbHZJRDBnWDJsa01tRjFaR2x2VzJsa1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLQ0ZoZFdScGJ5QjhmQ0JoZFdScGJ5NXBaQ0E5UFQwZ2JYVnphV05KWkNrZ1kyOXVkR2x1ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnpkR0YwWlNBOUlHRjFaR2x2TG1kbGRGTjBZWFJsS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHpkR0YwWlNBOVBUMGdkR2hwY3k1QmRXUnBiMU4wWVhSbExsQk1RVmxKVGtjcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZtWm1WamRDNXdZWFZ6WlVOaFkyaGxMbkIxYzJnb2FXUXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWVhWa2FXOHVjR0YxYzJVb0tUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGSmxjM1Z0WlNCbFptWmxZM1FnWVhWa2FXOHVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPYUJvdVdramVhU3JlYVV2dW1mcythVmlPbWZzK21pa2VPQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnlaWE4xYldWRlptWmxZM1JjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JoZFdScGIwbEVJQzBnVkdobElISmxkSFZ5YmlCMllXeDFaU0J2WmlCbWRXNWpkR2x2YmlCd2JHRjVMbHh5WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDQWdJQ0FxSUdOakxtRjFaR2x2Ulc1bmFXNWxMbkpsYzNWdFpVVm1abVZqZENoaGRXUnBiMGxFS1R0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NtVnpkVzFsUldabVpXTjBPaUJtZFc1amRHbHZiaUFvYVdRcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuSmxjM1Z0WlNocFpDazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCU1pYTjFiV1VnWVd4c0lHVm1abVZqZENCaGRXUnBieTVjY2x4dUlDQWdJQ0FxSUNFamVtZ2c1b0dpNWFTTjVwS3Q1cFMrNW9tQTVweUo1TG1MNVltTjVwcUM1WUdjNTVxRTZaK3o1cFdJNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lISmxjM1Z0WlVGc2JFVm1abVZqZEhOY2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQmpZeTVoZFdScGIwVnVaMmx1WlM1eVpYTjFiV1ZCYkd4RlptWmxZM1J6S0NrN1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lISmxjM1Z0WlVGc2JFVm1abVZqZEhNNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdjR0YxYzJWSlJFTmhZMmhsSUQwZ2RHaHBjeTVmWldabVpXTjBMbkJoZFhObFEyRmphR1U3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2gyWVhJZ2FTQTlJREE3SUdrZ1BDQndZWFZ6WlVsRVEyRmphR1V1YkdWdVozUm9PeUFySzJrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2xrSUQwZ2NHRjFjMlZKUkVOaFkyaGxXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ1lYVmthVzhnUFNCZmFXUXlZWFZrYVc5YmFXUmRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWVhWa2FXOHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFdScGJ5NXlaWE4xYldVb0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQlRkRzl3SUhCc1lYbHBibWNnZEdobElHVm1abVZqZENCaGRXUnBieTVjY2x4dUlDQWdJQ0FxSUNFamVtZ2c1WUdjNXEyaTVwS3Q1cFMrNlorejVwV0k0NENDWEhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhOMGIzQkZabVpsWTNSY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCaGRXUnBiMGxFSUMwZ1lYVmthVzhnYVdRdVhISmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pWeHlYRzRnSUNBZ0lDb2dZMk11WVhWa2FXOUZibWRwYm1VdWMzUnZjRVZtWm1WamRDaHBaQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhOMGIzQkZabVpsWTNRNklHWjFibU4wYVc5dUlDaGhkV1JwYjBsRUtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdWMzUnZjQ2hoZFdScGIwbEVLVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGTjBiM0FnY0d4aGVXbHVaeUJoYkd3Z2RHaGxJR1ZtWm1WamRITXVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPV0JuT2F0b3VhU3JlYVV2dWFKZ09hY2llbWZzK2FWaU9PQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpkRzl3UVd4c1JXWm1aV04wYzF4eVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdWY2NseHVJQ0FnSUNBcUlHTmpMbUYxWkdsdlJXNW5hVzVsTG5OMGIzQkJiR3hGWm1abFkzUnpLQ2s3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhOMGIzQkJiR3hGWm1abFkzUnpPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUcxMWMybGpTV1FnUFNCMGFHbHpMbDl0ZFhOcFl5NXBaRHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcFpDQnBiaUJmYVdReVlYVmthVzhwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHRjFaR2x2SUQwZ1gybGtNbUYxWkdsdlcybGtYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NGaGRXUnBieUI4ZkNCaGRXUnBieTVwWkNBOVBUMGdiWFZ6YVdOSlpDa2dZMjl1ZEdsdWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJ6ZEdGMFpTQTlJR0YxWkdsdkxtZGxkRk4wWVhSbEtDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h6ZEdGMFpTQTlQVDBnWVhWa2FXOUZibWRwYm1VdVFYVmthVzlUZEdGMFpTNVFURUZaU1U1SEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JoZFdScGJ5NXpkRzl3S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOakxtRjFaR2x2Ulc1bmFXNWxJRDBnWVhWa2FXOUZibWRwYm1VN0lsMTkiXX0=