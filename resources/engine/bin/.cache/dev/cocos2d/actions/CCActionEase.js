(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionEase.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.easeIn = function (rate) {
            return {
                _rate: rate,
                easing: function easing(dt) {
                    return Math.pow(dt, this._rate);
                },
                reverse: function reverse() {
                    return cc.easeIn(1 / this._rate);
                }
            };
        };
        cc.easeOut = function (rate) {
            return {
                _rate: rate,
                easing: function easing(dt) {
                    return Math.pow(dt, 1 / this._rate);
                },
                reverse: function reverse() {
                    return cc.easeOut(1 / this._rate);
                }
            };
        };
        cc.easeInOut = function (rate) {
            return {
                _rate: rate,
                easing: function easing(dt) {
                    dt *= 2;
                    if (dt < 1)
                        return 0.5 * Math.pow(dt, this._rate);
                    else
                        return 1 - 0.5 * Math.pow(2 - dt, this._rate);
                },
                reverse: function reverse() {
                    return cc.easeInOut(this._rate);
                }
            };
        };
        var _easeExponentialInObj = {
            easing: function easing(dt) {
                return dt === 0 ? 0 : Math.pow(2, 10 * (dt - 1));
            },
            reverse: function reverse() {
                return _easeExponentialOutObj;
            }
        };
        cc.easeExponentialIn = function () {
            return _easeExponentialInObj;
        };
        var _easeExponentialOutObj = {
            easing: function easing(dt) {
                return dt === 1 ? 1 : -Math.pow(2, -10 * dt) + 1;
            },
            reverse: function reverse() {
                return _easeExponentialInObj;
            }
        };
        cc.easeExponentialOut = function () {
            return _easeExponentialOutObj;
        };
        var _easeExponentialInOutObj = {
            easing: function easing(dt) {
                if (dt !== 1 && dt !== 0) {
                    dt *= 2;
                    if (dt < 1)
                        return 0.5 * Math.pow(2, 10 * (dt - 1));
                    else
                        return 0.5 * (-Math.pow(2, -10 * (dt - 1)) + 2);
                }
                return dt;
            },
            reverse: function reverse() {
                return _easeExponentialInOutObj;
            }
        };
        cc.easeExponentialInOut = function () {
            return _easeExponentialInOutObj;
        };
        var _easeSineInObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : -1 * Math.cos(dt * Math.PI / 2) + 1;
            },
            reverse: function reverse() {
                return _easeSineOutObj;
            }
        };
        cc.easeSineIn = function () {
            return _easeSineInObj;
        };
        var _easeSineOutObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : Math.sin(dt * Math.PI / 2);
            },
            reverse: function reverse() {
                return _easeSineInObj;
            }
        };
        cc.easeSineOut = function () {
            return _easeSineOutObj;
        };
        var _easeSineInOutObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : -0.5 * (Math.cos(Math.PI * dt) - 1);
            },
            reverse: function reverse() {
                return _easeSineInOutObj;
            }
        };
        cc.easeSineInOut = function () {
            return _easeSineInOutObj;
        };
        var _easeElasticInObj = {
            easing: function easing(dt) {
                if (dt === 0 || dt === 1)
                    return dt;
                dt = dt - 1;
                return -Math.pow(2, 10 * dt) * Math.sin((dt - 0.3 / 4) * Math.PI * 2 / 0.3);
            },
            reverse: function reverse() {
                return _easeElasticOutObj;
            }
        };
        cc.easeElasticIn = function (period) {
            if (period && period !== 0.3) {
                return {
                    _period: period,
                    easing: function easing(dt) {
                        if (dt === 0 || dt === 1)
                            return dt;
                        dt = dt - 1;
                        return -Math.pow(2, 10 * dt) * Math.sin((dt - this._period / 4) * Math.PI * 2 / this._period);
                    },
                    reverse: function reverse() {
                        return cc.easeElasticOut(this._period);
                    }
                };
            }
            return _easeElasticInObj;
        };
        var _easeElasticOutObj = {
            easing: function easing(dt) {
                return dt === 0 || dt === 1 ? dt : Math.pow(2, -10 * dt) * Math.sin((dt - 0.3 / 4) * Math.PI * 2 / 0.3) + 1;
            },
            reverse: function reverse() {
                return _easeElasticInObj;
            }
        };
        cc.easeElasticOut = function (period) {
            if (period && period !== 0.3) {
                return {
                    _period: period,
                    easing: function easing(dt) {
                        return dt === 0 || dt === 1 ? dt : Math.pow(2, -10 * dt) * Math.sin((dt - this._period / 4) * Math.PI * 2 / this._period) + 1;
                    },
                    reverse: function reverse() {
                        return cc.easeElasticIn(this._period);
                    }
                };
            }
            return _easeElasticOutObj;
        };
        cc.easeElasticInOut = function (period) {
            period = period || 0.3;
            return {
                _period: period,
                easing: function easing(dt) {
                    var newT = 0;
                    var locPeriod = this._period;
                    if (dt === 0 || dt === 1) {
                        newT = dt;
                    } else {
                        dt = dt * 2;
                        if (!locPeriod)
                            locPeriod = this._period = 0.3 * 1.5;
                        var s = locPeriod / 4;
                        dt = dt - 1;
                        if (dt < 0)
                            newT = -0.5 * Math.pow(2, 10 * dt) * Math.sin((dt - s) * Math.PI * 2 / locPeriod);
                        else
                            newT = Math.pow(2, -10 * dt) * Math.sin((dt - s) * Math.PI * 2 / locPeriod) * 0.5 + 1;
                    }
                    return newT;
                },
                reverse: function reverse() {
                    return cc.easeElasticInOut(this._period);
                }
            };
        };
        function _bounceTime(time1) {
            if (time1 < 1 / 2.75) {
                return 7.5625 * time1 * time1;
            } else if (time1 < 2 / 2.75) {
                time1 -= 1.5 / 2.75;
                return 7.5625 * time1 * time1 + 0.75;
            } else if (time1 < 2.5 / 2.75) {
                time1 -= 2.25 / 2.75;
                return 7.5625 * time1 * time1 + 0.9375;
            }
            time1 -= 2.625 / 2.75;
            return 7.5625 * time1 * time1 + 0.984375;
        }
        ;
        var _easeBounceInObj = {
            easing: function easing(dt) {
                return 1 - _bounceTime(1 - dt);
            },
            reverse: function reverse() {
                return _easeBounceOutObj;
            }
        };
        cc.easeBounceIn = function () {
            return _easeBounceInObj;
        };
        var _easeBounceOutObj = {
            easing: function easing(dt) {
                return _bounceTime(dt);
            },
            reverse: function reverse() {
                return _easeBounceInObj;
            }
        };
        cc.easeBounceOut = function () {
            return _easeBounceOutObj;
        };
        var _easeBounceInOutObj = {
            easing: function easing(time1) {
                var newT;
                if (time1 < 0.5) {
                    time1 = time1 * 2;
                    newT = (1 - _bounceTime(1 - time1)) * 0.5;
                } else {
                    newT = _bounceTime(time1 * 2 - 1) * 0.5 + 0.5;
                }
                return newT;
            },
            reverse: function reverse() {
                return _easeBounceInOutObj;
            }
        };
        cc.easeBounceInOut = function () {
            return _easeBounceInOutObj;
        };
        var _easeBackInObj = {
            easing: function easing(time1) {
                var overshoot = 1.70158;
                return time1 === 0 || time1 === 1 ? time1 : time1 * time1 * ((overshoot + 1) * time1 - overshoot);
            },
            reverse: function reverse() {
                return _easeBackOutObj;
            }
        };
        cc.easeBackIn = function () {
            return _easeBackInObj;
        };
        var _easeBackOutObj = {
            easing: function easing(time1) {
                var overshoot = 1.70158;
                time1 = time1 - 1;
                return time1 * time1 * ((overshoot + 1) * time1 + overshoot) + 1;
            },
            reverse: function reverse() {
                return _easeBackInObj;
            }
        };
        cc.easeBackOut = function () {
            return _easeBackOutObj;
        };
        var _easeBackInOutObj = {
            easing: function easing(time1) {
                var overshoot = 1.70158 * 1.525;
                time1 = time1 * 2;
                if (time1 < 1) {
                    return time1 * time1 * ((overshoot + 1) * time1 - overshoot) / 2;
                } else {
                    time1 = time1 - 2;
                    return time1 * time1 * ((overshoot + 1) * time1 + overshoot) / 2 + 1;
                }
            },
            reverse: function reverse() {
                return _easeBackInOutObj;
            }
        };
        cc.easeBackInOut = function () {
            return _easeBackInOutObj;
        };
        cc.easeBezierAction = function (a, b, c, d) {
            return {
                easing: function easing(t) {
                    return Math.pow(1 - t, 3) * a + 3 * t * Math.pow(1 - t, 2) * b + 3 * Math.pow(t, 2) * (1 - t) * c + Math.pow(t, 3) * d;
                },
                reverse: function reverse() {
                    return cc.easeBezierAction(d, c, b, a);
                }
            };
        };
        var _easeQuadraticActionIn = {
            easing: function easing(time) {
                return Math.pow(time, 2);
            },
            reverse: function reverse() {
                return _easeQuadraticActionIn;
            }
        };
        cc.easeQuadraticActionIn = function () {
            return _easeQuadraticActionIn;
        };
        var _easeQuadraticActionOut = {
            easing: function easing(time) {
                return -time * (time - 2);
            },
            reverse: function reverse() {
                return _easeQuadraticActionOut;
            }
        };
        cc.easeQuadraticActionOut = function () {
            return _easeQuadraticActionOut;
        };
        var _easeQuadraticActionInOut = {
            easing: function easing(time) {
                var resultTime = time;
                time *= 2;
                if (time < 1) {
                    resultTime = time * time * 0.5;
                } else {
                    --time;
                    resultTime = -0.5 * (time * (time - 2) - 1);
                }
                return resultTime;
            },
            reverse: function reverse() {
                return _easeQuadraticActionInOut;
            }
        };
        cc.easeQuadraticActionInOut = function () {
            return _easeQuadraticActionInOut;
        };
        var _easeQuarticActionIn = {
            easing: function easing(time) {
                return time * time * time * time;
            },
            reverse: function reverse() {
                return _easeQuarticActionIn;
            }
        };
        cc.easeQuarticActionIn = function () {
            return _easeQuarticActionIn;
        };
        var _easeQuarticActionOut = {
            easing: function easing(time) {
                time -= 1;
                return -(time * time * time * time - 1);
            },
            reverse: function reverse() {
                return _easeQuarticActionOut;
            }
        };
        cc.easeQuarticActionOut = function () {
            return _easeQuarticActionOut;
        };
        var _easeQuarticActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return 0.5 * time * time * time * time;
                time -= 2;
                return -0.5 * (time * time * time * time - 2);
            },
            reverse: function reverse() {
                return _easeQuarticActionInOut;
            }
        };
        cc.easeQuarticActionInOut = function () {
            return _easeQuarticActionInOut;
        };
        var _easeQuinticActionIn = {
            easing: function easing(time) {
                return time * time * time * time * time;
            },
            reverse: function reverse() {
                return _easeQuinticActionIn;
            }
        };
        cc.easeQuinticActionIn = function () {
            return _easeQuinticActionIn;
        };
        var _easeQuinticActionOut = {
            easing: function easing(time) {
                time -= 1;
                return time * time * time * time * time + 1;
            },
            reverse: function reverse() {
                return _easeQuinticActionOut;
            }
        };
        cc.easeQuinticActionOut = function () {
            return _easeQuinticActionOut;
        };
        var _easeQuinticActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return 0.5 * time * time * time * time * time;
                time -= 2;
                return 0.5 * (time * time * time * time * time + 2);
            },
            reverse: function reverse() {
                return _easeQuinticActionInOut;
            }
        };
        cc.easeQuinticActionInOut = function () {
            return _easeQuinticActionInOut;
        };
        var _easeCircleActionIn = {
            easing: function easing(time) {
                return -1 * (Math.sqrt(1 - time * time) - 1);
            },
            reverse: function reverse() {
                return _easeCircleActionIn;
            }
        };
        cc.easeCircleActionIn = function () {
            return _easeCircleActionIn;
        };
        var _easeCircleActionOut = {
            easing: function easing(time) {
                time = time - 1;
                return Math.sqrt(1 - time * time);
            },
            reverse: function reverse() {
                return _easeCircleActionOut;
            }
        };
        cc.easeCircleActionOut = function () {
            return _easeCircleActionOut;
        };
        var _easeCircleActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return -0.5 * (Math.sqrt(1 - time * time) - 1);
                time -= 2;
                return 0.5 * (Math.sqrt(1 - time * time) + 1);
            },
            reverse: function reverse() {
                return _easeCircleActionInOut;
            }
        };
        cc.easeCircleActionInOut = function () {
            return _easeCircleActionInOut;
        };
        var _easeCubicActionIn = {
            easing: function easing(time) {
                return time * time * time;
            },
            reverse: function reverse() {
                return _easeCubicActionIn;
            }
        };
        cc.easeCubicActionIn = function () {
            return _easeCubicActionIn;
        };
        var _easeCubicActionOut = {
            easing: function easing(time) {
                time -= 1;
                return time * time * time + 1;
            },
            reverse: function reverse() {
                return _easeCubicActionOut;
            }
        };
        cc.easeCubicActionOut = function () {
            return _easeCubicActionOut;
        };
        var _easeCubicActionInOut = {
            easing: function easing(time) {
                time = time * 2;
                if (time < 1)
                    return 0.5 * time * time * time;
                time -= 2;
                return 0.5 * (time * time * time + 2);
            },
            reverse: function reverse() {
                return _easeCubicActionInOut;
            }
        };
        cc.easeCubicActionInOut = function () {
            return _easeCubicActionInOut;
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDQWN0aW9uRWFzZS5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvYWN0aW9ucy9DQ0FjdGlvbkVhc2UuanMiXSwibmFtZXMiOlsiY2MiLCJlYXNlSW4iLCJyYXRlIiwiX3JhdGUiLCJlYXNpbmciLCJkdCIsIk1hdGgiLCJwb3ciLCJyZXZlcnNlIiwiZWFzZU91dCIsImVhc2VJbk91dCIsIl9lYXNlRXhwb25lbnRpYWxJbk9iaiIsIl9lYXNlRXhwb25lbnRpYWxPdXRPYmoiLCJlYXNlRXhwb25lbnRpYWxJbiIsImVhc2VFeHBvbmVudGlhbE91dCIsIl9lYXNlRXhwb25lbnRpYWxJbk91dE9iaiIsImVhc2VFeHBvbmVudGlhbEluT3V0IiwiX2Vhc2VTaW5lSW5PYmoiLCJjb3MiLCJQSSIsIl9lYXNlU2luZU91dE9iaiIsImVhc2VTaW5lSW4iLCJzaW4iLCJlYXNlU2luZU91dCIsIl9lYXNlU2luZUluT3V0T2JqIiwiZWFzZVNpbmVJbk91dCIsIl9lYXNlRWxhc3RpY0luT2JqIiwiX2Vhc2VFbGFzdGljT3V0T2JqIiwiZWFzZUVsYXN0aWNJbiIsInBlcmlvZCIsIl9wZXJpb2QiLCJlYXNlRWxhc3RpY091dCIsImVhc2VFbGFzdGljSW5PdXQiLCJuZXdUIiwibG9jUGVyaW9kIiwicyIsIl9ib3VuY2VUaW1lIiwidGltZTEiLCJfZWFzZUJvdW5jZUluT2JqIiwiX2Vhc2VCb3VuY2VPdXRPYmoiLCJlYXNlQm91bmNlSW4iLCJlYXNlQm91bmNlT3V0IiwiX2Vhc2VCb3VuY2VJbk91dE9iaiIsImVhc2VCb3VuY2VJbk91dCIsIl9lYXNlQmFja0luT2JqIiwib3ZlcnNob290IiwiX2Vhc2VCYWNrT3V0T2JqIiwiZWFzZUJhY2tJbiIsImVhc2VCYWNrT3V0IiwiX2Vhc2VCYWNrSW5PdXRPYmoiLCJlYXNlQmFja0luT3V0IiwiZWFzZUJlemllckFjdGlvbiIsImEiLCJiIiwiYyIsImQiLCJ0IiwiX2Vhc2VRdWFkcmF0aWNBY3Rpb25JbiIsInRpbWUiLCJlYXNlUXVhZHJhdGljQWN0aW9uSW4iLCJfZWFzZVF1YWRyYXRpY0FjdGlvbk91dCIsImVhc2VRdWFkcmF0aWNBY3Rpb25PdXQiLCJfZWFzZVF1YWRyYXRpY0FjdGlvbkluT3V0IiwicmVzdWx0VGltZSIsImVhc2VRdWFkcmF0aWNBY3Rpb25Jbk91dCIsIl9lYXNlUXVhcnRpY0FjdGlvbkluIiwiZWFzZVF1YXJ0aWNBY3Rpb25JbiIsIl9lYXNlUXVhcnRpY0FjdGlvbk91dCIsImVhc2VRdWFydGljQWN0aW9uT3V0IiwiX2Vhc2VRdWFydGljQWN0aW9uSW5PdXQiLCJlYXNlUXVhcnRpY0FjdGlvbkluT3V0IiwiX2Vhc2VRdWludGljQWN0aW9uSW4iLCJlYXNlUXVpbnRpY0FjdGlvbkluIiwiX2Vhc2VRdWludGljQWN0aW9uT3V0IiwiZWFzZVF1aW50aWNBY3Rpb25PdXQiLCJfZWFzZVF1aW50aWNBY3Rpb25Jbk91dCIsImVhc2VRdWludGljQWN0aW9uSW5PdXQiLCJfZWFzZUNpcmNsZUFjdGlvbkluIiwic3FydCIsImVhc2VDaXJjbGVBY3Rpb25JbiIsIl9lYXNlQ2lyY2xlQWN0aW9uT3V0IiwiZWFzZUNpcmNsZUFjdGlvbk91dCIsIl9lYXNlQ2lyY2xlQWN0aW9uSW5PdXQiLCJlYXNlQ2lyY2xlQWN0aW9uSW5PdXQiLCJfZWFzZUN1YmljQWN0aW9uSW4iLCJlYXNlQ3ViaWNBY3Rpb25JbiIsIl9lYXNlQ3ViaWNBY3Rpb25PdXQiLCJlYXNlQ3ViaWNBY3Rpb25PdXQiLCJfZWFzZUN1YmljQWN0aW9uSW5PdXQiLCJlYXNlQ3ViaWNBY3Rpb25Jbk91dCJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMENBQSxFQUFBQSxDQUFHQyxNQUFIRCxHQUFZLFVBQVVFLElBQVYsRUFBZ0I7QUFBQSxZQUN4QixPQUFPO0FBQUEsZ0JBQ0hDLEtBQUFB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SUFBUEEsR0FBY0EsSUFBZEEsR0FBcUIsQ0FBckJBLENBQWQsQ0FMa0I7QUFBQSxhQURFO0FBQUEsWUFReEJsRCxPQUFBQSxFQUFTLFNBQUEsT0FBQSxHQUFVO0FBQUEsZ0JBQ2YsT0FBT2dGLHFCQUFQLENBRGU7QUFBQSxhQVJLO0FBQUEsU0FBNUI7UUFZQXhGLEVBQUFBLENBQUd5RixvQkFBSHpGLEdBQTBCLFlBQVU7QUFBQSxZQUNoQyxPQUFPd0YscUJBQVAsQ0FEZ0M7QUFBQSxTQUFwQ3hGIiwiZmlsZSI6IkNDQWN0aW9uRWFzZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcclxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuLyoqXHJcbiAqIEBtb2R1bGUgY2NcclxuICovXHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdCB3aXRoIHRoZSByYXRlIHBhcmFtZXRlci4gPGJyIC8+XHJcbiAqIEZyb20gc2xvdyB0byBmYXN0LlxyXG4gKiAhI3poIOWIm+W7uiBlYXNlSW4g57yT5Yqo5a+56LGh77yM55Sx5oWi5Yiw5b+r44CCXHJcbiAqIEBtZXRob2QgZWFzZUluXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYXRlXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlSW4oMy4wKSk7XHJcbiAqL1xyXG5jYy5lYXNlSW4gPSBmdW5jdGlvbiAocmF0ZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfcmF0ZTogcmF0ZSxcclxuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5wb3coZHQsIHRoaXMuX3JhdGUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VJbigxIC8gdGhpcy5fcmF0ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHJhdGUgcGFyYW1ldGVyLiA8YnIgLz5cclxuICogRnJvbSBmYXN0IHRvIHNsb3cuXHJcbiAqICEjemgg5Yib5bu6IGVhc2VPdXQg57yT5Yqo5a+56LGh77yM55Sx5b+r5Yiw5oWi44CCXHJcbiAqIEBtZXRob2QgZWFzZU91dFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmF0ZVxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZU91dCgzLjApKTtcclxuICovXHJcbmNjLmVhc2VPdXQgPSBmdW5jdGlvbiAocmF0ZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfcmF0ZTogcmF0ZSxcclxuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICByZXR1cm4gTWF0aC5wb3coZHQsIDEgLyB0aGlzLl9yYXRlKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgIHJldHVybiBjYy5lYXNlT3V0KDEgLyB0aGlzLl9yYXRlKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3Qgd2l0aCB0aGUgcmF0ZSBwYXJhbWV0ZXIuIDxiciAvPlxyXG4gKiBTbG93IHRvIGZhc3QgdGhlbiB0byBzbG93LlxyXG4gKiAhI3poIOWIm+W7uiBlYXNlSW5PdXQg57yT5Yqo5a+56LGh77yM5oWi5Yiw5b+r77yM54S25ZCO5oWi44CCXHJcbiAqIEBtZXRob2QgZWFzZUluT3V0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSByYXRlXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlSW5PdXQoMy4wKSk7XHJcbiAqL1xyXG5jYy5lYXNlSW5PdXQgPSBmdW5jdGlvbiAocmF0ZSkge1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBfcmF0ZTogcmF0ZSxcclxuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICBkdCAqPSAyO1xyXG4gICAgICAgICAgICBpZiAoZHQgPCAxKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqIE1hdGgucG93KGR0LCB0aGlzLl9yYXRlKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDEuMCAtIDAuNSAqIE1hdGgucG93KDIgLSBkdCwgdGhpcy5fcmF0ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gY2MuZWFzZUluT3V0KHRoaXMuX3JhdGUpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdCB3aXRoIHRoZSByYXRlIHBhcmFtZXRlci4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5FeHBvOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VFeHBvbmVudGlhbEluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlRXhwb25lbnRpYWxJbiDmmK/mjInmjIfmlbDlh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbkV4cG/vvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlRXhwb25lbnRpYWxJblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUV4cG9uZW50aWFsSW4oKSk7XHJcbiAqL1xyXG52YXIgX2Vhc2VFeHBvbmVudGlhbEluT2JqID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbihkdCl7XHJcbiAgICAgICAgcmV0dXJuIGR0ID09PSAwID8gMCA6IE1hdGgucG93KDIsIDEwICogKGR0IC0gMSkpO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIF9lYXNlRXhwb25lbnRpYWxPdXRPYmo7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VFeHBvbmVudGlhbEluID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiBfZWFzZUV4cG9uZW50aWFsSW5PYmo7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlT3V0RXhwbzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlRXhwb25lbnRpYWxPdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VFeHBvbmVudGlhbE91dCDmmK/mjInmjIfmlbDlh73mlbDnvJPliqjpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VPdXRFeHBv77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUV4cG9uZW50aWFsT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlRXhwb25lbnRpYWxPdXQoKSk7XHJcbiAqL1xyXG52YXIgX2Vhc2VFeHBvbmVudGlhbE91dE9iaiA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24oZHQpe1xyXG4gICAgICAgIHJldHVybiBkdCA9PT0gMSA/IDEgOiAoLShNYXRoLnBvdygyLCAtMTAgKiBkdCkpICsgMSk7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VFeHBvbmVudGlhbEluT2JqO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlRXhwb25lbnRpYWxPdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlRXhwb25lbnRpYWxPdXRPYmo7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIGFuIEVhc2VFeHBvbmVudGlhbEluT3V0IGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dEV4cG86IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUV4cG9uZW50aWFsSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VFeHBvbmVudGlhbEluT3V0IOaYr+aMieaMh+aVsOWHveaVsOe8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluT3V0RXhwb++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VFeHBvbmVudGlhbEluT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlRXhwb25lbnRpYWxJbk91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZUV4cG9uZW50aWFsSW5PdXRPYmogPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKGR0KXtcclxuICAgICAgICBpZiggZHQgIT09IDEgJiYgZHQgIT09IDApIHtcclxuICAgICAgICAgICAgZHQgKj0gMjtcclxuICAgICAgICAgICAgaWYgKGR0IDwgMSlcclxuICAgICAgICAgICAgICAgIHJldHVybiAwLjUgKiBNYXRoLnBvdygyLCAxMCAqIChkdCAtIDEpKTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDAuNSAqICgtTWF0aC5wb3coMiwgLTEwICogKGR0IC0gMSkpICsgMik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBkdDtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZUV4cG9uZW50aWFsSW5PdXRPYmo7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VFeHBvbmVudGlhbEluT3V0ID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiBfZWFzZUV4cG9uZW50aWFsSW5PdXRPYmo7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIGFuIEVhc2VTaW5lSW4gYWN0aW9uLiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJblNpbmU6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogRWFzZVNpbmVJbiDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVNpbmVJbiDmmK/mjInmraPlvKblh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJblNpbmXvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlU2luZUluXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlU2luZUluKCkpO1xyXG4gKi9cclxudmFyIF9lYXNlU2luZUluT2JqID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbihkdCl7XHJcbiAgICAgICAgcmV0dXJuIChkdD09PTAgfHwgZHQ9PT0xKSA/IGR0IDogLTEgKiBNYXRoLmNvcyhkdCAqIE1hdGguUEkgLyAyKSArIDE7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VTaW5lT3V0T2JqO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlU2luZUluID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiBfZWFzZVNpbmVJbk9iajtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgYW4gRWFzZVNpbmVPdXQgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dFNpbmU6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogRWFzZVNpbmVPdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VTaW5lSW4g5piv5oyJ5q2j5bym5Ye95pWw57yT5Yqo6YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlT3V0U2luZe+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VTaW5lT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlU2luZU91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZVNpbmVPdXRPYmogPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKGR0KXtcclxuICAgICAgICByZXR1cm4gKGR0PT09MCB8fCBkdD09PTEpID8gZHQgOiBNYXRoLnNpbihkdCAqIE1hdGguUEkgLyAyKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZVNpbmVJbk9iajtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZVNpbmVPdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlU2luZU91dE9iajtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dFNpbmU6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVNpbmVJbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVNpbmVJbiDmmK/mjInmraPlvKblh73mlbDnvJPliqjov5vlhaXlubbpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbk91dFNpbmXvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlU2luZUluT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlU2luZUluT3V0KCkpO1xyXG4gKi9cclxudmFyIF9lYXNlU2luZUluT3V0T2JqID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbihkdCl7XHJcbiAgICAgICAgcmV0dXJuIChkdCA9PT0gMCB8fCBkdCA9PT0gMSkgPyBkdCA6IC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIGR0KSAtIDEpO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIF9lYXNlU2luZUluT3V0T2JqO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlU2luZUluT3V0ID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiBfZWFzZVNpbmVJbk91dE9iajtcclxufTtcclxuXHJcbi8qKlxyXG4gKiBAbW9kdWxlIGNjXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3Qgd2l0aCB0aGUgcGVyaW9kIGluIHJhZGlhbnMgKGRlZmF1bHQgaXMgMC4zKS4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5FbGFzdGljOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VFbGFzdGljSW4g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VFbGFzdGljSW4g5piv5oyJ5by55oCn5puy57q/57yT5Yqo6L+b5YWl55qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguaVsCBlYXNlSW5FbGFzdGlj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUVsYXN0aWNJblxyXG4gKiBAcGFyYW0ge051bWJlcn0gcGVyaW9kXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VFbGFzdGljSW4oMy4wKSk7XHJcbiAqL1xyXG4vL2RlZmF1bHQgZWFzZSBlbGFzdGljIGluIG9iamVjdCAocGVyaW9kID0gMC4zKVxyXG52YXIgX2Vhc2VFbGFzdGljSW5PYmogPSB7XHJcbiAgICBlYXNpbmc6ZnVuY3Rpb24oZHQpe1xyXG4gICAgICAgIGlmIChkdCA9PT0gMCB8fCBkdCA9PT0gMSlcclxuICAgICAgICAgICAgcmV0dXJuIGR0O1xyXG4gICAgICAgIGR0ID0gZHQgLSAxO1xyXG4gICAgICAgIHJldHVybiAtTWF0aC5wb3coMiwgMTAgKiBkdCkgKiBNYXRoLnNpbigoZHQgLSAoMC4zIC8gNCkpICogTWF0aC5QSSAqIDIgLyAwLjMpO1xyXG4gICAgfSxcclxuICAgICByZXZlcnNlOmZ1bmN0aW9uKCl7XHJcbiAgICAgICAgIHJldHVybiBfZWFzZUVsYXN0aWNPdXRPYmo7XHJcbiAgICAgfVxyXG4gfTtcclxuY2MuZWFzZUVsYXN0aWNJbiA9IGZ1bmN0aW9uIChwZXJpb2QpIHtcclxuICAgIGlmKHBlcmlvZCAmJiBwZXJpb2QgIT09IDAuMyl7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgX3BlcmlvZDogcGVyaW9kLFxyXG4gICAgICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGR0ID09PSAwIHx8IGR0ID09PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkdDtcclxuICAgICAgICAgICAgICAgIGR0ID0gZHQgLSAxO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLnBvdygyLCAxMCAqIGR0KSAqIE1hdGguc2luKChkdCAtICh0aGlzLl9wZXJpb2QgLyA0KSkgKiBNYXRoLlBJICogMiAvIHRoaXMuX3BlcmlvZCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJldmVyc2U6ZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VFbGFzdGljT3V0KHRoaXMuX3BlcmlvZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9lYXNlRWxhc3RpY0luT2JqO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3Qgd2l0aCB0aGUgcGVyaW9kIGluIHJhZGlhbnMgKGRlZmF1bHQgaXMgMC4zKS4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlT3V0RWxhc3RpYzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlRWxhc3RpY091dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUVsYXN0aWNPdXQg5piv5oyJ5by55oCn5puy57q/57yT5Yqo6YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlT3V0RWxhc3RpY++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VFbGFzdGljT3V0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBwZXJpb2RcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUVsYXN0aWNPdXQoMy4wKSk7XHJcbiAqL1xyXG4vL2RlZmF1bHQgZWFzZSBlbGFzdGljIG91dCBvYmplY3QgKHBlcmlvZCA9IDAuMylcclxudmFyIF9lYXNlRWxhc3RpY091dE9iaiA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgcmV0dXJuIChkdCA9PT0gMCB8fCBkdCA9PT0gMSkgPyBkdCA6IE1hdGgucG93KDIsIC0xMCAqIGR0KSAqIE1hdGguc2luKChkdCAtICgwLjMgLyA0KSkgKiBNYXRoLlBJICogMiAvIDAuMykgKyAxO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6ZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VFbGFzdGljSW5PYmo7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VFbGFzdGljT3V0ID0gZnVuY3Rpb24gKHBlcmlvZCkge1xyXG4gICAgaWYocGVyaW9kICYmIHBlcmlvZCAhPT0gMC4zKXtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBfcGVyaW9kOiBwZXJpb2QsXHJcbiAgICAgICAgICAgIGVhc2luZzogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKGR0ID09PSAwIHx8IGR0ID09PSAxKSA/IGR0IDogTWF0aC5wb3coMiwgLTEwICogZHQpICogTWF0aC5zaW4oKGR0IC0gKHRoaXMuX3BlcmlvZCAvIDQpKSAqIE1hdGguUEkgKiAyIC8gdGhpcy5fcGVyaW9kKSArIDE7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJldmVyc2U6ZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgIHJldHVybiBjYy5lYXNlRWxhc3RpY0luKHRoaXMuX3BlcmlvZCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIF9lYXNlRWxhc3RpY091dE9iajtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHBlcmlvZCBpbiByYWRpYW5zIChkZWZhdWx0IGlzIDAuMykuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluT3V0RWxhc3RpYzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlRWxhc3RpY0luT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlRWxhc3RpY0luT3V0IOaYr+aMieW8ueaAp+absue6v+e8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluT3V0RWxhc3RpY++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VFbGFzdGljSW5PdXRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHBlcmlvZFxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlRWxhc3RpY0luT3V0KDMuMCkpO1xyXG4gKi9cclxuY2MuZWFzZUVsYXN0aWNJbk91dCA9IGZ1bmN0aW9uIChwZXJpb2QpIHtcclxuICAgIHBlcmlvZCA9IHBlcmlvZCB8fCAwLjM7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIF9wZXJpb2Q6IHBlcmlvZCxcclxuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICB2YXIgbmV3VCA9IDA7XHJcbiAgICAgICAgICAgIHZhciBsb2NQZXJpb2QgPSB0aGlzLl9wZXJpb2Q7XHJcbiAgICAgICAgICAgIGlmIChkdCA9PT0gMCB8fCBkdCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgbmV3VCA9IGR0O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZHQgPSBkdCAqIDI7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWxvY1BlcmlvZClcclxuICAgICAgICAgICAgICAgICAgICBsb2NQZXJpb2QgPSB0aGlzLl9wZXJpb2QgPSAwLjMgKiAxLjU7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGxvY1BlcmlvZCAvIDQ7XHJcbiAgICAgICAgICAgICAgICBkdCA9IGR0IC0gMTtcclxuICAgICAgICAgICAgICAgIGlmIChkdCA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3VCA9IC0wLjUgKiBNYXRoLnBvdygyLCAxMCAqIGR0KSAqIE1hdGguc2luKChkdCAtIHMpICogTWF0aC5QSSAqIDIgLyBsb2NQZXJpb2QpO1xyXG4gICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1QgPSBNYXRoLnBvdygyLCAtMTAgKiBkdCkgKiBNYXRoLnNpbigoZHQgLSBzKSAqIE1hdGguUEkgKiAyIC8gbG9jUGVyaW9kKSAqIDAuNSArIDE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG5ld1Q7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICByZXR1cm4gY2MuZWFzZUVsYXN0aWNJbk91dCh0aGlzLl9wZXJpb2QpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn07XHJcblxyXG4vKipcclxuICogQG1vZHVsZSBjY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIF9ib3VuY2VUaW1lICh0aW1lMSkge1xyXG4gICAgaWYgKHRpbWUxIDwgMSAvIDIuNzUpIHtcclxuICAgICAgICByZXR1cm4gNy41NjI1ICogdGltZTEgKiB0aW1lMTtcclxuICAgIH0gZWxzZSBpZiAodGltZTEgPCAyIC8gMi43NSkge1xyXG4gICAgICAgIHRpbWUxIC09IDEuNSAvIDIuNzU7XHJcbiAgICAgICAgcmV0dXJuIDcuNTYyNSAqIHRpbWUxICogdGltZTEgKyAwLjc1O1xyXG4gICAgfSBlbHNlIGlmICh0aW1lMSA8IDIuNSAvIDIuNzUpIHtcclxuICAgICAgICB0aW1lMSAtPSAyLjI1IC8gMi43NTtcclxuICAgICAgICByZXR1cm4gNy41NjI1ICogdGltZTEgKiB0aW1lMSArIDAuOTM3NTtcclxuICAgIH1cclxuXHJcbiAgICB0aW1lMSAtPSAyLjYyNSAvIDIuNzU7XHJcbiAgICByZXR1cm4gNy41NjI1ICogdGltZTEgKiB0aW1lMSArIDAuOTg0Mzc1O1xyXG59O1xyXG5cclxudmFyIF9lYXNlQm91bmNlSW5PYmogPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKGR0KXtcclxuICAgICAgICByZXR1cm4gMSAtIF9ib3VuY2VUaW1lKDEgLSBkdCk7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VCb3VuY2VPdXRPYmo7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEVhc2VkIGJvdW5jZSBlZmZlY3QgYXQgdGhlIGJlZ2lubmluZy5cclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUJvdW5jZUluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQm91bmNlSW4g5piv5oyJ5by56Lez5Yqo5L2c57yT5Yqo6L+b5YWl55qE5Yqo5L2c44CCXHJcbiAqIEBtZXRob2QgZWFzZUJvdW5jZUluXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VCb3VuY2VJbigpKTtcclxuICovXHJcbmNjLmVhc2VCb3VuY2VJbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VCb3VuY2VJbk9iajtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogRWFzZWQgYm91bmNlIGVmZmVjdCBhdCB0aGUgZW5kaW5nLlxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQm91bmNlT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQm91bmNlT3V0IOaYr+aMieW8uei3s+WKqOS9nOe8k+WKqOmAgOWHuueahOWKqOS9nOOAglxyXG4gKiBAbWV0aG9kIGVhc2VCb3VuY2VPdXRcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUJvdW5jZU91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZUJvdW5jZU91dE9iaiA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24oZHQpe1xyXG4gICAgICAgIHJldHVybiBfYm91bmNlVGltZShkdCk7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTpmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9lYXNlQm91bmNlSW5PYmo7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VCb3VuY2VPdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQm91bmNlT3V0T2JqO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBFYXNlZCBib3VuY2UgZWZmZWN0IGF0IHRoZSBiZWdpbmluZyBhbmQgZW5kaW5nLlxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQm91bmNlSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VCb3VuY2VJbk91dCDmmK/mjInlvLnot7PliqjkvZznvJPliqjov5vlhaXlubbpgIDlh7rnmoTliqjkvZzjgIJcclxuICogQG1ldGhvZCBlYXNlQm91bmNlSW5PdXRcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUJvdW5jZUluT3V0KCkpO1xyXG4gKi9cclxudmFyIF9lYXNlQm91bmNlSW5PdXRPYmogPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uICh0aW1lMSkge1xyXG4gICAgICAgIHZhciBuZXdUO1xyXG4gICAgICAgIGlmICh0aW1lMSA8IDAuNSkge1xyXG4gICAgICAgICAgICB0aW1lMSA9IHRpbWUxICogMjtcclxuICAgICAgICAgICAgbmV3VCA9ICgxIC0gX2JvdW5jZVRpbWUoMSAtIHRpbWUxKSkgKiAwLjU7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbmV3VCA9IF9ib3VuY2VUaW1lKHRpbWUxICogMiAtIDEpICogMC41ICsgMC41O1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3VDtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZUJvdW5jZUluT3V0T2JqO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlQm91bmNlSW5PdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQm91bmNlSW5PdXRPYmo7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gdG8gbW92ZSBzbG93bHksIGFuZCB0aGVuIGFjY2VsZXJhdGVkIHRvIHRoZSByaWdodCBkaXJlY3Rpb24uXHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VCYWNrSW4g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIGVhc2VCYWNrSW4g5piv5Zyo55u45Y+N55qE5pa55ZCR57yT5oWi56e75Yqo77yM54S25ZCO5Yqg6YCf5Yiw5q2j56Gu55qE5pa55ZCR44CCPGJyIC8+XHJcbiAqIEBtZXRob2QgZWFzZUJhY2tJblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlQmFja0luKCkpO1xyXG4gKi9cclxudmFyIF9lYXNlQmFja0luT2JqID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbiAodGltZTEpIHtcclxuICAgICAgICB2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcclxuICAgICAgICByZXR1cm4gKHRpbWUxPT09MCB8fCB0aW1lMT09PTEpID8gdGltZTEgOiB0aW1lMSAqIHRpbWUxICogKChvdmVyc2hvb3QgKyAxKSAqIHRpbWUxIC0gb3ZlcnNob290KTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZUJhY2tPdXRPYmo7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VCYWNrSW4gPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQmFja0luT2JqO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBGYXN0IG1vdmluZyBtb3JlIHRoYW4gdGhlIGZpbmlzaCwgYW5kIHRoZW4gc2xvd2x5IGJhY2sgdG8gdGhlIGZpbmlzaC5cclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUJhY2tPdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIGVhc2VCYWNrT3V0IOW/q+mAn+enu+WKqOi2heWHuuebruagh++8jOeEtuWQjuaFouaFouWbnuWIsOebruagh+eCueOAglxyXG4gKiBAbWV0aG9kIGVhc2VCYWNrT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VCYWNrT3V0KCkpO1xyXG4gKi9cclxudmFyIF9lYXNlQmFja091dE9iaiA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24gKHRpbWUxKSB7XHJcbiAgICAgICAgdmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XHJcbiAgICAgICAgdGltZTEgPSB0aW1lMSAtIDE7XHJcbiAgICAgICAgcmV0dXJuIHRpbWUxICogdGltZTEgKiAoKG92ZXJzaG9vdCArIDEpICogdGltZTEgKyBvdmVyc2hvb3QpICsgMTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZUJhY2tJbk9iajtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZUJhY2tPdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQmFja091dE9iajtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogQmVnaW5pbmcgb2YgY2MuRWFzZUJhY2tJbi4gRW5kaW5nIG9mIGNjLkVhc2VCYWNrT3V0LlxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQmFja0luT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBAbWV0aG9kIGVhc2VCYWNrSW5PdXRcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUJhY2tJbk91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZUJhY2tJbk91dE9iaiA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24gKHRpbWUxKSB7XHJcbiAgICAgICAgdmFyIG92ZXJzaG9vdCA9IDEuNzAxNTggKiAxLjUyNTtcclxuICAgICAgICB0aW1lMSA9IHRpbWUxICogMjtcclxuICAgICAgICBpZiAodGltZTEgPCAxKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAodGltZTEgKiB0aW1lMSAqICgob3ZlcnNob290ICsgMSkgKiB0aW1lMSAtIG92ZXJzaG9vdCkpIC8gMjtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aW1lMSA9IHRpbWUxIC0gMjtcclxuICAgICAgICAgICAgcmV0dXJuICh0aW1lMSAqIHRpbWUxICogKChvdmVyc2hvb3QgKyAxKSAqIHRpbWUxICsgb3ZlcnNob290KSkgLyAyICsgMTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VCYWNrSW5PdXRPYmo7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VCYWNrSW5PdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQmFja0luT3V0T2JqO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBJbnRvIHRoZSA0IHJlZmVyZW5jZSBwb2ludC4gPGJyIC8+XHJcbiAqIFRvIGNhbGN1bGF0ZSB0aGUgbW90aW9uIGN1cnZlLlxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQmV6aWVyQWN0aW9uIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQmV6aWVyQWN0aW9uIOaYr+aMiei0neWhnuWwlOabsue6v+e8k+WKqOeahOWKqOS9nOOAglxyXG4gKiBAbWV0aG9kIGVhc2VCZXppZXJBY3Rpb25cclxuICogQHBhcmFtIHtOdW1iZXJ9IHAwIFRoZSBmaXJzdCBiZXppZXIgcGFyYW1ldGVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBwMSBUaGUgc2Vjb25kIGJlemllciBwYXJhbWV0ZXJcclxuICogQHBhcmFtIHtOdW1iZXJ9IHAyIFRoZSB0aGlyZCBiZXppZXIgcGFyYW1ldGVyXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBwMyBUaGUgZm91cnRoIGJlemllciBwYXJhbWV0ZXJcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VCZXppZXJBY3Rpb24oMC41LCAwLjUsIDEuMCwgMS4wKSk7XHJcbiAqL1xyXG5jYy5lYXNlQmV6aWVyQWN0aW9uID0gZnVuY3Rpb24oYSwgYiwgYywgZCl7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGVhc2luZzogZnVuY3Rpb24odCl7XHJcbiAgICAgICAgICAgIHJldHVybiAoTWF0aC5wb3coMS10LDMpICogYSArIDMqdCooTWF0aC5wb3coMS10LDIpKSpiICsgMypNYXRoLnBvdyh0LDIpKigxLXQpKmMgKyBNYXRoLnBvdyh0LDMpKmQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VCZXppZXJBY3Rpb24oZCwgYywgYiwgYSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJblF1YWQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1YWRyYXRpY0FjdGlvbkluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlUXVhZHJhdGljSW7mmK/mjInkuozmrKHlh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJblF1YWTvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlUXVhZHJhdGljQWN0aW9uSW5cclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZVF1YWRyYXRpY0FjdGlvbkluKCkpO1xyXG4gKi9cclxudmFyIF9lYXNlUXVhZHJhdGljQWN0aW9uSW4gPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKHRpbWUpe1xyXG4gICAgICAgIHJldHVybiBNYXRoLnBvdyh0aW1lLCAyKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZVF1YWRyYXRpY0FjdGlvbkluO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlUXVhZHJhdGljQWN0aW9uSW4gPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlUXVhZHJhdGljQWN0aW9uSW47XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlT3V0UXVhZDogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlUXVhZHJhdGljQWN0aW9uT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlUXVhZHJhdGljT3V0IOaYr+aMieS6jOasoeWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dFF1YWTvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlUXVhZHJhdGljQWN0aW9uT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VRdWFkcmF0aWNBY3Rpb25PdXQoKSk7XHJcbiAqL1xyXG52YXIgX2Vhc2VRdWFkcmF0aWNBY3Rpb25PdXQgPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKHRpbWUpe1xyXG4gICAgICAgIHJldHVybiAtdGltZSoodGltZS0yKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZVF1YWRyYXRpY0FjdGlvbk91dDtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZVF1YWRyYXRpY0FjdGlvbk91dCA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VRdWFkcmF0aWNBY3Rpb25PdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5PdXRRdWFkOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VRdWFkcmF0aWNBY3Rpb25Jbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVF1YWRyYXRpY0luT3V0IOaYr+aMieS6jOasoeWHveaVsOe8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluT3V0UXVhZO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWFkcmF0aWNBY3Rpb25Jbk91dFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlUXVhZHJhdGljQWN0aW9uSW5PdXQoKSk7XHJcbiAqL1xyXG52YXIgX2Vhc2VRdWFkcmF0aWNBY3Rpb25Jbk91dCA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24odGltZSl7XHJcbiAgICAgICAgdmFyIHJlc3VsdFRpbWUgPSB0aW1lO1xyXG4gICAgICAgIHRpbWUgKj0gMjtcclxuICAgICAgICBpZih0aW1lIDwgMSl7XHJcbiAgICAgICAgICAgIHJlc3VsdFRpbWUgPSB0aW1lICogdGltZSAqIDAuNTtcclxuICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgLS10aW1lO1xyXG4gICAgICAgICAgICByZXN1bHRUaW1lID0gLTAuNSAqICggdGltZSAqICggdGltZSAtIDIgKSAtIDEpXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHRUaW1lO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIF9lYXNlUXVhZHJhdGljQWN0aW9uSW5PdXQ7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VRdWFkcmF0aWNBY3Rpb25Jbk91dCA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VRdWFkcmF0aWNBY3Rpb25Jbk91dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbnRRdWFydDogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlUXVhcnRpY0FjdGlvbkluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlUXVhcnRpY0luIOaYr+aMieWbm+asoeWHveaVsOe8k+WKqOi/m+WFpeeahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUludFF1YXJ077yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZVF1YXJ0aWNBY3Rpb25JblxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlUXVhcnRpY0FjdGlvbkluKCkpO1xyXG4gKi9cclxudmFyIF9lYXNlUXVhcnRpY0FjdGlvbkluID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICByZXR1cm4gdGltZSAqIHRpbWUgKiB0aW1lICogdGltZTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZVF1YXJ0aWNBY3Rpb25JbjtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZVF1YXJ0aWNBY3Rpb25JbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uSW47XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlT3V0UXVhcnQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1YXJ0aWNBY3Rpb25PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWFydGljT3V0IOaYr+aMieWbm+asoeWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dFF1YXJ077yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZVF1YXJ0aWNBY3Rpb25PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuUXVhcnRpY0FjdGlvbk91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZVF1YXJ0aWNBY3Rpb25PdXQgPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKHRpbWUpe1xyXG4gICAgICAgIHRpbWUgLT0gMTtcclxuICAgICAgICByZXR1cm4gLSh0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lIC0gMSk7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uT3V0O1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlUXVhcnRpY0FjdGlvbk91dCA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uT3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuICA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dFF1YXJ0OiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VRdWFydGljQWN0aW9uSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWFydGljSW5PdXQg5piv5oyJ5Zub5qyh5Ye95pWw57yT5Yqo6L+b5YWl5bm26YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5PdXRRdWFydO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWFydGljQWN0aW9uSW5PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXHJcbnZhciBfZWFzZVF1YXJ0aWNBY3Rpb25Jbk91dCA9IHtcclxuICAgIGVhc2luZzogZnVuY3Rpb24odGltZSl7XHJcbiAgICAgICAgdGltZSA9IHRpbWUqMjtcclxuICAgICAgICBpZiAodGltZSA8IDEpXHJcbiAgICAgICAgICAgIHJldHVybiAwLjUgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lO1xyXG4gICAgICAgIHRpbWUgLT0gMjtcclxuICAgICAgICByZXR1cm4gLTAuNSAqICh0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lIC0gMik7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uSW5PdXQ7XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VRdWFydGljQWN0aW9uSW5PdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlUXVhcnRpY0FjdGlvbkluT3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluUXVpbnQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1aW50aWNBY3Rpb25JbiDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVF1aW50aWNJbiDmmK/mjInkupTmrKHlh73mlbDnvJPliqjov5vnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJblF1aW5077yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZVF1aW50aWNBY3Rpb25JblxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlUXVpbnRpY0FjdGlvbkluKCkpO1xyXG4gKi9cclxudmFyIF9lYXNlUXVpbnRpY0FjdGlvbkluID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICByZXR1cm4gdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VRdWludGljQWN0aW9uSW47XHJcbiAgICB9XHJcbn07XHJcbmNjLmVhc2VRdWludGljQWN0aW9uSW4gPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlUXVpbnRpY0FjdGlvbkluO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dFF1aW50OiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VRdWludGljQWN0aW9uT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlUXVpbnRpY091dCDmmK/mjInkupTmrKHlh73mlbDnvJPliqjpgIDlh7rnmoTliqjkvZxcclxuICog5Y+C6ICDIGVhc2VPdXRRdWludO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWludGljQWN0aW9uT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VRdWFkcmF0aWNBY3Rpb25PdXQoKSk7XHJcbiAqL1xyXG52YXIgX2Vhc2VRdWludGljQWN0aW9uT3V0ID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICB0aW1lIC09MTtcclxuICAgICAgICByZXR1cm4gKHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lICsgMSk7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VRdWludGljQWN0aW9uT3V0O1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlUXVpbnRpY0FjdGlvbk91dCA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VRdWludGljQWN0aW9uT3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluT3V0UXVpbnQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1aW50aWNBY3Rpb25Jbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVF1aW50aWNJbk91dOaYr+aMieS6lOasoeWHveaVsOe8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluT3V0UXVpbnTvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlUXVpbnRpY0FjdGlvbkluT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VRdWludGljQWN0aW9uSW5PdXQoKSk7XHJcbiAqL1xyXG52YXIgX2Vhc2VRdWludGljQWN0aW9uSW5PdXQgPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKHRpbWUpe1xyXG4gICAgICAgIHRpbWUgPSB0aW1lKjI7XHJcbiAgICAgICAgaWYgKHRpbWUgPCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gMC41ICogdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7XHJcbiAgICAgICAgdGltZSAtPSAyO1xyXG4gICAgICAgIHJldHVybiAwLjUgKiAodGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKyAyKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZVF1aW50aWNBY3Rpb25Jbk91dDtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZVF1aW50aWNBY3Rpb25Jbk91dCA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VRdWludGljQWN0aW9uSW5PdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5DaXJjOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VDaXJjbGVBY3Rpb25JbiDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUNpcmNsZUlu5piv5oyJ5ZyG5b2i5puy57q/57yT5Yqo6L+b5YWl55qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5DaXJj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUNpcmNsZUFjdGlvbkluXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VDaXJjbGVBY3Rpb25JbigpKTtcclxuICovXHJcbnZhciBfZWFzZUNpcmNsZUFjdGlvbkluID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICByZXR1cm4gLTEgKiAoTWF0aC5zcXJ0KDEgLSB0aW1lICogdGltZSkgLSAxKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZUNpcmNsZUFjdGlvbkluO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlQ2lyY2xlQWN0aW9uSW4gPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQ2lyY2xlQWN0aW9uSW47XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlT3V0Q2lyYzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQ2lyY2xlQWN0aW9uT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQ2lyY2xlT3V05piv5oyJ5ZyG5b2i5puy57q/57yT5Yqo6YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlT3V0Q2lyY++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VDaXJjbGVBY3Rpb25PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbmVhc2luZyhjYy5lYXNlQ2lyY2xlQWN0aW9uT3V0KCkpO1xyXG4gKi9cclxudmFyIF9lYXNlQ2lyY2xlQWN0aW9uT3V0ID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICB0aW1lID0gdGltZSAtIDE7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguc3FydCgxIC0gdGltZSAqIHRpbWUpO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIF9lYXNlQ2lyY2xlQWN0aW9uT3V0O1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlQ2lyY2xlQWN0aW9uT3V0ID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiBfZWFzZUNpcmNsZUFjdGlvbk91dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dENpcmM6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUNpcmNsZUFjdGlvbkluT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQ2lyY2xlSW5PdXQg5piv5oyJ5ZyG5b2i5puy57q/57yT5Yqo6L+b5YWl5bm26YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5PdXRDaXJj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUNpcmNsZUFjdGlvbkluT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VDaXJjbGVBY3Rpb25Jbk91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZUNpcmNsZUFjdGlvbkluT3V0ID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICB0aW1lID0gdGltZSAqIDI7XHJcbiAgICAgICAgaWYgKHRpbWUgPCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gLTAuNSAqIChNYXRoLnNxcnQoMSAtIHRpbWUgKiB0aW1lKSAtIDEpO1xyXG4gICAgICAgIHRpbWUgLT0gMjtcclxuICAgICAgICByZXR1cm4gMC41ICogKE1hdGguc3FydCgxIC0gdGltZSAqIHRpbWUpICsgMSk7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VDaXJjbGVBY3Rpb25Jbk91dDtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZUNpcmNsZUFjdGlvbkluT3V0ID0gZnVuY3Rpb24oKXtcclxuICAgIHJldHVybiBfZWFzZUNpcmNsZUFjdGlvbkluT3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluQ3ViaWM6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUN1YmljQWN0aW9uSW4g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VDdWJpY0luIOaYr+aMieS4ieasoeWHveaVsOe8k+WKqOi/m+WFpeeahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluQ3ViaWPvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlQ3ViaWNBY3Rpb25JblxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlQ3ViaWNBY3Rpb25JbigpKTtcclxuICovXHJcbnZhciBfZWFzZUN1YmljQWN0aW9uSW4gPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKHRpbWUpe1xyXG4gICAgICAgIHJldHVybiB0aW1lICogdGltZSAqIHRpbWU7XHJcbiAgICB9LFxyXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24oKXtcclxuICAgICAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbkluO1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlQ3ViaWNBY3Rpb25JbiA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbkluO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dEN1YmljOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VDdWJpY0FjdGlvbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUN1YmljT3V0IOaYr+aMieS4ieasoeWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dEN1Ymlj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUN1YmljQWN0aW9uT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VDdWJpY0FjdGlvbk91dCgpKTtcclxuICovXHJcbnZhciBfZWFzZUN1YmljQWN0aW9uT3V0ID0ge1xyXG4gICAgZWFzaW5nOiBmdW5jdGlvbih0aW1lKXtcclxuICAgICAgICB0aW1lIC09IDE7XHJcbiAgICAgICAgcmV0dXJuICh0aW1lICogdGltZSAqIHRpbWUgKyAxKTtcclxuICAgIH0sXHJcbiAgICByZXZlcnNlOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHJldHVybiBfZWFzZUN1YmljQWN0aW9uT3V0O1xyXG4gICAgfVxyXG59O1xyXG5jYy5lYXNlQ3ViaWNBY3Rpb25PdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQ3ViaWNBY3Rpb25PdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5PdXRDdWJpYzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQ3ViaWNBY3Rpb25Jbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUN1YmljSW5PdXTmmK/mjInkuInmrKHlh73mlbDnvJPliqjov5vlhaXlubbpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbk91dEN1Ymlj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUN1YmljQWN0aW9uSW5PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXHJcbnZhciBfZWFzZUN1YmljQWN0aW9uSW5PdXQgPSB7XHJcbiAgICBlYXNpbmc6IGZ1bmN0aW9uKHRpbWUpe1xyXG4gICAgICAgIHRpbWUgPSB0aW1lKjI7XHJcbiAgICAgICAgaWYgKHRpbWUgPCAxKVxyXG4gICAgICAgICAgICByZXR1cm4gMC41ICogdGltZSAqIHRpbWUgKiB0aW1lO1xyXG4gICAgICAgIHRpbWUgLT0gMjtcclxuICAgICAgICByZXR1cm4gMC41ICogKHRpbWUgKiB0aW1lICogdGltZSArIDIpO1xyXG4gICAgfSxcclxuICAgIHJldmVyc2U6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgcmV0dXJuIF9lYXNlQ3ViaWNBY3Rpb25Jbk91dDtcclxuICAgIH1cclxufTtcclxuY2MuZWFzZUN1YmljQWN0aW9uSW5PdXQgPSBmdW5jdGlvbigpe1xyXG4gICAgcmV0dXJuIF9lYXNlQ3ViaWNBY3Rpb25Jbk91dDtcclxufTtcclxuXHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDA4LTIwMTAgUmljYXJkbyBRdWVzYWRhXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXHJcbiAqIEBtb2R1bGUgY2NcclxuICovXG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHJhdGUgcGFyYW1ldGVyLiA8YnIgLz5cclxuICogRnJvbSBzbG93IHRvIGZhc3QuXHJcbiAqICEjemgg5Yib5bu6IGVhc2VJbiDnvJPliqjlr7nosaHvvIznlLHmhaLliLDlv6vjgIJcclxuICogQG1ldGhvZCBlYXNlSW5cclxuICogQHBhcmFtIHtOdW1iZXJ9IHJhdGVcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VJbigzLjApKTtcclxuICovXG5jYy5lYXNlSW4gPSBmdW5jdGlvbiAocmF0ZSkge1xuICAgIHJldHVybiB7XG4gICAgICAgIF9yYXRlOiByYXRlLFxuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucG93KGR0LCB0aGlzLl9yYXRlKTtcbiAgICAgICAgfSxcbiAgICAgICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgICAgIHJldHVybiBjYy5lYXNlSW4oMSAvIHRoaXMuX3JhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHJhdGUgcGFyYW1ldGVyLiA8YnIgLz5cclxuICogRnJvbSBmYXN0IHRvIHNsb3cuXHJcbiAqICEjemgg5Yib5bu6IGVhc2VPdXQg57yT5Yqo5a+56LGh77yM55Sx5b+r5Yiw5oWi44CCXHJcbiAqIEBtZXRob2QgZWFzZU91dFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmF0ZVxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZU91dCgzLjApKTtcclxuICovXG5jYy5lYXNlT3V0ID0gZnVuY3Rpb24gKHJhdGUpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBfcmF0ZTogcmF0ZSxcbiAgICAgICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcoZHQpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLnBvdyhkdCwgMSAvIHRoaXMuX3JhdGUpO1xuICAgICAgICB9LFxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VPdXQoMSAvIHRoaXMuX3JhdGUpO1xuICAgICAgICB9XG4gICAgfTtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHJhdGUgcGFyYW1ldGVyLiA8YnIgLz5cclxuICogU2xvdyB0byBmYXN0IHRoZW4gdG8gc2xvdy5cclxuICogISN6aCDliJvlu7ogZWFzZUluT3V0IOe8k+WKqOWvueixoe+8jOaFouWIsOW/q++8jOeEtuWQjuaFouOAglxyXG4gKiBAbWV0aG9kIGVhc2VJbk91dFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcmF0ZVxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUluT3V0KDMuMCkpO1xyXG4gKi9cbmNjLmVhc2VJbk91dCA9IGZ1bmN0aW9uIChyYXRlKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX3JhdGU6IHJhdGUsXG4gICAgICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKGR0KSB7XG4gICAgICAgICAgICBkdCAqPSAyO1xuICAgICAgICAgICAgaWYgKGR0IDwgMSkgcmV0dXJuIDAuNSAqIE1hdGgucG93KGR0LCB0aGlzLl9yYXRlKTtlbHNlIHJldHVybiAxLjAgLSAwLjUgKiBNYXRoLnBvdygyIC0gZHQsIHRoaXMuX3JhdGUpO1xuICAgICAgICB9LFxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VJbk91dCh0aGlzLl9yYXRlKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdCB3aXRoIHRoZSByYXRlIHBhcmFtZXRlci4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5FeHBvOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VFeHBvbmVudGlhbEluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlRXhwb25lbnRpYWxJbiDmmK/mjInmjIfmlbDlh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbkV4cG/vvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlRXhwb25lbnRpYWxJblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUV4cG9uZW50aWFsSW4oKSk7XHJcbiAqL1xudmFyIF9lYXNlRXhwb25lbnRpYWxJbk9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICByZXR1cm4gZHQgPT09IDAgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAoZHQgLSAxKSk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VFeHBvbmVudGlhbE91dE9iajtcbiAgICB9XG59O1xuY2MuZWFzZUV4cG9uZW50aWFsSW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlRXhwb25lbnRpYWxJbk9iajtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VPdXRFeHBvOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VFeHBvbmVudGlhbE91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUV4cG9uZW50aWFsT3V0IOaYr+aMieaMh+aVsOWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dEV4cG/vvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlRXhwb25lbnRpYWxPdXRcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VFeHBvbmVudGlhbE91dCgpKTtcclxuICovXG52YXIgX2Vhc2VFeHBvbmVudGlhbE91dE9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICByZXR1cm4gZHQgPT09IDEgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIGR0KSArIDE7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VFeHBvbmVudGlhbEluT2JqO1xuICAgIH1cbn07XG5jYy5lYXNlRXhwb25lbnRpYWxPdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlRXhwb25lbnRpYWxPdXRPYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIGFuIEVhc2VFeHBvbmVudGlhbEluT3V0IGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dEV4cG86IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUV4cG9uZW50aWFsSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VFeHBvbmVudGlhbEluT3V0IOaYr+aMieaMh+aVsOWHveaVsOe8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluT3V0RXhwb++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VFeHBvbmVudGlhbEluT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlRXhwb25lbnRpYWxJbk91dCgpKTtcclxuICovXG52YXIgX2Vhc2VFeHBvbmVudGlhbEluT3V0T2JqID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKGR0KSB7XG4gICAgICAgIGlmIChkdCAhPT0gMSAmJiBkdCAhPT0gMCkge1xuICAgICAgICAgICAgZHQgKj0gMjtcbiAgICAgICAgICAgIGlmIChkdCA8IDEpIHJldHVybiAwLjUgKiBNYXRoLnBvdygyLCAxMCAqIChkdCAtIDEpKTtlbHNlIHJldHVybiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqIChkdCAtIDEpKSArIDIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkdDtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZUV4cG9uZW50aWFsSW5PdXRPYmo7XG4gICAgfVxufTtcbmNjLmVhc2VFeHBvbmVudGlhbEluT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZWFzZUV4cG9uZW50aWFsSW5PdXRPYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIGFuIEVhc2VTaW5lSW4gYWN0aW9uLiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJblNpbmU6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogRWFzZVNpbmVJbiDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVNpbmVJbiDmmK/mjInmraPlvKblh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJblNpbmXvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlU2luZUluXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlU2luZUluKCkpO1xyXG4gKi9cbnZhciBfZWFzZVNpbmVJbk9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICByZXR1cm4gZHQgPT09IDAgfHwgZHQgPT09IDEgPyBkdCA6IC0xICogTWF0aC5jb3MoZHQgKiBNYXRoLlBJIC8gMikgKyAxO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9lYXNlU2luZU91dE9iajtcbiAgICB9XG59O1xuY2MuZWFzZVNpbmVJbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VTaW5lSW5PYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIGFuIEVhc2VTaW5lT3V0IGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VPdXRTaW5lOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IEVhc2VTaW5lT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlU2luZUluIOaYr+aMieato+W8puWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dFNpbmXvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlU2luZU91dFxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZVNpbmVPdXQoKSk7XHJcbiAqL1xudmFyIF9lYXNlU2luZU91dE9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICByZXR1cm4gZHQgPT09IDAgfHwgZHQgPT09IDEgPyBkdCA6IE1hdGguc2luKGR0ICogTWF0aC5QSSAvIDIpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9lYXNlU2luZUluT2JqO1xuICAgIH1cbn07XG5jYy5lYXNlU2luZU91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VTaW5lT3V0T2JqO1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluT3V0U2luZTogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlU2luZUluT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlU2luZUluIOaYr+aMieato+W8puWHveaVsOe8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluT3V0U2luZe+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VTaW5lSW5PdXRcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VTaW5lSW5PdXQoKSk7XHJcbiAqL1xudmFyIF9lYXNlU2luZUluT3V0T2JqID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKGR0KSB7XG4gICAgICAgIHJldHVybiBkdCA9PT0gMCB8fCBkdCA9PT0gMSA/IGR0IDogLTAuNSAqIChNYXRoLmNvcyhNYXRoLlBJICogZHQpIC0gMSk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VTaW5lSW5PdXRPYmo7XG4gICAgfVxufTtcbmNjLmVhc2VTaW5lSW5PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlU2luZUluT3V0T2JqO1xufTtcblxuLyoqXHJcbiAqIEBtb2R1bGUgY2NcclxuICovXG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHBlcmlvZCBpbiByYWRpYW5zIChkZWZhdWx0IGlzIDAuMykuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluRWxhc3RpYzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlRWxhc3RpY0luIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlRWxhc3RpY0luIOaYr+aMieW8ueaAp+absue6v+e8k+WKqOi/m+WFpeeahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LmlbAgZWFzZUluRWxhc3RpY++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VFbGFzdGljSW5cclxuICogQHBhcmFtIHtOdW1iZXJ9IHBlcmlvZFxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlRWxhc3RpY0luKDMuMCkpO1xyXG4gKi9cbi8vZGVmYXVsdCBlYXNlIGVsYXN0aWMgaW4gb2JqZWN0IChwZXJpb2QgPSAwLjMpXG52YXIgX2Vhc2VFbGFzdGljSW5PYmogPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcoZHQpIHtcbiAgICAgICAgaWYgKGR0ID09PSAwIHx8IGR0ID09PSAxKSByZXR1cm4gZHQ7XG4gICAgICAgIGR0ID0gZHQgLSAxO1xuICAgICAgICByZXR1cm4gLU1hdGgucG93KDIsIDEwICogZHQpICogTWF0aC5zaW4oKGR0IC0gMC4zIC8gNCkgKiBNYXRoLlBJICogMiAvIDAuMyk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VFbGFzdGljT3V0T2JqO1xuICAgIH1cbn07XG5jYy5lYXNlRWxhc3RpY0luID0gZnVuY3Rpb24gKHBlcmlvZCkge1xuICAgIGlmIChwZXJpb2QgJiYgcGVyaW9kICE9PSAwLjMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIF9wZXJpb2Q6IHBlcmlvZCxcbiAgICAgICAgICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKGR0KSB7XG4gICAgICAgICAgICAgICAgaWYgKGR0ID09PSAwIHx8IGR0ID09PSAxKSByZXR1cm4gZHQ7XG4gICAgICAgICAgICAgICAgZHQgPSBkdCAtIDE7XG4gICAgICAgICAgICAgICAgcmV0dXJuIC1NYXRoLnBvdygyLCAxMCAqIGR0KSAqIE1hdGguc2luKChkdCAtIHRoaXMuX3BlcmlvZCAvIDQpICogTWF0aC5QSSAqIDIgLyB0aGlzLl9wZXJpb2QpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VFbGFzdGljT3V0KHRoaXMuX3BlcmlvZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfZWFzZUVsYXN0aWNJbk9iajtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0IHdpdGggdGhlIHBlcmlvZCBpbiByYWRpYW5zIChkZWZhdWx0IGlzIDAuMykuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dEVsYXN0aWM6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUVsYXN0aWNPdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VFbGFzdGljT3V0IOaYr+aMieW8ueaAp+absue6v+e8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dEVsYXN0aWPvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlRWxhc3RpY091dFxyXG4gKiBAcGFyYW0ge051bWJlcn0gcGVyaW9kXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VFbGFzdGljT3V0KDMuMCkpO1xyXG4gKi9cbi8vZGVmYXVsdCBlYXNlIGVsYXN0aWMgb3V0IG9iamVjdCAocGVyaW9kID0gMC4zKVxudmFyIF9lYXNlRWxhc3RpY091dE9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICByZXR1cm4gZHQgPT09IDAgfHwgZHQgPT09IDEgPyBkdCA6IE1hdGgucG93KDIsIC0xMCAqIGR0KSAqIE1hdGguc2luKChkdCAtIDAuMyAvIDQpICogTWF0aC5QSSAqIDIgLyAwLjMpICsgMTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZUVsYXN0aWNJbk9iajtcbiAgICB9XG59O1xuY2MuZWFzZUVsYXN0aWNPdXQgPSBmdW5jdGlvbiAocGVyaW9kKSB7XG4gICAgaWYgKHBlcmlvZCAmJiBwZXJpb2QgIT09IDAuMykge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgX3BlcmlvZDogcGVyaW9kLFxuICAgICAgICAgICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcoZHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZHQgPT09IDAgfHwgZHQgPT09IDEgPyBkdCA6IE1hdGgucG93KDIsIC0xMCAqIGR0KSAqIE1hdGguc2luKChkdCAtIHRoaXMuX3BlcmlvZCAvIDQpICogTWF0aC5QSSAqIDIgLyB0aGlzLl9wZXJpb2QpICsgMTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBjYy5lYXNlRWxhc3RpY0luKHRoaXMuX3BlcmlvZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBfZWFzZUVsYXN0aWNPdXRPYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdCB3aXRoIHRoZSBwZXJpb2QgaW4gcmFkaWFucyAoZGVmYXVsdCBpcyAwLjMpLiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dEVsYXN0aWM6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUVsYXN0aWNJbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUVsYXN0aWNJbk91dCDmmK/mjInlvLnmgKfmm7Lnur/nvJPliqjov5vlhaXlubbpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbk91dEVsYXN0aWPvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlRWxhc3RpY0luT3V0XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBwZXJpb2RcclxuICogQHJldHVybiB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUVsYXN0aWNJbk91dCgzLjApKTtcclxuICovXG5jYy5lYXNlRWxhc3RpY0luT3V0ID0gZnVuY3Rpb24gKHBlcmlvZCkge1xuICAgIHBlcmlvZCA9IHBlcmlvZCB8fCAwLjM7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgX3BlcmlvZDogcGVyaW9kLFxuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyhkdCkge1xuICAgICAgICAgICAgdmFyIG5ld1QgPSAwO1xuICAgICAgICAgICAgdmFyIGxvY1BlcmlvZCA9IHRoaXMuX3BlcmlvZDtcbiAgICAgICAgICAgIGlmIChkdCA9PT0gMCB8fCBkdCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIG5ld1QgPSBkdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZHQgPSBkdCAqIDI7XG4gICAgICAgICAgICAgICAgaWYgKCFsb2NQZXJpb2QpIGxvY1BlcmlvZCA9IHRoaXMuX3BlcmlvZCA9IDAuMyAqIDEuNTtcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGxvY1BlcmlvZCAvIDQ7XG4gICAgICAgICAgICAgICAgZHQgPSBkdCAtIDE7XG4gICAgICAgICAgICAgICAgaWYgKGR0IDwgMCkgbmV3VCA9IC0wLjUgKiBNYXRoLnBvdygyLCAxMCAqIGR0KSAqIE1hdGguc2luKChkdCAtIHMpICogTWF0aC5QSSAqIDIgLyBsb2NQZXJpb2QpO2Vsc2UgbmV3VCA9IE1hdGgucG93KDIsIC0xMCAqIGR0KSAqIE1hdGguc2luKChkdCAtIHMpICogTWF0aC5QSSAqIDIgLyBsb2NQZXJpb2QpICogMC41ICsgMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXdUO1xuICAgICAgICB9LFxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VFbGFzdGljSW5PdXQodGhpcy5fcGVyaW9kKTtcbiAgICAgICAgfVxuICAgIH07XG59O1xuXG4vKipcclxuICogQG1vZHVsZSBjY1xyXG4gKi9cblxuZnVuY3Rpb24gX2JvdW5jZVRpbWUodGltZTEpIHtcbiAgICBpZiAodGltZTEgPCAxIC8gMi43NSkge1xuICAgICAgICByZXR1cm4gNy41NjI1ICogdGltZTEgKiB0aW1lMTtcbiAgICB9IGVsc2UgaWYgKHRpbWUxIDwgMiAvIDIuNzUpIHtcbiAgICAgICAgdGltZTEgLT0gMS41IC8gMi43NTtcbiAgICAgICAgcmV0dXJuIDcuNTYyNSAqIHRpbWUxICogdGltZTEgKyAwLjc1O1xuICAgIH0gZWxzZSBpZiAodGltZTEgPCAyLjUgLyAyLjc1KSB7XG4gICAgICAgIHRpbWUxIC09IDIuMjUgLyAyLjc1O1xuICAgICAgICByZXR1cm4gNy41NjI1ICogdGltZTEgKiB0aW1lMSArIDAuOTM3NTtcbiAgICB9XG5cbiAgICB0aW1lMSAtPSAyLjYyNSAvIDIuNzU7XG4gICAgcmV0dXJuIDcuNTYyNSAqIHRpbWUxICogdGltZTEgKyAwLjk4NDM3NTtcbn07XG5cbnZhciBfZWFzZUJvdW5jZUluT2JqID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKGR0KSB7XG4gICAgICAgIHJldHVybiAxIC0gX2JvdW5jZVRpbWUoMSAtIGR0KTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZUJvdW5jZU91dE9iajtcbiAgICB9XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEVhc2VkIGJvdW5jZSBlZmZlY3QgYXQgdGhlIGJlZ2lubmluZy5cclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUJvdW5jZUluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQm91bmNlSW4g5piv5oyJ5by56Lez5Yqo5L2c57yT5Yqo6L+b5YWl55qE5Yqo5L2c44CCXHJcbiAqIEBtZXRob2QgZWFzZUJvdW5jZUluXHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VCb3VuY2VJbigpKTtcclxuICovXG5jYy5lYXNlQm91bmNlSW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlQm91bmNlSW5PYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEVhc2VkIGJvdW5jZSBlZmZlY3QgYXQgdGhlIGVuZGluZy5cclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUJvdW5jZU91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUJvdW5jZU91dCDmmK/mjInlvLnot7PliqjkvZznvJPliqjpgIDlh7rnmoTliqjkvZzjgIJcclxuICogQG1ldGhvZCBlYXNlQm91bmNlT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VCb3VuY2VPdXQoKSk7XHJcbiAqL1xudmFyIF9lYXNlQm91bmNlT3V0T2JqID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKGR0KSB7XG4gICAgICAgIHJldHVybiBfYm91bmNlVGltZShkdCk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VCb3VuY2VJbk9iajtcbiAgICB9XG59O1xuY2MuZWFzZUJvdW5jZU91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VCb3VuY2VPdXRPYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEVhc2VkIGJvdW5jZSBlZmZlY3QgYXQgdGhlIGJlZ2luaW5nIGFuZCBlbmRpbmcuXHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VCb3VuY2VJbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUJvdW5jZUluT3V0IOaYr+aMieW8uei3s+WKqOS9nOe8k+WKqOi/m+WFpeW5tumAgOWHuueahOWKqOS9nOOAglxyXG4gKiBAbWV0aG9kIGVhc2VCb3VuY2VJbk91dFxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlQm91bmNlSW5PdXQoKSk7XHJcbiAqL1xudmFyIF9lYXNlQm91bmNlSW5PdXRPYmogPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZTEpIHtcbiAgICAgICAgdmFyIG5ld1Q7XG4gICAgICAgIGlmICh0aW1lMSA8IDAuNSkge1xuICAgICAgICAgICAgdGltZTEgPSB0aW1lMSAqIDI7XG4gICAgICAgICAgICBuZXdUID0gKDEgLSBfYm91bmNlVGltZSgxIC0gdGltZTEpKSAqIDAuNTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld1QgPSBfYm91bmNlVGltZSh0aW1lMSAqIDIgLSAxKSAqIDAuNSArIDAuNTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3VDtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZUJvdW5jZUluT3V0T2JqO1xuICAgIH1cbn07XG5jYy5lYXNlQm91bmNlSW5PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlQm91bmNlSW5PdXRPYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gdG8gbW92ZSBzbG93bHksIGFuZCB0aGVuIGFjY2VsZXJhdGVkIHRvIHRoZSByaWdodCBkaXJlY3Rpb24uXHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VCYWNrSW4g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIGVhc2VCYWNrSW4g5piv5Zyo55u45Y+N55qE5pa55ZCR57yT5oWi56e75Yqo77yM54S25ZCO5Yqg6YCf5Yiw5q2j56Gu55qE5pa55ZCR44CCPGJyIC8+XHJcbiAqIEBtZXRob2QgZWFzZUJhY2tJblxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlQmFja0luKCkpO1xyXG4gKi9cbnZhciBfZWFzZUJhY2tJbk9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lMSkge1xuICAgICAgICB2YXIgb3ZlcnNob290ID0gMS43MDE1ODtcbiAgICAgICAgcmV0dXJuIHRpbWUxID09PSAwIHx8IHRpbWUxID09PSAxID8gdGltZTEgOiB0aW1lMSAqIHRpbWUxICogKChvdmVyc2hvb3QgKyAxKSAqIHRpbWUxIC0gb3ZlcnNob290KTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZUJhY2tPdXRPYmo7XG4gICAgfVxufTtcbmNjLmVhc2VCYWNrSW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlQmFja0luT2JqO1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBGYXN0IG1vdmluZyBtb3JlIHRoYW4gdGhlIGZpbmlzaCwgYW5kIHRoZW4gc2xvd2x5IGJhY2sgdG8gdGhlIGZpbmlzaC5cclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUJhY2tPdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIGVhc2VCYWNrT3V0IOW/q+mAn+enu+WKqOi2heWHuuebruagh++8jOeEtuWQjuaFouaFouWbnuWIsOebruagh+eCueOAglxyXG4gKiBAbWV0aG9kIGVhc2VCYWNrT3V0XHJcbiAqIEByZXR1cm4ge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy8gZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VCYWNrT3V0KCkpO1xyXG4gKi9cbnZhciBfZWFzZUJhY2tPdXRPYmogPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZTEpIHtcbiAgICAgICAgdmFyIG92ZXJzaG9vdCA9IDEuNzAxNTg7XG4gICAgICAgIHRpbWUxID0gdGltZTEgLSAxO1xuICAgICAgICByZXR1cm4gdGltZTEgKiB0aW1lMSAqICgob3ZlcnNob290ICsgMSkgKiB0aW1lMSArIG92ZXJzaG9vdCkgKyAxO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9lYXNlQmFja0luT2JqO1xuICAgIH1cbn07XG5jYy5lYXNlQmFja091dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VCYWNrT3V0T2JqO1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBCZWdpbmluZyBvZiBjYy5FYXNlQmFja0luLiBFbmRpbmcgb2YgY2MuRWFzZUJhY2tPdXQuXHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VCYWNrSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEBtZXRob2QgZWFzZUJhY2tJbk91dFxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vIGV4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlQmFja0luT3V0KCkpO1xyXG4gKi9cbnZhciBfZWFzZUJhY2tJbk91dE9iaiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lMSkge1xuICAgICAgICB2YXIgb3ZlcnNob290ID0gMS43MDE1OCAqIDEuNTI1O1xuICAgICAgICB0aW1lMSA9IHRpbWUxICogMjtcbiAgICAgICAgaWYgKHRpbWUxIDwgMSkge1xuICAgICAgICAgICAgcmV0dXJuIHRpbWUxICogdGltZTEgKiAoKG92ZXJzaG9vdCArIDEpICogdGltZTEgLSBvdmVyc2hvb3QpIC8gMjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRpbWUxID0gdGltZTEgLSAyO1xuICAgICAgICAgICAgcmV0dXJuIHRpbWUxICogdGltZTEgKiAoKG92ZXJzaG9vdCArIDEpICogdGltZTEgKyBvdmVyc2hvb3QpIC8gMiArIDE7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZUJhY2tJbk91dE9iajtcbiAgICB9XG59O1xuY2MuZWFzZUJhY2tJbk91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VCYWNrSW5PdXRPYmo7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIEludG8gdGhlIDQgcmVmZXJlbmNlIHBvaW50LiA8YnIgLz5cclxuICogVG8gY2FsY3VsYXRlIHRoZSBtb3Rpb24gY3VydmUuXHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VCZXppZXJBY3Rpb24g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VCZXppZXJBY3Rpb24g5piv5oyJ6LSd5aGe5bCU5puy57q/57yT5Yqo55qE5Yqo5L2c44CCXHJcbiAqIEBtZXRob2QgZWFzZUJlemllckFjdGlvblxyXG4gKiBAcGFyYW0ge051bWJlcn0gcDAgVGhlIGZpcnN0IGJlemllciBwYXJhbWV0ZXJcclxuICogQHBhcmFtIHtOdW1iZXJ9IHAxIFRoZSBzZWNvbmQgYmV6aWVyIHBhcmFtZXRlclxyXG4gKiBAcGFyYW0ge051bWJlcn0gcDIgVGhlIHRoaXJkIGJlemllciBwYXJhbWV0ZXJcclxuICogQHBhcmFtIHtOdW1iZXJ9IHAzIFRoZSBmb3VydGggYmV6aWVyIHBhcmFtZXRlclxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvLyBleGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUJlemllckFjdGlvbigwLjUsIDAuNSwgMS4wLCAxLjApKTtcclxuICovXG5jYy5lYXNlQmV6aWVyQWN0aW9uID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0KSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5wb3coMSAtIHQsIDMpICogYSArIDMgKiB0ICogTWF0aC5wb3coMSAtIHQsIDIpICogYiArIDMgKiBNYXRoLnBvdyh0LCAyKSAqICgxIC0gdCkgKiBjICsgTWF0aC5wb3codCwgMykgKiBkO1xuICAgICAgICB9LFxuICAgICAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNjLmVhc2VCZXppZXJBY3Rpb24oZCwgYywgYiwgYSk7XG4gICAgICAgIH1cbiAgICB9O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluUXVhZDogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlUXVhZHJhdGljQWN0aW9uSW4g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWFkcmF0aWNJbuaYr+aMieS6jOasoeWHveaVsOe8k+WKqOi/m+WFpeeahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZUluUXVhZO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWFkcmF0aWNBY3Rpb25JblxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlUXVhZHJhdGljQWN0aW9uSW4oKSk7XHJcbiAqL1xudmFyIF9lYXNlUXVhZHJhdGljQWN0aW9uSW4gPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZSkge1xuICAgICAgICByZXR1cm4gTWF0aC5wb3codGltZSwgMik7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VRdWFkcmF0aWNBY3Rpb25JbjtcbiAgICB9XG59O1xuY2MuZWFzZVF1YWRyYXRpY0FjdGlvbkluID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZWFzZVF1YWRyYXRpY0FjdGlvbkluO1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dFF1YWQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1YWRyYXRpY0FjdGlvbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVF1YWRyYXRpY091dCDmmK/mjInkuozmrKHlh73mlbDnvJPliqjpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VPdXRRdWFk77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZVF1YWRyYXRpY0FjdGlvbk91dFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uLmVhc2luZyhjYy5lYXNlUXVhZHJhdGljQWN0aW9uT3V0KCkpO1xyXG4gKi9cbnZhciBfZWFzZVF1YWRyYXRpY0FjdGlvbk91dCA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lKSB7XG4gICAgICAgIHJldHVybiAtdGltZSAqICh0aW1lIC0gMik7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VRdWFkcmF0aWNBY3Rpb25PdXQ7XG4gICAgfVxufTtcbmNjLmVhc2VRdWFkcmF0aWNBY3Rpb25PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlUXVhZHJhdGljQWN0aW9uT3V0O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluT3V0UXVhZDogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlUXVhZHJhdGljQWN0aW9uSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWFkcmF0aWNJbk91dCDmmK/mjInkuozmrKHlh73mlbDnvJPliqjov5vlhaXlubbpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbk91dFF1YWTvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlUXVhZHJhdGljQWN0aW9uSW5PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZVF1YWRyYXRpY0FjdGlvbkluT3V0KCkpO1xyXG4gKi9cbnZhciBfZWFzZVF1YWRyYXRpY0FjdGlvbkluT3V0ID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKHRpbWUpIHtcbiAgICAgICAgdmFyIHJlc3VsdFRpbWUgPSB0aW1lO1xuICAgICAgICB0aW1lICo9IDI7XG4gICAgICAgIGlmICh0aW1lIDwgMSkge1xuICAgICAgICAgICAgcmVzdWx0VGltZSA9IHRpbWUgKiB0aW1lICogMC41O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLS10aW1lO1xuICAgICAgICAgICAgcmVzdWx0VGltZSA9IC0wLjUgKiAodGltZSAqICh0aW1lIC0gMikgLSAxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0VGltZTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZVF1YWRyYXRpY0FjdGlvbkluT3V0O1xuICAgIH1cbn07XG5jYy5lYXNlUXVhZHJhdGljQWN0aW9uSW5PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlUXVhZHJhdGljQWN0aW9uSW5PdXQ7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW50UXVhcnQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1YXJ0aWNBY3Rpb25JbiDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZVF1YXJ0aWNJbiDmmK/mjInlm5vmrKHlh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbnRRdWFydO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWFydGljQWN0aW9uSW5cclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZVF1YXJ0aWNBY3Rpb25JbigpKTtcclxuICovXG52YXIgX2Vhc2VRdWFydGljQWN0aW9uSW4gPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZSkge1xuICAgICAgICByZXR1cm4gdGltZSAqIHRpbWUgKiB0aW1lICogdGltZTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZVF1YXJ0aWNBY3Rpb25JbjtcbiAgICB9XG59O1xuY2MuZWFzZVF1YXJ0aWNBY3Rpb25JbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uSW47XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlT3V0UXVhcnQ6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZVF1YXJ0aWNBY3Rpb25PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWFydGljT3V0IOaYr+aMieWbm+asoeWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dFF1YXJ077yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZVF1YXJ0aWNBY3Rpb25PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuUXVhcnRpY0FjdGlvbk91dCgpKTtcclxuICovXG52YXIgX2Vhc2VRdWFydGljQWN0aW9uT3V0ID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKHRpbWUpIHtcbiAgICAgICAgdGltZSAtPSAxO1xuICAgICAgICByZXR1cm4gLSh0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lIC0gMSk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uT3V0O1xuICAgIH1cbn07XG5jYy5lYXNlUXVhcnRpY0FjdGlvbk91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VRdWFydGljQWN0aW9uT3V0O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuICA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbk91dFF1YXJ0OiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VRdWFydGljQWN0aW9uSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWFydGljSW5PdXQg5piv5oyJ5Zub5qyh5Ye95pWw57yT5Yqo6L+b5YWl5bm26YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5PdXRRdWFydO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWFydGljQWN0aW9uSW5PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICovXG52YXIgX2Vhc2VRdWFydGljQWN0aW9uSW5PdXQgPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZSkge1xuICAgICAgICB0aW1lID0gdGltZSAqIDI7XG4gICAgICAgIGlmICh0aW1lIDwgMSkgcmV0dXJuIDAuNSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7XG4gICAgICAgIHRpbWUgLT0gMjtcbiAgICAgICAgcmV0dXJuIC0wLjUgKiAodGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAtIDIpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9lYXNlUXVhcnRpY0FjdGlvbkluT3V0O1xuICAgIH1cbn07XG5jYy5lYXNlUXVhcnRpY0FjdGlvbkluT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZWFzZVF1YXJ0aWNBY3Rpb25Jbk91dDtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJblF1aW50OiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VRdWludGljQWN0aW9uSW4g57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VRdWludGljSW4g5piv5oyJ5LqU5qyh5Ye95pWw57yT5Yqo6L+b55qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5RdWludO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWludGljQWN0aW9uSW5cclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZVF1aW50aWNBY3Rpb25JbigpKTtcclxuICovXG52YXIgX2Vhc2VRdWludGljQWN0aW9uSW4gPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZSkge1xuICAgICAgICByZXR1cm4gdGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWU7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VRdWludGljQWN0aW9uSW47XG4gICAgfVxufTtcbmNjLmVhc2VRdWludGljQWN0aW9uSW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlUXVpbnRpY0FjdGlvbkluO1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dFF1aW50OiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VRdWludGljQWN0aW9uT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlUXVpbnRpY091dCDmmK/mjInkupTmrKHlh73mlbDnvJPliqjpgIDlh7rnmoTliqjkvZxcclxuICog5Y+C6ICDIGVhc2VPdXRRdWludO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWludGljQWN0aW9uT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VRdWFkcmF0aWNBY3Rpb25PdXQoKSk7XHJcbiAqL1xudmFyIF9lYXNlUXVpbnRpY0FjdGlvbk91dCA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lKSB7XG4gICAgICAgIHRpbWUgLT0gMTtcbiAgICAgICAgcmV0dXJuIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lICsgMTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZVF1aW50aWNBY3Rpb25PdXQ7XG4gICAgfVxufTtcbmNjLmVhc2VRdWludGljQWN0aW9uT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZWFzZVF1aW50aWNBY3Rpb25PdXQ7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5PdXRRdWludDogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlUXVpbnRpY0FjdGlvbkluT3V0IOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlUXVpbnRpY0luT3V05piv5oyJ5LqU5qyh5Ye95pWw57yT5Yqo6L+b5YWl5bm26YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5PdXRRdWludO+8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VRdWludGljQWN0aW9uSW5PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZVF1aW50aWNBY3Rpb25Jbk91dCgpKTtcclxuICovXG52YXIgX2Vhc2VRdWludGljQWN0aW9uSW5PdXQgPSB7XG4gICAgZWFzaW5nOiBmdW5jdGlvbiBlYXNpbmcodGltZSkge1xuICAgICAgICB0aW1lID0gdGltZSAqIDI7XG4gICAgICAgIGlmICh0aW1lIDwgMSkgcmV0dXJuIDAuNSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKiB0aW1lO1xuICAgICAgICB0aW1lIC09IDI7XG4gICAgICAgIHJldHVybiAwLjUgKiAodGltZSAqIHRpbWUgKiB0aW1lICogdGltZSAqIHRpbWUgKyAyKTtcbiAgICB9LFxuICAgIHJldmVyc2U6IGZ1bmN0aW9uIHJldmVyc2UoKSB7XG4gICAgICAgIHJldHVybiBfZWFzZVF1aW50aWNBY3Rpb25Jbk91dDtcbiAgICB9XG59O1xuY2MuZWFzZVF1aW50aWNBY3Rpb25Jbk91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VRdWludGljQWN0aW9uSW5PdXQ7XG59O1xuXG4vKipcclxuICogISNlblxyXG4gKiBDcmVhdGVzIHRoZSBhY3Rpb24gZWFzaW5nIG9iamVjdC4gPGJyIC8+XHJcbiAqIFJlZmVyZW5jZSBlYXNlSW5DaXJjOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VDaXJjbGVBY3Rpb25JbiDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUNpcmNsZUlu5piv5oyJ5ZyG5b2i5puy57q/57yT5Yqo6L+b5YWl55qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5DaXJj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUNpcmNsZUFjdGlvbkluXHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VDaXJjbGVBY3Rpb25JbigpKTtcclxuICovXG52YXIgX2Vhc2VDaXJjbGVBY3Rpb25JbiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lKSB7XG4gICAgICAgIHJldHVybiAtMSAqIChNYXRoLnNxcnQoMSAtIHRpbWUgKiB0aW1lKSAtIDEpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9lYXNlQ2lyY2xlQWN0aW9uSW47XG4gICAgfVxufTtcbmNjLmVhc2VDaXJjbGVBY3Rpb25JbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VDaXJjbGVBY3Rpb25Jbjtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VPdXRDaXJjOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VDaXJjbGVBY3Rpb25PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VDaXJjbGVPdXTmmK/mjInlnIblvaLmm7Lnur/nvJPliqjpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VPdXRDaXJj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUNpcmNsZUFjdGlvbk91dFxyXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxyXG4gKiBAZXhhbXBsZVxyXG4gKiAvL2V4YW1wbGVcclxuICogYWN0aW9uZWFzaW5nKGNjLmVhc2VDaXJjbGVBY3Rpb25PdXQoKSk7XHJcbiAqL1xudmFyIF9lYXNlQ2lyY2xlQWN0aW9uT3V0ID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKHRpbWUpIHtcbiAgICAgICAgdGltZSA9IHRpbWUgLSAxO1xuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KDEgLSB0aW1lICogdGltZSk7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VDaXJjbGVBY3Rpb25PdXQ7XG4gICAgfVxufTtcbmNjLmVhc2VDaXJjbGVBY3Rpb25PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9lYXNlQ2lyY2xlQWN0aW9uT3V0O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluT3V0Q2lyYzogPGJyIC8+XHJcbiAqIGh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiAhI3poXHJcbiAqIOWIm+W7uiBlYXNlQ2lyY2xlQWN0aW9uSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VDaXJjbGVJbk91dCDmmK/mjInlnIblvaLmm7Lnur/nvJPliqjov5vlhaXlubbpgIDlh7rnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbk91dENpcmPvvJpodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogQG1ldGhvZCBlYXNlQ2lyY2xlQWN0aW9uSW5PdXRcclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUNpcmNsZUFjdGlvbkluT3V0KCkpO1xyXG4gKi9cbnZhciBfZWFzZUNpcmNsZUFjdGlvbkluT3V0ID0ge1xuICAgIGVhc2luZzogZnVuY3Rpb24gZWFzaW5nKHRpbWUpIHtcbiAgICAgICAgdGltZSA9IHRpbWUgKiAyO1xuICAgICAgICBpZiAodGltZSA8IDEpIHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gdGltZSAqIHRpbWUpIC0gMSk7XG4gICAgICAgIHRpbWUgLT0gMjtcbiAgICAgICAgcmV0dXJuIDAuNSAqIChNYXRoLnNxcnQoMSAtIHRpbWUgKiB0aW1lKSArIDEpO1xuICAgIH0sXG4gICAgcmV2ZXJzZTogZnVuY3Rpb24gcmV2ZXJzZSgpIHtcbiAgICAgICAgcmV0dXJuIF9lYXNlQ2lyY2xlQWN0aW9uSW5PdXQ7XG4gICAgfVxufTtcbmNjLmVhc2VDaXJjbGVBY3Rpb25Jbk91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VDaXJjbGVBY3Rpb25Jbk91dDtcbn07XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENyZWF0ZXMgdGhlIGFjdGlvbiBlYXNpbmcgb2JqZWN0LiA8YnIgLz5cclxuICogUmVmZXJlbmNlIGVhc2VJbkN1YmljOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VDdWJpY0FjdGlvbkluIOe8k+WKqOWvueixoeOAgjxiciAvPlxyXG4gKiBFYXNlQ3ViaWNJbiDmmK/mjInkuInmrKHlh73mlbDnvJPliqjov5vlhaXnmoTliqjkvZzjgII8YnIgLz5cclxuICog5Y+C6ICDIGVhc2VJbkN1Ymlj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUN1YmljQWN0aW9uSW5cclxuICogQHJldHVybnMge09iamVjdH1cclxuICogQGV4YW1wbGVcclxuICogLy9leGFtcGxlXHJcbiAqIGFjdGlvbi5lYXNpbmcoY2MuZWFzZUN1YmljQWN0aW9uSW4oKSk7XHJcbiAqL1xudmFyIF9lYXNlQ3ViaWNBY3Rpb25JbiA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lKSB7XG4gICAgICAgIHJldHVybiB0aW1lICogdGltZSAqIHRpbWU7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbkluO1xuICAgIH1cbn07XG5jYy5lYXNlQ3ViaWNBY3Rpb25JbiA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbkluO1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZU91dEN1YmljOiA8YnIgLz5cclxuICogaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqICEjemhcclxuICog5Yib5bu6IGVhc2VDdWJpY0FjdGlvbk91dCDnvJPliqjlr7nosaHjgII8YnIgLz5cclxuICogRWFzZUN1YmljT3V0IOaYr+aMieS4ieasoeWHveaVsOe8k+WKqOmAgOWHuueahOWKqOS9nOOAgjxiciAvPlxyXG4gKiDlj4LogIMgZWFzZU91dEN1Ymlj77yaaHR0cDovL3d3dy56aGlodS5jb20vcXVlc3Rpb24vMjE5ODE1NzEvYW5zd2VyLzE5OTI1NDE4XHJcbiAqIEBtZXRob2QgZWFzZUN1YmljQWN0aW9uT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqIEBleGFtcGxlXHJcbiAqIC8vZXhhbXBsZVxyXG4gKiBhY3Rpb24uZWFzaW5nKGNjLmVhc2VDdWJpY0FjdGlvbk91dCgpKTtcclxuICovXG52YXIgX2Vhc2VDdWJpY0FjdGlvbk91dCA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lKSB7XG4gICAgICAgIHRpbWUgLT0gMTtcbiAgICAgICAgcmV0dXJuIHRpbWUgKiB0aW1lICogdGltZSArIDE7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbk91dDtcbiAgICB9XG59O1xuY2MuZWFzZUN1YmljQWN0aW9uT3V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfZWFzZUN1YmljQWN0aW9uT3V0O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlcyB0aGUgYWN0aW9uIGVhc2luZyBvYmplY3QuIDxiciAvPlxyXG4gKiBSZWZlcmVuY2UgZWFzZUluT3V0Q3ViaWM6IDxiciAvPlxyXG4gKiBodHRwOi8vd3d3LnpoaWh1LmNvbS9xdWVzdGlvbi8yMTk4MTU3MS9hbnN3ZXIvMTk5MjU0MThcclxuICogISN6aFxyXG4gKiDliJvlu7ogZWFzZUN1YmljQWN0aW9uSW5PdXQg57yT5Yqo5a+56LGh44CCPGJyIC8+XHJcbiAqIEVhc2VDdWJpY0luT3V05piv5oyJ5LiJ5qyh5Ye95pWw57yT5Yqo6L+b5YWl5bm26YCA5Ye655qE5Yqo5L2c44CCPGJyIC8+XHJcbiAqIOWPguiAgyBlYXNlSW5PdXRDdWJpY++8mmh0dHA6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxOTgxNTcxL2Fuc3dlci8xOTkyNTQxOFxyXG4gKiBAbWV0aG9kIGVhc2VDdWJpY0FjdGlvbkluT3V0XHJcbiAqIEByZXR1cm5zIHtPYmplY3R9XHJcbiAqL1xudmFyIF9lYXNlQ3ViaWNBY3Rpb25Jbk91dCA9IHtcbiAgICBlYXNpbmc6IGZ1bmN0aW9uIGVhc2luZyh0aW1lKSB7XG4gICAgICAgIHRpbWUgPSB0aW1lICogMjtcbiAgICAgICAgaWYgKHRpbWUgPCAxKSByZXR1cm4gMC41ICogdGltZSAqIHRpbWUgKiB0aW1lO1xuICAgICAgICB0aW1lIC09IDI7XG4gICAgICAgIHJldHVybiAwLjUgKiAodGltZSAqIHRpbWUgKiB0aW1lICsgMik7XG4gICAgfSxcbiAgICByZXZlcnNlOiBmdW5jdGlvbiByZXZlcnNlKCkge1xuICAgICAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbkluT3V0O1xuICAgIH1cbn07XG5jYy5lYXNlQ3ViaWNBY3Rpb25Jbk91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX2Vhc2VDdWJpY0FjdGlvbkluT3V0O1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRRV04wYVc5dVJXRnpaUzVxY3lKZExDSnVZVzFsY3lJNld5SmpZeUlzSW1WaGMyVkpiaUlzSW5KaGRHVWlMQ0pmY21GMFpTSXNJbVZoYzJsdVp5SXNJbVIwSWl3aVRXRjBhQ0lzSW5CdmR5SXNJbkpsZG1WeWMyVWlMQ0psWVhObFQzVjBJaXdpWldGelpVbHVUM1YwSWl3aVgyVmhjMlZGZUhCdmJtVnVkR2xoYkVsdVQySnFJaXdpWDJWaGMyVkZlSEJ2Ym1WdWRHbGhiRTkxZEU5aWFpSXNJbVZoYzJWRmVIQnZibVZ1ZEdsaGJFbHVJaXdpWldGelpVVjRjRzl1Wlc1MGFXRnNUM1YwSWl3aVgyVmhjMlZGZUhCdmJtVnVkR2xoYkVsdVQzVjBUMkpxSWl3aVpXRnpaVVY0Y0c5dVpXNTBhV0ZzU1c1UGRYUWlMQ0pmWldGelpWTnBibVZKYms5aWFpSXNJbU52Y3lJc0lsQkpJaXdpWDJWaGMyVlRhVzVsVDNWMFQySnFJaXdpWldGelpWTnBibVZKYmlJc0luTnBiaUlzSW1WaGMyVlRhVzVsVDNWMElpd2lYMlZoYzJWVGFXNWxTVzVQZFhSUFltb2lMQ0psWVhObFUybHVaVWx1VDNWMElpd2lYMlZoYzJWRmJHRnpkR2xqU1c1UFltb2lMQ0pmWldGelpVVnNZWE4wYVdOUGRYUlBZbW9pTENKbFlYTmxSV3hoYzNScFkwbHVJaXdpY0dWeWFXOWtJaXdpWDNCbGNtbHZaQ0lzSW1WaGMyVkZiR0Z6ZEdsalQzVjBJaXdpWldGelpVVnNZWE4wYVdOSmJrOTFkQ0lzSW01bGQxUWlMQ0pzYjJOUVpYSnBiMlFpTENKeklpd2lYMkp2ZFc1alpWUnBiV1VpTENKMGFXMWxNU0lzSWw5bFlYTmxRbTkxYm1ObFNXNVBZbW9pTENKZlpXRnpaVUp2ZFc1alpVOTFkRTlpYWlJc0ltVmhjMlZDYjNWdVkyVkpiaUlzSW1WaGMyVkNiM1Z1WTJWUGRYUWlMQ0pmWldGelpVSnZkVzVqWlVsdVQzVjBUMkpxSWl3aVpXRnpaVUp2ZFc1alpVbHVUM1YwSWl3aVgyVmhjMlZDWVdOclNXNVBZbW9pTENKdmRtVnljMmh2YjNRaUxDSmZaV0Z6WlVKaFkydFBkWFJQWW1vaUxDSmxZWE5sUW1GamEwbHVJaXdpWldGelpVSmhZMnRQZFhRaUxDSmZaV0Z6WlVKaFkydEpiazkxZEU5aWFpSXNJbVZoYzJWQ1lXTnJTVzVQZFhRaUxDSmxZWE5sUW1WNmFXVnlRV04wYVc5dUlpd2lZU0lzSW1JaUxDSmpJaXdpWkNJc0luUWlMQ0pmWldGelpWRjFZV1J5WVhScFkwRmpkR2x2YmtsdUlpd2lkR2x0WlNJc0ltVmhjMlZSZFdGa2NtRjBhV05CWTNScGIyNUpiaUlzSWw5bFlYTmxVWFZoWkhKaGRHbGpRV04wYVc5dVQzVjBJaXdpWldGelpWRjFZV1J5WVhScFkwRmpkR2x2Yms5MWRDSXNJbDlsWVhObFVYVmhaSEpoZEdsalFXTjBhVzl1U1c1UGRYUWlMQ0p5WlhOMWJIUlVhVzFsSWl3aVpXRnpaVkYxWVdSeVlYUnBZMEZqZEdsdmJrbHVUM1YwSWl3aVgyVmhjMlZSZFdGeWRHbGpRV04wYVc5dVNXNGlMQ0psWVhObFVYVmhjblJwWTBGamRHbHZia2x1SWl3aVgyVmhjMlZSZFdGeWRHbGpRV04wYVc5dVQzVjBJaXdpWldGelpWRjFZWEowYVdOQlkzUnBiMjVQZFhRaUxDSmZaV0Z6WlZGMVlYSjBhV05CWTNScGIyNUpiazkxZENJc0ltVmhjMlZSZFdGeWRHbGpRV04wYVc5dVNXNVBkWFFpTENKZlpXRnpaVkYxYVc1MGFXTkJZM1JwYjI1SmJpSXNJbVZoYzJWUmRXbHVkR2xqUVdOMGFXOXVTVzRpTENKZlpXRnpaVkYxYVc1MGFXTkJZM1JwYjI1UGRYUWlMQ0psWVhObFVYVnBiblJwWTBGamRHbHZiazkxZENJc0lsOWxZWE5sVVhWcGJuUnBZMEZqZEdsdmJrbHVUM1YwSWl3aVpXRnpaVkYxYVc1MGFXTkJZM1JwYjI1SmJrOTFkQ0lzSWw5bFlYTmxRMmx5WTJ4bFFXTjBhVzl1U1c0aUxDSnpjWEowSWl3aVpXRnpaVU5wY21Oc1pVRmpkR2x2YmtsdUlpd2lYMlZoYzJWRGFYSmpiR1ZCWTNScGIyNVBkWFFpTENKbFlYTmxRMmx5WTJ4bFFXTjBhVzl1VDNWMElpd2lYMlZoYzJWRGFYSmpiR1ZCWTNScGIyNUpiazkxZENJc0ltVmhjMlZEYVhKamJHVkJZM1JwYjI1SmJrOTFkQ0lzSWw5bFlYTmxRM1ZpYVdOQlkzUnBiMjVKYmlJc0ltVmhjMlZEZFdKcFkwRmpkR2x2YmtsdUlpd2lYMlZoYzJWRGRXSnBZMEZqZEdsdmJrOTFkQ0lzSW1WaGMyVkRkV0pwWTBGamRHbHZiazkxZENJc0lsOWxZWE5sUTNWaWFXTkJZM1JwYjI1SmJrOTFkQ0lzSW1WaGMyVkRkV0pwWTBGamRHbHZia2x1VDNWMElsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUV5UWtFN096czdRVUZKUVRzN096czdPenM3T3pzN1FVRlhRVUVzUjBGQlIwTXNUVUZCU0N4SFFVRlpMRlZCUVZWRExFbEJRVllzUlVGQlowSTdRVUZEZUVJc1YwRkJUenRCUVVOSVF5eGxRVUZQUkN4SlFVUktPMEZCUlVoRkxHZENRVUZSTEdkQ1FVRlZReXhGUVVGV0xFVkJRV003UVVGRGJFSXNiVUpCUVU5RExFdEJRVXRETEVkQlFVd3NRMEZCVTBZc1JVRkJWQ3hGUVVGaExFdEJRVXRHTEV0QlFXeENMRU5CUVZBN1FVRkRTQ3hUUVVwRk8wRkJTMGhMTEdsQ1FVRlRMRzFDUVVGVk8wRkJRMllzYlVKQlFVOVNMRWRCUVVkRExFMUJRVWdzUTBGQlZTeEpRVUZKTEV0QlFVdEZMRXRCUVc1Q0xFTkJRVkE3UVVGRFNEdEJRVkJGTEV0QlFWQTdRVUZUU0N4RFFWWkVPenRCUVZsQk96czdPenM3T3pzN096dEJRVmRCU0N4SFFVRkhVeXhQUVVGSUxFZEJRV0VzVlVGQlZWQXNTVUZCVml4RlFVRm5RanRCUVVONlFpeFhRVUZQTzBGQlEwaERMR1ZCUVU5RUxFbEJSRW83UVVGRlNFVXNaMEpCUVZFc1owSkJRVlZETEVWQlFWWXNSVUZCWXp0QlFVTnNRaXh0UWtGQlQwTXNTMEZCUzBNc1IwRkJUQ3hEUVVGVFJpeEZRVUZVTEVWQlFXRXNTVUZCU1N4TFFVRkxSaXhMUVVGMFFpeERRVUZRTzBGQlEwZ3NVMEZLUlR0QlFVdElTeXhwUWtGQlV5eHRRa0ZCVlR0QlFVTm1MRzFDUVVGUFVpeEhRVUZIVXl4UFFVRklMRU5CUVZjc1NVRkJTU3hMUVVGTFRpeExRVUZ3UWl4RFFVRlFPMEZCUTBnN1FVRlFSU3hMUVVGUU8wRkJVMGdzUTBGV1JEczdRVUZaUVRzN096czdPenM3T3pzN08wRkJXVUZJTEVkQlFVZFZMRk5CUVVnc1IwRkJaU3hWUVVGVlVpeEpRVUZXTEVWQlFXZENPMEZCUXpOQ0xGZEJRVTg3UVVGRFNFTXNaVUZCVDBRc1NVRkVTanRCUVVWSVJTeG5Ra0ZCVVN4blFrRkJWVU1zUlVGQlZpeEZRVUZqTzBGQlEyeENRU3hyUWtGQlRTeERRVUZPTzBGQlEwRXNaMEpCUVVsQkxFdEJRVXNzUTBGQlZDeEZRVU5KTEU5QlFVOHNUVUZCVFVNc1MwRkJTME1zUjBGQlRDeERRVUZUUml4RlFVRlVMRVZCUVdFc1MwRkJTMFlzUzBGQmJFSXNRMEZCWWl4RFFVUktMRXRCUjBrc1QwRkJUeXhOUVVGTkxFMUJRVTFITEV0QlFVdERMRWRCUVV3c1EwRkJVeXhKUVVGSlJpeEZRVUZpTEVWQlFXbENMRXRCUVV0R0xFdEJRWFJDTEVOQlFXNUNPMEZCUTFBc1UwRlNSVHRCUVZOSVN5eHBRa0ZCVXl4dFFrRkJWVHRCUVVObUxHMUNRVUZQVWl4SFFVRkhWU3hUUVVGSUxFTkJRV0VzUzBGQlMxQXNTMEZCYkVJc1EwRkJVRHRCUVVOSU8wRkJXRVVzUzBGQlVEdEJRV0ZJTEVOQlpFUTdPMEZCWjBKQk96czdPenM3T3pzN096czdPenRCUVdOQkxFbEJRVWxSTEhkQ1FVRjNRanRCUVVONFFsQXNXVUZCVVN4blFrRkJVME1zUlVGQlZDeEZRVUZaTzBGQlEyaENMR1ZCUVU5QkxFOUJRVThzUTBGQlVDeEhRVUZYTEVOQlFWZ3NSMEZCWlVNc1MwRkJTME1zUjBGQlRDeERRVUZUTEVOQlFWUXNSVUZCV1N4TlFVRk5SaXhMUVVGTExFTkJRVmdzUTBGQldpeERRVUYwUWp0QlFVTklMRXRCU0hWQ08wRkJTWGhDUnl4aFFVRlRMRzFDUVVGVk8wRkJRMllzWlVGQlQwa3NjMEpCUVZBN1FVRkRTRHRCUVU1MVFpeERRVUUxUWp0QlFWRkJXaXhIUVVGSFlTeHBRa0ZCU0N4SFFVRjFRaXhaUVVGVk8wRkJRemRDTEZkQlFVOUdMSEZDUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096czdPenM3T3pzN096czdRVUZqUVN4SlFVRkpReXg1UWtGQmVVSTdRVUZEZWtKU0xGbEJRVkVzWjBKQlFWTkRMRVZCUVZRc1JVRkJXVHRCUVVOb1FpeGxRVUZQUVN4UFFVRlBMRU5CUVZBc1IwRkJWeXhEUVVGWUxFZEJRV2RDTEVOQlFVVkRMRXRCUVV0RExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWa3NRMEZCUXl4RlFVRkVMRWRCUVUxR0xFVkJRV3hDTEVOQlFVWXNSMEZCTWtJc1EwRkJiRVE3UVVGRFNDeExRVWgzUWp0QlFVbDZRa2NzWVVGQlV5eHRRa0ZCVlR0QlFVTm1MR1ZCUVU5SExIRkNRVUZRTzBGQlEwZzdRVUZPZDBJc1EwRkJOMEk3UVVGUlFWZ3NSMEZCUjJNc2EwSkJRVWdzUjBGQmQwSXNXVUZCVlR0QlFVTTVRaXhYUVVGUFJpeHpRa0ZCVUR0QlFVTklMRU5CUmtRN08wRkJTVUU3T3pzN096czdPenM3T3pzN08wRkJZMEVzU1VGQlNVY3NNa0pCUVRKQ08wRkJRek5DV0N4WlFVRlJMR2RDUVVGVFF5eEZRVUZVTEVWQlFWazdRVUZEYUVJc1dVRkJTVUVzVDBGQlR5eERRVUZRTEVsQlFWbEJMRTlCUVU4c1EwRkJka0lzUlVGQk1FSTdRVUZEZEVKQkxHdENRVUZOTEVOQlFVNDdRVUZEUVN4blFrRkJTVUVzUzBGQlN5eERRVUZVTEVWQlEwa3NUMEZCVHl4TlFVRk5ReXhMUVVGTFF5eEhRVUZNTEVOQlFWTXNRMEZCVkN4RlFVRlpMRTFCUVUxR0xFdEJRVXNzUTBGQldDeERRVUZhTEVOQlFXSXNRMEZFU2l4TFFVZEpMRTlCUVU4c1QwRkJUeXhEUVVGRFF5eExRVUZMUXl4SFFVRk1MRU5CUVZNc1EwRkJWQ3hGUVVGWkxFTkJRVU1zUlVGQlJDeEpRVUZQUml4TFFVRkxMRU5CUVZvc1EwRkJXaXhEUVVGRUxFZEJRU3RDTEVOQlFYUkRMRU5CUVZBN1FVRkRVRHRCUVVORUxHVkJRVTlCTEVWQlFWQTdRVUZEU0N4TFFWWXdRanRCUVZjelFrY3NZVUZCVXl4dFFrRkJWVHRCUVVObUxHVkJRVTlQTEhkQ1FVRlFPMEZCUTBnN1FVRmlNRUlzUTBGQkwwSTdRVUZsUVdZc1IwRkJSMmRDTEc5Q1FVRklMRWRCUVRCQ0xGbEJRVlU3UVVGRGFFTXNWMEZCVDBRc2QwSkJRVkE3UVVGRFNDeERRVVpFT3p0QlFVbEJPenM3T3pzN096czdPenM3T3p0QlFXTkJMRWxCUVVsRkxHbENRVUZwUWp0QlFVTnFRbUlzV1VGQlVTeG5Ra0ZCVTBNc1JVRkJWQ3hGUVVGWk8wRkJRMmhDTEdWQlFWRkJMRTlCUVVzc1EwRkJUQ3hKUVVGVlFTeFBRVUZMTEVOQlFXaENMRWRCUVhGQ1FTeEZRVUZ5UWl4SFFVRXdRaXhEUVVGRExFTkJRVVFzUjBGQlMwTXNTMEZCUzFrc1IwRkJUQ3hEUVVGVFlpeExRVUZMUXl4TFFVRkxZU3hGUVVGV0xFZEJRV1VzUTBGQmVFSXNRMEZCVEN4SFFVRnJReXhEUVVGdVJUdEJRVU5JTEV0QlNHZENPMEZCU1dwQ1dDeGhRVUZUTEcxQ1FVRlZPMEZCUTJZc1pVRkJUMWtzWlVGQlVEdEJRVU5JTzBGQlRtZENMRU5CUVhKQ08wRkJVVUZ3UWl4SFFVRkhjVUlzVlVGQlNDeEhRVUZuUWl4WlFVRlZPMEZCUTNSQ0xGZEJRVTlLTEdOQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096czdPenRCUVdOQkxFbEJRVWxITEd0Q1FVRnJRanRCUVVOc1FtaENMRmxCUVZFc1owSkJRVk5ETEVWQlFWUXNSVUZCV1R0QlFVTm9RaXhsUVVGUlFTeFBRVUZMTEVOQlFVd3NTVUZCVlVFc1QwRkJTeXhEUVVGb1FpeEhRVUZ4UWtFc1JVRkJja0lzUjBGQk1FSkRMRXRCUVV0blFpeEhRVUZNTEVOQlFWTnFRaXhMUVVGTFF5eExRVUZMWVN4RlFVRldMRWRCUVdVc1EwRkJlRUlzUTBGQmFrTTdRVUZEU0N4TFFVaHBRanRCUVVsc1FsZ3NZVUZCVXl4dFFrRkJWVHRCUVVObUxHVkJRVTlUTEdOQlFWQTdRVUZEU0R0QlFVNXBRaXhEUVVGMFFqdEJRVkZCYWtJc1IwRkJSM1ZDTEZkQlFVZ3NSMEZCYVVJc1dVRkJWVHRCUVVOMlFpeFhRVUZQU0N4bFFVRlFPMEZCUTBnc1EwRkdSRHM3UVVGSlFUczdPenM3T3pzN096czdPenM3UVVGalFTeEpRVUZKU1N4dlFrRkJiMEk3UVVGRGNFSndRaXhaUVVGUkxHZENRVUZUUXl4RlFVRlVMRVZCUVZrN1FVRkRhRUlzWlVGQlVVRXNUMEZCVHl4RFFVRlFMRWxCUVZsQkxFOUJRVThzUTBGQmNFSXNSMEZCZVVKQkxFVkJRWHBDTEVkQlFUaENMRU5CUVVNc1IwRkJSQ3hKUVVGUlF5eExRVUZMV1N4SFFVRk1MRU5CUVZOYUxFdEJRVXRoTEVWQlFVd3NSMEZCVldRc1JVRkJia0lzU1VGQmVVSXNRMEZCYWtNc1EwRkJja003UVVGRFNDeExRVWh0UWp0QlFVbHdRa2NzWVVGQlV5eHRRa0ZCVlR0QlFVTm1MR1ZCUVU5blFpeHBRa0ZCVUR0QlFVTklPMEZCVG0xQ0xFTkJRWGhDTzBGQlVVRjRRaXhIUVVGSGVVSXNZVUZCU0N4SFFVRnRRaXhaUVVGVk8wRkJRM3BDTEZkQlFVOUVMR2xDUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096dEJRVWxCT3pzN096czdPenM3T3pzN096czdPMEZCWjBKQk8wRkJRMEVzU1VGQlNVVXNiMEpCUVc5Q08wRkJRM0JDZEVJc1dVRkJUeXhuUWtGQlUwTXNSVUZCVkN4RlFVRlpPMEZCUTJZc1dVRkJTVUVzVDBGQlR5eERRVUZRTEVsQlFWbEJMRTlCUVU4c1EwRkJka0lzUlVGRFNTeFBRVUZQUVN4RlFVRlFPMEZCUTBwQkxHRkJRVXRCTEV0QlFVc3NRMEZCVmp0QlFVTkJMR1ZCUVU4c1EwRkJRME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRMRU5CUVZRc1JVRkJXU3hMUVVGTFJpeEZRVUZxUWl4RFFVRkVMRWRCUVhkQ1F5eExRVUZMWjBJc1IwRkJUQ3hEUVVGVExFTkJRVU5xUWl4TFFVRk5MRTFCUVUwc1EwRkJZaXhKUVVGdFFrTXNTMEZCUzJFc1JVRkJlRUlzUjBGQk5rSXNRMEZCTjBJc1IwRkJhVU1zUjBGQk1VTXNRMEZCTDBJN1FVRkRTQ3hMUVU1dFFqdEJRVTl1UWxnc1lVRkJVU3h0UWtGQlZUdEJRVU5rTEdWQlFVOXRRaXhyUWtGQlVEdEJRVU5JTzBGQlZHdENMRU5CUVhoQ08wRkJWMEV6UWl4SFFVRkhORUlzWVVGQlNDeEhRVUZ0UWl4VlFVRlZReXhOUVVGV0xFVkJRV3RDTzBGQlEycERMRkZCUVVkQkxGVkJRVlZCTEZkQlFWY3NSMEZCZUVJc1JVRkJORUk3UVVGRGVFSXNaVUZCVHp0QlFVTklReXh4UWtGQlUwUXNUVUZFVGp0QlFVVklla0lzYjBKQlFWRXNaMEpCUVZWRExFVkJRVllzUlVGQll6dEJRVU5zUWl4dlFrRkJTVUVzVDBGQlR5eERRVUZRTEVsQlFWbEJMRTlCUVU4c1EwRkJka0lzUlVGRFNTeFBRVUZQUVN4RlFVRlFPMEZCUTBwQkxIRkNRVUZMUVN4TFFVRkxMRU5CUVZZN1FVRkRRU3gxUWtGQlR5eERRVUZEUXl4TFFVRkxReXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaTEV0QlFVdEdMRVZCUVdwQ0xFTkJRVVFzUjBGQmQwSkRMRXRCUVV0blFpeEhRVUZNTEVOQlFWTXNRMEZCUTJwQ0xFdEJRVTBzUzBGQlMzbENMRTlCUVV3c1IwRkJaU3hEUVVGMFFpeEpRVUUwUW5oQ0xFdEJRVXRoTEVWQlFXcERMRWRCUVhORExFTkJRWFJETEVkQlFUQkRMRXRCUVV0WExFOUJRWGhFTEVOQlFTOUNPMEZCUTBnc1lVRlFSVHRCUVZGSWRFSXNjVUpCUVZFc2JVSkJRVms3UVVGRGFFSXNkVUpCUVU5U0xFZEJRVWNyUWl4alFVRklMRU5CUVd0Q0xFdEJRVXRFTEU5QlFYWkNMRU5CUVZBN1FVRkRTRHRCUVZaRkxGTkJRVkE3UVVGWlNEdEJRVU5FTEZkQlFVOUtMR2xDUVVGUU8wRkJRMGdzUTBGb1FrUTdPMEZCYTBKQk96czdPenM3T3pzN096czdPenM3TzBGQlowSkJPMEZCUTBFc1NVRkJTVU1zY1VKQlFYRkNPMEZCUTNKQ2RrSXNXVUZCVVN4blFrRkJWVU1zUlVGQlZpeEZRVUZqTzBGQlEyeENMR1ZCUVZGQkxFOUJRVThzUTBGQlVDeEpRVUZaUVN4UFFVRlBMRU5CUVhCQ0xFZEJRWGxDUVN4RlFVRjZRaXhIUVVFNFFrTXNTMEZCUzBNc1IwRkJUQ3hEUVVGVExFTkJRVlFzUlVGQldTeERRVUZETEVWQlFVUXNSMEZCVFVZc1JVRkJiRUlzU1VGQmQwSkRMRXRCUVV0blFpeEhRVUZNTEVOQlFWTXNRMEZCUTJwQ0xFdEJRVTBzVFVGQlRTeERRVUZpTEVsQlFXMUNReXhMUVVGTFlTeEZRVUY0UWl4SFFVRTJRaXhEUVVFM1FpeEhRVUZwUXl4SFFVRXhReXhEUVVGNFFpeEhRVUY1UlN4RFFVRTVSenRCUVVOSUxFdEJTRzlDTzBGQlNYSkNXQ3hoUVVGUkxHMUNRVUZWTzBGQlEyUXNaVUZCVDJ0Q0xHbENRVUZRTzBGQlEwZzdRVUZPYjBJc1EwRkJla0k3UVVGUlFURkNMRWRCUVVjclFpeGpRVUZJTEVkQlFXOUNMRlZCUVZWR0xFMUJRVllzUlVGQmEwSTdRVUZEYkVNc1VVRkJSMEVzVlVGQlZVRXNWMEZCVnl4SFFVRjRRaXhGUVVFMFFqdEJRVU40UWl4bFFVRlBPMEZCUTBoRExIRkNRVUZUUkN4TlFVUk9PMEZCUlVoNlFpeHZRa0ZCVVN4blFrRkJWVU1zUlVGQlZpeEZRVUZqTzBGQlEyeENMSFZDUVVGUlFTeFBRVUZQTEVOQlFWQXNTVUZCV1VFc1QwRkJUeXhEUVVGd1FpeEhRVUY1UWtFc1JVRkJla0lzUjBGQk9FSkRMRXRCUVV0RExFZEJRVXdzUTBGQlV5eERRVUZVTEVWQlFWa3NRMEZCUXl4RlFVRkVMRWRCUVUxR0xFVkJRV3hDTEVsQlFYZENReXhMUVVGTFowSXNSMEZCVEN4RFFVRlRMRU5CUVVOcVFpeExRVUZOTEV0QlFVdDVRaXhQUVVGTUxFZEJRV1VzUTBGQmRFSXNTVUZCTkVKNFFpeExRVUZMWVN4RlFVRnFReXhIUVVGelF5eERRVUYwUXl4SFFVRXdReXhMUVVGTFZ5eFBRVUY0UkN4RFFVRjRRaXhIUVVFeVJpeERRVUZvU1R0QlFVTklMR0ZCU2tVN1FVRkxTSFJDTEhGQ1FVRlJMRzFDUVVGVk8wRkJRMlFzZFVKQlFVOVNMRWRCUVVjMFFpeGhRVUZJTEVOQlFXbENMRXRCUVV0RkxFOUJRWFJDTEVOQlFWQTdRVUZEU0R0QlFWQkZMRk5CUVZBN1FVRlRTRHRCUVVORUxGZEJRVTlJTEd0Q1FVRlFPMEZCUTBnc1EwRmlSRHM3UVVGbFFUczdPenM3T3pzN096czdPenM3T3p0QlFXZENRVE5DTEVkQlFVZG5ReXhuUWtGQlNDeEhRVUZ6UWl4VlFVRlZTQ3hOUVVGV0xFVkJRV3RDTzBGQlEzQkRRU3hoUVVGVFFTeFZRVUZWTEVkQlFXNUNPMEZCUTBFc1YwRkJUenRCUVVOSVF5eHBRa0ZCVTBRc1RVRkVUanRCUVVWSWVrSXNaMEpCUVZFc1owSkJRVlZETEVWQlFWWXNSVUZCWXp0QlFVTnNRaXhuUWtGQlNUUkNMRTlCUVU4c1EwRkJXRHRCUVVOQkxHZENRVUZKUXl4WlFVRlpMRXRCUVV0S0xFOUJRWEpDTzBGQlEwRXNaMEpCUVVsNlFpeFBRVUZQTEVOQlFWQXNTVUZCV1VFc1QwRkJUeXhEUVVGMlFpeEZRVUV3UWp0QlFVTjBRalJDTEhWQ1FVRlBOVUlzUlVGQlVEdEJRVU5JTEdGQlJrUXNUVUZGVHp0QlFVTklRU3h4UWtGQlMwRXNTMEZCU3l4RFFVRldPMEZCUTBFc2IwSkJRVWtzUTBGQlF6WkNMRk5CUVV3c1JVRkRTVUVzV1VGQldTeExRVUZMU2l4UFFVRk1MRWRCUVdVc1RVRkJUU3hIUVVGcVF6dEJRVU5LTEc5Q1FVRkpTeXhKUVVGSlJDeFpRVUZaTEVOQlFYQkNPMEZCUTBFM1FpeHhRa0ZCUzBFc1MwRkJTeXhEUVVGV08wRkJRMEVzYjBKQlFVbEJMRXRCUVVzc1EwRkJWQ3hGUVVOSk5FSXNUMEZCVHl4RFFVRkRMRWRCUVVRc1IwRkJUek5DTEV0QlFVdERMRWRCUVV3c1EwRkJVeXhEUVVGVUxFVkJRVmtzUzBGQlMwWXNSVUZCYWtJc1EwRkJVQ3hIUVVFNFFrTXNTMEZCUzJkQ0xFZEJRVXdzUTBGQlV5eERRVUZEYWtJc1MwRkJTemhDTEVOQlFVNHNTVUZCVnpkQ0xFdEJRVXRoTEVWQlFXaENMRWRCUVhGQ0xFTkJRWEpDTEVkQlFYbENaU3hUUVVGc1F5eERRVUZ5UXl4RFFVUktMRXRCUjBsRUxFOUJRVTh6UWl4TFFVRkxReXhIUVVGTUxFTkJRVk1zUTBGQlZDeEZRVUZaTEVOQlFVTXNSVUZCUkN4SFFVRk5SaXhGUVVGc1FpeEpRVUYzUWtNc1MwRkJTMmRDTEVkQlFVd3NRMEZCVXl4RFFVRkRha0lzUzBGQlN6aENMRU5CUVU0c1NVRkJWemRDTEV0QlFVdGhMRVZCUVdoQ0xFZEJRWEZDTEVOQlFYSkNMRWRCUVhsQ1pTeFRRVUZzUXl4RFFVRjRRaXhIUVVGMVJTeEhRVUYyUlN4SFFVRTJSU3hEUVVGd1JqdEJRVU5RTzBGQlEwUXNiVUpCUVU5RUxFbEJRVkE3UVVGRFNDeFRRVzVDUlR0QlFXOUNTSHBDTEdsQ1FVRlRMRzFDUVVGVk8wRkJRMllzYlVKQlFVOVNMRWRCUVVkblF5eG5Ra0ZCU0N4RFFVRnZRaXhMUVVGTFJpeFBRVUY2UWl4RFFVRlFPMEZCUTBnN1FVRjBRa1VzUzBGQlVEdEJRWGRDU0N4RFFURkNSRHM3UVVFMFFrRTdPenM3UVVGSlFTeFRRVUZUVFN4WFFVRlVMRU5CUVhOQ1F5eExRVUYwUWl4RlFVRTJRanRCUVVONlFpeFJRVUZKUVN4UlFVRlJMRWxCUVVrc1NVRkJhRUlzUlVGQmMwSTdRVUZEYkVJc1pVRkJUeXhUUVVGVFFTeExRVUZVTEVkQlFXbENRU3hMUVVGNFFqdEJRVU5JTEV0QlJrUXNUVUZGVHl4SlFVRkpRU3hSUVVGUkxFbEJRVWtzU1VGQmFFSXNSVUZCYzBJN1FVRkRla0pCTEdsQ1FVRlRMRTFCUVUwc1NVRkJaanRCUVVOQkxHVkJRVThzVTBGQlUwRXNTMEZCVkN4SFFVRnBRa0VzUzBGQmFrSXNSMEZCZVVJc1NVRkJhRU03UVVGRFNDeExRVWhOTEUxQlIwRXNTVUZCU1VFc1VVRkJVU3hOUVVGTkxFbEJRV3hDTEVWQlFYZENPMEZCUXpOQ1FTeHBRa0ZCVXl4UFFVRlBMRWxCUVdoQ08wRkJRMEVzWlVGQlR5eFRRVUZUUVN4TFFVRlVMRWRCUVdsQ1FTeExRVUZxUWl4SFFVRjVRaXhOUVVGb1F6dEJRVU5JT3p0QlFVVkVRU3hoUVVGVExGRkJRVkVzU1VGQmFrSTdRVUZEUVN4WFFVRlBMRk5CUVZOQkxFdEJRVlFzUjBGQmFVSkJMRXRCUVdwQ0xFZEJRWGxDTEZGQlFXaERPMEZCUTBnN08wRkJSVVFzU1VGQlNVTXNiVUpCUVcxQ08wRkJRMjVDYkVNc1dVRkJVU3huUWtGQlUwTXNSVUZCVkN4RlFVRlpPMEZCUTJoQ0xHVkJRVThzU1VGQlNTdENMRmxCUVZrc1NVRkJTUzlDTEVWQlFXaENMRU5CUVZnN1FVRkRTQ3hMUVVoclFqdEJRVWx1UWtjc1lVRkJVeXh0UWtGQlZUdEJRVU5tTEdWQlFVOHJRaXhwUWtGQlVEdEJRVU5JTzBGQlRtdENMRU5CUVhaQ096dEJRVk5CT3pzN096czdPenM3T3pzN08wRkJZVUYyUXl4SFFVRkhkME1zV1VGQlNDeEhRVUZyUWl4WlFVRlZPMEZCUTNoQ0xGZEJRVTlHTEdkQ1FVRlFPMEZCUTBnc1EwRkdSRHM3UVVGSlFUczdPenM3T3pzN096czdPenRCUVdGQkxFbEJRVWxETEc5Q1FVRnZRanRCUVVOd1FtNURMRmxCUVZFc1owSkJRVk5ETEVWQlFWUXNSVUZCV1R0QlFVTm9RaXhsUVVGUEswSXNXVUZCV1M5Q0xFVkJRVm9zUTBGQlVEdEJRVU5JTEV0QlNHMUNPMEZCU1hCQ1J5eGhRVUZSTEcxQ1FVRlpPMEZCUTJoQ0xHVkJRVTg0UWl4blFrRkJVRHRCUVVOSU8wRkJUbTFDTEVOQlFYaENPMEZCVVVGMFF5eEhRVUZIZVVNc1lVRkJTQ3hIUVVGdFFpeFpRVUZWTzBGQlEzcENMRmRCUVU5R0xHbENRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdPenM3T3p0QlFXRkJMRWxCUVVsSExITkNRVUZ6UWp0QlFVTjBRblJETEZsQlFWRXNaMEpCUVZWcFF5eExRVUZXTEVWQlFXbENPMEZCUTNKQ0xGbEJRVWxLTEVsQlFVbzdRVUZEUVN4WlFVRkpTU3hSUVVGUkxFZEJRVm9zUlVGQmFVSTdRVUZEWWtFc2IwSkJRVkZCTEZGQlFWRXNRMEZCYUVJN1FVRkRRVW9zYlVKQlFVOHNRMEZCUXl4SlFVRkpSeXhaUVVGWkxFbEJRVWxETEV0QlFXaENMRU5CUVV3c1NVRkJLMElzUjBGQmRFTTdRVUZEU0N4VFFVaEVMRTFCUjA4N1FVRkRTRW9zYlVKQlFVOUhMRmxCUVZsRExGRkJRVkVzUTBGQlVpeEhRVUZaTEVOQlFYaENMRWxCUVRaQ0xFZEJRVGRDTEVkQlFXMURMRWRCUVRGRE8wRkJRMGc3UVVGRFJDeGxRVUZQU2l4SlFVRlFPMEZCUTBnc1MwRldjVUk3UVVGWGRFSjZRaXhoUVVGVExHMUNRVUZWTzBGQlEyWXNaVUZCVDJ0RExHMUNRVUZRTzBGQlEwZzdRVUZpY1VJc1EwRkJNVUk3UVVGbFFURkRMRWRCUVVjeVF5eGxRVUZJTEVkQlFYRkNMRmxCUVZVN1FVRkRNMElzVjBGQlQwUXNiVUpCUVZBN1FVRkRTQ3hEUVVaRU96dEJRVWxCT3pzN096czdPenM3T3pzN08wRkJZVUVzU1VGQlNVVXNhVUpCUVdsQ08wRkJRMnBDZUVNc1dVRkJVU3huUWtGQlZXbERMRXRCUVZZc1JVRkJhVUk3UVVGRGNrSXNXVUZCU1ZFc1dVRkJXU3hQUVVGb1FqdEJRVU5CTEdWQlFWRlNMRlZCUVZFc1EwRkJVaXhKUVVGaFFTeFZRVUZSTEVOQlFYUkNMRWRCUVRKQ1FTeExRVUV6UWl4SFFVRnRRMEVzVVVGQlVVRXNTMEZCVWl4SlFVRnBRaXhEUVVGRFVTeFpRVUZaTEVOQlFXSXNTVUZCYTBKU0xFdEJRV3hDTEVkQlFUQkNVU3hUUVVFelF5eERRVUV4UXp0QlFVTklMRXRCU21kQ08wRkJTMnBDY2tNc1lVRkJVeXh0UWtGQlZUdEJRVU5tTEdWQlFVOXpReXhsUVVGUU8wRkJRMGc3UVVGUVowSXNRMEZCY2tJN1FVRlRRVGxETEVkQlFVY3JReXhWUVVGSUxFZEJRV2RDTEZsQlFWVTdRVUZEZEVJc1YwRkJUMGdzWTBGQlVEdEJRVU5JTEVOQlJrUTdPMEZCU1VFN096czdPenM3T3pzN096czdRVUZoUVN4SlFVRkpSU3hyUWtGQmEwSTdRVUZEYkVJeFF5eFpRVUZSTEdkQ1FVRlZhVU1zUzBGQlZpeEZRVUZwUWp0QlFVTnlRaXhaUVVGSlVTeFpRVUZaTEU5QlFXaENPMEZCUTBGU0xHZENRVUZSUVN4UlFVRlJMRU5CUVdoQ08wRkJRMEVzWlVGQlQwRXNVVUZCVVVFc1MwRkJVaXhKUVVGcFFpeERRVUZEVVN4WlFVRlpMRU5CUVdJc1NVRkJhMEpTTEV0QlFXeENMRWRCUVRCQ1VTeFRRVUV6UXl4SlFVRjNSQ3hEUVVFdlJEdEJRVU5JTEV0QlRHbENPMEZCVFd4Q2NrTXNZVUZCVXl4dFFrRkJWVHRCUVVObUxHVkJRVTl2UXl4alFVRlFPMEZCUTBnN1FVRlNhVUlzUTBGQmRFSTdRVUZWUVRWRExFZEJRVWRuUkN4WFFVRklMRWRCUVdsQ0xGbEJRVlU3UVVGRGRrSXNWMEZCVDBZc1pVRkJVRHRCUVVOSUxFTkJSa1E3TzBGQlNVRTdPenM3T3pzN096czdPenRCUVZsQkxFbEJRVWxITEc5Q1FVRnZRanRCUVVOd1FqZERMRmxCUVZFc1owSkJRVlZwUXl4TFFVRldMRVZCUVdsQ08wRkJRM0pDTEZsQlFVbFJMRmxCUVZrc1ZVRkJWU3hMUVVFeFFqdEJRVU5CVWl4blFrRkJVVUVzVVVGQlVTeERRVUZvUWp0QlFVTkJMRmxCUVVsQkxGRkJRVkVzUTBGQldpeEZRVUZsTzBGQlExZ3NiVUpCUVZGQkxGRkJRVkZCTEV0QlFWSXNTVUZCYVVJc1EwRkJRMUVzV1VGQldTeERRVUZpTEVsQlFXdENVaXhMUVVGc1FpeEhRVUV3UWxFc1UwRkJNME1zUTBGQlJDeEhRVUV3UkN4RFFVRnFSVHRCUVVOSUxGTkJSa1FzVFVGRlR6dEJRVU5JVWl4dlFrRkJVVUVzVVVGQlVTeERRVUZvUWp0QlFVTkJMRzFDUVVGUlFTeFJRVUZSUVN4TFFVRlNMRWxCUVdsQ0xFTkJRVU5STEZsQlFWa3NRMEZCWWl4SlFVRnJRbElzUzBGQmJFSXNSMEZCTUVKUkxGTkJRVE5ETEVOQlFVUXNSMEZCTUVRc1EwRkJNVVFzUjBGQk9FUXNRMEZCY2tVN1FVRkRTRHRCUVVOS0xFdEJWbTFDTzBGQlYzQkNja01zWVVGQlV5eHRRa0ZCVlR0QlFVTm1MR1ZCUVU5NVF5eHBRa0ZCVUR0QlFVTklPMEZCWW0xQ0xFTkJRWGhDTzBGQlpVRnFSQ3hIUVVGSGEwUXNZVUZCU0N4SFFVRnRRaXhaUVVGVk8wRkJRM3BDTEZkQlFVOUVMR2xDUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096czdPenM3T3pzN096czdPenM3TzBGQmEwSkJha1FzUjBGQlIyMUVMR2RDUVVGSUxFZEJRWE5DTEZWQlFWTkRMRU5CUVZRc1JVRkJXVU1zUTBGQldpeEZRVUZsUXl4RFFVRm1MRVZCUVd0Q1F5eERRVUZzUWl4RlFVRnZRanRCUVVOMFF5eFhRVUZQTzBGQlEwaHVSQ3huUWtGQlVTeG5Ra0ZCVTI5RUxFTkJRVlFzUlVGQlZ6dEJRVU5tTEcxQ1FVRlJiRVFzUzBGQlMwTXNSMEZCVEN4RFFVRlRMRWxCUVVWcFJDeERRVUZZTEVWQlFXRXNRMEZCWWl4SlFVRnJRa29zUTBGQmJFSXNSMEZCYzBJc1NVRkJSVWtzUTBGQlJpeEhRVUZMYkVRc1MwRkJTME1zUjBGQlRDeERRVUZUTEVsQlFVVnBSQ3hEUVVGWUxFVkJRV0VzUTBGQllpeERRVUZNTEVkQlFYTkNTQ3hEUVVFMVF5eEhRVUZuUkN4SlFVRkZMME1zUzBGQlMwTXNSMEZCVEN4RFFVRlRhVVFzUTBGQlZDeEZRVUZYTEVOQlFWZ3NRMEZCUml4SlFVRnBRaXhKUVVGRlFTeERRVUZ1UWl4SlFVRnpRa1lzUTBGQmRFVXNSMEZCTUVWb1JDeExRVUZMUXl4SFFVRk1MRU5CUVZOcFJDeERRVUZVTEVWQlFWY3NRMEZCV0N4SlFVRmpSQ3hEUVVGb1J6dEJRVU5JTEZOQlNFVTdRVUZKU0M5RExHbENRVUZUTEcxQ1FVRlZPMEZCUTJZc2JVSkJRVTlTTEVkQlFVZHRSQ3huUWtGQlNDeERRVUZ2UWtrc1EwRkJjRUlzUlVGQmRVSkVMRU5CUVhaQ0xFVkJRVEJDUkN4RFFVRXhRaXhGUVVFMlFrUXNRMEZCTjBJc1EwRkJVRHRCUVVOSU8wRkJUa1VzUzBGQlVEdEJRVkZJTEVOQlZFUTdPMEZCVjBFN096czdPenM3T3pzN096czdPenRCUVdWQkxFbEJRVWxMTEhsQ1FVRjVRanRCUVVONlFuSkVMRmxCUVZFc1owSkJRVk56UkN4SlFVRlVMRVZCUVdNN1FVRkRiRUlzWlVGQlQzQkVMRXRCUVV0RExFZEJRVXdzUTBGQlUyMUVMRWxCUVZRc1JVRkJaU3hEUVVGbUxFTkJRVkE3UVVGRFNDeExRVWgzUWp0QlFVbDZRbXhFTEdGQlFWTXNiVUpCUVZVN1FVRkRaaXhsUVVGUGFVUXNjMEpCUVZBN1FVRkRTRHRCUVU1M1FpeERRVUUzUWp0QlFWRkJla1FzUjBGQlJ6SkVMSEZDUVVGSUxFZEJRVEpDTEZsQlFWVTdRVUZEYWtNc1YwRkJUMFlzYzBKQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096czdPenM3UVVGbFFTeEpRVUZKUnl3d1FrRkJNRUk3UVVGRE1VSjRSQ3haUVVGUkxHZENRVUZUYzBRc1NVRkJWQ3hGUVVGak8wRkJRMnhDTEdWQlFVOHNRMEZCUTBFc1NVRkJSQ3hKUVVGUFFTeFBRVUZMTEVOQlFWb3NRMEZCVUR0QlFVTklMRXRCU0hsQ08wRkJTVEZDYkVRc1lVRkJVeXh0UWtGQlZUdEJRVU5tTEdWQlFVOXZSQ3gxUWtGQlVEdEJRVU5JTzBGQlRubENMRU5CUVRsQ08wRkJVVUUxUkN4SFFVRkhOa1FzYzBKQlFVZ3NSMEZCTkVJc1dVRkJWVHRCUVVOc1F5eFhRVUZQUkN4MVFrRkJVRHRCUVVOSUxFTkJSa1E3TzBGQlNVRTdPenM3T3pzN096czdPenM3T3p0QlFXVkJMRWxCUVVsRkxEUkNRVUUwUWp0QlFVTTFRakZFTEZsQlFWRXNaMEpCUVZOelJDeEpRVUZVTEVWQlFXTTdRVUZEYkVJc1dVRkJTVXNzWVVGQllVd3NTVUZCYWtJN1FVRkRRVUVzWjBKQlFWRXNRMEZCVWp0QlFVTkJMRmxCUVVkQkxFOUJRVThzUTBGQlZpeEZRVUZaTzBGQlExSkxMSGxDUVVGaFRDeFBRVUZQUVN4SlFVRlFMRWRCUVdNc1IwRkJNMEk3UVVGRFNDeFRRVVpFTEUxQlJVczdRVUZEUkN4alFVRkZRU3hKUVVGR08wRkJRMEZMTEhsQ1FVRmhMRU5CUVVNc1IwRkJSQ3hKUVVGVFRDeFJRVUZUUVN4UFFVRlBMRU5CUVdoQ0xFbEJRWE5DTEVOQlFTOUNMRU5CUVdJN1FVRkRTRHRCUVVORUxHVkJRVTlMTEZWQlFWQTdRVUZEU0N4TFFWZ3lRanRCUVZrMVFuWkVMR0ZCUVZNc2JVSkJRVlU3UVVGRFppeGxRVUZQYzBRc2VVSkJRVkE3UVVGRFNEdEJRV1F5UWl4RFFVRm9RenRCUVdkQ1FUbEVMRWRCUVVkblJTeDNRa0ZCU0N4SFFVRTRRaXhaUVVGVk8wRkJRM0JETEZkQlFVOUdMSGxDUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096czdPenM3T3pzN096czdPMEZCWlVFc1NVRkJTVWNzZFVKQlFYVkNPMEZCUTNaQ04wUXNXVUZCVVN4blFrRkJVM05FTEVsQlFWUXNSVUZCWXp0QlFVTnNRaXhsUVVGUFFTeFBRVUZQUVN4SlFVRlFMRWRCUVdOQkxFbEJRV1FzUjBGQmNVSkJMRWxCUVRWQ08wRkJRMGdzUzBGSWMwSTdRVUZKZGtKc1JDeGhRVUZUTEcxQ1FVRlZPMEZCUTJZc1pVRkJUM2xFTEc5Q1FVRlFPMEZCUTBnN1FVRk9jMElzUTBGQk0wSTdRVUZSUVdwRkxFZEJRVWRyUlN4dFFrRkJTQ3hIUVVGNVFpeFpRVUZWTzBGQlF5OUNMRmRCUVU5RUxHOUNRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdPenM3T3pzN08wRkJaVUVzU1VGQlNVVXNkMEpCUVhkQ08wRkJRM2hDTDBRc1dVRkJVU3huUWtGQlUzTkVMRWxCUVZRc1JVRkJZenRCUVVOc1FrRXNaMEpCUVZFc1EwRkJVanRCUVVOQkxHVkJRVThzUlVGQlJVRXNUMEZCVDBFc1NVRkJVQ3hIUVVGalFTeEpRVUZrTEVkQlFYRkNRU3hKUVVGeVFpeEhRVUUwUWl4RFFVRTVRaXhEUVVGUU8wRkJRMGdzUzBGS2RVSTdRVUZMZUVKc1JDeGhRVUZUTEcxQ1FVRlZPMEZCUTJZc1pVRkJUekpFTEhGQ1FVRlFPMEZCUTBnN1FVRlFkVUlzUTBGQk5VSTdRVUZUUVc1RkxFZEJRVWR2UlN4dlFrRkJTQ3hIUVVFd1FpeFpRVUZWTzBGQlEyaERMRmRCUVU5RUxIRkNRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdPenM3TzBGQldVRXNTVUZCU1VVc01FSkJRVEJDTzBGQlF6RkNha1VzV1VGQlVTeG5Ra0ZCVTNORUxFbEJRVlFzUlVGQll6dEJRVU5zUWtFc1pVRkJUMEVzVDBGQlN5eERRVUZhTzBGQlEwRXNXVUZCU1VFc1QwRkJUeXhEUVVGWUxFVkJRMGtzVDBGQlR5eE5RVUZOUVN4SlFVRk9MRWRCUVdGQkxFbEJRV0lzUjBGQmIwSkJMRWxCUVhCQ0xFZEJRVEpDUVN4SlFVRnNRenRCUVVOS1FTeG5Ra0ZCVVN4RFFVRlNPMEZCUTBFc1pVRkJUeXhEUVVGRExFZEJRVVFzU1VGQlVVRXNUMEZCVDBFc1NVRkJVQ3hIUVVGalFTeEpRVUZrTEVkQlFYRkNRU3hKUVVGeVFpeEhRVUUwUWl4RFFVRndReXhEUVVGUU8wRkJRMGdzUzBGUWVVSTdRVUZSTVVKc1JDeGhRVUZUTEcxQ1FVRlZPMEZCUTJZc1pVRkJUelpFTEhWQ1FVRlFPMEZCUTBnN1FVRldlVUlzUTBGQk9VSTdRVUZaUVhKRkxFZEJRVWR6UlN4elFrRkJTQ3hIUVVFMFFpeFpRVUZWTzBGQlEyeERMRmRCUVU5RUxIVkNRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdPenM3T3pzN08wRkJaVUVzU1VGQlNVVXNkVUpCUVhWQ08wRkJRM1pDYmtVc1dVRkJVU3huUWtGQlUzTkVMRWxCUVZRc1JVRkJZenRCUVVOc1FpeGxRVUZQUVN4UFFVRlBRU3hKUVVGUUxFZEJRV05CTEVsQlFXUXNSMEZCY1VKQkxFbEJRWEpDTEVkQlFUUkNRU3hKUVVGdVF6dEJRVU5JTEV0QlNITkNPMEZCU1haQ2JFUXNZVUZCVXl4dFFrRkJWVHRCUVVObUxHVkJRVThyUkN4dlFrRkJVRHRCUVVOSU8wRkJUbk5DTEVOQlFUTkNPMEZCVVVGMlJTeEhRVUZIZDBVc2JVSkJRVWdzUjBGQmVVSXNXVUZCVlR0QlFVTXZRaXhYUVVGUFJDeHZRa0ZCVUR0QlFVTklMRU5CUmtRN08wRkJTVUU3T3pzN096czdPenM3T3pzN096dEJRV1ZCTEVsQlFVbEZMSGRDUVVGM1FqdEJRVU40UW5KRkxGbEJRVkVzWjBKQlFWTnpSQ3hKUVVGVUxFVkJRV003UVVGRGJFSkJMR2RDUVVGUExFTkJRVkE3UVVGRFFTeGxRVUZSUVN4UFFVRlBRU3hKUVVGUUxFZEJRV05CTEVsQlFXUXNSMEZCY1VKQkxFbEJRWEpDTEVkQlFUUkNRU3hKUVVFMVFpeEhRVUZ0UXl4RFFVRXpRenRCUVVOSUxFdEJTblZDTzBGQlMzaENiRVFzWVVGQlV5eHRRa0ZCVlR0QlFVTm1MR1ZCUVU5cFJTeHhRa0ZCVUR0QlFVTklPMEZCVUhWQ0xFTkJRVFZDTzBGQlUwRjZSU3hIUVVGSE1FVXNiMEpCUVVnc1IwRkJNRUlzV1VGQlZUdEJRVU5vUXl4WFFVRlBSQ3h4UWtGQlVEdEJRVU5JTEVOQlJrUTdPMEZCU1VFN096czdPenM3T3pzN096czdPenRCUVdWQkxFbEJRVWxGTERCQ1FVRXdRanRCUVVNeFFuWkZMRmxCUVZFc1owSkJRVk56UkN4SlFVRlVMRVZCUVdNN1FVRkRiRUpCTEdWQlFVOUJMRTlCUVVzc1EwRkJXanRCUVVOQkxGbEJRVWxCTEU5QlFVOHNRMEZCV0N4RlFVTkpMRTlCUVU4c1RVRkJUVUVzU1VGQlRpeEhRVUZoUVN4SlFVRmlMRWRCUVc5Q1FTeEpRVUZ3UWl4SFFVRXlRa0VzU1VGQk0wSXNSMEZCYTBOQkxFbEJRWHBETzBGQlEwcEJMR2RDUVVGUkxFTkJRVkk3UVVGRFFTeGxRVUZQTEU5QlFVOUJMRTlCUVU5QkxFbEJRVkFzUjBGQlkwRXNTVUZCWkN4SFFVRnhRa0VzU1VGQmNrSXNSMEZCTkVKQkxFbEJRVFZDTEVkQlFXMURMRU5CUVRGRExFTkJRVkE3UVVGRFNDeExRVkI1UWp0QlFWRXhRbXhFTEdGQlFWTXNiVUpCUVZVN1FVRkRaaXhsUVVGUGJVVXNkVUpCUVZBN1FVRkRTRHRCUVZaNVFpeERRVUU1UWp0QlFWbEJNMFVzUjBGQlJ6UkZMSE5DUVVGSUxFZEJRVFJDTEZsQlFWVTdRVUZEYkVNc1YwRkJUMFFzZFVKQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096czdPenM3UVVGbFFTeEpRVUZKUlN4elFrRkJjMEk3UVVGRGRFSjZSU3haUVVGUkxHZENRVUZUYzBRc1NVRkJWQ3hGUVVGak8wRkJRMnhDTEdWQlFVOHNRMEZCUXl4RFFVRkVMRWxCUVUxd1JDeExRVUZMZDBVc1NVRkJUQ3hEUVVGVkxFbEJRVWx3UWl4UFFVRlBRU3hKUVVGeVFpeEpRVUUyUWl4RFFVRnVReXhEUVVGUU8wRkJRMGdzUzBGSWNVSTdRVUZKZEVKc1JDeGhRVUZUTEcxQ1FVRlZPMEZCUTJZc1pVRkJUM0ZGTEcxQ1FVRlFPMEZCUTBnN1FVRk9jVUlzUTBGQk1VSTdRVUZSUVRkRkxFZEJRVWNyUlN4clFrRkJTQ3hIUVVGM1FpeFpRVUZWTzBGQlF6bENMRmRCUVU5R0xHMUNRVUZRTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVHM3T3pzN096czdPenM3T3pzN08wRkJaVUVzU1VGQlNVY3NkVUpCUVhWQ08wRkJRM1pDTlVVc1dVRkJVU3huUWtGQlUzTkVMRWxCUVZRc1JVRkJZenRCUVVOc1FrRXNaVUZCVDBFc1QwRkJUeXhEUVVGa08wRkJRMEVzWlVGQlQzQkVMRXRCUVV0M1JTeEpRVUZNTEVOQlFWVXNTVUZCU1hCQ0xFOUJRVTlCTEVsQlFYSkNMRU5CUVZBN1FVRkRTQ3hMUVVwelFqdEJRVXQyUW14RUxHRkJRVk1zYlVKQlFWVTdRVUZEWml4bFFVRlBkMFVzYjBKQlFWQTdRVUZEU0R0QlFWQnpRaXhEUVVFelFqdEJRVk5CYUVZc1IwRkJSMmxHTEcxQ1FVRklMRWRCUVhsQ0xGbEJRVlU3UVVGREwwSXNWMEZCVDBRc2IwSkJRVkE3UVVGRFNDeERRVVpFT3p0QlFVbEJPenM3T3pzN096czdPenM3T3pzN1FVRmxRU3hKUVVGSlJTeDVRa0ZCZVVJN1FVRkRla0k1UlN4WlFVRlJMR2RDUVVGVGMwUXNTVUZCVkN4RlFVRmpPMEZCUTJ4Q1FTeGxRVUZQUVN4UFFVRlBMRU5CUVdRN1FVRkRRU3haUVVGSlFTeFBRVUZQTEVOQlFWZ3NSVUZEU1N4UFFVRlBMRU5CUVVNc1IwRkJSQ3hKUVVGUmNFUXNTMEZCUzNkRkxFbEJRVXdzUTBGQlZTeEpRVUZKY0VJc1QwRkJUMEVzU1VGQmNrSXNTVUZCTmtJc1EwRkJja01zUTBGQlVEdEJRVU5LUVN4blFrRkJVU3hEUVVGU08wRkJRMEVzWlVGQlR5eFBRVUZQY0VRc1MwRkJTM2RGTEVsQlFVd3NRMEZCVlN4SlFVRkpjRUlzVDBGQlQwRXNTVUZCY2tJc1NVRkJOa0lzUTBGQmNFTXNRMEZCVUR0QlFVTklMRXRCVUhkQ08wRkJVWHBDYkVRc1lVRkJVeXh0UWtGQlZUdEJRVU5tTEdWQlFVOHdSU3h6UWtGQlVEdEJRVU5JTzBGQlZuZENMRU5CUVRkQ08wRkJXVUZzUml4SFFVRkhiVVlzY1VKQlFVZ3NSMEZCTWtJc1dVRkJWVHRCUVVOcVF5eFhRVUZQUkN4elFrRkJVRHRCUVVOSUxFTkJSa1E3TzBGQlNVRTdPenM3T3pzN096czdPenM3T3p0QlFXVkJMRWxCUVVsRkxIRkNRVUZ4UWp0QlFVTnlRbWhHTEZsQlFWRXNaMEpCUVZOelJDeEpRVUZVTEVWQlFXTTdRVUZEYkVJc1pVRkJUMEVzVDBGQlQwRXNTVUZCVUN4SFFVRmpRU3hKUVVGeVFqdEJRVU5JTEV0QlNHOUNPMEZCU1hKQ2JFUXNZVUZCVXl4dFFrRkJWVHRCUVVObUxHVkJRVTgwUlN4clFrRkJVRHRCUVVOSU8wRkJUbTlDTEVOQlFYcENPMEZCVVVGd1JpeEhRVUZIY1VZc2FVSkJRVWdzUjBGQmRVSXNXVUZCVlR0QlFVTTNRaXhYUVVGUFJDeHJRa0ZCVUR0QlFVTklMRU5CUmtRN08wRkJTVUU3T3pzN096czdPenM3T3pzN096dEJRV1ZCTEVsQlFVbEZMSE5DUVVGelFqdEJRVU4wUW14R0xGbEJRVkVzWjBKQlFWTnpSQ3hKUVVGVUxFVkJRV003UVVGRGJFSkJMR2RDUVVGUkxFTkJRVkk3UVVGRFFTeGxRVUZSUVN4UFFVRlBRU3hKUVVGUUxFZEJRV05CTEVsQlFXUXNSMEZCY1VJc1EwRkJOMEk3UVVGRFNDeExRVXB4UWp0QlFVdDBRbXhFTEdGQlFWTXNiVUpCUVZVN1FVRkRaaXhsUVVGUE9FVXNiVUpCUVZBN1FVRkRTRHRCUVZCeFFpeERRVUV4UWp0QlFWTkJkRVlzUjBGQlIzVkdMR3RDUVVGSUxFZEJRWGRDTEZsQlFWVTdRVUZET1VJc1YwRkJUMFFzYlVKQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096czdRVUZaUVN4SlFVRkpSU3gzUWtGQmQwSTdRVUZEZUVKd1JpeFpRVUZSTEdkQ1FVRlRjMFFzU1VGQlZDeEZRVUZqTzBGQlEyeENRU3hsUVVGUFFTeFBRVUZMTEVOQlFWbzdRVUZEUVN4WlFVRkpRU3hQUVVGUExFTkJRVmdzUlVGRFNTeFBRVUZQTEUxQlFVMUJMRWxCUVU0c1IwRkJZVUVzU1VGQllpeEhRVUZ2UWtFc1NVRkJNMEk3UVVGRFNrRXNaMEpCUVZFc1EwRkJVanRCUVVOQkxHVkJRVThzVDBGQlQwRXNUMEZCVDBFc1NVRkJVQ3hIUVVGalFTeEpRVUZrTEVkQlFYRkNMRU5CUVRWQ0xFTkJRVkE3UVVGRFNDeExRVkIxUWp0QlFWRjRRbXhFTEdGQlFWTXNiVUpCUVZVN1FVRkRaaXhsUVVGUFowWXNjVUpCUVZBN1FVRkRTRHRCUVZaMVFpeERRVUUxUWp0QlFWbEJlRVlzUjBGQlIzbEdMRzlDUVVGSUxFZEJRVEJDTEZsQlFWVTdRVUZEYUVNc1YwRkJUMFFzY1VKQlFWQTdRVUZEU0N4RFFVWkVJaXdpWm1sc1pTSTZJa05EUVdOMGFXOXVSV0Z6WlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNRGd0TWpBeE1DQlNhV05oY21SdklGRjFaWE5oWkdGY2NseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhNUzB5TURFeUlHTnZZMjl6TW1RdGVDNXZjbWRjY2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE15MHlNREUySUVOb2RXdHZibWNnVkdWamFHNXZiRzluYVdWeklFbHVZeTVjY2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHlYRzVjY2x4dUlHaDBkSEE2THk5M2QzY3VZMjlqYjNNeVpDMTRMbTl5WjF4eVhHNWNjbHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNjbHh1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUhSdklHUmxZV3hjY2x4dUlHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtY2dkMmwwYUc5MWRDQnNhVzFwZEdGMGFXOXVJSFJvWlNCeWFXZG9kSE5jY2x4dUlIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHeGNjbHh1SUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhRZ2NHVnljMjl1Y3lCMGJ5QjNhRzl0SUhSb1pTQlRiMlowZDJGeVpTQnBjMXh5WEc0Z1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlNCbWIyeHNiM2RwYm1jZ1kyOXVaR2wwYVc5dWN6cGNjbHh1WEhKY2JpQlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpDQnBibHh5WEc0Z1lXeHNJR052Y0dsbGN5QnZjaUJ6ZFdKemRHRnVkR2xoYkNCd2IzSjBhVzl1Y3lCdlppQjBhR1VnVTI5bWRIZGhjbVV1WEhKY2JseHlYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHlYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEhKY2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjY2x4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2NseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hISmNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEhKY2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUVCdGIyUjFiR1VnWTJOY2NseHVJQ292WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1Z6SUhSb1pTQmhZM1JwYjI0Z1pXRnphVzVuSUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0J5WVhSbElIQmhjbUZ0WlhSbGNpNGdQR0p5SUM4K1hISmNiaUFxSUVaeWIyMGdjMnh2ZHlCMGJ5Qm1ZWE4wTGx4eVhHNGdLaUFoSTNwb0lPV0ltK1c3dWlCbFlYTmxTVzRnNTd5VDVZcW81YSs1NkxHaDc3eU01NVN4NW9XaTVZaXc1YityNDRDQ1hISmNiaUFxSUVCdFpYUm9iMlFnWldGelpVbHVYSEpjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCeVlYUmxYSEpjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sU1c0b015NHdLU2s3WEhKY2JpQXFMMXh5WEc1all5NWxZWE5sU1c0Z1BTQm1kVzVqZEdsdmJpQW9jbUYwWlNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQmZjbUYwWlRvZ2NtRjBaU3hjY2x4dUlDQWdJQ0FnSUNCbFlYTnBibWM2SUdaMWJtTjBhVzl1SUNoa2RDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1RXRjBhQzV3YjNjb1pIUXNJSFJvYVhNdVgzSmhkR1VwTzF4eVhHNGdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnY21WMlpYSnpaVG9nWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR05qTG1WaGMyVkpiaWd4SUM4Z2RHaHBjeTVmY21GMFpTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUVOeVpXRjBaWE1nZEdobElHRmpkR2x2YmlCbFlYTnBibWNnYjJKcVpXTjBJSGRwZEdnZ2RHaGxJSEpoZEdVZ2NHRnlZVzFsZEdWeUxpQThZbklnTHo1Y2NseHVJQ29nUm5KdmJTQm1ZWE4wSUhSdklITnNiM2N1WEhKY2JpQXFJQ0VqZW1nZzVZaWI1YnU2SUdWaGMyVlBkWFFnNTd5VDVZcW81YSs1NkxHaDc3eU01NVN4NWIrcjVZaXc1b1dpNDRDQ1hISmNiaUFxSUVCdFpYUm9iMlFnWldGelpVOTFkRnh5WEc0Z0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2NtRjBaVnh5WEc0Z0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOVhISmNiaUFxSUVCbGVHRnRjR3hsWEhKY2JpQXFJR0ZqZEdsdmJpNWxZWE5wYm1jb1kyTXVaV0Z6WlU5MWRDZ3pMakFwS1R0Y2NseHVJQ292WEhKY2JtTmpMbVZoYzJWUGRYUWdQU0JtZFc1amRHbHZiaUFvY21GMFpTa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlIdGNjbHh1SUNBZ0lDQWdJQ0JmY21GMFpUb2djbUYwWlN4Y2NseHVJQ0FnSUNBZ0lDQmxZWE5wYm1jNklHWjFibU4wYVc5dUlDaGtkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdUV0YwYUM1d2IzY29aSFFzSURFZ0x5QjBhR2x6TGw5eVlYUmxLVHRjY2x4dUlDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJSEpsZG1WeWMyVTZJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZeTVsWVhObFQzVjBLREVnTHlCMGFHbHpMbDl5WVhSbEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TzF4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nUTNKbFlYUmxjeUIwYUdVZ1lXTjBhVzl1SUdWaGMybHVaeUJ2WW1wbFkzUWdkMmwwYUNCMGFHVWdjbUYwWlNCd1lYSmhiV1YwWlhJdUlEeGljaUF2UGx4eVhHNGdLaUJUYkc5M0lIUnZJR1poYzNRZ2RHaGxiaUIwYnlCemJHOTNMbHh5WEc0Z0tpQWhJM3BvSU9XSW0rVzd1aUJsWVhObFNXNVBkWFFnNTd5VDVZcW81YSs1NkxHaDc3eU01b1dpNVlpdzViK3I3N3lNNTRTMjVaQ081b1dpNDRDQ1hISmNiaUFxSUVCdFpYUm9iMlFnWldGelpVbHVUM1YwWEhKY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnlZWFJsWEhKY2JpQXFJRUJ5WlhSMWNtNGdlMDlpYW1WamRIMWNjbHh1SUNwY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sU1c1UGRYUW9NeTR3S1NrN1hISmNiaUFxTDF4eVhHNWpZeTVsWVhObFNXNVBkWFFnUFNCbWRXNWpkR2x2YmlBb2NtRjBaU2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSHRjY2x4dUlDQWdJQ0FnSUNCZmNtRjBaVG9nY21GMFpTeGNjbHh1SUNBZ0lDQWdJQ0JsWVhOcGJtYzZJR1oxYm1OMGFXOXVJQ2hrZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa2RDQXFQU0F5TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pIUWdQQ0F4S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURBdU5TQXFJRTFoZEdndWNHOTNLR1IwTENCMGFHbHpMbDl5WVhSbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJREV1TUNBdElEQXVOU0FxSUUxaGRHZ3VjRzkzS0RJZ0xTQmtkQ3dnZEdocGN5NWZjbUYwWlNrN1hISmNiaUFnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNCeVpYWmxjbk5sT2lCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWTJNdVpXRnpaVWx1VDNWMEtIUm9hWE11WDNKaGRHVXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1Z6SUhSb1pTQmhZM1JwYjI0Z1pXRnphVzVuSUc5aWFtVmpkQ0IzYVhSb0lIUm9aU0J5WVhSbElIQmhjbUZ0WlhSbGNpNGdQR0p5SUM4K1hISmNiaUFxSUZKbFptVnlaVzVqWlNCbFlYTmxTVzVGZUhCdk9pQThZbklnTHo1Y2NseHVJQ29nYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJQ0VqZW1oY2NseHVJQ29nNVlpYjVidTZJR1ZoYzJWRmVIQnZibVZ1ZEdsaGJFbHVJT2U4aytXS3FPV3Z1ZWl4b2VPQWdqeGljaUF2UGx4eVhHNGdLaUJGWVhObFJYaHdiMjVsYm5ScFlXeEpiaURtbUsvbWpJbm1qSWZtbGJEbGg3M21sYkRudkpQbGlxam92NXZsaGFYbm1vVGxpcWprdlp6amdJSThZbklnTHo1Y2NseHVJQ29nNVkrQzZJQ0RJR1ZoYzJWSmJrVjRjRy92dkpwb2RIUndPaTh2ZDNkM0xucG9hV2gxTG1OdmJTOXhkV1Z6ZEdsdmJpOHlNVGs0TVRVM01TOWhibk4zWlhJdk1UazVNalUwTVRoY2NseHVJQ29nUUcxbGRHaHZaQ0JsWVhObFJYaHdiMjVsYm5ScFlXeEpibHh5WEc0Z0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOVhISmNiaUFxSUVCbGVHRnRjR3hsWEhKY2JpQXFJR0ZqZEdsdmJpNWxZWE5wYm1jb1kyTXVaV0Z6WlVWNGNHOXVaVzUwYVdGc1NXNG9LU2s3WEhKY2JpQXFMMXh5WEc1MllYSWdYMlZoYzJWRmVIQnZibVZ1ZEdsaGJFbHVUMkpxSUQwZ2UxeHlYRzRnSUNBZ1pXRnphVzVuT2lCbWRXNWpkR2x2Ymloa2RDbDdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR1IwSUQwOVBTQXdJRDhnTUNBNklFMWhkR2d1Y0c5M0tESXNJREV3SUNvZ0tHUjBJQzBnTVNrcE8xeHlYRzRnSUNBZ2ZTeGNjbHh1SUNBZ0lISmxkbVZ5YzJVNklHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjlsWVhObFJYaHdiMjVsYm5ScFlXeFBkWFJQWW1vN1hISmNiaUFnSUNCOVhISmNibjA3WEhKY2JtTmpMbVZoYzJWRmVIQnZibVZ1ZEdsaGJFbHVJRDBnWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUhKbGRIVnliaUJmWldGelpVVjRjRzl1Wlc1MGFXRnNTVzVQWW1vN1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1Z6SUhSb1pTQmhZM1JwYjI0Z1pXRnphVzVuSUc5aWFtVmpkQzRnUEdKeUlDOCtYSEpjYmlBcUlGSmxabVZ5Wlc1alpTQmxZWE5sVDNWMFJYaHdiem9nUEdKeUlDOCtYSEpjYmlBcUlHaDBkSEE2THk5M2QzY3VlbWhwYUhVdVkyOXRMM0YxWlhOMGFXOXVMekl4T1RneE5UY3hMMkZ1YzNkbGNpOHhPVGt5TlRReE9GeHlYRzRnS2lBaEkzcG9YSEpjYmlBcUlPV0ltK1c3dWlCbFlYTmxSWGh3YjI1bGJuUnBZV3hQZFhRZzU3eVQ1WXFvNWErNTZMR2g0NENDUEdKeUlDOCtYSEpjYmlBcUlFVmhjMlZGZUhCdmJtVnVkR2xoYkU5MWRDRG1tSy9taklubWpJZm1sYkRsaDczbWxiRG52SlBsaXFqcGdJRGxoN3JubW9UbGlxamt2WnpqZ0lJOFluSWdMejVjY2x4dUlDb2c1WStDNklDRElHVmhjMlZQZFhSRmVIQnY3N3lhYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJRUJ0WlhSb2IyUWdaV0Z6WlVWNGNHOXVaVzUwYVdGc1QzVjBYSEpjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sUlhod2IyNWxiblJwWVd4UGRYUW9LU2s3WEhKY2JpQXFMMXh5WEc1MllYSWdYMlZoYzJWRmVIQnZibVZ1ZEdsaGJFOTFkRTlpYWlBOUlIdGNjbHh1SUNBZ0lHVmhjMmx1WnpvZ1puVnVZM1JwYjI0b1pIUXBlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJrZENBOVBUMGdNU0EvSURFZ09pQW9MU2hOWVhSb0xuQnZkeWd5TENBdE1UQWdLaUJrZENrcElDc2dNU2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNGdJQ0FnY21WMlpYSnpaVG9nWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyVmhjMlZGZUhCdmJtVnVkR2xoYkVsdVQySnFPMXh5WEc0Z0lDQWdmVnh5WEc1OU8xeHlYRzVqWXk1bFlYTmxSWGh3YjI1bGJuUnBZV3hQZFhRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUlhod2IyNWxiblJwWVd4UGRYUlBZbW83WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmx4eVhHNGdLaUJEY21WaGRHVnpJR0Z1SUVWaGMyVkZlSEJ2Ym1WdWRHbGhiRWx1VDNWMElHRmpkR2x2YmlCbFlYTnBibWNnYjJKcVpXTjBMaUE4WW5JZ0x6NWNjbHh1SUNvZ1VtVm1aWEpsYm1ObElHVmhjMlZKYms5MWRFVjRjRzg2SUR4aWNpQXZQbHh5WEc0Z0tpQm9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ0lTTjZhRnh5WEc0Z0tpRGxpSnZsdTdvZ1pXRnpaVVY0Y0c5dVpXNTBhV0ZzU1c1UGRYUWc1N3lUNVlxbzVhKzU2TEdoNDRDQ1BHSnlJQzgrWEhKY2JpQXFJRVZoYzJWRmVIQnZibVZ1ZEdsaGJFbHVUM1YwSU9hWXIrYU1pZWFNaCthVnNPV0h2ZWFWc09lOGsrV0txT2kvbStXRnBlVzV0dW1BZ09XSHV1ZWFoT1dLcU9TOW5PT0FnanhpY2lBdlBseHlYRzRnS2lEbGo0TG9nSU1nWldGelpVbHVUM1YwUlhod2IrKzhtbWgwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQkFiV1YwYUc5a0lHVmhjMlZGZUhCdmJtVnVkR2xoYkVsdVQzVjBYSEpjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sUlhod2IyNWxiblJwWVd4SmJrOTFkQ2dwS1R0Y2NseHVJQ292WEhKY2JuWmhjaUJmWldGelpVVjRjRzl1Wlc1MGFXRnNTVzVQZFhSUFltb2dQU0I3WEhKY2JpQWdJQ0JsWVhOcGJtYzZJR1oxYm1OMGFXOXVLR1IwS1h0Y2NseHVJQ0FnSUNBZ0lDQnBaaWdnWkhRZ0lUMDlJREVnSmlZZ1pIUWdJVDA5SURBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pIUWdLajBnTWp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHUjBJRHdnTVNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBd0xqVWdLaUJOWVhSb0xuQnZkeWd5TENBeE1DQXFJQ2hrZENBdElERXBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SURBdU5TQXFJQ2d0VFdGMGFDNXdiM2NvTWl3Z0xURXdJQ29nS0dSMElDMGdNU2twSUNzZ01pazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa2REdGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQnlaWFpsY25ObE9pQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWldGelpVVjRjRzl1Wlc1MGFXRnNTVzVQZFhSUFltbzdYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibU5qTG1WaGMyVkZlSEJ2Ym1WdWRHbGhiRWx1VDNWMElEMGdablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJSEpsZEhWeWJpQmZaV0Z6WlVWNGNHOXVaVzUwYVdGc1NXNVBkWFJQWW1vN1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1Z6SUdGdUlFVmhjMlZUYVc1bFNXNGdZV04wYVc5dUxpQThZbklnTHo1Y2NseHVJQ29nVW1WbVpYSmxibU5sSUdWaGMyVkpibE5wYm1VNklEeGljaUF2UGx4eVhHNGdLaUJvZEhSd09pOHZkM2QzTG5wb2FXaDFMbU52YlM5eGRXVnpkR2x2Ymk4eU1UazRNVFUzTVM5aGJuTjNaWEl2TVRrNU1qVTBNVGhjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsaUp2bHU3b2dSV0Z6WlZOcGJtVkpiaURudkpQbGlxamxyN25vc2FIamdJSThZbklnTHo1Y2NseHVJQ29nUldGelpWTnBibVZKYmlEbW1LL21qSW5tcmFQbHZLYmxoNzNtbGJEbnZKUGxpcWpvdjV2bGhhWG5tb1RsaXFqa3ZaempnSUk4WW5JZ0x6NWNjbHh1SUNvZzVZK0M2SUNESUdWaGMyVkpibE5wYm1YdnZKcG9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ1FHMWxkR2h2WkNCbFlYTmxVMmx1WlVsdVhISmNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjY2x4dUlDb2dRR1Y0WVcxd2JHVmNjbHh1SUNvZ1lXTjBhVzl1TG1WaGMybHVaeWhqWXk1bFlYTmxVMmx1WlVsdUtDa3BPMXh5WEc0Z0tpOWNjbHh1ZG1GeUlGOWxZWE5sVTJsdVpVbHVUMkpxSUQwZ2UxeHlYRzRnSUNBZ1pXRnphVzVuT2lCbWRXNWpkR2x2Ymloa2RDbDdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJQ2hrZEQwOVBUQWdmSHdnWkhROVBUMHhLU0EvSUdSMElEb2dMVEVnS2lCTllYUm9MbU52Y3loa2RDQXFJRTFoZEdndVVFa2dMeUF5S1NBcklERTdYSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdjbVYyWlhKelpUb2dablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJWaGMyVlRhVzVsVDNWMFQySnFPMXh5WEc0Z0lDQWdmVnh5WEc1OU8xeHlYRzVqWXk1bFlYTmxVMmx1WlVsdUlEMGdablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJSEpsZEhWeWJpQmZaV0Z6WlZOcGJtVkpiazlpYWp0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUVOeVpXRjBaWE1nWVc0Z1JXRnpaVk5wYm1WUGRYUWdZV04wYVc5dUlHVmhjMmx1WnlCdlltcGxZM1F1SUR4aWNpQXZQbHh5WEc0Z0tpQlNaV1psY21WdVkyVWdaV0Z6WlU5MWRGTnBibVU2SUR4aWNpQXZQbHh5WEc0Z0tpQm9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ0lTTjZhRnh5WEc0Z0tpRGxpSnZsdTdvZ1JXRnpaVk5wYm1WUGRYUWc1N3lUNVlxbzVhKzU2TEdoNDRDQ1BHSnlJQzgrWEhKY2JpQXFJRVZoYzJWVGFXNWxTVzRnNXBpdjVveUo1cTJqNWJ5bTVZZTk1cFd3NTd5VDVZcW82WUNBNVllNjU1cUU1WXFvNUwyYzQ0Q0NQR0p5SUM4K1hISmNiaUFxSU9XUGd1aUFneUJsWVhObFQzVjBVMmx1WmUrOG1taDBkSEE2THk5M2QzY3VlbWhwYUhVdVkyOXRMM0YxWlhOMGFXOXVMekl4T1RneE5UY3hMMkZ1YzNkbGNpOHhPVGt5TlRReE9GeHlYRzRnS2lCQWJXVjBhRzlrSUdWaGMyVlRhVzVsVDNWMFhISmNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjY2x4dUlDb2dRR1Y0WVcxd2JHVmNjbHh1SUNvZ1lXTjBhVzl1TG1WaGMybHVaeWhqWXk1bFlYTmxVMmx1WlU5MWRDZ3BLVHRjY2x4dUlDb3ZYSEpjYm5aaGNpQmZaV0Z6WlZOcGJtVlBkWFJQWW1vZ1BTQjdYSEpjYmlBZ0lDQmxZWE5wYm1jNklHWjFibU4wYVc5dUtHUjBLWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0dSMFBUMDlNQ0I4ZkNCa2REMDlQVEVwSUQ4Z1pIUWdPaUJOWVhSb0xuTnBiaWhrZENBcUlFMWhkR2d1VUVrZ0x5QXlLVHRjY2x4dUlDQWdJSDBzWEhKY2JpQWdJQ0J5WlhabGNuTmxPaUJtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZlpXRnpaVk5wYm1WSmJrOWlhanRjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1WTJNdVpXRnpaVk5wYm1WUGRYUWdQU0JtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnY21WMGRYSnVJRjlsWVhObFUybHVaVTkxZEU5aWFqdGNjbHh1ZlR0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lBaEkyVnVYSEpjYmlBcUlFTnlaV0YwWlhNZ2RHaGxJR0ZqZEdsdmJpQmxZWE5wYm1jZ2IySnFaV04wTGlBOFluSWdMejVjY2x4dUlDb2dVbVZtWlhKbGJtTmxJR1ZoYzJWSmJrOTFkRk5wYm1VNklEeGljaUF2UGx4eVhHNGdLaUJvZEhSd09pOHZkM2QzTG5wb2FXaDFMbU52YlM5eGRXVnpkR2x2Ymk4eU1UazRNVFUzTVM5aGJuTjNaWEl2TVRrNU1qVTBNVGhjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsaUp2bHU3b2daV0Z6WlZOcGJtVkpiazkxZENEbnZKUGxpcWpscjdub3NhSGpnSUk4WW5JZ0x6NWNjbHh1SUNvZ1JXRnpaVk5wYm1WSmJpRG1tSy9taklubXJhUGx2S2JsaDczbWxiRG52SlBsaXFqb3Y1dmxoYVhsdWJicGdJRGxoN3JubW9UbGlxamt2WnpqZ0lJOFluSWdMejVjY2x4dUlDb2c1WStDNklDRElHVmhjMlZKYms5MWRGTnBibVh2dkpwb2RIUndPaTh2ZDNkM0xucG9hV2gxTG1OdmJTOXhkV1Z6ZEdsdmJpOHlNVGs0TVRVM01TOWhibk4zWlhJdk1UazVNalUwTVRoY2NseHVJQ29nUUcxbGRHaHZaQ0JsWVhObFUybHVaVWx1VDNWMFhISmNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjY2x4dUlDb2dRR1Y0WVcxd2JHVmNjbHh1SUNvZ1lXTjBhVzl1TG1WaGMybHVaeWhqWXk1bFlYTmxVMmx1WlVsdVQzVjBLQ2twTzF4eVhHNGdLaTljY2x4dWRtRnlJRjlsWVhObFUybHVaVWx1VDNWMFQySnFJRDBnZTF4eVhHNGdJQ0FnWldGemFXNW5PaUJtZFc1amRHbHZiaWhrZENsN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaGtkQ0E5UFQwZ01DQjhmQ0JrZENBOVBUMGdNU2tnUHlCa2RDQTZJQzB3TGpVZ0tpQW9UV0YwYUM1amIzTW9UV0YwYUM1UVNTQXFJR1IwS1NBdElERXBPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJSEpsZG1WeWMyVTZJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5bFlYTmxVMmx1WlVsdVQzVjBUMkpxTzF4eVhHNGdJQ0FnZlZ4eVhHNTlPMXh5WEc1all5NWxZWE5sVTJsdVpVbHVUM1YwSUQwZ1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lISmxkSFZ5YmlCZlpXRnpaVk5wYm1WSmJrOTFkRTlpYWp0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJBYlc5a2RXeGxJR05qWEhKY2JpQXFMMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nUTNKbFlYUmxjeUIwYUdVZ1lXTjBhVzl1SUdWaGMybHVaeUJ2WW1wbFkzUWdkMmwwYUNCMGFHVWdjR1Z5YVc5a0lHbHVJSEpoWkdsaGJuTWdLR1JsWm1GMWJIUWdhWE1nTUM0ektTNGdQR0p5SUM4K1hISmNiaUFxSUZKbFptVnlaVzVqWlNCbFlYTmxTVzVGYkdGemRHbGpPaUE4WW5JZ0x6NWNjbHh1SUNvZ2FIUjBjRG92TDNkM2R5NTZhR2xvZFM1amIyMHZjWFZsYzNScGIyNHZNakU1T0RFMU56RXZZVzV6ZDJWeUx6RTVPVEkxTkRFNFhISmNiaUFxSUNFamVtaGNjbHh1SUNvZzVZaWI1YnU2SUdWaGMyVkZiR0Z6ZEdsalNXNGc1N3lUNVlxbzVhKzU2TEdoNDRDQ1BHSnlJQzgrWEhKY2JpQXFJRVZoYzJWRmJHRnpkR2xqU1c0ZzVwaXY1b3lKNWJ5NTVvQ241cHV5NTdxLzU3eVQ1WXFvNkwrYjVZV2w1NXFFNVlxbzVMMmM0NENDUEdKeUlDOCtYSEpjYmlBcUlPV1BndWFWc0NCbFlYTmxTVzVGYkdGemRHbGo3N3lhYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJRUJ0WlhSb2IyUWdaV0Z6WlVWc1lYTjBhV05KYmx4eVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdjR1Z5YVc5a1hISmNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjY2x4dUlDb2dRR1Y0WVcxd2JHVmNjbHh1SUNvZ0x5OGdaWGhoYlhCc1pWeHlYRzRnS2lCaFkzUnBiMjR1WldGemFXNW5LR05qTG1WaGMyVkZiR0Z6ZEdsalNXNG9NeTR3S1NrN1hISmNiaUFxTDF4eVhHNHZMMlJsWm1GMWJIUWdaV0Z6WlNCbGJHRnpkR2xqSUdsdUlHOWlhbVZqZENBb2NHVnlhVzlrSUQwZ01DNHpLVnh5WEc1MllYSWdYMlZoYzJWRmJHRnpkR2xqU1c1UFltb2dQU0I3WEhKY2JpQWdJQ0JsWVhOcGJtYzZablZ1WTNScGIyNG9aSFFwZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hrZENBOVBUMGdNQ0I4ZkNCa2RDQTlQVDBnTVNsY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1IwTzF4eVhHNGdJQ0FnSUNBZ0lHUjBJRDBnWkhRZ0xTQXhPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF0VFdGMGFDNXdiM2NvTWl3Z01UQWdLaUJrZENrZ0tpQk5ZWFJvTG5OcGJpZ29aSFFnTFNBb01DNHpJQzhnTkNrcElDb2dUV0YwYUM1UVNTQXFJRElnTHlBd0xqTXBPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJQ0J5WlhabGNuTmxPbVoxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCZlpXRnpaVVZzWVhOMGFXTlBkWFJQWW1vN1hISmNiaUFnSUNBZ2ZWeHlYRzRnZlR0Y2NseHVZMk11WldGelpVVnNZWE4wYVdOSmJpQTlJR1oxYm1OMGFXOXVJQ2h3WlhKcGIyUXBJSHRjY2x4dUlDQWdJR2xtS0hCbGNtbHZaQ0FtSmlCd1pYSnBiMlFnSVQwOUlEQXVNeWw3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNCbGNtbHZaRG9nY0dWeWFXOWtMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxZWE5wYm1jNklHWjFibU4wYVc5dUlDaGtkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1IwSUQwOVBTQXdJSHg4SUdSMElEMDlQU0F4S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmtkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdSMElEMGdaSFFnTFNBeE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDMU5ZWFJvTG5CdmR5Z3lMQ0F4TUNBcUlHUjBLU0FxSUUxaGRHZ3VjMmx1S0Noa2RDQXRJQ2gwYUdsekxsOXdaWEpwYjJRZ0x5QTBLU2tnS2lCTllYUm9MbEJKSUNvZ01pQXZJSFJvYVhNdVgzQmxjbWx2WkNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRtVnljMlU2Wm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHTmpMbVZoYzJWRmJHRnpkR2xqVDNWMEtIUm9hWE11WDNCbGNtbHZaQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUY5bFlYTmxSV3hoYzNScFkwbHVUMkpxTzF4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nUTNKbFlYUmxjeUIwYUdVZ1lXTjBhVzl1SUdWaGMybHVaeUJ2WW1wbFkzUWdkMmwwYUNCMGFHVWdjR1Z5YVc5a0lHbHVJSEpoWkdsaGJuTWdLR1JsWm1GMWJIUWdhWE1nTUM0ektTNGdQR0p5SUM4K1hISmNiaUFxSUZKbFptVnlaVzVqWlNCbFlYTmxUM1YwUld4aGMzUnBZem9nUEdKeUlDOCtYSEpjYmlBcUlHaDBkSEE2THk5M2QzY3VlbWhwYUhVdVkyOXRMM0YxWlhOMGFXOXVMekl4T1RneE5UY3hMMkZ1YzNkbGNpOHhPVGt5TlRReE9GeHlYRzRnS2lBaEkzcG9YSEpjYmlBcUlPV0ltK1c3dWlCbFlYTmxSV3hoYzNScFkwOTFkQ0RudkpQbGlxamxyN25vc2FIamdJSThZbklnTHo1Y2NseHVJQ29nUldGelpVVnNZWE4wYVdOUGRYUWc1cGl2NW95SjVieTU1b0NuNXB1eTU3cS81N3lUNVlxbzZZQ0E1WWU2NTVxRTVZcW81TDJjNDRDQ1BHSnlJQzgrWEhKY2JpQXFJT1dQZ3VpQWd5QmxZWE5sVDNWMFJXeGhjM1JwWSsrOG1taDBkSEE2THk5M2QzY3VlbWhwYUhVdVkyOXRMM0YxWlhOMGFXOXVMekl4T1RneE5UY3hMMkZ1YzNkbGNpOHhPVGt5TlRReE9GeHlYRzRnS2lCQWJXVjBhRzlrSUdWaGMyVkZiR0Z6ZEdsalQzVjBYSEpjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCd1pYSnBiMlJjY2x4dUlDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZWeHlYRzRnS2lCQVpYaGhiWEJzWlZ4eVhHNGdLaUF2THlCbGVHRnRjR3hsWEhKY2JpQXFJR0ZqZEdsdmJpNWxZWE5wYm1jb1kyTXVaV0Z6WlVWc1lYTjBhV05QZFhRb015NHdLU2s3WEhKY2JpQXFMMXh5WEc0dkwyUmxabUYxYkhRZ1pXRnpaU0JsYkdGemRHbGpJRzkxZENCdlltcGxZM1FnS0hCbGNtbHZaQ0E5SURBdU15bGNjbHh1ZG1GeUlGOWxZWE5sUld4aGMzUnBZMDkxZEU5aWFpQTlJSHRjY2x4dUlDQWdJR1ZoYzJsdVp6b2dablZ1WTNScGIyNGdLR1IwS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlDaGtkQ0E5UFQwZ01DQjhmQ0JrZENBOVBUMGdNU2tnUHlCa2RDQTZJRTFoZEdndWNHOTNLRElzSUMweE1DQXFJR1IwS1NBcUlFMWhkR2d1YzJsdUtDaGtkQ0F0SUNnd0xqTWdMeUEwS1NrZ0tpQk5ZWFJvTGxCSklDb2dNaUF2SURBdU15a2dLeUF4TzF4eVhHNGdJQ0FnZlN4Y2NseHVJQ0FnSUhKbGRtVnljMlU2Wm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyVmhjMlZGYkdGemRHbGpTVzVQWW1vN1hISmNiaUFnSUNCOVhISmNibjA3WEhKY2JtTmpMbVZoYzJWRmJHRnpkR2xqVDNWMElEMGdablZ1WTNScGIyNGdLSEJsY21sdlpDa2dlMXh5WEc0Z0lDQWdhV1lvY0dWeWFXOWtJQ1ltSUhCbGNtbHZaQ0FoUFQwZ01DNHpLWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JmY0dWeWFXOWtPaUJ3WlhKcGIyUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVmhjMmx1WnpvZ1puVnVZM1JwYjI0Z0tHUjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnS0dSMElEMDlQU0F3SUh4OElHUjBJRDA5UFNBeEtTQS9JR1IwSURvZ1RXRjBhQzV3YjNjb01pd2dMVEV3SUNvZ1pIUXBJQ29nVFdGMGFDNXphVzRvS0dSMElDMGdLSFJvYVhNdVgzQmxjbWx2WkNBdklEUXBLU0FxSUUxaGRHZ3VVRWtnS2lBeUlDOGdkR2hwY3k1ZmNHVnlhVzlrS1NBcklERTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkbVZ5YzJVNlpuVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmpZeTVsWVhObFJXeGhjM1JwWTBsdUtIUm9hWE11WDNCbGNtbHZaQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOU8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ2NtVjBkWEp1SUY5bFlYTmxSV3hoYzNScFkwOTFkRTlpYWp0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUVOeVpXRjBaWE1nZEdobElHRmpkR2x2YmlCbFlYTnBibWNnYjJKcVpXTjBJSGRwZEdnZ2RHaGxJSEJsY21sdlpDQnBiaUJ5WVdScFlXNXpJQ2hrWldaaGRXeDBJR2x6SURBdU15a3VJRHhpY2lBdlBseHlYRzRnS2lCU1pXWmxjbVZ1WTJVZ1pXRnpaVWx1VDNWMFJXeGhjM1JwWXpvZ1BHSnlJQzgrWEhKY2JpQXFJR2gwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQWhJM3BvWEhKY2JpQXFJT1dJbStXN3VpQmxZWE5sUld4aGMzUnBZMGx1VDNWMElPZThrK1dLcU9XdnVlaXhvZU9BZ2p4aWNpQXZQbHh5WEc0Z0tpQkZZWE5sUld4aGMzUnBZMGx1VDNWMElPYVlyK2FNaWVXOHVlYUFwK2Fic3VlNnYrZThrK1dLcU9pL20rV0ZwZVc1dHVtQWdPV0h1dWVhaE9XS3FPUzluT09BZ2p4aWNpQXZQbHh5WEc0Z0tpRGxqNExvZ0lNZ1pXRnpaVWx1VDNWMFJXeGhjM1JwWSsrOG1taDBkSEE2THk5M2QzY3VlbWhwYUhVdVkyOXRMM0YxWlhOMGFXOXVMekl4T1RneE5UY3hMMkZ1YzNkbGNpOHhPVGt5TlRReE9GeHlYRzRnS2lCQWJXVjBhRzlrSUdWaGMyVkZiR0Z6ZEdsalNXNVBkWFJjY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIQmxjbWx2WkZ4eVhHNGdLaUJBY21WMGRYSnVJSHRQWW1wbFkzUjlYSEpjYmlBcUlFQmxlR0Z0Y0d4bFhISmNiaUFxSUM4dklHVjRZVzF3YkdWY2NseHVJQ29nWVdOMGFXOXVMbVZoYzJsdVp5aGpZeTVsWVhObFJXeGhjM1JwWTBsdVQzVjBLRE11TUNrcE8xeHlYRzRnS2k5Y2NseHVZMk11WldGelpVVnNZWE4wYVdOSmJrOTFkQ0E5SUdaMWJtTjBhVzl1SUNod1pYSnBiMlFwSUh0Y2NseHVJQ0FnSUhCbGNtbHZaQ0E5SUhCbGNtbHZaQ0I4ZkNBd0xqTTdYSEpjYmlBZ0lDQnlaWFIxY200Z2UxeHlYRzRnSUNBZ0lDQWdJRjl3WlhKcGIyUTZJSEJsY21sdlpDeGNjbHh1SUNBZ0lDQWdJQ0JsWVhOcGJtYzZJR1oxYm1OMGFXOXVJQ2hrZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMllYSWdibVYzVkNBOUlEQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUJzYjJOUVpYSnBiMlFnUFNCMGFHbHpMbDl3WlhKcGIyUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hrZENBOVBUMGdNQ0I4ZkNCa2RDQTlQVDBnTVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdibVYzVkNBOUlHUjBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdaSFFnUFNCa2RDQXFJREk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV3h2WTFCbGNtbHZaQ2xjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnNiMk5RWlhKcGIyUWdQU0IwYUdsekxsOXdaWEpwYjJRZ1BTQXdMak1nS2lBeExqVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IyWVhJZ2N5QTlJR3h2WTFCbGNtbHZaQ0F2SURRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmtkQ0E5SUdSMElDMGdNVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaGtkQ0E4SURBcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYm1WM1ZDQTlJQzB3TGpVZ0tpQk5ZWFJvTG5CdmR5Z3lMQ0F4TUNBcUlHUjBLU0FxSUUxaGRHZ3VjMmx1S0Noa2RDQXRJSE1wSUNvZ1RXRjBhQzVRU1NBcUlESWdMeUJzYjJOUVpYSnBiMlFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHNWxkMVFnUFNCTllYUm9MbkJ2ZHlneUxDQXRNVEFnS2lCa2RDa2dLaUJOWVhSb0xuTnBiaWdvWkhRZ0xTQnpLU0FxSUUxaGRHZ3VVRWtnS2lBeUlDOGdiRzlqVUdWeWFXOWtLU0FxSURBdU5TQXJJREU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkMVE3WEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0J5WlhabGNuTmxPaUJtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdZMk11WldGelpVVnNZWE4wYVdOSmJrOTFkQ2gwYUdsekxsOXdaWEpwYjJRcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDA3WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRRzF2WkhWc1pTQmpZMXh5WEc0Z0tpOWNjbHh1WEhKY2JtWjFibU4wYVc5dUlGOWliM1Z1WTJWVWFXMWxJQ2gwYVcxbE1Ta2dlMXh5WEc0Z0lDQWdhV1lnS0hScGJXVXhJRHdnTVNBdklESXVOelVwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z055NDFOakkxSUNvZ2RHbHRaVEVnS2lCMGFXMWxNVHRjY2x4dUlDQWdJSDBnWld4elpTQnBaaUFvZEdsdFpURWdQQ0F5SUM4Z01pNDNOU2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUnBiV1V4SUMwOUlERXVOU0F2SURJdU56VTdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRGN1TlRZeU5TQXFJSFJwYldVeElDb2dkR2x0WlRFZ0t5QXdMamMxTzF4eVhHNGdJQ0FnZlNCbGJITmxJR2xtSUNoMGFXMWxNU0E4SURJdU5TQXZJREl1TnpVcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYVcxbE1TQXRQU0F5TGpJMUlDOGdNaTQzTlR0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z055NDFOakkxSUNvZ2RHbHRaVEVnS2lCMGFXMWxNU0FySURBdU9UTTNOVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCMGFXMWxNU0F0UFNBeUxqWXlOU0F2SURJdU56VTdYSEpjYmlBZ0lDQnlaWFIxY200Z055NDFOakkxSUNvZ2RHbHRaVEVnS2lCMGFXMWxNU0FySURBdU9UZzBNemMxTzF4eVhHNTlPMXh5WEc1Y2NseHVkbUZ5SUY5bFlYTmxRbTkxYm1ObFNXNVBZbW9nUFNCN1hISmNiaUFnSUNCbFlYTnBibWM2SUdaMWJtTjBhVzl1S0dSMEtYdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdNU0F0SUY5aWIzVnVZMlZVYVcxbEtERWdMU0JrZENrN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ2NtVjJaWEp6WlRvZ1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMlZoYzJWQ2IzVnVZMlZQZFhSUFltbzdYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxibHh5WEc0Z0tpQkRjbVZoZEdWeklIUm9aU0JoWTNScGIyNGdaV0Z6YVc1bklHOWlhbVZqZEM0Z1BHSnlJQzgrWEhKY2JpQXFJRVZoYzJWa0lHSnZkVzVqWlNCbFptWmxZM1FnWVhRZ2RHaGxJR0psWjJsdWJtbHVaeTVjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsaUp2bHU3b2daV0Z6WlVKdmRXNWpaVWx1SU9lOGsrV0txT1d2dWVpeG9lT0FnanhpY2lBdlBseHlYRzRnS2lCRllYTmxRbTkxYm1ObFNXNGc1cGl2NW95SjVieTU2TGV6NVlxbzVMMmM1N3lUNVlxbzZMK2I1WVdsNTVxRTVZcW81TDJjNDRDQ1hISmNiaUFxSUVCdFpYUm9iMlFnWldGelpVSnZkVzVqWlVsdVhISmNiaUFxSUVCeVpYUjFjbTRnZTA5aWFtVmpkSDFjY2x4dUlDb2dRR1Y0WVcxd2JHVmNjbHh1SUNvZ0x5OGdaWGhoYlhCc1pWeHlYRzRnS2lCaFkzUnBiMjR1WldGemFXNW5LR05qTG1WaGMyVkNiM1Z1WTJWSmJpZ3BLVHRjY2x4dUlDb3ZYSEpjYm1OakxtVmhjMlZDYjNWdVkyVkpiaUE5SUdaMWJtTjBhVzl1S0NsN1hISmNiaUFnSUNCeVpYUjFjbTRnWDJWaGMyVkNiM1Z1WTJWSmJrOWlhanRjY2x4dWZUdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQWhJMlZ1WEhKY2JpQXFJRU55WldGMFpYTWdkR2hsSUdGamRHbHZiaUJsWVhOcGJtY2diMkpxWldOMExpQThZbklnTHo1Y2NseHVJQ29nUldGelpXUWdZbTkxYm1ObElHVm1abVZqZENCaGRDQjBhR1VnWlc1a2FXNW5MbHh5WEc0Z0tpQWhJM3BvWEhKY2JpQXFJT1dJbStXN3VpQmxZWE5sUW05MWJtTmxUM1YwSU9lOGsrV0txT1d2dWVpeG9lT0FnanhpY2lBdlBseHlYRzRnS2lCRllYTmxRbTkxYm1ObFQzVjBJT2FZcithTWllVzh1ZWkzcytXS3FPUzluT2U4aytXS3FPbUFnT1dIdXVlYWhPV0txT1M5bk9PQWdseHlYRzRnS2lCQWJXVjBhRzlrSUdWaGMyVkNiM1Z1WTJWUGRYUmNjbHh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlZ4eVhHNGdLaUJBWlhoaGJYQnNaVnh5WEc0Z0tpQXZMeUJsZUdGdGNHeGxYSEpjYmlBcUlHRmpkR2x2Ymk1bFlYTnBibWNvWTJNdVpXRnpaVUp2ZFc1alpVOTFkQ2dwS1R0Y2NseHVJQ292WEhKY2JuWmhjaUJmWldGelpVSnZkVzVqWlU5MWRFOWlhaUE5SUh0Y2NseHVJQ0FnSUdWaGMybHVaem9nWm5WdVkzUnBiMjRvWkhRcGUxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZZbTkxYm1ObFZHbHRaU2hrZENrN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ2NtVjJaWEp6WlRwbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRjlsWVhObFFtOTFibU5sU1c1UFltbzdYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibU5qTG1WaGMyVkNiM1Z1WTJWUGRYUWdQU0JtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnY21WMGRYSnVJRjlsWVhObFFtOTFibU5sVDNWMFQySnFPMXh5WEc1OU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlDRWpaVzVjY2x4dUlDb2dRM0psWVhSbGN5QjBhR1VnWVdOMGFXOXVJR1ZoYzJsdVp5QnZZbXBsWTNRdUlEeGljaUF2UGx4eVhHNGdLaUJGWVhObFpDQmliM1Z1WTJVZ1pXWm1aV04wSUdGMElIUm9aU0JpWldkcGJtbHVaeUJoYm1RZ1pXNWthVzVuTGx4eVhHNGdLaUFoSTNwb1hISmNiaUFxSU9XSW0rVzd1aUJsWVhObFFtOTFibU5sU1c1UGRYUWc1N3lUNVlxbzVhKzU2TEdoNDRDQ1BHSnlJQzgrWEhKY2JpQXFJRVZoYzJWQ2IzVnVZMlZKYms5MWRDRG1tSy9taklubHZMbm90N1BsaXFqa3Zaem52SlBsaXFqb3Y1dmxoYVhsdWJicGdJRGxoN3JubW9UbGlxamt2WnpqZ0lKY2NseHVJQ29nUUcxbGRHaHZaQ0JsWVhObFFtOTFibU5sU1c1UGRYUmNjbHh1SUNvZ1FISmxkSFZ5YmlCN1QySnFaV04wZlZ4eVhHNGdLaUJBWlhoaGJYQnNaVnh5WEc0Z0tpQXZMeUJsZUdGdGNHeGxYSEpjYmlBcUlHRmpkR2x2Ymk1bFlYTnBibWNvWTJNdVpXRnpaVUp2ZFc1alpVbHVUM1YwS0NrcE8xeHlYRzRnS2k5Y2NseHVkbUZ5SUY5bFlYTmxRbTkxYm1ObFNXNVBkWFJQWW1vZ1BTQjdYSEpjYmlBZ0lDQmxZWE5wYm1jNklHWjFibU4wYVc5dUlDaDBhVzFsTVNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCdVpYZFVPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDBhVzFsTVNBOElEQXVOU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbE1TQTlJSFJwYldVeElDb2dNanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdibVYzVkNBOUlDZ3hJQzBnWDJKdmRXNWpaVlJwYldVb01TQXRJSFJwYldVeEtTa2dLaUF3TGpVN1hISmNiaUFnSUNBZ0lDQWdmU0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2JtVjNWQ0E5SUY5aWIzVnVZMlZVYVcxbEtIUnBiV1V4SUNvZ01pQXRJREVwSUNvZ01DNDFJQ3NnTUM0MU8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm1WM1ZEdGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQnlaWFpsY25ObE9pQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWldGelpVSnZkVzVqWlVsdVQzVjBUMkpxTzF4eVhHNGdJQ0FnZlZ4eVhHNTlPMXh5WEc1all5NWxZWE5sUW05MWJtTmxTVzVQZFhRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUW05MWJtTmxTVzVQZFhSUFltbzdYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxibHh5WEc0Z0tpQkRjbVZoZEdWeklIUm9aU0JoWTNScGIyNGdaV0Z6YVc1bklHOWlhbVZqZEM0Z1BHSnlJQzgrWEhKY2JpQXFJRWx1SUhSb1pTQnZjSEJ2YzJsMFpTQmthWEpsWTNScGIyNGdkRzhnYlc5MlpTQnpiRzkzYkhrc0lHRnVaQ0IwYUdWdUlHRmpZMlZzWlhKaGRHVmtJSFJ2SUhSb1pTQnlhV2RvZENCa2FYSmxZM1JwYjI0dVhISmNiaUFxSUNFamVtaGNjbHh1SUNvZzVZaWI1YnU2SUdWaGMyVkNZV05yU1c0ZzU3eVQ1WXFvNWErNTZMR2g0NENDUEdKeUlDOCtYSEpjYmlBcUlHVmhjMlZDWVdOclNXNGc1cGl2NVp5bzU1dTQ1WStONTVxRTVwYTU1WkNSNTd5VDVvV2k1NmU3NVlxbzc3eU01NFMyNVpDTzVZcWc2WUNmNVlpdzVxMmo1Nkd1NTVxRTVwYTU1WkNSNDRDQ1BHSnlJQzgrWEhKY2JpQXFJRUJ0WlhSb2IyUWdaV0Z6WlVKaFkydEpibHh5WEc0Z0tpQkFjbVYwZFhKdUlIdFBZbXBsWTNSOVhISmNiaUFxSUVCbGVHRnRjR3hsWEhKY2JpQXFJQzh2SUdWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sUW1GamEwbHVLQ2twTzF4eVhHNGdLaTljY2x4dWRtRnlJRjlsWVhObFFtRmphMGx1VDJKcUlEMGdlMXh5WEc0Z0lDQWdaV0Z6YVc1bk9pQm1kVzVqZEdsdmJpQW9kR2x0WlRFcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2IzWmxjbk5vYjI5MElEMGdNUzQzTURFMU9EdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFJwYldVeFBUMDlNQ0I4ZkNCMGFXMWxNVDA5UFRFcElEOGdkR2x0WlRFZ09pQjBhVzFsTVNBcUlIUnBiV1V4SUNvZ0tDaHZkbVZ5YzJodmIzUWdLeUF4S1NBcUlIUnBiV1V4SUMwZ2IzWmxjbk5vYjI5MEtUdGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQnlaWFpsY25ObE9pQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWldGelpVSmhZMnRQZFhSUFltbzdYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibU5qTG1WaGMyVkNZV05yU1c0Z1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUW1GamEwbHVUMkpxTzF4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nUTNKbFlYUmxjeUIwYUdVZ1lXTjBhVzl1SUdWaGMybHVaeUJ2WW1wbFkzUXVJRHhpY2lBdlBseHlYRzRnS2lCR1lYTjBJRzF2ZG1sdVp5QnRiM0psSUhSb1lXNGdkR2hsSUdacGJtbHphQ3dnWVc1a0lIUm9aVzRnYzJ4dmQyeDVJR0poWTJzZ2RHOGdkR2hsSUdacGJtbHphQzVjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsaUp2bHU3b2daV0Z6WlVKaFkydFBkWFFnNTd5VDVZcW81YSs1NkxHaDQ0Q0NQR0p5SUM4K1hISmNiaUFxSUdWaGMyVkNZV05yVDNWMElPVy9xK21BbitlbnUrV0txT2kyaGVXSHV1ZWJydWFnaCsrOGpPZUV0dVdRanVhRm91YUZvdVdibnVXSXNPZWJydWFnaCtlQ3VlT0FnbHh5WEc0Z0tpQkFiV1YwYUc5a0lHVmhjMlZDWVdOclQzVjBYSEpjYmlBcUlFQnlaWFIxY200Z2UwOWlhbVZqZEgxY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dMeThnWlhoaGJYQnNaVnh5WEc0Z0tpQmhZM1JwYjI0dVpXRnphVzVuS0dOakxtVmhjMlZDWVdOclQzVjBLQ2twTzF4eVhHNGdLaTljY2x4dWRtRnlJRjlsWVhObFFtRmphMDkxZEU5aWFpQTlJSHRjY2x4dUlDQWdJR1ZoYzJsdVp6b2dablZ1WTNScGIyNGdLSFJwYldVeEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHOTJaWEp6YUc5dmRDQTlJREV1TnpBeE5UZzdYSEpjYmlBZ0lDQWdJQ0FnZEdsdFpURWdQU0IwYVcxbE1TQXRJREU3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhScGJXVXhJQ29nZEdsdFpURWdLaUFvS0c5MlpYSnphRzl2ZENBcklERXBJQ29nZEdsdFpURWdLeUJ2ZG1WeWMyaHZiM1FwSUNzZ01UdGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQnlaWFpsY25ObE9pQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWldGelpVSmhZMnRKYms5aWFqdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVZMk11WldGelpVSmhZMnRQZFhRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUW1GamEwOTFkRTlpYWp0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUVOeVpXRjBaWE1nZEdobElHRmpkR2x2YmlCbFlYTnBibWNnYjJKcVpXTjBMaUE4WW5JZ0x6NWNjbHh1SUNvZ1FtVm5hVzVwYm1jZ2IyWWdZMk11UldGelpVSmhZMnRKYmk0Z1JXNWthVzVuSUc5bUlHTmpMa1ZoYzJWQ1lXTnJUM1YwTGx4eVhHNGdLaUFoSTNwb1hISmNiaUFxSU9XSW0rVzd1aUJsWVhObFFtRmphMGx1VDNWMElPZThrK1dLcU9XdnVlaXhvZU9BZ2p4aWNpQXZQbHh5WEc0Z0tpQkFiV1YwYUc5a0lHVmhjMlZDWVdOclNXNVBkWFJjY2x4dUlDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZWeHlYRzRnS2lCQVpYaGhiWEJzWlZ4eVhHNGdLaUF2THlCbGVHRnRjR3hsWEhKY2JpQXFJR0ZqZEdsdmJpNWxZWE5wYm1jb1kyTXVaV0Z6WlVKaFkydEpiazkxZENncEtUdGNjbHh1SUNvdlhISmNiblpoY2lCZlpXRnpaVUpoWTJ0SmJrOTFkRTlpYWlBOUlIdGNjbHh1SUNBZ0lHVmhjMmx1WnpvZ1puVnVZM1JwYjI0Z0tIUnBiV1V4S1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUc5MlpYSnphRzl2ZENBOUlERXVOekF4TlRnZ0tpQXhMalV5TlR0Y2NseHVJQ0FnSUNBZ0lDQjBhVzFsTVNBOUlIUnBiV1V4SUNvZ01qdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHbHRaVEVnUENBeEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb2RHbHRaVEVnS2lCMGFXMWxNU0FxSUNnb2IzWmxjbk5vYjI5MElDc2dNU2tnS2lCMGFXMWxNU0F0SUc5MlpYSnphRzl2ZENrcElDOGdNanRjY2x4dUlDQWdJQ0FnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbE1TQTlJSFJwYldVeElDMGdNanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlDaDBhVzFsTVNBcUlIUnBiV1V4SUNvZ0tDaHZkbVZ5YzJodmIzUWdLeUF4S1NBcUlIUnBiV1V4SUNzZ2IzWmxjbk5vYjI5MEtTa2dMeUF5SUNzZ01UdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5TEZ4eVhHNGdJQ0FnY21WMlpYSnpaVG9nWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyVmhjMlZDWVdOclNXNVBkWFJQWW1vN1hISmNiaUFnSUNCOVhISmNibjA3WEhKY2JtTmpMbVZoYzJWQ1lXTnJTVzVQZFhRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUW1GamEwbHVUM1YwVDJKcU8xeHlYRzU5TzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNWNjbHh1SUNvZ1EzSmxZWFJsY3lCMGFHVWdZV04wYVc5dUlHVmhjMmx1WnlCdlltcGxZM1F1SUR4aWNpQXZQbHh5WEc0Z0tpQkpiblJ2SUhSb1pTQTBJSEpsWm1WeVpXNWpaU0J3YjJsdWRDNGdQR0p5SUM4K1hISmNiaUFxSUZSdklHTmhiR04xYkdGMFpTQjBhR1VnYlc5MGFXOXVJR04xY25abExseHlYRzRnS2lBaEkzcG9YSEpjYmlBcUlPV0ltK1c3dWlCbFlYTmxRbVY2YVdWeVFXTjBhVzl1SU9lOGsrV0txT1d2dWVpeG9lT0FnanhpY2lBdlBseHlYRzRnS2lCRllYTmxRbVY2YVdWeVFXTjBhVzl1SU9hWXIrYU1pZWkwbmVXaG51V3dsT2Fic3VlNnYrZThrK1dLcU9lYWhPV0txT1M5bk9PQWdseHlYRzRnS2lCQWJXVjBhRzlrSUdWaGMyVkNaWHBwWlhKQlkzUnBiMjVjY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIQXdJRlJvWlNCbWFYSnpkQ0JpWlhwcFpYSWdjR0Z5WVcxbGRHVnlYSEpjYmlBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCd01TQlVhR1VnYzJWamIyNWtJR0psZW1sbGNpQndZWEpoYldWMFpYSmNjbHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhBeUlGUm9aU0IwYUdseVpDQmlaWHBwWlhJZ2NHRnlZVzFsZEdWeVhISmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J3TXlCVWFHVWdabTkxY25Sb0lHSmxlbWxsY2lCd1lYSmhiV1YwWlhKY2NseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDFjY2x4dUlDb2dRR1Y0WVcxd2JHVmNjbHh1SUNvZ0x5OGdaWGhoYlhCc1pWeHlYRzRnS2lCaFkzUnBiMjR1WldGemFXNW5LR05qTG1WaGMyVkNaWHBwWlhKQlkzUnBiMjRvTUM0MUxDQXdMalVzSURFdU1Dd2dNUzR3S1NrN1hISmNiaUFxTDF4eVhHNWpZeTVsWVhObFFtVjZhV1Z5UVdOMGFXOXVJRDBnWm5WdVkzUnBiMjRvWVN3Z1lpd2dZeXdnWkNsN1hISmNiaUFnSUNCeVpYUjFjbTRnZTF4eVhHNGdJQ0FnSUNBZ0lHVmhjMmx1WnpvZ1puVnVZM1JwYjI0b2RDbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlBb1RXRjBhQzV3YjNjb01TMTBMRE1wSUNvZ1lTQXJJRE1xZENvb1RXRjBhQzV3YjNjb01TMTBMRElwS1NwaUlDc2dNeXBOWVhSb0xuQnZkeWgwTERJcEtpZ3hMWFFwS21NZ0t5Qk5ZWFJvTG5CdmR5aDBMRE1wS21RcE8xeHlYRzRnSUNBZ0lDQWdJSDBzWEhKY2JpQWdJQ0FnSUNBZ2NtVjJaWEp6WlRvZ1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxtVmhjMlZDWlhwcFpYSkJZM1JwYjI0b1pDd2dZeXdnWWl3Z1lTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUVOeVpXRjBaWE1nZEdobElHRmpkR2x2YmlCbFlYTnBibWNnYjJKcVpXTjBMaUE4WW5JZ0x6NWNjbHh1SUNvZ1VtVm1aWEpsYm1ObElHVmhjMlZKYmxGMVlXUTZJRHhpY2lBdlBseHlYRzRnS2lCb2RIUndPaTh2ZDNkM0xucG9hV2gxTG1OdmJTOXhkV1Z6ZEdsdmJpOHlNVGs0TVRVM01TOWhibk4zWlhJdk1UazVNalUwTVRoY2NseHVJQ29nSVNONmFGeHlYRzRnS2lEbGlKdmx1N29nWldGelpWRjFZV1J5WVhScFkwRmpkR2x2YmtsdUlPZThrK1dLcU9XdnVlaXhvZU9BZ2p4aWNpQXZQbHh5WEc0Z0tpQkZZWE5sVVhWaFpISmhkR2xqU1c3bW1LL21qSW5rdW96bXJLSGxoNzNtbGJEbnZKUGxpcWpvdjV2bGhhWG5tb1RsaXFqa3ZaempnSUk4WW5JZ0x6NWNjbHh1SUNvZzVZK0M2SUNESUdWaGMyVkpibEYxWVdUdnZKcG9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ1FHMWxkR2h2WkNCbFlYTmxVWFZoWkhKaGRHbGpRV04wYVc5dVNXNWNjbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgxY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dMeTlsZUdGdGNHeGxYSEpjYmlBcUlHRmpkR2x2Ymk1bFlYTnBibWNvWTJNdVpXRnpaVkYxWVdSeVlYUnBZMEZqZEdsdmJrbHVLQ2twTzF4eVhHNGdLaTljY2x4dWRtRnlJRjlsWVhObFVYVmhaSEpoZEdsalFXTjBhVzl1U1c0Z1BTQjdYSEpjYmlBZ0lDQmxZWE5wYm1jNklHWjFibU4wYVc5dUtIUnBiV1VwZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCTllYUm9MbkJ2ZHloMGFXMWxMQ0F5S1R0Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCeVpYWmxjbk5sT2lCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZaV0Z6WlZGMVlXUnlZWFJwWTBGamRHbHZia2x1TzF4eVhHNGdJQ0FnZlZ4eVhHNTlPMXh5WEc1all5NWxZWE5sVVhWaFpISmhkR2xqUVdOMGFXOXVTVzRnUFNCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ2NtVjBkWEp1SUY5bFlYTmxVWFZoWkhKaGRHbGpRV04wYVc5dVNXNDdYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxibHh5WEc0Z0tpQkRjbVZoZEdWeklIUm9aU0JoWTNScGIyNGdaV0Z6YVc1bklHOWlhbVZqZEM0Z1BHSnlJQzgrWEhKY2JpQXFJRkpsWm1WeVpXNWpaU0JsWVhObFQzVjBVWFZoWkRvZ1BHSnlJQzgrWEhKY2JpQXFJR2gwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQWhJM3BvWEhKY2JpQXFJT1dJbStXN3VpQmxZWE5sVVhWaFpISmhkR2xqUVdOMGFXOXVUM1YwSU9lOGsrV0txT1d2dWVpeG9lT0FnanhpY2lBdlBseHlYRzRnS2lCRllYTmxVWFZoWkhKaGRHbGpUM1YwSU9hWXIrYU1pZVM2ak9hc29lV0h2ZWFWc09lOGsrV0txT21BZ09XSHV1ZWFoT1dLcU9TOW5PT0FnanhpY2lBdlBseHlYRzRnS2lEbGo0TG9nSU1nWldGelpVOTFkRkYxWVdUdnZKcG9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ1FHMWxkR2h2WkNCbFlYTmxVWFZoWkhKaGRHbGpRV04wYVc5dVQzVjBYSEpjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOVhISmNiaUFxSUVCbGVHRnRjR3hsWEhKY2JpQXFJQzh2WlhoaGJYQnNaVnh5WEc0Z0tpQmhZM1JwYjI0dVpXRnphVzVuS0dOakxtVmhjMlZSZFdGa2NtRjBhV05CWTNScGIyNVBkWFFvS1NrN1hISmNiaUFxTDF4eVhHNTJZWElnWDJWaGMyVlJkV0ZrY21GMGFXTkJZM1JwYjI1UGRYUWdQU0I3WEhKY2JpQWdJQ0JsWVhOcGJtYzZJR1oxYm1OMGFXOXVLSFJwYldVcGUxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQXRkR2x0WlNvb2RHbHRaUzB5S1R0Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCeVpYWmxjbk5sT2lCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZaV0Z6WlZGMVlXUnlZWFJwWTBGamRHbHZiazkxZER0Y2NseHVJQ0FnSUgxY2NseHVmVHRjY2x4dVkyTXVaV0Z6WlZGMVlXUnlZWFJwWTBGamRHbHZiazkxZENBOUlHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0lDQnlaWFIxY200Z1gyVmhjMlZSZFdGa2NtRjBhV05CWTNScGIyNVBkWFE3WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmx4eVhHNGdLaUJEY21WaGRHVnpJSFJvWlNCaFkzUnBiMjRnWldGemFXNW5JRzlpYW1WamRDNGdQR0p5SUM4K1hISmNiaUFxSUZKbFptVnlaVzVqWlNCbFlYTmxTVzVQZFhSUmRXRmtPaUE4WW5JZ0x6NWNjbHh1SUNvZ2FIUjBjRG92TDNkM2R5NTZhR2xvZFM1amIyMHZjWFZsYzNScGIyNHZNakU1T0RFMU56RXZZVzV6ZDJWeUx6RTVPVEkxTkRFNFhISmNiaUFxSUNFamVtaGNjbHh1SUNvZzVZaWI1YnU2SUdWaGMyVlJkV0ZrY21GMGFXTkJZM1JwYjI1SmJrOTFkQ0RudkpQbGlxamxyN25vc2FIamdJSThZbklnTHo1Y2NseHVJQ29nUldGelpWRjFZV1J5WVhScFkwbHVUM1YwSU9hWXIrYU1pZVM2ak9hc29lV0h2ZWFWc09lOGsrV0txT2kvbStXRnBlVzV0dW1BZ09XSHV1ZWFoT1dLcU9TOW5PT0FnanhpY2lBdlBseHlYRzRnS2lEbGo0TG9nSU1nWldGelpVbHVUM1YwVVhWaFpPKzhtbWgwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQkFiV1YwYUc5a0lHVmhjMlZSZFdGa2NtRjBhV05CWTNScGIyNUpiazkxZEZ4eVhHNGdLaUJBY21WMGRYSnVjeUI3VDJKcVpXTjBmVnh5WEc0Z0tpQkFaWGhoYlhCc1pWeHlYRzRnS2lBdkwyVjRZVzF3YkdWY2NseHVJQ29nWVdOMGFXOXVMbVZoYzJsdVp5aGpZeTVsWVhObFVYVmhaSEpoZEdsalFXTjBhVzl1U1c1UGRYUW9LU2s3WEhKY2JpQXFMMXh5WEc1MllYSWdYMlZoYzJWUmRXRmtjbUYwYVdOQlkzUnBiMjVKYms5MWRDQTlJSHRjY2x4dUlDQWdJR1ZoYzJsdVp6b2dablZ1WTNScGIyNG9kR2x0WlNsN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhKbGMzVnNkRlJwYldVZ1BTQjBhVzFsTzF4eVhHNGdJQ0FnSUNBZ0lIUnBiV1VnS2owZ01qdGNjbHh1SUNBZ0lDQWdJQ0JwWmloMGFXMWxJRHdnTVNsN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkRlJwYldVZ1BTQjBhVzFsSUNvZ2RHbHRaU0FxSURBdU5UdGNjbHh1SUNBZ0lDQWdJQ0I5Wld4elpYdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0xTMTBhVzFsTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhOMWJIUlVhVzFsSUQwZ0xUQXVOU0FxSUNnZ2RHbHRaU0FxSUNnZ2RHbHRaU0F0SURJZ0tTQXRJREVwWEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQnlaWE4xYkhSVWFXMWxPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJSEpsZG1WeWMyVTZJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5bFlYTmxVWFZoWkhKaGRHbGpRV04wYVc5dVNXNVBkWFE3WEhKY2JpQWdJQ0I5WEhKY2JuMDdYSEpjYm1OakxtVmhjMlZSZFdGa2NtRjBhV05CWTNScGIyNUpiazkxZENBOUlHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0lDQnlaWFIxY200Z1gyVmhjMlZSZFdGa2NtRjBhV05CWTNScGIyNUpiazkxZER0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUVOeVpXRjBaWE1nZEdobElHRmpkR2x2YmlCbFlYTnBibWNnYjJKcVpXTjBMaUE4WW5JZ0x6NWNjbHh1SUNvZ1VtVm1aWEpsYm1ObElHVmhjMlZKYm5SUmRXRnlkRG9nUEdKeUlDOCtYSEpjYmlBcUlHaDBkSEE2THk5M2QzY3VlbWhwYUhVdVkyOXRMM0YxWlhOMGFXOXVMekl4T1RneE5UY3hMMkZ1YzNkbGNpOHhPVGt5TlRReE9GeHlYRzRnS2lBaEkzcG9YSEpjYmlBcUlPV0ltK1c3dWlCbFlYTmxVWFZoY25ScFkwRmpkR2x2YmtsdUlPZThrK1dLcU9XdnVlaXhvZU9BZ2p4aWNpQXZQbHh5WEc0Z0tpQkZZWE5sVVhWaGNuUnBZMGx1SU9hWXIrYU1pZVdibSthc29lV0h2ZWFWc09lOGsrV0txT2kvbStXRnBlZWFoT1dLcU9TOW5PT0FnanhpY2lBdlBseHlYRzRnS2lEbGo0TG9nSU1nWldGelpVbHVkRkYxWVhKMDc3eWFhSFIwY0RvdkwzZDNkeTU2YUdsb2RTNWpiMjB2Y1hWbGMzUnBiMjR2TWpFNU9ERTFOekV2WVc1emQyVnlMekU1T1RJMU5ERTRYSEpjYmlBcUlFQnRaWFJvYjJRZ1pXRnpaVkYxWVhKMGFXTkJZM1JwYjI1SmJseHlYRzRnS2lCQWNtVjBkWEp1Y3lCN1QySnFaV04wZlZ4eVhHNGdLaUJBWlhoaGJYQnNaVnh5WEc0Z0tpQXZMMlY0WVcxd2JHVmNjbHh1SUNvZ1lXTjBhVzl1TG1WaGMybHVaeWhqWXk1bFlYTmxVWFZoY25ScFkwRmpkR2x2YmtsdUtDa3BPMXh5WEc0Z0tpOWNjbHh1ZG1GeUlGOWxZWE5sVVhWaGNuUnBZMEZqZEdsdmJrbHVJRDBnZTF4eVhHNGdJQ0FnWldGemFXNW5PaUJtZFc1amRHbHZiaWgwYVcxbEtYdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2x0WlNBcUlIUnBiV1VnS2lCMGFXMWxJQ29nZEdsdFpUdGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQnlaWFpsY25ObE9pQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJmWldGelpWRjFZWEowYVdOQlkzUnBiMjVKYmp0Y2NseHVJQ0FnSUgxY2NseHVmVHRjY2x4dVkyTXVaV0Z6WlZGMVlYSjBhV05CWTNScGIyNUpiaUE5SUdaMWJtTjBhVzl1S0NsN1hISmNiaUFnSUNCeVpYUjFjbTRnWDJWaGMyVlJkV0Z5ZEdsalFXTjBhVzl1U1c0N1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1Z6SUhSb1pTQmhZM1JwYjI0Z1pXRnphVzVuSUc5aWFtVmpkQzRnUEdKeUlDOCtYSEpjYmlBcUlGSmxabVZ5Wlc1alpTQmxZWE5sVDNWMFVYVmhjblE2SUR4aWNpQXZQbHh5WEc0Z0tpQm9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ0lTTjZhRnh5WEc0Z0tpRGxpSnZsdTdvZ1pXRnpaVkYxWVhKMGFXTkJZM1JwYjI1UGRYUWc1N3lUNVlxbzVhKzU2TEdoNDRDQ1BHSnlJQzgrWEhKY2JpQXFJRVZoYzJWUmRXRnlkR2xqVDNWMElPYVlyK2FNaWVXYm0rYXNvZVdIdmVhVnNPZThrK1dLcU9tQWdPV0h1dWVhaE9XS3FPUzluT09BZ2p4aWNpQXZQbHh5WEc0Z0tpRGxqNExvZ0lNZ1pXRnpaVTkxZEZGMVlYSjA3N3lhYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJRUJ0WlhSb2IyUWdaV0Z6WlZGMVlYSjBhV05CWTNScGIyNVBkWFJjY2x4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMWNjbHh1SUNvZ1FHVjRZVzF3YkdWY2NseHVJQ29nTHk5bGVHRnRjR3hsWEhKY2JpQXFJR0ZqZEdsdmJpNWxZWE5wYm1jb1kyTXVVWFZoY25ScFkwRmpkR2x2Yms5MWRDZ3BLVHRjY2x4dUlDb3ZYSEpjYm5aaGNpQmZaV0Z6WlZGMVlYSjBhV05CWTNScGIyNVBkWFFnUFNCN1hISmNiaUFnSUNCbFlYTnBibWM2SUdaMWJtTjBhVzl1S0hScGJXVXBlMXh5WEc0Z0lDQWdJQ0FnSUhScGJXVWdMVDBnTVR0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0xTaDBhVzFsSUNvZ2RHbHRaU0FxSUhScGJXVWdLaUIwYVcxbElDMGdNU2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNGdJQ0FnY21WMlpYSnpaVG9nWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyVmhjMlZSZFdGeWRHbGpRV04wYVc5dVQzVjBPMXh5WEc0Z0lDQWdmVnh5WEc1OU8xeHlYRzVqWXk1bFlYTmxVWFZoY25ScFkwRmpkR2x2Yms5MWRDQTlJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0J5WlhSMWNtNGdYMlZoYzJWUmRXRnlkR2xqUVdOMGFXOXVUM1YwTzF4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nUTNKbFlYUmxjeUIwYUdVZ1lXTjBhVzl1SUdWaGMybHVaeUJ2WW1wbFkzUXVJQ0E4WW5JZ0x6NWNjbHh1SUNvZ1VtVm1aWEpsYm1ObElHVmhjMlZKYms5MWRGRjFZWEowT2lBOFluSWdMejVjY2x4dUlDb2dhSFIwY0RvdkwzZDNkeTU2YUdsb2RTNWpiMjB2Y1hWbGMzUnBiMjR2TWpFNU9ERTFOekV2WVc1emQyVnlMekU1T1RJMU5ERTRYSEpjYmlBcUlDRWplbWhjY2x4dUlDb2c1WWliNWJ1NklHVmhjMlZSZFdGeWRHbGpRV04wYVc5dVNXNVBkWFFnNTd5VDVZcW81YSs1NkxHaDQ0Q0NQR0p5SUM4K1hISmNiaUFxSUVWaGMyVlJkV0Z5ZEdsalNXNVBkWFFnNXBpdjVveUo1WnViNXF5aDVZZTk1cFd3NTd5VDVZcW82TCtiNVlXbDVibTI2WUNBNVllNjU1cUU1WXFvNUwyYzQ0Q0NQR0p5SUM4K1hISmNiaUFxSU9XUGd1aUFneUJsWVhObFNXNVBkWFJSZFdGeWRPKzhtbWgwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQkFiV1YwYUc5a0lHVmhjMlZSZFdGeWRHbGpRV04wYVc5dVNXNVBkWFJjY2x4dUlDb2dRSEpsZEhWeWJuTWdlMDlpYW1WamRIMWNjbHh1SUNvdlhISmNiblpoY2lCZlpXRnpaVkYxWVhKMGFXTkJZM1JwYjI1SmJrOTFkQ0E5SUh0Y2NseHVJQ0FnSUdWaGMybHVaem9nWm5WdVkzUnBiMjRvZEdsdFpTbDdYSEpjYmlBZ0lDQWdJQ0FnZEdsdFpTQTlJSFJwYldVcU1qdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHbHRaU0E4SURFcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUF3TGpVZ0tpQjBhVzFsSUNvZ2RHbHRaU0FxSUhScGJXVWdLaUIwYVcxbE8xeHlYRzRnSUNBZ0lDQWdJSFJwYldVZ0xUMGdNanRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTFRBdU5TQXFJQ2gwYVcxbElDb2dkR2x0WlNBcUlIUnBiV1VnS2lCMGFXMWxJQzBnTWlrN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ2NtVjJaWEp6WlRvZ1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMlZoYzJWUmRXRnlkR2xqUVdOMGFXOXVTVzVQZFhRN1hISmNiaUFnSUNCOVhISmNibjA3WEhKY2JtTmpMbVZoYzJWUmRXRnlkR2xqUVdOMGFXOXVTVzVQZFhRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sVVhWaGNuUnBZMEZqZEdsdmJrbHVUM1YwTzF4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nUTNKbFlYUmxjeUIwYUdVZ1lXTjBhVzl1SUdWaGMybHVaeUJ2WW1wbFkzUXVJRHhpY2lBdlBseHlYRzRnS2lCU1pXWmxjbVZ1WTJVZ1pXRnpaVWx1VVhWcGJuUTZJRHhpY2lBdlBseHlYRzRnS2lCb2RIUndPaTh2ZDNkM0xucG9hV2gxTG1OdmJTOXhkV1Z6ZEdsdmJpOHlNVGs0TVRVM01TOWhibk4zWlhJdk1UazVNalUwTVRoY2NseHVJQ29nSVNONmFGeHlYRzRnS2lEbGlKdmx1N29nWldGelpWRjFhVzUwYVdOQlkzUnBiMjVKYmlEbnZKUGxpcWpscjdub3NhSGpnSUk4WW5JZ0x6NWNjbHh1SUNvZ1JXRnpaVkYxYVc1MGFXTkpiaURtbUsvbWpJbmt1cFRtcktIbGg3M21sYkRudkpQbGlxam92NXZubW9UbGlxamt2WnpqZ0lJOFluSWdMejVjY2x4dUlDb2c1WStDNklDRElHVmhjMlZKYmxGMWFXNTA3N3lhYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJRUJ0WlhSb2IyUWdaV0Z6WlZGMWFXNTBhV05CWTNScGIyNUpibHh5WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZWeHlYRzRnS2lCQVpYaGhiWEJzWlZ4eVhHNGdLaUF2TDJWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sVVhWcGJuUnBZMEZqZEdsdmJrbHVLQ2twTzF4eVhHNGdLaTljY2x4dWRtRnlJRjlsWVhObFVYVnBiblJwWTBGamRHbHZia2x1SUQwZ2UxeHlYRzRnSUNBZ1pXRnphVzVuT2lCbWRXNWpkR2x2YmloMGFXMWxLWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdsdFpTQXFJSFJwYldVZ0tpQjBhVzFsSUNvZ2RHbHRaU0FxSUhScGJXVTdYSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdjbVYyWlhKelpUb2dablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJWaGMyVlJkV2x1ZEdsalFXTjBhVzl1U1c0N1hISmNiaUFnSUNCOVhISmNibjA3WEhKY2JtTmpMbVZoYzJWUmRXbHVkR2xqUVdOMGFXOXVTVzRnUFNCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ2NtVjBkWEp1SUY5bFlYTmxVWFZwYm5ScFkwRmpkR2x2YmtsdU8xeHlYRzU5TzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNWNjbHh1SUNvZ1EzSmxZWFJsY3lCMGFHVWdZV04wYVc5dUlHVmhjMmx1WnlCdlltcGxZM1F1SUR4aWNpQXZQbHh5WEc0Z0tpQlNaV1psY21WdVkyVWdaV0Z6WlU5MWRGRjFhVzUwT2lBOFluSWdMejVjY2x4dUlDb2dhSFIwY0RvdkwzZDNkeTU2YUdsb2RTNWpiMjB2Y1hWbGMzUnBiMjR2TWpFNU9ERTFOekV2WVc1emQyVnlMekU1T1RJMU5ERTRYSEpjYmlBcUlDRWplbWhjY2x4dUlDb2c1WWliNWJ1NklHVmhjMlZSZFdsdWRHbGpRV04wYVc5dVQzVjBJT2U4aytXS3FPV3Z1ZWl4b2VPQWdqeGljaUF2UGx4eVhHNGdLaUJGWVhObFVYVnBiblJwWTA5MWRDRG1tSy9taklua3VwVG1yS0hsaDczbWxiRG52SlBsaXFqcGdJRGxoN3JubW9UbGlxamt2WnhjY2x4dUlDb2c1WStDNklDRElHVmhjMlZQZFhSUmRXbHVkTys4bW1oMGRIQTZMeTkzZDNjdWVtaHBhSFV1WTI5dEwzRjFaWE4wYVc5dUx6SXhPVGd4TlRjeEwyRnVjM2RsY2k4eE9Ua3lOVFF4T0Z4eVhHNGdLaUJBYldWMGFHOWtJR1ZoYzJWUmRXbHVkR2xqUVdOMGFXOXVUM1YwWEhKY2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlYSEpjYmlBcUlFQmxlR0Z0Y0d4bFhISmNiaUFxSUM4dlpYaGhiWEJzWlZ4eVhHNGdLaUJoWTNScGIyNHVaV0Z6YVc1bktHTmpMbVZoYzJWUmRXRmtjbUYwYVdOQlkzUnBiMjVQZFhRb0tTazdYSEpjYmlBcUwxeHlYRzUyWVhJZ1gyVmhjMlZSZFdsdWRHbGpRV04wYVc5dVQzVjBJRDBnZTF4eVhHNGdJQ0FnWldGemFXNW5PaUJtZFc1amRHbHZiaWgwYVcxbEtYdGNjbHh1SUNBZ0lDQWdJQ0IwYVcxbElDMDlNVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hScGJXVWdLaUIwYVcxbElDb2dkR2x0WlNBcUlIUnBiV1VnS2lCMGFXMWxJQ3NnTVNrN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ2NtVjJaWEp6WlRvZ1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdYMlZoYzJWUmRXbHVkR2xqUVdOMGFXOXVUM1YwTzF4eVhHNGdJQ0FnZlZ4eVhHNTlPMXh5WEc1all5NWxZWE5sVVhWcGJuUnBZMEZqZEdsdmJrOTFkQ0E5SUdaMWJtTjBhVzl1S0NsN1hISmNiaUFnSUNCeVpYUjFjbTRnWDJWaGMyVlJkV2x1ZEdsalFXTjBhVzl1VDNWME8xeHlYRzU5TzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNWNjbHh1SUNvZ1EzSmxZWFJsY3lCMGFHVWdZV04wYVc5dUlHVmhjMmx1WnlCdlltcGxZM1F1SUR4aWNpQXZQbHh5WEc0Z0tpQlNaV1psY21WdVkyVWdaV0Z6WlVsdVQzVjBVWFZwYm5RNklEeGljaUF2UGx4eVhHNGdLaUJvZEhSd09pOHZkM2QzTG5wb2FXaDFMbU52YlM5eGRXVnpkR2x2Ymk4eU1UazRNVFUzTVM5aGJuTjNaWEl2TVRrNU1qVTBNVGhjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsaUp2bHU3b2daV0Z6WlZGMWFXNTBhV05CWTNScGIyNUpiazkxZENEbnZKUGxpcWpscjdub3NhSGpnSUk4WW5JZ0x6NWNjbHh1SUNvZ1JXRnpaVkYxYVc1MGFXTkpiazkxZE9hWXIrYU1pZVM2bE9hc29lV0h2ZWFWc09lOGsrV0txT2kvbStXRnBlVzV0dW1BZ09XSHV1ZWFoT1dLcU9TOW5PT0FnanhpY2lBdlBseHlYRzRnS2lEbGo0TG9nSU1nWldGelpVbHVUM1YwVVhWcGJuVHZ2SnBvZEhSd09pOHZkM2QzTG5wb2FXaDFMbU52YlM5eGRXVnpkR2x2Ymk4eU1UazRNVFUzTVM5aGJuTjNaWEl2TVRrNU1qVTBNVGhjY2x4dUlDb2dRRzFsZEdodlpDQmxZWE5sVVhWcGJuUnBZMEZqZEdsdmJrbHVUM1YwWEhKY2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlYSEpjYmlBcUlFQmxlR0Z0Y0d4bFhISmNiaUFxSUM4dlpYaGhiWEJzWlZ4eVhHNGdLaUJoWTNScGIyNHVaV0Z6YVc1bktHTmpMbVZoYzJWUmRXbHVkR2xqUVdOMGFXOXVTVzVQZFhRb0tTazdYSEpjYmlBcUwxeHlYRzUyWVhJZ1gyVmhjMlZSZFdsdWRHbGpRV04wYVc5dVNXNVBkWFFnUFNCN1hISmNiaUFnSUNCbFlYTnBibWM2SUdaMWJtTjBhVzl1S0hScGJXVXBlMXh5WEc0Z0lDQWdJQ0FnSUhScGJXVWdQU0IwYVcxbEtqSTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnBiV1VnUENBeEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTUM0MUlDb2dkR2x0WlNBcUlIUnBiV1VnS2lCMGFXMWxJQ29nZEdsdFpTQXFJSFJwYldVN1hISmNiaUFnSUNBZ0lDQWdkR2x0WlNBdFBTQXlPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUF3TGpVZ0tpQW9kR2x0WlNBcUlIUnBiV1VnS2lCMGFXMWxJQ29nZEdsdFpTQXFJSFJwYldVZ0t5QXlLVHRjY2x4dUlDQWdJSDBzWEhKY2JpQWdJQ0J5WlhabGNuTmxPaUJtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZlpXRnpaVkYxYVc1MGFXTkJZM1JwYjI1SmJrOTFkRHRjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1WTJNdVpXRnpaVkYxYVc1MGFXTkJZM1JwYjI1SmJrOTFkQ0E5SUdaMWJtTjBhVzl1S0NsN1hISmNiaUFnSUNCeVpYUjFjbTRnWDJWaGMyVlJkV2x1ZEdsalFXTjBhVzl1U1c1UGRYUTdYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxibHh5WEc0Z0tpQkRjbVZoZEdWeklIUm9aU0JoWTNScGIyNGdaV0Z6YVc1bklHOWlhbVZqZEM0Z1BHSnlJQzgrWEhKY2JpQXFJRkpsWm1WeVpXNWpaU0JsWVhObFNXNURhWEpqT2lBOFluSWdMejVjY2x4dUlDb2dhSFIwY0RvdkwzZDNkeTU2YUdsb2RTNWpiMjB2Y1hWbGMzUnBiMjR2TWpFNU9ERTFOekV2WVc1emQyVnlMekU1T1RJMU5ERTRYSEpjYmlBcUlDRWplbWhjY2x4dUlDb2c1WWliNWJ1NklHVmhjMlZEYVhKamJHVkJZM1JwYjI1SmJpRG52SlBsaXFqbHI3bm9zYUhqZ0lJOFluSWdMejVjY2x4dUlDb2dSV0Z6WlVOcGNtTnNaVWx1NXBpdjVveUo1WnlHNWIyaTVwdXk1N3EvNTd5VDVZcW82TCtiNVlXbDU1cUU1WXFvNUwyYzQ0Q0NQR0p5SUM4K1hISmNiaUFxSU9XUGd1aUFneUJsWVhObFNXNURhWEpqNzd5YWFIUjBjRG92TDNkM2R5NTZhR2xvZFM1amIyMHZjWFZsYzNScGIyNHZNakU1T0RFMU56RXZZVzV6ZDJWeUx6RTVPVEkxTkRFNFhISmNiaUFxSUVCdFpYUm9iMlFnWldGelpVTnBjbU5zWlVGamRHbHZia2x1WEhKY2JpQXFJRUJ5WlhSMWNtNXpJSHRQWW1wbFkzUjlYSEpjYmlBcUlFQmxlR0Z0Y0d4bFhISmNiaUFxSUM4dlpYaGhiWEJzWlZ4eVhHNGdLaUJoWTNScGIyNHVaV0Z6YVc1bktHTmpMbVZoYzJWRGFYSmpiR1ZCWTNScGIyNUpiaWdwS1R0Y2NseHVJQ292WEhKY2JuWmhjaUJmWldGelpVTnBjbU5zWlVGamRHbHZia2x1SUQwZ2UxeHlYRzRnSUNBZ1pXRnphVzVuT2lCbWRXNWpkR2x2YmloMGFXMWxLWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnTFRFZ0tpQW9UV0YwYUM1emNYSjBLREVnTFNCMGFXMWxJQ29nZEdsdFpTa2dMU0F4S1R0Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCeVpYWmxjbk5sT2lCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQmZaV0Z6WlVOcGNtTnNaVUZqZEdsdmJrbHVPMXh5WEc0Z0lDQWdmVnh5WEc1OU8xeHlYRzVqWXk1bFlYTmxRMmx5WTJ4bFFXTjBhVzl1U1c0Z1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUTJseVkyeGxRV04wYVc5dVNXNDdYSEpjYm4wN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxibHh5WEc0Z0tpQkRjbVZoZEdWeklIUm9aU0JoWTNScGIyNGdaV0Z6YVc1bklHOWlhbVZqZEM0Z1BHSnlJQzgrWEhKY2JpQXFJRkpsWm1WeVpXNWpaU0JsWVhObFQzVjBRMmx5WXpvZ1BHSnlJQzgrWEhKY2JpQXFJR2gwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQWhJM3BvWEhKY2JpQXFJT1dJbStXN3VpQmxZWE5sUTJseVkyeGxRV04wYVc5dVQzVjBJT2U4aytXS3FPV3Z1ZWl4b2VPQWdqeGljaUF2UGx4eVhHNGdLaUJGWVhObFEybHlZMnhsVDNWMDVwaXY1b3lKNVp5RzViMmk1cHV5NTdxLzU3eVQ1WXFvNllDQTVZZTY1NXFFNVlxbzVMMmM0NENDUEdKeUlDOCtYSEpjYmlBcUlPV1BndWlBZ3lCbFlYTmxUM1YwUTJseVkrKzhtbWgwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQkFiV1YwYUc5a0lHVmhjMlZEYVhKamJHVkJZM1JwYjI1UGRYUmNjbHh1SUNvZ1FISmxkSFZ5Ym5NZ2UwOWlhbVZqZEgxY2NseHVJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDb2dMeTlsZUdGdGNHeGxYSEpjYmlBcUlHRmpkR2x2Ym1WaGMybHVaeWhqWXk1bFlYTmxRMmx5WTJ4bFFXTjBhVzl1VDNWMEtDa3BPMXh5WEc0Z0tpOWNjbHh1ZG1GeUlGOWxZWE5sUTJseVkyeGxRV04wYVc5dVQzVjBJRDBnZTF4eVhHNGdJQ0FnWldGemFXNW5PaUJtZFc1amRHbHZiaWgwYVcxbEtYdGNjbHh1SUNBZ0lDQWdJQ0IwYVcxbElEMGdkR2x0WlNBdElERTdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRTFoZEdndWMzRnlkQ2d4SUMwZ2RHbHRaU0FxSUhScGJXVXBPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJSEpsZG1WeWMyVTZJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5bFlYTmxRMmx5WTJ4bFFXTjBhVzl1VDNWME8xeHlYRzRnSUNBZ2ZWeHlYRzU5TzF4eVhHNWpZeTVsWVhObFEybHlZMnhsUVdOMGFXOXVUM1YwSUQwZ1puVnVZM1JwYjI0b0tYdGNjbHh1SUNBZ0lISmxkSFZ5YmlCZlpXRnpaVU5wY21Oc1pVRmpkR2x2Yms5MWREdGNjbHh1ZlR0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lBaEkyVnVYSEpjYmlBcUlFTnlaV0YwWlhNZ2RHaGxJR0ZqZEdsdmJpQmxZWE5wYm1jZ2IySnFaV04wTGlBOFluSWdMejVjY2x4dUlDb2dVbVZtWlhKbGJtTmxJR1ZoYzJWSmJrOTFkRU5wY21NNklEeGljaUF2UGx4eVhHNGdLaUJvZEhSd09pOHZkM2QzTG5wb2FXaDFMbU52YlM5eGRXVnpkR2x2Ymk4eU1UazRNVFUzTVM5aGJuTjNaWEl2TVRrNU1qVTBNVGhjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsaUp2bHU3b2daV0Z6WlVOcGNtTnNaVUZqZEdsdmJrbHVUM1YwSU9lOGsrV0txT1d2dWVpeG9lT0FnanhpY2lBdlBseHlYRzRnS2lCRllYTmxRMmx5WTJ4bFNXNVBkWFFnNXBpdjVveUo1WnlHNWIyaTVwdXk1N3EvNTd5VDVZcW82TCtiNVlXbDVibTI2WUNBNVllNjU1cUU1WXFvNUwyYzQ0Q0NQR0p5SUM4K1hISmNiaUFxSU9XUGd1aUFneUJsWVhObFNXNVBkWFJEYVhKajc3eWFhSFIwY0RvdkwzZDNkeTU2YUdsb2RTNWpiMjB2Y1hWbGMzUnBiMjR2TWpFNU9ERTFOekV2WVc1emQyVnlMekU1T1RJMU5ERTRYSEpjYmlBcUlFQnRaWFJvYjJRZ1pXRnpaVU5wY21Oc1pVRmpkR2x2YmtsdVQzVjBYSEpjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOVhISmNiaUFxSUVCbGVHRnRjR3hsWEhKY2JpQXFJQzh2WlhoaGJYQnNaVnh5WEc0Z0tpQmhZM1JwYjI0dVpXRnphVzVuS0dOakxtVmhjMlZEYVhKamJHVkJZM1JwYjI1SmJrOTFkQ2dwS1R0Y2NseHVJQ292WEhKY2JuWmhjaUJmWldGelpVTnBjbU5zWlVGamRHbHZia2x1VDNWMElEMGdlMXh5WEc0Z0lDQWdaV0Z6YVc1bk9pQm1kVzVqZEdsdmJpaDBhVzFsS1h0Y2NseHVJQ0FnSUNBZ0lDQjBhVzFsSUQwZ2RHbHRaU0FxSURJN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hScGJXVWdQQ0F4S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdMVEF1TlNBcUlDaE5ZWFJvTG5OeGNuUW9NU0F0SUhScGJXVWdLaUIwYVcxbEtTQXRJREVwTzF4eVhHNGdJQ0FnSUNBZ0lIUnBiV1VnTFQwZ01qdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdNQzQxSUNvZ0tFMWhkR2d1YzNGeWRDZ3hJQzBnZEdsdFpTQXFJSFJwYldVcElDc2dNU2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNGdJQ0FnY21WMlpYSnpaVG9nWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1gyVmhjMlZEYVhKamJHVkJZM1JwYjI1SmJrOTFkRHRjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1WTJNdVpXRnpaVU5wY21Oc1pVRmpkR2x2YmtsdVQzVjBJRDBnWm5WdVkzUnBiMjRvS1h0Y2NseHVJQ0FnSUhKbGRIVnliaUJmWldGelpVTnBjbU5zWlVGamRHbHZia2x1VDNWME8xeHlYRzU5TzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNWNjbHh1SUNvZ1EzSmxZWFJsY3lCMGFHVWdZV04wYVc5dUlHVmhjMmx1WnlCdlltcGxZM1F1SUR4aWNpQXZQbHh5WEc0Z0tpQlNaV1psY21WdVkyVWdaV0Z6WlVsdVEzVmlhV002SUR4aWNpQXZQbHh5WEc0Z0tpQm9kSFJ3T2k4dmQzZDNMbnBvYVdoMUxtTnZiUzl4ZFdWemRHbHZiaTh5TVRrNE1UVTNNUzloYm5OM1pYSXZNVGs1TWpVME1UaGNjbHh1SUNvZ0lTTjZhRnh5WEc0Z0tpRGxpSnZsdTdvZ1pXRnpaVU4xWW1salFXTjBhVzl1U1c0ZzU3eVQ1WXFvNWErNTZMR2g0NENDUEdKeUlDOCtYSEpjYmlBcUlFVmhjMlZEZFdKcFkwbHVJT2FZcithTWllUzRpZWFzb2VXSHZlYVZzT2U4aytXS3FPaS9tK1dGcGVlYWhPV0txT1M5bk9PQWdqeGljaUF2UGx4eVhHNGdLaURsajRMb2dJTWdaV0Z6WlVsdVEzVmlhV1B2dkpwb2RIUndPaTh2ZDNkM0xucG9hV2gxTG1OdmJTOXhkV1Z6ZEdsdmJpOHlNVGs0TVRVM01TOWhibk4zWlhJdk1UazVNalUwTVRoY2NseHVJQ29nUUcxbGRHaHZaQ0JsWVhObFEzVmlhV05CWTNScGIyNUpibHh5WEc0Z0tpQkFjbVYwZFhKdWN5QjdUMkpxWldOMGZWeHlYRzRnS2lCQVpYaGhiWEJzWlZ4eVhHNGdLaUF2TDJWNFlXMXdiR1ZjY2x4dUlDb2dZV04wYVc5dUxtVmhjMmx1Wnloall5NWxZWE5sUTNWaWFXTkJZM1JwYjI1SmJpZ3BLVHRjY2x4dUlDb3ZYSEpjYm5aaGNpQmZaV0Z6WlVOMVltbGpRV04wYVc5dVNXNGdQU0I3WEhKY2JpQWdJQ0JsWVhOcGJtYzZJR1oxYm1OMGFXOXVLSFJwYldVcGUxeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhVzFsSUNvZ2RHbHRaU0FxSUhScGJXVTdYSEpjYmlBZ0lDQjlMRnh5WEc0Z0lDQWdjbVYyWlhKelpUb2dablZ1WTNScGIyNG9LWHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnWDJWaGMyVkRkV0pwWTBGamRHbHZia2x1TzF4eVhHNGdJQ0FnZlZ4eVhHNTlPMXh5WEc1all5NWxZWE5sUTNWaWFXTkJZM1JwYjI1SmJpQTlJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0J5WlhSMWNtNGdYMlZoYzJWRGRXSnBZMEZqZEdsdmJrbHVPMXh5WEc1OU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlDRWpaVzVjY2x4dUlDb2dRM0psWVhSbGN5QjBhR1VnWVdOMGFXOXVJR1ZoYzJsdVp5QnZZbXBsWTNRdUlEeGljaUF2UGx4eVhHNGdLaUJTWldabGNtVnVZMlVnWldGelpVOTFkRU4xWW1sak9pQThZbklnTHo1Y2NseHVJQ29nYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJQ0VqZW1oY2NseHVJQ29nNVlpYjVidTZJR1ZoYzJWRGRXSnBZMEZqZEdsdmJrOTFkQ0RudkpQbGlxamxyN25vc2FIamdJSThZbklnTHo1Y2NseHVJQ29nUldGelpVTjFZbWxqVDNWMElPYVlyK2FNaWVTNGllYXNvZVdIdmVhVnNPZThrK1dLcU9tQWdPV0h1dWVhaE9XS3FPUzluT09BZ2p4aWNpQXZQbHh5WEc0Z0tpRGxqNExvZ0lNZ1pXRnpaVTkxZEVOMVltbGo3N3lhYUhSMGNEb3ZMM2QzZHk1NmFHbG9kUzVqYjIwdmNYVmxjM1JwYjI0dk1qRTVPREUxTnpFdllXNXpkMlZ5THpFNU9USTFOREU0WEhKY2JpQXFJRUJ0WlhSb2IyUWdaV0Z6WlVOMVltbGpRV04wYVc5dVQzVjBYSEpjYmlBcUlFQnlaWFIxY201eklIdFBZbXBsWTNSOVhISmNiaUFxSUVCbGVHRnRjR3hsWEhKY2JpQXFJQzh2WlhoaGJYQnNaVnh5WEc0Z0tpQmhZM1JwYjI0dVpXRnphVzVuS0dOakxtVmhjMlZEZFdKcFkwRmpkR2x2Yms5MWRDZ3BLVHRjY2x4dUlDb3ZYSEpjYm5aaGNpQmZaV0Z6WlVOMVltbGpRV04wYVc5dVQzVjBJRDBnZTF4eVhHNGdJQ0FnWldGemFXNW5PaUJtZFc1amRHbHZiaWgwYVcxbEtYdGNjbHh1SUNBZ0lDQWdJQ0IwYVcxbElDMDlJREU3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUNoMGFXMWxJQ29nZEdsdFpTQXFJSFJwYldVZ0t5QXhLVHRjY2x4dUlDQWdJSDBzWEhKY2JpQWdJQ0J5WlhabGNuTmxPaUJtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCZlpXRnpaVU4xWW1salFXTjBhVzl1VDNWME8xeHlYRzRnSUNBZ2ZWeHlYRzU5TzF4eVhHNWpZeTVsWVhObFEzVmlhV05CWTNScGIyNVBkWFFnUFNCbWRXNWpkR2x2YmlncGUxeHlYRzRnSUNBZ2NtVjBkWEp1SUY5bFlYTmxRM1ZpYVdOQlkzUnBiMjVQZFhRN1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1Z6SUhSb1pTQmhZM1JwYjI0Z1pXRnphVzVuSUc5aWFtVmpkQzRnUEdKeUlDOCtYSEpjYmlBcUlGSmxabVZ5Wlc1alpTQmxZWE5sU1c1UGRYUkRkV0pwWXpvZ1BHSnlJQzgrWEhKY2JpQXFJR2gwZEhBNkx5OTNkM2N1ZW1ocGFIVXVZMjl0TDNGMVpYTjBhVzl1THpJeE9UZ3hOVGN4TDJGdWMzZGxjaTh4T1RreU5UUXhPRnh5WEc0Z0tpQWhJM3BvWEhKY2JpQXFJT1dJbStXN3VpQmxZWE5sUTNWaWFXTkJZM1JwYjI1SmJrOTFkQ0RudkpQbGlxamxyN25vc2FIamdJSThZbklnTHo1Y2NseHVJQ29nUldGelpVTjFZbWxqU1c1UGRYVG1tSy9taklua3VJbm1yS0hsaDczbWxiRG52SlBsaXFqb3Y1dmxoYVhsdWJicGdJRGxoN3JubW9UbGlxamt2WnpqZ0lJOFluSWdMejVjY2x4dUlDb2c1WStDNklDRElHVmhjMlZKYms5MWRFTjFZbWxqNzd5YWFIUjBjRG92TDNkM2R5NTZhR2xvZFM1amIyMHZjWFZsYzNScGIyNHZNakU1T0RFMU56RXZZVzV6ZDJWeUx6RTVPVEkxTkRFNFhISmNiaUFxSUVCdFpYUm9iMlFnWldGelpVTjFZbWxqUVdOMGFXOXVTVzVQZFhSY2NseHVJQ29nUUhKbGRIVnlibk1nZTA5aWFtVmpkSDFjY2x4dUlDb3ZYSEpjYm5aaGNpQmZaV0Z6WlVOMVltbGpRV04wYVc5dVNXNVBkWFFnUFNCN1hISmNiaUFnSUNCbFlYTnBibWM2SUdaMWJtTjBhVzl1S0hScGJXVXBlMXh5WEc0Z0lDQWdJQ0FnSUhScGJXVWdQU0IwYVcxbEtqSTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUnBiV1VnUENBeEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnTUM0MUlDb2dkR2x0WlNBcUlIUnBiV1VnS2lCMGFXMWxPMXh5WEc0Z0lDQWdJQ0FnSUhScGJXVWdMVDBnTWp0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z01DNDFJQ29nS0hScGJXVWdLaUIwYVcxbElDb2dkR2x0WlNBcklESXBPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJSEpsZG1WeWMyVTZJR1oxYm1OMGFXOXVLQ2w3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUY5bFlYTmxRM1ZpYVdOQlkzUnBiMjVKYms5MWREdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVZMk11WldGelpVTjFZbWxqUVdOMGFXOXVTVzVQZFhRZ1BTQm1kVzVqZEdsdmJpZ3BlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOWxZWE5sUTNWaWFXTkJZM1JwYjI1SmJrOTFkRHRjY2x4dWZUdGNjbHh1WEhKY2JpSmRmUT09Il19