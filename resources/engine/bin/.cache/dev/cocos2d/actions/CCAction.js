(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCAction.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('../core/platform/CCClass');
        var misc = require('../core/utils/misc');
        cc.Action = cc.Class({
            name: 'cc.Action',
            ctor: function ctor() {
                this.originalTarget = null;
                this.target = null;
                this.tag = cc.Action.TAG_INVALID;
            },
            clone: function clone() {
                var action = new cc.Action();
                action.originalTarget = null;
                action.target = null;
                action.tag = this.tag;
                return action;
            },
            isDone: function isDone() {
                return true;
            },
            startWithTarget: function startWithTarget(target) {
                this.originalTarget = target;
                this.target = target;
            },
            stop: function stop() {
                this.target = null;
            },
            step: function step(dt) {
                cc.logID(1006);
            },
            update: function update(dt) {
                cc.logID(1007);
            },
            getTarget: function getTarget() {
                return this.target;
            },
            setTarget: function setTarget(target) {
                this.target = target;
            },
            getOriginalTarget: function getOriginalTarget() {
                return this.originalTarget;
            },
            setOriginalTarget: function setOriginalTarget(originalTarget) {
                this.originalTarget = originalTarget;
            },
            getTag: function getTag() {
                return this.tag;
            },
            setTag: function setTag(tag) {
                this.tag = tag;
            },
            retain: function retain() {
            },
            release: function release() {
            }
        });
        cc.Action.TAG_INVALID = -1;
        cc.FiniteTimeAction = cc.Class({
            name: 'cc.FiniteTimeAction',
            extends: cc.Action,
            ctor: function ctor() {
                this._duration = 0;
            },
            getDuration: function getDuration() {
                return this._duration * (this._timesForRepeat || 1);
            },
            setDuration: function setDuration(duration) {
                this._duration = duration;
            },
            reverse: function reverse() {
                cc.logID(1008);
                return null;
            },
            clone: function clone() {
                return new cc.FiniteTimeAction();
            }
        });
        cc.Speed = cc.Class({
            name: 'cc.Speed',
            extends: cc.Action,
            ctor: function ctor(action, speed) {
                this._speed = 0;
                this._innerAction = null;
                action && this.initWithAction(action, speed);
            },
            getSpeed: function getSpeed() {
                return this._speed;
            },
            setSpeed: function setSpeed(speed) {
                this._speed = speed;
            },
            initWithAction: function initWithAction(action, speed) {
                if (!action) {
                    cc.errorID(1021);
                    return false;
                }
                this._innerAction = action;
                this._speed = speed;
                return true;
            },
            clone: function clone() {
                var action = new cc.Speed();
                action.initWithAction(this._innerAction.clone(), this._speed);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.Action.prototype.startWithTarget.call(this, target);
                this._innerAction.startWithTarget(target);
            },
            stop: function stop() {
                this._innerAction.stop();
                cc.Action.prototype.stop.call(this);
            },
            step: function step(dt) {
                this._innerAction.step(dt * this._speed);
            },
            isDone: function isDone() {
                return this._innerAction.isDone();
            },
            reverse: function reverse() {
                return new cc.Speed(this._innerAction.reverse(), this._speed);
            },
            setInnerAction: function setInnerAction(action) {
                if (this._innerAction !== action) {
                    this._innerAction = action;
                }
            },
            getInnerAction: function getInnerAction() {
                return this._innerAction;
            }
        });
        cc.speed = function (action, speed) {
            return new cc.Speed(action, speed);
        };
        cc.Follow = cc.Class({
            name: 'cc.Follow',
            extends: cc.Action,
            ctor: function ctor(followedNode, rect) {
                this._followedNode = null;
                this._boundarySet = false;
                this._boundaryFullyCovered = false;
                this._halfScreenSize = null;
                this._fullScreenSize = null;
                this.leftBoundary = 0;
                this.rightBoundary = 0;
                this.topBoundary = 0;
                this.bottomBoundary = 0;
                this._worldRect = cc.rect(0, 0, 0, 0);
                if (followedNode)
                    rect ? this.initWithTarget(followedNode, rect) : this.initWithTarget(followedNode);
            },
            clone: function clone() {
                var action = new cc.Follow();
                var locRect = this._worldRect;
                var rect = new cc.Rect(locRect.x, locRect.y, locRect.width, locRect.height);
                action.initWithTarget(this._followedNode, rect);
                return action;
            },
            isBoundarySet: function isBoundarySet() {
                return this._boundarySet;
            },
            setBoudarySet: function setBoudarySet(value) {
                this._boundarySet = value;
            },
            initWithTarget: function initWithTarget(followedNode, rect) {
                if (!followedNode) {
                    cc.errorID(1022);
                    return false;
                }
                var _this = this;
                rect = rect || cc.rect(0, 0, 0, 0);
                _this._followedNode = followedNode;
                _this._worldRect = rect;
                _this._boundarySet = !(rect.width === 0 && rect.height === 0);
                _this._boundaryFullyCovered = false;
                var winSize = cc.winSize;
                _this._fullScreenSize = cc.v2(winSize.width, winSize.height);
                _this._halfScreenSize = _this._fullScreenSize.mul(0.5);
                if (_this._boundarySet) {
                    _this.leftBoundary = -(rect.x + rect.width - _this._fullScreenSize.x);
                    _this.rightBoundary = -rect.x;
                    _this.topBoundary = -rect.y;
                    _this.bottomBoundary = -(rect.y + rect.height - _this._fullScreenSize.y);
                    if (_this.rightBoundary < _this.leftBoundary) {
                        _this.rightBoundary = _this.leftBoundary = (_this.leftBoundary + _this.rightBoundary) / 2;
                    }
                    if (_this.topBoundary < _this.bottomBoundary) {
                        _this.topBoundary = _this.bottomBoundary = (_this.topBoundary + _this.bottomBoundary) / 2;
                    }
                    if (_this.topBoundary === _this.bottomBoundary && _this.leftBoundary === _this.rightBoundary)
                        _this._boundaryFullyCovered = true;
                }
                return true;
            },
            step: function step(dt) {
                var targetWorldPos = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);
                var followedWorldPos = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
                var delta = targetWorldPos.sub(followedWorldPos);
                var tempPos = this.target.parent.convertToNodeSpaceAR(delta.add(this._halfScreenSize));
                if (this._boundarySet) {
                    if (this._boundaryFullyCovered)
                        return;
                    this.target.setPosition(misc.clampf(tempPos.x, this.leftBoundary, this.rightBoundary), misc.clampf(tempPos.y, this.bottomBoundary, this.topBoundary));
                } else {
                    this.target.setPosition(tempPos.x, tempPos.y);
                }
            },
            isDone: function isDone() {
                return !this._followedNode.activeInHierarchy;
            },
            stop: function stop() {
                this.target = null;
                cc.Action.prototype.stop.call(this);
            }
        });
        cc.follow = function (followedNode, rect) {
            return new cc.Follow(followedNode, rect);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,