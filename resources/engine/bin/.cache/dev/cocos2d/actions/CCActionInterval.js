(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionInterval.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.ActionInterval = cc.Class({
            name: 'cc.ActionInterval',
            extends: cc.FiniteTimeAction,
            ctor: function ctor(d) {
                this.MAX_VALUE = 2;
                this._elapsed = 0;
                this._firstTick = false;
                this._easeList = null;
                this._speed = 1;
                this._timesForRepeat = 1;
                this._repeatForever = false;
                this._repeatMethod = false;
                this._speedMethod = false;
                d !== undefined && cc.ActionInterval.prototype.initWithDuration.call(this, d);
            },
            getElapsed: function getElapsed() {
                return this._elapsed;
            },
            initWithDuration: function initWithDuration(d) {
                this._duration = d === 0 ? cc.macro.FLT_EPSILON : d;
                this._elapsed = 0;
                this._firstTick = true;
                return true;
            },
            isDone: function isDone() {
                return this._elapsed >= this._duration;
            },
            _cloneDecoration: function _cloneDecoration(action) {
                action._repeatForever = this._repeatForever;
                action._speed = this._speed;
                action._timesForRepeat = this._timesForRepeat;
                action._easeList = this._easeList;
                action._speedMethod = this._speedMethod;
                action._repeatMethod = this._repeatMethod;
            },
            _reverseEaseList: function _reverseEaseList(action) {
                if (this._easeList) {
                    action._easeList = [];
                    for (var i = 0; i < this._easeList.length; i++) {
                        action._easeList.push(this._easeList[i].reverse());
                    }
                }
            },
            clone: function clone() {
                var action = new cc.ActionInterval(this._duration);
                this._cloneDecoration(action);
                return action;
            },
            easing: function easing(easeObj) {
                if (this._easeList)
                    this._easeList.length = 0;
                else
                    this._easeList = [];
                for (var i = 0; i < arguments.length; i++) {
                    this._easeList.push(arguments[i]);
                }
                return this;
            },
            _computeEaseTime: function _computeEaseTime(dt) {
                var locList = this._easeList;
                if (!locList || locList.length === 0)
                    return dt;
                for (var i = 0, n = locList.length; i < n; i++) {
                    dt = locList[i].easing(dt);
                }
                return dt;
            },
            step: function step(dt) {
                if (this._firstTick) {
                    this._firstTick = false;
                    this._elapsed = 0;
                } else
                    this._elapsed += dt;
                var t = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
                t = 1 > t ? t : 1;
                this.update(t > 0 ? t : 0);
                if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
                    if (!this._repeatForever) {
                        this._timesForRepeat--;
                    }
                    this.startWithTarget(this.target);
                    this.step(this._elapsed - this._duration);
                }
            },
            startWithTarget: function startWithTarget(target) {
                cc.Action.prototype.startWithTarget.call(this, target);
                this._elapsed = 0;
                this._firstTick = true;
            },
            reverse: function reverse() {
                cc.logID(1010);
                return null;
            },
            setAmplitudeRate: function setAmplitudeRate(amp) {
                cc.logID(1011);
            },
            getAmplitudeRate: function getAmplitudeRate() {
                cc.logID(1012);
                return 0;
            },
            speed: function speed(_speed) {
                if (_speed <= 0) {
                    cc.logID(1013);
                    return this;
                }
                this._speedMethod = true;
                this._speed *= _speed;
                return this;
            },
            getSpeed: function getSpeed() {
                return this._speed;
            },
            setSpeed: function setSpeed(speed) {
                this._speed = speed;
                return this;
            },
            repeat: function repeat(times) {
                times = Math.round(times);
                if (isNaN(times) || times < 1) {
                    cc.logID(1014);
                    return this;
                }
                this._repeatMethod = true;
                this._timesForRepeat *= times;
                return this;
            },
            repeatForever: function repeatForever() {
                this._repeatMethod = true;
                this._timesForRepeat = this.MAX_VALUE;
                this._repeatForever = true;
                return this;
            }
        });
        cc.actionInterval = function (d) {
            return new cc.ActionInterval(d);
        };
        cc.Sequence = cc.Class({
            name: 'cc.Sequence',
            extends: cc.ActionInterval,
            ctor: function ctor(tempArray) {
                this._actions = [];
                this._split = null;
                this._last = 0;
                this._reversed = false;
                var paramArray = tempArray instanceof Array ? tempArray : arguments;
                if (paramArray.length === 1) {
                    cc.errorID(1019);
                    return;
                }
                var last = paramArray.length - 1;
                if (last >= 0 && paramArray[last] == null)
                    cc.logID(1015);
                if (last >= 0) {
                    var prev = paramArray[0], action1;
                    for (var i = 1; i < last; i++) {
                        if (paramArray[i]) {
                            action1 = prev;
                            prev = cc.Sequence._actionOneTwo(action1, paramArray[i]);
                        }
                    }
                    this.initWithTwoActions(prev, paramArray[last]);
                }
            },
            initWithTwoActions: function initWithTwoActions(actionOne, actionTwo) {
                if (!actionOne || !actionTwo) {
                    cc.errorID(1025);
                    return false;
                }
                var durationOne = actionOne._duration, durationTwo = actionTwo._duration;
                durationOne *= actionOne._repeatMethod ? actionOne._timesForRepeat : 1;
                durationTwo *= actionTwo._repeatMethod ? actionTwo._timesForRepeat : 1;
                var d = durationOne + durationTwo;
                this.initWithDuration(d);
                this._actions[0] = actionOne;
                this._actions[1] = actionTwo;
                return true;
            },
            clone: function clone() {
                var action = new cc.Sequence();
                this._cloneDecoration(action);
                action.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._split = this._actions[0]._duration / this._duration;
                this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
                this._last = -1;
            },
            stop: function stop() {
                if (this._last !== -1)
                    this._actions[this._last].stop();
                cc.Action.prototype.stop.call(this);
            },
            update: function update(dt) {
                var new_t, found = 0;
                var locSplit = this._split, locActions = this._actions, locLast = this._last, actionFound;
                dt = this._computeEaseTime(dt);
                if (dt < locSplit) {
                    new_t = locSplit !== 0 ? dt / locSplit : 1;
                    if (found === 0 && locLast === 1 && this._reversed) {
                        locActions[1].update(0);
                        locActions[1].stop();
                    }
                } else {
                    found = 1;
                    new_t = locSplit === 1 ? 1 : (dt - locSplit) / (1 - locSplit);
                    if (locLast === -1) {
                        locActions[0].startWithTarget(this.target);
                        locActions[0].update(1);
                        locActions[0].stop();
                    }
                    if (locLast === 0) {
                        locActions[0].update(1);
                        locActions[0].stop();
                    }
                }
                actionFound = locActions[found];
                if (locLast === found && actionFound.isDone())
                    return;
                if (locLast !== found)
                    actionFound.startWithTarget(this.target);
                new_t = new_t * actionFound._timesForRepeat;
                actionFound.update(new_t > 1 ? new_t % 1 : new_t);
                this._last = found;
            },
            reverse: function reverse() {
                var action = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                action._reversed = true;
                return action;
            }
        });
        cc.sequence = function (tempArray) {
            var paramArray = tempArray instanceof Array ? tempArray : arguments;
            if (paramArray.length === 1) {
                cc.errorID(1019);
                return null;
            }
            var last = paramArray.length - 1;
            if (last >= 0 && paramArray[last] == null)
                cc.logID(1015);
            var result = null;
            if (last >= 0) {
                result = paramArray[0];
                for (var i = 1; i <= last; i++) {
                    if (paramArray[i]) {
                        result = cc.Sequence._actionOneTwo(result, paramArray[i]);
                    }
                }
            }
            return result;
        };
        cc.Sequence._actionOneTwo = function (actionOne, actionTwo) {
            var sequence = new cc.Sequence();
            sequence.initWithTwoActions(actionOne, actionTwo);
            return sequence;
        };
        cc.Repeat = cc.Class({
            name: 'cc.Repeat',
            extends: cc.ActionInterval,
            ctor: function ctor(action, times) {
                this._times = 0;
                this._total = 0;
                this._nextDt = 0;
                this._actionInstant = false;
                this._innerAction = null;
                times !== undefined && this.initWithAction(action, times);
            },
            initWithAction: function initWithAction(action, times) {
                var duration = action._duration * times;
                if (this.initWithDuration(duration)) {
                    this._times = times;
                    this._innerAction = action;
                    if (action instanceof cc.ActionInstant) {
                        this._actionInstant = true;
                        this._times -= 1;
                    }
                    this._total = 0;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Repeat();
                this._cloneDecoration(action);
                action.initWithAction(this._innerAction.clone(), this._times);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                this._total = 0;
                this._nextDt = this._innerAction._duration / this._duration;
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._innerAction.startWithTarget(target);
            },
            stop: function stop() {
                this._innerAction.stop();
                cc.Action.prototype.stop.call(this);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                var locInnerAction = this._innerAction;
                var locDuration = this._duration;
                var locTimes = this._times;
                var locNextDt = this._nextDt;
                if (dt >= locNextDt) {
                    while (dt > locNextDt && this._total < locTimes) {
                        locInnerAction.update(1);
                        this._total++;
                        locInnerAction.stop();
                        locInnerAction.startWithTarget(this.target);
                        locNextDt += locInnerAction._duration / locDuration;
                        this._nextDt = locNextDt > 1 ? 1 : locNextDt;
                    }
                    if (dt >= 1 && this._total < locTimes) {
                        locInnerAction.update(1);
                        this._total++;
                    }
                    if (!this._actionInstant) {
                        if (this._total === locTimes) {
                            locInnerAction.stop();
                        } else {
                            locInnerAction.update(dt - (locNextDt - locInnerAction._duration / locDuration));
                        }
                    }
                } else {
                    locInnerAction.update(dt * locTimes % 1);
                }
            },
            isDone: function isDone() {
                return this._total === this._times;
            },
            reverse: function reverse() {
                var action = new cc.Repeat(this._innerAction.reverse(), this._times);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            setInnerAction: function setInnerAction(action) {
                if (this._innerAction !== action) {
                    this._innerAction = action;
                }
            },
            getInnerAction: function getInnerAction() {
                return this._innerAction;
            }
        });
        cc.repeat = function (action, times) {
            return new cc.Repeat(action, times);
        };
        cc.RepeatForever = cc.Class({
            name: 'cc.RepeatForever',
            extends: cc.ActionInterval,
            ctor: function ctor(action) {
                this._innerAction = null;
                action && this.initWithAction(action);
            },
            initWithAction: function initWithAction(action) {
                if (!action) {
                    cc.errorID(1026);
                    return false;
                }
                this._innerAction = action;
                return true;
            },
            clone: function clone() {
                var action = new cc.RepeatForever();
                this._cloneDecoration(action);
                action.initWithAction(this._innerAction.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._innerAction.startWithTarget(target);
            },
            step: function step(dt) {
                var locInnerAction = this._innerAction;
                locInnerAction.step(dt);
                if (locInnerAction.isDone()) {
                    locInnerAction.startWithTarget(this.target);
                    locInnerAction.step(locInnerAction.getElapsed() - locInnerAction._duration);
                }
            },
            isDone: function isDone() {
                return false;
            },
            reverse: function reverse() {
                var action = new cc.RepeatForever(this._innerAction.reverse());
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            setInnerAction: function setInnerAction(action) {
                if (this._innerAction !== action) {
                    this._innerAction = action;
                }
            },
            getInnerAction: function getInnerAction() {
                return this._innerAction;
            }
        });
        cc.repeatForever = function (action) {
            return new cc.RepeatForever(action);
        };
        cc.Spawn = cc.Class({
            name: 'cc.Spawn',
            extends: cc.ActionInterval,
            ctor: function ctor(tempArray) {
                this._one = null;
                this._two = null;
                var paramArray = tempArray instanceof Array ? tempArray : arguments;
                if (paramArray.length === 1) {
                    cc.errorID(1020);
                    return;
                }
                var last = paramArray.length - 1;
                if (last >= 0 && paramArray[last] == null)
                    cc.logID(1015);
                if (last >= 0) {
                    var prev = paramArray[0], action1;
                    for (var i = 1; i < last; i++) {
                        if (paramArray[i]) {
                            action1 = prev;
                            prev = cc.Spawn._actionOneTwo(action1, paramArray[i]);
                        }
                    }
                    this.initWithTwoActions(prev, paramArray[last]);
                }
            },
            initWithTwoActions: function initWithTwoActions(action1, action2) {
                if (!action1 || !action2) {
                    cc.errorID(1027);
                    return false;
                }
                var ret = false;
                var d1 = action1._duration;
                var d2 = action2._duration;
                if (this.initWithDuration(Math.max(d1, d2))) {
                    this._one = action1;
                    this._two = action2;
                    if (d1 > d2) {
                        this._two = cc.Sequence._actionOneTwo(action2, cc.delayTime(d1 - d2));
                    } else if (d1 < d2) {
                        this._one = cc.Sequence._actionOneTwo(action1, cc.delayTime(d2 - d1));
                    }
                    ret = true;
                }
                return ret;
            },
            clone: function clone() {
                var action = new cc.Spawn();
                this._cloneDecoration(action);
                action.initWithTwoActions(this._one.clone(), this._two.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._one.startWithTarget(target);
                this._two.startWithTarget(target);
            },
            stop: function stop() {
                this._one.stop();
                this._two.stop();
                cc.Action.prototype.stop.call(this);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this._one)
                    this._one.update(dt);
                if (this._two)
                    this._two.update(dt);
            },
            reverse: function reverse() {
                var action = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.spawn = function (tempArray) {
            var paramArray = tempArray instanceof Array ? tempArray : arguments;
            if (paramArray.length === 1) {
                cc.errorID(1020);
                return null;
            }
            if (paramArray.length > 0 && paramArray[paramArray.length - 1] == null)
                cc.logID(1015);
            var prev = paramArray[0];
            for (var i = 1; i < paramArray.length; i++) {
                if (paramArray[i] != null)
                    prev = cc.Spawn._actionOneTwo(prev, paramArray[i]);
            }
            return prev;
        };
        cc.Spawn._actionOneTwo = function (action1, action2) {
            var pSpawn = new cc.Spawn();
            pSpawn.initWithTwoActions(action1, action2);
            return pSpawn;
        };
        cc.RotateTo = cc.Class({
            name: 'cc.RotateTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, dstAngle) {
                this._startAngle = 0;
                this._dstAngle = 0;
                this._angle = 0;
                dstAngle !== undefined && this.initWithDuration(duration, dstAngle);
            },
            initWithDuration: function initWithDuration(duration, dstAngle) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._dstAngle = dstAngle;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.RotateTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._dstAngle);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var startAngle = target.angle % 360;
                var angle = cc.macro.ROTATE_ACTION_CCW ? this._dstAngle - startAngle : this._dstAngle + startAngle;
                if (angle > 180)
                    angle -= 360;
                if (angle < -180)
                    angle += 360;
                this._startAngle = startAngle;
                this._angle = cc.macro.ROTATE_ACTION_CCW ? angle : -angle;
            },
            reverse: function reverse() {
                cc.logID(1016);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    this.target.angle = this._startAngle + this._angle * dt;
                }
            }
        });
        cc.rotateTo = function (duration, dstAngle) {
            return new cc.RotateTo(duration, dstAngle);
        };
        cc.RotateBy = cc.Class({
            name: 'cc.RotateBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaAngle) {
                deltaAngle *= cc.macro.ROTATE_ACTION_CCW ? 1 : -1;
                this._deltaAngle = 0;
                this._startAngle = 0;
                deltaAngle !== undefined && this.initWithDuration(duration, deltaAngle);
            },
            initWithDuration: function initWithDuration(duration, deltaAngle) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._deltaAngle = deltaAngle;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.RotateBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._deltaAngle);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startAngle = target.angle;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    this.target.angle = this._startAngle + this._deltaAngle * dt;
                }
            },
            reverse: function reverse() {
                var action = new cc.RotateBy(this._duration, -this._deltaAngle);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.rotateBy = function (duration, deltaAngle) {
            return new cc.RotateBy(duration, deltaAngle);
        };
        cc.MoveBy = cc.Class({
            name: 'cc.MoveBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaPos, deltaY) {
                this._positionDelta = cc.v2(0, 0);
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                deltaPos !== undefined && cc.MoveBy.prototype.initWithDuration.call(this, duration, deltaPos, deltaY);
            },
            initWithDuration: function initWithDuration(duration, position, y) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    if (position.x !== undefined) {
                        y = position.y;
                        position = position.x;
                    }
                    this._positionDelta.x = position;
                    this._positionDelta.y = y;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.MoveBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._positionDelta);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var locPosX = target.x;
                var locPosY = target.y;
                this._previousPosition.x = locPosX;
                this._previousPosition.y = locPosY;
                this._startPosition.x = locPosX;
                this._startPosition.y = locPosY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    var x = this._positionDelta.x * dt;
                    var y = this._positionDelta.y * dt;
                    var locStartPosition = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var targetX = this.target.x;
                        var targetY = this.target.y;
                        var locPreviousPosition = this._previousPosition;
                        locStartPosition.x = locStartPosition.x + targetX - locPreviousPosition.x;
                        locStartPosition.y = locStartPosition.y + targetY - locPreviousPosition.y;
                        x = x + locStartPosition.x;
                        y = y + locStartPosition.y;
                        locPreviousPosition.x = x;
                        locPreviousPosition.y = y;
                        this.target.setPosition(x, y);
                    } else {
                        this.target.setPosition(locStartPosition.x + x, locStartPosition.y + y);
                    }
                }
            },
            reverse: function reverse() {
                var action = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.moveBy = function (duration, deltaPos, deltaY) {
            return new cc.MoveBy(duration, deltaPos, deltaY);
        };
        cc.MoveTo = cc.Class({
            name: 'cc.MoveTo',
            extends: cc.MoveBy,
            ctor: function ctor(duration, position, y) {
                this._endPosition = cc.v2(0, 0);
                position !== undefined && this.initWithDuration(duration, position, y);
            },
            initWithDuration: function initWithDuration(duration, position, y) {
                if (cc.MoveBy.prototype.initWithDuration.call(this, duration, position, y)) {
                    if (position.x !== undefined) {
                        y = position.y;
                        position = position.x;
                    }
                    this._endPosition.x = position;
                    this._endPosition.y = y;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.MoveTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endPosition);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.MoveBy.prototype.startWithTarget.call(this, target);
                this._positionDelta.x = this._endPosition.x - target.x;
                this._positionDelta.y = this._endPosition.y - target.y;
            }
        });
        cc.moveTo = function (duration, position, y) {
            return new cc.MoveTo(duration, position, y);
        };
        cc.SkewTo = cc.Class({
            name: 'cc.SkewTo',
            extends: cc.ActionInterval,
            ctor: function ctor(t, sx, sy) {
                this._skewX = 0;
                this._skewY = 0;
                this._startSkewX = 0;
                this._startSkewY = 0;
                this._endSkewX = 0;
                this._endSkewY = 0;
                this._deltaX = 0;
                this._deltaY = 0;
                sy !== undefined && cc.SkewTo.prototype.initWithDuration.call(this, t, sx, sy);
            },
            initWithDuration: function initWithDuration(t, sx, sy) {
                var ret = false;
                if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
                    this._endSkewX = sx;
                    this._endSkewY = sy;
                    ret = true;
                }
                return ret;
            },
            clone: function clone() {
                var action = new cc.SkewTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startSkewX = target.skewX % 180;
                this._deltaX = this._endSkewX - this._startSkewX;
                if (this._deltaX > 180)
                    this._deltaX -= 360;
                if (this._deltaX < -180)
                    this._deltaX += 360;
                this._startSkewY = target.skewY % 360;
                this._deltaY = this._endSkewY - this._startSkewY;
                if (this._deltaY > 180)
                    this._deltaY -= 360;
                if (this._deltaY < -180)
                    this._deltaY += 360;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                this.target.skewX = this._startSkewX + this._deltaX * dt;
                this.target.skewY = this._startSkewY + this._deltaY * dt;
            }
        });
        cc.skewTo = function (t, sx, sy) {
            return new cc.SkewTo(t, sx, sy);
        };
        cc.SkewBy = cc.Class({
            name: 'cc.SkewBy',
            extends: cc.SkewTo,
            ctor: function ctor(t, sx, sy) {
                sy !== undefined && this.initWithDuration(t, sx, sy);
            },
            initWithDuration: function initWithDuration(t, deltaSkewX, deltaSkewY) {
                var ret = false;
                if (cc.SkewTo.prototype.initWithDuration.call(this, t, deltaSkewX, deltaSkewY)) {
                    this._skewX = deltaSkewX;
                    this._skewY = deltaSkewY;
                    ret = true;
                }
                return ret;
            },
            clone: function clone() {
                var action = new cc.SkewBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._skewX, this._skewY);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.SkewTo.prototype.startWithTarget.call(this, target);
                this._deltaX = this._skewX;
                this._deltaY = this._skewY;
                this._endSkewX = this._startSkewX + this._deltaX;
                this._endSkewY = this._startSkewY + this._deltaY;
            },
            reverse: function reverse() {
                var action = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.skewBy = function (t, sx, sy) {
            return new cc.SkewBy(t, sx, sy);
        };
        cc.JumpBy = cc.Class({
            name: 'cc.JumpBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, position, y, height, jumps) {
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                this._delta = cc.v2(0, 0);
                this._height = 0;
                this._jumps = 0;
                height !== undefined && cc.JumpBy.prototype.initWithDuration.call(this, duration, position, y, height, jumps);
            },
            initWithDuration: function initWithDuration(duration, position, y, height, jumps) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    if (jumps === undefined) {
                        jumps = height;
                        height = y;
                        y = position.y;
                        position = position.x;
                    }
                    this._delta.x = position;
                    this._delta.y = y;
                    this._height = height;
                    this._jumps = jumps;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.JumpBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._delta, this._height, this._jumps);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var locPosX = target.x;
                var locPosY = target.y;
                this._previousPosition.x = locPosX;
                this._previousPosition.y = locPosY;
                this._startPosition.x = locPosX;
                this._startPosition.y = locPosY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    var frac = dt * this._jumps % 1;
                    var y = this._height * 4 * frac * (1 - frac);
                    y += this._delta.y * dt;
                    var x = this._delta.x * dt;
                    var locStartPosition = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var targetX = this.target.x;
                        var targetY = this.target.y;
                        var locPreviousPosition = this._previousPosition;
                        locStartPosition.x = locStartPosition.x + targetX - locPreviousPosition.x;
                        locStartPosition.y = locStartPosition.y + targetY - locPreviousPosition.y;
                        x = x + locStartPosition.x;
                        y = y + locStartPosition.y;
                        locPreviousPosition.x = x;
                        locPreviousPosition.y = y;
                        this.target.setPosition(x, y);
                    } else {
                        this.target.setPosition(locStartPosition.x + x, locStartPosition.y + y);
                    }
                }
            },
            reverse: function reverse() {
                var action = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.jumpBy = function (duration, position, y, height, jumps) {
            return new cc.JumpBy(duration, position, y, height, jumps);
        };
        cc.JumpTo = cc.Class({
            name: 'cc.JumpTo',
            extends: cc.JumpBy,
            ctor: function ctor(duration, position, y, height, jumps) {
                this._endPosition = cc.v2(0, 0);
                height !== undefined && this.initWithDuration(duration, position, y, height, jumps);
            },
            initWithDuration: function initWithDuration(duration, position, y, height, jumps) {
                if (cc.JumpBy.prototype.initWithDuration.call(this, duration, position, y, height, jumps)) {
                    if (jumps === undefined) {
                        y = position.y;
                        position = position.x;
                    }
                    this._endPosition.x = position;
                    this._endPosition.y = y;
                    return true;
                }
                return false;
            },
            startWithTarget: function startWithTarget(target) {
                cc.JumpBy.prototype.startWithTarget.call(this, target);
                this._delta.x = this._endPosition.x - this._startPosition.x;
                this._delta.y = this._endPosition.y - this._startPosition.y;
            },
            clone: function clone() {
                var action = new cc.JumpTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
                return action;
            }
        });
        cc.jumpTo = function (duration, position, y, height, jumps) {
            return new cc.JumpTo(duration, position, y, height, jumps);
        };
        function bezierAt(a, b, c, d, t) {
            return Math.pow(1 - t, 3) * a + 3 * t * Math.pow(1 - t, 2) * b + 3 * Math.pow(t, 2) * (1 - t) * c + Math.pow(t, 3) * d;
        }
        ;
        cc.BezierBy = cc.Class({
            name: 'cc.BezierBy',
            extends: cc.ActionInterval,
            ctor: function ctor(t, c) {
                this._config = [];
                this._startPosition = cc.v2(0, 0);
                this._previousPosition = cc.v2(0, 0);
                c && cc.BezierBy.prototype.initWithDuration.call(this, t, c);
            },
            initWithDuration: function initWithDuration(t, c) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
                    this._config = c;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.BezierBy();
                this._cloneDecoration(action);
                var newConfigs = [];
                for (var i = 0; i < this._config.length; i++) {
                    var selConf = this._config[i];
                    newConfigs.push(cc.v2(selConf.x, selConf.y));
                }
                action.initWithDuration(this._duration, newConfigs);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var locPosX = target.x;
                var locPosY = target.y;
                this._previousPosition.x = locPosX;
                this._previousPosition.y = locPosY;
                this._startPosition.x = locPosX;
                this._startPosition.y = locPosY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    var locConfig = this._config;
                    var xa = 0;
                    var xb = locConfig[0].x;
                    var xc = locConfig[1].x;
                    var xd = locConfig[2].x;
                    var ya = 0;
                    var yb = locConfig[0].y;
                    var yc = locConfig[1].y;
                    var yd = locConfig[2].y;
                    var x = bezierAt(xa, xb, xc, xd, dt);
                    var y = bezierAt(ya, yb, yc, yd, dt);
                    var locStartPosition = this._startPosition;
                    if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                        var targetX = this.target.x;
                        var targetY = this.target.y;
                        var locPreviousPosition = this._previousPosition;
                        locStartPosition.x = locStartPosition.x + targetX - locPreviousPosition.x;
                        locStartPosition.y = locStartPosition.y + targetY - locPreviousPosition.y;
                        x = x + locStartPosition.x;
                        y = y + locStartPosition.y;
                        locPreviousPosition.x = x;
                        locPreviousPosition.y = y;
                        this.target.setPosition(x, y);
                    } else {
                        this.target.setPosition(locStartPosition.x + x, locStartPosition.y + y);
                    }
                }
            },
            reverse: function reverse() {
                var locConfig = this._config;
                var x0 = locConfig[0].x, y0 = locConfig[0].y;
                var x1 = locConfig[1].x, y1 = locConfig[1].y;
                var x2 = locConfig[2].x, y2 = locConfig[2].y;
                var r = [
                    cc.v2(x1 - x2, y1 - y2),
                    cc.v2(x0 - x2, y0 - y2),
                    cc.v2(-x2, -y2)
                ];
                var action = new cc.BezierBy(this._duration, r);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.bezierBy = function (t, c) {
            return new cc.BezierBy(t, c);
        };
        cc.BezierTo = cc.Class({
            name: 'cc.BezierTo',
            extends: cc.BezierBy,
            ctor: function ctor(t, c) {
                this._toConfig = [];
                c && this.initWithDuration(t, c);
            },
            initWithDuration: function initWithDuration(t, c) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, t)) {
                    this._toConfig = c;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.BezierTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toConfig);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.BezierBy.prototype.startWithTarget.call(this, target);
                var locStartPos = this._startPosition;
                var locToConfig = this._toConfig;
                var locConfig = this._config;
                locConfig[0] = locToConfig[0].sub(locStartPos);
                locConfig[1] = locToConfig[1].sub(locStartPos);
                locConfig[2] = locToConfig[2].sub(locStartPos);
            }
        });
        cc.bezierTo = function (t, c) {
            return new cc.BezierTo(t, c);
        };
        cc.ScaleTo = cc.Class({
            name: 'cc.ScaleTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, sx, sy) {
                this._scaleX = 1;
                this._scaleY = 1;
                this._startScaleX = 1;
                this._startScaleY = 1;
                this._endScaleX = 0;
                this._endScaleY = 0;
                this._deltaX = 0;
                this._deltaY = 0;
                sx !== undefined && cc.ScaleTo.prototype.initWithDuration.call(this, duration, sx, sy);
            },
            initWithDuration: function initWithDuration(duration, sx, sy) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._endScaleX = sx;
                    this._endScaleY = sy != null ? sy : sx;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.ScaleTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startScaleX = target.scaleX;
                this._startScaleY = target.scaleY;
                this._deltaX = this._endScaleX - this._startScaleX;
                this._deltaY = this._endScaleY - this._startScaleY;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    this.target.scaleX = this._startScaleX + this._deltaX * dt;
                    this.target.scaleY = this._startScaleY + this._deltaY * dt;
                }
            }
        });
        cc.scaleTo = function (duration, sx, sy) {
            return new cc.ScaleTo(duration, sx, sy);
        };
        cc.ScaleBy = cc.Class({
            name: 'cc.ScaleBy',
            extends: cc.ScaleTo,
            startWithTarget: function startWithTarget(target) {
                cc.ScaleTo.prototype.startWithTarget.call(this, target);
                this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
                this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
            },
            reverse: function reverse() {
                var action = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.ScaleBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
                return action;
            }
        });
        cc.scaleBy = function (duration, sx, sy) {
            return new cc.ScaleBy(duration, sx, sy);
        };
        cc.Blink = cc.Class({
            name: 'cc.Blink',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, blinks) {
                this._times = 0;
                this._originalState = false;
                blinks !== undefined && this.initWithDuration(duration, blinks);
            },
            initWithDuration: function initWithDuration(duration, blinks) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._times = blinks;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Blink();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._times);
                return action;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target && !this.isDone()) {
                    var slice = 1 / this._times;
                    var m = dt % slice;
                    this.target.opacity = m > slice / 2 ? 255 : 0;
                }
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._originalState = target.opacity;
            },
            stop: function stop() {
                this.target.opacity = this._originalState;
                cc.ActionInterval.prototype.stop.call(this);
            },
            reverse: function reverse() {
                var action = new cc.Blink(this._duration, this._times);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.blink = function (duration, blinks) {
            return new cc.Blink(duration, blinks);
        };
        cc.FadeTo = cc.Class({
            name: 'cc.FadeTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, opacity) {
                this._toOpacity = 0;
                this._fromOpacity = 0;
                opacity !== undefined && cc.FadeTo.prototype.initWithDuration.call(this, duration, opacity);
            },
            initWithDuration: function initWithDuration(duration, opacity) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._toOpacity = opacity;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.FadeTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toOpacity);
                return action;
            },
            update: function update(time) {
                time = this._computeEaseTime(time);
                var fromOpacity = this._fromOpacity !== undefined ? this._fromOpacity : 255;
                this.target.opacity = fromOpacity + (this._toOpacity - fromOpacity) * time;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._fromOpacity = target.opacity;
            }
        });
        cc.fadeTo = function (duration, opacity) {
            return new cc.FadeTo(duration, opacity);
        };
        cc.FadeIn = cc.Class({
            name: 'cc.FadeIn',
            extends: cc.FadeTo,
            ctor: function ctor(duration) {
                if (duration == null)
                    duration = 0;
                this._reverseAction = null;
                this.initWithDuration(duration, 255);
            },
            reverse: function reverse() {
                var action = new cc.FadeOut();
                action.initWithDuration(this._duration, 0);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.FadeIn();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toOpacity);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                if (this._reverseAction)
                    this._toOpacity = this._reverseAction._fromOpacity;
                cc.FadeTo.prototype.startWithTarget.call(this, target);
            }
        });
        cc.fadeIn = function (duration) {
            return new cc.FadeIn(duration);
        };
        cc.FadeOut = cc.Class({
            name: 'cc.FadeOut',
            extends: cc.FadeTo,
            ctor: function ctor(duration) {
                if (duration == null)
                    duration = 0;
                this._reverseAction = null;
                this.initWithDuration(duration, 0);
            },
            reverse: function reverse() {
                var action = new cc.FadeIn();
                action._reverseAction = this;
                action.initWithDuration(this._duration, 255);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.FadeOut();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._toOpacity);
                return action;
            }
        });
        cc.fadeOut = function (d) {
            return new cc.FadeOut(d);
        };
        cc.TintTo = cc.Class({
            name: 'cc.TintTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, red, green, blue) {
                this._to = cc.color(0, 0, 0);
                this._from = cc.color(0, 0, 0);
                if (red instanceof cc.Color) {
                    blue = red.b;
                    green = red.g;
                    red = red.r;
                }
                blue !== undefined && this.initWithDuration(duration, red, green, blue);
            },
            initWithDuration: function initWithDuration(duration, red, green, blue) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._to = cc.color(red, green, blue);
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.TintTo();
                this._cloneDecoration(action);
                var locTo = this._to;
                action.initWithDuration(this._duration, locTo.r, locTo.g, locTo.b);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._from = this.target.color;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                var locFrom = this._from, locTo = this._to;
                if (locFrom) {
                    this.target.color = cc.color(locFrom.r + (locTo.r - locFrom.r) * dt, locFrom.g + (locTo.g - locFrom.g) * dt, locFrom.b + (locTo.b - locFrom.b) * dt);
                }
            }
        });
        cc.tintTo = function (duration, red, green, blue) {
            return new cc.TintTo(duration, red, green, blue);
        };
        cc.TintBy = cc.Class({
            name: 'cc.TintBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaRed, deltaGreen, deltaBlue) {
                this._deltaR = 0;
                this._deltaG = 0;
                this._deltaB = 0;
                this._fromR = 0;
                this._fromG = 0;
                this._fromB = 0;
                deltaBlue !== undefined && this.initWithDuration(duration, deltaRed, deltaGreen, deltaBlue);
            },
            initWithDuration: function initWithDuration(duration, deltaRed, deltaGreen, deltaBlue) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this._deltaR = deltaRed;
                    this._deltaG = deltaGreen;
                    this._deltaB = deltaBlue;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.TintBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                var color = target.color;
                this._fromR = color.r;
                this._fromG = color.g;
                this._fromB = color.b;
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                this.target.color = cc.color(this._fromR + this._deltaR * dt, this._fromG + this._deltaG * dt, this._fromB + this._deltaB * dt);
            },
            reverse: function reverse() {
                var action = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.tintBy = function (duration, deltaRed, deltaGreen, deltaBlue) {
            return new cc.TintBy(duration, deltaRed, deltaGreen, deltaBlue);
        };
        cc.DelayTime = cc.Class({
            name: 'cc.DelayTime',
            extends: cc.ActionInterval,
            update: function update(dt) {
            },
            reverse: function reverse() {
                var action = new cc.DelayTime(this._duration);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            },
            clone: function clone() {
                var action = new cc.DelayTime();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration);
                return action;
            }
        });
        cc.delayTime = function (d) {
            return new cc.DelayTime(d);
        };
        cc.ReverseTime = cc.Class({
            name: 'cc.ReverseTime',
            extends: cc.ActionInterval,
            ctor: function ctor(action) {
                this._other = null;
                action && this.initWithAction(action);
            },
            initWithAction: function initWithAction(action) {
                if (!action) {
                    cc.errorID(1028);
                    return false;
                }
                if (action === this._other) {
                    cc.errorID(1029);
                    return false;
                }
                if (cc.ActionInterval.prototype.initWithDuration.call(this, action._duration)) {
                    this._other = action;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.ReverseTime();
                this._cloneDecoration(action);
                action.initWithAction(this._other.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._other.startWithTarget(target);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this._other)
                    this._other.update(1 - dt);
            },
            reverse: function reverse() {
                return this._other.clone();
            },
            stop: function stop() {
                this._other.stop();
                cc.Action.prototype.stop.call(this);
            }
        });
        cc.reverseTime = function (action) {
            return new cc.ReverseTime(action);
        };
        cc.TargetedAction = cc.Class({
            name: 'cc.TargetedAction',
            extends: cc.ActionInterval,
            ctor: function ctor(target, action) {
                this._action = null;
                this._forcedTarget = null;
                action && this.initWithTarget(target, action);
            },
            initWithTarget: function initWithTarget(target, action) {
                if (this.initWithDuration(action._duration)) {
                    this._forcedTarget = target;
                    this._action = action;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.TargetedAction();
                this._cloneDecoration(action);
                action.initWithTarget(this._forcedTarget, this._action.clone());
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._action.startWithTarget(this._forcedTarget);
            },
            stop: function stop() {
                this._action.stop();
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                this._action.update(dt);
            },
            getForcedTarget: function getForcedTarget() {
                return this._forcedTarget;
            },
            setForcedTarget: function setForcedTarget(forcedTarget) {
                if (this._forcedTarget !== forcedTarget)
                    this._forcedTarget = forcedTarget;
            }
        });
        cc.targetedAction = function (target, action) {
            return new cc.TargetedAction(target, action);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,