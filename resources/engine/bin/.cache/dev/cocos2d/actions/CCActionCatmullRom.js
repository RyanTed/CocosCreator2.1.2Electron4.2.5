(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/actions/CCActionCatmullRom.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function cardinalSplineAt(p0, p1, p2, p3, tension, t) {
            var t2 = t * t;
            var t3 = t2 * t;
            var s = (1 - tension) / 2;
            var b1 = s * (-t3 + 2 * t2 - t);
            var b2 = s * (-t3 + t2) + (2 * t3 - 3 * t2 + 1);
            var b3 = s * (t3 - 2 * t2 + t) + (-2 * t3 + 3 * t2);
            var b4 = s * (t3 - t2);
            var x = p0.x * b1 + p1.x * b2 + p2.x * b3 + p3.x * b4;
            var y = p0.y * b1 + p1.y * b2 + p2.y * b3 + p3.y * b4;
            return cc.v2(x, y);
        }
        ;
        function getControlPointAt(controlPoints, pos) {
            var p = Math.min(controlPoints.length - 1, Math.max(pos, 0));
            return controlPoints[p];
        }
        ;
        function reverseControlPoints(controlPoints) {
            var newArray = [];
            for (var i = controlPoints.length - 1; i >= 0; i--) {
                newArray.push(cc.v2(controlPoints[i].x, controlPoints[i].y));
            }
            return newArray;
        }
        function cloneControlPoints(controlPoints) {
            var newArray = [];
            for (var i = 0; i < controlPoints.length; i++) {
                newArray.push(cc.v2(controlPoints[i].x, controlPoints[i].y));
            }
            return newArray;
        }
        cc.CardinalSplineTo = cc.Class({
            name: 'cc.CardinalSplineTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, points, tension) {
                this._points = [];
                this._deltaT = 0;
                this._tension = 0;
                this._previousPosition = null;
                this._accumulatedDiff = null;
                tension !== undefined && cc.CardinalSplineTo.prototype.initWithDuration.call(this, duration, points, tension);
            },
            initWithDuration: function initWithDuration(duration, points, tension) {
                if (!points || points.length === 0) {
                    cc.errorID(1024);
                    return false;
                }
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    this.setPoints(points);
                    this._tension = tension;
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.CardinalSplineTo();
                action.initWithDuration(this._duration, cloneControlPoints(this._points), this._tension);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._deltaT = 1 / (this._points.length - 1);
                this._previousPosition = cc.v2(this.target.x, this.target.y);
                this._accumulatedDiff = cc.v2(0, 0);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                var p, lt;
                var ps = this._points;
                if (dt === 1) {
                    p = ps.length - 1;
                    lt = 1;
                } else {
                    var locDT = this._deltaT;
                    p = 0 | dt / locDT;
                    lt = (dt - locDT * p) / locDT;
                }
                var newPos = cardinalSplineAt(getControlPointAt(ps, p - 1), getControlPointAt(ps, p - 0), getControlPointAt(ps, p + 1), getControlPointAt(ps, p + 2), this._tension, lt);
                if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
                    var tempX, tempY;
                    tempX = this.target.x - this._previousPosition.x;
                    tempY = this.target.y - this._previousPosition.y;
                    if (tempX !== 0 || tempY !== 0) {
                        var locAccDiff = this._accumulatedDiff;
                        tempX = locAccDiff.x + tempX;
                        tempY = locAccDiff.y + tempY;
                        locAccDiff.x = tempX;
                        locAccDiff.y = tempY;
                        newPos.x += tempX;
                        newPos.y += tempY;
                    }
                }
                this.updatePosition(newPos);
            },
            reverse: function reverse() {
                var reversePoints = reverseControlPoints(this._points);
                return cc.cardinalSplineTo(this._duration, reversePoints, this._tension);
            },
            updatePosition: function updatePosition(newPos) {
                this.target.setPosition(newPos);
                this._previousPosition = newPos;
            },
            getPoints: function getPoints() {
                return this._points;
            },
            setPoints: function setPoints(points) {
                this._points = points;
            }
        });
        cc.cardinalSplineTo = function (duration, points, tension) {
            return new cc.CardinalSplineTo(duration, points, tension);
        };
        cc.CardinalSplineBy = cc.Class({
            name: 'cc.CardinalSplineBy',
            extends: cc.CardinalSplineTo,
            ctor: function ctor(duration, points, tension) {
                this._startPosition = cc.v2(0, 0);
                tension !== undefined && this.initWithDuration(duration, points, tension);
            },
            startWithTarget: function startWithTarget(target) {
                cc.CardinalSplineTo.prototype.startWithTarget.call(this, target);
                this._startPosition.x = target.x;
                this._startPosition.y = target.y;
            },
            reverse: function reverse() {
                var copyConfig = this._points.slice();
                var current;
                var p = copyConfig[0];
                for (var i = 1; i < copyConfig.length; ++i) {
                    current = copyConfig[i];
                    copyConfig[i] = current.sub(p);
                    p = current;
                }
                var reverseArray = reverseControlPoints(copyConfig);
                p = reverseArray[reverseArray.length - 1];
                reverseArray.pop();
                p.x = -p.x;
                p.y = -p.y;
                reverseArray.unshift(p);
                for (var i = 1; i < reverseArray.length; ++i) {
                    current = reverseArray[i];
                    current.x = -current.x;
                    current.y = -current.y;
                    current.x += p.x;
                    current.y += p.y;
                    reverseArray[i] = current;
                    p = current;
                }
                return cc.cardinalSplineBy(this._duration, reverseArray, this._tension);
            },
            updatePosition: function updatePosition(newPos) {
                var pos = this._startPosition;
                var posX = newPos.x + pos.x;
                var posY = newPos.y + pos.y;
                this._previousPosition.x = posX;
                this._previousPosition.y = posY;
                this.target.setPosition(posX, posY);
            },
            clone: function clone() {
                var a = new cc.CardinalSplineBy();
                a.initWithDuration(this._duration, cloneControlPoints(this._points), this._tension);
                return a;
            }
        });
        cc.cardinalSplineBy = function (duration, points, tension) {
            return new cc.CardinalSplineBy(duration, points, tension);
        };
        cc.CatmullRomTo = cc.Class({
            name: 'cc.CatmullRomTo',
            extends: cc.CardinalSplineTo,
            ctor: function ctor(dt, points) {
                points && this.initWithDuration(dt, points);
            },
            initWithDuration: function initWithDuration(dt, points) {
                return cc.CardinalSplineTo.prototype.initWithDuration.call(this, dt, points, 0.5);
            },
            clone: function clone() {
                var action = new cc.CatmullRomTo();
                action.initWithDuration(this._duration, cloneControlPoints(this._points));
                return action;
            }
        });
        cc.catmullRomTo = function (dt, points) {
            return new cc.CatmullRomTo(dt, points);
        };
        cc.CatmullRomBy = cc.Class({
            name: 'cc.CatmullRomBy',
            extends: cc.CardinalSplineBy,
            ctor: function ctor(dt, points) {
                points && this.initWithDuration(dt, points);
            },
            initWithDuration: function initWithDuration(dt, points) {
                return cc.CardinalSplineTo.prototype.initWithDuration.call(this, dt, points, 0.5);
            },
            clone: function clone() {
                var action = new cc.CatmullRomBy();
                action.initWithDuration(this._duration, cloneControlPoints(this._points));
                return action;
            }
        });
        cc.catmullRomBy = function (dt, points) {
            return new cc.CatmullRomBy(dt, points);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,