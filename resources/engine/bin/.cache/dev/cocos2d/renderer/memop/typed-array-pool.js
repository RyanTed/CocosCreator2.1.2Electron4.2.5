(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/memop/typed-array-pool.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _bufferPools = Array(8);
        for (var i = 0; i < 8; ++i) {
            _bufferPools[i] = [];
        }
        function _nextPow16(v) {
            for (var _i = 16; _i <= 1 << 28; _i *= 16) {
                if (v <= _i) {
                    return _i;
                }
            }
            return 0;
        }
        function _log2(v) {
            var r = void 0, shift = void 0;
            r = (v > 65535) << 4;
            v >>>= r;
            shift = (v > 255) << 3;
            v >>>= shift;
            r |= shift;
            shift = (v > 15) << 2;
            v >>>= shift;
            r |= shift;
            shift = (v > 3) << 1;
            v >>>= shift;
            r |= shift;
            return r | v >> 1;
        }
        function _alloc(n) {
            var sz = _nextPow16(n);
            var bin = _bufferPools[_log2(sz) >> 2];
            if (bin.length > 0) {
                return bin.pop();
            }
            return new ArrayBuffer(sz);
        }
        function _free(buf) {
            _bufferPools[_log2(buf.byteLength) >> 2].push(buf);
        }
        exports.default = {
            alloc_int8: function alloc_int8(n) {
                var result = new Int8Array(_alloc(n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_uint8: function alloc_uint8(n) {
                var result = new Uint8Array(_alloc(n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_int16: function alloc_int16(n) {
                var result = new Int16Array(_alloc(2 * n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_uint16: function alloc_uint16(n) {
                var result = new Uint16Array(_alloc(2 * n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_int32: function alloc_int32(n) {
                var result = new Int32Array(_alloc(4 * n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_uint32: function alloc_uint32(n) {
                var result = new Uint32Array(_alloc(4 * n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_float32: function alloc_float32(n) {
                var result = new Float32Array(_alloc(4 * n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_float64: function alloc_float64(n) {
                var result = new Float64Array(_alloc(8 * n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            alloc_dataview: function alloc_dataview(n) {
                var result = new DataView(_alloc(n), 0, n);
                if (result.length !== n) {
                    return result.subarray(0, n);
                }
                return result;
            },
            free: function free(array) {
                _free(array.buffer);
            },
            reset: function reset() {
                var _bufferPools = Array(8);
                for (var _i2 = 0; _i2 < 8; ++_i2) {
                    _bufferPools[_i2] = [];
                }
            }
        };
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,