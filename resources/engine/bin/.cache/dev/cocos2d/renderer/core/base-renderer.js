(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/base-renderer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _type2uniformValue2, _type2uniformArrayVal;
        var _memop = require('../memop');
        var _enums = require('../enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _vmath = require('../../core/vmath');
        var _programLib = require('./program-lib');
        var _programLib2 = _interopRequireDefault(_programLib);
        var _view = require('./view');
        var _view2 = _interopRequireDefault(_view);
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _defineProperty(obj, key, value) {
            if (key in obj) {
                Object.defineProperty(obj, key, {
                    value: value,
                    enumerable: true,
                    configurable: true,
                    writable: true
                });
            } else {
                obj[key] = value;
            }
            return obj;
        }
        var _m3_tmp = _vmath.mat3.create();
        var _m4_tmp = _vmath.mat4.create();
        var _stageInfos = new _memop.RecyclePool(function () {
            return {
                stage: null,
                items: null
            };
        }, 8);
        var _float2_pool = new _memop.RecyclePool(function () {
            return new Float32Array(2);
        }, 8);
        var _float3_pool = new _memop.RecyclePool(function () {
            return new Float32Array(3);
        }, 8);
        var _float4_pool = new _memop.RecyclePool(function () {
            return new Float32Array(4);
        }, 8);
        var _float9_pool = new _memop.RecyclePool(function () {
            return new Float32Array(9);
        }, 8);
        var _float16_pool = new _memop.RecyclePool(function () {
            return new Float32Array(16);
        }, 8);
        var _float64_pool = new _memop.RecyclePool(function () {
            return new Float32Array(64);
        }, 8);
        var _int2_pool = new _memop.RecyclePool(function () {
            return new Int32Array(2);
        }, 8);
        var _int3_pool = new _memop.RecyclePool(function () {
            return new Int32Array(3);
        }, 8);
        var _int4_pool = new _memop.RecyclePool(function () {
            return new Int32Array(4);
        }, 8);
        var _int64_pool = new _memop.RecyclePool(function () {
            return new Int32Array(64);
        }, 8);
        var _type2uniformValue = (_type2uniformValue2 = {}, _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT, function (value) {
            return value;
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT2, function (value) {
            return _vmath.vec2.array(_int2_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT3, function (value) {
            return _vmath.vec3.array(_int3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_INT4, function (value) {
            return _vmath.vec4.array(_int4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT, function (value) {
            return value;
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT2, function (value) {
            return _vmath.vec2.array(_float2_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT3, function (value) {
            return _vmath.vec3.array(_float3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_FLOAT4, function (value) {
            return _vmath.vec4.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_COLOR3, function (value) {
            return _vmath.color3.array(_float3_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_COLOR4, function (value) {
            return _vmath.color4.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT2, function (value) {
            return _vmath.mat2.array(_float4_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT3, function (value) {
            return _vmath.mat3.array(_float9_pool.add(), value);
        }), _defineProperty(_type2uniformValue2, _enums2.default.PARAM_MAT4, function (value) {
            return _vmath.mat4.array(_float16_pool.add(), value);
        }), _type2uniformValue2);
        var _type2uniformArrayValue = (_type2uniformArrayVal = {}, _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[i] = values[i];
                }
                return result;
            },
            size: 1
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT2, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[2 * i] = values[i].x;
                    result[2 * i + 1] = values[i].y;
                }
                return result;
            },
            size: 2
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_INT4, {
            func: function func(values) {
                var result = _int64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.x;
                    result[4 * i + 1] = v.y;
                    result[4 * i + 2] = v.z;
                    result[4 * i + 3] = v.w;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[i] = values[i];
                }
                return result;
            },
            size: 1
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT2, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    result[2 * i] = values[i].x;
                    result[2 * i + 1] = values[i].y;
                }
                return result;
            },
            size: 2
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_FLOAT4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.x;
                    result[4 * i + 1] = v.y;
                    result[4 * i + 2] = v.z;
                    result[4 * i + 3] = v.w;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_COLOR3, {
            func: undefined,
            size: 3
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_COLOR4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.r;
                    result[4 * i + 1] = v.g;
                    result[4 * i + 2] = v.b;
                    result[4 * i + 3] = v.a;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT2, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[4 * i] = v.m00;
                    result[4 * i + 1] = v.m01;
                    result[4 * i + 2] = v.m02;
                    result[4 * i + 3] = v.m03;
                }
                return result;
            },
            size: 4
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT3, {
            func: undefined,
            size: 9
        }), _defineProperty(_type2uniformArrayVal, _enums2.default.PARAM_MAT4, {
            func: function func(values) {
                var result = _float64_pool.add();
                for (var i = 0; i < values.length; ++i) {
                    var v = values[i];
                    result[16 * i] = v.m00;
                    result[16 * i + 1] = v.m01;
                    result[16 * i + 2] = v.m02;
                    result[16 * i + 3] = v.m03;
                    result[16 * i + 4] = v.m04;
                    result[16 * i + 5] = v.m05;
                    result[16 * i + 6] = v.m06;
                    result[16 * i + 7] = v.m07;
                    result[16 * i + 8] = v.m08;
                    result[16 * i + 9] = v.m09;
                    result[16 * i + 10] = v.m10;
                    result[16 * i + 11] = v.m11;
                    result[16 * i + 12] = v.m12;
                    result[16 * i + 13] = v.m13;
                    result[16 * i + 14] = v.m14;
                    result[16 * i + 15] = v.m15;
                }
                return result;
            },
            size: 16
        }), _type2uniformArrayVal);
        var Base = function () {
            function Base(device, opts) {
                var _type2defaultValue;
                _classCallCheck(this, Base);
                this._device = device;
                this._programLib = new _programLib2.default(device);
                this._opts = opts;
                this._type2defaultValue = (_type2defaultValue = {}, _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT, 0), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT2, _vmath.vec2.create(0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT3, _vmath.vec3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_INT4, _vmath.vec4.create(0, 0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT, 0), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT2, _vmath.vec2.create(0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT3, _vmath.vec3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_FLOAT4, _vmath.vec4.create(0, 0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_COLOR3, _vmath.color3.create(0, 0, 0)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_COLOR4, _vmath.color4.create(0, 0, 0, 1)), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT2, _vmath.mat2.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT3, _vmath.mat3.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_MAT4, _vmath.mat4.create()), _defineProperty(_type2defaultValue, _enums2.default.PARAM_TEXTURE_2D, opts.defaultTexture), _defineProperty(_type2defaultValue, _enums2.default.PARAM_TEXTURE_CUBE, opts.defaultTextureCube), _type2defaultValue);
                this._stage2fn = {};
                this._usedTextureUnits = 0;
                this._viewPools = new _memop.RecyclePool(function () {
                    return new _view2.default();
                }, 8);
                this._drawItemsPools = new _memop.RecyclePool(function () {
                    return {
                        model: null,
                        node: null,
                        ia: null,
                        effect: null,
                        defines: null,
                        uniforms: null
                    };
                }, 100);
                this._stageItemsPools = new _memop.RecyclePool(function () {
                    return new _memop.RecyclePool(function () {
                        return {
                            model: null,
                            node: null,
                            ia: null,
                            effect: null,
                            defines: null,
                            technique: null,
                            sortKey: -1,
                            uniforms: null
                        };
                    }, 100);
                }, 16);
            }
            _createClass(Base, [
                {
                    key: '_resetTextuerUnit',
                    value: function _resetTextuerUnit() {
                        this._usedTextureUnits = 0;
                    }
                },
                {
                    key: '_allocTextureUnit',
                    value: function _allocTextureUnit() {
                        var device = this._device;
                        var unit = this._usedTextureUnits;
                        if (unit >= device._caps.maxTextureUnits) {
                            console.warn('Trying to use ' + unit + ' texture units while this GPU supports only ' + device._caps.maxTextureUnits);
                        }
                        this._usedTextureUnits += 1;
                        return unit;
                    }
                },
                {
                    key: '_registerStage',
                    value: function _registerStage(name, fn) {
                        this._stage2fn[name] = fn;
                    }
                },
                {
                    key: 'clear',
                    value: function clear() {
                        this._programLib.clear();
                        this.reset();
                    }
                },
                {
                    key: 'reset',
                    value: function reset() {
                        this._viewPools.reset();
                        this._stageItemsPools.reset();
                    }
                },
                {
                    key: '_requestView',
                    value: function _requestView() {
                        return this._viewPools.add();
                    }
                },
                {
                    key: '_render',
                    value: function _render(view, scene) {
                        var device = this._device;
                        device.setFrameBuffer(view._framebuffer);
                        device.setViewport(view._rect.x, view._rect.y, view._rect.w, view._rect.h);
                        var clearOpts = {};
                        if (view._clearFlags & _enums2.default.CLEAR_COLOR) {
                            clearOpts.color = [
                                view._color.r,
                                view._color.g,
                                view._color.b,
                                view._color.a
                            ];
                        }
                        if (view._clearFlags & _enums2.default.CLEAR_DEPTH) {
                            clearOpts.depth = view._depth;
                        }
                        if (view._clearFlags & _enums2.default.CLEAR_STENCIL) {
                            clearOpts.stencil = view._stencil;
                        }
                        device.clear(clearOpts);
                        this._drawItemsPools.reset();
                        for (var i = 0; i < scene._models.length; ++i) {
                            var model = scene._models.data[i];
                            if ((model._cullingMask & view._cullingMask) === 0) {
                                continue;
                            }
                            var drawItem = this._drawItemsPools.add();
                            model.extractDrawItem(drawItem);
                        }
                        _stageInfos.reset();
                        for (var _i = 0; _i < view._stages.length; ++_i) {
                            var stage = view._stages[_i];
                            var stageItems = this._stageItemsPools.add();
                            stageItems.reset();
                            for (var j = 0; j < this._drawItemsPools.length; ++j) {
                                var _drawItem = this._drawItemsPools.data[j];
                                var tech = _drawItem.effect.getTechnique(stage);
                                if (tech) {
                                    var stageItem = stageItems.add();
                                    stageItem.model = _drawItem.model;
                                    stageItem.node = _drawItem.node;
                                    stageItem.ia = _drawItem.ia;
                                    stageItem.effect = _drawItem.effect;
                                    stageItem.defines = _drawItem.defines;
                                    stageItem.technique = tech;
                                    stageItem.sortKey = -1;
                                    stageItem.uniforms = _drawItem.uniforms;
                                }
                            }
                            var stageInfo = _stageInfos.add();
                            stageInfo.stage = stage;
                            stageInfo.items = stageItems;
                        }
                        for (var _i2 = 0; _i2 < _stageInfos.length; ++_i2) {
                            var info = _stageInfos.data[_i2];
                            var fn = this._stage2fn[info.stage];
                            fn(view, info.items);
                        }
                    }
                },
                {
                    key: '_setProperty',
                    value: function _setProperty(prop) {
                        var device = this._device;
                        var param = prop.value;
                        if (param === undefined) {
                            param = prop.val;
                        }
                        if (param === undefined) {
                            param = this._type2defaultValue[prop.type];
                        }
                        if (param === undefined) {
                            console.warn('Failed to set technique property ' + prop.name + ', value not found.');
                            return;
                        }
                        if (prop.type === _enums2.default.PARAM_TEXTURE_2D || prop.type === _enums2.default.PARAM_TEXTURE_CUBE) {
                            if (prop.size !== undefined) {
                                if (prop.size !== param.length) {
                                    console.error('The length of texture array (' + param.length + ') is not corrent(expect ' + prop.size + ').');
                                    return;
                                }
                                var slots = _int64_pool.add();
                                for (var index = 0; index < param.length; ++index) {
                                    slots[index] = this._allocTextureUnit();
                                }
                                device.setTextureArray(prop.name, param, slots);
                            } else {
                                device.setTexture(prop.name, param, this._allocTextureUnit());
                            }
                        } else {
                            var convertedValue = void 0;
                            if (param instanceof Float32Array || param instanceof Int32Array) {
                                device.setUniformDirectly(prop.name, param);
                                return;
                            } else if (prop.size !== undefined) {
                                var convertArray = _type2uniformArrayValue[prop.type];
                                if (convertArray.func === undefined) {
                                    console.error('Uniform array of color3/int3/float3/mat3 can not be supportted!');
                                    return;
                                }
                                if (prop.size * convertArray.size > 64) {
                                    console.error('Uniform array is too long!');
                                    return;
                                }
                                convertedValue = convertArray.func(param);
                            } else {
                                var convertFn = _type2uniformValue[prop.type];
                                convertedValue = convertFn(param);
                            }
                            device.setUniform(prop.name, convertedValue);
                        }
                    }
                },
                {
                    key: '_draw',
                    value: function _draw(item) {
                        var device = this._device;
                        var programLib = this._programLib;
                        var node = item.node, ia = item.ia, uniforms = item.uniforms, technique = item.technique, defines = item.defines, effect = item.effect;
                        _float2_pool.reset();
                        _float3_pool.reset();
                        _float4_pool.reset();
                        _float9_pool.reset();
                        _float16_pool.reset();
                        _float64_pool.reset();
                        _int2_pool.reset();
                        _int3_pool.reset();
                        _int4_pool.reset();
                        _int64_pool.reset();
                        node.getWorldMatrix(_m4_tmp);
                        device.setUniform('cc_matWorld', _vmath.mat4.array(_float16_pool.add(), _m4_tmp));
                        var inverse = _vmath.mat3.invert(_m3_tmp, _vmath.mat3.fromMat4(_m3_tmp, _m4_tmp));
                        if (inverse) {
                            _vmath.mat3.transpose(_m3_tmp, inverse);
                            device.setUniform('cc_matWorldIT', _vmath.mat3.array(_float9_pool.add(), _m3_tmp));
                        }
                        for (var i = 0; i < uniforms.length; i++) {
                            var typeUniforms = uniforms[i];
                            for (var key in typeUniforms) {
                                this._setProperty(typeUniforms[key]);
                            }
                        }
                        for (var _i3 = 0; _i3 < technique._passes.length; ++_i3) {
                            var pass = technique._passes[_i3];
                            var count = ia.count;
                            if (ia._vertexBuffer) {
                                device.setVertexBuffer(0, ia._vertexBuffer);
                            }
                            if (ia._indexBuffer) {
                                device.setIndexBuffer(ia._indexBuffer);
                            }
                            device.setPrimitiveType(ia._primitiveType);
                            var program = programLib.getProgram(pass._programName, defines, effect._name);
                            device.setProgram(program);
                            device.setCullMode(pass._cullMode);
                            if (pass._blend) {
                                device.enableBlend();
                                device.setBlendFuncSep(pass._blendSrc, pass._blendDst, pass._blendSrcAlpha, pass._blendDstAlpha);
                                device.setBlendEqSep(pass._blendEq, pass._blendAlphaEq);
                                device.setBlendColor32(pass._blendColor);
                            }
                            if (pass._depthTest) {
                                device.enableDepthTest();
                                device.setDepthFunc(pass._depthFunc);
                            }
                            if (pass._depthWrite) {
                                device.enableDepthWrite();
                            }
                            device.setStencilTest(pass._stencilTest);
                            if (pass._stencilTest === _gfx2.default.STENCIL_ENABLE) {
                                device.setStencilFuncFront(pass._stencilFuncFront, pass._stencilRefFront, pass._stencilMaskFront);
                                device.setStencilOpFront(pass._stencilFailOpFront, pass._stencilZFailOpFront, pass._stencilZPassOpFront, pass._stencilWriteMaskFront);
                                device.setStencilFuncBack(pass._stencilFuncBack, pass._stencilRefBack, pass._stencilMaskBack);
                                device.setStencilOpBack(pass._stencilFailOpBack, pass._stencilZFailOpBack, pass._stencilZPassOpBack, pass._stencilWriteMaskBack);
                            }
                            device.draw(ia._start, count);
                            this._resetTextuerUnit();
                        }
                    }
                }
            ]);
            return Base;
        }();
        exports.default = Base;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,