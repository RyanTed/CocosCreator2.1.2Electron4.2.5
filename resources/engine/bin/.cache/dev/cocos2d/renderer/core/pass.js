(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/pass.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _gfx = require('../gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var Pass = function () {
            function Pass(name) {
                _classCallCheck(this, Pass);
                this._programName = name;
                this._cullMode = _gfx2.default.CULL_BACK;
                this._blend = false;
                this._blendEq = _gfx2.default.BLEND_FUNC_ADD;
                this._blendAlphaEq = _gfx2.default.BLEND_FUNC_ADD;
                this._blendSrc = _gfx2.default.BLEND_SRC_ALPHA;
                this._blendDst = _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                this._blendSrcAlpha = _gfx2.default.BLEND_SRC_ALPHA;
                this._blendDstAlpha = _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                this._blendColor = 4294967295;
                this._depthTest = false;
                this._depthWrite = false;
                this._depthFunc = _gfx2.default.DS_FUNC_LESS, this._stencilTest = _gfx2.default.STENCIL_INHERIT;
                this._stencilFuncFront = _gfx2.default.DS_FUNC_ALWAYS;
                this._stencilRefFront = 0;
                this._stencilMaskFront = 255;
                this._stencilFailOpFront = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZFailOpFront = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZPassOpFront = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilWriteMaskFront = 255;
                this._stencilFuncBack = _gfx2.default.DS_FUNC_ALWAYS;
                this._stencilRefBack = 0;
                this._stencilMaskBack = 255;
                this._stencilFailOpBack = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZFailOpBack = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilZPassOpBack = _gfx2.default.STENCIL_OP_KEEP;
                this._stencilWriteMaskBack = 255;
            }
            _createClass(Pass, [
                {
                    key: 'setCullMode',
                    value: function setCullMode() {
                        var cullMode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.CULL_BACK;
                        this._cullMode = cullMode;
                    }
                },
                {
                    key: 'setBlend',
                    value: function setBlend() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        var blendEq = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _gfx2.default.BLEND_FUNC_ADD;
                        var blendSrc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _gfx2.default.BLEND_SRC_ALPHA;
                        var blendDst = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                        var blendAlphaEq = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _gfx2.default.BLEND_FUNC_ADD;
                        var blendSrcAlpha = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _gfx2.default.BLEND_SRC_ALPHA;
                        var blendDstAlpha = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _gfx2.default.BLEND_ONE_MINUS_SRC_ALPHA;
                        var blendColor = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 4294967295;
                        this._blend = enabled;
                        this._blendEq = blendEq;
                        this._blendSrc = blendSrc;
                        this._blendDst = blendDst;
                        this._blendAlphaEq = blendAlphaEq;
                        this._blendSrcAlpha = blendSrcAlpha;
                        this._blendDstAlpha = blendDstAlpha;
                        this._blendColor = blendColor;
                    }
                },
                {
                    key: 'setDepth',
                    value: function setDepth() {
                        var depthTest = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
                        var depthWrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                        var depthFunc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _gfx2.default.DS_FUNC_LESS;
                        this._depthTest = depthTest;
                        this._depthWrite = depthWrite;
                        this._depthFunc = depthFunc;
                    }
                },
                {
                    key: 'setStencilFront',
                    value: function setStencilFront() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.STENCIL_INHERIT;
                        var stencilFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _gfx2.default.DS_FUNC_ALWAYS;
                        var stencilRef = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var stencilMask = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 255;
                        var stencilFailOp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZFailOp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZPassOp = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilWriteMask = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 255;
                        this._stencilTest = enabled;
                        this._stencilFuncFront = stencilFunc;
                        this._stencilRefFront = stencilRef;
                        this._stencilMaskFront = stencilMask;
                        this._stencilFailOpFront = stencilFailOp;
                        this._stencilZFailOpFront = stencilZFailOp;
                        this._stencilZPassOpFront = stencilZPassOp;
                        this._stencilWriteMaskFront = stencilWriteMask;
                    }
                },
                {
                    key: 'setStencilEnabled',
                    value: function setStencilEnabled() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.STENCIL_INHERIT;
                        this._stencilTest = enabled;
                    }
                },
                {
                    key: 'setStencilBack',
                    value: function setStencilBack() {
                        var enabled = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _gfx2.default.STENCIL_INHERIT;
                        var stencilFunc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _gfx2.default.DS_FUNC_ALWAYS;
                        var stencilRef = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var stencilMask = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 255;
                        var stencilFailOp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZFailOp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilZPassOp = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : _gfx2.default.STENCIL_OP_KEEP;
                        var stencilWriteMask = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 255;
                        this._stencilTest = enabled;
                        this._stencilFuncBack = stencilFunc;
                        this._stencilRefBack = stencilRef;
                        this._stencilMaskBack = stencilMask;
                        this._stencilFailOpBack = stencilFailOp;
                        this._stencilZFailOpBack = stencilZFailOp;
                        this._stencilZPassOpBack = stencilZPassOp;
                        this._stencilWriteMaskBack = stencilWriteMask;
                    }
                }
            ]);
            return Pass;
        }();
        exports.default = Pass;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInBhc3MuanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL3JlbmRlcmVyL2NvcmUvcGFzcy5qcyJdLCJuYW1lcyI6WyJQYXNzIiwibmFtZSIsIl9wcm9ncmFtTmFtZSIsIl9jdWxsTW9kZSIsIkNVTExfQkFDSyIsIl9ibGVuZCIsIl9ibGVuZEVxIiwiQkxFTkRfRlVOQ19BREQiLCJfYmxlbmRBbHBoYUVxIiwiX2JsZW5kU3JjIiwiQkxFTkRfU1JDX0FMUEhBIiwiX2JsZW5kRHN0IiwiQkxFTkRfT05FX01JTlVTX1NSQ19BTFBIQSIsIl9ibGVuZFNyY0FscGhhIiwiX2JsZW5kRHN0QWxwaGEiLCJfYmxlbmRDb2xvciIsIl9kZXB0aFRlc3QiLCJfZGVwdGhXcml0ZSIsIl9kZXB0aEZ1bmMiLCJEU19GVU5DX0xFU1MiLCJfc3RlbmNpbFRlc3QiLCJTVEVOQ0lMX0lOSEVSSVQiLCJfc3RlbmNpbEZ1bmNGcm9udCIsIkRTX0ZVTkNfQUxXQVlTIiwiX3N0ZW5jaWxSZWZGcm9udCIsIl9zdGVuY2lsTWFza0Zyb250IiwiX3N0ZW5jaWxGYWlsT3BGcm9udCIsIlNURU5DSUxfT1BfS0VFUCIsIl9zdGVuY2lsWkZhaWxPcEZyb250IiwiX3N0ZW5jaWxaUGFzc09wRnJvbnQiLCJfc3RlbmNpbFdyaXRlTWFza0Zyb250IiwiX3N0ZW5jaWxGdW5jQmFjayIsIl9zdGVuY2lsUmVmQmFjayIsIl9zdGVuY2lsTWFza0JhY2siLCJfc3RlbmNpbEZhaWxPcEJhY2siLCJfc3RlbmNpbFpGYWlsT3BCYWNrIiwiX3N0ZW5jaWxaUGFzc09wQmFjayIsIl9zdGVuY2lsV3JpdGVNYXNrQmFjayIsImN1bGxNb2RlIiwiZW5hYmxlZCIsImJsZW5kRXEiLCJibGVuZFNyYyIsImJsZW5kRHN0IiwiYmxlbmRBbHBoYUVxIiwiYmxlbmRTcmNBbHBoYSIsImJsZW5kRHN0QWxwaGEiLCJibGVuZENvbG9yIiwiZGVwdGhUZXN0IiwiZGVwdGhXcml0ZSIsImRlcHRoRnVuYyIsInN0ZW5jaWxGdW5jIiwic3RlbmNpbFJlZiIsInN0ZW5jaWxNYXNrIiwic3RlbmNpbEZhaWxPcCIsInN0ZW5jaWxaRmFpbE9wIiwic3RlbmNpbFpQYXNzT3AiLCJzdGVuY2lsV3JpdGVNYXNrIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQUVBLElBQUEsSUFBQSxHQUFBLE9BQUEsQ0FBQSxRQUFBLENBQUE7Ozs7Ozs7Ozs7WUFFcUJBLElBQUFBO1lBQ25CLFNBQUEsSUFBQSxDQUFZQyxJQUFaLEVBQWtCO0FBQUEsZ0JBQUEsZUFBQSxDQUFBLElBQUEsRUFBQSxJQUFBLEVBQUE7QUFBQSxnQkFDaEIsS0FBS0MsWUFBTCxHQUFvQkQsSUFBcEIsQ0FEZ0I7QUFBQSxnQkFJaEIsS0FBS0UsU0FBTCxHQUFpQixLQUFBLENBQUEsT0FBQSxDQUFJQyxTQUFyQixDQUpnQjtBQUFBLGdCQU9oQixLQUFLQyxNQUFMLEdBQWMsS0FBZCxDQVBnQjtBQUFBLGdCQVFoQixLQUFLQyxRQUFMLEdBQWdCLEtBQUEsQ0FBQSxPQUFBLENBQUlDLGNBQXBCLENBUmdCO0FBQUEsZ0JBU2hCLEtBQUtDLGFBQUwsR0FBcUIsS0FBQSxDQUFBLE9BQUEsQ0FBSUQsY0FBekIsQ0FUZ0I7QUFBQSxnQkFVaEIsS0FBS0UsU0FBTCxHQUFpQixLQUFBLENBQUEsT0FBQSxDQUFJQyxlQUFyQixDQVZnQjtBQUFBLGdCQVdoQixLQUFLQyxTQUFMLEdBQWlCLEtBQUEsQ0FBQSxPQUFBLENBQUlDLHlCQUFyQixDQVhnQjtBQUFBLGdCQVloQixLQUFLQyxjQUFMLEdBQXNCLEtBQUEsQ0FBQSxPQUFBLENBQUlILGVBQTFCLENBWmdCO0FBQUEsZ0JBYWhCLEtBQUtJLGNBQUwsR0FBc0IsS0FBQSxDQUFBLE9BQUEsQ0FBSUYseUJBQTFCLENBYmdCO0FBQUEsZ0JBY2hCLEtBQUtHLFdBQUwsR0FBbUIsVUFBbkIsQ0FkZ0I7QUFBQSxnQkFpQmhCLEtBQUtDLFVBQUwsR0FBa0Is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N0IsQ0FSQTtBQUFBOzs7OzswQkE3R2lCeEQ7Ozs7Ozs7WUFDRCxRQUFBLENBQUEsUUFBQSxDQUFBLE9BQUEsRUFBQSxTQUFBLEVBQUEsUUFBQSIsImZpbGUiOiJwYXNzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG5pbXBvcnQgZ2Z4IGZyb20gJy4uL2dmeCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQYXNzIHtcclxuICBjb25zdHJ1Y3RvcihuYW1lKSB7XHJcbiAgICB0aGlzLl9wcm9ncmFtTmFtZSA9IG5hbWU7XHJcblxyXG4gICAgLy8gY3VsbG1vZGVcclxuICAgIHRoaXMuX2N1bGxNb2RlID0gZ2Z4LkNVTExfQkFDSztcclxuXHJcbiAgICAvLyBibGVuZGluZ1xyXG4gICAgdGhpcy5fYmxlbmQgPSBmYWxzZTtcclxuICAgIHRoaXMuX2JsZW5kRXEgPSBnZnguQkxFTkRfRlVOQ19BREQ7XHJcbiAgICB0aGlzLl9ibGVuZEFscGhhRXEgPSBnZnguQkxFTkRfRlVOQ19BREQ7XHJcbiAgICB0aGlzLl9ibGVuZFNyYyA9IGdmeC5CTEVORF9TUkNfQUxQSEE7XHJcbiAgICB0aGlzLl9ibGVuZERzdCA9IGdmeC5CTEVORF9PTkVfTUlOVVNfU1JDX0FMUEhBO1xyXG4gICAgdGhpcy5fYmxlbmRTcmNBbHBoYSA9IGdmeC5CTEVORF9TUkNfQUxQSEE7XHJcbiAgICB0aGlzLl9ibGVuZERzdEFscGhhID0gZ2Z4LkJMRU5EX09ORV9NSU5VU19TUkNfQUxQSEE7XHJcbiAgICB0aGlzLl9ibGVuZENvbG9yID0gMHhmZmZmZmZmZjtcclxuXHJcbiAgICAvLyBkZXB0aFxyXG4gICAgdGhpcy5fZGVwdGhUZXN0ID0gZmFsc2U7XHJcbiAgICB0aGlzLl9kZXB0aFdyaXRlID0gZmFsc2U7XHJcbiAgICB0aGlzLl9kZXB0aEZ1bmMgPSBnZnguRFNfRlVOQ19MRVNTLFxyXG5cclxuICAgIC8vIHN0ZW5jaWxcclxuICAgIHRoaXMuX3N0ZW5jaWxUZXN0ID0gZ2Z4LlNURU5DSUxfSU5IRVJJVDtcclxuICAgIC8vIGZyb250XHJcbiAgICB0aGlzLl9zdGVuY2lsRnVuY0Zyb250ID0gZ2Z4LkRTX0ZVTkNfQUxXQVlTO1xyXG4gICAgdGhpcy5fc3RlbmNpbFJlZkZyb250ID0gMDtcclxuICAgIHRoaXMuX3N0ZW5jaWxNYXNrRnJvbnQgPSAweGZmO1xyXG4gICAgdGhpcy5fc3RlbmNpbEZhaWxPcEZyb250ID0gZ2Z4LlNURU5DSUxfT1BfS0VFUDtcclxuICAgIHRoaXMuX3N0ZW5jaWxaRmFpbE9wRnJvbnQgPSBnZnguU1RFTkNJTF9PUF9LRUVQO1xyXG4gICAgdGhpcy5fc3RlbmNpbFpQYXNzT3BGcm9udCA9IGdmeC5TVEVOQ0lMX09QX0tFRVA7XHJcbiAgICB0aGlzLl9zdGVuY2lsV3JpdGVNYXNrRnJvbnQgPSAweGZmO1xyXG4gICAgLy8gYmFja1xyXG4gICAgdGhpcy5fc3RlbmNpbEZ1bmNCYWNrID0gZ2Z4LkRTX0ZVTkNfQUxXQVlTO1xyXG4gICAgdGhpcy5fc3RlbmNpbFJlZkJhY2sgPSAwO1xyXG4gICAgdGhpcy5fc3RlbmNpbE1hc2tCYWNrID0gMHhmZjtcclxuICAgIHRoaXMuX3N0ZW5jaWxGYWlsT3BCYWNrID0gZ2Z4LlNURU5DSUxfT1BfS0VFUDtcclxuICAgIHRoaXMuX3N0ZW5jaWxaRmFpbE9wQmFjayA9IGdmeC5TVEVOQ0lMX09QX0tFRVA7XHJcbiAgICB0aGlzLl9zdGVuY2lsWlBhc3NPcEJhY2sgPSBnZnguU1RFTkNJTF9PUF9LRUVQO1xyXG4gICAgdGhpcy5fc3RlbmNpbFdyaXRlTWFza0JhY2sgPSAweGZmO1xyXG4gIH1cclxuXHJcbiAgc2V0Q3VsbE1vZGUoY3VsbE1vZGUgPSBnZnguQ1VMTF9CQUNLKSB7XHJcbiAgICB0aGlzLl9jdWxsTW9kZSA9IGN1bGxNb2RlO1xyXG4gIH1cclxuXHJcbiAgc2V0QmxlbmQoXHJcbiAgICBlbmFibGVkID0gZmFsc2UsXHJcbiAgICBibGVuZEVxID0gZ2Z4LkJMRU5EX0ZVTkNfQURELFxyXG4gICAgYmxlbmRTcmMgPSBnZnguQkxFTkRfU1JDX0FMUEhBLFxyXG4gICAgYmxlbmREc3QgPSBnZnguQkxFTkRfT05FX01JTlVTX1NSQ19BTFBIQSxcclxuICAgIGJsZW5kQWxwaGFFcSA9IGdmeC5CTEVORF9GVU5DX0FERCxcclxuICAgIGJsZW5kU3JjQWxwaGEgPSBnZnguQkxFTkRfU1JDX0FMUEhBLFxyXG4gICAgYmxlbmREc3RBbHBoYSA9IGdmeC5CTEVORF9PTkVfTUlOVVNfU1JDX0FMUEhBLFxyXG4gICAgYmxlbmRDb2xvciA9IDB4ZmZmZmZmZmZcclxuICApIHtcclxuICAgIHRoaXMuX2JsZW5kID0gZW5hYmxlZDtcclxuICAgIHRoaXMuX2JsZW5kRXEgPSBibGVuZEVxO1xyXG4gICAgdGhpcy5fYmxlbmRTcmMgPSBibGVuZFNyYztcclxuICAgIHRoaXMuX2JsZW5kRHN0ID0gYmxlbmREc3Q7XHJcbiAgICB0aGlzLl9ibGVuZEFscGhhRXEgPSBibGVuZEFscGhhRXE7XHJcbiAgICB0aGlzLl9ibGVuZFNyY0FscGhhID0gYmxlbmRTcmNBbHBoYTtcclxuICAgIHRoaXMuX2JsZW5kRHN0QWxwaGEgPSBibGVuZERzdEFscGhhO1xyXG4gICAgdGhpcy5fYmxlbmRDb2xvciA9IGJsZW5kQ29sb3I7XHJcbiAgfVxyXG5cclxuICBzZXREZXB0aChcclxuICAgIGRlcHRoVGVzdCA9IGZhbHNlLFxyXG4gICAgZGVwdGhXcml0ZSA9IGZhbHNlLFxyXG4gICAgZGVwdGhGdW5jID0gZ2Z4LkRTX0ZVTkNfTEVTU1xyXG4gICkge1xyXG4gICAgdGhpcy5fZGVwdGhUZXN0ID0gZGVwdGhUZXN0O1xyXG4gICAgdGhpcy5fZGVwdGhXcml0ZSA9IGRlcHRoV3JpdGU7XHJcbiAgICB0aGlzLl9kZXB0aEZ1bmMgPSBkZXB0aEZ1bmM7XHJcbiAgfVxyXG5cclxuICBzZXRTdGVuY2lsRnJvbnQoXHJcbiAgICBlbmFibGVkID0gZ2Z4LlNURU5DSUxfSU5IRVJJVCxcclxuICAgIHN0ZW5jaWxGdW5jID0gZ2Z4LkRTX0ZVTkNfQUxXQVlTLFxyXG4gICAgc3RlbmNpbFJlZiA9IDAsXHJcbiAgICBzdGVuY2lsTWFzayA9IDB4ZmYsXHJcbiAgICBzdGVuY2lsRmFpbE9wID0gZ2Z4LlNURU5DSUxfT1BfS0VFUCxcclxuICAgIHN0ZW5jaWxaRmFpbE9wID0gZ2Z4LlNURU5DSUxfT1BfS0VFUCxcclxuICAgIHN0ZW5jaWxaUGFzc09wID0gZ2Z4LlNURU5DSUxfT1BfS0VFUCxcclxuICAgIHN0ZW5jaWxXcml0ZU1hc2sgPSAweGZmXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9zdGVuY2lsVGVzdCA9IGVuYWJsZWQ7XHJcbiAgICB0aGlzLl9zdGVuY2lsRnVuY0Zyb250ID0gc3RlbmNpbEZ1bmM7XHJcbiAgICB0aGlzLl9zdGVuY2lsUmVmRnJvbnQgPSBzdGVuY2lsUmVmO1xyXG4gICAgdGhpcy5fc3RlbmNpbE1hc2tGcm9udCA9IHN0ZW5jaWxNYXNrO1xyXG4gICAgdGhpcy5fc3RlbmNpbEZhaWxPcEZyb250ID0gc3RlbmNpbEZhaWxPcDtcclxuICAgIHRoaXMuX3N0ZW5jaWxaRmFpbE9wRnJvbnQgPSBzdGVuY2lsWkZhaWxPcDtcclxuICAgIHRoaXMuX3N0ZW5jaWxaUGFzc09wRnJvbnQgPSBzdGVuY2lsWlBhc3NPcDtcclxuICAgIHRoaXMuX3N0ZW5jaWxXcml0ZU1hc2tGcm9udCA9IHN0ZW5jaWxXcml0ZU1hc2s7XHJcbiAgfVxyXG5cclxuICBzZXRTdGVuY2lsRW5hYmxlZCAoZW5hYmxlZCA9IGdmeC5TVEVOQ0lMX0lOSEVSSVQpIHtcclxuICAgIHRoaXMuX3N0ZW5jaWxUZXN0ID0gZW5hYmxlZDtcclxuICB9XHJcblxyXG4gIHNldFN0ZW5jaWxCYWNrKFxyXG4gICAgZW5hYmxlZCA9IGdmeC5TVEVOQ0lMX0lOSEVSSVQsXHJcbiAgICBzdGVuY2lsRnVuYyA9IGdmeC5EU19GVU5DX0FMV0FZUyxcclxuICAgIHN0ZW5jaWxSZWYgPSAwLFxyXG4gICAgc3RlbmNpbE1hc2sgPSAweGZmLFxyXG4gICAgc3RlbmNpbEZhaWxPcCA9IGdmeC5TVEVOQ0lMX09QX0tFRVAsXHJcbiAgICBzdGVuY2lsWkZhaWxPcCA9IGdmeC5TVEVOQ0lMX09QX0tFRVAsXHJcbiAgICBzdGVuY2lsWlBhc3NPcCA9IGdmeC5TVEVOQ0lMX09QX0tFRVAsXHJcbiAgICBzdGVuY2lsV3JpdGVNYXNrID0gMHhmZlxyXG4gICkge1xyXG4gICAgdGhpcy5fc3RlbmNpbFRlc3QgPSBlbmFibGVkO1xyXG4gICAgdGhpcy5fc3RlbmNpbEZ1bmNCYWNrID0gc3RlbmNpbEZ1bmM7XHJcbiAgICB0aGlzLl9zdGVuY2lsUmVmQmFjayA9IHN0ZW5jaWxSZWY7XHJcbiAgICB0aGlzLl9zdGVuY2lsTWFza0JhY2sgPSBzdGVuY2lsTWFzaztcclxuICAgIHRoaXMuX3N0ZW5jaWxGYWlsT3BCYWNrID0gc3RlbmNpbEZhaWxPcDtcclxuICAgIHRoaXMuX3N0ZW5jaWxaRmFpbE9wQmFjayA9IHN0ZW5jaWxaRmFpbE9wO1xyXG4gICAgdGhpcy5fc3RlbmNpbFpQYXNzT3BCYWNrID0gc3RlbmNpbFpQYXNzT3A7XHJcbiAgICB0aGlzLl9zdGVuY2lsV3JpdGVNYXNrQmFjayA9IHN0ZW5jaWxXcml0ZU1hc2s7XHJcbiAgfVxyXG59IiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdW5kZWZpbmVkO1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpOyAvLyBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cblxudmFyIF9nZnggPSByZXF1aXJlKCcuLi9nZngnKTtcblxudmFyIF9nZngyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2Z4KTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxudmFyIFBhc3MgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBhc3MobmFtZSkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBQYXNzKTtcblxuICAgIHRoaXMuX3Byb2dyYW1OYW1lID0gbmFtZTtcblxuICAgIC8vIGN1bGxtb2RlXG4gICAgdGhpcy5fY3VsbE1vZGUgPSBfZ2Z4Mi5kZWZhdWx0LkNVTExfQkFDSztcblxuICAgIC8vIGJsZW5kaW5nXG4gICAgdGhpcy5fYmxlbmQgPSBmYWxzZTtcbiAgICB0aGlzLl9ibGVuZEVxID0gX2dmeDIuZGVmYXVsdC5CTEVORF9GVU5DX0FERDtcbiAgICB0aGlzLl9ibGVuZEFscGhhRXEgPSBfZ2Z4Mi5kZWZhdWx0LkJMRU5EX0ZVTkNfQUREO1xuICAgIHRoaXMuX2JsZW5kU3JjID0gX2dmeDIuZGVmYXVsdC5CTEVORF9TUkNfQUxQSEE7XG4gICAgdGhpcy5fYmxlbmREc3QgPSBfZ2Z4Mi5kZWZhdWx0LkJMRU5EX09ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgdGhpcy5fYmxlbmRTcmNBbHBoYSA9IF9nZngyLmRlZmF1bHQuQkxFTkRfU1JDX0FMUEhBO1xuICAgIHRoaXMuX2JsZW5kRHN0QWxwaGEgPSBfZ2Z4Mi5kZWZhdWx0LkJMRU5EX09ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgdGhpcy5fYmxlbmRDb2xvciA9IDB4ZmZmZmZmZmY7XG5cbiAgICAvLyBkZXB0aFxuICAgIHRoaXMuX2RlcHRoVGVzdCA9IGZhbHNlO1xuICAgIHRoaXMuX2RlcHRoV3JpdGUgPSBmYWxzZTtcbiAgICB0aGlzLl9kZXB0aEZ1bmMgPSBfZ2Z4Mi5kZWZhdWx0LkRTX0ZVTkNfTEVTUyxcblxuICAgIC8vIHN0ZW5jaWxcbiAgICB0aGlzLl9zdGVuY2lsVGVzdCA9IF9nZngyLmRlZmF1bHQuU1RFTkNJTF9JTkhFUklUO1xuICAgIC8vIGZyb250XG4gICAgdGhpcy5fc3RlbmNpbEZ1bmNGcm9udCA9IF9nZngyLmRlZmF1bHQuRFNfRlVOQ19BTFdBWVM7XG4gICAgdGhpcy5fc3RlbmNpbFJlZkZyb250ID0gMDtcbiAgICB0aGlzLl9zdGVuY2lsTWFza0Zyb250ID0gMHhmZjtcbiAgICB0aGlzLl9zdGVuY2lsRmFpbE9wRnJvbnQgPSBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfT1BfS0VFUDtcbiAgICB0aGlzLl9zdGVuY2lsWkZhaWxPcEZyb250ID0gX2dmeDIuZGVmYXVsdC5TVEVOQ0lMX09QX0tFRVA7XG4gICAgdGhpcy5fc3RlbmNpbFpQYXNzT3BGcm9udCA9IF9nZngyLmRlZmF1bHQuU1RFTkNJTF9PUF9LRUVQO1xuICAgIHRoaXMuX3N0ZW5jaWxXcml0ZU1hc2tGcm9udCA9IDB4ZmY7XG4gICAgLy8gYmFja1xuICAgIHRoaXMuX3N0ZW5jaWxGdW5jQmFjayA9IF9nZngyLmRlZmF1bHQuRFNfRlVOQ19BTFdBWVM7XG4gICAgdGhpcy5fc3RlbmNpbFJlZkJhY2sgPSAwO1xuICAgIHRoaXMuX3N0ZW5jaWxNYXNrQmFjayA9IDB4ZmY7XG4gICAgdGhpcy5fc3RlbmNpbEZhaWxPcEJhY2sgPSBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfT1BfS0VFUDtcbiAgICB0aGlzLl9zdGVuY2lsWkZhaWxPcEJhY2sgPSBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfT1BfS0VFUDtcbiAgICB0aGlzLl9zdGVuY2lsWlBhc3NPcEJhY2sgPSBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfT1BfS0VFUDtcbiAgICB0aGlzLl9zdGVuY2lsV3JpdGVNYXNrQmFjayA9IDB4ZmY7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoUGFzcywgW3tcbiAgICBrZXk6ICdzZXRDdWxsTW9kZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEN1bGxNb2RlKCkge1xuICAgICAgdmFyIGN1bGxNb2RlID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBfZ2Z4Mi5kZWZhdWx0LkNVTExfQkFDSztcblxuICAgICAgdGhpcy5fY3VsbE1vZGUgPSBjdWxsTW9kZTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRCbGVuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldEJsZW5kKCkge1xuICAgICAgdmFyIGVuYWJsZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgICAgdmFyIGJsZW5kRXEgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IF9nZngyLmRlZmF1bHQuQkxFTkRfRlVOQ19BREQ7XG4gICAgICB2YXIgYmxlbmRTcmMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9nZngyLmRlZmF1bHQuQkxFTkRfU1JDX0FMUEhBO1xuICAgICAgdmFyIGJsZW5kRHN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiBfZ2Z4Mi5kZWZhdWx0LkJMRU5EX09ORV9NSU5VU19TUkNfQUxQSEE7XG4gICAgICB2YXIgYmxlbmRBbHBoYUVxID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBfZ2Z4Mi5kZWZhdWx0LkJMRU5EX0ZVTkNfQUREO1xuICAgICAgdmFyIGJsZW5kU3JjQWxwaGEgPSBhcmd1bWVudHMubGVuZ3RoID4gNSAmJiBhcmd1bWVudHNbNV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s1XSA6IF9nZngyLmRlZmF1bHQuQkxFTkRfU1JDX0FMUEhBO1xuICAgICAgdmFyIGJsZW5kRHN0QWxwaGEgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IF9nZngyLmRlZmF1bHQuQkxFTkRfT05FX01JTlVTX1NSQ19BTFBIQTtcbiAgICAgIHZhciBibGVuZENvbG9yID0gYXJndW1lbnRzLmxlbmd0aCA+IDcgJiYgYXJndW1lbnRzWzddICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbN10gOiAweGZmZmZmZmZmO1xuXG4gICAgICB0aGlzLl9ibGVuZCA9IGVuYWJsZWQ7XG4gICAgICB0aGlzLl9ibGVuZEVxID0gYmxlbmRFcTtcbiAgICAgIHRoaXMuX2JsZW5kU3JjID0gYmxlbmRTcmM7XG4gICAgICB0aGlzLl9ibGVuZERzdCA9IGJsZW5kRHN0O1xuICAgICAgdGhpcy5fYmxlbmRBbHBoYUVxID0gYmxlbmRBbHBoYUVxO1xuICAgICAgdGhpcy5fYmxlbmRTcmNBbHBoYSA9IGJsZW5kU3JjQWxwaGE7XG4gICAgICB0aGlzLl9ibGVuZERzdEFscGhhID0gYmxlbmREc3RBbHBoYTtcbiAgICAgIHRoaXMuX2JsZW5kQ29sb3IgPSBibGVuZENvbG9yO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NldERlcHRoJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0RGVwdGgoKSB7XG4gICAgICB2YXIgZGVwdGhUZXN0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICAgIHZhciBkZXB0aFdyaXRlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBmYWxzZTtcbiAgICAgIHZhciBkZXB0aEZ1bmMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IF9nZngyLmRlZmF1bHQuRFNfRlVOQ19MRVNTO1xuXG4gICAgICB0aGlzLl9kZXB0aFRlc3QgPSBkZXB0aFRlc3Q7XG4gICAgICB0aGlzLl9kZXB0aFdyaXRlID0gZGVwdGhXcml0ZTtcbiAgICAgIHRoaXMuX2RlcHRoRnVuYyA9IGRlcHRoRnVuYztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTdGVuY2lsRnJvbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGVuY2lsRnJvbnQoKSB7XG4gICAgICB2YXIgZW5hYmxlZCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogX2dmeDIuZGVmYXVsdC5TVEVOQ0lMX0lOSEVSSVQ7XG4gICAgICB2YXIgc3RlbmNpbEZ1bmMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IF9nZngyLmRlZmF1bHQuRFNfRlVOQ19BTFdBWVM7XG4gICAgICB2YXIgc3RlbmNpbFJlZiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICAgIHZhciBzdGVuY2lsTWFzayA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDogMHhmZjtcbiAgICAgIHZhciBzdGVuY2lsRmFpbE9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfT1BfS0VFUDtcbiAgICAgIHZhciBzdGVuY2lsWkZhaWxPcCA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDogX2dmeDIuZGVmYXVsdC5TVEVOQ0lMX09QX0tFRVA7XG4gICAgICB2YXIgc3RlbmNpbFpQYXNzT3AgPSBhcmd1bWVudHMubGVuZ3RoID4gNiAmJiBhcmd1bWVudHNbNl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s2XSA6IF9nZngyLmRlZmF1bHQuU1RFTkNJTF9PUF9LRUVQO1xuICAgICAgdmFyIHN0ZW5jaWxXcml0ZU1hc2sgPSBhcmd1bWVudHMubGVuZ3RoID4gNyAmJiBhcmd1bWVudHNbN10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s3XSA6IDB4ZmY7XG5cbiAgICAgIHRoaXMuX3N0ZW5jaWxUZXN0ID0gZW5hYmxlZDtcbiAgICAgIHRoaXMuX3N0ZW5jaWxGdW5jRnJvbnQgPSBzdGVuY2lsRnVuYztcbiAgICAgIHRoaXMuX3N0ZW5jaWxSZWZGcm9udCA9IHN0ZW5jaWxSZWY7XG4gICAgICB0aGlzLl9zdGVuY2lsTWFza0Zyb250ID0gc3RlbmNpbE1hc2s7XG4gICAgICB0aGlzLl9zdGVuY2lsRmFpbE9wRnJvbnQgPSBzdGVuY2lsRmFpbE9wO1xuICAgICAgdGhpcy5fc3RlbmNpbFpGYWlsT3BGcm9udCA9IHN0ZW5jaWxaRmFpbE9wO1xuICAgICAgdGhpcy5fc3RlbmNpbFpQYXNzT3BGcm9udCA9IHN0ZW5jaWxaUGFzc09wO1xuICAgICAgdGhpcy5fc3RlbmNpbFdyaXRlTWFza0Zyb250ID0gc3RlbmNpbFdyaXRlTWFzaztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdzZXRTdGVuY2lsRW5hYmxlZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNldFN0ZW5jaWxFbmFibGVkKCkge1xuICAgICAgdmFyIGVuYWJsZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IF9nZngyLmRlZmF1bHQuU1RFTkNJTF9JTkhFUklUO1xuXG4gICAgICB0aGlzLl9zdGVuY2lsVGVzdCA9IGVuYWJsZWQ7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnc2V0U3RlbmNpbEJhY2snLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRTdGVuY2lsQmFjaygpIHtcbiAgICAgIHZhciBlbmFibGVkID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfSU5IRVJJVDtcbiAgICAgIHZhciBzdGVuY2lsRnVuYyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogX2dmeDIuZGVmYXVsdC5EU19GVU5DX0FMV0FZUztcbiAgICAgIHZhciBzdGVuY2lsUmVmID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgICAgdmFyIHN0ZW5jaWxNYXNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiAweGZmO1xuICAgICAgdmFyIHN0ZW5jaWxGYWlsT3AgPSBhcmd1bWVudHMubGVuZ3RoID4gNCAmJiBhcmd1bWVudHNbNF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1s0XSA6IF9nZngyLmRlZmF1bHQuU1RFTkNJTF9PUF9LRUVQO1xuICAgICAgdmFyIHN0ZW5jaWxaRmFpbE9wID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiBfZ2Z4Mi5kZWZhdWx0LlNURU5DSUxfT1BfS0VFUDtcbiAgICAgIHZhciBzdGVuY2lsWlBhc3NPcCA9IGFyZ3VtZW50cy5sZW5ndGggPiA2ICYmIGFyZ3VtZW50c1s2XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzZdIDogX2dmeDIuZGVmYXVsdC5TVEVOQ0lMX09QX0tFRVA7XG4gICAgICB2YXIgc3RlbmNpbFdyaXRlTWFzayA9IGFyZ3VtZW50cy5sZW5ndGggPiA3ICYmIGFyZ3VtZW50c1s3XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzddIDogMHhmZjtcblxuICAgICAgdGhpcy5fc3RlbmNpbFRlc3QgPSBlbmFibGVkO1xuICAgICAgdGhpcy5fc3RlbmNpbEZ1bmNCYWNrID0gc3RlbmNpbEZ1bmM7XG4gICAgICB0aGlzLl9zdGVuY2lsUmVmQmFjayA9IHN0ZW5jaWxSZWY7XG4gICAgICB0aGlzLl9zdGVuY2lsTWFza0JhY2sgPSBzdGVuY2lsTWFzaztcbiAgICAgIHRoaXMuX3N0ZW5jaWxGYWlsT3BCYWNrID0gc3RlbmNpbEZhaWxPcDtcbiAgICAgIHRoaXMuX3N0ZW5jaWxaRmFpbE9wQmFjayA9IHN0ZW5jaWxaRmFpbE9wO1xuICAgICAgdGhpcy5fc3RlbmNpbFpQYXNzT3BCYWNrID0gc3RlbmNpbFpQYXNzT3A7XG4gICAgICB0aGlzLl9zdGVuY2lsV3JpdGVNYXNrQmFjayA9IHN0ZW5jaWxXcml0ZU1hc2s7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFBhc3M7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IFBhc3M7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluQmhjM011YW5NaVhTd2libUZ0WlhNaU9sc2lVR0Z6Y3lJc0ltNWhiV1VpTENKZmNISnZaM0poYlU1aGJXVWlMQ0pmWTNWc2JFMXZaR1VpTENKRFZVeE1YMEpCUTBzaUxDSmZZbXhsYm1RaUxDSmZZbXhsYm1SRmNTSXNJa0pNUlU1RVgwWlZUa05mUVVSRUlpd2lYMkpzWlc1a1FXeHdhR0ZGY1NJc0lsOWliR1Z1WkZOeVl5SXNJa0pNUlU1RVgxTlNRMTlCVEZCSVFTSXNJbDlpYkdWdVpFUnpkQ0lzSWtKTVJVNUVYMDlPUlY5TlNVNVZVMTlUVWtOZlFVeFFTRUVpTENKZllteGxibVJUY21OQmJIQm9ZU0lzSWw5aWJHVnVaRVJ6ZEVGc2NHaGhJaXdpWDJKc1pXNWtRMjlzYjNJaUxDSmZaR1Z3ZEdoVVpYTjBJaXdpWDJSbGNIUm9WM0pwZEdVaUxDSmZaR1Z3ZEdoR2RXNWpJaXdpUkZOZlJsVk9RMTlNUlZOVElpd2lYM04wWlc1amFXeFVaWE4wSWl3aVUxUkZUa05KVEY5SlRraEZVa2xVSWl3aVgzTjBaVzVqYVd4R2RXNWpSbkp2Ym5RaUxDSkVVMTlHVlU1RFgwRk1WMEZaVXlJc0lsOXpkR1Z1WTJsc1VtVm1Sbkp2Ym5RaUxDSmZjM1JsYm1OcGJFMWhjMnRHY205dWRDSXNJbDl6ZEdWdVkybHNSbUZwYkU5d1JuSnZiblFpTENKVFZFVk9RMGxNWDA5UVgwdEZSVkFpTENKZmMzUmxibU5wYkZwR1lXbHNUM0JHY205dWRDSXNJbDl6ZEdWdVkybHNXbEJoYzNOUGNFWnliMjUwSWl3aVgzTjBaVzVqYVd4WGNtbDBaVTFoYzJ0R2NtOXVkQ0lzSWw5emRHVnVZMmxzUm5WdVkwSmhZMnNpTENKZmMzUmxibU5wYkZKbFprSmhZMnNpTENKZmMzUmxibU5wYkUxaGMydENZV05ySWl3aVgzTjBaVzVqYVd4R1lXbHNUM0JDWVdOcklpd2lYM04wWlc1amFXeGFSbUZwYkU5d1FtRmpheUlzSWw5emRHVnVZMmxzV2xCaGMzTlBjRUpoWTJzaUxDSmZjM1JsYm1OcGJGZHlhWFJsVFdGemEwSmhZMnNpTENKamRXeHNUVzlrWlNJc0ltVnVZV0pzWldRaUxDSmliR1Z1WkVWeElpd2lZbXhsYm1SVGNtTWlMQ0ppYkdWdVpFUnpkQ0lzSW1Kc1pXNWtRV3h3YUdGRmNTSXNJbUpzWlc1a1UzSmpRV3h3YUdFaUxDSmliR1Z1WkVSemRFRnNjR2hoSWl3aVlteGxibVJEYjJ4dmNpSXNJbVJsY0hSb1ZHVnpkQ0lzSW1SbGNIUm9WM0pwZEdVaUxDSmtaWEIwYUVaMWJtTWlMQ0p6ZEdWdVkybHNSblZ1WXlJc0luTjBaVzVqYVd4U1pXWWlMQ0p6ZEdWdVkybHNUV0Z6YXlJc0luTjBaVzVqYVd4R1lXbHNUM0FpTENKemRHVnVZMmxzV2taaGFXeFBjQ0lzSW5OMFpXNWphV3hhVUdGemMwOXdJaXdpYzNSbGJtTnBiRmR5YVhSbFRXRnpheUpkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3p0eGFrSkJRVUU3TzBGQlJVRTdPenM3T3pzN08wbEJSWEZDUVN4Sk8wRkJRMjVDTEdkQ1FVRlpReXhKUVVGYUxFVkJRV3RDTzBGQlFVRTdPMEZCUTJoQ0xGTkJRVXRETEZsQlFVd3NSMEZCYjBKRUxFbEJRWEJDT3p0QlFVVkJPMEZCUTBFc1UwRkJTMFVzVTBGQlRDeEhRVUZwUWl4alFVRkpReXhUUVVGeVFqczdRVUZGUVR0QlFVTkJMRk5CUVV0RExFMUJRVXdzUjBGQll5eExRVUZrTzBGQlEwRXNVMEZCUzBNc1VVRkJUQ3hIUVVGblFpeGpRVUZKUXl4alFVRndRanRCUVVOQkxGTkJRVXRETEdGQlFVd3NSMEZCY1VJc1kwRkJTVVFzWTBGQmVrSTdRVUZEUVN4VFFVRkxSU3hUUVVGTUxFZEJRV2xDTEdOQlFVbERMR1ZCUVhKQ08wRkJRMEVzVTBGQlMwTXNVMEZCVEN4SFFVRnBRaXhqUVVGSlF5eDVRa0ZCY2tJN1FVRkRRU3hUUVVGTFF5eGpRVUZNTEVkQlFYTkNMR05CUVVsSUxHVkJRVEZDTzBGQlEwRXNVMEZCUzBrc1kwRkJUQ3hIUVVGelFpeGpRVUZKUml4NVFrRkJNVUk3UVVGRFFTeFRRVUZMUnl4WFFVRk1MRWRCUVcxQ0xGVkJRVzVDT3p0QlFVVkJPMEZCUTBFc1UwRkJTME1zVlVGQlRDeEhRVUZyUWl4TFFVRnNRanRCUVVOQkxGTkJRVXRETEZkQlFVd3NSMEZCYlVJc1MwRkJia0k3UVVGRFFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q0xHTkJRVWxETEZsQlFYUkNPenRCUVVWQk8wRkJRMEVzVTBGQlMwTXNXVUZCVEN4SFFVRnZRaXhqUVVGSlF5eGxRVWg0UWp0QlFVbEJPMEZCUTBFc1UwRkJTME1zYVVKQlFVd3NSMEZCZVVJc1kwRkJTVU1zWTBGQk4wSTdRVUZEUVN4VFFVRkxReXhuUWtGQlRDeEhRVUYzUWl4RFFVRjRRanRCUVVOQkxGTkJRVXRETEdsQ1FVRk1MRWRCUVhsQ0xFbEJRWHBDTzBGQlEwRXNVMEZCUzBNc2JVSkJRVXdzUjBGQk1rSXNZMEZCU1VNc1pVRkJMMEk3UVVGRFFTeFRRVUZMUXl4dlFrRkJUQ3hIUVVFMFFpeGpRVUZKUkN4bFFVRm9RenRCUVVOQkxGTkJRVXRGTEc5Q1FVRk1MRWRCUVRSQ0xHTkJRVWxHTEdWQlFXaERPMEZCUTBFc1UwRkJTMGNzYzBKQlFVd3NSMEZCT0VJc1NVRkJPVUk3UVVGRFFUdEJRVU5CTEZOQlFVdERMR2RDUVVGTUxFZEJRWGRDTEdOQlFVbFNMR05CUVRWQ08wRkJRMEVzVTBGQlMxTXNaVUZCVEN4SFFVRjFRaXhEUVVGMlFqdEJRVU5CTEZOQlFVdERMR2RDUVVGTUxFZEJRWGRDTEVsQlFYaENPMEZCUTBFc1UwRkJTME1zYTBKQlFVd3NSMEZCTUVJc1kwRkJTVkFzWlVGQk9VSTdRVUZEUVN4VFFVRkxVU3h0UWtGQlRDeEhRVUV5UWl4alFVRkpVaXhsUVVFdlFqdEJRVU5CTEZOQlFVdFRMRzFDUVVGTUxFZEJRVEpDTEdOQlFVbFVMR1ZCUVM5Q08wRkJRMEVzVTBGQlMxVXNjVUpCUVV3c1IwRkJOa0lzU1VGQk4wSTdRVUZEUkRzN096dHJRMEZGY1VNN1FVRkJRU3hWUVVFeFFrTXNVVUZCTUVJc2RVVkJRV1lzWTBGQlNXeERMRk5CUVZjN08wRkJRM0JETEZkQlFVdEVMRk5CUVV3c1IwRkJhVUp0UXl4UlFVRnFRanRCUVVORU96czdLMEpCVjBNN1FVRkJRU3hWUVZKQlF5eFBRVkZCTEhWRlFWSlZMRXRCVVZZN1FVRkJRU3hWUVZCQlF5eFBRVTlCTEhWRlFWQlZMR05CUVVscVF5eGpRVTlrTzBGQlFVRXNWVUZPUVd0RExGRkJUVUVzZFVWQlRsY3NZMEZCU1M5Q0xHVkJUV1k3UVVGQlFTeFZRVXhCWjBNc1VVRkxRU3gxUlVGTVZ5eGpRVUZKT1VJc2VVSkJTMlk3UVVGQlFTeFZRVXBCSzBJc1dVRkpRU3gxUlVGS1pTeGpRVUZKY0VNc1kwRkpia0k3UVVGQlFTeFZRVWhCY1VNc1lVRkhRU3gxUlVGSVowSXNZMEZCU1d4RExHVkJSM0JDTzBGQlFVRXNWVUZHUVcxRExHRkJSVUVzZFVWQlJtZENMR05CUVVscVF5eDVRa0ZGY0VJN1FVRkJRU3hWUVVSQmEwTXNWVUZEUVN4MVJVRkVZU3hWUVVOaU96dEJRVU5CTEZkQlFVdDZReXhOUVVGTUxFZEJRV05yUXl4UFFVRmtPMEZCUTBFc1YwRkJTMnBETEZGQlFVd3NSMEZCWjBKclF5eFBRVUZvUWp0QlFVTkJMRmRCUVVzdlFpeFRRVUZNTEVkQlFXbENaME1zVVVGQmFrSTdRVUZEUVN4WFFVRkxPVUlzVTBGQlRDeEhRVUZwUWl0Q0xGRkJRV3BDTzBGQlEwRXNWMEZCUzJ4RExHRkJRVXdzUjBGQmNVSnRReXhaUVVGeVFqdEJRVU5CTEZkQlFVczVRaXhqUVVGTUxFZEJRWE5DSzBJc1lVRkJkRUk3UVVGRFFTeFhRVUZMT1VJc1kwRkJUQ3hIUVVGelFpdENMR0ZCUVhSQ08wRkJRMEVzVjBGQlN6bENMRmRCUVV3c1IwRkJiVUlyUWl4VlFVRnVRanRCUVVORU96czdLMEpCVFVNN1FVRkJRU3hWUVVoQlF5eFRRVWRCTEhWRlFVaFpMRXRCUjFvN1FVRkJRU3hWUVVaQlF5eFZRVVZCTEhWRlFVWmhMRXRCUldJN1FVRkJRU3hWUVVSQlF5eFRRVU5CTEhWRlFVUlpMR05CUVVrNVFpeFpRVU5vUWpzN1FVRkRRU3hYUVVGTFNDeFZRVUZNTEVkQlFXdENLMElzVTBGQmJFSTdRVUZEUVN4WFFVRkxPVUlzVjBGQlRDeEhRVUZ0UWl0Q0xGVkJRVzVDTzBGQlEwRXNWMEZCU3psQ0xGVkJRVXdzUjBGQmEwSXJRaXhUUVVGc1FqdEJRVU5FT3pzN2MwTkJWME03UVVGQlFTeFZRVkpCVml4UFFWRkJMSFZGUVZKVkxHTkJRVWxzUWl4bFFWRmtPMEZCUVVFc1ZVRlFRVFpDTEZkQlQwRXNkVVZCVUdNc1kwRkJTVE5DTEdOQlQyeENPMEZCUVVFc1ZVRk9RVFJDTEZWQlRVRXNkVVZCVG1Fc1EwRk5ZanRCUVVGQkxGVkJURUZETEZkQlMwRXNkVVZCVEdNc1NVRkxaRHRCUVVGQkxGVkJTa0ZETEdGQlNVRXNkVVZCU21kQ0xHTkJRVWt4UWl4bFFVbHdRanRCUVVGQkxGVkJTRUV5UWl4alFVZEJMSFZGUVVocFFpeGpRVUZKTTBJc1pVRkhja0k3UVVGQlFTeFZRVVpCTkVJc1kwRkZRU3gxUlVGR2FVSXNZMEZCU1RWQ0xHVkJSWEpDTzBGQlFVRXNWVUZFUVRaQ0xHZENRVU5CTEhWRlFVUnRRaXhKUVVOdVFqczdRVUZEUVN4WFFVRkxjRU1zV1VGQlRDeEhRVUZ2UW0xQ0xFOUJRWEJDTzBGQlEwRXNWMEZCUzJwQ0xHbENRVUZNTEVkQlFYbENORUlzVjBGQmVrSTdRVUZEUVN4WFFVRkxNVUlzWjBKQlFVd3NSMEZCZDBJeVFpeFZRVUY0UWp0QlFVTkJMRmRCUVVzeFFpeHBRa0ZCVEN4SFFVRjVRakpDTEZkQlFYcENPMEZCUTBFc1YwRkJTekZDTEcxQ1FVRk1MRWRCUVRKQ01rSXNZVUZCTTBJN1FVRkRRU3hYUVVGTGVrSXNiMEpCUVV3c1IwRkJORUl3UWl4alFVRTFRanRCUVVOQkxGZEJRVXQ2UWl4dlFrRkJUQ3hIUVVFMFFqQkNMR05CUVRWQ08wRkJRMEVzVjBGQlMzcENMSE5DUVVGTUxFZEJRVGhDTUVJc1owSkJRVGxDTzBGQlEwUTdPenQzUTBGRmFVUTdRVUZCUVN4VlFVRXZRbXBDTEU5QlFTdENMSFZGUVVGeVFpeGpRVUZKYkVJc1pVRkJhVUk3TzBGQlEyaEVMRmRCUVV0RUxGbEJRVXdzUjBGQmIwSnRRaXhQUVVGd1FqdEJRVU5FT3pzN2NVTkJWME03UVVGQlFTeFZRVkpCUVN4UFFWRkJMSFZGUVZKVkxHTkJRVWxzUWl4bFFWRmtPMEZCUVVFc1ZVRlFRVFpDTEZkQlQwRXNkVVZCVUdNc1kwRkJTVE5DTEdOQlQyeENPMEZCUVVFc1ZVRk9RVFJDTEZWQlRVRXNkVVZCVG1Fc1EwRk5ZanRCUVVGQkxGVkJURUZETEZkQlMwRXNkVVZCVEdNc1NVRkxaRHRCUVVGQkxGVkJTa0ZETEdGQlNVRXNkVVZCU21kQ0xHTkJRVWt4UWl4bFFVbHdRanRCUVVGQkxGVkJTRUV5UWl4alFVZEJMSFZGUVVocFFpeGpRVUZKTTBJc1pVRkhja0k3UVVGQlFTeFZRVVpCTkVJc1kwRkZRU3gxUlVGR2FVSXNZMEZCU1RWQ0xHVkJSWEpDTzBGQlFVRXNWVUZFUVRaQ0xHZENRVU5CTEhWRlFVUnRRaXhKUVVOdVFqczdRVUZEUVN4WFFVRkxjRU1zV1VGQlRDeEhRVUZ2UW0xQ0xFOUJRWEJDTzBGQlEwRXNWMEZCUzFJc1owSkJRVXdzUjBGQmQwSnRRaXhYUVVGNFFqdEJRVU5CTEZkQlFVdHNRaXhsUVVGTUxFZEJRWFZDYlVJc1ZVRkJka0k3UVVGRFFTeFhRVUZMYkVJc1owSkJRVXdzUjBGQmQwSnRRaXhYUVVGNFFqdEJRVU5CTEZkQlFVdHNRaXhyUWtGQlRDeEhRVUV3UW0xQ0xHRkJRVEZDTzBGQlEwRXNWMEZCUzJ4Q0xHMUNRVUZNTEVkQlFUSkNiVUlzWTBGQk0wSTdRVUZEUVN4WFFVRkxiRUlzYlVKQlFVd3NSMEZCTWtKdFFpeGpRVUV6UWp0QlFVTkJMRmRCUVV0c1FpeHhRa0ZCVEN4SFFVRTJRbTFDTEdkQ1FVRTNRanRCUVVORU96czdPenM3YTBKQmRFaHJRbmhFTEVraUxDSm1hV3hsSWpvaWNHRnpjeTVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHZJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOeTB5TURFNElGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMbHh5WEc1Y2NseHVhVzF3YjNKMElHZG1lQ0JtY205dElDY3VMaTluWm5nbk8xeHlYRzVjY2x4dVpYaHdiM0owSUdSbFptRjFiSFFnWTJ4aGMzTWdVR0Z6Y3lCN1hISmNiaUFnWTI5dWMzUnlkV04wYjNJb2JtRnRaU2tnZTF4eVhHNGdJQ0FnZEdocGN5NWZjSEp2WjNKaGJVNWhiV1VnUFNCdVlXMWxPMXh5WEc1Y2NseHVJQ0FnSUM4dklHTjFiR3h0YjJSbFhISmNiaUFnSUNCMGFHbHpMbDlqZFd4c1RXOWtaU0E5SUdkbWVDNURWVXhNWDBKQlEwczdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1lteGxibVJwYm1kY2NseHVJQ0FnSUhSb2FYTXVYMkpzWlc1a0lEMGdabUZzYzJVN1hISmNiaUFnSUNCMGFHbHpMbDlpYkdWdVpFVnhJRDBnWjJaNExrSk1SVTVFWDBaVlRrTmZRVVJFTzF4eVhHNGdJQ0FnZEdocGN5NWZZbXhsYm1SQmJIQm9ZVVZ4SUQwZ1oyWjRMa0pNUlU1RVgwWlZUa05mUVVSRU8xeHlYRzRnSUNBZ2RHaHBjeTVmWW14bGJtUlRjbU1nUFNCblpuZ3VRa3hGVGtSZlUxSkRYMEZNVUVoQk8xeHlYRzRnSUNBZ2RHaHBjeTVmWW14bGJtUkVjM1FnUFNCblpuZ3VRa3hGVGtSZlQwNUZYMDFKVGxWVFgxTlNRMTlCVEZCSVFUdGNjbHh1SUNBZ0lIUm9hWE11WDJKc1pXNWtVM0pqUVd4d2FHRWdQU0JuWm5ndVFreEZUa1JmVTFKRFgwRk1VRWhCTzF4eVhHNGdJQ0FnZEdocGN5NWZZbXhsYm1SRWMzUkJiSEJvWVNBOUlHZG1lQzVDVEVWT1JGOVBUa1ZmVFVsT1ZWTmZVMUpEWDBGTVVFaEJPMXh5WEc0Z0lDQWdkR2hwY3k1ZllteGxibVJEYjJ4dmNpQTlJREI0Wm1abVptWm1abVk3WEhKY2JseHlYRzRnSUNBZ0x5OGdaR1Z3ZEdoY2NseHVJQ0FnSUhSb2FYTXVYMlJsY0hSb1ZHVnpkQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdkR2hwY3k1ZlpHVndkR2hYY21sMFpTQTlJR1poYkhObE8xeHlYRzRnSUNBZ2RHaHBjeTVmWkdWd2RHaEdkVzVqSUQwZ1oyWjRMa1JUWDBaVlRrTmZURVZUVXl4Y2NseHVYSEpjYmlBZ0lDQXZMeUJ6ZEdWdVkybHNYSEpjYmlBZ0lDQjBhR2x6TGw5emRHVnVZMmxzVkdWemRDQTlJR2RtZUM1VFZFVk9RMGxNWDBsT1NFVlNTVlE3WEhKY2JpQWdJQ0F2THlCbWNtOXVkRnh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmxibU5wYkVaMWJtTkdjbTl1ZENBOUlHZG1lQzVFVTE5R1ZVNURYMEZNVjBGWlV6dGNjbHh1SUNBZ0lIUm9hWE11WDNOMFpXNWphV3hTWldaR2NtOXVkQ0E5SURBN1hISmNiaUFnSUNCMGFHbHpMbDl6ZEdWdVkybHNUV0Z6YTBaeWIyNTBJRDBnTUhobVpqdGNjbHh1SUNBZ0lIUm9hWE11WDNOMFpXNWphV3hHWVdsc1QzQkdjbTl1ZENBOUlHZG1lQzVUVkVWT1EwbE1YMDlRWDB0RlJWQTdYSEpjYmlBZ0lDQjBhR2x6TGw5emRHVnVZMmxzV2taaGFXeFBjRVp5YjI1MElEMGdaMlo0TGxOVVJVNURTVXhmVDFCZlMwVkZVRHRjY2x4dUlDQWdJSFJvYVhNdVgzTjBaVzVqYVd4YVVHRnpjMDl3Um5KdmJuUWdQU0JuWm5ndVUxUkZUa05KVEY5UFVGOUxSVVZRTzF4eVhHNGdJQ0FnZEdocGN5NWZjM1JsYm1OcGJGZHlhWFJsVFdGemEwWnliMjUwSUQwZ01IaG1aanRjY2x4dUlDQWdJQzh2SUdKaFkydGNjbHh1SUNBZ0lIUm9hWE11WDNOMFpXNWphV3hHZFc1alFtRmpheUE5SUdkbWVDNUVVMTlHVlU1RFgwRk1WMEZaVXp0Y2NseHVJQ0FnSUhSb2FYTXVYM04wWlc1amFXeFNaV1pDWVdOcklEMGdNRHRjY2x4dUlDQWdJSFJvYVhNdVgzTjBaVzVqYVd4TllYTnJRbUZqYXlBOUlEQjRabVk3WEhKY2JpQWdJQ0IwYUdsekxsOXpkR1Z1WTJsc1JtRnBiRTl3UW1GamF5QTlJR2RtZUM1VFZFVk9RMGxNWDA5UVgwdEZSVkE3WEhKY2JpQWdJQ0IwYUdsekxsOXpkR1Z1WTJsc1drWmhhV3hQY0VKaFkyc2dQU0JuWm5ndVUxUkZUa05KVEY5UFVGOUxSVVZRTzF4eVhHNGdJQ0FnZEdocGN5NWZjM1JsYm1OcGJGcFFZWE56VDNCQ1lXTnJJRDBnWjJaNExsTlVSVTVEU1V4ZlQxQmZTMFZGVUR0Y2NseHVJQ0FnSUhSb2FYTXVYM04wWlc1amFXeFhjbWwwWlUxaGMydENZV05ySUQwZ01IaG1aanRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE5sZEVOMWJHeE5iMlJsS0dOMWJHeE5iMlJsSUQwZ1oyWjRMa05WVEV4ZlFrRkRTeWtnZTF4eVhHNGdJQ0FnZEdocGN5NWZZM1ZzYkUxdlpHVWdQU0JqZFd4c1RXOWtaVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJSE5sZEVKc1pXNWtLRnh5WEc0Z0lDQWdaVzVoWW14bFpDQTlJR1poYkhObExGeHlYRzRnSUNBZ1lteGxibVJGY1NBOUlHZG1lQzVDVEVWT1JGOUdWVTVEWDBGRVJDeGNjbHh1SUNBZ0lHSnNaVzVrVTNKaklEMGdaMlo0TGtKTVJVNUVYMU5TUTE5QlRGQklRU3hjY2x4dUlDQWdJR0pzWlc1a1JITjBJRDBnWjJaNExrSk1SVTVFWDA5T1JWOU5TVTVWVTE5VFVrTmZRVXhRU0VFc1hISmNiaUFnSUNCaWJHVnVaRUZzY0doaFJYRWdQU0JuWm5ndVFreEZUa1JmUmxWT1ExOUJSRVFzWEhKY2JpQWdJQ0JpYkdWdVpGTnlZMEZzY0doaElEMGdaMlo0TGtKTVJVNUVYMU5TUTE5QlRGQklRU3hjY2x4dUlDQWdJR0pzWlc1a1JITjBRV3h3YUdFZ1BTQm5abmd1UWt4RlRrUmZUMDVGWDAxSlRsVlRYMU5TUTE5QlRGQklRU3hjY2x4dUlDQWdJR0pzWlc1a1EyOXNiM0lnUFNBd2VHWm1abVptWm1abVhISmNiaUFnS1NCN1hISmNiaUFnSUNCMGFHbHpMbDlpYkdWdVpDQTlJR1Z1WVdKc1pXUTdYSEpjYmlBZ0lDQjBhR2x6TGw5aWJHVnVaRVZ4SUQwZ1lteGxibVJGY1R0Y2NseHVJQ0FnSUhSb2FYTXVYMkpzWlc1a1UzSmpJRDBnWW14bGJtUlRjbU03WEhKY2JpQWdJQ0IwYUdsekxsOWliR1Z1WkVSemRDQTlJR0pzWlc1a1JITjBPMXh5WEc0Z0lDQWdkR2hwY3k1ZllteGxibVJCYkhCb1lVVnhJRDBnWW14bGJtUkJiSEJvWVVWeE8xeHlYRzRnSUNBZ2RHaHBjeTVmWW14bGJtUlRjbU5CYkhCb1lTQTlJR0pzWlc1a1UzSmpRV3h3YUdFN1hISmNiaUFnSUNCMGFHbHpMbDlpYkdWdVpFUnpkRUZzY0doaElEMGdZbXhsYm1SRWMzUkJiSEJvWVR0Y2NseHVJQ0FnSUhSb2FYTXVYMkpzWlc1a1EyOXNiM0lnUFNCaWJHVnVaRU52Ykc5eU8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MyVjBSR1Z3ZEdnb1hISmNiaUFnSUNCa1pYQjBhRlJsYzNRZ1BTQm1ZV3h6WlN4Y2NseHVJQ0FnSUdSbGNIUm9WM0pwZEdVZ1BTQm1ZV3h6WlN4Y2NseHVJQ0FnSUdSbGNIUm9SblZ1WXlBOUlHZG1lQzVFVTE5R1ZVNURYMHhGVTFOY2NseHVJQ0FwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYMlJsY0hSb1ZHVnpkQ0E5SUdSbGNIUm9WR1Z6ZER0Y2NseHVJQ0FnSUhSb2FYTXVYMlJsY0hSb1YzSnBkR1VnUFNCa1pYQjBhRmR5YVhSbE8xeHlYRzRnSUNBZ2RHaHBjeTVmWkdWd2RHaEdkVzVqSUQwZ1pHVndkR2hHZFc1ak8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MyVjBVM1JsYm1OcGJFWnliMjUwS0Z4eVhHNGdJQ0FnWlc1aFlteGxaQ0E5SUdkbWVDNVRWRVZPUTBsTVgwbE9TRVZTU1ZRc1hISmNiaUFnSUNCemRHVnVZMmxzUm5WdVl5QTlJR2RtZUM1RVUxOUdWVTVEWDBGTVYwRlpVeXhjY2x4dUlDQWdJSE4wWlc1amFXeFNaV1lnUFNBd0xGeHlYRzRnSUNBZ2MzUmxibU5wYkUxaGMyc2dQU0F3ZUdabUxGeHlYRzRnSUNBZ2MzUmxibU5wYkVaaGFXeFBjQ0E5SUdkbWVDNVRWRVZPUTBsTVgwOVFYMHRGUlZBc1hISmNiaUFnSUNCemRHVnVZMmxzV2taaGFXeFBjQ0E5SUdkbWVDNVRWRVZPUTBsTVgwOVFYMHRGUlZBc1hISmNiaUFnSUNCemRHVnVZMmxzV2xCaGMzTlBjQ0E5SUdkbWVDNVRWRVZPUTBsTVgwOVFYMHRGUlZBc1hISmNiaUFnSUNCemRHVnVZMmxzVjNKcGRHVk5ZWE5ySUQwZ01IaG1abHh5WEc0Z0lDa2dlMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmxibU5wYkZSbGMzUWdQU0JsYm1GaWJHVmtPMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmxibU5wYkVaMWJtTkdjbTl1ZENBOUlITjBaVzVqYVd4R2RXNWpPMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmxibU5wYkZKbFprWnliMjUwSUQwZ2MzUmxibU5wYkZKbFpqdGNjbHh1SUNBZ0lIUm9hWE11WDNOMFpXNWphV3hOWVhOclJuSnZiblFnUFNCemRHVnVZMmxzVFdGemF6dGNjbHh1SUNBZ0lIUm9hWE11WDNOMFpXNWphV3hHWVdsc1QzQkdjbTl1ZENBOUlITjBaVzVqYVd4R1lXbHNUM0E3WEhKY2JpQWdJQ0IwYUdsekxsOXpkR1Z1WTJsc1drWmhhV3hQY0VaeWIyNTBJRDBnYzNSbGJtTnBiRnBHWVdsc1QzQTdYSEpjYmlBZ0lDQjBhR2x6TGw5emRHVnVZMmxzV2xCaGMzTlBjRVp5YjI1MElEMGdjM1JsYm1OcGJGcFFZWE56VDNBN1hISmNiaUFnSUNCMGFHbHpMbDl6ZEdWdVkybHNWM0pwZEdWTllYTnJSbkp2Ym5RZ1BTQnpkR1Z1WTJsc1YzSnBkR1ZOWVhOck8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ2MyVjBVM1JsYm1OcGJFVnVZV0pzWldRZ0tHVnVZV0pzWldRZ1BTQm5abmd1VTFSRlRrTkpURjlKVGtoRlVrbFVLU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXpkR1Z1WTJsc1ZHVnpkQ0E5SUdWdVlXSnNaV1E3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0J6WlhSVGRHVnVZMmxzUW1GamF5aGNjbHh1SUNBZ0lHVnVZV0pzWldRZ1BTQm5abmd1VTFSRlRrTkpURjlKVGtoRlVrbFVMRnh5WEc0Z0lDQWdjM1JsYm1OcGJFWjFibU1nUFNCblpuZ3VSRk5mUmxWT1ExOUJURmRCV1ZNc1hISmNiaUFnSUNCemRHVnVZMmxzVW1WbUlEMGdNQ3hjY2x4dUlDQWdJSE4wWlc1amFXeE5ZWE5ySUQwZ01IaG1aaXhjY2x4dUlDQWdJSE4wWlc1amFXeEdZV2xzVDNBZ1BTQm5abmd1VTFSRlRrTkpURjlQVUY5TFJVVlFMRnh5WEc0Z0lDQWdjM1JsYm1OcGJGcEdZV2xzVDNBZ1BTQm5abmd1VTFSRlRrTkpURjlQVUY5TFJVVlFMRnh5WEc0Z0lDQWdjM1JsYm1OcGJGcFFZWE56VDNBZ1BTQm5abmd1VTFSRlRrTkpURjlQVUY5TFJVVlFMRnh5WEc0Z0lDQWdjM1JsYm1OcGJGZHlhWFJsVFdGemF5QTlJREI0Wm1aY2NseHVJQ0FwSUh0Y2NseHVJQ0FnSUhSb2FYTXVYM04wWlc1amFXeFVaWE4wSUQwZ1pXNWhZbXhsWkR0Y2NseHVJQ0FnSUhSb2FYTXVYM04wWlc1amFXeEdkVzVqUW1GamF5QTlJSE4wWlc1amFXeEdkVzVqTzF4eVhHNGdJQ0FnZEdocGN5NWZjM1JsYm1OcGJGSmxaa0poWTJzZ1BTQnpkR1Z1WTJsc1VtVm1PMXh5WEc0Z0lDQWdkR2hwY3k1ZmMzUmxibU5wYkUxaGMydENZV05ySUQwZ2MzUmxibU5wYkUxaGMyczdYSEpjYmlBZ0lDQjBhR2x6TGw5emRHVnVZMmxzUm1GcGJFOXdRbUZqYXlBOUlITjBaVzVqYVd4R1lXbHNUM0E3WEhKY2JpQWdJQ0IwYUdsekxsOXpkR1Z1WTJsc1drWmhhV3hQY0VKaFkyc2dQU0J6ZEdWdVkybHNXa1poYVd4UGNEdGNjbHh1SUNBZ0lIUm9hWE11WDNOMFpXNWphV3hhVUdGemMwOXdRbUZqYXlBOUlITjBaVzVqYVd4YVVHRnpjMDl3TzF4eVhHNGdJQ0FnZEdocGN5NWZjM1JsYm1OcGJGZHlhWFJsVFdGemEwSmhZMnNnUFNCemRHVnVZMmxzVjNKcGRHVk5ZWE5yTzF4eVhHNGdJSDFjY2x4dWZTSmRmUT09Il19