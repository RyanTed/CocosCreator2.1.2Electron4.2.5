(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/core/effect.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var _config = require('../config');
        var _config2 = _interopRequireDefault(_config);
        var _pass = require('../core/pass');
        var _pass2 = _interopRequireDefault(_pass);
        var _technique = require('../core/technique');
        var _technique2 = _interopRequireDefault(_technique);
        var _types = require('../types');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var getInstanceType = function getInstanceType(t) {
            return _types.enums2ctor[t] || _types.enums2ctor.default;
        };
        var typeCheck = function typeCheck(value, type) {
            var instanceType = getInstanceType(type);
            switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {
            case 'object':
                return value === null || value instanceof instanceType;
            case 'number':
                return instanceType === Number;
            default:
                return false;
            }
        };
        var Effect = function () {
            function Effect(name, techniques) {
                var properties = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var defines = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
                var dependencies = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : [];
                _classCallCheck(this, Effect);
                this._name = name;
                this._techniques = techniques;
                this._properties = properties;
                this._defines = defines;
                this._dependencies = dependencies;
            }
            _createClass(Effect, [
                {
                    key: 'clear',
                    value: function clear() {
                        this._techniques.length = 0;
                        this._properties = {};
                        this._defines = {};
                    }
                },
                {
                    key: 'getDefaultTechnique',
                    value: function getDefaultTechnique() {
                        return this._techniques[0];
                    }
                },
                {
                    key: 'getTechnique',
                    value: function getTechnique(stage) {
                        var stageID = _config2.default.stageID(stage);
                        if (stageID === -1) {
                            return null;
                        }
                        for (var i = 0; i < this._techniques.length; ++i) {
                            var tech = this._techniques[i];
                            if (tech.stageIDs & stageID) {
                                return tech;
                            }
                        }
                        return null;
                    }
                },
                {
                    key: 'getProperty',
                    value: function getProperty(name) {
                        if (!this._properties[name]) {
                            cc.warn(this._name + ' : Failed to get property ' + name + ', property not found.');
                            return null;
                        }
                        return this._properties[name].value;
                    }
                },
                {
                    key: 'setProperty',
                    value: function setProperty(name, value) {
                        var prop = this._properties[name];
                        if (!prop) {
                            cc.warn(this._name + ' : Failed to set property ' + name + ', property not found.');
                            return;
                        }
                        this._properties[name].value = value;
                    }
                },
                {
                    key: 'getDefine',
                    value: function getDefine(name) {
                        var def = this._defines[name];
                        if (def === undefined) {
                            cc.warn(this._name + ' : Failed to get define ' + name + ', define not found.');
                        }
                        return def;
                    }
                },
                {
                    key: 'define',
                    value: function define(name, value) {
                        var def = this._defines[name];
                        if (def === undefined) {
                            cc.warn(this._name + ' : Failed to set define ' + name + ', define not found.');
                            return;
                        }
                        this._defines[name] = value;
                    }
                },
                {
                    key: 'extractProperties',
                    value: function extractProperties() {
                        var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        Object.assign(out, this._properties);
                        return out;
                    }
                },
                {
                    key: 'extractDefines',
                    value: function extractDefines() {
                        var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        Object.assign(out, this._defines);
                        return out;
                    }
                },
                {
                    key: 'extractDependencies',
                    value: function extractDependencies() {
                        var out = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
                        for (var i = 0; i < this._dependencies.length; ++i) {
                            var dep = this._dependencies[i];
                            out[dep.define] = dep.extension;
                        }
                        return out;
                    }
                }
            ]);
            return Effect;
        }();
        var cloneObjArray = function cloneObjArray(val) {
            return val.map(function (obj) {
                return Object.assign({}, obj);
            });
        };
        var getInstanceCtor = function getInstanceCtor(t) {
            return _types.ctor2default[getInstanceType(t)];
        };
        var getInvolvedPrograms = function getInvolvedPrograms(json) {
            var programs = [], lib = cc.renderer._forward._programLib;
            json.techniques.forEach(function (tech) {
                tech.passes.forEach(function (pass) {
                    programs.push(lib.getTemplate(pass.program));
                });
            });
            return programs;
        };
        var parseProperties = function () {
            function genPropInfo(displayName, type, value) {
                return {
                    type: type,
                    displayName: displayName,
                    instanceType: getInstanceType(type),
                    value: getInstanceCtor(type)(value)
                };
            }
            return function (json, programs) {
                var props = {};
                programs.forEach(function (pg) {
                    pg.uniforms.forEach(function (prop) {
                        if (!prop.property)
                            return;
                        props[prop.name] = genPropInfo(prop.displayName, prop.type, prop.value);
                    });
                });
                var _loop = function _loop(prop) {
                    var propInfo = json.properties[prop], uniformInfo = void 0;
                    if (propInfo.tech !== undefined && propInfo.pass !== undefined) {
                        var pname = json.techniques[propInfo.tech].passes[propInfo.pass].program;
                        var program = programs.find(function (p) {
                            return p.name === pname;
                        });
                        uniformInfo = program.uniforms.find(function (u) {
                            return u.name === prop;
                        });
                    } else {
                        for (var i = 0; i < programs.length; i++) {
                            uniformInfo = programs[i].uniforms.find(function (u) {
                                return u.name === prop;
                            });
                            if (uniformInfo)
                                break;
                        }
                    }
                    if (!uniformInfo) {
                        cc.warn(json.name + ' : illegal property: ' + prop);
                        return 'continue';
                    }
                    props[prop] = genPropInfo(propInfo.displayName || uniformInfo.displayName, propInfo.type || uniformInfo.type, propInfo.value || uniformInfo.value);
                };
                for (var prop in json.properties) {
                    var _ret = _loop(prop);
                    if (_ret === 'continue')
                        continue;
                }
                return props;
            };
        }();
        Effect.parseEffect = function (effect) {
            var techNum = effect.techniques.length;
            var techniques = new Array(techNum);
            for (var j = 0; j < techNum; ++j) {
                var tech = effect.techniques[j];
                var passNum = tech.passes.length;
                var passes = new Array(passNum);
                for (var k = 0; k < passNum; ++k) {
                    var pass = tech.passes[k];
                    passes[k] = new _pass2.default(pass.program);
                    passes[k].setDepth(pass.depthTest, pass.depthWrite, pass.depthFunc);
                    passes[k].setCullMode(pass.cullMode);
                    passes[k].setBlend(pass.blend, pass.blendEq, pass.blendSrc, pass.blendDst, pass.blendAlphaEq, pass.blendSrcAlpha, pass.blendDstAlpha, pass.blendColor);
                    passes[k].setStencilFront(pass.stencilTest, pass.stencilFuncFront, pass.stencilRefFront, pass.stencilMaskFront, pass.stencilFailOpFront, pass.stencilZFailOpFront, pass.stencilZPassOpFront, pass.stencilWriteMaskFront);
                    passes[k].setStencilBack(pass.stencilTest, pass.stencilFuncBack, pass.stencilRefBack, pass.stencilMaskBack, pass.stencilFailOpBack, pass.stencilZFailOpBack, pass.stencilZPassOpBack, pass.stencilWriteMaskBack);
                }
                techniques[j] = new _technique2.default(tech.stages, passes, tech.layer);
            }
            var programs = getInvolvedPrograms(effect);
            var props = parseProperties(effect, programs), uniforms = {}, defines = {};
            programs.forEach(function (p) {
                p.uniforms.forEach(function (u) {
                    var name = u.name, uniform = uniforms[name] = Object.assign({}, u);
                    uniform.value = getInstanceCtor(u.type)(u.value);
                    if (props[name]) {
                        uniform.type = props[name].type;
                        uniform.value = props[name].value;
                    }
                });
                p.defines.forEach(function (d) {
                    defines[d.name] = getInstanceCtor(d.type)();
                });
            });
            var extensions = programs.reduce(function (acc, cur) {
                return acc = acc.concat(cur.extensions);
            }, []);
            extensions = cloneObjArray(extensions);
            return new Effect(effect.name, techniques, uniforms, defines, extensions);
        };
        if (CC_EDITOR) {
            Effect.parseForInspector = function (json) {
                var programs = getInvolvedPrograms(json);
                var props = parseProperties(json, programs), defines = {};
                for (var pn in programs) {
                    programs[pn].uniforms.forEach(function (u) {
                        var prop = props[u.name];
                        if (!prop)
                            return;
                        prop.defines = u.defines;
                    });
                    programs[pn].defines.forEach(function (define) {
                        defines[define.name] = {
                            instanceType: getInstanceType(define.type),
                            value: getInstanceCtor(define.type)(),
                            defines: define.defines
                        };
                    });
                }
                return {
                    props: props,
                    defines: defines
                };
            };
        }
        exports.default = Effect;
        cc.Effect = Effect;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,