(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/index-buffer.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var IndexBuffer = function () {
            function IndexBuffer(device, format, usage, data, numIndices) {
                _classCallCheck(this, IndexBuffer);
                this._device = device;
                this._format = format;
                this._usage = usage;
                this._numIndices = numIndices;
                this._bytesPerIndex = 0;
                if (format === _enums.enums.INDEX_FMT_UINT8) {
                    this._bytesPerIndex = 1;
                } else if (format === _enums.enums.INDEX_FMT_UINT16) {
                    this._bytesPerIndex = 2;
                } else if (format === _enums.enums.INDEX_FMT_UINT32) {
                    this._bytesPerIndex = 4;
                }
                this._bytes = this._bytesPerIndex * numIndices;
                this._glID = device._gl.createBuffer();
                this.update(0, data);
                device._stats.ib += this._bytes;
            }
            _createClass(IndexBuffer, [
                {
                    key: 'destroy',
                    value: function destroy() {
                        if (this._glID === -1) {
                            console.error('The buffer already destroyed');
                            return;
                        }
                        var gl = this._device._gl;
                        gl.deleteBuffer(this._glID);
                        this._device._stats.ib -= this.bytes;
                        this._glID = -1;
                    }
                },
                {
                    key: 'update',
                    value: function update(offset, data) {
                        if (this._glID === -1) {
                            console.error('The buffer is destroyed');
                            return;
                        }
                        if (data && data.byteLength + offset > this._bytes) {
                            console.error('Failed to update data, bytes exceed.');
                            return;
                        }
                        var gl = this._device._gl;
                        var glUsage = this._usage;
                        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this._glID);
                        if (!data) {
                            if (this._bytes) {
                                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, this._bytes, glUsage);
                            } else {
                                console.warn('bufferData should not submit 0 bytes data');
                            }
                        } else {
                            if (offset) {
                                gl.bufferSubData(gl.ELEMENT_ARRAY_BUFFER, offset, data);
                            } else {
                                gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, data, glUsage);
                            }
                        }
                        this._device._restoreIndexBuffer();
                    }
                },
                {
                    key: 'count',
                    get: function get() {
                        return this._numIndices;
                    }
                }
            ]);
            return IndexBuffer;
        }();
        exports.default = IndexBuffer;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LWJ1ZmZlci5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvcmVuZGVyZXIvZ2Z4L2luZGV4LWJ1ZmZlci5qcyJdLCJuYW1lcyI6WyJJbmRleEJ1ZmZlciIsImRldmljZSIsImZvcm1hdCIsInVzYWdlIiwiZGF0YSIsIm51bUluZGljZXMiLCJfZGV2aWNlIiwiX2Zvcm1hdCIsIl91c2FnZSIsIl9udW1JbmRpY2VzIiwiX2J5dGVzUGVySW5kZXgiLCJJTkRFWF9GTVRfVUlOVDgiLCJJTkRFWF9GTVRfVUlOVDE2IiwiSU5ERVhfRk1UX1VJTlQzMiIsIl9ieXRlcyIsIl9nbElEIiwiX2dsIiwiY3JlYXRlQnVmZmVyIiwidXBkYXRlIiwiX3N0YXRzIiwiaWIiLCJjb25zb2xlIiwiZXJyb3IiLCJnbCIsImRlbGV0ZUJ1ZmZlciIsImJ5dGVzIiwib2Zmc2V0IiwiYnl0ZUxlbmd0aCIsImdsVXNhZ2UiLCJiaW5kQnVmZmVyIiwiRUxFTUVOVF9BUlJBWV9CVUZGRVIiLCJidWZmZXJEYXRhIiwid2FybiIsImJ1ZmZlclN1YkRhdGEiLCJfcmVzdG9yZUluZGV4QnVmZmVyIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O1FBQUEsT0FBQSxpQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBOzs7Ozs7WUFFTUEsV0FBQUE7WUFTSixTQUFBLFdBQUEsQ0FBWUMsTUFBWixFQUFvQkMsTUFBcEIsRUFBNEJDLEtBQTVCLEVBQW1DQyxJQUFuQyxFQUF5Q0MsVUFBekMsRUFBcUQ7QUFBQSxnQkFBQSxlQUFBLENBQUEsSUFBQSxFQUFBLFdBQUEsRUFBQTtBQUFBLGdCQUNuRCxLQUFLQyxPQUFMLEdBQWVMLE1BQWYsQ0FEbUQ7QUFBQSxnQkFFbkQsS0FBS00sT0FBTCxHQUFlTCxNQUFm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QUFRVyxJQUFSWCxDQUFhLDJDQUFiQSxFQURLO0FBQUEsNkJBSEU7QUFBQSx5QkFBWCxNQU1PO0FBQUEsNEJBQ0wsSUFBSUssTUFBSixFQUFZO0FBQUEsZ0NBQ1ZILEVBQUFBLENBQUdVLGFBQUhWLENBQWlCQSxFQUFBQSxDQUFHTyxvQkFBcEJQLEVBQTBDRyxNQUExQ0gsRUFBa0RuQixJQUFsRG1CLEVBRFU7QUFBQSw2QkFBWixNQUVPO0FBQUEsZ0NBQ0xBLEVBQUFBLENBQUdRLFVBQUhSLENBQWNBLEVBQUFBLENBQUdPLG9CQUFqQlAsRUFBdUNuQixJQUF2Q21CLEVBQTZDSyxPQUE3Q0wsRUFESztBQUFBLDZCQUhGO0FBQUEseUJBdEJZO0FBQUEsd0JBNkJuQixLQUFLakIsT0FBTCxDQUFhNEIsbUJBQWIsR0E3Qm1CO0FBQUE7Ozs7d0NBZ0NSO0FBQUEsd0JBQ1gsT0FBTyxLQUFLekIsV0FBWixDQURXO0FBQUE7Ozs7OzBCQUtBVDs7O0lBM0ZiLElBQUEsT0FBQSxFQUFBO0FBQUEsd0RBQUE7QUFBQSxLQUFBIiwiZmlsZSI6ImluZGV4LWJ1ZmZlci5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGVudW1zIH0gZnJvbSAnLi9lbnVtcyc7XHJcblxyXG5jbGFzcyBJbmRleEJ1ZmZlciB7XHJcbiAgLyoqXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHtEZXZpY2V9IGRldmljZVxyXG4gICAqIEBwYXJhbSB7SU5ERVhfRk1UXyp9IGZvcm1hdFxyXG4gICAqIEBwYXJhbSB7VVNBR0VfKn0gdXNhZ2VcclxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyIHwgVWludDhBcnJheX0gZGF0YVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBudW1JbmRpY2VzXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoZGV2aWNlLCBmb3JtYXQsIHVzYWdlLCBkYXRhLCBudW1JbmRpY2VzKSB7XHJcbiAgICB0aGlzLl9kZXZpY2UgPSBkZXZpY2U7XHJcbiAgICB0aGlzLl9mb3JtYXQgPSBmb3JtYXQ7XHJcbiAgICB0aGlzLl91c2FnZSA9IHVzYWdlO1xyXG4gICAgdGhpcy5fbnVtSW5kaWNlcyA9IG51bUluZGljZXM7XHJcbiAgICB0aGlzLl9ieXRlc1BlckluZGV4ID0gMDtcclxuXHJcbiAgICAvLyBjYWxjdWxhdGUgYnl0ZXNcclxuICAgIGlmIChmb3JtYXQgPT09IGVudW1zLklOREVYX0ZNVF9VSU5UOCkge1xyXG4gICAgICB0aGlzLl9ieXRlc1BlckluZGV4ID0gMTtcclxuICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBlbnVtcy5JTkRFWF9GTVRfVUlOVDE2KSB7XHJcbiAgICAgIHRoaXMuX2J5dGVzUGVySW5kZXggPSAyO1xyXG4gICAgfSBlbHNlIGlmIChmb3JtYXQgPT09IGVudW1zLklOREVYX0ZNVF9VSU5UMzIpIHtcclxuICAgICAgdGhpcy5fYnl0ZXNQZXJJbmRleCA9IDQ7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9ieXRlcyA9IHRoaXMuX2J5dGVzUGVySW5kZXggKiBudW1JbmRpY2VzO1xyXG5cclxuICAgIC8vIHVwZGF0ZVxyXG4gICAgdGhpcy5fZ2xJRCA9IGRldmljZS5fZ2wuY3JlYXRlQnVmZmVyKCk7XHJcbiAgICB0aGlzLnVwZGF0ZSgwLCBkYXRhKTtcclxuXHJcbiAgICAvLyBzdGF0c1xyXG4gICAgZGV2aWNlLl9zdGF0cy5pYiArPSB0aGlzLl9ieXRlcztcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgZGVzdHJveVxyXG4gICAqL1xyXG4gIGRlc3Ryb3koKSB7XHJcbiAgICBpZiAodGhpcy5fZ2xJRCA9PT0gLTEpIHtcclxuICAgICAgY29uc29sZS5lcnJvcignVGhlIGJ1ZmZlciBhbHJlYWR5IGRlc3Ryb3llZCcpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGdsID0gdGhpcy5fZGV2aWNlLl9nbDtcclxuICAgIGdsLmRlbGV0ZUJ1ZmZlcih0aGlzLl9nbElEKTtcclxuICAgIHRoaXMuX2RldmljZS5fc3RhdHMuaWIgLT0gdGhpcy5ieXRlcztcclxuXHJcbiAgICB0aGlzLl9nbElEID0gLTE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBAbWV0aG9kIHVwZGF0ZVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBvZmZzZXRcclxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBkYXRhXHJcbiAgICovXHJcbiAgdXBkYXRlKG9mZnNldCwgZGF0YSkge1xyXG4gICAgaWYgKHRoaXMuX2dsSUQgPT09IC0xKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBidWZmZXIgaXMgZGVzdHJveWVkJyk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmJ5dGVMZW5ndGggKyBvZmZzZXQgPiB0aGlzLl9ieXRlcykge1xyXG4gICAgICBjb25zb2xlLmVycm9yKCdGYWlsZWQgdG8gdXBkYXRlIGRhdGEsIGJ5dGVzIGV4Y2VlZC4nKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKiBAdHlwZXtXZWJHTFJlbmRlcmluZ0NvbnRleHR9ICovXHJcbiAgICBsZXQgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xyXG4gICAgbGV0IGdsVXNhZ2UgPSB0aGlzLl91c2FnZTtcclxuXHJcbiAgICBnbC5iaW5kQnVmZmVyKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9nbElEKTtcclxuICAgIGlmICghZGF0YSkge1xyXG4gICAgICBpZiAodGhpcy5fYnl0ZXMpIHtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCB0aGlzLl9ieXRlcywgZ2xVc2FnZSk7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgY29uc29sZS53YXJuKCdidWZmZXJEYXRhIHNob3VsZCBub3Qgc3VibWl0IDAgYnl0ZXMgZGF0YScpO1xyXG4gICAgICB9XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBpZiAob2Zmc2V0KSB7XHJcbiAgICAgICAgZ2wuYnVmZmVyU3ViRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgb2Zmc2V0LCBkYXRhKTtcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBnbC5idWZmZXJEYXRhKGdsLkVMRU1FTlRfQVJSQVlfQlVGRkVSLCBkYXRhLCBnbFVzYWdlKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5fZGV2aWNlLl9yZXN0b3JlSW5kZXhCdWZmZXIoKTtcclxuICB9XHJcblxyXG4gIGdldCBjb3VudCAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fbnVtSW5kaWNlcztcclxuICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluZGV4QnVmZmVyO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfZW51bXMgPSByZXF1aXJlKCcuL2VudW1zJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBJbmRleEJ1ZmZlciA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHtEZXZpY2V9IGRldmljZVxyXG4gICAqIEBwYXJhbSB7SU5ERVhfRk1UXyp9IGZvcm1hdFxyXG4gICAqIEBwYXJhbSB7VVNBR0VfKn0gdXNhZ2VcclxuICAgKiBAcGFyYW0ge0FycmF5QnVmZmVyIHwgVWludDhBcnJheX0gZGF0YVxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBudW1JbmRpY2VzXHJcbiAgICovXG4gIGZ1bmN0aW9uIEluZGV4QnVmZmVyKGRldmljZSwgZm9ybWF0LCB1c2FnZSwgZGF0YSwgbnVtSW5kaWNlcykge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJbmRleEJ1ZmZlcik7XG5cbiAgICB0aGlzLl9kZXZpY2UgPSBkZXZpY2U7XG4gICAgdGhpcy5fZm9ybWF0ID0gZm9ybWF0O1xuICAgIHRoaXMuX3VzYWdlID0gdXNhZ2U7XG4gICAgdGhpcy5fbnVtSW5kaWNlcyA9IG51bUluZGljZXM7XG4gICAgdGhpcy5fYnl0ZXNQZXJJbmRleCA9IDA7XG5cbiAgICAvLyBjYWxjdWxhdGUgYnl0ZXNcbiAgICBpZiAoZm9ybWF0ID09PSBfZW51bXMuZW51bXMuSU5ERVhfRk1UX1VJTlQ4KSB7XG4gICAgICB0aGlzLl9ieXRlc1BlckluZGV4ID0gMTtcbiAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gX2VudW1zLmVudW1zLklOREVYX0ZNVF9VSU5UMTYpIHtcbiAgICAgIHRoaXMuX2J5dGVzUGVySW5kZXggPSAyO1xuICAgIH0gZWxzZSBpZiAoZm9ybWF0ID09PSBfZW51bXMuZW51bXMuSU5ERVhfRk1UX1VJTlQzMikge1xuICAgICAgdGhpcy5fYnl0ZXNQZXJJbmRleCA9IDQ7XG4gICAgfVxuICAgIHRoaXMuX2J5dGVzID0gdGhpcy5fYnl0ZXNQZXJJbmRleCAqIG51bUluZGljZXM7XG5cbiAgICAvLyB1cGRhdGVcbiAgICB0aGlzLl9nbElEID0gZGV2aWNlLl9nbC5jcmVhdGVCdWZmZXIoKTtcbiAgICB0aGlzLnVwZGF0ZSgwLCBkYXRhKTtcblxuICAgIC8vIHN0YXRzXG4gICAgZGV2aWNlLl9zdGF0cy5pYiArPSB0aGlzLl9ieXRlcztcbiAgfVxuXG4gIC8qKlxyXG4gICAqIEBtZXRob2QgZGVzdHJveVxyXG4gICAqL1xuXG5cbiAgX2NyZWF0ZUNsYXNzKEluZGV4QnVmZmVyLCBbe1xuICAgIGtleTogJ2Rlc3Ryb3knLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBkZXN0cm95KCkge1xuICAgICAgaWYgKHRoaXMuX2dsSUQgPT09IC0xKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBidWZmZXIgYWxyZWFkeSBkZXN0cm95ZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgZ2wuZGVsZXRlQnVmZmVyKHRoaXMuX2dsSUQpO1xuICAgICAgdGhpcy5fZGV2aWNlLl9zdGF0cy5pYiAtPSB0aGlzLmJ5dGVzO1xuXG4gICAgICB0aGlzLl9nbElEID0gLTE7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBAbWV0aG9kIHVwZGF0ZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG9mZnNldFxyXG4gICAgICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gZGF0YVxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3VwZGF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHVwZGF0ZShvZmZzZXQsIGRhdGEpIHtcbiAgICAgIGlmICh0aGlzLl9nbElEID09PSAtMSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdUaGUgYnVmZmVyIGlzIGRlc3Ryb3llZCcpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChkYXRhICYmIGRhdGEuYnl0ZUxlbmd0aCArIG9mZnNldCA+IHRoaXMuX2J5dGVzKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ0ZhaWxlZCB0byB1cGRhdGUgZGF0YSwgYnl0ZXMgZXhjZWVkLicpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8qKiBAdHlwZXtXZWJHTFJlbmRlcmluZ0NvbnRleHR9ICovXG4gICAgICB2YXIgZ2wgPSB0aGlzLl9kZXZpY2UuX2dsO1xuICAgICAgdmFyIGdsVXNhZ2UgPSB0aGlzLl91c2FnZTtcblxuICAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5fZ2xJRCk7XG4gICAgICBpZiAoIWRhdGEpIHtcbiAgICAgICAgaWYgKHRoaXMuX2J5dGVzKSB7XG4gICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgdGhpcy5fYnl0ZXMsIGdsVXNhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGUud2FybignYnVmZmVyRGF0YSBzaG91bGQgbm90IHN1Ym1pdCAwIGJ5dGVzIGRhdGEnKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKG9mZnNldCkge1xuICAgICAgICAgIGdsLmJ1ZmZlclN1YkRhdGEoZ2wuRUxFTUVOVF9BUlJBWV9CVUZGRVIsIG9mZnNldCwgZGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZ2wuYnVmZmVyRGF0YShnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgZGF0YSwgZ2xVc2FnZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuX2RldmljZS5fcmVzdG9yZUluZGV4QnVmZmVyKCk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnY291bnQnLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMuX251bUluZGljZXM7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIEluZGV4QnVmZmVyO1xufSgpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBJbmRleEJ1ZmZlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1sdVpHVjRMV0oxWm1abGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKSmJtUmxlRUoxWm1abGNpSXNJbVJsZG1salpTSXNJbVp2Y20xaGRDSXNJblZ6WVdkbElpd2laR0YwWVNJc0ltNTFiVWx1WkdsalpYTWlMQ0pmWkdWMmFXTmxJaXdpWDJadmNtMWhkQ0lzSWw5MWMyRm5aU0lzSWw5dWRXMUpibVJwWTJWeklpd2lYMko1ZEdWelVHVnlTVzVrWlhnaUxDSkpUa1JGV0Y5R1RWUmZWVWxPVkRnaUxDSkpUa1JGV0Y5R1RWUmZWVWxPVkRFMklpd2lTVTVFUlZoZlJrMVVYMVZKVGxRek1pSXNJbDlpZVhSbGN5SXNJbDluYkVsRUlpd2lYMmRzSWl3aVkzSmxZWFJsUW5WbVptVnlJaXdpZFhCa1lYUmxJaXdpWDNOMFlYUnpJaXdpYVdJaUxDSmpiMjV6YjJ4bElpd2laWEp5YjNJaUxDSm5iQ0lzSW1SbGJHVjBaVUoxWm1abGNpSXNJbUo1ZEdWeklpd2liMlptYzJWMElpd2lZbmwwWlV4bGJtZDBhQ0lzSW1kc1ZYTmhaMlVpTENKaWFXNWtRblZtWm1WeUlpd2lSVXhGVFVWT1ZGOUJVbEpCV1Y5Q1ZVWkdSVklpTENKaWRXWm1aWEpFWVhSaElpd2lkMkZ5YmlJc0ltSjFabVpsY2xOMVlrUmhkR0VpTENKZmNtVnpkRzl5WlVsdVpHVjRRblZtWm1WeUlsMHNJbTFoY0hCcGJtZHpJam9pT3pzN096czdPenRCUVVGQk96czdPMGxCUlUxQkxGYzdRVUZEU2pzN096czdPenM3UVVGUlFTeDFRa0ZCV1VNc1RVRkJXaXhGUVVGdlFrTXNUVUZCY0VJc1JVRkJORUpETEV0QlFUVkNMRVZCUVcxRFF5eEpRVUZ1UXl4RlFVRjVRME1zVlVGQmVrTXNSVUZCY1VRN1FVRkJRVHM3UVVGRGJrUXNVMEZCUzBNc1QwRkJUQ3hIUVVGbFRDeE5RVUZtTzBGQlEwRXNVMEZCUzAwc1QwRkJUQ3hIUVVGbFRDeE5RVUZtTzBGQlEwRXNVMEZCUzAwc1RVRkJUQ3hIUVVGalRDeExRVUZrTzBGQlEwRXNVMEZCUzAwc1YwRkJUQ3hIUVVGdFFrb3NWVUZCYmtJN1FVRkRRU3hUUVVGTFN5eGpRVUZNTEVkQlFYTkNMRU5CUVhSQ096dEJRVVZCTzBGQlEwRXNVVUZCU1ZJc1YwRkJWeXhoUVVGTlV5eGxRVUZ5UWl4RlFVRnpRenRCUVVOd1F5eFhRVUZMUkN4alFVRk1MRWRCUVhOQ0xFTkJRWFJDTzBGQlEwUXNTMEZHUkN4TlFVVlBMRWxCUVVsU0xGZEJRVmNzWVVGQlRWVXNaMEpCUVhKQ0xFVkJRWFZETzBGQlF6VkRMRmRCUVV0R0xHTkJRVXdzUjBGQmMwSXNRMEZCZEVJN1FVRkRSQ3hMUVVaTkxFMUJSVUVzU1VGQlNWSXNWMEZCVnl4aFFVRk5WeXhuUWtGQmNrSXNSVUZCZFVNN1FVRkROVU1zVjBGQlMwZ3NZMEZCVEN4SFFVRnpRaXhEUVVGMFFqdEJRVU5FTzBGQlEwUXNVMEZCUzBrc1RVRkJUQ3hIUVVGakxFdEJRVXRLTEdOQlFVd3NSMEZCYzBKTUxGVkJRWEJET3p0QlFVVkJPMEZCUTBFc1UwRkJTMVVzUzBGQlRDeEhRVUZoWkN4UFFVRlBaU3hIUVVGUUxFTkJRVmRETEZsQlFWZ3NSVUZCWWp0QlFVTkJMRk5CUVV0RExFMUJRVXdzUTBGQldTeERRVUZhTEVWQlFXVmtMRWxCUVdZN08wRkJSVUU3UVVGRFFVZ3NWMEZCVDJ0Q0xFMUJRVkFzUTBGQlkwTXNSVUZCWkN4SlFVRnZRaXhMUVVGTFRpeE5RVUY2UWp0QlFVTkVPenRCUVVWRU96czdPenM3T3poQ1FVZFZPMEZCUTFJc1ZVRkJTU3hMUVVGTFF5eExRVUZNTEV0QlFXVXNRMEZCUXl4RFFVRndRaXhGUVVGMVFqdEJRVU55UWswc1owSkJRVkZETEV0QlFWSXNRMEZCWXl3NFFrRkJaRHRCUVVOQk8wRkJRMFE3TzBGQlJVUXNWVUZCU1VNc1MwRkJTeXhMUVVGTGFrSXNUMEZCVEN4RFFVRmhWU3hIUVVGMFFqdEJRVU5CVHl4VFFVRkhReXhaUVVGSUxFTkJRV2RDTEV0QlFVdFVMRXRCUVhKQ08wRkJRMEVzVjBGQlMxUXNUMEZCVEN4RFFVRmhZU3hOUVVGaUxFTkJRVzlDUXl4RlFVRndRaXhKUVVFd1FpeExRVUZMU3l4TFFVRXZRanM3UVVGRlFTeFhRVUZMVml4TFFVRk1MRWRCUVdFc1EwRkJReXhEUVVGa08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096SkNRVXRQVnl4TkxFVkJRVkYwUWl4SkxFVkJRVTA3UVVGRGJrSXNWVUZCU1N4TFFVRkxWeXhMUVVGTUxFdEJRV1VzUTBGQlF5eERRVUZ3UWl4RlFVRjFRanRCUVVOeVFrMHNaMEpCUVZGRExFdEJRVklzUTBGQll5eDVRa0ZCWkR0QlFVTkJPMEZCUTBRN08wRkJSVVFzVlVGQlNXeENMRkZCUVZGQkxFdEJRVXQxUWl4VlFVRk1MRWRCUVd0Q1JDeE5RVUZzUWl4SFFVRXlRaXhMUVVGTFdpeE5RVUUxUXl4RlFVRnZSRHRCUVVOc1JFOHNaMEpCUVZGRExFdEJRVklzUTBGQll5eHpRMEZCWkR0QlFVTkJPMEZCUTBRN08wRkJSVVE3UVVGRFFTeFZRVUZKUXl4TFFVRkxMRXRCUVV0cVFpeFBRVUZNTEVOQlFXRlZMRWRCUVhSQ08wRkJRMEVzVlVGQlNWa3NWVUZCVlN4TFFVRkxjRUlzVFVGQmJrSTdPMEZCUlVGbExGTkJRVWROTEZWQlFVZ3NRMEZCWTA0c1IwRkJSMDhzYjBKQlFXcENMRVZCUVhWRExFdEJRVXRtTEV0QlFUVkRPMEZCUTBFc1ZVRkJTU3hEUVVGRFdDeEpRVUZNTEVWQlFWYzdRVUZEVkN4WlFVRkpMRXRCUVV0VkxFMUJRVlFzUlVGQmFVSTdRVUZEWmxNc1lVRkJSMUVzVlVGQlNDeERRVUZqVWl4SFFVRkhUeXh2UWtGQmFrSXNSVUZCZFVNc1MwRkJTMmhDTEUxQlFUVkRMRVZCUVc5RVl5eFBRVUZ3UkR0QlFVTkVMRk5CUmtRc1RVRkZUenRCUVVOTVVDeHJRa0ZCVVZjc1NVRkJVaXhEUVVGaExESkRRVUZpTzBGQlEwUTdRVUZEUml4UFFVNUVMRTFCVFU4N1FVRkRUQ3haUVVGSlRpeE5RVUZLTEVWQlFWazdRVUZEVmtnc1lVRkJSMVVzWVVGQlNDeERRVUZwUWxZc1IwRkJSMDhzYjBKQlFYQkNMRVZCUVRCRFNpeE5RVUV4UXl4RlFVRnJSSFJDTEVsQlFXeEVPMEZCUTBRc1UwRkdSQ3hOUVVWUE8wRkJRMHh0UWl4aFFVRkhVU3hWUVVGSUxFTkJRV05TTEVkQlFVZFBMRzlDUVVGcVFpeEZRVUYxUXpGQ0xFbEJRWFpETEVWQlFUWkRkMElzVDBGQk4wTTdRVUZEUkR0QlFVTkdPMEZCUTBRc1YwRkJTM1JDTEU5QlFVd3NRMEZCWVRSQ0xHMUNRVUZpTzBGQlEwUTdPenQzUWtGRldUdEJRVU5ZTEdGQlFVOHNTMEZCUzNwQ0xGZEJRVm83UVVGRFJEczdPenM3TzJ0Q1FVZFpWQ3hYSWl3aVptbHNaU0k2SW1sdVpHVjRMV0oxWm1abGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUdWdWRXMXpJSDBnWm5KdmJTQW5MaTlsYm5WdGN5YzdYSEpjYmx4eVhHNWpiR0Z6Y3lCSmJtUmxlRUoxWm1abGNpQjdYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRR052Ym5OMGNuVmpkRzl5WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRFWlhacFkyVjlJR1JsZG1salpWeHlYRzRnSUNBcUlFQndZWEpoYlNCN1NVNUVSVmhmUmsxVVh5cDlJR1p2Y20xaGRGeHlYRzRnSUNBcUlFQndZWEpoYlNCN1ZWTkJSMFZmS24wZ2RYTmhaMlZjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNVFuVm1abVZ5SUh3Z1ZXbHVkRGhCY25KaGVYMGdaR0YwWVZ4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0J1ZFcxSmJtUnBZMlZ6WEhKY2JpQWdJQ292WEhKY2JpQWdZMjl1YzNSeWRXTjBiM0lvWkdWMmFXTmxMQ0JtYjNKdFlYUXNJSFZ6WVdkbExDQmtZWFJoTENCdWRXMUpibVJwWTJWektTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5a1pYWnBZMlVnUFNCa1pYWnBZMlU3WEhKY2JpQWdJQ0IwYUdsekxsOW1iM0p0WVhRZ1BTQm1iM0p0WVhRN1hISmNiaUFnSUNCMGFHbHpMbDkxYzJGblpTQTlJSFZ6WVdkbE8xeHlYRzRnSUNBZ2RHaHBjeTVmYm5WdFNXNWthV05sY3lBOUlHNTFiVWx1WkdsalpYTTdYSEpjYmlBZ0lDQjBhR2x6TGw5aWVYUmxjMUJsY2tsdVpHVjRJRDBnTUR0Y2NseHVYSEpjYmlBZ0lDQXZMeUJqWVd4amRXeGhkR1VnWW5sMFpYTmNjbHh1SUNBZ0lHbG1JQ2htYjNKdFlYUWdQVDA5SUdWdWRXMXpMa2xPUkVWWVgwWk5WRjlWU1U1VU9Da2dlMXh5WEc0Z0lDQWdJQ0IwYUdsekxsOWllWFJsYzFCbGNrbHVaR1Y0SUQwZ01UdGNjbHh1SUNBZ0lIMGdaV3h6WlNCcFppQW9abTl5YldGMElEMDlQU0JsYm5WdGN5NUpUa1JGV0Y5R1RWUmZWVWxPVkRFMktTQjdYSEpjYmlBZ0lDQWdJSFJvYVhNdVgySjVkR1Z6VUdWeVNXNWtaWGdnUFNBeU8xeHlYRzRnSUNBZ2ZTQmxiSE5sSUdsbUlDaG1iM0p0WVhRZ1BUMDlJR1Z1ZFcxekxrbE9SRVZZWDBaTlZGOVZTVTVVTXpJcElIdGNjbHh1SUNBZ0lDQWdkR2hwY3k1ZllubDBaWE5RWlhKSmJtUmxlQ0E5SURRN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCMGFHbHpMbDlpZVhSbGN5QTlJSFJvYVhNdVgySjVkR1Z6VUdWeVNXNWtaWGdnS2lCdWRXMUpibVJwWTJWek8xeHlYRzVjY2x4dUlDQWdJQzh2SUhWd1pHRjBaVnh5WEc0Z0lDQWdkR2hwY3k1ZloyeEpSQ0E5SUdSbGRtbGpaUzVmWjJ3dVkzSmxZWFJsUW5WbVptVnlLQ2s3WEhKY2JpQWdJQ0IwYUdsekxuVndaR0YwWlNnd0xDQmtZWFJoS1R0Y2NseHVYSEpjYmlBZ0lDQXZMeUJ6ZEdGMGMxeHlYRzRnSUNBZ1pHVjJhV05sTGw5emRHRjBjeTVwWWlBclBTQjBhR2x6TGw5aWVYUmxjenRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVCdFpYUm9iMlFnWkdWemRISnZlVnh5WEc0Z0lDQXFMMXh5WEc0Z0lHUmxjM1J5YjNrb0tTQjdYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZaMnhKUkNBOVBUMGdMVEVwSUh0Y2NseHVJQ0FnSUNBZ1kyOXVjMjlzWlM1bGNuSnZjaWduVkdobElHSjFabVpsY2lCaGJISmxZV1I1SUdSbGMzUnliM2xsWkNjcE8xeHlYRzRnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdiR1YwSUdkc0lEMGdkR2hwY3k1ZlpHVjJhV05sTGw5bmJEdGNjbHh1SUNBZ0lHZHNMbVJsYkdWMFpVSjFabVpsY2loMGFHbHpMbDluYkVsRUtUdGNjbHh1SUNBZ0lIUm9hWE11WDJSbGRtbGpaUzVmYzNSaGRITXVhV0lnTFQwZ2RHaHBjeTVpZVhSbGN6dGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOW5iRWxFSUQwZ0xURTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJBYldWMGFHOWtJSFZ3WkdGMFpWeHlYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCdlptWnpaWFJjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMEZ5Y21GNVFuVm1abVZ5ZlNCa1lYUmhYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2RYQmtZWFJsS0c5bVpuTmxkQ3dnWkdGMFlTa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYMmRzU1VRZ1BUMDlJQzB4S1NCN1hISmNiaUFnSUNBZ0lHTnZibk52YkdVdVpYSnliM0lvSjFSb1pTQmlkV1ptWlhJZ2FYTWdaR1Z6ZEhKdmVXVmtKeWs3WEhKY2JpQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9aR0YwWVNBbUppQmtZWFJoTG1KNWRHVk1aVzVuZEdnZ0t5QnZabVp6WlhRZ1BpQjBhR2x6TGw5aWVYUmxjeWtnZTF4eVhHNGdJQ0FnSUNCamIyNXpiMnhsTG1WeWNtOXlLQ2RHWVdsc1pXUWdkRzhnZFhCa1lYUmxJR1JoZEdFc0lHSjVkR1Z6SUdWNFkyVmxaQzRuS1R0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDOHFLaUJBZEhsd1pYdFhaV0pIVEZKbGJtUmxjbWx1WjBOdmJuUmxlSFI5SUNvdlhISmNiaUFnSUNCc1pYUWdaMndnUFNCMGFHbHpMbDlrWlhacFkyVXVYMmRzTzF4eVhHNGdJQ0FnYkdWMElHZHNWWE5oWjJVZ1BTQjBhR2x6TGw5MWMyRm5aVHRjY2x4dVhISmNiaUFnSUNCbmJDNWlhVzVrUW5WbVptVnlLR2RzTGtWTVJVMUZUbFJmUVZKU1FWbGZRbFZHUmtWU0xDQjBhR2x6TGw5bmJFbEVLVHRjY2x4dUlDQWdJR2xtSUNnaFpHRjBZU2tnZTF4eVhHNGdJQ0FnSUNCcFppQW9kR2hwY3k1ZllubDBaWE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQm5iQzVpZFdabVpYSkVZWFJoS0dkc0xrVk1SVTFGVGxSZlFWSlNRVmxmUWxWR1JrVlNMQ0IwYUdsekxsOWllWFJsY3l3Z1oyeFZjMkZuWlNrN1hISmNiaUFnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdZMjl1YzI5c1pTNTNZWEp1S0NkaWRXWm1aWEpFWVhSaElITm9iM1ZzWkNCdWIzUWdjM1ZpYldsMElEQWdZbmwwWlhNZ1pHRjBZU2NwTzF4eVhHNGdJQ0FnSUNCOVhISmNiaUFnSUNCOUlHVnNjMlVnZTF4eVhHNGdJQ0FnSUNCcFppQW9iMlptYzJWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWjJ3dVluVm1abVZ5VTNWaVJHRjBZU2huYkM1RlRFVk5SVTVVWDBGU1VrRlpYMEpWUmtaRlVpd2diMlptYzJWMExDQmtZWFJoS1R0Y2NseHVJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQm5iQzVpZFdabVpYSkVZWFJoS0dkc0xrVk1SVTFGVGxSZlFWSlNRVmxmUWxWR1JrVlNMQ0JrWVhSaExDQm5iRlZ6WVdkbEtUdGNjbHh1SUNBZ0lDQWdmVnh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdkR2hwY3k1ZlpHVjJhV05sTGw5eVpYTjBiM0psU1c1a1pYaENkV1ptWlhJb0tUdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lHZGxkQ0JqYjNWdWRDQW9LU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJuVnRTVzVrYVdObGN6dGNjbHh1SUNCOVhISmNibjFjY2x4dVhISmNibVY0Y0c5eWRDQmtaV1poZFd4MElFbHVaR1Y0UW5WbVptVnlPMXh5WEc0aVhYMD0iXX0=