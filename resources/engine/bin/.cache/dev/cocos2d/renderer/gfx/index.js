(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _enums = require('./enums');
        var _vertexFormat = require('./vertex-format');
        var _vertexFormat2 = _interopRequireDefault(_vertexFormat);
        var _indexBuffer = require('./index-buffer');
        var _indexBuffer2 = _interopRequireDefault(_indexBuffer);
        var _vertexBuffer = require('./vertex-buffer');
        var _vertexBuffer2 = _interopRequireDefault(_vertexBuffer);
        var _program = require('./program');
        var _program2 = _interopRequireDefault(_program);
        var _texture = require('./texture');
        var _texture2 = _interopRequireDefault(_texture);
        var _texture2d = require('./texture-2d');
        var _texture2d2 = _interopRequireDefault(_texture2d);
        var _textureCube = require('./texture-cube');
        var _textureCube2 = _interopRequireDefault(_textureCube);
        var _renderBuffer = require('./render-buffer');
        var _renderBuffer2 = _interopRequireDefault(_renderBuffer);
        var _frameBuffer = require('./frame-buffer');
        var _frameBuffer2 = _interopRequireDefault(_frameBuffer);
        var _device = require('./device');
        var _device2 = _interopRequireDefault(_device);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var gfx = {
            VertexFormat: _vertexFormat2.default,
            IndexBuffer: _indexBuffer2.default,
            VertexBuffer: _vertexBuffer2.default,
            Program: _program2.default,
            Texture: _texture2.default,
            Texture2D: _texture2d2.default,
            TextureCube: _textureCube2.default,
            RenderBuffer: _renderBuffer2.default,
            FrameBuffer: _frameBuffer2.default,
            Device: _device2.default,
            attrTypeBytes: _enums.attrTypeBytes,
            glFilter: _enums.glFilter,
            glTextureFmt: _enums.glTextureFmt
        };
        Object.assign(gfx, _enums.enums);
        exports.default = gfx;
        cc.gfx = gfx;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,