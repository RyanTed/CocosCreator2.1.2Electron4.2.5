(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/vertex-format.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var VertexFormat = function () {
            function VertexFormat(infos) {
                _classCallCheck(this, VertexFormat);
                this._attr2el = {};
                this._elements = [];
                this._bytes = 0;
                for (var i = 0, len = infos.length; i < len; ++i) {
                    var info = infos[i];
                    var el = {
                        name: info.name,
                        offset: this._bytes,
                        stride: 0,
                        stream: -1,
                        type: info.type,
                        num: info.num,
                        normalize: info.normalize === undefined ? false : info.normalize,
                        bytes: info.num * (0, _enums.attrTypeBytes)(info.type)
                    };
                    this._attr2el[el.name] = el;
                    this._elements.push(el);
                    this._bytes += el.bytes;
                }
                for (var _i = 0, _len = this._elements.length; _i < _len; ++_i) {
                    var _el = this._elements[_i];
                    _el.stride = this._bytes;
                }
            }
            _createClass(VertexFormat, [{
                    key: 'element',
                    value: function element(attrName) {
                        return this._attr2el[attrName];
                    }
                }]);
            return VertexFormat;
        }();
        exports.default = VertexFormat;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,