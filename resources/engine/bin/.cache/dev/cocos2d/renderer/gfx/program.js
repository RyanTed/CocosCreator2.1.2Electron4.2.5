(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/program.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _genID = 0;
        function _parseError(out, type, errorLog) {
            errorLog.split('\n').forEach(function (msg) {
                if (msg.length < 5) {
                    return;
                }
                var parts = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(msg);
                if (parts) {
                    out.push({
                        type: type,
                        fileID: parts[1] | 0,
                        line: parts[2] | 0,
                        message: parts[3].trim()
                    });
                } else if (msg.length > 0) {
                    out.push({
                        type: type,
                        fileID: -1,
                        line: 0,
                        message: msg
                    });
                }
            });
        }
        var Program = function () {
            function Program(device, options) {
                _classCallCheck(this, Program);
                this._device = device;
                this._attributes = [];
                this._uniforms = [];
                this._samplers = [];
                this._errors = [];
                this._linked = false;
                this._vertSource = options.vert;
                this._fragSource = options.frag;
                this._glID = null;
                this._id = _genID++;
            }
            _createClass(Program, [
                {
                    key: 'link',
                    value: function link() {
                        if (this._linked) {
                            return;
                        }
                        var gl = this._device._gl;
                        var vertShader = _createShader(gl, gl.VERTEX_SHADER, this._vertSource);
                        var fragShader = _createShader(gl, gl.FRAGMENT_SHADER, this._fragSource);
                        var program = gl.createProgram();
                        gl.attachShader(program, vertShader);
                        gl.attachShader(program, fragShader);
                        gl.linkProgram(program);
                        var failed = false;
                        var errors = this._errors;
                        if (!gl.getShaderParameter(vertShader, gl.COMPILE_STATUS)) {
                            _parseError(errors, 'vs', gl.getShaderInfoLog(vertShader));
                            failed = true;
                        }
                        if (!gl.getShaderParameter(fragShader, gl.COMPILE_STATUS)) {
                            _parseError(errors, 'fs', gl.getShaderInfoLog(fragShader));
                            failed = true;
                        }
                        gl.deleteShader(vertShader);
                        gl.deleteShader(fragShader);
                        if (failed) {
                            return errors;
                        }
                        if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
                            errors.push({ info: 'Failed to link shader program: ' + gl.getProgramInfoLog(program) });
                            return errors;
                        }
                        this._glID = program;
                        var numAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);
                        for (var i = 0; i < numAttributes; ++i) {
                            var info = gl.getActiveAttrib(program, i);
                            var location = gl.getAttribLocation(program, info.name);
                            this._attributes.push({
                                name: info.name,
                                location: location,
                                type: info.type
                            });
                        }
                        var numUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);
                        for (var _i = 0; _i < numUniforms; ++_i) {
                            var _info = gl.getActiveUniform(program, _i);
                            var name = _info.name;
                            var _location = gl.getUniformLocation(program, name);
                            var isArray = name.substr(name.length - 3) === '[0]';
                            if (isArray) {
                                name = name.substr(0, name.length - 3);
                            }
                            var uniform = {
                                name: name,
                                location: _location,
                                type: _info.type,
                                size: isArray ? _info.size : undefined
                            };
                            this._uniforms.push(uniform);
                        }
                        this._linked = true;
                    }
                },
                {
                    key: 'destroy',
                    value: function destroy() {
                        var gl = this._device._gl;
                        gl.deleteProgram(this._glID);
                        this._linked = false;
                        this._glID = null;
                        this._attributes = [];
                        this._uniforms = [];
                        this._samplers = [];
                    }
                },
                {
                    key: 'id',
                    get: function get() {
                        return this._id;
                    }
                }
            ]);
            return Program;
        }();
        exports.default = Program;
        function _createShader(gl, type, src) {
            var shader = gl.createShader(type);
            gl.shaderSource(shader, src);
            gl.compileShader(shader);
            return shader;
        }
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,