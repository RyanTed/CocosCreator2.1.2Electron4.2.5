(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/renderer/gfx/texture.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _enums = require('./enums');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var _nullWebGLTexture = null;
        var _textureID = 0;
        var Texture = function () {
            function Texture(device) {
                _classCallCheck(this, Texture);
                this._device = device;
                this._width = 4;
                this._height = 4;
                this._hasMipmap = false;
                this._compressed = false;
                this._anisotropy = 1;
                this._minFilter = _enums.enums.FILTER_LINEAR;
                this._magFilter = _enums.enums.FILTER_LINEAR;
                this._mipFilter = _enums.enums.FILTER_LINEAR;
                this._wrapS = _enums.enums.WRAP_REPEAT;
                this._wrapT = _enums.enums.WRAP_REPEAT;
                this._format = _enums.enums.TEXTURE_FMT_RGBA8;
                this._target = -1;
                this._id = _textureID++;
            }
            _createClass(Texture, [{
                    key: 'destroy',
                    value: function destroy() {
                        if (this._glID === _nullWebGLTexture) {
                            console.error('The texture already destroyed');
                            return;
                        }
                        var gl = this._device._gl;
                        gl.deleteTexture(this._glID);
                        this._device._stats.tex -= this.bytes;
                        this._glID = _nullWebGLTexture;
                    }
                }]);
            return Texture;
        }();
        exports.default = Texture;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,