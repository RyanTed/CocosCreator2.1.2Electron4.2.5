(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCNode.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('./vmath');
        var BaseNode = require('./utils/base-node');
        var PrefabHelper = require('./utils/prefab-helper');
        var mathPools = require('./utils/math-pools');
        var AffineTrans = require('./utils/affine-transform');
        var eventManager = require('./event-manager');
        var macro = require('./platform/CCMacro');
        var js = require('./platform/js');
        var Event = require('./event/event');
        var EventTarget = require('./event/event-target');
        var RenderFlow = require('./renderer/render-flow');
        var Flags = cc.Object.Flags;
        var Destroying = Flags.Destroying;
        var ERR_INVALID_NUMBER = CC_EDITOR && 'The %s is invalid';
        var ONE_DEGREE = Math.PI / 180;
        var ActionManagerExist = !!cc.ActionManager;
        var emptyFunc = function emptyFunc() {
        };
        var _vec2a = cc.v2();
        var _vec2b = cc.v2();
        var _mat4_temp = _vmath.mat4.create();
        var _vec3_temp = _vmath.vec3.create();
        var _quat_temp = _vmath.quat.create();
        var _globalOrderOfArrival = 1;
        var _cachedArray = new Array(16);
        _cachedArray.length = 0;
        var POSITION_ON = 1 << 0;
        var SCALE_ON = 1 << 1;
        var ROTATION_ON = 1 << 2;
        var SIZE_ON = 1 << 3;
        var ANCHOR_ON = 1 << 4;
        var COLOR_ON = 1 << 5;
        var BuiltinGroupIndex = cc.Enum({ DEBUG: 31 });
        var LocalDirtyFlag = cc.Enum({
            POSITION: 1 << 0,
            SCALE: 1 << 1,
            ROTATION: 1 << 2,
            SKEW: 1 << 3,
            RT: 1 << 0 | 1 << 1 | 1 << 2,
            ALL: 65535
        });
        var EventType = cc.Enum({
            TOUCH_START: 'touchstart',
            TOUCH_MOVE: 'touchmove',
            TOUCH_END: 'touchend',
            TOUCH_CANCEL: 'touchcancel',
            MOUSE_DOWN: 'mousedown',
            MOUSE_MOVE: 'mousemove',
            MOUSE_ENTER: 'mouseenter',
            MOUSE_LEAVE: 'mouseleave',
            MOUSE_UP: 'mouseup',
            MOUSE_WHEEL: 'mousewheel',
            POSITION_CHANGED: 'position-changed',
            ROTATION_CHANGED: 'rotation-changed',
            SCALE_CHANGED: 'scale-changed',
            SIZE_CHANGED: 'size-changed',
            ANCHOR_CHANGED: 'anchor-changed',
            COLOR_CHANGED: 'color-changed',
            CHILD_ADDED: 'child-added',
            CHILD_REMOVED: 'child-removed',
            CHILD_REORDER: 'child-reorder',
            GROUP_CHANGED: 'group-changed'
        });
        var _touchEvents = [
            EventType.TOUCH_START,
            EventType.TOUCH_MOVE,
            EventType.TOUCH_END,
            EventType.TOUCH_CANCEL
        ];
        var _mouseEvents = [
            EventType.MOUSE_DOWN,
            EventType.MOUSE_ENTER,
            EventType.MOUSE_MOVE,
            EventType.MOUSE_LEAVE,
            EventType.MOUSE_UP,
            EventType.MOUSE_WHEEL
        ];
        var _currentHovered = null;
        var _touchStartHandler = function _touchStartHandler(touch, event) {
            var pos = touch.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.TOUCH_START;
                event.touch = touch;
                event.bubbles = true;
                node.dispatchEvent(event);
                return true;
            }
            return false;
        };
        var _touchMoveHandler = function _touchMoveHandler(touch, event) {
            var node = this.owner;
            event.type = EventType.TOUCH_MOVE;
            event.touch = touch;
            event.bubbles = true;
            node.dispatchEvent(event);
        };
        var _touchEndHandler = function _touchEndHandler(touch, event) {
            var pos = touch.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.TOUCH_END;
            } else {
                event.type = EventType.TOUCH_CANCEL;
            }
            event.touch = touch;
            event.bubbles = true;
            node.dispatchEvent(event);
        };
        var _touchCancelHandler = function _touchCancelHandler(touch, event) {
            var pos = touch.getLocation();
            var node = this.owner;
            event.type = EventType.TOUCH_CANCEL;
            event.touch = touch;
            event.bubbles = true;
            node.dispatchEvent(event);
        };
        var _mouseDownHandler = function _mouseDownHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.MOUSE_DOWN;
                event.bubbles = true;
                node.dispatchEvent(event);
            }
        };
        var _mouseMoveHandler = function _mouseMoveHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            var hit = node._hitTest(pos, this);
            if (hit) {
                if (!this._previousIn) {
                    if (_currentHovered && _currentHovered._mouseListener) {
                        event.type = EventType.MOUSE_LEAVE;
                        _currentHovered.dispatchEvent(event);
                        _currentHovered._mouseListener._previousIn = false;
                    }
                    _currentHovered = this.owner;
                    event.type = EventType.MOUSE_ENTER;
                    node.dispatchEvent(event);
                    this._previousIn = true;
                }
                event.type = EventType.MOUSE_MOVE;
                event.bubbles = true;
                node.dispatchEvent(event);
            } else if (this._previousIn) {
                event.type = EventType.MOUSE_LEAVE;
                node.dispatchEvent(event);
                this._previousIn = false;
                _currentHovered = null;
            } else {
                return;
            }
            event.stopPropagation();
        };
        var _mouseUpHandler = function _mouseUpHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.MOUSE_UP;
                event.bubbles = true;
                node.dispatchEvent(event);
                event.stopPropagation();
            }
        };
        var _mouseWheelHandler = function _mouseWheelHandler(event) {
            var pos = event.getLocation();
            var node = this.owner;
            if (node._hitTest(pos, this)) {
                event.type = EventType.MOUSE_WHEEL;
                event.bubbles = true;
                node.dispatchEvent(event);
                event.stopPropagation();
            }
        };
        function _searchMaskInParent(node) {
            var Mask = cc.Mask;
            if (Mask) {
                var index = 0;
                for (var curr = node; curr && cc.Node.isNode(curr); curr = curr._parent, ++index) {
                    if (curr.getComponent(Mask)) {
                        return {
                            index: index,
                            node: curr
                        };
                    }
                }
            }
            return null;
        }
        function _checkListeners(node, events) {
            if (!(node._objFlags & Destroying)) {
                var i = 0;
                if (node._bubblingListeners) {
                    for (; i < events.length; ++i) {
                        if (node._bubblingListeners.hasEventListener(events[i])) {
                            return true;
                        }
                    }
                }
                if (node._capturingListeners) {
                    for (; i < events.length; ++i) {
                        if (node._capturingListeners.hasEventListener(events[i])) {
                            return true;
                        }
                    }
                }
                return false;
            }
            return true;
        }
        function _doDispatchEvent(owner, event) {
            var target, i;
            event.target = owner;
            _cachedArray.length = 0;
            owner._getCapturingTargets(event.type, _cachedArray);
            event.eventPhase = 1;
            for (i = _cachedArray.length - 1; i >= 0; --i) {
                target = _cachedArray[i];
                if (target._capturingListeners) {
                    event.currentTarget = target;
                    target._capturingListeners.emit(event.type, event, _cachedArray);
                    if (event._propagationStopped) {
                        _cachedArray.length = 0;
                        return;
                    }
                }
            }
            _cachedArray.length = 0;
            event.eventPhase = 2;
            event.currentTarget = owner;
            if (owner._capturingListeners) {
                owner._capturingListeners.emit(event.type, event);
            }
            if (!event._propagationImmediateStopped && owner._bubblingListeners) {
                owner._bubblingListeners.emit(event.type, event);
            }
            if (!event._propagationStopped && event.bubbles) {
                owner._getBubblingTargets(event.type, _cachedArray);
                event.eventPhase = 3;
                for (i = 0; i < _cachedArray.length; ++i) {
                    target = _cachedArray[i];
                    if (target._bubblingListeners) {
                        event.currentTarget = target;
                        target._bubblingListeners.emit(event.type, event);
                        if (event._propagationStopped) {
                            _cachedArray.length = 0;
                            return;
                        }
                    }
                }
            }
            _cachedArray.length = 0;
        }
        function _getActualGroupIndex(node) {
            var groupIndex = node.groupIndex;
            if (groupIndex === 0 && node.parent) {
                groupIndex = _getActualGroupIndex(node.parent);
            }
            return groupIndex;
        }
        function _updateCullingMask(node) {
            var index = _getActualGroupIndex(node);
            node._cullingMask = 1 << index;
            for (var i = 0; i < node._children.length; i++) {
                _updateCullingMask(node._children[i]);
            }
        }
        var NodeDefines = {
            name: 'cc.Node',
            extends: BaseNode,
            properties: {
                _opacity: 255,
                _color: cc.Color.WHITE,
                _contentSize: cc.Size,
                _anchorPoint: cc.v2(0.5, 0.5),
                _position: cc.Vec3,
                _scale: cc.Vec3.ONE,
                _eulerAngles: cc.Vec3,
                _skewX: 0,
                _skewY: 0,
                _zIndex: {
                    default: undefined,
                    type: cc.Integer
                },
                _localZOrder: {
                    default: 0,
                    serializable: false
                },
                _is3DNode: false,
                groupIndex: {
                    default: 0,
                    type: cc.Integer
                },
                group: {
                    get: function get() {
                        return cc.game.groupList[this.groupIndex] || '';
                    },
                    set: function set(value) {
                        this.groupIndex = cc.game.groupList.indexOf(value);
                        _updateCullingMask(this);
                        this.emit(EventType.GROUP_CHANGED, this);
                    }
                },
                x: {
                    get: function get() {
                        return this._position.x;
                    },
                    set: function set(value) {
                        var localPosition = this._position;
                        if (value !== localPosition.x) {
                            if (!CC_EDITOR || isFinite(value)) {
                                if (CC_EDITOR) {
                                    var oldValue = localPosition.x;
                                }
                                localPosition.x = value;
                                this.setLocalDirty(LocalDirtyFlag.POSITION);
                                this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                                if (this._eventMask & POSITION_ON) {
                                    if (CC_EDITOR) {
                                        this.emit(EventType.POSITION_CHANGED, new cc.Vec3(oldValue, localPosition.y, localPosition.z));
                                    } else {
                                        this.emit(EventType.POSITION_CHANGED);
                                    }
                                }
                            } else {
                                cc.error(ERR_INVALID_NUMBER, 'new x');
                            }
                        }
                    }
                },
                y: {
                    get: function get() {
                        return this._position.y;
                    },
                    set: function set(value) {
                        var localPosition = this._position;
                        if (value !== localPosition.y) {
                            if (!CC_EDITOR || isFinite(value)) {
                                if (CC_EDITOR) {
                                    var oldValue = localPosition.y;
                                }
                                localPosition.y = value;
                                this.setLocalDirty(LocalDirtyFlag.POSITION);
                                this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                                if (this._eventMask & POSITION_ON) {
                                    if (CC_EDITOR) {
                                        this.emit(EventType.POSITION_CHANGED, new cc.Vec3(localPosition.x, oldValue, localPosition.z));
                                    } else {
                                        this.emit(EventType.POSITION_CHANGED);
                                    }
                                }
                            } else {
                                cc.error(ERR_INVALID_NUMBER, 'new y');
                            }
                        }
                    }
                },
                rotation: {
                    get: function get() {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotation` is deprecated since v2.1.0, please use `-angle` instead. (`this.node.rotation` -> `-this.node.angle`)');
                        }
                        return -this.angle;
                    },
                    set: function set(value) {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotation` is deprecated since v2.1.0, please set `-angle` instead. (`this.node.rotation = x` -> `this.node.angle = -x`)');
                        }
                        this.angle = -value;
                    }
                },
                angle: {
                    get: function get() {
                        return this._eulerAngles.z;
                    },
                    set: function set(value) {
                        _vmath.vec3.set(this._eulerAngles, 0, 0, value);
                        _vmath.quat.fromAngleZ(this._quat, value);
                        this.setLocalDirty(LocalDirtyFlag.ROTATION);
                        this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                        if (this._eventMask & ROTATION_ON) {
                            this.emit(EventType.ROTATION_CHANGED);
                        }
                    }
                },
                rotationX: {
                    get: function get() {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationX` is deprecated since v2.1.0, please use `eulerAngles.x` instead. (`this.node.rotationX` -> `this.node.eulerAngles.x`)');
                        }
                        return this._eulerAngles.x;
                    },
                    set: function set(value) {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationX` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationX = x` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(x, 0, 0)`');
                        }
                        if (this._eulerAngles.x !== value) {
                            this._eulerAngles.x = value;
                            if (this._eulerAngles.x === this._eulerAngles.y) {
                                _vmath.quat.fromAngleZ(this._quat, -value);
                            } else {
                                _vmath.quat.fromEuler(this._quat, value, this._eulerAngles.y, 0);
                            }
                            this.setLocalDirty(LocalDirtyFlag.ROTATION);
                            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                            if (this._eventMask & ROTATION_ON) {
                                this.emit(EventType.ROTATION_CHANGED);
                            }
                        }
                    }
                },
                rotationY: {
                    get: function get() {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationY` is deprecated since v2.1.0, please use `eulerAngles.y` instead. (`this.node.rotationY` -> `this.node.eulerAngles.y`)');
                        }
                        return this._eulerAngles.y;
                    },
                    set: function set(value) {
                        if (CC_DEBUG) {
                            cc.warn('`cc.Node.rotationY` is deprecated since v2.1.0, please set `eulerAngles` instead. (`this.node.rotationY = y` -> `this.node.is3DNode = true; this.node.eulerAngles = cc.v3(0, y, 0)`');
                        }
                        if (this._eulerAngles.y !== value) {
                            this._eulerAngles.y = value;
                            if (this._eulerAngles.x === this._eulerAngles.y) {
                                _vmath.quat.fromAngleZ(this._quat, -value);
                            } else {
                                _vmath.quat.fromEuler(this._quat, this._eulerAngles.x, value, 0);
                            }
                            this.setLocalDirty(LocalDirtyFlag.ROTATION);
                            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                            if (this._eventMask & ROTATION_ON) {
                                this.emit(EventType.ROTATION_CHANGED);
                            }
                        }
                    }
                },
                scale: {
                    get: function get() {
                        return this._scale.x;
                    },
                    set: function set(v) {
                        this.setScale(v);
                    }
                },
                scaleX: {
                    get: function get() {
                        return this._scale.x;
                    },
                    set: function set(value) {
                        if (this._scale.x !== value) {
                            this._scale.x = value;
                            this.setLocalDirty(LocalDirtyFlag.SCALE);
                            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                            if (this._eventMask & SCALE_ON) {
                                this.emit(EventType.SCALE_CHANGED);
                            }
                        }
                    }
                },
                scaleY: {
                    get: function get() {
                        return this._scale.y;
                    },
                    set: function set(value) {
                        if (this._scale.y !== value) {
                            this._scale.y = value;
                            this.setLocalDirty(LocalDirtyFlag.SCALE);
                            this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                            if (this._eventMask & SCALE_ON) {
                                this.emit(EventType.SCALE_CHANGED);
                            }
                        }
                    }
                },
                skewX: {
                    get: function get() {
                        return this._skewX;
                    },
                    set: function set(value) {
                        this._skewX = value;
                        this.setLocalDirty(LocalDirtyFlag.SKEW);
                        this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                    }
                },
                skewY: {
                    get: function get() {
                        return this._skewY;
                    },
                    set: function set(value) {
                        this._skewY = value;
                        this.setLocalDirty(LocalDirtyFlag.SKEW);
                        this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                    }
                },
                opacity: {
                    get: function get() {
                        return this._opacity;
                    },
                    set: function set(value) {
                        value = cc.misc.clampf(value, 0, 255);
                        if (this._opacity !== value) {
                            this._opacity = value;
                            this._renderFlag |= RenderFlow.FLAG_OPACITY;
                        }
                    },
                    range: [
                        0,
                        255
                    ]
                },
                color: {
                    get: function get() {
                        return this._color.clone();
                    },
                    set: function set(value) {
                        if (!this._color.equals(value)) {
                            this._color.set(value);
                            if (CC_DEV && value.a !== 255) {
                                cc.warnID(1626);
                            }
                            if (this._eventMask & COLOR_ON) {
                                this.emit(EventType.COLOR_CHANGED, value);
                            }
                        }
                    }
                },
                anchorX: {
                    get: function get() {
                        return this._anchorPoint.x;
                    },
                    set: function set(value) {
                        var anchorPoint = this._anchorPoint;
                        if (anchorPoint.x !== value) {
                            anchorPoint.x = value;
                            if (this._eventMask & ANCHOR_ON) {
                                this.emit(EventType.ANCHOR_CHANGED);
                            }
                        }
                    }
                },
                anchorY: {
                    get: function get() {
                        return this._anchorPoint.y;
                    },
                    set: function set(value) {
                        var anchorPoint = this._anchorPoint;
                        if (anchorPoint.y !== value) {
                            anchorPoint.y = value;
                            if (this._eventMask & ANCHOR_ON) {
                                this.emit(EventType.ANCHOR_CHANGED);
                            }
                        }
                    }
                },
                width: {
                    get: function get() {
                        return this._contentSize.width;
                    },
                    set: function set(value) {
                        if (value !== this._contentSize.width) {
                            if (CC_EDITOR) {
                                var clone = cc.size(this._contentSize.width, this._contentSize.height);
                            }
                            this._contentSize.width = value;
                            if (this._eventMask & SIZE_ON) {
                                if (CC_EDITOR) {
                                    this.emit(EventType.SIZE_CHANGED, clone);
                                } else {
                                    this.emit(EventType.SIZE_CHANGED);
                                }
                            }
                        }
                    }
                },
                height: {
                    get: function get() {
                        return this._contentSize.height;
                    },
                    set: function set(value) {
                        if (value !== this._contentSize.height) {
                            if (CC_EDITOR) {
                                var clone = cc.size(this._contentSize.width, this._contentSize.height);
                            }
                            this._contentSize.height = value;
                            if (this._eventMask & SIZE_ON) {
                                if (CC_EDITOR) {
                                    this.emit(EventType.SIZE_CHANGED, clone);
                                } else {
                                    this.emit(EventType.SIZE_CHANGED);
                                }
                            }
                        }
                    }
                },
                zIndex: {
                    get: function get() {
                        return this._localZOrder >> 16;
                    },
                    set: function set(value) {
                        if (value > macro.MAX_ZINDEX) {
                            cc.warnID(1636);
                            value = macro.MAX_ZINDEX;
                        } else if (value < macro.MIN_ZINDEX) {
                            cc.warnID(1637);
                            value = macro.MIN_ZINDEX;
                        }
                        if (this.zIndex !== value) {
                            this._localZOrder = this._localZOrder & 65535 | value << 16;
                            if (this._parent) {
                                this._onSiblingIndexChanged();
                            }
                        }
                    }
                }
            },
            ctor: function ctor() {
                this._reorderChildDirty = false;
                this._widget = null;
                this._renderComponent = null;
                this._capturingListeners = null;
                this._bubblingListeners = null;
                this._touchListener = null;
                this._mouseListener = null;
                this._matrix = mathPools.mat4.get();
                this._worldMatrix = mathPools.mat4.get();
                this._localMatDirty = LocalDirtyFlag.ALL;
                this._worldMatDirty = true;
                this._eventMask = 0;
                this._cullingMask = 1;
                this._childArrivalOrder = 1;
                this._quat = cc.quat();
            },
            statics: {
                EventType: EventType,
                _LocalDirtyFlag: LocalDirtyFlag,
                isNode: function isNode(obj) {
                    return obj instanceof Node && (obj.constructor === Node || !(obj instanceof cc.Scene));
                },
                BuiltinGroupIndex: BuiltinGroupIndex
            },
            _onSiblingIndexChanged: function _onSiblingIndexChanged() {
                var parent = this._parent;
                var siblings = parent._children;
                var i = 0, len = siblings.length, sibling;
                for (; i < len; i++) {
                    sibling = siblings[i];
                    sibling._updateOrderOfArrival();
                }
                parent._delaySort();
            },
            _onPreDestroy: function _onPreDestroy() {
                var destroyByParent = this._onPreDestroyBase();
                if (ActionManagerExist) {
                    cc.director.getActionManager().removeAllActionsFromTarget(this);
                }
                if (_currentHovered === this) {
                    _currentHovered = null;
                }
                if (this._touchListener || this._mouseListener) {
                    eventManager.removeListeners(this);
                    if (this._touchListener) {
                        this._touchListener.owner = null;
                        this._touchListener.mask = null;
                        this._touchListener = null;
                    }
                    if (this._mouseListener) {
                        this._mouseListener.owner = null;
                        this._mouseListener.mask = null;
                        this._mouseListener = null;
                    }
                }
                mathPools.mat4.put(this._matrix);
                mathPools.mat4.put(this._worldMatrix);
                this._matrix = this._worldMatrix = null;
                if (this._reorderChildDirty) {
                    cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                }
                if (!destroyByParent) {
                    if (CC_EDITOR) {
                        this._parent = null;
                    }
                }
            },
            _onPostActivated: function _onPostActivated(active) {
                var actionManager = ActionManagerExist ? cc.director.getActionManager() : null;
                if (active) {
                    this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                    actionManager && actionManager.resumeTarget(this);
                    eventManager.resumeTarget(this);
                    if (this._touchListener) {
                        var mask = this._touchListener.mask = _searchMaskInParent(this);
                        if (this._mouseListener) {
                            this._mouseListener.mask = mask;
                        }
                    } else if (this._mouseListener) {
                        this._mouseListener.mask = _searchMaskInParent(this);
                    }
                } else {
                    actionManager && actionManager.pauseTarget(this);
                    eventManager.pauseTarget(this);
                }
            },
            _onHierarchyChanged: function _onHierarchyChanged(oldParent) {
                this._updateOrderOfArrival();
                _updateCullingMask(this);
                if (this._parent) {
                    this._parent._delaySort();
                }
                this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                this._onHierarchyChangedBase(oldParent);
                if (cc._widgetManager) {
                    cc._widgetManager._nodesOrderDirty = true;
                }
            },
            _toEuler: function _toEuler() {
                if (this.is3DNode) {
                    this._quat.toEuler(this._eulerAngles);
                } else {
                    var z = Math.asin(this._quat.z) / ONE_DEGREE * 2;
                    _vmath.vec3.set(this._eulerAngles, 0, 0, z);
                }
            },
            _fromEuler: function _fromEuler() {
                if (this.is3DNode) {
                    this._quat.fromEuler(this._eulerAngles);
                } else {
                    _vmath.quat.fromAngleZ(this._quat, this._eulerAngles.z);
                }
            },
            _upgrade_1x_to_2x: function _upgrade_1x_to_2x() {
                if (this._scaleX !== undefined) {
                    this._scale.x = this._scaleX;
                    this._scaleX = undefined;
                }
                if (this._scaleY !== undefined) {
                    this._scale.y = this._scaleY;
                    this._scaleY = undefined;
                }
                if (this._zIndex !== undefined) {
                    this._localZOrder = this._zIndex << 16;
                    this._zIndex = undefined;
                }
                var eulerAngles = this._eulerAngles;
                if ((this._rotationX || this._rotationY) && eulerAngles.x === 0 && eulerAngles.y === 0 && eulerAngles.z === 0) {
                    if (this._rotationX === this._rotationY) {
                        eulerAngles.z = -this._rotationX;
                    } else {
                        eulerAngles.x = this._rotationX;
                        eulerAngles.y = this._rotationY;
                    }
                    this._rotationX = this._rotationY = undefined;
                }
                this._fromEuler();
                if (this._color.a < 255 && this._opacity === 255) {
                    this._opacity = this._color.a;
                    this._color.a = 255;
                }
            },
            _onBatchCreated: function _onBatchCreated() {
                var prefabInfo = this._prefab;
                if (prefabInfo && prefabInfo.sync && prefabInfo.root === this) {
                    if (CC_DEV) {
                        cc.assert(!prefabInfo._synced, 'prefab should not synced');
                    }
                    PrefabHelper.syncWithPrefab(this);
                }
                this._upgrade_1x_to_2x();
                this._updateOrderOfArrival();
                this._cullingMask = 1 << _getActualGroupIndex(this);
                if (!this._activeInHierarchy) {
                    if (ActionManagerExist) {
                        cc.director.getActionManager().pauseTarget(this);
                    }
                    eventManager.pauseTarget(this);
                }
                var children = this._children;
                for (var i = 0, len = children.length; i < len; i++) {
                    children[i]._onBatchCreated();
                }
                if (children.length > 0) {
                    this._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
            },
            _onBatchRestored: function _onBatchRestored() {
                this._upgrade_1x_to_2x();
                this._cullingMask = 1 << _getActualGroupIndex(this);
                if (!this._activeInHierarchy) {
                    var manager = cc.director.getActionManager();
                    manager && manager.pauseTarget(this);
                    eventManager.pauseTarget(this);
                }
                var children = this._children;
                for (var i = 0, len = children.length; i < len; i++) {
                    children[i]._onBatchRestored();
                }
                if (children.length > 0) {
                    this._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
            },
            _checknSetupSysEvent: function _checknSetupSysEvent(type) {
                var newAdded = false;
                var forDispatch = false;
                if (_touchEvents.indexOf(type) !== -1) {
                    if (!this._touchListener) {
                        this._touchListener = cc.EventListener.create({
                            event: cc.EventListener.TOUCH_ONE_BY_ONE,
                            swallowTouches: true,
                            owner: this,
                            mask: _searchMaskInParent(this),
                            onTouchBegan: _touchStartHandler,
                            onTouchMoved: _touchMoveHandler,
                            onTouchEnded: _touchEndHandler,
                            onTouchCancelled: _touchCancelHandler
                        });
                        eventManager.addListener(this._touchListener, this);
                        newAdded = true;
                    }
                    forDispatch = true;
                } else if (_mouseEvents.indexOf(type) !== -1) {
                    if (!this._mouseListener) {
                        this._mouseListener = cc.EventListener.create({
                            event: cc.EventListener.MOUSE,
                            _previousIn: false,
                            owner: this,
                            mask: _searchMaskInParent(this),
                            onMouseDown: _mouseDownHandler,
                            onMouseMove: _mouseMoveHandler,
                            onMouseUp: _mouseUpHandler,
                            onMouseScroll: _mouseWheelHandler
                        });
                        eventManager.addListener(this._mouseListener, this);
                        newAdded = true;
                    }
                    forDispatch = true;
                }
                if (newAdded && !this._activeInHierarchy) {
                    cc.director.getScheduler().schedule(function () {
                        if (!this._activeInHierarchy) {
                            eventManager.pauseTarget(this);
                        }
                    }, this, 0, 0, 0, false);
                }
                return forDispatch;
            },
            on: function on(type, callback, target, useCapture) {
                var forDispatch = this._checknSetupSysEvent(type);
                if (forDispatch) {
                    return this._onDispatch(type, callback, target, useCapture);
                } else {
                    switch (type) {
                    case EventType.POSITION_CHANGED:
                        this._eventMask |= POSITION_ON;
                        break;
                    case EventType.SCALE_CHANGED:
                        this._eventMask |= SCALE_ON;
                        break;
                    case EventType.ROTATION_CHANGED:
                        this._eventMask |= ROTATION_ON;
                        break;
                    case EventType.SIZE_CHANGED:
                        this._eventMask |= SIZE_ON;
                        break;
                    case EventType.ANCHOR_CHANGED:
                        this._eventMask |= ANCHOR_ON;
                        break;
                    case EventType.COLOR_CHANGED:
                        this._eventMask |= COLOR_ON;
                        break;
                    }
                    if (!this._bubblingListeners) {
                        this._bubblingListeners = new EventTarget();
                    }
                    return this._bubblingListeners.on(type, callback, target);
                }
            },
            once: function once(type, callback, target, useCapture) {
                var forDispatch = this._checknSetupSysEvent(type);
                var eventType_hasOnceListener = '__ONCE_FLAG:' + type;
                var listeners = null;
                if (forDispatch && useCapture) {
                    listeners = this._capturingListeners = this._capturingListeners || new EventTarget();
                } else {
                    listeners = this._bubblingListeners = this._bubblingListeners || new EventTarget();
                }
                var hasOnceListener = listeners.hasEventListener(eventType_hasOnceListener, callback, target);
                if (!hasOnceListener) {
                    var self = this;
                    var onceWrapper = function onceWrapper(arg1, arg2, arg3, arg4, arg5) {
                        self.off(type, onceWrapper, target);
                        listeners.remove(eventType_hasOnceListener, callback, target);
                        callback.call(this, arg1, arg2, arg3, arg4, arg5);
                    };
                    this.on(type, onceWrapper, target);
                    listeners.add(eventType_hasOnceListener, callback, target);
                }
            },
            _onDispatch: function _onDispatch(type, callback, target, useCapture) {
                if (typeof target === 'boolean') {
                    useCapture = target;
                    target = undefined;
                } else
                    useCapture = !!useCapture;
                if (!callback) {
                    cc.errorID(6800);
                    return;
                }
                var listeners = null;
                if (useCapture) {
                    listeners = this._capturingListeners = this._capturingListeners || new EventTarget();
                } else {
                    listeners = this._bubblingListeners = this._bubblingListeners || new EventTarget();
                }
                if (!listeners.hasEventListener(type, callback, target)) {
                    listeners.add(type, callback, target);
                    if (target && target.__eventTargets)
                        target.__eventTargets.push(this);
                }
                return callback;
            },
            off: function off(type, callback, target, useCapture) {
                var touchEvent = _touchEvents.indexOf(type) !== -1;
                var mouseEvent = !touchEvent && _mouseEvents.indexOf(type) !== -1;
                if (touchEvent || mouseEvent) {
                    this._offDispatch(type, callback, target, useCapture);
                    if (touchEvent) {
                        if (this._touchListener && !_checkListeners(this, _touchEvents)) {
                            eventManager.removeListener(this._touchListener);
                            this._touchListener = null;
                        }
                    } else if (mouseEvent) {
                        if (this._mouseListener && !_checkListeners(this, _mouseEvents)) {
                            eventManager.removeListener(this._mouseListener);
                            this._mouseListener = null;
                        }
                    }
                } else if (this._bubblingListeners) {
                    this._bubblingListeners.off(type, callback, target);
                    var hasListeners = this._bubblingListeners.hasEventListener(type);
                    if (!hasListeners) {
                        switch (type) {
                        case EventType.POSITION_CHANGED:
                            this._eventMask &= ~POSITION_ON;
                            break;
                        case EventType.SCALE_CHANGED:
                            this._eventMask &= ~SCALE_ON;
                            break;
                        case EventType.ROTATION_CHANGED:
                            this._eventMask &= ~ROTATION_ON;
                            break;
                        case EventType.SIZE_CHANGED:
                            this._eventMask &= ~SIZE_ON;
                            break;
                        case EventType.ANCHOR_CHANGED:
                            this._eventMask &= ~ANCHOR_ON;
                            break;
                        case EventType.COLOR_CHANGED:
                            this._eventMask &= ~COLOR_ON;
                            break;
                        }
                    }
                }
            },
            _offDispatch: function _offDispatch(type, callback, target, useCapture) {
                if (typeof target === 'boolean') {
                    useCapture = target;
                    target = undefined;
                } else
                    useCapture = !!useCapture;
                if (!callback) {
                    this._capturingListeners && this._capturingListeners.removeAll(type);
                    this._bubblingListeners && this._bubblingListeners.removeAll(type);
                } else {
                    var listeners = useCapture ? this._capturingListeners : this._bubblingListeners;
                    if (listeners) {
                        listeners.remove(type, callback, target);
                        if (target && target.__eventTargets) {
                            js.array.fastRemove(target.__eventTargets, this);
                        }
                    }
                }
            },
            targetOff: function targetOff(target) {
                var listeners = this._bubblingListeners;
                if (listeners) {
                    listeners.targetOff(target);
                    if (this._eventMask & POSITION_ON && !listeners.hasEventListener(EventType.POSITION_CHANGED)) {
                        this._eventMask &= ~POSITION_ON;
                    }
                    if (this._eventMask & SCALE_ON && !listeners.hasEventListener(EventType.SCALE_CHANGED)) {
                        this._eventMask &= ~SCALE_ON;
                    }
                    if (this._eventMask & ROTATION_ON && !listeners.hasEventListener(EventType.ROTATION_CHANGED)) {
                        this._eventMask &= ~ROTATION_ON;
                    }
                    if (this._eventMask & SIZE_ON && !listeners.hasEventListener(EventType.SIZE_CHANGED)) {
                        this._eventMask &= ~SIZE_ON;
                    }
                    if (this._eventMask & ANCHOR_ON && !listeners.hasEventListener(EventType.ANCHOR_CHANGED)) {
                        this._eventMask &= ~ANCHOR_ON;
                    }
                    if (this._eventMask & COLOR_ON && !listeners.hasEventListener(EventType.COLOR_CHANGED)) {
                        this._eventMask &= ~COLOR_ON;
                    }
                }
                if (this._capturingListeners) {
                    this._capturingListeners.targetOff(target);
                }
                if (this._touchListener && !_checkListeners(this, _touchEvents)) {
                    eventManager.removeListener(this._touchListener);
                    this._touchListener = null;
                }
                if (this._mouseListener && !_checkListeners(this, _mouseEvents)) {
                    eventManager.removeListener(this._mouseListener);
                    this._mouseListener = null;
                }
            },
            hasEventListener: function hasEventListener(type) {
                var has = false;
                if (this._bubblingListeners) {
                    has = this._bubblingListeners.hasEventListener(type);
                }
                if (!has && this._capturingListeners) {
                    has = this._capturingListeners.hasEventListener(type);
                }
                return has;
            },
            emit: function emit(type, arg1, arg2, arg3, arg4, arg5) {
                if (this._bubblingListeners) {
                    this._bubblingListeners.emit(type, arg1, arg2, arg3, arg4, arg5);
                }
            },
            dispatchEvent: function dispatchEvent(event) {
                _doDispatchEvent(this, event);
                _cachedArray.length = 0;
            },
            pauseSystemEvents: function pauseSystemEvents(recursive) {
                eventManager.pauseTarget(this, recursive);
            },
            resumeSystemEvents: function resumeSystemEvents(recursive) {
                eventManager.resumeTarget(this, recursive);
            },
            _hitTest: function _hitTest(point, listener) {
                var w = this._contentSize.width, h = this._contentSize.height, cameraPt = _vec2a, testPt = _vec2b;
                var camera = cc.Camera.findCamera(this);
                if (camera) {
                    camera.getCameraToWorldPoint(point, cameraPt);
                } else {
                    cameraPt.set(point);
                }
                this._updateWorldMatrix();
                if (!_vmath.mat4.invert(_mat4_temp, this._worldMatrix)) {
                    return false;
                }
                _vmath.vec2.transformMat4(testPt, cameraPt, _mat4_temp);
                testPt.x += this._anchorPoint.x * w;
                testPt.y += this._anchorPoint.y * h;
                if (testPt.x >= 0 && testPt.y >= 0 && testPt.x <= w && testPt.y <= h) {
                    if (listener && listener.mask) {
                        var mask = listener.mask;
                        var parent = this;
                        for (var i = 0; parent && i < mask.index; ++i, parent = parent.parent) {
                        }
                        if (parent === mask.node) {
                            var comp = parent.getComponent(cc.Mask);
                            return comp && comp.enabledInHierarchy ? comp._hitTest(cameraPt) : true;
                        } else {
                            listener.mask = null;
                            return true;
                        }
                    } else {
                        return true;
                    }
                } else {
                    return false;
                }
            },
            _getCapturingTargets: function _getCapturingTargets(type, array) {
                var parent = this.parent;
                while (parent) {
                    if (parent._capturingListeners && parent._capturingListeners.hasEventListener(type)) {
                        array.push(parent);
                    }
                    parent = parent.parent;
                }
            },
            _getBubblingTargets: function _getBubblingTargets(type, array) {
                var parent = this.parent;
                while (parent) {
                    if (parent._bubblingListeners && parent._bubblingListeners.hasEventListener(type)) {
                        array.push(parent);
                    }
                    parent = parent.parent;
                }
            },
            runAction: ActionManagerExist ? function (action) {
                if (!this.active)
                    return;
                cc.assertID(action, 1618);
                cc.director.getActionManager().addAction(action, this, false);
                return action;
            } : emptyFunc,
            pauseAllActions: ActionManagerExist ? function () {
                cc.director.getActionManager().pauseTarget(this);
            } : emptyFunc,
            resumeAllActions: ActionManagerExist ? function () {
                cc.director.getActionManager().resumeTarget(this);
            } : emptyFunc,
            stopAllActions: ActionManagerExist ? function () {
                cc.director.getActionManager().removeAllActionsFromTarget(this);
            } : emptyFunc,
            stopAction: ActionManagerExist ? function (action) {
                cc.director.getActionManager().removeAction(action);
            } : emptyFunc,
            stopActionByTag: ActionManagerExist ? function (tag) {
                if (tag === cc.Action.TAG_INVALID) {
                    cc.logID(1612);
                    return;
                }
                cc.director.getActionManager().removeActionByTag(tag, this);
            } : emptyFunc,
            getActionByTag: ActionManagerExist ? function (tag) {
                if (tag === cc.Action.TAG_INVALID) {
                    cc.logID(1613);
                    return null;
                }
                return cc.director.getActionManager().getActionByTag(tag, this);
            } : function () {
                return null;
            },
            getNumberOfRunningActions: ActionManagerExist ? function () {
                return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
            } : function () {
                return 0;
            },
            getPosition: function getPosition(out) {
                out = out || cc.v3();
                return out.set(this._position);
            },
            setPosition: function setPosition(newPosOrX, y) {
                var x;
                if (y === undefined) {
                    x = newPosOrX.x;
                    y = newPosOrX.y;
                } else {
                    x = newPosOrX;
                }
                var locPosition = this._position;
                if (locPosition.x === x && locPosition.y === y) {
                    return;
                }
                if (CC_EDITOR) {
                    var oldPosition = new cc.Vec3(locPosition);
                }
                if (!CC_EDITOR || isFinite(x)) {
                    locPosition.x = x;
                } else {
                    return cc.error(ERR_INVALID_NUMBER, 'x of new position');
                }
                if (!CC_EDITOR || isFinite(y)) {
                    locPosition.y = y;
                } else {
                    return cc.error(ERR_INVALID_NUMBER, 'y of new position');
                }
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                this._renderFlag |= RenderFlow.FLAG_WORLD_TRANSFORM;
                if (this._eventMask & POSITION_ON) {
                    if (CC_EDITOR) {
                        this.emit(EventType.POSITION_CHANGED, oldPosition);
                    } else {
                        this.emit(EventType.POSITION_CHANGED);
                    }
                }
            },
            getScale: function getScale(out) {
                if (out) {
                    return out.set(this._scale);
                } else {
                    if (CC_DEBUG) {
                        cc.warn('`cc.Node.getScale()` is deprecated since v2.1.0, please use `cc.Node.scale` instead. (`this.node.getScale()` -> `this.node.scale`)');
                    }
                    return this._scale.x;
                }
            },
            setScale: function setScale(x, y) {
                if (x && typeof x !== 'number') {
                    y = x.y;
                    x = x.x;
                } else if (y === undefined) {
                    y = x;
                }
                if (this._scale.x !== x || this._scale.y !== y) {
                    this._scale.x = x;
                    this._scale.y = y;
                    this.setLocalDirty(LocalDirtyFlag.SCALE);
                    this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                    if (this._eventMask & SCALE_ON) {
                        this.emit(EventType.SCALE_CHANGED);
                    }
                }
            },
            getRotation: function getRotation(out) {
                if (out instanceof cc.Quat) {
                    return out.set(this._quat);
                } else {
                    if (CC_DEBUG) {
                        cc.warn('`cc.Node.getRotation()` is deprecated since v2.1.0, please use `-cc.Node.angle` instead. (`this.node.getRotation()` -> `-this.node.angle`)');
                    }
                    return -this.angle;
                }
            },
            setRotation: function setRotation(quat, y, z, w) {
                if (typeof quat === 'number' && y === undefined) {
                    if (CC_DEBUG) {
                        cc.warn('`cc.Node.setRotation(degree)` is deprecated since v2.1.0, please set `-cc.Node.angle` instead. (`this.node.setRotation(x)` -> `this.node.angle = -x`)');
                    }
                    this.angle = -quat;
                } else {
                    var x = quat;
                    if (y === undefined) {
                        x = quat.x;
                        y = quat.y;
                        z = quat.z;
                        w = quat.w;
                    }
                    var old = this._quat;
                    if (old.x !== x || old.y !== y || old.z !== z || old.w !== w) {
                        old.x = x;
                        old.y = y;
                        old.z = z;
                        old.w = w;
                        this.setLocalDirty(LocalDirtyFlag.ROTATION);
                        this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                        if (this._eventMask & ROTATION_ON) {
                            this.emit(EventType.ROTATION_CHANGED);
                        }
                        if (CC_EDITOR) {
                            this._toEuler();
                        }
                    }
                }
            },
            getContentSize: function getContentSize() {
                return cc.size(this._contentSize.width, this._contentSize.height);
            },
            setContentSize: function setContentSize(size, height) {
                var locContentSize = this._contentSize;
                var clone;
                if (height === undefined) {
                    if (size.width === locContentSize.width && size.height === locContentSize.height)
                        return;
                    if (CC_EDITOR) {
                        clone = cc.size(locContentSize.width, locContentSize.height);
                    }
                    locContentSize.width = size.width;
                    locContentSize.height = size.height;
                } else {
                    if (size === locContentSize.width && height === locContentSize.height)
                        return;
                    if (CC_EDITOR) {
                        clone = cc.size(locContentSize.width, locContentSize.height);
                    }
                    locContentSize.width = size;
                    locContentSize.height = height;
                }
                if (this._eventMask & SIZE_ON) {
                    if (CC_EDITOR) {
                        this.emit(EventType.SIZE_CHANGED, clone);
                    } else {
                        this.emit(EventType.SIZE_CHANGED);
                    }
                }
            },
            getAnchorPoint: function getAnchorPoint() {
                return cc.v2(this._anchorPoint);
            },
            setAnchorPoint: function setAnchorPoint(point, y) {
                var locAnchorPoint = this._anchorPoint;
                if (y === undefined) {
                    if (point.x === locAnchorPoint.x && point.y === locAnchorPoint.y)
                        return;
                    locAnchorPoint.x = point.x;
                    locAnchorPoint.y = point.y;
                } else {
                    if (point === locAnchorPoint.x && y === locAnchorPoint.y)
                        return;
                    locAnchorPoint.x = point;
                    locAnchorPoint.y = y;
                }
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                if (this._eventMask & ANCHOR_ON) {
                    this.emit(EventType.ANCHOR_CHANGED);
                }
            },
            _invTransformPoint: function _invTransformPoint(out, pos) {
                if (this._parent) {
                    this._parent._invTransformPoint(out, pos);
                } else {
                    _vmath.vec3.copy(out, pos);
                }
                _vmath.vec3.sub(out, out, this._position);
                _vmath.quat.conjugate(_quat_temp, this._quat);
                _vmath.vec3.transformQuat(out, out, _quat_temp);
                _vmath.vec3.inverseSafe(_vec3_temp, this._scale);
                _vmath.vec3.mul(out, out, _vec3_temp);
                return out;
            },
            getWorldPosition: function getWorldPosition(out) {
                _vmath.vec3.copy(out, this._position);
                var curr = this._parent;
                while (curr) {
                    _vmath.vec3.mul(out, out, curr._scale);
                    _vmath.vec3.transformQuat(out, out, curr._quat);
                    _vmath.vec3.add(out, out, curr._position);
                    curr = curr._parent;
                }
                return out;
            },
            setWorldPosition: function setWorldPosition(pos) {
                if (CC_EDITOR) {
                    var oldPosition = new cc.Vec3(this._position);
                }
                if (this._parent) {
                    this._parent._invTransformPoint(this._position, pos);
                } else {
                    _vmath.vec3.copy(this._position, pos);
                }
                this.setLocalDirty(LocalDirtyFlag.POSITION);
                if (this._eventMask & POSITION_ON) {
                    if (CC_EDITOR) {
                        this.emit(EventType.POSITION_CHANGED, oldPosition);
                    } else {
                        this.emit(EventType.POSITION_CHANGED);
                    }
                }
            },
            getWorldRotation: function getWorldRotation(out) {
                _vmath.quat.copy(out, this._quat);
                var curr = this._parent;
                while (curr) {
                    _vmath.quat.mul(out, curr._quat, out);
                    curr = curr._parent;
                }
                return out;
            },
            setWorldRotation: function setWorldRotation(val) {
                if (this._parent) {
                    this._parent.getWorldRotation(this._quat);
                    _vmath.quat.conjugate(this._quat, this._quat);
                    _vmath.quat.mul(this._quat, this._quat, val);
                } else {
                    _vmath.quat.copy(this._quat, _vmath.quat);
                }
                this._toEuler();
                this.setLocalDirty(LocalDirtyFlag.ROTATION);
            },
            getWorldScale: function getWorldScale(out) {
                _vmath.vec3.copy(out, this._scale);
                var curr = this._parent;
                while (curr) {
                    _vmath.vec3.mul(out, out, curr._scale);
                    curr = curr._parent;
                }
                return out;
            },
            setWorldScale: function setWorldScale(scale) {
                if (this._parent) {
                    this._parent.getWorldScale(this._scale);
                    _vmath.vec3.div(this._scale, scale, this._scale);
                } else {
                    _vmath.vec3.copy(this._scale, scale);
                }
                this.setLocalDirty(LocalDirtyFlag.SCALE);
            },
            getWorldRT: function getWorldRT(out) {
                var opos = _vec3_temp;
                var orot = _quat_temp;
                _vmath.vec3.copy(opos, this._position);
                _vmath.quat.copy(orot, this._quat);
                var curr = this._parent;
                while (curr) {
                    _vmath.vec3.mul(opos, opos, curr._scale);
                    _vmath.vec3.transformQuat(opos, opos, curr._quat);
                    _vmath.vec3.add(opos, opos, curr._position);
                    _vmath.quat.mul(orot, curr._quat, orot);
                    curr = curr._parent;
                }
                _vmath.mat4.fromRT(out, orot, opos);
                return out;
            },
            lookAt: function lookAt(pos, up) {
                this.getWorldPosition(_vec3_temp);
                _vmath.vec3.sub(_vec3_temp, _vec3_temp, pos);
                _vmath.vec3.normalize(_vec3_temp, _vec3_temp);
                _vmath.quat.fromViewUp(_quat_temp, _vec3_temp, up);
                this.setWorldRotation(_quat_temp);
            },
            _updateLocalMatrix: function _updateLocalMatrix() {
                var dirtyFlag = this._localMatDirty;
                if (!dirtyFlag)
                    return;
                var t = this._matrix;
                if (dirtyFlag & (LocalDirtyFlag.RT | LocalDirtyFlag.SKEW)) {
                    var rotation = -this._eulerAngles.z;
                    var hasSkew = this._skewX || this._skewY;
                    var sx = this._scale.x, sy = this._scale.y;
                    if (rotation || hasSkew) {
                        var a = 1, b = 0, c = 0, d = 1;
                        if (rotation) {
                            var rotationRadians = rotation * ONE_DEGREE;
                            c = Math.sin(rotationRadians);
                            d = Math.cos(rotationRadians);
                            a = d;
                            b = -c;
                        }
                        t.m00 = a *= sx;
                        t.m01 = b *= sx;
                        t.m04 = c *= sy;
                        t.m05 = d *= sy;
                        if (hasSkew) {
                            var _a = t.m00, _b = t.m01, _c = t.m04, _d = t.m05;
                            var skx = Math.tan(this._skewX * ONE_DEGREE);
                            var sky = Math.tan(this._skewY * ONE_DEGREE);
                            if (skx === Infinity)
                                skx = 99999999;
                            if (sky === Infinity)
                                sky = 99999999;
                            t.m00 = _a + _c * sky;
                            t.m01 = _b + _d * sky;
                            t.m04 = _c + _a * skx;
                            t.m05 = _d + _b * skx;
                        }
                    } else {
                        t.m00 = sx;
                        t.m01 = 0;
                        t.m04 = 0;
                        t.m05 = sy;
                    }
                }
                t.m12 = this._position.x;
                t.m13 = this._position.y;
                this._localMatDirty = 0;
                this._worldMatDirty = true;
            },
            _calculWorldMatrix: function _calculWorldMatrix() {
                if (this._localMatDirty) {
                    this._updateLocalMatrix();
                }
                var parent = this._parent;
                if (parent) {
                    this._mulMat(this._worldMatrix, parent._worldMatrix, this._matrix);
                } else {
                    _vmath.mat4.copy(this._worldMatrix, this._matrix);
                }
                this._worldMatDirty = false;
            },
            _mulMat: function _mulMat(out, a, b) {
                var aa = a.m00, ab = a.m01, ac = a.m04, ad = a.m05, atx = a.m12, aty = a.m13;
                var ba = b.m00, bb = b.m01, bc = b.m04, bd = b.m05, btx = b.m12, bty = b.m13;
                if (ab !== 0 || ac !== 0) {
                    out.m00 = ba * aa + bb * ac;
                    out.m01 = ba * ab + bb * ad;
                    out.m04 = bc * aa + bd * ac;
                    out.m05 = bc * ab + bd * ad;
                    out.m12 = aa * btx + ac * bty + atx;
                    out.m13 = ab * btx + ad * bty + aty;
                } else {
                    out.m00 = ba * aa;
                    out.m01 = bb * ad;
                    out.m04 = bc * aa;
                    out.m05 = bd * ad;
                    out.m12 = aa * btx + atx;
                    out.m13 = ad * bty + aty;
                }
            },
            _updateWorldMatrix: function _updateWorldMatrix() {
                if (this._parent) {
                    this._parent._updateWorldMatrix();
                }
                if (this._worldMatDirty) {
                    this._calculWorldMatrix();
                    var children = this._children;
                    for (var i = 0, l = children.length; i < l; i++) {
                        children[i]._worldMatDirty = true;
                    }
                }
            },
            setLocalDirty: function setLocalDirty(flag) {
                this._localMatDirty = this._localMatDirty | flag;
                this._worldMatDirty = true;
            },
            setWorldDirty: function setWorldDirty() {
                this._worldMatDirty = true;
            },
            getLocalMatrix: function getLocalMatrix(out) {
                this._updateLocalMatrix();
                return _vmath.mat4.copy(out, this._matrix);
            },
            getWorldMatrix: function getWorldMatrix(out) {
                this._updateWorldMatrix();
                return _vmath.mat4.copy(out, this._worldMatrix);
            },
            convertToNodeSpace: function convertToNodeSpace(worldPoint) {
                this._updateWorldMatrix();
                _vmath.mat4.invert(_mat4_temp, this._worldMatrix);
                var out = new cc.Vec2();
                _vmath.vec2.transformMat4(out, worldPoint, _mat4_temp);
                out.x += this._anchorPoint.x * this._contentSize.width;
                out.y += this._anchorPoint.y * this._contentSize.height;
                return out;
            },
            convertToWorldSpace: function convertToWorldSpace(nodePoint) {
                this._updateWorldMatrix();
                var out = new cc.Vec2(nodePoint.x - this._anchorPoint.x * this._contentSize.width, nodePoint.y - this._anchorPoint.y * this._contentSize.height);
                return _vmath.vec2.transformMat4(out, out, this._worldMatrix);
            },
            convertToNodeSpaceAR: function convertToNodeSpaceAR(worldPoint) {
                this._updateWorldMatrix();
                _vmath.mat4.invert(_mat4_temp, this._worldMatrix);
                var out = new cc.Vec2();
                return _vmath.vec2.transformMat4(out, worldPoint, _mat4_temp);
            },
            convertToWorldSpaceAR: function convertToWorldSpaceAR(nodePoint) {
                this._updateWorldMatrix();
                var out = new cc.Vec2();
                return _vmath.vec2.transformMat4(out, nodePoint, this._worldMatrix);
            },
            getNodeToParentTransform: function getNodeToParentTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateLocalMatrix();
                var contentSize = this._contentSize;
                _vec3_temp.x = -this._anchorPoint.x * contentSize.width;
                _vec3_temp.y = -this._anchorPoint.y * contentSize.height;
                _vmath.mat4.copy(_mat4_temp, this._matrix);
                _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            getNodeToParentTransformAR: function getNodeToParentTransformAR(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateLocalMatrix();
                return AffineTrans.fromMat4(out, this._matrix);
            },
            getNodeToWorldTransform: function getNodeToWorldTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateWorldMatrix();
                var contentSize = this._contentSize;
                _vec3_temp.x = -this._anchorPoint.x * contentSize.width;
                _vec3_temp.y = -this._anchorPoint.y * contentSize.height;
                _vmath.mat4.copy(_mat4_temp, this._worldMatrix);
                _vmath.mat4.translate(_mat4_temp, _mat4_temp, _vec3_temp);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            getNodeToWorldTransformAR: function getNodeToWorldTransformAR(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateWorldMatrix();
                return AffineTrans.fromMat4(out, this._worldMatrix);
            },
            getParentToNodeTransform: function getParentToNodeTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateLocalMatrix();
                _vmath.mat4.invert(_mat4_temp, this._matrix);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            getWorldToNodeTransform: function getWorldToNodeTransform(out) {
                if (!out) {
                    out = AffineTrans.identity();
                }
                this._updateWorldMatrix();
                _vmath.mat4.invert(_mat4_temp, this._worldMatrix);
                return AffineTrans.fromMat4(out, _mat4_temp);
            },
            convertTouchToNodeSpace: function convertTouchToNodeSpace(touch) {
                return this.convertToNodeSpace(touch.getLocation());
            },
            convertTouchToNodeSpaceAR: function convertTouchToNodeSpaceAR(touch) {
                return this.convertToNodeSpaceAR(touch.getLocation());
            },
            getBoundingBox: function getBoundingBox() {
                this._updateLocalMatrix();
                var width = this._contentSize.width;
                var height = this._contentSize.height;
                var rect = cc.rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
                return rect.transformMat4(rect, this._matrix);
            },
            getBoundingBoxToWorld: function getBoundingBoxToWorld() {
                if (this._parent) {
                    this._parent._updateWorldMatrix();
                    return this._getBoundingBoxTo(this._parent._worldMatrix);
                } else {
                    return this.getBoundingBox();
                }
            },
            _getBoundingBoxTo: function _getBoundingBoxTo(parentMat) {
                this._updateLocalMatrix();
                var width = this._contentSize.width;
                var height = this._contentSize.height;
                var rect = cc.rect(-this._anchorPoint.x * width, -this._anchorPoint.y * height, width, height);
                var parentMat = _vmath.mat4.mul(this._worldMatrix, parentMat, this._matrix);
                rect.transformMat4(rect, parentMat);
                if (!this._children)
                    return rect;
                var locChildren = this._children;
                for (var i = 0; i < locChildren.length; i++) {
                    var child = locChildren[i];
                    if (child && child.active) {
                        var childRect = child._getBoundingBoxTo(parentMat);
                        if (childRect)
                            rect.union(rect, childRect);
                    }
                }
                return rect;
            },
            _updateOrderOfArrival: function _updateOrderOfArrival() {
                var arrivalOrder = this._parent ? ++this._parent._childArrivalOrder : 0;
                this._localZOrder = this._localZOrder & 4294901760 | arrivalOrder;
                if (arrivalOrder === 65535) {
                    var siblings = this._parent._children;
                    siblings.forEach(function (node, index) {
                        node._localZOrder = node._localZOrder & 4294901760 | index + 1;
                    });
                    this._parent._childArrivalOrder = siblings.length;
                }
            },
            addChild: function addChild(child, zIndex, name) {
                if (CC_DEV && !cc.Node.isNode(child)) {
                    return cc.errorID(1634, cc.js.getClassName(child));
                }
                cc.assertID(child, 1606);
                cc.assertID(child._parent === null, 1605);
                child.parent = this;
                if (zIndex !== undefined) {
                    child.zIndex = zIndex;
                }
                if (name !== undefined) {
                    child.name = name;
                }
            },
            cleanup: function cleanup() {
                ActionManagerExist && cc.director.getActionManager().removeAllActionsFromTarget(this);
                eventManager.removeListeners(this);
                var i, len = this._children.length, node;
                for (i = 0; i < len; ++i) {
                    node = this._children[i];
                    if (node)
                        node.cleanup();
                }
            },
            sortAllChildren: function sortAllChildren() {
                if (this._reorderChildDirty) {
                    eventManager._setDirtyForNode(this);
                    this._reorderChildDirty = false;
                    var _children = this._children;
                    if (_children.length > 1) {
                        var len = _children.length, i, j, child;
                        for (i = 1; i < len; i++) {
                            child = _children[i];
                            j = i - 1;
                            while (j >= 0) {
                                if (child._localZOrder < _children[j]._localZOrder) {
                                    _children[j + 1] = _children[j];
                                } else {
                                    break;
                                }
                                j--;
                            }
                            _children[j + 1] = child;
                        }
                        this.emit(EventType.CHILD_REORDER, this);
                    }
                    cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                }
            },
            _delaySort: function _delaySort() {
                if (!this._reorderChildDirty) {
                    this._reorderChildDirty = true;
                    cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
                }
            },
            _restoreProperties: CC_EDITOR && function () {
                if (!this._matrix) {
                    this._matrix = mathPools.mat4.get();
                }
                if (!this._worldMatrix) {
                    this._worldMatrix = mathPools.mat4.get();
                }
                this._localMatDirty = LocalDirtyFlag.ALL;
                this._worldMatDirty = true;
                this._toEuler();
                this._renderFlag |= RenderFlow.FLAG_TRANSFORM;
                if (this._renderComponent) {
                    if (this._renderComponent.enabled) {
                        this._renderComponent.markForUpdateRenderData(true);
                    } else {
                        this._renderComponent.disableRender();
                    }
                }
                if (this._children.length > 0) {
                    this._renderFlag |= RenderFlow.FLAG_CHILDREN;
                }
            },
            onRestore: CC_EDITOR && function () {
                this._onRestoreBase();
                this._restoreProperties();
                var actionManager = cc.director.getActionManager();
                if (this._activeInHierarchy) {
                    actionManager && actionManager.resumeTarget(this);
                    eventManager.resumeTarget(this);
                } else {
                    actionManager && actionManager.pauseTarget(this);
                    eventManager.pauseTarget(this);
                }
            }
        };
        if (CC_EDITOR) {
            js.mixin(NodeDefines.properties, {
                _scaleX: {
                    default: undefined,
                    type: cc.Float,
                    editorOnly: true
                },
                _scaleY: {
                    default: undefined,
                    type: cc.Float,
                    editorOnly: true
                },
                _rotationX: {
                    default: undefined,
                    type: cc.Float,
                    editorOnly: true
                },
                _rotationY: {
                    default: undefined,
                    type: cc.Float,
                    editorOnly: true
                }
            });
        }
        var Node = cc.Class(NodeDefines);
        var _p = Node.prototype;
        js.getset(_p, 'position', _p.getPosition, _p.setPosition, false, true);
        cc.Node = module.exports = Node;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,