(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./platform');
        require('./assets');
        if (!CC_EDITOR || !Editor.isMainProcess) {
            require('./CCNode');
            require('./CCPrivateNode');
            require('./CCScene');
            require('./components');
            require('./graphics');
            require('./collider');
            require('./collider/CCIntersection');
            require('./physics');
            require('./camera/CCCamera');
            require('./geom-utils');
        }
        require('./mesh');
        require('./3d');
        require('./3d/polyfill-3d');
        require('./base-ui/CCWidgetManager');
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,