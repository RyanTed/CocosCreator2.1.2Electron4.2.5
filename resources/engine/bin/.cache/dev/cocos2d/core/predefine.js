(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/predefine.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./platform/js');
        require('./value-types');
        require('./utils');
        require('./platform/CCInputManager');
        require('./platform/CCInputExtension');
        require('./event');
        require('./platform/CCSys');
        require('./platform/CCMacro');
        require('./load-pipeline');
        require('./CCDirector');
        require('./renderer');
        if (!(CC_EDITOR && Editor.isMainProcess)) {
            require('./platform/CCView');
            require('./platform/CCScreen');
            require('./CCScheduler');
            require('./event-manager');
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,