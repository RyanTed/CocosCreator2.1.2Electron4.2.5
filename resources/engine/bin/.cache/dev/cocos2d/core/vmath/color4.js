(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/color4.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var color4 = function () {
            function color4() {
                var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
                var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                _classCallCheck(this, color4);
                this.r = r;
                this.g = g;
                this.b = b;
                this.a = a;
            }
            _createClass(color4, null, [
                {
                    key: 'create',
                    value: function create() {
                        var r = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var g = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
                        var b = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
                        var a = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        return new color4(r, g, b, a);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new color4(a.r, a.g, a.b, a.a);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.r = a.r;
                        out.g = a.g;
                        out.b = a.b;
                        out.a = a.a;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, r, g, b, a) {
                        out.r = r;
                        out.g = g;
                        out.b = b;
                        out.a = a;
                        return out;
                    }
                },
                {
                    key: 'fromHex',
                    value: function fromHex(out, hex) {
                        var r = (hex >> 24) / 255;
                        var g = (hex >> 16 & 255) / 255;
                        var b = (hex >> 8 & 255) / 255;
                        var a = (hex & 255) / 255;
                        out.r = r;
                        out.g = g;
                        out.b = b;
                        out.a = a;
                        return out;
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.r = a.r + b.r;
                        out.g = a.g + b.g;
                        out.b = a.b + b.b;
                        out.a = a.a + b.a;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.r = a.r - b.r;
                        out.g = a.g - b.g;
                        out.b = a.b - b.b;
                        out.a = a.a - b.a;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return color4.subtract(out, a, b);
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        out.r = a.r * b.r;
                        out.g = a.g * b.g;
                        out.b = a.b * b.b;
                        out.a = a.a * b.a;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return color4.multiply(out, a, b);
                    }
                },
                {
                    key: 'divide',
                    value: function divide(out, a, b) {
                        out.r = a.r / b.r;
                        out.g = a.g / b.g;
                        out.b = a.b / b.b;
                        out.a = a.a / b.a;
                        return out;
                    }
                },
                {
                    key: 'div',
                    value: function div(out, a, b) {
                        return color4.divide(out, a, b);
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, b) {
                        out.r = a.r * b;
                        out.g = a.g * b;
                        out.b = a.b * b;
                        out.a = a.a * b;
                        return out;
                    }
                },
                {
                    key: 'lerp',
                    value: function lerp(out, a, b, t) {
                        var ar = a.r, ag = a.g, ab = a.b, aa = a.a;
                        out.r = ar + t * (b.r - ar);
                        out.g = ag + t * (b.g - ag);
                        out.b = ab + t * (b.b - ab);
                        out.a = aa + t * (b.a - aa);
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'color4(' + a.r + ', ' + a.g + ', ' + a.b + ', ' + a.a + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, a) {
                        var scale = a instanceof cc.Color || a.a > 1 ? 1 / 255 : 1;
                        out[0] = a.r * scale;
                        out[1] = a.g * scale;
                        out[2] = a.b * scale;
                        out[3] = a.a * scale;
                        return out;
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.r === b.r && a.g === b.g && a.b === b.b && a.a === b.a;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.r, a1 = a.g, a2 = a.b, a3 = a.a;
                        var b0 = b.r, b1 = b.g, b2 = b.b, b3 = b.a;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
                    }
                },
                {
                    key: 'hex',
                    value: function hex(a) {
                        return (a.r * 255 << 24 | a.g * 255 << 16 | a.b * 255 << 8 | a.a * 255) >>> 0;
                    }
                }
            ]);
            return color4;
        }();
        exports.default = color4;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,