(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/vmath/mat2.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _utils = require('./utils');
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        var mat2 = function () {
            function mat2() {
                var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                _classCallCheck(this, mat2);
                this.m00 = m00;
                this.m01 = m01;
                this.m02 = m02;
                this.m03 = m03;
            }
            _createClass(mat2, null, [
                {
                    key: 'create',
                    value: function create() {
                        var m00 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
                        var m01 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
                        var m02 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
                        var m03 = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                        return new mat2(m00, m01, m02, m03);
                    }
                },
                {
                    key: 'clone',
                    value: function clone(a) {
                        return new mat2(a.m00, a.m01, a.m02, a.m03);
                    }
                },
                {
                    key: 'copy',
                    value: function copy(out, a) {
                        out.m00 = a.m00;
                        out.m01 = a.m01;
                        out.m02 = a.m02;
                        out.m03 = a.m03;
                        return out;
                    }
                },
                {
                    key: 'identity',
                    value: function identity(out) {
                        out.m00 = 1;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = 1;
                        return out;
                    }
                },
                {
                    key: 'set',
                    value: function set(out, m00, m01, m10, m11) {
                        out.m00 = m00;
                        out.m01 = m01;
                        out.m02 = m10;
                        out.m03 = m11;
                        return out;
                    }
                },
                {
                    key: 'transpose',
                    value: function transpose(out, a) {
                        if (out === a) {
                            var a1 = a.m01;
                            out.m01 = a.m02;
                            out.m02 = a1;
                        } else {
                            out.m00 = a.m00;
                            out.m01 = a.m02;
                            out.m02 = a.m01;
                            out.m03 = a.m03;
                        }
                        return out;
                    }
                },
                {
                    key: 'invert',
                    value: function invert(out, a) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;
                        var det = a0 * a3 - a2 * a1;
                        if (!det) {
                            return null;
                        }
                        det = 1 / det;
                        out.m00 = a3 * det;
                        out.m01 = -a1 * det;
                        out.m02 = -a2 * det;
                        out.m03 = a0 * det;
                        return out;
                    }
                },
                {
                    key: 'adjoint',
                    value: function adjoint(out, a) {
                        var a0 = a.m00;
                        out.m00 = a.m03;
                        out.m01 = -a.m01;
                        out.m02 = -a.m02;
                        out.m03 = a0;
                        return out;
                    }
                },
                {
                    key: 'determinant',
                    value: function determinant(a) {
                        return a.m00 * a.m03 - a.m02 * a.m01;
                    }
                },
                {
                    key: 'multiply',
                    value: function multiply(out, a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;
                        out.m00 = a0 * b0 + a2 * b1;
                        out.m01 = a1 * b0 + a3 * b1;
                        out.m02 = a0 * b2 + a2 * b3;
                        out.m03 = a1 * b2 + a3 * b3;
                        return out;
                    }
                },
                {
                    key: 'mul',
                    value: function mul(out, a, b) {
                        return mat2.multiply(out, a, b);
                    }
                },
                {
                    key: 'rotate',
                    value: function rotate(out, a, rad) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = a0 * c + a2 * s;
                        out.m01 = a1 * c + a3 * s;
                        out.m02 = a0 * -s + a2 * c;
                        out.m03 = a1 * -s + a3 * c;
                        return out;
                    }
                },
                {
                    key: 'scale',
                    value: function scale(out, a, v) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03, v0 = v.x, v1 = v.y;
                        out.m00 = a0 * v0;
                        out.m01 = a1 * v0;
                        out.m02 = a2 * v1;
                        out.m03 = a3 * v1;
                        return out;
                    }
                },
                {
                    key: 'fromRotation',
                    value: function fromRotation(out, rad) {
                        var s = Math.sin(rad), c = Math.cos(rad);
                        out.m00 = c;
                        out.m01 = s;
                        out.m02 = -s;
                        out.m03 = c;
                        return out;
                    }
                },
                {
                    key: 'fromScaling',
                    value: function fromScaling(out, v) {
                        out.m00 = v.x;
                        out.m01 = 0;
                        out.m02 = 0;
                        out.m03 = v.y;
                        return out;
                    }
                },
                {
                    key: 'str',
                    value: function str(a) {
                        return 'mat2(' + a.m00 + ', ' + a.m01 + ', ' + a.m02 + ', ' + a.m03 + ')';
                    }
                },
                {
                    key: 'array',
                    value: function array(out, m) {
                        out[0] = m.m00;
                        out[1] = m.m01;
                        out[2] = m.m02;
                        out[3] = m.m03;
                        return out;
                    }
                },
                {
                    key: 'frob',
                    value: function frob(a) {
                        return Math.sqrt(Math.pow(a.m00, 2) + Math.pow(a.m01, 2) + Math.pow(a.m02, 2) + Math.pow(a.m03, 2));
                    }
                },
                {
                    key: 'LDU',
                    value: function LDU(L, D, U, a) {
                        L.m02 = a.m02 / a.m00;
                        U.m00 = a.m00;
                        U.m01 = a.m01;
                        U.m03 = a.m03 - L.m02 * U.m01;
                    }
                },
                {
                    key: 'add',
                    value: function add(out, a, b) {
                        out.m00 = a.m00 + b.m00;
                        out.m01 = a.m01 + b.m01;
                        out.m02 = a.m02 + b.m02;
                        out.m03 = a.m03 + b.m03;
                        return out;
                    }
                },
                {
                    key: 'subtract',
                    value: function subtract(out, a, b) {
                        out.m00 = a.m00 - b.m00;
                        out.m01 = a.m01 - b.m01;
                        out.m02 = a.m02 - b.m02;
                        out.m03 = a.m03 - b.m03;
                        return out;
                    }
                },
                {
                    key: 'sub',
                    value: function sub(out, a, b) {
                        return mat2.subtract(out, a, b);
                    }
                },
                {
                    key: 'exactEquals',
                    value: function exactEquals(a, b) {
                        return a.m00 === b.m00 && a.m01 === b.m01 && a.m02 === b.m02 && a.m03 === b.m03;
                    }
                },
                {
                    key: 'equals',
                    value: function equals(a, b) {
                        var a0 = a.m00, a1 = a.m01, a2 = a.m02, a3 = a.m03;
                        var b0 = b.m00, b1 = b.m01, b2 = b.m02, b3 = b.m03;
                        return Math.abs(a0 - b0) <= _utils.EPSILON * Math.max(1, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= _utils.EPSILON * Math.max(1, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= _utils.EPSILON * Math.max(1, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= _utils.EPSILON * Math.max(1, Math.abs(a3), Math.abs(b3));
                    }
                },
                {
                    key: 'multiplyScalar',
                    value: function multiplyScalar(out, a, b) {
                        out.m00 = a.m00 * b;
                        out.m01 = a.m01 * b;
                        out.m02 = a.m02 * b;
                        out.m03 = a.m03 * b;
                        return out;
                    }
                },
                {
                    key: 'multiplyScalarAndAdd',
                    value: function multiplyScalarAndAdd(out, a, b, scale) {
                        out.m00 = a.m00 + b.m00 * scale;
                        out.m01 = a.m01 + b.m01 * scale;
                        out.m02 = a.m02 + b.m02 * scale;
                        out.m03 = a.m03 + b.m03 * scale;
                        return out;
                    }
                }
            ]);
            return mat2;
        }();
        exports.default = mat2;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1hdDIuanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL2NvcmUvdm1hdGgvbWF0Mi5qcyJdLCJuYW1lcyI6WyJtYXQyIiwibTAwIiwibTAxIiwibTAyIiwibTAzIiwiYSIsIm91dCIsIm0xMCIsIm0xMSIsImExIiwiYTAiLCJhMiIsImEzIiwiZGV0IiwiYiIsImIwIiwiYjEiLCJiMiIsImIzIiwibXVsdGlwbHkiLCJyYWQiLCJzIiwiTWF0aCIsInNpbiIsImMiLCJjb3MiLCJ2IiwidjAiLCJ4IiwidjEiLCJ5IiwibSIsInNxcnQiLCJwb3ciLCJMIiwiRCIsIlUiLCJzdWJ0cmFjdCIsImFicyIsIm1heCIsInNjYWxlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O1FBQUEsT0FBQSxpQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQSxDQUFBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7UUFBQSxJQUFBLE1BQUEsR0FBQSxPQUFBLENBQUEsU0FBQSxDQUFBOzs7Ozs7WUFLTUEsSUFBQUE7WUFTSixTQUFBLElBQUEsR0FBZ0Q7QUFBQSxnQkFBQSxJQUFwQ0MsR0FBQUEsR0FBb0MsU0FBQSxDQUFBLE1BQUEsR0FBQSxDQUFBLElBQUEsU0FBQSxDQUFBLENBQUEsTUFBQSxTQUFBLEdBQUEsU0FBQSxDQUFBLENBQUEsQ0FBQSxHQUE5QixDQUE4QixDQUFBO0FBQUEsZ0JBQUEsSUFBM0JDLEdBQUFBLEdBQTJCLFNBQUEsQ0FBQSxNQUFBLEdBQUEsQ0FBQSxJQUFBLFNBQUEsQ0FBQSxDQUFBLE1BQUEsU0FBQSxHQUFBLFNBQUEsQ0FBQSxDQUFBLENBQUEsR0FBckIsQ0FBcUIsQ0FBQTtBQUFBLGdCQUFBLElBQWxCQyxHQUFBQSxHQUFrQixTQUFBLENBQUEsTUFBQSxHQUFBLENBQUEsSUFBQSxTQUFBLENBQUEsQ0FBQSxNQUFBLFNBQUEsR0FBQSxTQUFBLENBQUEsQ0FBQSxDQUFBLEdBQVosQ0FBWSxD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c291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRVBTSUxPTiB9IGZyb20gJy4vdXRpbHMnO1xyXG5cclxuLyoqXHJcbiAqIE1hdGhlbWF0aWNhbCAyeDIgbWF0cml4LlxyXG4gKi9cclxuY2xhc3MgbWF0MiB7XHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG1hdHJpeCwgd2l0aCBlbGVtZW50cyBzcGVjaWZpZWQgc2VwYXJhdGVseS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAwLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAxLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAwLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAxLlxyXG4gICAqL1xyXG4gIGNvbnN0cnVjdG9yKG0wMCA9IDEsIG0wMSA9IDAsIG0wMiA9IDAsIG0wMyA9IDEpIHtcclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVsZW1lbnQgYXQgY29sdW1uIDAgcm93IDAuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogKi9cclxuICAgIHRoaXMubTAwID0gbTAwO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVsZW1lbnQgYXQgY29sdW1uIDAgcm93IDEuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogKi9cclxuICAgIHRoaXMubTAxID0gbTAxO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVsZW1lbnQgYXQgY29sdW1uIDEgcm93IDAuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogKi9cclxuICAgIHRoaXMubTAyID0gbTAyO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogVGhlIGVsZW1lbnQgYXQgY29sdW1uIDEgcm93IDEuXHJcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxyXG4gICAgICogKi9cclxuICAgIHRoaXMubTAzID0gbTAzO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG1hdHJpeCwgd2l0aCBlbGVtZW50cyBzcGVjaWZpZWQgc2VwYXJhdGVseS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAwLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAxLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAwLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAxLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBUaGUgbmV3bHkgY3JlYXRlZCBtYXRyaXguXHJcbiAgICovXHJcbiAgc3RhdGljIGNyZWF0ZShtMDAgPSAxLCBtMDEgPSAwLCBtMDIgPSAwLCBtMDMgPSAxKSB7XHJcbiAgICByZXR1cm4gbmV3IG1hdDIobTAwLCBtMDEsIG0wMiwgbTAzKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb25lIGEgbWF0cml4LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIGNsb25lLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBUaGUgbmV3bHkgY3JlYXRlZCBtYXRyaXguXHJcbiAgICovXHJcbiAgc3RhdGljIGNsb25lKGEpIHtcclxuICAgIHJldHVybiBuZXcgbWF0MihhLm0wMCwgYS5tMDEsIGEubTAyLCBhLm0wMyk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb3B5IGNvbnRlbnQgb2YgYSBtYXRyaXggaW50byBhbm90aGVyLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gbW9kaWZpZWQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXguXHJcbiAgICogQHJldHVybnMge21hdDJ9IG91dC5cclxuICAgKi9cclxuICBzdGF0aWMgY29weShvdXQsIGEpIHtcclxuICAgIG91dC5tMDAgPSBhLm0wMDtcclxuICAgIG91dC5tMDEgPSBhLm0wMTtcclxuICAgIG91dC5tMDIgPSBhLm0wMjtcclxuICAgIG91dC5tMDMgPSBhLm0wMztcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIGEgbWF0cml4IGFzIGlkZW50aXR5IG1hdHJpeC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIG1vZGlmaWVkLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICovXHJcbiAgc3RhdGljIGlkZW50aXR5KG91dCkge1xyXG4gICAgb3V0Lm0wMCA9IDE7XHJcbiAgICBvdXQubTAxID0gMDtcclxuICAgIG91dC5tMDIgPSAwO1xyXG4gICAgb3V0Lm0wMyA9IDE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0cyB0aGUgZWxlbWVudHMgb2YgYSBtYXRyaXggdG8gdGhlIGdpdmVuIHZhbHVlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gVGhlIG1hdHJpeCB0byBtb2RpZmllZC5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gbTAwIC0gVmFsdWUgYXNzaWduZWQgdG8gZWxlbWVudCBhdCBjb2x1bW4gMCByb3cgMC5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gbTAxIC0gVmFsdWUgYXNzaWduZWQgdG8gZWxlbWVudCBhdCBjb2x1bW4gMCByb3cgMS5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gbTEwIC0gVmFsdWUgYXNzaWduZWQgdG8gZWxlbWVudCBhdCBjb2x1bW4gMSByb3cgMC5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gbTExIC0gVmFsdWUgYXNzaWduZWQgdG8gZWxlbWVudCBhdCBjb2x1bW4gMSByb3cgMS5cclxuICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBzZXQob3V0LCBtMDAsIG0wMSwgbTEwLCBtMTEpIHtcclxuICAgIG91dC5tMDAgPSBtMDA7XHJcbiAgICBvdXQubTAxID0gbTAxO1xyXG4gICAgb3V0Lm0wMiA9IG0xMDtcclxuICAgIG91dC5tMDMgPSBtMTE7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zcG9zZXMgYSBtYXRyaXguXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIHRyYW5zcG9zZS5cclxuICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAqL1xyXG4gIHN0YXRpYyB0cmFuc3Bvc2Uob3V0LCBhKSB7XHJcbiAgICAvLyBJZiB3ZSBhcmUgdHJhbnNwb3Npbmcgb3Vyc2VsdmVzIHdlIGNhbiBza2lwIGEgZmV3IHN0ZXBzIGJ1dCBoYXZlIHRvIGNhY2hlIHNvbWUgdmFsdWVzXHJcbiAgICBpZiAob3V0ID09PSBhKSB7XHJcbiAgICAgIGxldCBhMSA9IGEubTAxO1xyXG4gICAgICBvdXQubTAxID0gYS5tMDI7XHJcbiAgICAgIG91dC5tMDIgPSBhMTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG91dC5tMDAgPSBhLm0wMDtcclxuICAgICAgb3V0Lm0wMSA9IGEubTAyO1xyXG4gICAgICBvdXQubTAyID0gYS5tMDE7XHJcbiAgICAgIG91dC5tMDMgPSBhLm0wMztcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSW52ZXJ0cyBhIG1hdHJpeC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBNYXRyaXggdG8gaW52ZXJ0LlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICovXHJcbiAgc3RhdGljIGludmVydChvdXQsIGEpIHtcclxuICAgIGxldCBhMCA9IGEubTAwLCBhMSA9IGEubTAxLCBhMiA9IGEubTAyLCBhMyA9IGEubTAzO1xyXG5cclxuICAgIC8vIENhbGN1bGF0ZSB0aGUgZGV0ZXJtaW5hbnRcclxuICAgIGxldCBkZXQgPSBhMCAqIGEzIC0gYTIgKiBhMTtcclxuXHJcbiAgICBpZiAoIWRldCkge1xyXG4gICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxuICAgIGRldCA9IDEuMCAvIGRldDtcclxuXHJcbiAgICBvdXQubTAwID0gYTMgKiBkZXQ7XHJcbiAgICBvdXQubTAxID0gLWExICogZGV0O1xyXG4gICAgb3V0Lm0wMiA9IC1hMiAqIGRldDtcclxuICAgIG91dC5tMDMgPSBhMCAqIGRldDtcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlcyB0aGUgYWRqdWdhdGUgb2YgYSBtYXRyaXguXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIGNhbGN1bGF0ZS5cclxuICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBhZGpvaW50KG91dCwgYSkge1xyXG4gICAgLy8gQ2FjaGluZyB0aGlzIHZhbHVlIGlzIG5lc3NlY2FyeSBpZiBvdXQgPT0gYVxyXG4gICAgbGV0IGEwID0gYS5tMDA7XHJcbiAgICBvdXQubTAwID0gYS5tMDM7XHJcbiAgICBvdXQubTAxID0gLWEubTAxO1xyXG4gICAgb3V0Lm0wMiA9IC1hLm0wMjtcclxuICAgIG91dC5tMDMgPSBhMDtcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlcyB0aGUgZGV0ZXJtaW5hbnQgb2YgYSBtYXRyaXguXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBNYXRyaXggdG8gY2FsY3VsYXRlLlxyXG4gICAqIEByZXR1cm5zIHtOdW1iZXJ9IERldGVybWluYW50IG9mIGEuXHJcbiAgICovXHJcbiAgc3RhdGljIGRldGVybWluYW50KGEpIHtcclxuICAgIHJldHVybiBhLm0wMCAqIGEubTAzIC0gYS5tMDIgKiBhLm0wMTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE11bHRpcGx5IHR3byBtYXRyaWNlcyBleHBsaWNpdGx5LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gYSAtIFRoZSBmaXJzdCBvcGVyYW5kLlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gYiAtIFRoZSBzZWNvbmQgb3BlcmFuZC5cclxuICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtdWx0aXBseShvdXQsIGEsIGIpIHtcclxuICAgIGxldCBhMCA9IGEubTAwLCBhMSA9IGEubTAxLCBhMiA9IGEubTAyLCBhMyA9IGEubTAzO1xyXG4gICAgbGV0IGIwID0gYi5tMDAsIGIxID0gYi5tMDEsIGIyID0gYi5tMDIsIGIzID0gYi5tMDM7XHJcbiAgICBvdXQubTAwID0gYTAgKiBiMCArIGEyICogYjE7XHJcbiAgICBvdXQubTAxID0gYTEgKiBiMCArIGEzICogYjE7XHJcbiAgICBvdXQubTAyID0gYTAgKiBiMiArIGEyICogYjM7XHJcbiAgICBvdXQubTAzID0gYTEgKiBiMiArIGEzICogYjM7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWxpYXMgb2Yge0BsaW5rIG1hdDIubXVsdGlwbHl9LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtdWwob3V0LCBhLCBiKSB7XHJcbiAgICByZXR1cm4gbWF0Mi5tdWx0aXBseShvdXQsIGEsIGIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIHJvdGF0ZS5cclxuICAgKiBAcGFyYW0ge051bWJlcn0gcmFkIC0gVGhlIHJvdGF0aW9uIGFuZ2xlLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICAgKi9cclxuICBzdGF0aWMgcm90YXRlKG91dCwgYSwgcmFkKSB7XHJcbiAgICBsZXQgYTAgPSBhLm0wMCwgYTEgPSBhLm0wMSwgYTIgPSBhLm0wMiwgYTMgPSBhLm0wMyxcclxuICAgICAgcyA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgb3V0Lm0wMCA9IGEwICogYyArIGEyICogcztcclxuICAgIG91dC5tMDEgPSBhMSAqIGMgKyBhMyAqIHM7XHJcbiAgICBvdXQubTAyID0gYTAgKiAtcyArIGEyICogYztcclxuICAgIG91dC5tMDMgPSBhMSAqIC1zICsgYTMgKiBjO1xyXG4gICAgcmV0dXJuIG91dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNjYWxlcyB0aGUgbWF0cml4IGdpdmVuIGJ5IGEgc2NhbGUgdmVjdG9yLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gYSAtIE1hdHJpeCB0byBzY2FsZS5cclxuICAgKiBAcGFyYW0ge3ZlYzJ9IHYgLSBUaGUgc2NhbGUgdmVjdG9yLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBvdXRcclxuICAgKiovXHJcbiAgc3RhdGljIHNjYWxlKG91dCwgYSwgdikge1xyXG4gICAgbGV0IGEwID0gYS5tMDAsIGExID0gYS5tMDEsIGEyID0gYS5tMDIsIGEzID0gYS5tMDMsXHJcbiAgICAgIHYwID0gdi54LCB2MSA9IHYueTtcclxuICAgIG91dC5tMDAgPSBhMCAqIHYwO1xyXG4gICAgb3V0Lm0wMSA9IGExICogdjA7XHJcbiAgICBvdXQubTAyID0gYTIgKiB2MTtcclxuICAgIG91dC5tMDMgPSBhMyAqIHYxO1xyXG4gICAgcmV0dXJuIG91dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIGdpdmVuIGFuZ2xlLlxyXG4gICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAqXHJcbiAgICogICAgIG1hdDIuc2V0KGRlc3QsIDEsIDAsIDAsIDEpO1xyXG4gICAqICAgICBtYXQyLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUuXHJcbiAgICogQHJldHVybnMge21hdDJ9IG91dC5cclxuICAgKi9cclxuICBzdGF0aWMgZnJvbVJvdGF0aW9uKG91dCwgcmFkKSB7XHJcbiAgICBsZXQgcyA9IE1hdGguc2luKHJhZCksXHJcbiAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xyXG4gICAgb3V0Lm0wMCA9IGM7XHJcbiAgICBvdXQubTAxID0gcztcclxuICAgIG91dC5tMDIgPSAtcztcclxuICAgIG91dC5tMDMgPSBjO1xyXG4gICAgcmV0dXJuIG91dDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHNjYWxlIHZlY3Rvci5cclxuICAgKiBUaGlzIGlzIGVxdWl2YWxlbnQgdG8gKGJ1dCBtdWNoIGZhc3RlciB0aGFuKTpcclxuICAgKlxyXG4gICAqICAgICBtYXQyLnNldChkZXN0LCAxLCAwLCAwLCAxKTtcclxuICAgKiAgICAgbWF0Mi5zY2FsZShkZXN0LCBkZXN0LCB2ZWMpO1xyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAqIEBwYXJhbSB7dmVjMn0gdiAtIFNjYWxlIHZlY3Rvci5cclxuICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBmcm9tU2NhbGluZyhvdXQsIHYpIHtcclxuICAgIG91dC5tMDAgPSB2Lng7XHJcbiAgICBvdXQubTAxID0gMDtcclxuICAgIG91dC5tMDIgPSAwO1xyXG4gICAgb3V0Lm0wMyA9IHYueTtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGEgbWF0cml4LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIG1hdHJpeC5cclxuICAgKiBAcmV0dXJucyB7U3RyaW5nfSBTdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhpcyBtYXRyaXguXHJcbiAgICovXHJcbiAgc3RhdGljIHN0cihhKSB7XHJcbiAgICByZXR1cm4gYG1hdDIoJHthLm0wMH0sICR7YS5tMDF9LCAke2EubTAyfSwgJHthLm0wM30pYDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0b3JlIGVsZW1lbnRzIG9mIGEgbWF0cml4IGludG8gYXJyYXkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge2FycmF5fSBvdXQgLSBBcnJheSB0byBzdG9yZSByZXN1bHQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBtIC0gVGhlIG1hdHJpeC5cclxuICAgKiBAcmV0dXJucyB7QXJyYXl9IG91dC5cclxuICAgKi9cclxuICBzdGF0aWMgYXJyYXkob3V0LCBtKSB7XHJcbiAgICBvdXRbMF0gPSBtLm0wMDtcclxuICAgIG91dFsxXSA9IG0ubTAxO1xyXG4gICAgb3V0WzJdID0gbS5tMDI7XHJcbiAgICBvdXRbM10gPSBtLm0wMztcclxuXHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBGcm9iZW5pdXMgbm9ybSBvZiBhIG1hdHJpeC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gYSAtIE1hdHJpeCB0byBjYWxjdWxhdGUgRnJvYmVuaXVzIG5vcm0gb2YuXHJcbiAgICogQHJldHVybnMge051bWJlcn0gLSBUaGUgZnJvYmVuaXVzIG5vcm0uXHJcbiAgICovXHJcbiAgc3RhdGljIGZyb2IoYSkge1xyXG4gICAgcmV0dXJuIChNYXRoLnNxcnQoTWF0aC5wb3coYS5tMDAsIDIpICsgTWF0aC5wb3coYS5tMDEsIDIpICsgTWF0aC5wb3coYS5tMDIsIDIpICsgTWF0aC5wb3coYS5tMDMsIDIpKSk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIEwsIEQgYW5kIFUgbWF0cmljZXMgKExvd2VyIHRyaWFuZ3VsYXIsIERpYWdvbmFsIGFuZCBVcHBlciB0cmlhbmd1bGFyKSBieSBmYWN0b3JpemluZyB0aGUgaW5wdXQgbWF0cml4LlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gTCAtIFRoZSBsb3dlciB0cmlhbmd1bGFyIG1hdHJpeC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IEQgLSBUaGUgZGlhZ29uYWwgbWF0cml4LlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gVSAtIFRoZSB1cHBlciB0cmlhbmd1bGFyIG1hdHJpeC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBUaGUgaW5wdXQgbWF0cml4IHRvIGZhY3Rvcml6ZS5cclxuICAgKi9cclxuICBzdGF0aWMgTERVKEwsIEQsIFUsIGEpIHtcclxuICAgIEwubTAyID0gYS5tMDIgLyBhLm0wMDtcclxuICAgIFUubTAwID0gYS5tMDA7XHJcbiAgICBVLm0wMSA9IGEubTAxO1xyXG4gICAgVS5tMDMgPSBhLm0wMyAtIEwubTAyICogVS5tMDE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHR3byBtYXRyaWNlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBUaGUgZmlyc3Qgb3BlcmFuZC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGIgLSBUaGUgc2Vjb25kIG9wZXJhbmQuXHJcbiAgICogQHJldHVybnMge21hdDJ9IG91dC5cclxuICAgKi9cclxuICBzdGF0aWMgYWRkKG91dCwgYSwgYikge1xyXG4gICAgb3V0Lm0wMCA9IGEubTAwICsgYi5tMDA7XHJcbiAgICBvdXQubTAxID0gYS5tMDEgKyBiLm0wMTtcclxuICAgIG91dC5tMDIgPSBhLm0wMiArIGIubTAyO1xyXG4gICAgb3V0Lm0wMyA9IGEubTAzICsgYi5tMDM7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGEuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIGZpcnN0IG9wZXJhbmQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBiIC0gVGhlIHNlY29uZCBvcGVyYW5kLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICovXHJcbiAgc3RhdGljIHN1YnRyYWN0KG91dCwgYSwgYikge1xyXG4gICAgb3V0Lm0wMCA9IGEubTAwIC0gYi5tMDA7XHJcbiAgICBvdXQubTAxID0gYS5tMDEgLSBiLm0wMTtcclxuICAgIG91dC5tMDIgPSBhLm0wMiAtIGIubTAyO1xyXG4gICAgb3V0Lm0wMyA9IGEubTAzIC0gYi5tMDM7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQWxpYXMgb2Yge0BsaW5rIG1hdDIuc3VidHJhY3R9LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBzdWIob3V0LCBhLCBiKSB7XHJcbiAgICByZXR1cm4gbWF0Mi5zdWJ0cmFjdChvdXQsIGEsIGIpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgbWF0cmljZXMgYXJlIGVxdWFsLiAoQ29tcGFyZWQgdXNpbmcgPT09KVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIGZpcnN0IG1hdHJpeC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGIgLSBUaGUgc2Vjb25kIG1hdHJpeC5cclxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICovXHJcbiAgc3RhdGljIGV4YWN0RXF1YWxzKGEsIGIpIHtcclxuICAgIHJldHVybiBhLm0wMCA9PT0gYi5tMDAgJiYgYS5tMDEgPT09IGIubTAxICYmIGEubTAyID09PSBiLm0wMiAmJiBhLm0wMyA9PT0gYi5tMDM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNwZWNpZmllZCBtYXRyaWNlcyBhcmUgYXBwcm94aW1hdGVseSBlcXVhbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gYSAtIFRoZSBmaXJzdCBtYXRyaXguXHJcbiAgICogQHBhcmFtIHttYXQyfSBiIC0gVGhlIHNlY29uZCBtYXRyaXguXHJcbiAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAqL1xyXG4gIHN0YXRpYyBlcXVhbHMoYSwgYikge1xyXG4gICAgbGV0IGEwID0gYS5tMDAsIGExID0gYS5tMDEsIGEyID0gYS5tMDIsIGEzID0gYS5tMDM7XHJcbiAgICBsZXQgYjAgPSBiLm0wMCwgYjEgPSBiLm0wMSwgYjIgPSBiLm0wMiwgYjMgPSBiLm0wMztcclxuICAgIHJldHVybiAoXHJcbiAgICAgIE1hdGguYWJzKGEwIC0gYjApIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEwKSwgTWF0aC5hYnMoYjApKSAmJlxyXG4gICAgICBNYXRoLmFicyhhMSAtIGIxKSA8PSBFUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMSksIE1hdGguYWJzKGIxKSkgJiZcclxuICAgICAgTWF0aC5hYnMoYTIgLSBiMikgPD0gRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmXHJcbiAgICAgIE1hdGguYWJzKGEzIC0gYjMpIDw9IEVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGEzKSwgTWF0aC5hYnMoYjMpKVxyXG4gICAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE11bHRpcGx5IGVhY2ggZWxlbWVudCBvZiBhIG1hdHJpeCBieSBhIHNjYWxhciBudW1iZXIuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIHNjYWxlXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IGIgLSBUaGUgc2NhbGUgbnVtYmVyLlxyXG4gICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICovXHJcbiAgc3RhdGljIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xyXG4gICAgb3V0Lm0wMCA9IGEubTAwICogYjtcclxuICAgIG91dC5tMDEgPSBhLm0wMSAqIGI7XHJcbiAgICBvdXQubTAyID0gYS5tMDIgKiBiO1xyXG4gICAgb3V0Lm0wMyA9IGEubTAzICogYjtcclxuICAgIHJldHVybiBvdXQ7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIHR3byBtYXRyaWNlcyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIG51bWJlci5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBUaGUgZmlyc3Qgb3BlcmFuZC5cclxuICAgKiBAcGFyYW0ge21hdDJ9IGIgLSBUaGUgc2Vjb25kIG9wZXJhbmQuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IHNjYWxlIC0gVGhlIHNjYWxlIG51bWJlci5cclxuICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAqL1xyXG4gIHN0YXRpYyBtdWx0aXBseVNjYWxhckFuZEFkZChvdXQsIGEsIGIsIHNjYWxlKSB7XHJcbiAgICBvdXQubTAwID0gYS5tMDAgKyAoYi5tMDAgKiBzY2FsZSk7XHJcbiAgICBvdXQubTAxID0gYS5tMDEgKyAoYi5tMDEgKiBzY2FsZSk7XHJcbiAgICBvdXQubTAyID0gYS5tMDIgKyAoYi5tMDIgKiBzY2FsZSk7XHJcbiAgICBvdXQubTAzID0gYS5tMDMgKyAoYi5tMDMgKiBzY2FsZSk7XHJcbiAgICByZXR1cm4gb3V0O1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgbWF0MjsiLCIndXNlIHN0cmljdCc7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKCcuL3V0aWxzJyk7XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbi8qKlxyXG4gKiBNYXRoZW1hdGljYWwgMngyIG1hdHJpeC5cclxuICovXG52YXIgbWF0MiA9IGZ1bmN0aW9uICgpIHtcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIG1hdHJpeCwgd2l0aCBlbGVtZW50cyBzcGVjaWZpZWQgc2VwYXJhdGVseS5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDAgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAwLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAxLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDIgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAwLlxyXG4gICAqIEBwYXJhbSB7TnVtYmVyfSBtMDMgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAxLlxyXG4gICAqL1xuICBmdW5jdGlvbiBtYXQyKCkge1xuICAgIHZhciBtMDAgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG4gICAgdmFyIG0wMSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogMDtcbiAgICB2YXIgbTAyID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiAwO1xuICAgIHZhciBtMDMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgbWF0Mik7XG5cbiAgICAvKipcclxuICAgICAqIFRoZSBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAwLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqICovXG4gICAgdGhpcy5tMDAgPSBtMDA7XG5cbiAgICAvKipcclxuICAgICAqIFRoZSBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAxLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqICovXG4gICAgdGhpcy5tMDEgPSBtMDE7XG5cbiAgICAvKipcclxuICAgICAqIFRoZSBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAwLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqICovXG4gICAgdGhpcy5tMDIgPSBtMDI7XG5cbiAgICAvKipcclxuICAgICAqIFRoZSBlbGVtZW50IGF0IGNvbHVtbiAxIHJvdyAxLlxyXG4gICAgICogQHR5cGUge251bWJlcn1cclxuICAgICAqICovXG4gICAgdGhpcy5tMDMgPSBtMDM7XG4gIH1cblxuICAvKipcclxuICAgKiBDcmVhdGVzIGEgbWF0cml4LCB3aXRoIGVsZW1lbnRzIHNwZWNpZmllZCBzZXBhcmF0ZWx5LlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMCAtIFZhbHVlIGFzc2lnbmVkIHRvIGVsZW1lbnQgYXQgY29sdW1uIDAgcm93IDAuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMSAtIFZhbHVlIGFzc2lnbmVkIHRvIGVsZW1lbnQgYXQgY29sdW1uIDAgcm93IDEuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMiAtIFZhbHVlIGFzc2lnbmVkIHRvIGVsZW1lbnQgYXQgY29sdW1uIDEgcm93IDAuXHJcbiAgICogQHBhcmFtIHtOdW1iZXJ9IG0wMyAtIFZhbHVlIGFzc2lnbmVkIHRvIGVsZW1lbnQgYXQgY29sdW1uIDEgcm93IDEuXHJcbiAgICogQHJldHVybnMge21hdDJ9IFRoZSBuZXdseSBjcmVhdGVkIG1hdHJpeC5cclxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhtYXQyLCBudWxsLCBbe1xuICAgIGtleTogJ2NyZWF0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNyZWF0ZSgpIHtcbiAgICAgIHZhciBtMDAgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IDE7XG4gICAgICB2YXIgbTAxID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAwO1xuICAgICAgdmFyIG0wMiA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogMDtcbiAgICAgIHZhciBtMDMgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDE7XG5cbiAgICAgIHJldHVybiBuZXcgbWF0MihtMDAsIG0wMSwgbTAyLCBtMDMpO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogQ2xvbmUgYSBtYXRyaXguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIGNsb25lLlxyXG4gICAgICogQHJldHVybnMge21hdDJ9IFRoZSBuZXdseSBjcmVhdGVkIG1hdHJpeC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdjbG9uZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsb25lKGEpIHtcbiAgICAgIHJldHVybiBuZXcgbWF0MihhLm0wMCwgYS5tMDEsIGEubTAyLCBhLm0wMyk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBDb3B5IGNvbnRlbnQgb2YgYSBtYXRyaXggaW50byBhbm90aGVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIG1vZGlmaWVkLlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIHNwZWNpZmllZCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2NvcHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjb3B5KG91dCwgYSkge1xuICAgICAgb3V0Lm0wMCA9IGEubTAwO1xuICAgICAgb3V0Lm0wMSA9IGEubTAxO1xuICAgICAgb3V0Lm0wMiA9IGEubTAyO1xuICAgICAgb3V0Lm0wMyA9IGEubTAzO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFNldHMgYSBtYXRyaXggYXMgaWRlbnRpdHkgbWF0cml4LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIG1vZGlmaWVkLlxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdpZGVudGl0eScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGlkZW50aXR5KG91dCkge1xuICAgICAgb3V0Lm0wMCA9IDE7XG4gICAgICBvdXQubTAxID0gMDtcbiAgICAgIG91dC5tMDIgPSAwO1xuICAgICAgb3V0Lm0wMyA9IDE7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU2V0cyB0aGUgZWxlbWVudHMgb2YgYSBtYXRyaXggdG8gdGhlIGdpdmVuIHZhbHVlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIFRoZSBtYXRyaXggdG8gbW9kaWZpZWQuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTAwIC0gVmFsdWUgYXNzaWduZWQgdG8gZWxlbWVudCBhdCBjb2x1bW4gMCByb3cgMC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtMDEgLSBWYWx1ZSBhc3NpZ25lZCB0byBlbGVtZW50IGF0IGNvbHVtbiAwIHJvdyAxLlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG0xMCAtIFZhbHVlIGFzc2lnbmVkIHRvIGVsZW1lbnQgYXQgY29sdW1uIDEgcm93IDAuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbTExIC0gVmFsdWUgYXNzaWduZWQgdG8gZWxlbWVudCBhdCBjb2x1bW4gMSByb3cgMS5cclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc2V0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2V0KG91dCwgbTAwLCBtMDEsIG0xMCwgbTExKSB7XG4gICAgICBvdXQubTAwID0gbTAwO1xuICAgICAgb3V0Lm0wMSA9IG0wMTtcbiAgICAgIG91dC5tMDIgPSBtMTA7XG4gICAgICBvdXQubTAzID0gbTExO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFRyYW5zcG9zZXMgYSBtYXRyaXguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIHRyYW5zcG9zZS5cclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAndHJhbnNwb3NlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gdHJhbnNwb3NlKG91dCwgYSkge1xuICAgICAgLy8gSWYgd2UgYXJlIHRyYW5zcG9zaW5nIG91cnNlbHZlcyB3ZSBjYW4gc2tpcCBhIGZldyBzdGVwcyBidXQgaGF2ZSB0byBjYWNoZSBzb21lIHZhbHVlc1xuICAgICAgaWYgKG91dCA9PT0gYSkge1xuICAgICAgICB2YXIgYTEgPSBhLm0wMTtcbiAgICAgICAgb3V0Lm0wMSA9IGEubTAyO1xuICAgICAgICBvdXQubTAyID0gYTE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQubTAwID0gYS5tMDA7XG4gICAgICAgIG91dC5tMDEgPSBhLm0wMjtcbiAgICAgICAgb3V0Lm0wMiA9IGEubTAxO1xuICAgICAgICBvdXQubTAzID0gYS5tMDM7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBJbnZlcnRzIGEgbWF0cml4LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSAtIE1hdHJpeCB0byBpbnZlcnQuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2ludmVydCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGludmVydChvdXQsIGEpIHtcbiAgICAgIHZhciBhMCA9IGEubTAwLFxuICAgICAgICAgIGExID0gYS5tMDEsXG4gICAgICAgICAgYTIgPSBhLm0wMixcbiAgICAgICAgICBhMyA9IGEubTAzO1xuXG4gICAgICAvLyBDYWxjdWxhdGUgdGhlIGRldGVybWluYW50XG4gICAgICB2YXIgZGV0ID0gYTAgKiBhMyAtIGEyICogYTE7XG5cbiAgICAgIGlmICghZGV0KSB7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgICAgfVxuICAgICAgZGV0ID0gMS4wIC8gZGV0O1xuXG4gICAgICBvdXQubTAwID0gYTMgKiBkZXQ7XG4gICAgICBvdXQubTAxID0gLWExICogZGV0O1xuICAgICAgb3V0Lm0wMiA9IC1hMiAqIGRldDtcbiAgICAgIG91dC5tMDMgPSBhMCAqIGRldDtcblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGFkanVnYXRlIG9mIGEgbWF0cml4LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSAtIE1hdHJpeCB0byBjYWxjdWxhdGUuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Fkam9pbnQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBhZGpvaW50KG91dCwgYSkge1xuICAgICAgLy8gQ2FjaGluZyB0aGlzIHZhbHVlIGlzIG5lc3NlY2FyeSBpZiBvdXQgPT0gYVxuICAgICAgdmFyIGEwID0gYS5tMDA7XG4gICAgICBvdXQubTAwID0gYS5tMDM7XG4gICAgICBvdXQubTAxID0gLWEubTAxO1xuICAgICAgb3V0Lm0wMiA9IC1hLm0wMjtcbiAgICAgIG91dC5tMDMgPSBhMDtcblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGRldGVybWluYW50IG9mIGEgbWF0cml4LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSAtIE1hdHJpeCB0byBjYWxjdWxhdGUuXHJcbiAgICAgKiBAcmV0dXJucyB7TnVtYmVyfSBEZXRlcm1pbmFudCBvZiBhLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2RldGVybWluYW50JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZGV0ZXJtaW5hbnQoYSkge1xuICAgICAgcmV0dXJuIGEubTAwICogYS5tMDMgLSBhLm0wMiAqIGEubTAxO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogTXVsdGlwbHkgdHdvIG1hdHJpY2VzIGV4cGxpY2l0bHkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIGZpcnN0IG9wZXJhbmQuXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGIgLSBUaGUgc2Vjb25kIG9wZXJhbmQuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ211bHRpcGx5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbXVsdGlwbHkob3V0LCBhLCBiKSB7XG4gICAgICB2YXIgYTAgPSBhLm0wMCxcbiAgICAgICAgICBhMSA9IGEubTAxLFxuICAgICAgICAgIGEyID0gYS5tMDIsXG4gICAgICAgICAgYTMgPSBhLm0wMztcbiAgICAgIHZhciBiMCA9IGIubTAwLFxuICAgICAgICAgIGIxID0gYi5tMDEsXG4gICAgICAgICAgYjIgPSBiLm0wMixcbiAgICAgICAgICBiMyA9IGIubTAzO1xuICAgICAgb3V0Lm0wMCA9IGEwICogYjAgKyBhMiAqIGIxO1xuICAgICAgb3V0Lm0wMSA9IGExICogYjAgKyBhMyAqIGIxO1xuICAgICAgb3V0Lm0wMiA9IGEwICogYjIgKyBhMiAqIGIzO1xuICAgICAgb3V0Lm0wMyA9IGExICogYjIgKyBhMyAqIGIzO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIEFsaWFzIG9mIHtAbGluayBtYXQyLm11bHRpcGx5fS5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtdWwnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBtdWwob3V0LCBhLCBiKSB7XG4gICAgICByZXR1cm4gbWF0Mi5tdWx0aXBseShvdXQsIGEsIGIpO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogUm90YXRlcyBhIG1hdHJpeCBieSB0aGUgZ2l2ZW4gYW5nbGUuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIHJvdGF0ZS5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0XHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAncm90YXRlJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gcm90YXRlKG91dCwgYSwgcmFkKSB7XG4gICAgICB2YXIgYTAgPSBhLm0wMCxcbiAgICAgICAgICBhMSA9IGEubTAxLFxuICAgICAgICAgIGEyID0gYS5tMDIsXG4gICAgICAgICAgYTMgPSBhLm0wMyxcbiAgICAgICAgICBzID0gTWF0aC5zaW4ocmFkKSxcbiAgICAgICAgICBjID0gTWF0aC5jb3MocmFkKTtcbiAgICAgIG91dC5tMDAgPSBhMCAqIGMgKyBhMiAqIHM7XG4gICAgICBvdXQubTAxID0gYTEgKiBjICsgYTMgKiBzO1xuICAgICAgb3V0Lm0wMiA9IGEwICogLXMgKyBhMiAqIGM7XG4gICAgICBvdXQubTAzID0gYTEgKiAtcyArIGEzICogYztcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBTY2FsZXMgdGhlIG1hdHJpeCBnaXZlbiBieSBhIHNjYWxlIHZlY3Rvci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBNYXRyaXggdG8gc2NhbGUuXHJcbiAgICAgKiBAcGFyYW0ge3ZlYzJ9IHYgLSBUaGUgc2NhbGUgdmVjdG9yLlxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dFxyXG4gICAgICoqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzY2FsZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjYWxlKG91dCwgYSwgdikge1xuICAgICAgdmFyIGEwID0gYS5tMDAsXG4gICAgICAgICAgYTEgPSBhLm0wMSxcbiAgICAgICAgICBhMiA9IGEubTAyLFxuICAgICAgICAgIGEzID0gYS5tMDMsXG4gICAgICAgICAgdjAgPSB2LngsXG4gICAgICAgICAgdjEgPSB2Lnk7XG4gICAgICBvdXQubTAwID0gYTAgKiB2MDtcbiAgICAgIG91dC5tMDEgPSBhMSAqIHYwO1xuICAgICAgb3V0Lm0wMiA9IGEyICogdjE7XG4gICAgICBvdXQubTAzID0gYTMgKiB2MTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBDcmVhdGVzIGEgbWF0cml4IGZyb20gYSBnaXZlbiBhbmdsZS5cclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQyLnNldChkZXN0LCAxLCAwLCAwLCAxKTtcclxuICAgICAqICAgICBtYXQyLnJvdGF0ZShkZXN0LCBkZXN0LCByYWQpO1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSByYWQgLSBUaGUgcm90YXRpb24gYW5nbGUuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Zyb21Sb3RhdGlvbicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21Sb3RhdGlvbihvdXQsIHJhZCkge1xuICAgICAgdmFyIHMgPSBNYXRoLnNpbihyYWQpLFxuICAgICAgICAgIGMgPSBNYXRoLmNvcyhyYWQpO1xuICAgICAgb3V0Lm0wMCA9IGM7XG4gICAgICBvdXQubTAxID0gcztcbiAgICAgIG91dC5tMDIgPSAtcztcbiAgICAgIG91dC5tMDMgPSBjO1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIENyZWF0ZXMgYSBtYXRyaXggZnJvbSBhIHNjYWxlIHZlY3Rvci5cclxuICAgICAqIFRoaXMgaXMgZXF1aXZhbGVudCB0byAoYnV0IG11Y2ggZmFzdGVyIHRoYW4pOlxyXG4gICAgICpcclxuICAgICAqICAgICBtYXQyLnNldChkZXN0LCAxLCAwLCAwLCAxKTtcclxuICAgICAqICAgICBtYXQyLnNjYWxlKGRlc3QsIGRlc3QsIHZlYyk7XHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAgICogQHBhcmFtIHt2ZWMyfSB2IC0gU2NhbGUgdmVjdG9yLlxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdmcm9tU2NhbGluZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyb21TY2FsaW5nKG91dCwgdikge1xuICAgICAgb3V0Lm0wMCA9IHYueDtcbiAgICAgIG91dC5tMDEgPSAwO1xuICAgICAgb3V0Lm0wMiA9IDA7XG4gICAgICBvdXQubTAzID0gdi55O1xuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgYSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgYSBtYXRyaXguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIG1hdHJpeC5cclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9IFN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGlzIG1hdHJpeC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdzdHInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdHIoYSkge1xuICAgICAgcmV0dXJuICdtYXQyKCcgKyBhLm0wMCArICcsICcgKyBhLm0wMSArICcsICcgKyBhLm0wMiArICcsICcgKyBhLm0wMyArICcpJztcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFN0b3JlIGVsZW1lbnRzIG9mIGEgbWF0cml4IGludG8gYXJyYXkuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHthcnJheX0gb3V0IC0gQXJyYXkgdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBtIC0gVGhlIG1hdHJpeC5cclxuICAgICAqIEByZXR1cm5zIHtBcnJheX0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2FycmF5JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYXJyYXkob3V0LCBtKSB7XG4gICAgICBvdXRbMF0gPSBtLm0wMDtcbiAgICAgIG91dFsxXSA9IG0ubTAxO1xuICAgICAgb3V0WzJdID0gbS5tMDI7XG4gICAgICBvdXRbM10gPSBtLm0wMztcblxuICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgRnJvYmVuaXVzIG5vcm0gb2YgYSBtYXRyaXguXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gTWF0cml4IHRvIGNhbGN1bGF0ZSBGcm9iZW5pdXMgbm9ybSBvZi5cclxuICAgICAqIEByZXR1cm5zIHtOdW1iZXJ9IC0gVGhlIGZyb2Jlbml1cyBub3JtLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2Zyb2InLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBmcm9iKGEpIHtcbiAgICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coYS5tMDAsIDIpICsgTWF0aC5wb3coYS5tMDEsIDIpICsgTWF0aC5wb3coYS5tMDIsIDIpICsgTWF0aC5wb3coYS5tMDMsIDIpKTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgTCwgRCBhbmQgVSBtYXRyaWNlcyAoTG93ZXIgdHJpYW5ndWxhciwgRGlhZ29uYWwgYW5kIFVwcGVyIHRyaWFuZ3VsYXIpIGJ5IGZhY3Rvcml6aW5nIHRoZSBpbnB1dCBtYXRyaXguXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IEwgLSBUaGUgbG93ZXIgdHJpYW5ndWxhciBtYXRyaXguXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IEQgLSBUaGUgZGlhZ29uYWwgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBVIC0gVGhlIHVwcGVyIHRyaWFuZ3VsYXIgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIGlucHV0IG1hdHJpeCB0byBmYWN0b3JpemUuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnTERVJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gTERVKEwsIEQsIFUsIGEpIHtcbiAgICAgIEwubTAyID0gYS5tMDIgLyBhLm0wMDtcbiAgICAgIFUubTAwID0gYS5tMDA7XG4gICAgICBVLm0wMSA9IGEubTAxO1xuICAgICAgVS5tMDMgPSBhLm0wMyAtIEwubTAyICogVS5tMDE7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byBtYXRyaWNlcy5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBUaGUgZmlyc3Qgb3BlcmFuZC5cclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYiAtIFRoZSBzZWNvbmQgb3BlcmFuZC5cclxuICAgICAqIEByZXR1cm5zIHttYXQyfSBvdXQuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnYWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gYWRkKG91dCwgYSwgYikge1xuICAgICAgb3V0Lm0wMCA9IGEubTAwICsgYi5tMDA7XG4gICAgICBvdXQubTAxID0gYS5tMDEgKyBiLm0wMTtcbiAgICAgIG91dC5tMDIgPSBhLm0wMiArIGIubTAyO1xuICAgICAgb3V0Lm0wMyA9IGEubTAzICsgYi5tMDM7XG4gICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogU3VidHJhY3RzIG1hdHJpeCBiIGZyb20gbWF0cml4IGEuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBvdXQgLSBNYXRyaXggdG8gc3RvcmUgcmVzdWx0LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIGZpcnN0IG9wZXJhbmQuXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGIgLSBUaGUgc2Vjb25kIG9wZXJhbmQuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ3N1YnRyYWN0JyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3VidHJhY3Qob3V0LCBhLCBiKSB7XG4gICAgICBvdXQubTAwID0gYS5tMDAgLSBiLm0wMDtcbiAgICAgIG91dC5tMDEgPSBhLm0wMSAtIGIubTAxO1xuICAgICAgb3V0Lm0wMiA9IGEubTAyIC0gYi5tMDI7XG4gICAgICBvdXQubTAzID0gYS5tMDMgLSBiLm0wMztcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBvZiB7QGxpbmsgbWF0Mi5zdWJ0cmFjdH0uXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnc3ViJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc3ViKG91dCwgYSwgYikge1xuICAgICAgcmV0dXJuIG1hdDIuc3VidHJhY3Qob3V0LCBhLCBiKTtcbiAgICB9XG5cbiAgICAvKipcclxuICAgICAqIFJldHVybnMgd2hldGhlciB0aGUgc3BlY2lmaWVkIG1hdHJpY2VzIGFyZSBlcXVhbC4gKENvbXBhcmVkIHVzaW5nID09PSlcclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBUaGUgZmlyc3QgbWF0cml4LlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBiIC0gVGhlIHNlY29uZCBtYXRyaXguXHJcbiAgICAgKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgbWF0cmljZXMgYXJlIGVxdWFsLCBmYWxzZSBvdGhlcndpc2UuXHJcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiAnZXhhY3RFcXVhbHMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBleGFjdEVxdWFscyhhLCBiKSB7XG4gICAgICByZXR1cm4gYS5tMDAgPT09IGIubTAwICYmIGEubTAxID09PSBiLm0wMSAmJiBhLm0wMiA9PT0gYi5tMDIgJiYgYS5tMDMgPT09IGIubTAzO1xuICAgIH1cblxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyB3aGV0aGVyIHRoZSBzcGVjaWZpZWQgbWF0cmljZXMgYXJlIGFwcHJveGltYXRlbHkgZXF1YWwuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHttYXQyfSBhIC0gVGhlIGZpcnN0IG1hdHJpeC5cclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYiAtIFRoZSBzZWNvbmQgbWF0cml4LlxyXG4gICAgICogQHJldHVybnMge0Jvb2xlYW59IFRydWUgaWYgdGhlIG1hdHJpY2VzIGFyZSBlcXVhbCwgZmFsc2Ugb3RoZXJ3aXNlLlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ2VxdWFscycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVxdWFscyhhLCBiKSB7XG4gICAgICB2YXIgYTAgPSBhLm0wMCxcbiAgICAgICAgICBhMSA9IGEubTAxLFxuICAgICAgICAgIGEyID0gYS5tMDIsXG4gICAgICAgICAgYTMgPSBhLm0wMztcbiAgICAgIHZhciBiMCA9IGIubTAwLFxuICAgICAgICAgIGIxID0gYi5tMDEsXG4gICAgICAgICAgYjIgPSBiLm0wMixcbiAgICAgICAgICBiMyA9IGIubTAzO1xuICAgICAgcmV0dXJuIE1hdGguYWJzKGEwIC0gYjApIDw9IF91dGlscy5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMCksIE1hdGguYWJzKGIwKSkgJiYgTWF0aC5hYnMoYTEgLSBiMSkgPD0gX3V0aWxzLkVQU0lMT04gKiBNYXRoLm1heCgxLjAsIE1hdGguYWJzKGExKSwgTWF0aC5hYnMoYjEpKSAmJiBNYXRoLmFicyhhMiAtIGIyKSA8PSBfdXRpbHMuRVBTSUxPTiAqIE1hdGgubWF4KDEuMCwgTWF0aC5hYnMoYTIpLCBNYXRoLmFicyhiMikpICYmIE1hdGguYWJzKGEzIC0gYjMpIDw9IF91dGlscy5FUFNJTE9OICogTWF0aC5tYXgoMS4wLCBNYXRoLmFicyhhMyksIE1hdGguYWJzKGIzKSk7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBNdWx0aXBseSBlYWNoIGVsZW1lbnQgb2YgYSBtYXRyaXggYnkgYSBzY2FsYXIgbnVtYmVyLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gb3V0IC0gTWF0cml4IHRvIHN0b3JlIHJlc3VsdC5cclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYSAtIE1hdHJpeCB0byBzY2FsZVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGIgLSBUaGUgc2NhbGUgbnVtYmVyLlxyXG4gICAgICogQHJldHVybnMge21hdDJ9IG91dC5cclxuICAgICAqL1xuXG4gIH0sIHtcbiAgICBrZXk6ICdtdWx0aXBseVNjYWxhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG11bHRpcGx5U2NhbGFyKG91dCwgYSwgYikge1xuICAgICAgb3V0Lm0wMCA9IGEubTAwICogYjtcbiAgICAgIG91dC5tMDEgPSBhLm0wMSAqIGI7XG4gICAgICBvdXQubTAyID0gYS5tMDIgKiBiO1xuICAgICAgb3V0Lm0wMyA9IGEubTAzICogYjtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuXG4gICAgLyoqXHJcbiAgICAgKiBBZGRzIHR3byBtYXRyaWNlcyBhZnRlciBtdWx0aXBseWluZyBlYWNoIGVsZW1lbnQgb2YgdGhlIHNlY29uZCBvcGVyYW5kIGJ5IGEgc2NhbGFyIG51bWJlci5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IG91dCAtIE1hdHJpeCB0byBzdG9yZSByZXN1bHQuXHJcbiAgICAgKiBAcGFyYW0ge21hdDJ9IGEgLSBUaGUgZmlyc3Qgb3BlcmFuZC5cclxuICAgICAqIEBwYXJhbSB7bWF0Mn0gYiAtIFRoZSBzZWNvbmQgb3BlcmFuZC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzY2FsZSAtIFRoZSBzY2FsZSBudW1iZXIuXHJcbiAgICAgKiBAcmV0dXJucyB7bWF0Mn0gb3V0LlxyXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogJ211bHRpcGx5U2NhbGFyQW5kQWRkJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gbXVsdGlwbHlTY2FsYXJBbmRBZGQob3V0LCBhLCBiLCBzY2FsZSkge1xuICAgICAgb3V0Lm0wMCA9IGEubTAwICsgYi5tMDAgKiBzY2FsZTtcbiAgICAgIG91dC5tMDEgPSBhLm0wMSArIGIubTAxICogc2NhbGU7XG4gICAgICBvdXQubTAyID0gYS5tMDIgKyBiLm0wMiAqIHNjYWxlO1xuICAgICAgb3V0Lm0wMyA9IGEubTAzICsgYi5tMDMgKiBzY2FsZTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIG1hdDI7XG59KCk7XG5cbmV4cG9ydHMuZGVmYXVsdCA9IG1hdDI7XG5tb2R1bGUuZXhwb3J0cyA9IGV4cG9ydHNbJ2RlZmF1bHQnXTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltMWhkREl1YW5NaVhTd2libUZ0WlhNaU9sc2liV0YwTWlJc0ltMHdNQ0lzSW0wd01TSXNJbTB3TWlJc0ltMHdNeUlzSW1FaUxDSnZkWFFpTENKdE1UQWlMQ0p0TVRFaUxDSmhNU0lzSW1Fd0lpd2lZVElpTENKaE15SXNJbVJsZENJc0ltSWlMQ0ppTUNJc0ltSXhJaXdpWWpJaUxDSmlNeUlzSW0xMWJIUnBjR3g1SWl3aWNtRmtJaXdpY3lJc0lrMWhkR2dpTENKemFXNGlMQ0pqSWl3aVkyOXpJaXdpZGlJc0luWXdJaXdpZUNJc0luWXhJaXdpZVNJc0ltMGlMQ0p6Y1hKMElpd2ljRzkzSWl3aVRDSXNJa1FpTENKVklpd2ljM1ZpZEhKaFkzUWlMQ0poWW5NaUxDSnRZWGdpTENKelkyRnNaU0pkTENKdFlYQndhVzVuY3lJNklqczdPenM3T3pzN1FVRkJRVHM3T3p0QlFVVkJPenM3U1VGSFRVRXNTVHRCUVVOS096czdPenM3T3p0QlFWRkJMR3RDUVVGblJEdEJRVUZCTEZGQlFYQkRReXhIUVVGdlF5eDFSVUZCT1VJc1EwRkJPRUk3UVVGQlFTeFJRVUV6UWtNc1IwRkJNa0lzZFVWQlFYSkNMRU5CUVhGQ08wRkJRVUVzVVVGQmJFSkRMRWRCUVd0Q0xIVkZRVUZhTEVOQlFWazdRVUZCUVN4UlFVRlVReXhIUVVGVExIVkZRVUZJTEVOQlFVYzdPMEZCUVVFN08wRkJRemxET3pzN08wRkJTVUVzVTBGQlMwZ3NSMEZCVEN4SFFVRlhRU3hIUVVGWU96dEJRVVZCT3pzN08wRkJTVUVzVTBGQlMwTXNSMEZCVEN4SFFVRlhRU3hIUVVGWU96dEJRVVZCT3pzN08wRkJTVUVzVTBGQlMwTXNSMEZCVEN4SFFVRlhRU3hIUVVGWU96dEJRVVZCT3pzN08wRkJTVUVzVTBGQlMwTXNSMEZCVEN4SFFVRlhRU3hIUVVGWU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPenM3TmtKQlUydEVPMEZCUVVFc1ZVRkJjRU5JTEVkQlFXOURMSFZGUVVFNVFpeERRVUU0UWp0QlFVRkJMRlZCUVROQ1F5eEhRVUV5UWl4MVJVRkJja0lzUTBGQmNVSTdRVUZCUVN4VlFVRnNRa01zUjBGQmEwSXNkVVZCUVZvc1EwRkJXVHRCUVVGQkxGVkJRVlJETEVkQlFWTXNkVVZCUVVnc1EwRkJSenM3UVVGRGFFUXNZVUZCVHl4SlFVRkpTaXhKUVVGS0xFTkJRVk5ETEVkQlFWUXNSVUZCWTBNc1IwRkJaQ3hGUVVGdFFrTXNSMEZCYmtJc1JVRkJkMEpETEVkQlFYaENMRU5CUVZBN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096QkNRVTFoUXl4RExFVkJRVWM3UVVGRFpDeGhRVUZQTEVsQlFVbE1MRWxCUVVvc1EwRkJVMHNzUlVGQlJVb3NSMEZCV0N4RlFVRm5Ra2tzUlVGQlJVZ3NSMEZCYkVJc1JVRkJkVUpITEVWQlFVVkdMRWRCUVhwQ0xFVkJRVGhDUlN4RlFVRkZSQ3hIUVVGb1F5eERRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN2VVSkJUMWxGTEVjc1JVRkJTMFFzUXl4RlFVRkhPMEZCUTJ4Q1F5eFZRVUZKVEN4SFFVRktMRWRCUVZWSkxFVkJRVVZLTEVkQlFWbzdRVUZEUVVzc1ZVRkJTVW9zUjBGQlNpeEhRVUZWUnl4RlFVRkZTQ3hIUVVGYU8wRkJRMEZKTEZWQlFVbElMRWRCUVVvc1IwRkJWVVVzUlVGQlJVWXNSMEZCV2p0QlFVTkJSeXhWUVVGSlJpeEhRVUZLTEVkQlFWVkRMRVZCUVVWRUxFZEJRVm83UVVGRFFTeGhRVUZQUlN4SFFVRlFPMEZCUTBRN08wRkJSVVE3T3pzN096czdPenMyUWtGTlowSkJMRWNzUlVGQlN6dEJRVU51UWtFc1ZVRkJTVXdzUjBGQlNpeEhRVUZWTEVOQlFWWTdRVUZEUVVzc1ZVRkJTVW9zUjBGQlNpeEhRVUZWTEVOQlFWWTdRVUZEUVVrc1ZVRkJTVWdzUjBGQlNpeEhRVUZWTEVOQlFWWTdRVUZEUVVjc1ZVRkJTVVlzUjBGQlNpeEhRVUZWTEVOQlFWWTdRVUZEUVN4aFFVRlBSU3hIUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPenM3ZDBKQlZWZEJMRWNzUlVGQlMwd3NSeXhGUVVGTFF5eEhMRVZCUVV0TExFY3NSVUZCUzBNc1J5eEZRVUZMTzBGQlEyeERSaXhWUVVGSlRDeEhRVUZLTEVkQlFWVkJMRWRCUVZZN1FVRkRRVXNzVlVGQlNVb3NSMEZCU2l4SFFVRlZRU3hIUVVGV08wRkJRMEZKTEZWQlFVbElMRWRCUVVvc1IwRkJWVWtzUjBGQlZqdEJRVU5CUkN4VlFVRkpSaXhIUVVGS0xFZEJRVlZKTEVkQlFWWTdRVUZEUVN4aFFVRlBSaXhIUVVGUU8wRkJRMFE3TzBGQlIwUTdPenM3T3pzN096czdPRUpCVDJsQ1FTeEhMRVZCUVV0RUxFTXNSVUZCUnp0QlFVTjJRanRCUVVOQkxGVkJRVWxETEZGQlFWRkVMRU5CUVZvc1JVRkJaVHRCUVVOaUxGbEJRVWxKTEV0QlFVdEtMRVZCUVVWSUxFZEJRVmc3UVVGRFFVa3NXVUZCU1Vvc1IwRkJTaXhIUVVGVlJ5eEZRVUZGUml4SFFVRmFPMEZCUTBGSExGbEJRVWxJTEVkQlFVb3NSMEZCVlUwc1JVRkJWanRCUVVORUxFOUJTa1FzVFVGSlR6dEJRVU5NU0N4WlFVRkpUQ3hIUVVGS0xFZEJRVlZKTEVWQlFVVktMRWRCUVZvN1FVRkRRVXNzV1VGQlNVb3NSMEZCU2l4SFFVRlZSeXhGUVVGRlJpeEhRVUZhTzBGQlEwRkhMRmxCUVVsSUxFZEJRVW9zUjBGQlZVVXNSVUZCUlVnc1IwRkJXanRCUVVOQlNTeFpRVUZKUml4SFFVRktMRWRCUVZWRExFVkJRVVZFTEVkQlFWbzdRVUZEUkRzN1FVRkZSQ3hoUVVGUFJTeEhRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN01rSkJUMk5CTEVjc1JVRkJTMFFzUXl4RlFVRkhPMEZCUTNCQ0xGVkJRVWxMTEV0QlFVdE1MRVZCUVVWS0xFZEJRVmc3UVVGQlFTeFZRVUZuUWxFc1MwRkJTMG9zUlVGQlJVZ3NSMEZCZGtJN1FVRkJRU3hWUVVFMFFsTXNTMEZCUzA0c1JVRkJSVVlzUjBGQmJrTTdRVUZCUVN4VlFVRjNRMU1zUzBGQlMxQXNSVUZCUlVRc1IwRkJMME03TzBGQlJVRTdRVUZEUVN4VlFVRkpVeXhOUVVGTlNDeExRVUZMUlN4RlFVRk1MRWRCUVZWRUxFdEJRVXRHTEVWQlFYcENPenRCUVVWQkxGVkJRVWtzUTBGQlEwa3NSMEZCVEN4RlFVRlZPMEZCUTFJc1pVRkJUeXhKUVVGUU8wRkJRMFE3UVVGRFJFRXNXVUZCVFN4TlFVRk5RU3hIUVVGYU96dEJRVVZCVUN4VlFVRkpUQ3hIUVVGS0xFZEJRVlZYTEV0QlFVdERMRWRCUVdZN1FVRkRRVkFzVlVGQlNVb3NSMEZCU2l4SFFVRlZMRU5CUVVOUExFVkJRVVFzUjBGQlRVa3NSMEZCYUVJN1FVRkRRVkFzVlVGQlNVZ3NSMEZCU2l4SFFVRlZMRU5CUVVOUkxFVkJRVVFzUjBGQlRVVXNSMEZCYUVJN1FVRkRRVkFzVlVGQlNVWXNSMEZCU2l4SFFVRlZUU3hMUVVGTFJ5eEhRVUZtT3p0QlFVVkJMR0ZCUVU5UUxFZEJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzMFFrRlBaVUVzUnl4RlFVRkxSQ3hETEVWQlFVYzdRVUZEY2tJN1FVRkRRU3hWUVVGSlN5eExRVUZMVEN4RlFVRkZTaXhIUVVGWU8wRkJRMEZMTEZWQlFVbE1MRWRCUVVvc1IwRkJWVWtzUlVGQlJVUXNSMEZCV2p0QlFVTkJSU3hWUVVGSlNpeEhRVUZLTEVkQlFWVXNRMEZCUTBjc1JVRkJSVWdzUjBGQllqdEJRVU5CU1N4VlFVRkpTQ3hIUVVGS0xFZEJRVlVzUTBGQlEwVXNSVUZCUlVZc1IwRkJZanRCUVVOQlJ5eFZRVUZKUml4SFFVRktMRWRCUVZWTkxFVkJRVlk3TzBGQlJVRXNZVUZCVDBvc1IwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPenM3WjBOQlRXMUNSQ3hETEVWQlFVYzdRVUZEY0VJc1lVRkJUMEVzUlVGQlJVb3NSMEZCUml4SFFVRlJTU3hGUVVGRlJDeEhRVUZXTEVkQlFXZENReXhGUVVGRlJpeEhRVUZHTEVkQlFWRkZMRVZCUVVWSUxFZEJRV3BETzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096WkNRVkZuUWtrc1J5eEZRVUZMUkN4RExFVkJRVWRUTEVNc1JVRkJSenRCUVVONlFpeFZRVUZKU2l4TFFVRkxUQ3hGUVVGRlNpeEhRVUZZTzBGQlFVRXNWVUZCWjBKUkxFdEJRVXRLTEVWQlFVVklMRWRCUVhaQ08wRkJRVUVzVlVGQk5FSlRMRXRCUVV0T0xFVkJRVVZHTEVkQlFXNURPMEZCUVVFc1ZVRkJkME5UTEV0QlFVdFFMRVZCUVVWRUxFZEJRUzlETzBGQlEwRXNWVUZCU1Zjc1MwRkJTMFFzUlVGQlJXSXNSMEZCV0R0QlFVRkJMRlZCUVdkQ1pTeExRVUZMUml4RlFVRkZXaXhIUVVGMlFqdEJRVUZCTEZWQlFUUkNaU3hMUVVGTFNDeEZRVUZGV0N4SFFVRnVRenRCUVVGQkxGVkJRWGREWlN4TFFVRkxTaXhGUVVGRlZpeEhRVUV2UXp0QlFVTkJSU3hWUVVGSlRDeEhRVUZLTEVkQlFWVlRMRXRCUVV0TExFVkJRVXdzUjBGQlZVb3NTMEZCUzBzc1JVRkJla0k3UVVGRFFWWXNWVUZCU1Vvc1IwRkJTaXhIUVVGVlR5eExRVUZMVFN4RlFVRk1MRWRCUVZWSUxFdEJRVXRKTEVWQlFYcENPMEZCUTBGV0xGVkJRVWxJTEVkQlFVb3NSMEZCVlU4c1MwRkJTMDhzUlVGQlRDeEhRVUZWVGl4TFFVRkxUeXhGUVVGNlFqdEJRVU5CV2l4VlFVRkpSaXhIUVVGS0xFZEJRVlZMTEV0QlFVdFJMRVZCUVV3c1IwRkJWVXdzUzBGQlMwMHNSVUZCZWtJN1FVRkRRU3hoUVVGUFdpeEhRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenQzUWtGSFYwRXNSeXhGUVVGTFJDeERMRVZCUVVkVExFTXNSVUZCUnp0QlFVTndRaXhoUVVGUFpDeExRVUZMYlVJc1VVRkJUQ3hEUVVGallpeEhRVUZrTEVWQlFXMUNSQ3hEUVVGdVFpeEZRVUZ6UWxNc1EwRkJkRUlzUTBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenN5UWtGUlkxSXNSeXhGUVVGTFJDeERMRVZCUVVkbExFY3NSVUZCU3p0QlFVTjZRaXhWUVVGSlZpeExRVUZMVEN4RlFVRkZTaXhIUVVGWU8wRkJRVUVzVlVGQlowSlJMRXRCUVV0S0xFVkJRVVZJTEVkQlFYWkNPMEZCUVVFc1ZVRkJORUpUTEV0QlFVdE9MRVZCUVVWR0xFZEJRVzVETzBGQlFVRXNWVUZCZDBOVExFdEJRVXRRTEVWQlFVVkVMRWRCUVM5RE8wRkJRVUVzVlVGRFJXbENMRWxCUVVsRExFdEJRVXRETEVkQlFVd3NRMEZCVTBnc1IwRkJWQ3hEUVVST08wRkJRVUVzVlVGRlJVa3NTVUZCU1VZc1MwRkJTMGNzUjBGQlRDeERRVUZUVEN4SFFVRlVMRU5CUms0N1FVRkhRV1FzVlVGQlNVd3NSMEZCU2l4SFFVRlZVeXhMUVVGTFl5eERRVUZNTEVkQlFWTmlMRXRCUVV0VkxFTkJRWGhDTzBGQlEwRm1MRlZCUVVsS0xFZEJRVW9zUjBGQlZVOHNTMEZCUzJVc1EwRkJUQ3hIUVVGVFdpeExRVUZMVXl4RFFVRjRRanRCUVVOQlppeFZRVUZKU0N4SFFVRktMRWRCUVZWUExFdEJRVXNzUTBGQlExY3NRMEZCVGl4SFFVRlZWaXhMUVVGTFlTeERRVUY2UWp0QlFVTkJiRUlzVlVGQlNVWXNSMEZCU2l4SFFVRlZTeXhMUVVGTExFTkJRVU5aTEVOQlFVNHNSMEZCVlZRc1MwRkJTMWtzUTBGQmVrSTdRVUZEUVN4aFFVRlBiRUlzUjBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenN3UWtGUllVRXNSeXhGUVVGTFJDeERMRVZCUVVkeFFpeERMRVZCUVVjN1FVRkRkRUlzVlVGQlNXaENMRXRCUVV0TUxFVkJRVVZLTEVkQlFWZzdRVUZCUVN4VlFVRm5RbEVzUzBGQlMwb3NSVUZCUlVnc1IwRkJka0k3UVVGQlFTeFZRVUUwUWxNc1MwRkJTMDRzUlVGQlJVWXNSMEZCYmtNN1FVRkJRU3hWUVVGM1ExTXNTMEZCUzFBc1JVRkJSVVFzUjBGQkwwTTdRVUZCUVN4VlFVTkZkVUlzUzBGQlMwUXNSVUZCUlVVc1EwRkVWRHRCUVVGQkxGVkJRMWxETEV0QlFVdElMRVZCUVVWSkxFTkJSRzVDTzBGQlJVRjRRaXhWUVVGSlRDeEhRVUZLTEVkQlFWVlRMRXRCUVV0cFFpeEZRVUZtTzBGQlEwRnlRaXhWUVVGSlNpeEhRVUZLTEVkQlFWVlBMRXRCUVV0clFpeEZRVUZtTzBGQlEwRnlRaXhWUVVGSlNDeEhRVUZLTEVkQlFWVlJMRXRCUVV0clFpeEZRVUZtTzBGQlEwRjJRaXhWUVVGSlJpeEhRVUZLTEVkQlFWVlJMRXRCUVV0cFFpeEZRVUZtTzBGQlEwRXNZVUZCVDNaQ0xFZEJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3T3pzN096czdhVU5CVjI5Q1FTeEhMRVZCUVV0akxFY3NSVUZCU3p0QlFVTTFRaXhWUVVGSlF5eEpRVUZKUXl4TFFVRkxReXhIUVVGTUxFTkJRVk5JTEVkQlFWUXNRMEZCVWp0QlFVRkJMRlZCUTBWSkxFbEJRVWxHTEV0QlFVdEhMRWRCUVV3c1EwRkJVMHdzUjBGQlZDeERRVVJPTzBGQlJVRmtMRlZCUVVsTUxFZEJRVW9zUjBGQlZYVkNMRU5CUVZZN1FVRkRRV3hDTEZWQlFVbEtMRWRCUVVvc1IwRkJWVzFDTEVOQlFWWTdRVUZEUVdZc1ZVRkJTVWdzUjBGQlNpeEhRVUZWTEVOQlFVTnJRaXhEUVVGWU8wRkJRMEZtTEZWQlFVbEdMRWRCUVVvc1IwRkJWVzlDTEVOQlFWWTdRVUZEUVN4aFFVRlBiRUlzUjBGQlVEdEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPenM3T3p0blEwRlhiVUpCTEVjc1JVRkJTMjlDTEVNc1JVRkJSenRCUVVONlFuQkNMRlZCUVVsTUxFZEJRVW9zUjBGQlZYbENMRVZCUVVWRkxFTkJRVm83UVVGRFFYUkNMRlZCUVVsS0xFZEJRVW9zUjBGQlZTeERRVUZXTzBGQlEwRkpMRlZCUVVsSUxFZEJRVW9zUjBGQlZTeERRVUZXTzBGQlEwRkhMRlZCUVVsR0xFZEJRVW9zUjBGQlZYTkNMRVZCUVVWSkxFTkJRVm83UVVGRFFTeGhRVUZQZUVJc1IwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdPenM3ZDBKQlRWZEVMRU1zUlVGQlJ6dEJRVU5hTEhWQ1FVRmxRU3hGUVVGRlNpeEhRVUZxUWl4VlFVRjVRa2tzUlVGQlJVZ3NSMEZCTTBJc1ZVRkJiVU5ITEVWQlFVVkdMRWRCUVhKRExGVkJRVFpEUlN4RlFVRkZSQ3hIUVVFdlF6dEJRVU5FT3p0QlFVVkVPenM3T3pzN096czdPekJDUVU5aFJTeEhMRVZCUVV0NVFpeERMRVZCUVVjN1FVRkRia0o2UWl4VlFVRkpMRU5CUVVvc1NVRkJVM2xDTEVWQlFVVTVRaXhIUVVGWU8wRkJRMEZMTEZWQlFVa3NRMEZCU2l4SlFVRlRlVUlzUlVGQlJUZENMRWRCUVZnN1FVRkRRVWtzVlVGQlNTeERRVUZLTEVsQlFWTjVRaXhGUVVGRk5VSXNSMEZCV0R0QlFVTkJSeXhWUVVGSkxFTkJRVW9zU1VGQlUzbENMRVZCUVVVelFpeEhRVUZZT3p0QlFVVkJMR0ZCUVU5RkxFZEJRVkE3UVVGRFJEczdRVUZGUkRzN096czdPenM3TzNsQ1FVMVpSQ3hETEVWQlFVYzdRVUZEWWl4aFFVRlJhVUlzUzBGQlMxVXNTVUZCVEN4RFFVRlZWaXhMUVVGTFZ5eEhRVUZNTEVOQlFWTTFRaXhGUVVGRlNpeEhRVUZZTEVWQlFXZENMRU5CUVdoQ0xFbEJRWEZDY1VJc1MwRkJTMWNzUjBGQlRDeERRVUZUTlVJc1JVRkJSVWdzUjBGQldDeEZRVUZuUWl4RFFVRm9RaXhEUVVGeVFpeEhRVUV3UTI5Q0xFdEJRVXRYTEVkQlFVd3NRMEZCVXpWQ0xFVkJRVVZHTEVkQlFWZ3NSVUZCWjBJc1EwRkJhRUlzUTBGQk1VTXNSMEZCSzBSdFFpeExRVUZMVnl4SFFVRk1MRU5CUVZNMVFpeEZRVUZGUkN4SFFVRllMRVZCUVdkQ0xFTkJRV2hDTEVOQlFYcEZMRU5CUVZJN1FVRkRSRHM3UVVGRlJEczdPenM3T3pzN096dDNRa0ZQVnpoQ0xFTXNSVUZCUjBNc1F5eEZRVUZIUXl4RExFVkJRVWN2UWl4RExFVkJRVWM3UVVGRGNrSTJRaXhSUVVGRkwwSXNSMEZCUml4SFFVRlJSU3hGUVVGRlJpeEhRVUZHTEVkQlFWRkZMRVZCUVVWS0xFZEJRV3hDTzBGQlEwRnRReXhSUVVGRmJrTXNSMEZCUml4SFFVRlJTU3hGUVVGRlNpeEhRVUZXTzBGQlEwRnRReXhSUVVGRmJFTXNSMEZCUml4SFFVRlJSeXhGUVVGRlNDeEhRVUZXTzBGQlEwRnJReXhSUVVGRmFFTXNSMEZCUml4SFFVRlJReXhGUVVGRlJDeEhRVUZHTEVkQlFWRTRRaXhGUVVGRkwwSXNSMEZCUml4SFFVRlJhVU1zUlVGQlJXeERMRWRCUVRGQ08wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdPM2RDUVZGWFNTeEhMRVZCUVV0RUxFTXNSVUZCUjFNc1F5eEZRVUZITzBGQlEzQkNVaXhWUVVGSlRDeEhRVUZLTEVkQlFWVkpMRVZCUVVWS0xFZEJRVVlzUjBGQlVXRXNSVUZCUldJc1IwRkJjRUk3UVVGRFFVc3NWVUZCU1Vvc1IwRkJTaXhIUVVGVlJ5eEZRVUZGU0N4SFFVRkdMRWRCUVZGWkxFVkJRVVZhTEVkQlFYQkNPMEZCUTBGSkxGVkJRVWxJTEVkQlFVb3NSMEZCVlVVc1JVRkJSVVlzUjBGQlJpeEhRVUZSVnl4RlFVRkZXQ3hIUVVGd1FqdEJRVU5CUnl4VlFVRkpSaXhIUVVGS0xFZEJRVlZETEVWQlFVVkVMRWRCUVVZc1IwRkJVVlVzUlVGQlJWWXNSMEZCY0VJN1FVRkRRU3hoUVVGUFJTeEhRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096WkNRVkZuUWtFc1J5eEZRVUZMUkN4RExFVkJRVWRUTEVNc1JVRkJSenRCUVVONlFsSXNWVUZCU1V3c1IwRkJTaXhIUVVGVlNTeEZRVUZGU2l4SFFVRkdMRWRCUVZGaExFVkJRVVZpTEVkQlFYQkNPMEZCUTBGTExGVkJRVWxLTEVkQlFVb3NSMEZCVlVjc1JVRkJSVWdzUjBGQlJpeEhRVUZSV1N4RlFVRkZXaXhIUVVGd1FqdEJRVU5CU1N4VlFVRkpTQ3hIUVVGS0xFZEJRVlZGTEVWQlFVVkdMRWRCUVVZc1IwRkJVVmNzUlVGQlJWZ3NSMEZCY0VJN1FVRkRRVWNzVlVGQlNVWXNSMEZCU2l4SFFVRlZReXhGUVVGRlJDeEhRVUZHTEVkQlFWRlZMRVZCUVVWV0xFZEJRWEJDTzBGQlEwRXNZVUZCVDBVc1IwRkJVRHRCUVVORU96dEJRVVZFT3pzN096czdkMEpCUjFkQkxFY3NSVUZCUzBRc1F5eEZRVUZIVXl4RExFVkJRVWM3UVVGRGNFSXNZVUZCVDJRc1MwRkJTM0ZETEZGQlFVd3NRMEZCWXk5Q0xFZEJRV1FzUlVGQmJVSkVMRU5CUVc1Q0xFVkJRWE5DVXl4RFFVRjBRaXhEUVVGUU8wRkJRMFE3TzBGQlJVUTdPenM3T3pzN096czdaME5CVDIxQ1ZDeERMRVZCUVVkVExFTXNSVUZCUnp0QlFVTjJRaXhoUVVGUFZDeEZRVUZGU2l4SFFVRkdMRXRCUVZWaExFVkJRVVZpTEVkQlFWb3NTVUZCYlVKSkxFVkJRVVZJTEVkQlFVWXNTMEZCVlZrc1JVRkJSVm9zUjBGQkwwSXNTVUZCYzBOSExFVkJRVVZHTEVkQlFVWXNTMEZCVlZjc1JVRkJSVmdzUjBGQmJFUXNTVUZCZVVSRkxFVkJRVVZFTEVkQlFVWXNTMEZCVlZVc1JVRkJSVllzUjBGQk5VVTdRVUZEUkRzN1FVRkZSRHM3T3pzN096czdPenN5UWtGUFkwTXNReXhGUVVGSFV5eERMRVZCUVVjN1FVRkRiRUlzVlVGQlNVb3NTMEZCUzB3c1JVRkJSVW9zUjBGQldEdEJRVUZCTEZWQlFXZENVU3hMUVVGTFNpeEZRVUZGU0N4SFFVRjJRanRCUVVGQkxGVkJRVFJDVXl4TFFVRkxUaXhGUVVGRlJpeEhRVUZ1UXp0QlFVRkJMRlZCUVhkRFV5eExRVUZMVUN4RlFVRkZSQ3hIUVVFdlF6dEJRVU5CTEZWQlFVbFhMRXRCUVV0RUxFVkJRVVZpTEVkQlFWZzdRVUZCUVN4VlFVRm5RbVVzUzBGQlMwWXNSVUZCUlZvc1IwRkJka0k3UVVGQlFTeFZRVUUwUW1Vc1MwRkJTMGdzUlVGQlJWZ3NSMEZCYmtNN1FVRkJRU3hWUVVGM1EyVXNTMEZCUzBvc1JVRkJSVllzUjBGQkwwTTdRVUZEUVN4aFFVTkZhMElzUzBGQlMyZENMRWRCUVV3c1EwRkJVelZDTEV0QlFVdExMRVZCUVdRc1MwRkJjVUlzYVVKQlFWVlBMRXRCUVV0cFFpeEhRVUZNTEVOQlFWTXNSMEZCVkN4RlFVRmpha0lzUzBGQlMyZENMRWRCUVV3c1EwRkJVelZDTEVWQlFWUXNRMEZCWkN4RlFVRTBRbGtzUzBGQlMyZENMRWRCUVV3c1EwRkJVM1pDTEVWQlFWUXNRMEZCTlVJc1EwRkJMMElzU1VGRFFVOHNTMEZCUzJkQ0xFZEJRVXdzUTBGQlV6ZENMRXRCUVV0UExFVkJRV1FzUzBGQmNVSXNhVUpCUVZWTkxFdEJRVXRwUWl4SFFVRk1MRU5CUVZNc1IwRkJWQ3hGUVVGamFrSXNTMEZCUzJkQ0xFZEJRVXdzUTBGQlV6ZENMRVZCUVZRc1EwRkJaQ3hGUVVFMFFtRXNTMEZCUzJkQ0xFZEJRVXdzUTBGQlUzUkNMRVZCUVZRc1EwRkJOVUlzUTBGRUwwSXNTVUZGUVUwc1MwRkJTMmRDTEVkQlFVd3NRMEZCVXpOQ0xFdEJRVXROTEVWQlFXUXNTMEZCY1VJc2FVSkJRVlZMTEV0QlFVdHBRaXhIUVVGTUxFTkJRVk1zUjBGQlZDeEZRVUZqYWtJc1MwRkJTMmRDTEVkQlFVd3NRMEZCVXpOQ0xFVkJRVlFzUTBGQlpDeEZRVUUwUWxjc1MwRkJTMmRDTEVkQlFVd3NRMEZCVTNKQ0xFVkJRVlFzUTBGQk5VSXNRMEZHTDBJc1NVRkhRVXNzUzBGQlMyZENMRWRCUVV3c1EwRkJVekZDTEV0QlFVdE5MRVZCUVdRc1MwRkJjVUlzYVVKQlFWVkpMRXRCUVV0cFFpeEhRVUZNTEVOQlFWTXNSMEZCVkN4RlFVRmpha0lzUzBGQlMyZENMRWRCUVV3c1EwRkJVekZDTEVWQlFWUXNRMEZCWkN4RlFVRTBRbFVzUzBGQlMyZENMRWRCUVV3c1EwRkJVM0JDTEVWQlFWUXNRMEZCTlVJc1EwRktha003UVVGTlJEczdRVUZGUkRzN096czdPenM3T3pzN2JVTkJVWE5DV2l4SExFVkJRVXRFTEVNc1JVRkJSMU1zUXl4RlFVRkhPMEZCUXk5Q1VpeFZRVUZKVEN4SFFVRktMRWRCUVZWSkxFVkJRVVZLTEVkQlFVWXNSMEZCVVdFc1EwRkJiRUk3UVVGRFFWSXNWVUZCU1Vvc1IwRkJTaXhIUVVGVlJ5eEZRVUZGU0N4SFFVRkdMRWRCUVZGWkxFTkJRV3hDTzBGQlEwRlNMRlZCUVVsSUxFZEJRVW9zUjBGQlZVVXNSVUZCUlVZc1IwRkJSaXhIUVVGUlZ5eERRVUZzUWp0QlFVTkJVaXhWUVVGSlJpeEhRVUZLTEVkQlFWVkRMRVZCUVVWRUxFZEJRVVlzUjBGQlVWVXNRMEZCYkVJN1FVRkRRU3hoUVVGUFVpeEhRVUZRTzBGQlEwUTdPMEZCUlVRN096czdPenM3T3pzN096dDVRMEZUTkVKQkxFY3NSVUZCUzBRc1F5eEZRVUZIVXl4RExFVkJRVWN3UWl4TExFVkJRVTg3UVVGRE5VTnNReXhWUVVGSlRDeEhRVUZLTEVkQlFWVkpMRVZCUVVWS0xFZEJRVVlzUjBGQlUyRXNSVUZCUldJc1IwRkJSaXhIUVVGUmRVTXNTMEZCTTBJN1FVRkRRV3hETEZWQlFVbEtMRWRCUVVvc1IwRkJWVWNzUlVGQlJVZ3NSMEZCUml4SFFVRlRXU3hGUVVGRldpeEhRVUZHTEVkQlFWRnpReXhMUVVFelFqdEJRVU5CYkVNc1ZVRkJTVWdzUjBGQlNpeEhRVUZWUlN4RlFVRkZSaXhIUVVGR0xFZEJRVk5YTEVWQlFVVllMRWRCUVVZc1IwRkJVWEZETEV0QlFUTkNPMEZCUTBGc1F5eFZRVUZKUml4SFFVRktMRWRCUVZWRExFVkJRVVZFTEVkQlFVWXNSMEZCVTFVc1JVRkJSVllzUjBGQlJpeEhRVUZSYjBNc1MwRkJNMEk3UVVGRFFTeGhRVUZQYkVNc1IwRkJVRHRCUVVORU96czdPenM3YTBKQlIxbE9MRWtpTENKbWFXeGxJam9pYldGME1pNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSW1sdGNHOXlkQ0I3SUVWUVUwbE1UMDRnZlNCbWNtOXRJQ2N1TDNWMGFXeHpKenRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUJOWVhSb1pXMWhkR2xqWVd3Z01uZ3lJRzFoZEhKcGVDNWNjbHh1SUNvdlhISmNibU5zWVhOeklHMWhkRElnZTF4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCdFlYUnlhWGdzSUhkcGRHZ2daV3hsYldWdWRITWdjM0JsWTJsbWFXVmtJSE5sY0dGeVlYUmxiSGt1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdiVEF3SUMwZ1ZtRnNkV1VnWVhOemFXZHVaV1FnZEc4Z1pXeGxiV1Z1ZENCaGRDQmpiMngxYlc0Z01DQnliM2NnTUM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYlRBeElDMGdWbUZzZFdVZ1lYTnphV2R1WldRZ2RHOGdaV3hsYldWdWRDQmhkQ0JqYjJ4MWJXNGdNQ0J5YjNjZ01TNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2JUQXlJQzBnVm1Gc2RXVWdZWE56YVdkdVpXUWdkRzhnWld4bGJXVnVkQ0JoZENCamIyeDFiVzRnTVNCeWIzY2dNQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdiVEF6SUMwZ1ZtRnNkV1VnWVhOemFXZHVaV1FnZEc4Z1pXeGxiV1Z1ZENCaGRDQmpiMngxYlc0Z01TQnliM2NnTVM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0JqYjI1emRISjFZM1J2Y2lodE1EQWdQU0F4TENCdE1ERWdQU0F3TENCdE1ESWdQU0F3TENCdE1ETWdQU0F4S1NCN1hISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRlJvWlNCbGJHVnRaVzUwSUdGMElHTnZiSFZ0YmlBd0lISnZkeUF3TGx4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdJQ0FxSUNvdlhISmNiaUFnSUNCMGFHbHpMbTB3TUNBOUlHMHdNRHRjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRlJvWlNCbGJHVnRaVzUwSUdGMElHTnZiSFZ0YmlBd0lISnZkeUF4TGx4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdJQ0FxSUNvdlhISmNiaUFnSUNCMGFHbHpMbTB3TVNBOUlHMHdNVHRjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRlJvWlNCbGJHVnRaVzUwSUdGMElHTnZiSFZ0YmlBeElISnZkeUF3TGx4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdJQ0FxSUNvdlhISmNiaUFnSUNCMGFHbHpMbTB3TWlBOUlHMHdNanRjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJRlJvWlNCbGJHVnRaVzUwSUdGMElHTnZiSFZ0YmlBeElISnZkeUF4TGx4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTI1MWJXSmxjbjFjY2x4dUlDQWdJQ0FxSUNvdlhISmNiaUFnSUNCMGFHbHpMbTB3TXlBOUlHMHdNenRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOeVpXRjBaWE1nWVNCdFlYUnlhWGdzSUhkcGRHZ2daV3hsYldWdWRITWdjM0JsWTJsbWFXVmtJSE5sY0dGeVlYUmxiSGt1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdiVEF3SUMwZ1ZtRnNkV1VnWVhOemFXZHVaV1FnZEc4Z1pXeGxiV1Z1ZENCaGRDQmpiMngxYlc0Z01DQnliM2NnTUM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnYlRBeElDMGdWbUZzZFdVZ1lYTnphV2R1WldRZ2RHOGdaV3hsYldWdWRDQmhkQ0JqYjJ4MWJXNGdNQ0J5YjNjZ01TNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2JUQXlJQzBnVm1Gc2RXVWdZWE56YVdkdVpXUWdkRzhnWld4bGJXVnVkQ0JoZENCamIyeDFiVzRnTVNCeWIzY2dNQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdiVEF6SUMwZ1ZtRnNkV1VnWVhOemFXZHVaV1FnZEc4Z1pXeGxiV1Z1ZENCaGRDQmpiMngxYlc0Z01TQnliM2NnTVM1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JXRjBNbjBnVkdobElHNWxkMng1SUdOeVpXRjBaV1FnYldGMGNtbDRMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCamNtVmhkR1VvYlRBd0lEMGdNU3dnYlRBeElEMGdNQ3dnYlRBeUlEMGdNQ3dnYlRBeklEMGdNU2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJRzVsZHlCdFlYUXlLRzB3TUN3Z2JUQXhMQ0J0TURJc0lHMHdNeWs3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGJHOXVaU0JoSUcxaGRISnBlQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiV0YwTW4wZ1lTQXRJRTFoZEhKcGVDQjBieUJqYkc5dVpTNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiV0YwTW4wZ1ZHaGxJRzVsZDJ4NUlHTnlaV0YwWldRZ2JXRjBjbWw0TGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QmpiRzl1WlNoaEtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2JtVjNJRzFoZERJb1lTNXRNREFzSUdFdWJUQXhMQ0JoTG0wd01pd2dZUzV0TURNcE8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRMjl3ZVNCamIyNTBaVzUwSUc5bUlHRWdiV0YwY21sNElHbHVkRzhnWVc1dmRHaGxjaTVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiV0YwTW4wZ2IzVjBJQzBnVFdGMGNtbDRJSFJ2SUcxdlpHbG1hV1ZrTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YldGME1uMGdZU0F0SUZSb1pTQnpjR1ZqYVdacFpXUWdiV0YwY21sNExseHlYRzRnSUNBcUlFQnlaWFIxY201eklIdHRZWFF5ZlNCdmRYUXVYSEpjYmlBZ0lDb3ZYSEpjYmlBZ2MzUmhkR2xqSUdOdmNIa29iM1YwTENCaEtTQjdYSEpjYmlBZ0lDQnZkWFF1YlRBd0lEMGdZUzV0TURBN1hISmNiaUFnSUNCdmRYUXViVEF4SUQwZ1lTNXRNREU3WEhKY2JpQWdJQ0J2ZFhRdWJUQXlJRDBnWVM1dE1ESTdYSEpjYmlBZ0lDQnZkWFF1YlRBeklEMGdZUzV0TURNN1hISmNiaUFnSUNCeVpYUjFjbTRnYjNWME8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dVMlYwY3lCaElHMWhkSEpwZUNCaGN5QnBaR1Z1ZEdsMGVTQnRZWFJ5YVhndVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTIxaGRESjlJRzkxZENBdElFMWhkSEpwZUNCMGJ5QnRiMlJwWm1sbFpDNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiV0YwTW4wZ2IzVjBMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCcFpHVnVkR2wwZVNodmRYUXBJSHRjY2x4dUlDQWdJRzkxZEM1dE1EQWdQU0F4TzF4eVhHNGdJQ0FnYjNWMExtMHdNU0E5SURBN1hISmNiaUFnSUNCdmRYUXViVEF5SUQwZ01EdGNjbHh1SUNBZ0lHOTFkQzV0TURNZ1BTQXhPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZObGRITWdkR2hsSUdWc1pXMWxiblJ6SUc5bUlHRWdiV0YwY21sNElIUnZJSFJvWlNCbmFYWmxiaUIyWVd4MVpYTXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyMWhkREo5SUc5MWRDQXRJRlJvWlNCdFlYUnlhWGdnZEc4Z2JXOWthV1pwWldRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUcwd01DQXRJRlpoYkhWbElHRnpjMmxuYm1Wa0lIUnZJR1ZzWlcxbGJuUWdZWFFnWTI5c2RXMXVJREFnY205M0lEQXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHMHdNU0F0SUZaaGJIVmxJR0Z6YzJsbmJtVmtJSFJ2SUdWc1pXMWxiblFnWVhRZ1kyOXNkVzF1SURBZ2NtOTNJREV1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRzB4TUNBdElGWmhiSFZsSUdGemMybG5ibVZrSUhSdklHVnNaVzFsYm5RZ1lYUWdZMjlzZFcxdUlERWdjbTkzSURBdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUcweE1TQXRJRlpoYkhWbElHRnpjMmxuYm1Wa0lIUnZJR1ZzWlcxbGJuUWdZWFFnWTI5c2RXMXVJREVnY205M0lERXVYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjFoZERKOUlHOTFkQzVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ2MyVjBLRzkxZEN3Z2JUQXdMQ0J0TURFc0lHMHhNQ3dnYlRFeEtTQjdYSEpjYmlBZ0lDQnZkWFF1YlRBd0lEMGdiVEF3TzF4eVhHNGdJQ0FnYjNWMExtMHdNU0E5SUcwd01UdGNjbHh1SUNBZ0lHOTFkQzV0TURJZ1BTQnRNVEE3WEhKY2JpQWdJQ0J2ZFhRdWJUQXpJRDBnYlRFeE8xeHlYRzRnSUNBZ2NtVjBkWEp1SUc5MWREdGNjbHh1SUNCOVhISmNibHh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCVWNtRnVjM0J2YzJWeklHRWdiV0YwY21sNExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dFlYUXlmU0J2ZFhRZ0xTQk5ZWFJ5YVhnZ2RHOGdjM1J2Y21VZ2NtVnpkV3gwTGx4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YldGME1uMGdZU0F0SUUxaGRISnBlQ0IwYnlCMGNtRnVjM0J2YzJVdVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyMWhkREo5SUc5MWRDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nZEhKaGJuTndiM05sS0c5MWRDd2dZU2tnZTF4eVhHNGdJQ0FnTHk4Z1NXWWdkMlVnWVhKbElIUnlZVzV6Y0c5emFXNW5JRzkxY25ObGJIWmxjeUIzWlNCallXNGdjMnRwY0NCaElHWmxkeUJ6ZEdWd2N5QmlkWFFnYUdGMlpTQjBieUJqWVdOb1pTQnpiMjFsSUhaaGJIVmxjMXh5WEc0Z0lDQWdhV1lnS0c5MWRDQTlQVDBnWVNrZ2UxeHlYRzRnSUNBZ0lDQnNaWFFnWVRFZ1BTQmhMbTB3TVR0Y2NseHVJQ0FnSUNBZ2IzVjBMbTB3TVNBOUlHRXViVEF5TzF4eVhHNGdJQ0FnSUNCdmRYUXViVEF5SUQwZ1lURTdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQnZkWFF1YlRBd0lEMGdZUzV0TURBN1hISmNiaUFnSUNBZ0lHOTFkQzV0TURFZ1BTQmhMbTB3TWp0Y2NseHVJQ0FnSUNBZ2IzVjBMbTB3TWlBOUlHRXViVEF4TzF4eVhHNGdJQ0FnSUNCdmRYUXViVEF6SUQwZ1lTNXRNRE03WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc5MWREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRWx1ZG1WeWRITWdZU0J0WVhSeWFYZ3VYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyMWhkREo5SUc5MWRDQXRJRTFoZEhKcGVDQjBieUJ6ZEc5eVpTQnlaWE4xYkhRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dFlYUXlmU0JoSUMwZ1RXRjBjbWw0SUhSdklHbHVkbVZ5ZEM1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JXRjBNbjBnYjNWMExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJwYm5abGNuUW9iM1YwTENCaEtTQjdYSEpjYmlBZ0lDQnNaWFFnWVRBZ1BTQmhMbTB3TUN3Z1lURWdQU0JoTG0wd01Td2dZVElnUFNCaExtMHdNaXdnWVRNZ1BTQmhMbTB3TXp0Y2NseHVYSEpjYmlBZ0lDQXZMeUJEWVd4amRXeGhkR1VnZEdobElHUmxkR1Z5YldsdVlXNTBYSEpjYmlBZ0lDQnNaWFFnWkdWMElEMGdZVEFnS2lCaE15QXRJR0V5SUNvZ1lURTdYSEpjYmx4eVhHNGdJQ0FnYVdZZ0tDRmtaWFFwSUh0Y2NseHVJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQmtaWFFnUFNBeExqQWdMeUJrWlhRN1hISmNibHh5WEc0Z0lDQWdiM1YwTG0wd01DQTlJR0V6SUNvZ1pHVjBPMXh5WEc0Z0lDQWdiM1YwTG0wd01TQTlJQzFoTVNBcUlHUmxkRHRjY2x4dUlDQWdJRzkxZEM1dE1ESWdQU0F0WVRJZ0tpQmtaWFE3WEhKY2JpQWdJQ0J2ZFhRdWJUQXpJRDBnWVRBZ0tpQmtaWFE3WEhKY2JseHlYRzRnSUNBZ2NtVjBkWEp1SUc5MWREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRU5oYkdOMWJHRjBaWE1nZEdobElHRmthblZuWVhSbElHOW1JR0VnYldGMGNtbDRMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHRZWFF5ZlNCdmRYUWdMU0JOWVhSeWFYZ2dkRzhnYzNSdmNtVWdjbVZ6ZFd4MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JXRjBNbjBnWVNBdElFMWhkSEpwZUNCMGJ5QmpZV3hqZFd4aGRHVXVYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMjFoZERKOUlHOTFkQzVjY2x4dUlDQWdLaTljY2x4dUlDQnpkR0YwYVdNZ1lXUnFiMmx1ZENodmRYUXNJR0VwSUh0Y2NseHVJQ0FnSUM4dklFTmhZMmhwYm1jZ2RHaHBjeUIyWVd4MVpTQnBjeUJ1WlhOelpXTmhjbmtnYVdZZ2IzVjBJRDA5SUdGY2NseHVJQ0FnSUd4bGRDQmhNQ0E5SUdFdWJUQXdPMXh5WEc0Z0lDQWdiM1YwTG0wd01DQTlJR0V1YlRBek8xeHlYRzRnSUNBZ2IzVjBMbTB3TVNBOUlDMWhMbTB3TVR0Y2NseHVJQ0FnSUc5MWRDNXRNRElnUFNBdFlTNXRNREk3WEhKY2JpQWdJQ0J2ZFhRdWJUQXpJRDBnWVRBN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVOaGJHTjFiR0YwWlhNZ2RHaGxJR1JsZEdWeWJXbHVZVzUwSUc5bUlHRWdiV0YwY21sNExseHlYRzRnSUNBcVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dFlYUXlmU0JoSUMwZ1RXRjBjbWw0SUhSdklHTmhiR04xYkdGMFpTNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdUblZ0WW1WeWZTQkVaWFJsY20xcGJtRnVkQ0J2WmlCaExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJrWlhSbGNtMXBibUZ1ZENoaEtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1lTNXRNREFnS2lCaExtMHdNeUF0SUdFdWJUQXlJQ29nWVM1dE1ERTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJOZFd4MGFYQnNlU0IwZDI4Z2JXRjBjbWxqWlhNZ1pYaHdiR2xqYVhSc2VTNWNjbHh1SUNBZ0tseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JXRjBNbjBnYjNWMElDMGdUV0YwY21sNElIUnZJSE4wYjNKbElISmxjM1ZzZEM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTIxaGRESjlJR0VnTFNCVWFHVWdabWx5YzNRZ2IzQmxjbUZ1WkM1Y2NseHVJQ0FnS2lCQWNHRnlZVzBnZTIxaGRESjlJR0lnTFNCVWFHVWdjMlZqYjI1a0lHOXdaWEpoYm1RdVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyMWhkREo5SUc5MWRDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYlhWc2RHbHdiSGtvYjNWMExDQmhMQ0JpS1NCN1hISmNiaUFnSUNCc1pYUWdZVEFnUFNCaExtMHdNQ3dnWVRFZ1BTQmhMbTB3TVN3Z1lUSWdQU0JoTG0wd01pd2dZVE1nUFNCaExtMHdNenRjY2x4dUlDQWdJR3hsZENCaU1DQTlJR0l1YlRBd0xDQmlNU0E5SUdJdWJUQXhMQ0JpTWlBOUlHSXViVEF5TENCaU15QTlJR0l1YlRBek8xeHlYRzRnSUNBZ2IzVjBMbTB3TUNBOUlHRXdJQ29nWWpBZ0t5QmhNaUFxSUdJeE8xeHlYRzRnSUNBZ2IzVjBMbTB3TVNBOUlHRXhJQ29nWWpBZ0t5QmhNeUFxSUdJeE8xeHlYRzRnSUNBZ2IzVjBMbTB3TWlBOUlHRXdJQ29nWWpJZ0t5QmhNaUFxSUdJek8xeHlYRzRnSUNBZ2IzVjBMbTB3TXlBOUlHRXhJQ29nWWpJZ0t5QmhNeUFxSUdJek8xeHlYRzRnSUNBZ2NtVjBkWEp1SUc5MWREdGNjbHh1SUNCOVhISmNibHh5WEc0Z0lDOHFLbHh5WEc0Z0lDQXFJRUZzYVdGeklHOW1JSHRBYkdsdWF5QnRZWFF5TG0xMWJIUnBjR3g1ZlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdiWFZzS0c5MWRDd2dZU3dnWWlrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUcxaGRESXViWFZzZEdsd2JIa29iM1YwTENCaExDQmlLVHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKdmRHRjBaWE1nWVNCdFlYUnlhWGdnWW5rZ2RHaGxJR2RwZG1WdUlHRnVaMnhsTGx4eVhHNGdJQ0FxWEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR0WVhReWZTQnZkWFFnTFNCTllYUnlhWGdnZEc4Z2MzUnZjbVVnY21WemRXeDBMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiV0YwTW4wZ1lTQXRJRTFoZEhKcGVDQjBieUJ5YjNSaGRHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlISmhaQ0F0SUZSb1pTQnliM1JoZEdsdmJpQmhibWRzWlM1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JXRjBNbjBnYjNWMFhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJSEp2ZEdGMFpTaHZkWFFzSUdFc0lISmhaQ2tnZTF4eVhHNGdJQ0FnYkdWMElHRXdJRDBnWVM1dE1EQXNJR0V4SUQwZ1lTNXRNREVzSUdFeUlEMGdZUzV0TURJc0lHRXpJRDBnWVM1dE1ETXNYSEpjYmlBZ0lDQWdJSE1nUFNCTllYUm9Mbk5wYmloeVlXUXBMRnh5WEc0Z0lDQWdJQ0JqSUQwZ1RXRjBhQzVqYjNNb2NtRmtLVHRjY2x4dUlDQWdJRzkxZEM1dE1EQWdQU0JoTUNBcUlHTWdLeUJoTWlBcUlITTdYSEpjYmlBZ0lDQnZkWFF1YlRBeElEMGdZVEVnS2lCaklDc2dZVE1nS2lCek8xeHlYRzRnSUNBZ2IzVjBMbTB3TWlBOUlHRXdJQ29nTFhNZ0t5QmhNaUFxSUdNN1hISmNiaUFnSUNCdmRYUXViVEF6SUQwZ1lURWdLaUF0Y3lBcklHRXpJQ29nWXp0Y2NseHVJQ0FnSUhKbGRIVnliaUJ2ZFhRN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRZMkZzWlhNZ2RHaGxJRzFoZEhKcGVDQm5hWFpsYmlCaWVTQmhJSE5qWVd4bElIWmxZM1J2Y2k1Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YldGME1uMGdiM1YwSUMwZ1RXRjBjbWw0SUhSdklITjBiM0psSUhKbGMzVnNkQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjFoZERKOUlHRWdMU0JOWVhSeWFYZ2dkRzhnYzJOaGJHVXVYSEpjYmlBZ0lDb2dRSEJoY21GdElIdDJaV015ZlNCMklDMGdWR2hsSUhOallXeGxJSFpsWTNSdmNpNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiV0YwTW4wZ2IzVjBYSEpjYmlBZ0lDb3FMMXh5WEc0Z0lITjBZWFJwWXlCelkyRnNaU2h2ZFhRc0lHRXNJSFlwSUh0Y2NseHVJQ0FnSUd4bGRDQmhNQ0E5SUdFdWJUQXdMQ0JoTVNBOUlHRXViVEF4TENCaE1pQTlJR0V1YlRBeUxDQmhNeUE5SUdFdWJUQXpMRnh5WEc0Z0lDQWdJQ0IyTUNBOUlIWXVlQ3dnZGpFZ1BTQjJMbms3WEhKY2JpQWdJQ0J2ZFhRdWJUQXdJRDBnWVRBZ0tpQjJNRHRjY2x4dUlDQWdJRzkxZEM1dE1ERWdQU0JoTVNBcUlIWXdPMXh5WEc0Z0lDQWdiM1YwTG0wd01pQTlJR0V5SUNvZ2RqRTdYSEpjYmlBZ0lDQnZkWFF1YlRBeklEMGdZVE1nS2lCMk1UdGNjbHh1SUNBZ0lISmxkSFZ5YmlCdmRYUTdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJEY21WaGRHVnpJR0VnYldGMGNtbDRJR1p5YjIwZ1lTQm5hWFpsYmlCaGJtZHNaUzVjY2x4dUlDQWdLaUJVYUdseklHbHpJR1Z4ZFdsMllXeGxiblFnZEc4Z0tHSjFkQ0J0ZFdOb0lHWmhjM1JsY2lCMGFHRnVLVHBjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJQ0FnSUNCdFlYUXlMbk5sZENoa1pYTjBMQ0F4TENBd0xDQXdMQ0F4S1R0Y2NseHVJQ0FnS2lBZ0lDQWdiV0YwTWk1eWIzUmhkR1VvWkdWemRDd2daR1Z6ZEN3Z2NtRmtLVHRjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiV0YwTW4wZ2IzVjBJQzBnVFdGMGNtbDRJSFJ2SUhOMGIzSmxJSEpsYzNWc2RDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2NtRmtJQzBnVkdobElISnZkR0YwYVc5dUlHRnVaMnhsTGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0dFlYUXlmU0J2ZFhRdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR1p5YjIxU2IzUmhkR2x2YmlodmRYUXNJSEpoWkNrZ2UxeHlYRzRnSUNBZ2JHVjBJSE1nUFNCTllYUm9Mbk5wYmloeVlXUXBMRnh5WEc0Z0lDQWdJQ0JqSUQwZ1RXRjBhQzVqYjNNb2NtRmtLVHRjY2x4dUlDQWdJRzkxZEM1dE1EQWdQU0JqTzF4eVhHNGdJQ0FnYjNWMExtMHdNU0E5SUhNN1hISmNiaUFnSUNCdmRYUXViVEF5SUQwZ0xYTTdYSEpjYmlBZ0lDQnZkWFF1YlRBeklEMGdZenRjY2x4dUlDQWdJSEpsZEhWeWJpQnZkWFE3WEhKY2JpQWdmVnh5WEc1Y2NseHVJQ0F2S2lwY2NseHVJQ0FnS2lCRGNtVmhkR1Z6SUdFZ2JXRjBjbWw0SUdaeWIyMGdZU0J6WTJGc1pTQjJaV04wYjNJdVhISmNiaUFnSUNvZ1ZHaHBjeUJwY3lCbGNYVnBkbUZzWlc1MElIUnZJQ2hpZFhRZ2JYVmphQ0JtWVhOMFpYSWdkR2hoYmlrNlhISmNiaUFnSUNwY2NseHVJQ0FnS2lBZ0lDQWdiV0YwTWk1elpYUW9aR1Z6ZEN3Z01Td2dNQ3dnTUN3Z01TazdYSEpjYmlBZ0lDb2dJQ0FnSUcxaGRESXVjMk5oYkdVb1pHVnpkQ3dnWkdWemRDd2dkbVZqS1R0Y2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YldGME1uMGdiM1YwSUMwZ1RXRjBjbWw0SUhSdklITjBiM0psSUhKbGMzVnNkQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlM1psWXpKOUlIWWdMU0JUWTJGc1pTQjJaV04wYjNJdVhISmNiaUFnSUNvZ1FISmxkSFZ5Ym5NZ2UyMWhkREo5SUc5MWRDNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nWm5KdmJWTmpZV3hwYm1jb2IzVjBMQ0IyS1NCN1hISmNiaUFnSUNCdmRYUXViVEF3SUQwZ2RpNTRPMXh5WEc0Z0lDQWdiM1YwTG0wd01TQTlJREE3WEhKY2JpQWdJQ0J2ZFhRdWJUQXlJRDBnTUR0Y2NseHVJQ0FnSUc5MWRDNXRNRE1nUFNCMkxuazdYSEpjYmlBZ0lDQnlaWFIxY200Z2IzVjBPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WMGRYSnVjeUJoSUhOMGNtbHVaeUJ5WlhCeVpYTmxiblJoZEdsdmJpQnZaaUJoSUcxaGRISnBlQzVjY2x4dUlDQWdLbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiV0YwTW4wZ1lTQXRJRlJvWlNCdFlYUnlhWGd1WEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTFOMGNtbHVaMzBnVTNSeWFXNW5JSEpsY0hKbGMyVnVkR0YwYVc5dUlHOW1JSFJvYVhNZ2JXRjBjbWw0TGx4eVhHNGdJQ0FxTDF4eVhHNGdJSE4wWVhScFl5QnpkSElvWVNrZ2UxeHlYRzRnSUNBZ2NtVjBkWEp1SUdCdFlYUXlLQ1I3WVM1dE1EQjlMQ0FrZTJFdWJUQXhmU3dnSkh0aExtMHdNbjBzSUNSN1lTNXRNRE45S1dBN1hISmNiaUFnZlZ4eVhHNWNjbHh1SUNBdktpcGNjbHh1SUNBZ0tpQlRkRzl5WlNCbGJHVnRaVzUwY3lCdlppQmhJRzFoZEhKcGVDQnBiblJ2SUdGeWNtRjVMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdGhjbkpoZVgwZ2IzVjBJQzBnUVhKeVlYa2dkRzhnYzNSdmNtVWdjbVZ6ZFd4MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JXRjBNbjBnYlNBdElGUm9aU0J0WVhSeWFYZ3VYSEpjYmlBZ0lDb2dRSEpsZEhWeWJuTWdlMEZ5Y21GNWZTQnZkWFF1WEhKY2JpQWdJQ292WEhKY2JpQWdjM1JoZEdsaklHRnljbUY1S0c5MWRDd2diU2tnZTF4eVhHNGdJQ0FnYjNWMFd6QmRJRDBnYlM1dE1EQTdYSEpjYmlBZ0lDQnZkWFJiTVYwZ1BTQnRMbTB3TVR0Y2NseHVJQ0FnSUc5MWRGc3lYU0E5SUcwdWJUQXlPMXh5WEc0Z0lDQWdiM1YwV3pOZElEMGdiUzV0TURNN1hISmNibHh5WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZKbGRIVnlibk1nUm5KdlltVnVhWFZ6SUc1dmNtMGdiMllnWVNCdFlYUnlhWGd1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjFoZERKOUlHRWdMU0JOWVhSeWFYZ2dkRzhnWTJGc1kzVnNZWFJsSUVaeWIySmxibWwxY3lCdWIzSnRJRzltTGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0T2RXMWlaWEo5SUMwZ1ZHaGxJR1p5YjJKbGJtbDFjeUJ1YjNKdExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJtY205aUtHRXBJSHRjY2x4dUlDQWdJSEpsZEhWeWJpQW9UV0YwYUM1emNYSjBLRTFoZEdndWNHOTNLR0V1YlRBd0xDQXlLU0FySUUxaGRHZ3VjRzkzS0dFdWJUQXhMQ0F5S1NBcklFMWhkR2d1Y0c5M0tHRXViVEF5TENBeUtTQXJJRTFoZEdndWNHOTNLR0V1YlRBekxDQXlLU2twTzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1VtVjBkWEp1Y3lCTUxDQkVJR0Z1WkNCVklHMWhkSEpwWTJWeklDaE1iM2RsY2lCMGNtbGhibWQxYkdGeUxDQkVhV0ZuYjI1aGJDQmhibVFnVlhCd1pYSWdkSEpwWVc1bmRXeGhjaWtnWW5rZ1ptRmpkRzl5YVhwcGJtY2dkR2hsSUdsdWNIVjBJRzFoZEhKcGVDNWNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyMWhkREo5SUV3Z0xTQlVhR1VnYkc5M1pYSWdkSEpwWVc1bmRXeGhjaUJ0WVhSeWFYZ3VYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHRZWFF5ZlNCRUlDMGdWR2hsSUdScFlXZHZibUZzSUcxaGRISnBlQzVjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjFoZERKOUlGVWdMU0JVYUdVZ2RYQndaWElnZEhKcFlXNW5kV3hoY2lCdFlYUnlhWGd1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR0WVhReWZTQmhJQzBnVkdobElHbHVjSFYwSUcxaGRISnBlQ0IwYnlCbVlXTjBiM0pwZW1VdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJRXhFVlNoTUxDQkVMQ0JWTENCaEtTQjdYSEpjYmlBZ0lDQk1MbTB3TWlBOUlHRXViVEF5SUM4Z1lTNXRNREE3WEhKY2JpQWdJQ0JWTG0wd01DQTlJR0V1YlRBd08xeHlYRzRnSUNBZ1ZTNXRNREVnUFNCaExtMHdNVHRjY2x4dUlDQWdJRlV1YlRBeklEMGdZUzV0TURNZ0xTQk1MbTB3TWlBcUlGVXViVEF4TzF4eVhHNGdJSDFjY2x4dVhISmNiaUFnTHlvcVhISmNiaUFnSUNvZ1FXUmtjeUIwZDI4Z2JXRjBjbWxqWlhNdVhISmNiaUFnSUNwY2NseHVJQ0FnS2lCQWNHRnlZVzBnZTIxaGRESjlJRzkxZENBdElFMWhkSEpwZUNCMGJ5QnpkRzl5WlNCeVpYTjFiSFF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR0WVhReWZTQmhJQzBnVkdobElHWnBjbk4wSUc5d1pYSmhibVF1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR0WVhReWZTQmlJQzBnVkdobElITmxZMjl1WkNCdmNHVnlZVzVrTGx4eVhHNGdJQ0FxSUVCeVpYUjFjbTV6SUh0dFlYUXlmU0J2ZFhRdVhISmNiaUFnSUNvdlhISmNiaUFnYzNSaGRHbGpJR0ZrWkNodmRYUXNJR0VzSUdJcElIdGNjbHh1SUNBZ0lHOTFkQzV0TURBZ1BTQmhMbTB3TUNBcklHSXViVEF3TzF4eVhHNGdJQ0FnYjNWMExtMHdNU0E5SUdFdWJUQXhJQ3NnWWk1dE1ERTdYSEpjYmlBZ0lDQnZkWFF1YlRBeUlEMGdZUzV0TURJZ0t5QmlMbTB3TWp0Y2NseHVJQ0FnSUc5MWRDNXRNRE1nUFNCaExtMHdNeUFySUdJdWJUQXpPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUZOMVluUnlZV04wY3lCdFlYUnlhWGdnWWlCbWNtOXRJRzFoZEhKcGVDQmhMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHRZWFF5ZlNCdmRYUWdMU0JOWVhSeWFYZ2dkRzhnYzNSdmNtVWdjbVZ6ZFd4MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JXRjBNbjBnWVNBdElGUm9aU0JtYVhKemRDQnZjR1Z5WVc1a0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JXRjBNbjBnWWlBdElGUm9aU0J6WldOdmJtUWdiM0JsY21GdVpDNWNjbHh1SUNBZ0tpQkFjbVYwZFhKdWN5QjdiV0YwTW4wZ2IzVjBMbHh5WEc0Z0lDQXFMMXh5WEc0Z0lITjBZWFJwWXlCemRXSjBjbUZqZENodmRYUXNJR0VzSUdJcElIdGNjbHh1SUNBZ0lHOTFkQzV0TURBZ1BTQmhMbTB3TUNBdElHSXViVEF3TzF4eVhHNGdJQ0FnYjNWMExtMHdNU0E5SUdFdWJUQXhJQzBnWWk1dE1ERTdYSEpjYmlBZ0lDQnZkWFF1YlRBeUlEMGdZUzV0TURJZ0xTQmlMbTB3TWp0Y2NseHVJQ0FnSUc5MWRDNXRNRE1nUFNCaExtMHdNeUF0SUdJdWJUQXpPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjY2x4dUlDQjlYSEpjYmx4eVhHNGdJQzhxS2x4eVhHNGdJQ0FxSUVGc2FXRnpJRzltSUh0QWJHbHVheUJ0WVhReUxuTjFZblJ5WVdOMGZTNWNjbHh1SUNBZ0tpOWNjbHh1SUNCemRHRjBhV01nYzNWaUtHOTFkQ3dnWVN3Z1lpa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlHMWhkREl1YzNWaWRISmhZM1FvYjNWMExDQmhMQ0JpS1R0Y2NseHVJQ0I5WEhKY2JseHlYRzRnSUM4cUtseHlYRzRnSUNBcUlGSmxkSFZ5Ym5NZ2QyaGxkR2hsY2lCMGFHVWdjM0JsWTJsbWFXVmtJRzFoZEhKcFkyVnpJR0Z5WlNCbGNYVmhiQzRnS0VOdmJYQmhjbVZrSUhWemFXNW5JRDA5UFNsY2NseHVJQ0FnS2x4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3YldGME1uMGdZU0F0SUZSb1pTQm1hWEp6ZENCdFlYUnlhWGd1WEhKY2JpQWdJQ29nUUhCaGNtRnRJSHR0WVhReWZTQmlJQzBnVkdobElITmxZMjl1WkNCdFlYUnlhWGd1WEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTBKdmIyeGxZVzU5SUZSeWRXVWdhV1lnZEdobElHMWhkSEpwWTJWeklHRnlaU0JsY1hWaGJDd2dabUZzYzJVZ2IzUm9aWEozYVhObExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJsZUdGamRFVnhkV0ZzY3loaExDQmlLU0I3WEhKY2JpQWdJQ0J5WlhSMWNtNGdZUzV0TURBZ1BUMDlJR0l1YlRBd0lDWW1JR0V1YlRBeElEMDlQU0JpTG0wd01TQW1KaUJoTG0wd01pQTlQVDBnWWk1dE1ESWdKaVlnWVM1dE1ETWdQVDA5SUdJdWJUQXpPMXh5WEc0Z0lIMWNjbHh1WEhKY2JpQWdMeW9xWEhKY2JpQWdJQ29nVW1WMGRYSnVjeUIzYUdWMGFHVnlJSFJvWlNCemNHVmphV1pwWldRZ2JXRjBjbWxqWlhNZ1lYSmxJR0Z3Y0hKdmVHbHRZWFJsYkhrZ1pYRjFZV3d1WEhKY2JpQWdJQ3BjY2x4dUlDQWdLaUJBY0dGeVlXMGdlMjFoZERKOUlHRWdMU0JVYUdVZ1ptbHljM1FnYldGMGNtbDRMbHh5WEc0Z0lDQXFJRUJ3WVhKaGJTQjdiV0YwTW4wZ1lpQXRJRlJvWlNCelpXTnZibVFnYldGMGNtbDRMbHh5WEc0Z0lDQXFJRUJ5WlhSMWNtNXpJSHRDYjI5c1pXRnVmU0JVY25WbElHbG1JSFJvWlNCdFlYUnlhV05sY3lCaGNtVWdaWEYxWVd3c0lHWmhiSE5sSUc5MGFHVnlkMmx6WlM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdaWEYxWVd4ektHRXNJR0lwSUh0Y2NseHVJQ0FnSUd4bGRDQmhNQ0E5SUdFdWJUQXdMQ0JoTVNBOUlHRXViVEF4TENCaE1pQTlJR0V1YlRBeUxDQmhNeUE5SUdFdWJUQXpPMXh5WEc0Z0lDQWdiR1YwSUdJd0lEMGdZaTV0TURBc0lHSXhJRDBnWWk1dE1ERXNJR0l5SUQwZ1lpNXRNRElzSUdJeklEMGdZaTV0TURNN1hISmNiaUFnSUNCeVpYUjFjbTRnS0Z4eVhHNGdJQ0FnSUNCTllYUm9MbUZpY3loaE1DQXRJR0l3S1NBOFBTQkZVRk5KVEU5T0lDb2dUV0YwYUM1dFlYZ29NUzR3TENCTllYUm9MbUZpY3loaE1Da3NJRTFoZEdndVlXSnpLR0l3S1NrZ0ppWmNjbHh1SUNBZ0lDQWdUV0YwYUM1aFluTW9ZVEVnTFNCaU1Ta2dQRDBnUlZCVFNVeFBUaUFxSUUxaGRHZ3ViV0Y0S0RFdU1Dd2dUV0YwYUM1aFluTW9ZVEVwTENCTllYUm9MbUZpY3loaU1Ta3BJQ1ltWEhKY2JpQWdJQ0FnSUUxaGRHZ3VZV0p6S0dFeUlDMGdZaklwSUR3OUlFVlFVMGxNVDA0Z0tpQk5ZWFJvTG0xaGVDZ3hMakFzSUUxaGRHZ3VZV0p6S0dFeUtTd2dUV0YwYUM1aFluTW9ZaklwS1NBbUpseHlYRzRnSUNBZ0lDQk5ZWFJvTG1GaWN5aGhNeUF0SUdJektTQThQU0JGVUZOSlRFOU9JQ29nVFdGMGFDNXRZWGdvTVM0d0xDQk5ZWFJvTG1GaWN5aGhNeWtzSUUxaGRHZ3VZV0p6S0dJektTbGNjbHh1SUNBZ0lDazdYSEpjYmlBZ2ZWeHlYRzVjY2x4dUlDQXZLaXBjY2x4dUlDQWdLaUJOZFd4MGFYQnNlU0JsWVdOb0lHVnNaVzFsYm5RZ2IyWWdZU0J0WVhSeWFYZ2dZbmtnWVNCelkyRnNZWElnYm5WdFltVnlMbHh5WEc0Z0lDQXFYSEpjYmlBZ0lDb2dRSEJoY21GdElIdHRZWFF5ZlNCdmRYUWdMU0JOWVhSeWFYZ2dkRzhnYzNSdmNtVWdjbVZ6ZFd4MExseHlYRzRnSUNBcUlFQndZWEpoYlNCN2JXRjBNbjBnWVNBdElFMWhkSEpwZUNCMGJ5QnpZMkZzWlZ4eVhHNGdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JpSUMwZ1ZHaGxJSE5qWVd4bElHNTFiV0psY2k1Y2NseHVJQ0FnS2lCQWNtVjBkWEp1Y3lCN2JXRjBNbjBnYjNWMExseHlYRzRnSUNBcUwxeHlYRzRnSUhOMFlYUnBZeUJ0ZFd4MGFYQnNlVk5qWVd4aGNpaHZkWFFzSUdFc0lHSXBJSHRjY2x4dUlDQWdJRzkxZEM1dE1EQWdQU0JoTG0wd01DQXFJR0k3WEhKY2JpQWdJQ0J2ZFhRdWJUQXhJRDBnWVM1dE1ERWdLaUJpTzF4eVhHNGdJQ0FnYjNWMExtMHdNaUE5SUdFdWJUQXlJQ29nWWp0Y2NseHVJQ0FnSUc5MWRDNXRNRE1nUFNCaExtMHdNeUFxSUdJN1hISmNiaUFnSUNCeVpYUjFjbTRnYjNWME8xeHlYRzRnSUgxY2NseHVYSEpjYmlBZ0x5b3FYSEpjYmlBZ0lDb2dRV1JrY3lCMGQyOGdiV0YwY21salpYTWdZV1owWlhJZ2JYVnNkR2x3YkhscGJtY2daV0ZqYUNCbGJHVnRaVzUwSUc5bUlIUm9aU0J6WldOdmJtUWdiM0JsY21GdVpDQmllU0JoSUhOallXeGhjaUJ1ZFcxaVpYSXVYSEpjYmlBZ0lDcGNjbHh1SUNBZ0tpQkFjR0Z5WVcwZ2UyMWhkREo5SUc5MWRDQXRJRTFoZEhKcGVDQjBieUJ6ZEc5eVpTQnlaWE4xYkhRdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dFlYUXlmU0JoSUMwZ1ZHaGxJR1pwY25OMElHOXdaWEpoYm1RdVhISmNiaUFnSUNvZ1FIQmhjbUZ0SUh0dFlYUXlmU0JpSUMwZ1ZHaGxJSE5sWTI5dVpDQnZjR1Z5WVc1a0xseHlYRzRnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCelkyRnNaU0F0SUZSb1pTQnpZMkZzWlNCdWRXMWlaWEl1WEhKY2JpQWdJQ29nUUhKbGRIVnlibk1nZTIxaGRESjlJRzkxZEM1Y2NseHVJQ0FnS2k5Y2NseHVJQ0J6ZEdGMGFXTWdiWFZzZEdsd2JIbFRZMkZzWVhKQmJtUkJaR1FvYjNWMExDQmhMQ0JpTENCelkyRnNaU2tnZTF4eVhHNGdJQ0FnYjNWMExtMHdNQ0E5SUdFdWJUQXdJQ3NnS0dJdWJUQXdJQ29nYzJOaGJHVXBPMXh5WEc0Z0lDQWdiM1YwTG0wd01TQTlJR0V1YlRBeElDc2dLR0l1YlRBeElDb2djMk5oYkdVcE8xeHlYRzRnSUNBZ2IzVjBMbTB3TWlBOUlHRXViVEF5SUNzZ0tHSXViVEF5SUNvZ2MyTmhiR1VwTzF4eVhHNGdJQ0FnYjNWMExtMHdNeUE5SUdFdWJUQXpJQ3NnS0dJdWJUQXpJQ29nYzJOaGJHVXBPMXh5WEc0Z0lDQWdjbVYwZFhKdUlHOTFkRHRjY2x4dUlDQjlYSEpjYm4xY2NseHVYSEpjYm1WNGNHOXlkQ0JrWldaaGRXeDBJRzFoZERJN0lsMTkiXX0=