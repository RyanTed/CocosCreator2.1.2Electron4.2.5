(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/box2d-adapter.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var box2d = require('../../../external/box2d/box2d');
        window.b2 = {};
        if (CC_QQPLAY) {
            b2 = window.b2;
        }
        for (var key in box2d) {
            if (key.indexOf('b2_') !== -1) {
                continue;
            }
            var newKey = key.replace('b2', '');
            b2[newKey] = box2d[key];
        }
        b2.maxPolygonVertices = 8;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJveDJkLWFkYXB0ZXIuanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL2NvcmUvcGh5c2ljcy9ib3gyZC1hZGFwdGVyLmpzIl0sIm5hbWVzIjpbImJveDJkIiwicmVxdWlyZSIsIndpbmRvdyIsImIyIiwiQ0NfUVFQTEFZIiwia2V5IiwiaW5kZXhPZiIsIm5ld0tleSIsInJlcGxhY2UiLCJtYXhQb2x5Z29uVmVydGljZXMiXSwibWFwcGluZ3MiOiI7SUFBb0IsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQXBCLFdBQW9CLElBQXBCLE9BQUEsT0FBQSxLQUFBLFdBQW9COztJQUVwQixJQUFBLFVBQUEsR0FBQSxrREFBQTtJQUNlLElBQUEsU0FBQSxHQUFBLE9BQUEsR0FBQSxVQUFBLE9BQUEsRUFBQTtBQUFBLFFBQ1gsT0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBLENBRFc7QUFBQSxLQUFBLEdBRVgsVUFBQSxPQUFBLEVBQUE7QUFBQSxRQUNILE9BQUEsaUJBQUEsQ0FBQSxPQUFBLENBQUEsT0FBQSxFQUFBLFVBQUEsQ0FBQSxDQURHO0FBQUEsS0FGVztJQUtDQSxTQUFPLFFBQVBBLENBQU8sT0FBUEEsRUFBTyxPQUFQQSxFQUFPLE1BQVBBLEVBQU87QUFBQSxRQUNILElBQVosQ0FBQSxPQUFZLEVBQWU7QUFBQSxZQUFBLGlCQUFBLENBQUEsY0FBQSxDQUFBLFVBQUEsRUFBQSxNQUFBLEVBQUE7QUFBQSxTQURaO0FBQUE7UUFSdkIsSUFBSUEsS0FBQUEsR0FBUUMsT0FBQUEsQ0FBUSwrQkFBUkEsQ0FBWjtRQUVBQyxNQUFBQSxDQUFPQyxFQUFQRCxHQUFZLEVBQVpBO1FBQ0EsSUFBSUUsU0FBSixFQUFlO0FBQUEsWUFFWEQsRUFBQUEsR0FBS0QsTUFBQUEsQ0FBT0MsRUFBWkEsQ0FGVztBQUFBO1FBS2YsU0FBU0UsR0FBVCxJQUFnQkwsS0FBaEIsRUFBdUI7QUFBQSxZQUNuQixJQUFJSyxHQUFBQSxDQUFJQyxPQUFKRCxDQUFZLEtBQVpBLE1BQXVCLENBQUMsQ0FBNUIsRUFBK0I7QUFBQSxnQkFDM0IsU0FEMkI7QUFBQSxhQURaO0FBQUEsWUFJbkIsSUFBSUUsTUFBQUEsR0FBU0YsR0FBQUEsQ0FBSUcsT0FBSkgsQ0FBWSxJQUFaQSxFQUFrQixFQUFsQkEsQ0FBYixDQUptQjtBQUFBLFlBS25CRixFQUFBQSxDQUFHSSxNQUFISixJQUFhSCxLQUFBQSxDQUFNSyxHQUFOTCxDQUFiRyxDQUxtQjtBQUFBO1FBUXZCQSxFQUFBQSxDQUFHTSxrQkFBSE4sR0FBd0IsQ0FBeEJBLENBUnVCO0FBQUE7SUFHbEIsSUFBQSxPQUFBLEVBQUE7QUFBQSxRQUNnQkssUUFBQUEsQ0FBSixRQUFBLENBQWIsT0FBaUJBLEVBQWpCLFNBQWlCQSxFQUFqQixRQUFpQkEsRUFEaEI7QUFBQSxLQUFBLE1BR0o7QUFBQTtZQUVELFFBQUEsQ0FBQSxRQUFBLENBQUEsT0FBQSxFQUFBLFNBQUEsRUFBQSxRQUFBO1dBRkM7QUFBQSIsImZpbGUiOiJib3gyZC1hZGFwdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsibGV0IGJveDJkID0gcmVxdWlyZSgnLi4vLi4vLi4vZXh0ZXJuYWwvYm94MmQvYm94MmQnKTtcclxuXHJcbndpbmRvdy5iMiA9IHt9O1xyXG5pZiAoQ0NfUVFQTEFZKSB7XHJcbiAgICAvLyBjYW4gb25seSBkZWZpbmUgZ2xvYmFsIHZhcmlhYmxlIGluIHRoaXMgd2F5XHJcbiAgICBiMiA9IHdpbmRvdy5iMjtcclxufVxyXG5cclxuZm9yICh2YXIga2V5IGluIGJveDJkKSB7XHJcbiAgICBpZiAoa2V5LmluZGV4T2YoJ2IyXycpICE9PSAtMSkge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgfVxyXG4gICAgbGV0IG5ld0tleSA9IGtleS5yZXBsYWNlKCdiMicsICcnKTtcclxuICAgIGIyW25ld0tleV0gPSBib3gyZFtrZXldO1xyXG59XHJcblxyXG5iMi5tYXhQb2x5Z29uVmVydGljZXMgPSA4O1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBib3gyZCA9IHJlcXVpcmUoJy4uLy4uLy4uL2V4dGVybmFsL2JveDJkL2JveDJkJyk7XG5cbndpbmRvdy5iMiA9IHt9O1xuaWYgKENDX1FRUExBWSkge1xuICAgIC8vIGNhbiBvbmx5IGRlZmluZSBnbG9iYWwgdmFyaWFibGUgaW4gdGhpcyB3YXlcbiAgICBiMiA9IHdpbmRvdy5iMjtcbn1cblxuZm9yICh2YXIga2V5IGluIGJveDJkKSB7XG4gICAgaWYgKGtleS5pbmRleE9mKCdiMl8nKSAhPT0gLTEpIHtcbiAgICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZhciBuZXdLZXkgPSBrZXkucmVwbGFjZSgnYjInLCAnJyk7XG4gICAgYjJbbmV3S2V5XSA9IGJveDJkW2tleV07XG59XG5cbmIyLm1heFBvbHlnb25WZXJ0aWNlcyA9IDg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUp2ZURKa0xXRmtZWEIwWlhJdWFuTWlYU3dpYm1GdFpYTWlPbHNpWW05NE1tUWlMQ0p5WlhGMWFYSmxJaXdpZDJsdVpHOTNJaXdpWWpJaUxDSkRRMTlSVVZCTVFWa2lMQ0pyWlhraUxDSnBibVJsZUU5bUlpd2libVYzUzJWNUlpd2ljbVZ3YkdGalpTSXNJbTFoZUZCdmJIbG5iMjVXWlhKMGFXTmxjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUZCUVN4SlFVRkpRU3hSUVVGUlF5eFJRVUZSTEN0Q1FVRlNMRU5CUVZvN08wRkJSVUZETEU5QlFVOURMRVZCUVZBc1IwRkJXU3hGUVVGYU8wRkJRMEVzU1VGQlNVTXNVMEZCU2l4RlFVRmxPMEZCUTFnN1FVRkRRVVFzVTBGQlMwUXNUMEZCVDBNc1JVRkJXanRCUVVOSU96dEJRVVZFTEV0QlFVc3NTVUZCU1VVc1IwRkJWQ3hKUVVGblFrd3NTMEZCYUVJc1JVRkJkVUk3UVVGRGJrSXNVVUZCU1Vzc1NVRkJTVU1zVDBGQlNpeERRVUZaTEV0QlFWb3NUVUZCZFVJc1EwRkJReXhEUVVFMVFpeEZRVUVyUWp0QlFVTXpRanRCUVVOSU8wRkJRMFFzVVVGQlNVTXNVMEZCVTBZc1NVRkJTVWNzVDBGQlNpeERRVUZaTEVsQlFWb3NSVUZCYTBJc1JVRkJiRUlzUTBGQllqdEJRVU5CVEN4UFFVRkhTU3hOUVVGSUxFbEJRV0ZRTEUxQlFVMUxMRWRCUVU0c1EwRkJZanRCUVVOSU96dEJRVVZFUml4SFFVRkhUU3hyUWtGQlNDeEhRVUYzUWl4RFFVRjRRaUlzSW1acGJHVWlPaUppYjNneVpDMWhaR0Z3ZEdWeUxtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpYkdWMElHSnZlREprSUQwZ2NtVnhkV2x5WlNnbkxpNHZMaTR2TGk0dlpYaDBaWEp1WVd3dlltOTRNbVF2WW05NE1tUW5LVHRjY2x4dVhISmNibmRwYm1SdmR5NWlNaUE5SUh0OU8xeHlYRzVwWmlBb1EwTmZVVkZRVEVGWktTQjdYSEpjYmlBZ0lDQXZMeUJqWVc0Z2IyNXNlU0JrWldacGJtVWdaMnh2WW1Gc0lIWmhjbWxoWW14bElHbHVJSFJvYVhNZ2QyRjVYSEpjYmlBZ0lDQmlNaUE5SUhkcGJtUnZkeTVpTWp0Y2NseHVmVnh5WEc1Y2NseHVabTl5SUNoMllYSWdhMlY1SUdsdUlHSnZlREprS1NCN1hISmNiaUFnSUNCcFppQW9hMlY1TG1sdVpHVjRUMllvSjJJeVh5Y3BJQ0U5UFNBdE1Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUdOdmJuUnBiblZsTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYkdWMElHNWxkMHRsZVNBOUlHdGxlUzV5WlhCc1lXTmxLQ2RpTWljc0lDY25LVHRjY2x4dUlDQWdJR0l5VzI1bGQwdGxlVjBnUFNCaWIzZ3laRnRyWlhsZE8xeHlYRzU5WEhKY2JseHlYRzVpTWk1dFlYaFFiMng1WjI5dVZtVnlkR2xqWlhNZ1BTQTRPMXh5WEc0aVhYMD0iXX0=