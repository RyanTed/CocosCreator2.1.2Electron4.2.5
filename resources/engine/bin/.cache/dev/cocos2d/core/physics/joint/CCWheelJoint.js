(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCWheelJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('../CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var WheelJoint = cc.Class({
            name: 'cc.WheelJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js',
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Wheel'
            },
            properties: {
                _maxMotorTorque: 0,
                _motorSpeed: 0,
                _enableMotor: false,
                _frequency: 2,
                _dampingRatio: 0.7,
                localAxisA: {
                    default: cc.v2(1, 0),
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.localAxisA'
                },
                maxMotorTorque: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxMotorTorque',
                    get: function get() {
                        return this._maxMotorTorque;
                    },
                    set: function set(value) {
                        this._maxMotorTorque = value;
                        if (this._joint) {
                            this._joint.SetMaxMotorTorque(value);
                        }
                    }
                },
                motorSpeed: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.motorSpeed',
                    get: function get() {
                        return this._motorSpeed;
                    },
                    set: function set(value) {
                        this._motorSpeed = value;
                        if (this._joint) {
                            this._joint.SetMotorSpeed(value * ANGLE_TO_PHYSICS_ANGLE);
                        }
                    }
                },
                enableMotor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.enableMotor',
                    get: function get() {
                        return this._enableMotor;
                    },
                    set: function set(value) {
                        this._enableMotor = value;
                        if (this._joint) {
                            this._joint.EnableMotor(value);
                        }
                    }
                },
                frequency: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.frequency',
                    get: function get() {
                        return this._frequency;
                    },
                    set: function set(value) {
                        this._frequency = value;
                        if (this._joint) {
                            this._joint.SetFrequency(value);
                        }
                    }
                },
                dampingRatio: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.dampingRatio',
                    get: function get() {
                        return this._dampingRatio;
                    },
                    set: function set(value) {
                        this._dampingRatio = value;
                        if (this._joint) {
                            this._joint.SetDampingRatio(value);
                        }
                    }
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.WheelJointDef();
                def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
                def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
                def.localAxisA = new b2.Vec2(this.localAxisA.x, this.localAxisA.y);
                def.maxMotorTorque = this.maxMotorTorque;
                def.motorSpeed = this.motorSpeed * ANGLE_TO_PHYSICS_ANGLE;
                def.enableMotor = this.enableMotor;
                def.dampingRatio = this.dampingRatio;
                def.frequencyHz = this.frequency;
                return def;
            }
        });
        cc.WheelJoint = module.exports = WheelJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,