(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/collider/CCPhysicsPolygonCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var PolygonSeparator = require('../CCPolygonSeparator');
        var PhysicsPolygonCollider = cc.Class({
            name: 'cc.PhysicsPolygonCollider',
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Polygon],
            editor: {
                menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Polygon',
                inspector: CC_EDITOR && 'packages://inspector/inspectors/comps/physics/points-base-collider.js',
                requireComponent: cc.RigidBody
            },
            _createShape: function _createShape(scale) {
                var shapes = [];
                var points = this.points;
                if (points.length > 0 && points[0].equals(points[points.length - 1])) {
                    points.length -= 1;
                }
                var polys = PolygonSeparator.ConvexPartition(points);
                var offset = this.offset;
                for (var i = 0; i < polys.length; i++) {
                    var poly = polys[i];
                    var shape = null, vertices = [];
                    var firstVertice = null;
                    for (var j = 0, l = poly.length; j < l; j++) {
                        if (!shape) {
                            shape = new b2.PolygonShape();
                        }
                        var p = poly[j];
                        var x = (p.x + offset.x) / PTM_RATIO * scale.x;
                        var y = (p.y + offset.y) / PTM_RATIO * scale.y;
                        var v = new b2.Vec2(x, y);
                        vertices.push(v);
                        if (!firstVertice) {
                            firstVertice = v;
                        }
                        if (vertices.length === b2.maxPolygonVertices) {
                            shape.Set(vertices, vertices.length);
                            shapes.push(shape);
                            shape = null;
                            if (j < l - 1) {
                                vertices = [
                                    firstVertice,
                                    vertices[vertices.length - 1]
                                ];
                            }
                        }
                    }
                    if (shape) {
                        shape.Set(vertices, vertices.length);
                        shapes.push(shape);
                    }
                }
                return shapes;
            }
        });
        cc.PhysicsPolygonCollider = module.exports = PhysicsPolygonCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,