(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCRevoluteJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('../CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var PHYSICS_ANGLE_TO_ANGLE = require('../CCPhysicsTypes').PHYSICS_ANGLE_TO_ANGLE;
        var RevoluteJoint = cc.Class({
            name: 'cc.RevoluteJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Revolute',
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js'
            },
            properties: {
                _maxMotorTorque: 0,
                _motorSpeed: 0,
                _enableLimit: false,
                _enableMotor: false,
                referenceAngle: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.referenceAngle'
                },
                lowerAngle: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.lowerAngle'
                },
                upperAngle: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.upperAngle'
                },
                maxMotorTorque: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.maxMotorTorque',
                    get: function get() {
                        return this._maxMotorTorque;
                    },
                    set: function set(value) {
                        this._maxMotorTorque = value;
                        if (this._joint) {
                            this._joint.SetMaxMotorTorque(value);
                        }
                    }
                },
                motorSpeed: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.motorSpeed',
                    get: function get() {
                        return this._motorSpeed;
                    },
                    set: function set(value) {
                        this._motorSpeed = value;
                        if (this._joint) {
                            this._joint.SetMotorSpeed(value * ANGLE_TO_PHYSICS_ANGLE);
                        }
                    }
                },
                enableLimit: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.enableLimit',
                    get: function get() {
                        return this._enableLimit;
                    },
                    set: function set(value) {
                        this._enableLimit = value;
                        if (this._joint) {
                            this._joint.EnableLimit(value);
                        }
                    }
                },
                enableMotor: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.enableMotor',
                    get: function get() {
                        return this._enableMotor;
                    },
                    set: function set(value) {
                        this._enableMotor = value;
                        if (this._joint) {
                            this._joint.EnableMotor(value);
                        }
                    }
                }
            },
            getJointAngle: function getJointAngle() {
                if (this._joint) {
                    return this._joint.GetJointAngle() * PHYSICS_ANGLE_TO_ANGLE;
                }
                return 0;
            },
            setLimits: function setLimits(lower, upper) {
                if (this._joint) {
                    return this._joint.SetLimits(lower * ANGLE_TO_PHYSICS_ANGLE, upper * ANGLE_TO_PHYSICS_ANGLE);
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.RevoluteJointDef();
                def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
                def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
                def.lowerAngle = this.upperAngle * ANGLE_TO_PHYSICS_ANGLE;
                def.upperAngle = this.lowerAngle * ANGLE_TO_PHYSICS_ANGLE;
                def.maxMotorTorque = this.maxMotorTorque;
                def.motorSpeed = this.motorSpeed * ANGLE_TO_PHYSICS_ANGLE;
                def.enableLimit = this.enableLimit;
                def.enableMotor = this.enableMotor;
                def.referenceAngle = this.referenceAngle * ANGLE_TO_PHYSICS_ANGLE;
                return def;
            }
        });
        cc.RevoluteJoint = module.exports = RevoluteJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,