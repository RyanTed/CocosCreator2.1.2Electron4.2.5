(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/collider/CCPhysicsBoxCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var PhysicsBoxCollider = cc.Class({
            name: 'cc.PhysicsBoxCollider',
            extends: cc.PhysicsCollider,
            mixins: [cc.Collider.Box],
            editor: {
                menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Box',
                requireComponent: cc.RigidBody
            },
            _createShape: function _createShape(scale) {
                var scaleX = Math.abs(scale.x);
                var scaleY = Math.abs(scale.y);
                var width = this.size.width / 2 / PTM_RATIO * scaleX;
                var height = this.size.height / 2 / PTM_RATIO * scaleY;
                var offsetX = this.offset.x / PTM_RATIO * scaleX;
                var offsetY = this.offset.y / PTM_RATIO * scaleY;
                var shape = new b2.PolygonShape();
                shape.SetAsBox(width, height, new b2.Vec2(offsetX, offsetY), 0);
                return shape;
            }
        });
        cc.PhysicsBoxCollider = module.exports = PhysicsBoxCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,