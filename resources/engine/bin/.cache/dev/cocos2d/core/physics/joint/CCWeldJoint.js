(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/joint/CCWeldJoint.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = require('../CCPhysicsTypes').ANGLE_TO_PHYSICS_ANGLE;
        var WeldJoint = cc.Class({
            name: 'cc.WeldJoint',
            extends: cc.Joint,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/physics/joint.js',
                menu: 'i18n:MAIN_MENU.component.physics/Joint/Weld'
            },
            properties: {
                referenceAngle: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.referenceAngle'
                },
                _frequency: 0,
                _dampingRatio: 0,
                frequency: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.frequency',
                    get: function get() {
                        return this._frequency;
                    },
                    set: function set(value) {
                        this._frequency = value;
                        if (this._joint) {
                            this._joint.SetFrequency(value);
                        }
                    }
                },
                dampingRatio: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.dampingRatio',
                    get: function get() {
                        return this._dampingRatio;
                    },
                    set: function set(value) {
                        this._dampingRatio = value;
                        if (this._joint) {
                            this._joint.SetDampingRatio(value);
                        }
                    }
                }
            },
            _createJointDef: function _createJointDef() {
                var def = new b2.WeldJointDef();
                def.localAnchorA = new b2.Vec2(this.anchor.x / PTM_RATIO, this.anchor.y / PTM_RATIO);
                def.localAnchorB = new b2.Vec2(this.connectedAnchor.x / PTM_RATIO, this.connectedAnchor.y / PTM_RATIO);
                def.referenceAngle = this.referenceAngle * ANGLE_TO_PHYSICS_ANGLE;
                def.frequencyHz = this.frequency;
                def.dampingRatio = this.dampingRatio;
                return def;
            }
        });
        cc.WeldJoint = module.exports = WeldJoint;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,