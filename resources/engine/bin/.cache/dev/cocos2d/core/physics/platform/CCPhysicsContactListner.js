(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/platform/CCPhysicsContactListner.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function PhysicsContactListener() {
            this._contactFixtures = [];
        }
        PhysicsContactListener.prototype.setBeginContact = function (cb) {
            this._BeginContact = cb;
        };
        PhysicsContactListener.prototype.setEndContact = function (cb) {
            this._EndContact = cb;
        };
        PhysicsContactListener.prototype.setPreSolve = function (cb) {
            this._PreSolve = cb;
        };
        PhysicsContactListener.prototype.setPostSolve = function (cb) {
            this._PostSolve = cb;
        };
        PhysicsContactListener.prototype.BeginContact = function (contact) {
            if (!this._BeginContact)
                return;
            var fixtureA = contact.GetFixtureA();
            var fixtureB = contact.GetFixtureB();
            var fixtures = this._contactFixtures;
            contact._shouldReport = false;
            if (fixtures.indexOf(fixtureA) !== -1 || fixtures.indexOf(fixtureB) !== -1) {
                contact._shouldReport = true;
                this._BeginContact(contact);
            }
        };
        PhysicsContactListener.prototype.EndContact = function (contact) {
            if (this._EndContact && contact._shouldReport) {
                contact._shouldReport = false;
                this._EndContact(contact);
            }
        };
        PhysicsContactListener.prototype.PreSolve = function (contact, oldManifold) {
            if (this._PreSolve && contact._shouldReport) {
                this._PreSolve(contact, oldManifold);
            }
        };
        PhysicsContactListener.prototype.PostSolve = function (contact, impulse) {
            if (this._PostSolve && contact._shouldReport) {
                this._PostSolve(contact, impulse);
            }
        };
        PhysicsContactListener.prototype.registerContactFixture = function (fixture) {
            this._contactFixtures.push(fixture);
        };
        PhysicsContactListener.prototype.unregisterContactFixture = function (fixture) {
            cc.js.array.remove(this._contactFixtures, fixture);
        };
        cc.PhysicsContactListener = module.exports = PhysicsContactListener;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,