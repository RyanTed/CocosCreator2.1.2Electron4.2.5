(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/CCPhysicsManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PhysicsTypes = require('./CCPhysicsTypes');
        var ContactType = PhysicsTypes.ContactType;
        var BodyType = PhysicsTypes.BodyType;
        var RayCastType = PhysicsTypes.RayCastType;
        var DrawBits = PhysicsTypes.DrawBits;
        var PTM_RATIO = PhysicsTypes.PTM_RATIO;
        var ANGLE_TO_PHYSICS_ANGLE = PhysicsTypes.ANGLE_TO_PHYSICS_ANGLE;
        var PHYSICS_ANGLE_TO_ANGLE = PhysicsTypes.PHYSICS_ANGLE_TO_ANGLE;
        var convertToNodeRotation = require('./utils').convertToNodeRotation;
        var DebugDraw = require('./platform/CCPhysicsDebugDraw');
        var b2_aabb_tmp = new b2.AABB();
        var b2_vec2_tmp1 = new b2.Vec2();
        var b2_vec2_tmp2 = new b2.Vec2();
        var vec2_tmp = cc.v2();
        var PhysicsManager = cc.Class({
            mixins: [cc.EventTarget],
            statics: {
                DrawBits: DrawBits,
                PTM_RATIO: PTM_RATIO,
                VELOCITY_ITERATIONS: 10,
                POSITION_ITERATIONS: 10,
                FIXED_TIME_STEP: 1 / 60,
                MAX_ACCUMULATOR: 1 / 5
            },
            ctor: function ctor() {
                this._debugDrawFlags = 0;
                this._debugDrawer = null;
                this._world = null;
                this._bodies = [];
                this._joints = [];
                this._contactMap = {};
                this._contactID = 0;
                this._delayEvents = [];
                this._accumulator = 0;
                cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
                this.enabledAccumulator = false;
            },
            pushDelayEvent: function pushDelayEvent(target, func, args) {
                if (this._steping) {
                    this._delayEvents.push({
                        target: target,
                        func: func,
                        args: args
                    });
                } else {
                    target[func].apply(target, args);
                }
            },
            update: function update(dt) {
                var world = this._world;
                if (!world || !this.enabled)
                    return;
                this.emit('before-step');
                this._steping = true;
                var velocityIterations = PhysicsManager.VELOCITY_ITERATIONS;
                var positionIterations = PhysicsManager.POSITION_ITERATIONS;
                if (this.enabledAccumulator) {
                    this._accumulator += dt;
                    var FIXED_TIME_STEP = PhysicsManager.FIXED_TIME_STEP;
                    var MAX_ACCUMULATOR = PhysicsManager.MAX_ACCUMULATOR;
                    if (this._accumulator > MAX_ACCUMULATOR) {
                        this._accumulator = MAX_ACCUMULATOR;
                    }
                    while (this._accumulator > FIXED_TIME_STEP) {
                        world.Step(FIXED_TIME_STEP, velocityIterations, positionIterations);
                        this._accumulator -= FIXED_TIME_STEP;
                    }
                } else {
                    var timeStep = 1 / cc.game.config['frameRate'];
                    world.Step(timeStep, velocityIterations, positionIterations);
                }
                if (this.debugDrawFlags) {
                    this._checkDebugDrawValid();
                    this._debugDrawer.clear();
                    world.DrawDebugData();
                }
                this._steping = false;
                var events = this._delayEvents;
                for (var i = 0, l = events.length; i < l; i++) {
                    var event = events[i];
                    event.target[event.func].apply(event.target, event.args);
                }
                events.length = 0;
                this._syncNode();
            },
            testPoint: function testPoint(point) {
                var x = b2_vec2_tmp1.x = point.x / PTM_RATIO;
                var y = b2_vec2_tmp1.y = point.y / PTM_RATIO;
                var d = 0.2 / PTM_RATIO;
                b2_aabb_tmp.lowerBound.x = x - d;
                b2_aabb_tmp.lowerBound.y = y - d;
                b2_aabb_tmp.upperBound.x = x + d;
                b2_aabb_tmp.upperBound.y = y + d;
                var callback = this._aabbQueryCallback;
                callback.init(b2_vec2_tmp1);
                this._world.QueryAABB(callback, b2_aabb_tmp);
                var fixture = callback.getFixture();
                if (fixture) {
                    return fixture.collider;
                }
                return null;
            },
            testAABB: function testAABB(rect) {
                b2_aabb_tmp.lowerBound.x = rect.xMin / PTM_RATIO;
                b2_aabb_tmp.lowerBound.y = rect.yMin / PTM_RATIO;
                b2_aabb_tmp.upperBound.x = rect.xMax / PTM_RATIO;
                b2_aabb_tmp.upperBound.y = rect.yMax / PTM_RATIO;
                var callback = this._aabbQueryCallback;
                callback.init();
                this._world.QueryAABB(callback, b2_aabb_tmp);
                var fixtures = callback.getFixtures();
                var colliders = fixtures.map(function (fixture) {
                    return fixture.collider;
                });
                return colliders;
            },
            rayCast: function rayCast(p1, p2, type) {
                if (p1.equals(p2)) {
                    return [];
                }
                type = type || RayCastType.Closest;
                b2_vec2_tmp1.x = p1.x / PTM_RATIO;
                b2_vec2_tmp1.y = p1.y / PTM_RATIO;
                b2_vec2_tmp2.x = p2.x / PTM_RATIO;
                b2_vec2_tmp2.y = p2.y / PTM_RATIO;
                var callback = this._raycastQueryCallback;
                callback.init(type);
                this._world.RayCast(callback, b2_vec2_tmp1, b2_vec2_tmp2);
                var fixtures = callback.getFixtures();
                if (fixtures.length > 0) {
                    var points = callback.getPoints();
                    var normals = callback.getNormals();
                    var fractions = callback.getFractions();
                    var results = [];
                    for (var i = 0, l = fixtures.length; i < l; i++) {
                        var fixture = fixtures[i];
                        var collider = fixture.collider;
                        if (type === RayCastType.AllClosest) {
                            var result = results.find(function (result) {
                                return result.collider === collider;
                            });
                            if (result) {
                                if (fractions[i] < result.fraction) {
                                    result.fixtureIndex = collider._getFixtureIndex(fixture);
                                    result.point.x = points[i].x * PTM_RATIO;
                                    result.point.y = points[i].y * PTM_RATIO;
                                    result.normal.x = normals[i].x;
                                    result.normal.y = normals[i].y;
                                    result.fraction = fractions[i];
                                }
                                continue;
                            }
                        }
                        results.push({
                            collider: collider,
                            fixtureIndex: collider._getFixtureIndex(fixture),
                            point: cc.v2(points[i].x * PTM_RATIO, points[i].y * PTM_RATIO),
                            normal: cc.v2(normals[i]),
                            fraction: fractions[i]
                        });
                    }
                    return results;
                }
                return [];
            },
            syncPosition: function syncPosition() {
                var bodies = this._bodies;
                for (var i = 0; i < bodies.length; i++) {
                    bodies[i].syncPosition();
                }
            },
            syncRotation: function syncRotation() {
                var bodies = this._bodies;
                for (var i = 0; i < bodies.length; i++) {
                    bodies[i].syncRotation();
                }
            },
            _registerContactFixture: function _registerContactFixture(fixture) {
                this._contactListener.registerContactFixture(fixture);
            },
            _unregisterContactFixture: function _unregisterContactFixture(fixture) {
                this._contactListener.unregisterContactFixture(fixture);
            },
            _addBody: function _addBody(body, bodyDef) {
                var world = this._world;
                var node = body.node;
                if (!world || !node)
                    return;
                body._b2Body = world.CreateBody(bodyDef);
                body._b2Body.body = body;
                this._bodies.push(body);
            },
            _removeBody: function _removeBody(body) {
                var world = this._world;
                if (!world)
                    return;
                body._b2Body.body = null;
                world.DestroyBody(body._b2Body);
                body._b2Body = null;
                cc.js.array.remove(this._bodies, body);
            },
            _addJoint: function _addJoint(joint, jointDef) {
                var b2joint = this._world.CreateJoint(jointDef);
                if (!b2joint)
                    return;
                b2joint._joint = joint;
                joint._joint = b2joint;
                this._joints.push(joint);
            },
            _removeJoint: function _removeJoint(joint) {
                if (joint._isValid()) {
                    this._world.DestroyJoint(joint._joint);
                }
                if (joint._joint) {
                    joint._joint._joint = null;
                }
                cc.js.array.remove(this._joints, joint);
            },
            _initCallback: function _initCallback() {
                if (!this._world) {
                    cc.warn('Please init PhysicsManager first');
                    return;
                }
                if (this._contactListener)
                    return;
                var listener = new cc.PhysicsContactListener();
                listener.setBeginContact(this._onBeginContact);
                listener.setEndContact(this._onEndContact);
                listener.setPreSolve(this._onPreSolve);
                listener.setPostSolve(this._onPostSolve);
                this._world.SetContactListener(listener);
                this._contactListener = listener;
                this._aabbQueryCallback = new cc.PhysicsAABBQueryCallback();
                this._raycastQueryCallback = new cc.PhysicsRayCastCallback();
            },
            _init: function _init() {
                this.enabled = true;
                this.debugDrawFlags = DrawBits.e_shapeBit;
            },
            _getWorld: function _getWorld() {
                return this._world;
            },
            _syncNode: function _syncNode() {
                var bodies = this._bodies;
                for (var i = 0, l = bodies.length; i < l; i++) {
                    var body = bodies[i];
                    var node = body.node;
                    var b2body = body._b2Body;
                    var pos = b2body.GetPosition();
                    vec2_tmp.x = pos.x * PTM_RATIO;
                    vec2_tmp.y = pos.y * PTM_RATIO;
                    var angle = b2body.GetAngle() * PHYSICS_ANGLE_TO_ANGLE;
                    if (node.parent.parent !== null) {
                        vec2_tmp = node.parent.convertToNodeSpaceAR(vec2_tmp);
                        angle = convertToNodeRotation(node.parent, angle);
                    }
                    var tempMask = node._eventMask;
                    node._eventMask = 0;
                    node.position = vec2_tmp;
                    node.angle = -angle;
                    node._eventMask = tempMask;
                    if (body.type === BodyType.Animated) {
                        body.resetVelocity();
                    }
                }
            },
            _onBeginContact: function _onBeginContact(b2contact) {
                var c = cc.PhysicsContact.get(b2contact);
                c.emit(ContactType.BEGIN_CONTACT);
            },
            _onEndContact: function _onEndContact(b2contact) {
                var c = b2contact._contact;
                if (!c) {
                    return;
                }
                c.emit(ContactType.END_CONTACT);
                cc.PhysicsContact.put(b2contact);
            },
            _onPreSolve: function _onPreSolve(b2contact) {
                var c = b2contact._contact;
                if (!c) {
                    return;
                }
                c.emit(ContactType.PRE_SOLVE);
            },
            _onPostSolve: function _onPostSolve(b2contact, impulse) {
                var c = b2contact._contact;
                if (!c) {
                    return;
                }
                c._impulse = impulse;
                c.emit(ContactType.POST_SOLVE);
                c._impulse = null;
            },
            _checkDebugDrawValid: function _checkDebugDrawValid() {
                if (!this._debugDrawer || !this._debugDrawer.isValid) {
                    var node = new cc.Node('PHYSICS_MANAGER_DEBUG_DRAW');
                    node.zIndex = cc.macro.MAX_ZINDEX;
                    cc.game.addPersistRootNode(node);
                    this._debugDrawer = node.addComponent(cc.Graphics);
                    var debugDraw = new DebugDraw(this._debugDrawer);
                    debugDraw.SetFlags(this.debugDrawFlags);
                    this._world.SetDebugDraw(debugDraw);
                }
            }
        });
        cc.js.getset(PhysicsManager.prototype, 'enabled', function () {
            return this._enabled;
        }, function (value) {
            if (CC_EDITOR)
                return;
            if (value && !this._world) {
                var world = new b2.World(new b2.Vec2(0, -10));
                world.SetAllowSleeping(true);
                this._world = world;
                this._initCallback();
            }
            this._enabled = value;
        });
        cc.js.getset(PhysicsManager.prototype, 'debugDrawFlags', function () {
            return this._debugDrawFlags;
        }, function (value) {
            if (CC_EDITOR)
                return;
            if (value && !this._debugDrawFlags) {
                if (this._debugDrawer && this._debugDrawer.node)
                    this._debugDrawer.node.active = true;
            } else if (!value && this._debugDrawFlags) {
                if (this._debugDrawer && this._debugDrawer.node)
                    this._debugDrawer.node.active = false;
            }
            if (value) {
                this._checkDebugDrawValid();
                this._world.m_debugDraw.SetFlags(value);
            }
            this._debugDrawFlags = value;
            if (value) {
                this._checkDebugDrawValid();
                this._world.m_debugDraw.SetFlags(value);
            }
        });
        cc.js.getset(PhysicsManager.prototype, 'gravity', function () {
            if (this._world) {
                var g = this._world.GetGravity();
                return cc.v2(g.x * PTM_RATIO, g.y * PTM_RATIO);
            }
            return cc.v2();
        }, function (value) {
            if (this._world) {
                this._world.SetGravity(new b2.Vec2(value.x / PTM_RATIO, value.y / PTM_RATIO));
            }
        });
        cc.PhysicsManager = module.exports = PhysicsManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,