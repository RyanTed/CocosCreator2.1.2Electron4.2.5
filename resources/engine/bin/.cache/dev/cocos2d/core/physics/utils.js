(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/utils.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function getWorldRotation(node) {
            var rot = node.angle;
            var parent = node.parent;
            while (parent.parent) {
                rot += parent.angle;
                parent = parent.parent;
            }
            return -rot;
        }
        function getWorldScale(node) {
            var scaleX = node.scaleX;
            var scaleY = node.scaleY;
            var parent = node.parent;
            while (parent.parent) {
                scaleX *= parent.scaleX;
                scaleY *= parent.scaleY;
                parent = parent.parent;
            }
            return cc.v2(scaleX, scaleY);
        }
        function convertToNodeRotation(node, rotation) {
            rotation -= -node.angle;
            var parent = node.parent;
            while (parent.parent) {
                rotation -= -parent.angle;
                parent = parent.parent;
            }
            return rotation;
        }
        module.exports = {
            getWorldRotation: getWorldRotation,
            getWorldScale: getWorldScale,
            convertToNodeRotation: convertToNodeRotation
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,