(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/physics/collider/CCPhysicsChainCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var PTM_RATIO = require('../CCPhysicsTypes').PTM_RATIO;
        var PhysicsChainCollider = cc.Class({
            name: 'cc.PhysicsChainCollider',
            extends: cc.PhysicsCollider,
            editor: {
                menu: CC_EDITOR && 'i18n:MAIN_MENU.component.physics/Collider/Chain',
                inspector: CC_EDITOR && 'packages://inspector/inspectors/comps/physics/points-base-collider.js',
                requireComponent: cc.RigidBody
            },
            properties: {
                loop: false,
                points: {
                    default: function _default() {
                        return [
                            cc.v2(-50, 0),
                            cc.v2(50, 0)
                        ];
                    },
                    type: [cc.Vec2]
                },
                threshold: {
                    default: 1,
                    serializable: false,
                    visible: false
                }
            },
            _createShape: function _createShape(scale) {
                var shape = new b2.ChainShape();
                var points = this.points;
                var vertices = [];
                for (var i = 0; i < points.length; i++) {
                    var p = points[i];
                    vertices.push(new b2.Vec2(p.x / PTM_RATIO * scale.x, p.y / PTM_RATIO * scale.y));
                }
                if (this.loop) {
                    shape.CreateLoop(vertices, vertices.length);
                } else {
                    shape.CreateChain(vertices, vertices.length);
                }
                return shape;
            },
            resetInEditor: CC_EDITOR && function () {
                this.resetPointsByContour();
            },
            resetPointsByContour: CC_EDITOR && function () {
                var PhysicsUtils = Editor.require('scene://utils/physics');
                PhysicsUtils.resetPoints(this, {
                    threshold: this.threshold,
                    loop: this.loop
                });
            }
        });
        cc.PhysicsChainCollider = module.exports = PhysicsChainCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,