(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event/event.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        cc.Event = function (type, bubbles) {
            this.type = type;
            this.bubbles = !!bubbles;
            this.target = null;
            this.currentTarget = null;
            this.eventPhase = 0;
            this._propagationStopped = false;
            this._propagationImmediateStopped = false;
        };
        cc.Event.prototype = {
            constructor: cc.Event,
            unuse: function unuse() {
                this.type = cc.Event.NO_TYPE;
                this.target = null;
                this.currentTarget = null;
                this.eventPhase = cc.Event.NONE;
                this._propagationStopped = false;
                this._propagationImmediateStopped = false;
            },
            reuse: function reuse(type, bubbles) {
                this.type = type;
                this.bubbles = bubbles || false;
            },
            stopPropagation: function stopPropagation() {
                this._propagationStopped = true;
            },
            stopPropagationImmediate: function stopPropagationImmediate() {
                this._propagationImmediateStopped = true;
            },
            isStopped: function isStopped() {
                return this._propagationStopped || this._propagationImmediateStopped;
            },
            getCurrentTarget: function getCurrentTarget() {
                return this.currentTarget;
            },
            getType: function getType() {
                return this.type;
            }
        };
        cc.Event.NO_TYPE = 'no_type';
        cc.Event.TOUCH = 'touch';
        cc.Event.MOUSE = 'mouse';
        cc.Event.KEYBOARD = 'keyboard';
        cc.Event.ACCELERATION = 'acceleration';
        cc.Event.NONE = 0;
        cc.Event.CAPTURING_PHASE = 1;
        cc.Event.AT_TARGET = 2;
        cc.Event.BUBBLING_PHASE = 3;
        var EventCustom = function EventCustom(type, bubbles) {
            cc.Event.call(this, type, bubbles);
            this.detail = null;
        };
        js.extend(EventCustom, cc.Event);
        EventCustom.prototype.reset = EventCustom;
        EventCustom.prototype.setUserData = function (data) {
            this.detail = data;
        };
        EventCustom.prototype.getUserData = function () {
            return this.detail;
        };
        EventCustom.prototype.getEventName = cc.Event.prototype.getType;
        var MAX_POOL_SIZE = 10;
        var _eventPool = new js.Pool(MAX_POOL_SIZE);
        EventCustom.put = function (event) {
            _eventPool.put(event);
        };
        EventCustom.get = function (type, bubbles) {
            var event = _eventPool._get();
            if (event) {
                event.reset(type, bubbles);
            } else {
                event = new EventCustom(type, bubbles);
            }
            return event;
        };
        cc.Event.EventCustom = EventCustom;
        module.exports = cc.Event;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,