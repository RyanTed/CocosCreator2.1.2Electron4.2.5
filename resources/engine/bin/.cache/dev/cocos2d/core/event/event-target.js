(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event/event-target.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var CallbacksInvoker = require('../platform/callbacks-invoker');
        var fastRemove = js.array.fastRemove;
        function EventTarget() {
            CallbacksInvoker.call(this);
        }
        js.extend(EventTarget, CallbacksInvoker);
        var proto = EventTarget.prototype;
        proto.on = function (type, callback, target) {
            if (!callback) {
                cc.errorID(6800);
                return;
            }
            if (!this.hasEventListener(type, callback, target)) {
                this.add(type, callback, target);
                if (target && target.__eventTargets)
                    target.__eventTargets.push(this);
            }
            return callback;
        };
        proto.off = function (type, callback, target) {
            if (!callback) {
                this.removeAll(type);
            } else {
                this.remove(type, callback, target);
                if (target && target.__eventTargets) {
                    fastRemove(target.__eventTargets, this);
                }
            }
        };
        proto.targetOff = proto.removeAll;
        proto.once = function (type, callback, target) {
            var eventType_hasOnceListener = '__ONCE_FLAG:' + type;
            var hasOnceListener = this.hasEventListener(eventType_hasOnceListener, callback, target);
            if (!hasOnceListener) {
                var self = this;
                var onceWrapper = function onceWrapper(arg1, arg2, arg3, arg4, arg5) {
                    self.off(type, onceWrapper, target);
                    self.remove(eventType_hasOnceListener, callback, target);
                    callback.call(this, arg1, arg2, arg3, arg4, arg5);
                };
                this.on(type, onceWrapper, target);
                this.add(eventType_hasOnceListener, callback, target);
            }
        };
        proto.emit = CallbacksInvoker.prototype.invoke;
        proto.dispatchEvent = function (event) {
            this.invoke(event.type, event);
        };
        cc.EventTarget = module.exports = EventTarget;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,