(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/geom-utils/triangle.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var vec3 = cc.vmath.vec3;
        function triangle(ax, ay, az, bx, by, bz, cx, cy, cz) {
            this.a = vec3.create(ax, ay, az);
            this.b = vec3.create(bx, by, bz);
            this.c = vec3.create(cx, cy, cz);
        }
        triangle.create = function (ax, ay, az, bx, by, bz, cx, cy, cz) {
            return new triangle(ax, ay, az, bx, by, bz, cx, cy, cz);
        };
        triangle.clone = function (t) {
            return new triangle(t.a.x, t.a.y, t.a.z, t.b.x, t.b.y, t.b.z, t.c.x, t.c.y, t.c.z);
        };
        triangle.copy = function (out, t) {
            vec3.copy(out.a, t.a);
            vec3.copy(out.b, t.b);
            vec3.copy(out.c, t.c);
            return out;
        };
        triangle.fromPoints = function (out, a, b, c) {
            vec3.copy(out.a, a);
            vec3.copy(out.b, b);
            vec3.copy(out.c, c);
            return out;
        };
        triangle.set = function (out, ax, ay, az, bx, by, bz, cx, cy, cz) {
            out.a.x = ax;
            out.a.y = ay;
            out.a.z = az;
            out.b.x = bx;
            out.b.y = by;
            out.b.z = bz;
            out.c.x = cx;
            out.c.y = cy;
            out.c.z = cz;
            return out;
        };
        module.exports = triangle;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,