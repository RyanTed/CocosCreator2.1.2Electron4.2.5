(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/box.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;
            var height = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;
            var length = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
            var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var ws = opts.widthSegments !== undefined ? opts.widthSegments : 1;
            var hs = opts.heightSegments !== undefined ? opts.heightSegments : 1;
            var ls = opts.lengthSegments !== undefined ? opts.lengthSegments : 1;
            var inv = opts.invWinding !== undefined ? opts.invWinding : false;
            var hw = width * 0.5;
            var hh = height * 0.5;
            var hl = length * 0.5;
            var corners = [
                _vmath.vec3.set(c0, -hw, -hh, hl),
                _vmath.vec3.set(c1, hw, -hh, hl),
                _vmath.vec3.set(c2, hw, hh, hl),
                _vmath.vec3.set(c3, -hw, hh, hl),
                _vmath.vec3.set(c4, hw, -hh, -hl),
                _vmath.vec3.set(c5, -hw, -hh, -hl),
                _vmath.vec3.set(c6, -hw, hh, -hl),
                _vmath.vec3.set(c7, hw, hh, -hl)
            ];
            var faceAxes = [
                [
                    2,
                    3,
                    1
                ],
                [
                    4,
                    5,
                    7
                ],
                [
                    7,
                    6,
                    2
                ],
                [
                    1,
                    0,
                    4
                ],
                [
                    1,
                    4,
                    2
                ],
                [
                    5,
                    0,
                    6
                ]
            ];
            var faceNormals = [
                [
                    0,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    -1
                ],
                [
                    0,
                    1,
                    0
                ],
                [
                    0,
                    -1,
                    0
                ],
                [
                    1,
                    0,
                    0
                ],
                [
                    -1,
                    0,
                    0
                ]
            ];
            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];
            var minPos = _vmath.vec3.create(-hw, -hh, -hl);
            var maxPos = _vmath.vec3.create(hw, hh, hl);
            var boundingRadius = Math.sqrt(hw * hw + hh * hh + hl * hl);
            function _buildPlane(side, uSegments, vSegments) {
                var u = void 0, v = void 0;
                var ix = void 0, iy = void 0;
                var offset = positions.length / 3;
                var faceAxe = faceAxes[side];
                var faceNormal = faceNormals[side];
                for (iy = 0; iy <= vSegments; iy++) {
                    for (ix = 0; ix <= uSegments; ix++) {
                        u = ix / uSegments;
                        v = iy / vSegments;
                        _vmath.vec3.lerp(temp1, corners[faceAxe[0]], corners[faceAxe[1]], u);
                        _vmath.vec3.lerp(temp2, corners[faceAxe[0]], corners[faceAxe[2]], v);
                        _vmath.vec3.sub(temp3, temp2, corners[faceAxe[0]]);
                        _vmath.vec3.add(r, temp1, temp3);
                        positions.push(r.x, r.y, r.z);
                        normals.push(faceNormal[0], faceNormal[1], faceNormal[2]);
                        uvs.push(u, v);
                        if (ix < uSegments && iy < vSegments) {
                            var useg1 = uSegments + 1;
                            var a = ix + iy * useg1;
                            var b = ix + (iy + 1) * useg1;
                            var c = ix + 1 + (iy + 1) * useg1;
                            var d = ix + 1 + iy * useg1;
                            if (inv) {
                                indices.push(offset + a, offset + b, offset + d);
                                indices.push(offset + d, offset + b, offset + c);
                            } else {
                                indices.push(offset + a, offset + d, offset + b);
                                indices.push(offset + b, offset + d, offset + c);
                            }
                        }
                    }
                }
            }
            _buildPlane(0, ws, hs);
            _buildPlane(4, ls, hs);
            _buildPlane(1, ws, hs);
            _buildPlane(5, ls, hs);
            _buildPlane(3, ws, ls);
            _buildPlane(2, ws, ls);
            return new _vertexData2.default(positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var temp1 = _vmath.vec3.create(0, 0, 0);
        var temp2 = _vmath.vec3.create(0, 0, 0);
        var temp3 = _vmath.vec3.create(0, 0, 0);
        var r = _vmath.vec3.create(0, 0, 0);
        var c0 = _vmath.vec3.create(0, 0, 0);
        var c1 = _vmath.vec3.create(0, 0, 0);
        var c2 = _vmath.vec3.create(0, 0, 0);
        var c3 = _vmath.vec3.create(0, 0, 0);
        var c4 = _vmath.vec3.create(0, 0, 0);
        var c5 = _vmath.vec3.create(0, 0, 0);
        var c6 = _vmath.vec3.create(0, 0, 0);
        var c7 = _vmath.vec3.create(0, 0, 0);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,