(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _utils = require('./utils');
        var _utils2 = _interopRequireDefault(_utils);
        var _box = require('./box');
        var _box2 = _interopRequireDefault(_box);
        var _cone = require('./cone');
        var _cone2 = _interopRequireDefault(_cone);
        var _cylinder = require('./cylinder');
        var _cylinder2 = _interopRequireDefault(_cylinder);
        var _plane = require('./plane');
        var _plane2 = _interopRequireDefault(_plane);
        var _quad = require('./quad');
        var _quad2 = _interopRequireDefault(_quad);
        var _sphere = require('./sphere');
        var _sphere2 = _interopRequireDefault(_sphere);
        var _torus = require('./torus');
        var _torus2 = _interopRequireDefault(_torus);
        var _capsule = require('./capsule');
        var _capsule2 = _interopRequireDefault(_capsule);
        var _polyhedron = require('./polyhedron');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        cc.primitive = Object.assign({
            box: _box2.default,
            cone: _cone2.default,
            cylinder: _cylinder2.default,
            plane: _plane2.default,
            quad: _quad2.default,
            sphere: _sphere2.default,
            torus: _torus2.default,
            capsule: _capsule2.default,
            polyhedron: _polyhedron.polyhedron,
            PolyhedronType: _polyhedron.PolyhedronType,
            VertexData: _vertexData2.default
        }, _utils2.default);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,