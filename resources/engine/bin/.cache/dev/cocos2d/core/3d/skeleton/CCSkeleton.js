(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/CCSkeleton.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Skeleton = cc.Class({
            name: 'cc.Skeleton',
            extends: cc.Asset,
            ctor: function ctor() {
                this._bindposes = [];
                this._uniqueBindPoses = [];
                this._jointPaths = [];
            },
            properties: {
                _model: cc.Model,
                _jointIndices: [],
                _skinIndex: -1,
                jointPaths: {
                    get: function get() {
                        return this._jointPaths;
                    }
                },
                bindposes: {
                    get: function get() {
                        return this._bindposes;
                    }
                },
                uniqueBindPoses: {
                    get: function get() {
                        return this._uniqueBindPoses;
                    }
                },
                model: {
                    get: function get() {
                        return this._model;
                    }
                }
            },
            onLoad: function onLoad() {
                var nodes = this._model.nodes;
                var jointIndices = this._jointIndices;
                var jointPaths = this._jointPaths;
                var bindposes = this._bindposes;
                var uniqueBindPoses = this._uniqueBindPoses;
                for (var i = 0; i < jointIndices.length; i++) {
                    var node = nodes[jointIndices[i]];
                    jointPaths[i] = node.path;
                    if (node.uniqueBindPose) {
                        bindposes[i] = uniqueBindPoses[i] = node.uniqueBindPose;
                    } else {
                        bindposes[i] = node.bindpose[this._skinIndex];
                    }
                }
            }
        });
        cc.Skeleton = module.exports = Skeleton;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,