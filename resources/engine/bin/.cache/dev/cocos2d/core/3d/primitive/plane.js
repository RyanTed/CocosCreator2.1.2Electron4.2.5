(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/plane.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            var width = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 10;
            var length = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 10;
            var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
            var uSegments = opts.widthSegments !== undefined ? opts.widthSegments : 10;
            var vSegments = opts.lengthSegments !== undefined ? opts.lengthSegments : 10;
            var hw = width * 0.5;
            var hl = length * 0.5;
            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];
            var minPos = _vmath.vec3.create(-hw, 0, -hl);
            var maxPos = _vmath.vec3.create(hw, 0, hl);
            var boundingRadius = Math.sqrt(width * width + length * length);
            _vmath.vec3.set(c00, -hw, 0, hl);
            _vmath.vec3.set(c10, hw, 0, hl);
            _vmath.vec3.set(c01, -hw, 0, -hl);
            for (var y = 0; y <= vSegments; y++) {
                for (var x = 0; x <= uSegments; x++) {
                    var u = x / uSegments;
                    var v = y / vSegments;
                    _vmath.vec3.lerp(temp1, c00, c10, u);
                    _vmath.vec3.lerp(temp2, c00, c01, v);
                    _vmath.vec3.sub(temp3, temp2, c00);
                    _vmath.vec3.add(r, temp1, temp3);
                    positions.push(r.x, r.y, r.z);
                    normals.push(0, 1, 0);
                    uvs.push(u, v);
                    if (x < uSegments && y < vSegments) {
                        var useg1 = uSegments + 1;
                        var a = x + y * useg1;
                        var b = x + (y + 1) * useg1;
                        var c = x + 1 + (y + 1) * useg1;
                        var d = x + 1 + y * useg1;
                        indices.push(a, d, b);
                        indices.push(d, c, b);
                    }
                }
            }
            return new _vertexData2.default(positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var temp1 = _vmath.vec3.create(0, 0, 0);
        var temp2 = _vmath.vec3.create(0, 0, 0);
        var temp3 = _vmath.vec3.create(0, 0, 0);
        var r = _vmath.vec3.create(0, 0, 0);
        var c00 = _vmath.vec3.create(0, 0, 0);
        var c10 = _vmath.vec3.create(0, 0, 0);
        var c01 = _vmath.vec3.create(0, 0, 0);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,