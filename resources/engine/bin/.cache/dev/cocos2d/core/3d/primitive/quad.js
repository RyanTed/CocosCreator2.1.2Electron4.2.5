(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/quad.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            return new _vertexData2.default(positions, indices, normals, uvs, minPos, maxPos, boundingRadius);
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var positions = [
            -0.5,
            -0.5,
            0,
            -0.5,
            0.5,
            0,
            0.5,
            0.5,
            0,
            0.5,
            -0.5,
            0
        ];
        var normals = [
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1,
            0,
            0,
            1
        ];
        var uvs = [
            0,
            0,
            0,
            1,
            1,
            1,
            1,
            0
        ];
        var indices = [
            0,
            3,
            1,
            3,
            2,
            1
        ];
        var minPos = _vmath.vec3.create(-0.5, -0.5, 0);
        var maxPos = _vmath.vec3.create(0.5, 0.5, 0);
        var boundingRadius = Math.sqrt(0.5 * 0.5 + 0.5 * 0.5);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,