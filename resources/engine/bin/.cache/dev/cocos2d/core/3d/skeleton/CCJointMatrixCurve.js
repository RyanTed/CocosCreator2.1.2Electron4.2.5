(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/CCJointMatrixCurve.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _require = require('../../../animation/animation-curves'), DynamicAnimCurve = _require.DynamicAnimCurve, quickFindIndex = _require.quickFindIndex;
        var JointMatrixCurve = cc.Class({
            name: 'cc.JointMatrixCurve',
            extends: DynamicAnimCurve,
            _findFrameIndex: quickFindIndex,
            sample: function sample(time, ratio) {
                var ratios = this.ratios;
                var index = this._findFrameIndex(ratios, ratio);
                if (index < -1) {
                    index = ~index - 1;
                }
                var pairs = this.pairs;
                for (var i = 0; i < pairs.length; i++) {
                    var pair = pairs[i];
                    pair.target._jointMatrix = pair.values[index];
                }
            }
        });
        module.exports = JointMatrixCurve;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDSm9pbnRNYXRyaXhDdXJ2ZS5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvY29yZS8zZC9za2VsZXRvbi9DQ0pvaW50TWF0cml4Q3VydmUuanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkR5bmFtaWNBbmltQ3VydmUiLCJxdWlja0ZpbmRJbmRleCIsImNjIiwiX2ZpbmRGcmFtZUluZGV4IiwidGltZSIsInJhdGlvIiwiSm9pbnRNYXRyaXhDdXJ2ZSIsIkNsYXNzIiwibmFtZSIsImV4dGVuZHMiLCJzYW1wbGUiLCJyYXRpb3MiLCJpbmRleCIsInBhaXJzIiwiaSIsImxlbmd0aCIsInBhaXIiLCJ0YXJnZXQiLCJfam9pbnRNYXRyaXgiLCJ2YWx1ZXMiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQTZDQSxJQUFRLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLGtDQUFSQTttQkFBckNDLE9BQUFBLEdBQUFBLE1BQUFBO3FCQUFrQkM7O1FBRUhDLE9BQUEsT0FBQSxDQUFTLE9BQVQsQ0FBQUE7UUFDYixVQURzQixPQUN0QixFQURzQjtBQUFBLFFBRW5CRixPQUZtQixpQkFBQSxDQUFBLE9BQUEsQ0FBQSxPQUFBLEVBQUEsVUFBQSxDQUVuQkEsQ0FGbUI7QUFBQTtJQUk1QkcsU0FBaUJGLFFBQWpCRSxDQUo0QixPQUk1QkEsRUFKNEIsT0FJNUJBLEVBSjRCLE1BSTVCQSxFQUo0QjtBQUFBLFFBQUEsSUFLcEJDLENBQUFBLE9BTG9CLEVBS2RDO0FBQUFBLFlBTGMsaUJBQUEsQ0FLUCxjQUxPLENBS1AsVUFMTyxFQUtQLE1BTE8sRUFLZEE7QUFBQUEsU0FMYztBQUFBO3VCQUZhTixPQUFBQSxDQUFRLHFDQUFSQSxHQUFyQ0MsZ0JBQUFBLFlBQUFBLGtCQUFrQkMsY0FBQUEsWUFBQUE7UUFFMUIsSUFBSUssZ0JBQUFBLEdBQW1CSixFQUFBQSxDQUFHSyxLQUFITCxDQUFTO0FBQUEsWUFDNUJNLElBQUFBLEVBQU0scUJBRHNCO0FBQUEsWUFFNUJDLE9BQUFBLEVBQVNULGdCQUZtQjtBQUFBLFlBSTVCRyxlQUFBQSxFQUFpQkYsY0FKVztBQUFBLFlBSzVCUyxNQUFBQSxFQUw0QixTQUFBLE1BQUEsQ0FLcEJOLElBTG9CLEVBS2RDLEtBTGMsRUFLUDtBQUFBLGdCQUNqQixJQUFJTSxNQUFBQSxHQUFTLEtBQUtBLE1BQWxCLENBRGlCO0FBQUEsZ0JBRWpCLElBQUlDLEtBQUFBLEdBQVEsS0FBS1QsZUFBTCxDQUFxQlEsTUFBckIsRUFBNkJOLEtBQTdCLENBQVosQ0FGaUI7QUFBQSxnQkFHakIsSUFBSU8sS0FBQUEsR0FBUSxDQUFDLENBQWIsRUFBZ0I7QUFBQSxvQkFDWkEsS0FBQUEsR0FBUSxDQUFDQSxLQUFELEdBQVMsQ0FBakJBLENBRFk7QUFBQSxpQkFIQztBQUFBLGdCQU9qQixJQUFJQyxLQUFBQSxHQUFRLEtBQUtBLEtBQWpCLENBUGlCO0FBQUEsZ0JBUWpCLEtBQUssSUFBSUMsQ0FBQUEsR0FBSSxDQUFSLENBQUwsQ0FBZ0JBLENBQUFBLEdBQUlELEtBQUFBLENBQU1FLE1BQTFCLEVBQWtDRCxDQUFBQSxFQUFsQyxFQUF1QztBQUFBLG9CQUNuQyxJQUFJRSxJQUFBQSxHQUFPSCxLQUFBQSxDQUFNQyxDQUFORCxDQUFYLENBRG1DO0FBQUEsb0JBRW5DRyxJQUFBQSxDQUFLQyxNQUFMRCxDQUFZRSxZQUFaRixHQUEyQkEsSUFBQUEsQ0FBS0csTUFBTEgsQ0FBWUosS0FBWkksQ0FBM0JBLENBRm1DO0FBQUEsaUJBUnRCO0FBQUEsYUFMTztBQUFBLFNBQVRkLENBQXZCO1FBb0JBa0IsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJkLGdCQUFqQmMsQ0FwQmdDO0FBQUE7SUFPWixJQUFBLE9BQUEsRUFBS2pCO0FBQUFBLFFBQ0QsUUFBQSxDQUFBLFFBQUEsQ0FBQSxPQUFBLEVBQUEsU0FBQSxFQUFBLFFBQUEsRUFEQ0E7QUFBQUEsS0FBTCxNQUdYO0FBQUE7WUFFZ0JVLFFBQUFBLENBQWpCLFFBQUEsQ0FBQSxPQUFpQkEsRUFBakIsU0FBaUJBLEVBQWpCLFFBQWlCQTtXQUZoQjtBQUFBIiwiZmlsZSI6IkNDSm9pbnRNYXRyaXhDdXJ2ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHsgRHluYW1pY0FuaW1DdXJ2ZSwgcXVpY2tGaW5kSW5kZXggfSA9IHJlcXVpcmUoJy4uLy4uLy4uL2FuaW1hdGlvbi9hbmltYXRpb24tY3VydmVzJyk7XHJcblxyXG5sZXQgSm9pbnRNYXRyaXhDdXJ2ZSA9IGNjLkNsYXNzKHtcclxuICAgIG5hbWU6ICdjYy5Kb2ludE1hdHJpeEN1cnZlJyxcclxuICAgIGV4dGVuZHM6IER5bmFtaWNBbmltQ3VydmUsXHJcblxyXG4gICAgX2ZpbmRGcmFtZUluZGV4OiBxdWlja0ZpbmRJbmRleCxcclxuICAgIHNhbXBsZSAodGltZSwgcmF0aW8pIHtcclxuICAgICAgICBsZXQgcmF0aW9zID0gdGhpcy5yYXRpb3M7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fZmluZEZyYW1lSW5kZXgocmF0aW9zLCByYXRpbyk7XHJcbiAgICAgICAgaWYgKGluZGV4IDwgLTEpIHtcclxuICAgICAgICAgICAgaW5kZXggPSB+aW5kZXggLSAxO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHBhaXJzID0gdGhpcy5wYWlycztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBwYWlyID0gcGFpcnNbaV07XHJcbiAgICAgICAgICAgIHBhaXIudGFyZ2V0Ll9qb2ludE1hdHJpeCA9IHBhaXIudmFsdWVzW2luZGV4XTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0pO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBKb2ludE1hdHJpeEN1cnZlO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBfcmVxdWlyZSA9IHJlcXVpcmUoJy4uLy4uLy4uL2FuaW1hdGlvbi9hbmltYXRpb24tY3VydmVzJyksXG4gICAgRHluYW1pY0FuaW1DdXJ2ZSA9IF9yZXF1aXJlLkR5bmFtaWNBbmltQ3VydmUsXG4gICAgcXVpY2tGaW5kSW5kZXggPSBfcmVxdWlyZS5xdWlja0ZpbmRJbmRleDtcblxudmFyIEpvaW50TWF0cml4Q3VydmUgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ2NjLkpvaW50TWF0cml4Q3VydmUnLFxuICAgIGV4dGVuZHM6IER5bmFtaWNBbmltQ3VydmUsXG5cbiAgICBfZmluZEZyYW1lSW5kZXg6IHF1aWNrRmluZEluZGV4LFxuICAgIHNhbXBsZTogZnVuY3Rpb24gc2FtcGxlKHRpbWUsIHJhdGlvKSB7XG4gICAgICAgIHZhciByYXRpb3MgPSB0aGlzLnJhdGlvcztcbiAgICAgICAgdmFyIGluZGV4ID0gdGhpcy5fZmluZEZyYW1lSW5kZXgocmF0aW9zLCByYXRpbyk7XG4gICAgICAgIGlmIChpbmRleCA8IC0xKSB7XG4gICAgICAgICAgICBpbmRleCA9IH5pbmRleCAtIDE7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcGFpcnMgPSB0aGlzLnBhaXJzO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB2YXIgcGFpciA9IHBhaXJzW2ldO1xuICAgICAgICAgICAgcGFpci50YXJnZXQuX2pvaW50TWF0cml4ID0gcGFpci52YWx1ZXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgfVxufSk7XG5cbm1vZHVsZS5leHBvcnRzID0gSm9pbnRNYXRyaXhDdXJ2ZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRTbTlwYm5STllYUnlhWGhEZFhKMlpTNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aVJIbHVZVzFwWTBGdWFXMURkWEoyWlNJc0luRjFhV05yUm1sdVpFbHVaR1Y0SWl3aVNtOXBiblJOWVhSeWFYaERkWEoyWlNJc0ltTmpJaXdpUTJ4aGMzTWlMQ0p1WVcxbElpd2laWGgwWlc1a2N5SXNJbDltYVc1a1JuSmhiV1ZKYm1SbGVDSXNJbk5oYlhCc1pTSXNJblJwYldVaUxDSnlZWFJwYnlJc0luSmhkR2x2Y3lJc0ltbHVaR1Y0SWl3aWNHRnBjbk1pTENKcElpd2liR1Z1WjNSb0lpd2ljR0ZwY2lJc0luUmhjbWRsZENJc0lsOXFiMmx1ZEUxaGRISnBlQ0lzSW5aaGJIVmxjeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPMlZCUVRaRFFTeFJRVUZSTEhGRFFVRlNMRU03U1VGQmNrTkRMR2RDTEZsQlFVRkJMR2RDTzBsQlFXdENReXhqTEZsQlFVRkJMR003TzBGQlJURkNMRWxCUVVsRExHMUNRVUZ0UWtNc1IwRkJSME1zUzBGQlNDeERRVUZUTzBGQlF6VkNReXhWUVVGTkxIRkNRVVJ6UWp0QlFVVTFRa01zWVVGQlUwNHNaMEpCUm0xQ096dEJRVWsxUWs4c2NVSkJRV2xDVGl4alFVcFhPMEZCU3pWQ1R5eFZRVXcwUWl4clFrRkxjRUpETEVsQlRHOUNMRVZCUzJSRExFdEJUR01zUlVGTFVEdEJRVU5xUWl4WlFVRkpReXhUUVVGVExFdEJRVXRCTEUxQlFXeENPMEZCUTBFc1dVRkJTVU1zVVVGQlVTeExRVUZMVEN4bFFVRk1MRU5CUVhGQ1NTeE5RVUZ5UWl4RlFVRTJRa1FzUzBGQk4wSXNRMEZCV2p0QlFVTkJMRmxCUVVsRkxGRkJRVkVzUTBGQlF5eERRVUZpTEVWQlFXZENPMEZCUTFwQkxHOUNRVUZSTEVOQlFVTkJMRXRCUVVRc1IwRkJVeXhEUVVGcVFqdEJRVU5JT3p0QlFVVkVMRmxCUVVsRExGRkJRVkVzUzBGQlMwRXNTMEZCYWtJN1FVRkRRU3hoUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCWWl4RlFVRm5Ra0VzU1VGQlNVUXNUVUZCVFVVc1RVRkJNVUlzUlVGQmEwTkVMRWRCUVd4RExFVkJRWFZETzBGQlEyNURMR2RDUVVGSlJTeFBRVUZQU0N4TlFVRk5ReXhEUVVGT0xFTkJRVmc3UVVGRFFVVXNhVUpCUVV0RExFMUJRVXdzUTBGQldVTXNXVUZCV2l4SFFVRXlRa1lzUzBGQlMwY3NUVUZCVEN4RFFVRlpVQ3hMUVVGYUxFTkJRVE5DTzBGQlEwZzdRVUZEU2p0QlFXcENNa0lzUTBGQlZDeERRVUYyUWpzN1FVRnZRa0ZSTEU5QlFVOURMRTlCUVZBc1IwRkJhVUp1UWl4blFrRkJha0lpTENKbWFXeGxJam9pUTBOS2IybHVkRTFoZEhKcGVFTjFjblpsTG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lZMjl1YzNRZ2V5QkVlVzVoYldsalFXNXBiVU4xY25abExDQnhkV2xqYTBacGJtUkpibVJsZUNCOUlEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dkxpNHZZVzVwYldGMGFXOXVMMkZ1YVcxaGRHbHZiaTFqZFhKMlpYTW5LVHRjY2x4dVhISmNibXhsZENCS2IybHVkRTFoZEhKcGVFTjFjblpsSUQwZ1kyTXVRMnhoYzNNb2UxeHlYRzRnSUNBZ2JtRnRaVG9nSjJOakxrcHZhVzUwVFdGMGNtbDRRM1Z5ZG1VbkxGeHlYRzRnSUNBZ1pYaDBaVzVrY3pvZ1JIbHVZVzFwWTBGdWFXMURkWEoyWlN4Y2NseHVYSEpjYmlBZ0lDQmZabWx1WkVaeVlXMWxTVzVrWlhnNklIRjFhV05yUm1sdVpFbHVaR1Y0TEZ4eVhHNGdJQ0FnYzJGdGNHeGxJQ2gwYVcxbExDQnlZWFJwYnlrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCeVlYUnBiM01nUFNCMGFHbHpMbkpoZEdsdmN6dGNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2FXNWtaWGdnUFNCMGFHbHpMbDltYVc1a1JuSmhiV1ZKYm1SbGVDaHlZWFJwYjNNc0lISmhkR2x2S1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQQ0F0TVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGJtUmxlQ0E5SUg1cGJtUmxlQ0F0SURFN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnY0dGcGNuTWdQU0IwYUdsekxuQmhhWEp6TzF4eVhHNGdJQ0FnSUNBZ0lHWnZjaUFvYkdWMElHa2dQU0F3T3lCcElEd2djR0ZwY25NdWJHVnVaM1JvT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdiR1YwSUhCaGFYSWdQU0J3WVdseWMxdHBYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjR0ZwY2k1MFlYSm5aWFF1WDJwdmFXNTBUV0YwY21sNElEMGdjR0ZwY2k1MllXeDFaWE5iYVc1a1pYaGRPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgxY2NseHVmU2s3WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRXB2YVc1MFRXRjBjbWw0UTNWeWRtVTdYSEpjYmlKZGZRPT0iXX0=