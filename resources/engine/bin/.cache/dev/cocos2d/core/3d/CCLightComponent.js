(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/CCLightComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = undefined;
        var _createClass = function () {
            function defineProperties(target, props) {
                for (var i = 0; i < props.length; i++) {
                    var descriptor = props[i];
                    descriptor.enumerable = descriptor.enumerable || false;
                    descriptor.configurable = true;
                    if ('value' in descriptor)
                        descriptor.writable = true;
                    Object.defineProperty(target, descriptor.key, descriptor);
                }
            }
            return function (Constructor, protoProps, staticProps) {
                if (protoProps)
                    defineProperties(Constructor.prototype, protoProps);
                if (staticProps)
                    defineProperties(Constructor, staticProps);
                return Constructor;
            };
        }();
        var _dec, _dec2, _dec3, _dec4, _dec5, _class, _desc, _value, _class2, _descriptor, _descriptor2, _descriptor3, _descriptor4, _descriptor5, _descriptor6, _descriptor7, _descriptor8, _descriptor9, _descriptor10, _descriptor11, _descriptor12, _descriptor13, _descriptor14, _class3, _temp;
        var _enums = require('../../renderer/enums');
        var _enums2 = _interopRequireDefault(_enums);
        var _light = require('../../renderer/scene/light');
        var _light2 = _interopRequireDefault(_light);
        var _valueTypes = require('../value-types');
        var _vmath = require('../vmath');
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        function _initDefineProp(target, property, descriptor, context) {
            if (!descriptor)
                return;
            Object.defineProperty(target, property, {
                enumerable: descriptor.enumerable,
                configurable: descriptor.configurable,
                writable: descriptor.writable,
                value: descriptor.initializer ? descriptor.initializer.call(context) : void 0
            });
        }
        function _classCallCheck(instance, Constructor) {
            if (!(instance instanceof Constructor)) {
                throw new TypeError('Cannot call a class as a function');
            }
        }
        function _possibleConstructorReturn(self, call) {
            if (!self) {
                throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called');
            }
            return call && (typeof call === 'object' || typeof call === 'function') ? call : self;
        }
        function _inherits(subClass, superClass) {
            if (typeof superClass !== 'function' && superClass !== null) {
                throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass);
            }
            subClass.prototype = Object.create(superClass && superClass.prototype, {
                constructor: {
                    value: subClass,
                    enumerable: false,
                    writable: true,
                    configurable: true
                }
            });
            if (superClass)
                Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
        }
        function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
            var desc = {};
            Object['ke' + 'ys'](descriptor).forEach(function (key) {
                desc[key] = descriptor[key];
            });
            desc.enumerable = !!desc.enumerable;
            desc.configurable = !!desc.configurable;
            if ('value' in desc || desc.initializer) {
                desc.writable = true;
            }
            desc = decorators.slice().reverse().reduce(function (desc, decorator) {
                return decorator(target, property, desc) || desc;
            }, desc);
            if (context && desc.initializer !== void 0) {
                desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
                desc.initializer = undefined;
            }
            if (desc.initializer === void 0) {
                Object['define' + 'Property'](target, property, desc);
                desc = null;
            }
            return desc;
        }
        function _initializerWarningHelper(descriptor, context) {
            throw new Error('Decorating class property failed. Please ensure that transform-class-properties is enabled.');
        }
        var renderer = require('../renderer/index');
        var Enum = require('../platform/CCEnum');
        var CCComponent = require('../components/CCComponent');
        var _require = require('../platform/CCClassDecorator'), ccclass = _require.ccclass, menu = _require.menu, inspector = _require.inspector, property = _require.property, executeInEditMode = _require.executeInEditMode;
        var LightType = Enum({
            DIRECTIONAL: 0,
            POINT: 1,
            SPOT: 2
        });
        var LightShadowType = Enum({
            NONE: 0,
            HARD: 2
        });
        var Light = (_dec = ccclass('cc.Light'), _dec2 = menu('i18n:MAIN_MENU.component.renderers/Light'), _dec3 = inspector('packages://inspector/inspectors/comps/light.js'), _dec4 = property({ type: LightType }), _dec5 = property({ type: LightShadowType }), _dec(_class = _dec2(_class = executeInEditMode(_class = _dec3(_class = (_class2 = (_temp = _class3 = function (_CCComponent) {
            _inherits(Light, _CCComponent);
            _createClass(Light, [
                {
                    key: 'type',
                    get: function get() {
                        return this._type;
                    },
                    set: function set(val) {
                        this._type = val;
                        var type = _enums2.default.LIGHT_DIRECTIONAL;
                        if (this._type === LightType.POINT) {
                            type = _enums2.default.LIGHT_POINT;
                        } else if (this._type === LightType.SPOT) {
                            type = _enums2.default.LIGHT_SPOT;
                        }
                        this._light.setType(type);
                    }
                },
                {
                    key: 'color',
                    get: function get() {
                        return this._color;
                    },
                    set: function set(val) {
                        this._color = val;
                        this._light.setColor(val.r / 255, val.g / 255, val.b / 255);
                    }
                },
                {
                    key: 'intensity',
                    get: function get() {
                        return this._intensity;
                    },
                    set: function set(val) {
                        this._intensity = val;
                        this._light.setIntensity(val);
                    }
                },
                {
                    key: 'range',
                    get: function get() {
                        return this._range;
                    },
                    set: function set(val) {
                        this._range = val;
                        this._light.setRange(val);
                    }
                },
                {
                    key: 'spotAngle',
                    get: function get() {
                        return this._spotAngle;
                    },
                    set: function set(val) {
                        this._spotAngle = val;
                        this._light.setSpotAngle((0, _vmath.toRadian)(val));
                    }
                },
                {
                    key: 'spotExp',
                    get: function get() {
                        return this._spotExp;
                    },
                    set: function set(val) {
                        this._spotExp = val;
                        this._light.setSpotExp(val);
                    }
                },
                {
                    key: 'shadowType',
                    get: function get() {
                        return this._shadowType;
                    },
                    set: function set(val) {
                        this._shadowType = val;
                        var type = _enums2.default.SHADOW_NONE;
                        if (val === LightShadowType.HARD) {
                            type = _enums2.default.SHADOW_HARD;
                        } else if (val === LightShadowType.SOFT) {
                            type = _enums2.default.SHADOW_SOFT;
                        }
                        this._light.setShadowType(type);
                    }
                },
                {
                    key: 'shadowResolution',
                    get: function get() {
                        return this._shadowResolution;
                    },
                    set: function set(val) {
                        this._shadowResolution = val;
                        this._light.setShadowResolution(val);
                    }
                },
                {
                    key: 'shadowDarkness',
                    get: function get() {
                        return this._shadowDarkness;
                    },
                    set: function set(val) {
                        this._shadowDarkness = val;
                        this._light.setShadowDarkness(val);
                    }
                },
                {
                    key: 'shadowMinDepth',
                    get: function get() {
                        return this._shadowMinDepth;
                    },
                    set: function set(val) {
                        this._shadowMinDepth = val;
                        this._light.setShadowMinDepth(val);
                    }
                },
                {
                    key: 'shadowMaxDepth',
                    get: function get() {
                        return this._shadowMaxDepth;
                    },
                    set: function set(val) {
                        this._shadowMaxDepth = val;
                        this._light.setShadowMaxDepth(val);
                    }
                },
                {
                    key: 'shadowDepthScale',
                    get: function get() {
                        return this._shadowDepthScale;
                    },
                    set: function set(val) {
                        this._shadowDepthScale = val;
                        this._light.setShadowDepthScale(val);
                    }
                },
                {
                    key: 'shadowFrustumSize',
                    get: function get() {
                        return this._shadowFrustumSize;
                    },
                    set: function set(val) {
                        this._shadowFrustumSize = val;
                        this._light.setShadowFrustumSize(val);
                    }
                }
            ]);
            function Light() {
                _classCallCheck(this, Light);
                var _this = _possibleConstructorReturn(this, (Light.__proto__ || Object.getPrototypeOf(Light)).call(this));
                _initDefineProp(_this, '_type', _descriptor, _this);
                _initDefineProp(_this, '_color', _descriptor2, _this);
                _initDefineProp(_this, '_intensity', _descriptor3, _this);
                _initDefineProp(_this, '_range', _descriptor4, _this);
                _initDefineProp(_this, '_spotAngle', _descriptor5, _this);
                _initDefineProp(_this, '_spotExp', _descriptor6, _this);
                _initDefineProp(_this, '_shadowType', _descriptor7, _this);
                _initDefineProp(_this, '_shadowResolution', _descriptor8, _this);
                _initDefineProp(_this, '_shadowDarkness', _descriptor9, _this);
                _initDefineProp(_this, '_shadowMinDepth', _descriptor10, _this);
                _initDefineProp(_this, '_shadowMaxDepth', _descriptor11, _this);
                _initDefineProp(_this, '_shadowDepthScale', _descriptor12, _this);
                _initDefineProp(_this, '_shadowFrustumSize', _descriptor13, _this);
                _initDefineProp(_this, '_shadowBias', _descriptor14, _this);
                _this._light = new _light2.default();
                return _this;
            }
            _createClass(Light, [
                {
                    key: 'onLoad',
                    value: function onLoad() {
                        this._light.setNode(this.node);
                        this.type = this._type;
                        this.color = this._color;
                        this.intensity = this._intensity;
                        this.range = this._range;
                        this.spotAngle = this._spotAngle;
                        this.spotExp = this._spotExp;
                        this.shadowType = this._shadowType;
                        this.shadowResolution = this._shadowResolution;
                        this.shadowDarkness = this._shadowDarkness;
                        this.shadowMaxDepth = this._shadowMaxDepth;
                        this.shadowDepthScale = this._shadowDepthScale;
                        this.shadowFrustumSize = this._shadowFrustumSize;
                        this.shadowBias = this._shadowBias;
                    }
                },
                {
                    key: 'onEnable',
                    value: function onEnable() {
                        renderer.scene.addLight(this._light);
                    }
                },
                {
                    key: 'onDisable',
                    value: function onDisable() {
                        renderer.scene.removeLight(this._light);
                    }
                }
            ]);
            return Light;
        }(CCComponent), _class3.Type = LightType, _class3.ShadowType = LightShadowType, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, '_type', [property], {
            enumerable: true,
            initializer: function initializer() {
                return LightType.DIRECTIONAL;
            }
        }), _descriptor2 = _applyDecoratedDescriptor(_class2.prototype, '_color', [property], {
            enumerable: true,
            initializer: function initializer() {
                return _valueTypes.Color.WHITE;
            }
        }), _descriptor3 = _applyDecoratedDescriptor(_class2.prototype, '_intensity', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 1;
            }
        }), _descriptor4 = _applyDecoratedDescriptor(_class2.prototype, '_range', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 1;
            }
        }), _descriptor5 = _applyDecoratedDescriptor(_class2.prototype, '_spotAngle', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 60;
            }
        }), _descriptor6 = _applyDecoratedDescriptor(_class2.prototype, '_spotExp', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 1;
            }
        }), _descriptor7 = _applyDecoratedDescriptor(_class2.prototype, '_shadowType', [property], {
            enumerable: true,
            initializer: function initializer() {
                return LightShadowType.NONE;
            }
        }), _descriptor8 = _applyDecoratedDescriptor(_class2.prototype, '_shadowResolution', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 1024;
            }
        }), _descriptor9 = _applyDecoratedDescriptor(_class2.prototype, '_shadowDarkness', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 0.5;
            }
        }), _descriptor10 = _applyDecoratedDescriptor(_class2.prototype, '_shadowMinDepth', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 1;
            }
        }), _descriptor11 = _applyDecoratedDescriptor(_class2.prototype, '_shadowMaxDepth', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 4096;
            }
        }), _descriptor12 = _applyDecoratedDescriptor(_class2.prototype, '_shadowDepthScale', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 250;
            }
        }), _descriptor13 = _applyDecoratedDescriptor(_class2.prototype, '_shadowFrustumSize', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 1024;
            }
        }), _descriptor14 = _applyDecoratedDescriptor(_class2.prototype, '_shadowBias', [property], {
            enumerable: true,
            initializer: function initializer() {
                return 0.0005;
            }
        }), _applyDecoratedDescriptor(_class2.prototype, 'type', [_dec4], Object.getOwnPropertyDescriptor(_class2.prototype, 'type'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'color', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'color'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'intensity', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'intensity'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'range', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'range'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'spotAngle', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'spotAngle'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'spotExp', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'spotExp'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowType', [_dec5], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowType'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowResolution', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowResolution'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowDarkness', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowDarkness'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowMinDepth', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowMinDepth'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowMaxDepth', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowMaxDepth'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowDepthScale', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowDepthScale'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'shadowFrustumSize', [property], Object.getOwnPropertyDescriptor(_class2.prototype, 'shadowFrustumSize'), _class2.prototype)), _class2)) || _class) || _class) || _class) || _class);
        exports.default = Light;
        cc.Light = Light;
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,