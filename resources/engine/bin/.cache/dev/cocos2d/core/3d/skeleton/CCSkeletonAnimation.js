(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/skeleton/CCSkeletonAnimation.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Animation = require('../../components/CCAnimation');
        var Model = require('../CCModel');
        var SkeletonAnimationClip = require('./CCSkeletonAnimationClip');
        var SkeletonAnimation = cc.Class({
            name: 'cc.SkeletonAnimation',
            extends: Animation,
            editor: CC_EDITOR && {
                inspector: 'packages://inspector/inspectors/comps/skeleton-animation.js',
                menu: 'i18n:MAIN_MENU.component.others/Skeleton Animation'
            },
            properties: {
                _model: {
                    default: null,
                    type: Model
                },
                _defaultClip: {
                    override: true,
                    default: null,
                    type: SkeletonAnimationClip
                },
                _clips: {
                    override: true,
                    default: [],
                    type: [SkeletonAnimationClip],
                    visible: true
                },
                defaultClip: {
                    override: true,
                    get: function get() {
                        return this._defaultClip;
                    },
                    set: function set(v) {
                        this._defaultClip = v;
                    },
                    type: SkeletonAnimationClip
                },
                model: {
                    get: function get() {
                        return this._model;
                    },
                    set: function set(val) {
                        this._model = val;
                        this._updateClipModel();
                    },
                    type: Model
                }
            },
            __preload: function __preload() {
                this._updateClipModel();
            },
            _updateClipModel: function _updateClipModel() {
                if (this._defaultClip) {
                    this._defaultClip._model = this._model;
                }
                var clips = this._clips;
                for (var i = 0; i < clips.length; i++) {
                    clips[i]._model = this._model;
                }
            },
            addClip: function addClip(clip, newName) {
                clip._model = this._model;
                return Animation.prototype.addClip.call(this, clip, newName);
            },
            searchClips: CC_EDITOR && function () {
                this._clips.length = 0;
                var self = this;
                Editor.assetdb.queryPathByUuid(this._model._uuid, function (err, modelPath) {
                    if (err)
                        return console.error(err);
                    var Path = require('fire-path');
                    var queryPath = Path.relative(Editor.remote.Project.path, modelPath);
                    queryPath = Path.join(Path.dirname(queryPath), Path.basenameNoExt(queryPath));
                    queryPath = 'db://' + queryPath + '*/*.sac';
                    Editor.assetdb.queryAssets(queryPath, null, function (err, results) {
                        if (results) {
                            for (var i = 0; i < results.length; i++) {
                                var clip = new SkeletonAnimationClip();
                                clip._uuid = results[i].uuid;
                                self._clips.push(clip);
                            }
                            self._defaultClip = self._clips[0];
                        }
                    });
                });
            }
        });
        cc.SkeletonAnimation = module.exports = SkeletonAnimation;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDU2tlbGV0b25BbmltYXRpb24uanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL2NvcmUvM2Qvc2tlbGV0b24vQ0NTa2VsZXRvbkFuaW1hdGlvbi5qcyJdLCJuYW1lcyI6WyJBbmltYXRpb24iLCJyZXF1aXJlIiwiTW9kZWwiLCJTa2VsZXRvbkFuaW1hdGlvbkNsaXAiLCJTa2VsZXRvbkFuaW1hdGlvbiIsImNjIiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsImVkaXRvciIsIkNDX0VESVRPUiIsImluc3BlY3RvciIsIm1lbnUiLCJwcm9wZXJ0aWVzIiwiX21vZGVsIiwiZGVmYXVsdCIsInR5cGUiLCJfZGVmYXVsdENsaXAiLCJvdmVycmlkZSIsIl9jbGlwcyIsInZpc2libGUiLCJkZWZhdWx0Q2xpcCIsImdldCIsInNldCIsInYiLCJtb2RlbCIsInZhbCIsIl91cGRhdGVDbGlwTW9kZWwiLCJfX3ByZWxvYWQiLCJjbGlwcyIsImkiLCJsZW5ndGgiLCJhZGRDbGlwIiwiY2xpcCIsIm5ld05hbWUiLCJwcm90b3R5cGUiLCJjYWxsIiwic2VhcmNoQ2xpcHMiLCJzZWxmIiwiRWRpdG9yIiwiYXNzZXRkYiIsInF1ZXJ5UGF0aEJ5VXVpZCIsIl91dWlkIiwiZXJyIiwibW9kZWxQYXRoIiwiY29uc29sZSIsImVycm9yIiwiUGF0aCIsInF1ZXJ5UGF0aCIsInJlbGF0aXZlIiwicmVtb3RlIiwiUHJvamVjdCIsInBhdGgiLCJqb2luIiwiZGlybmFtZSIsImJhc2VuYW1lTm9FeHQiLCJxdWVyeUFzc2V0cyIsInJlc3VsdHMiLCJ1dWlkIiwicHVzaCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQXlCQSxJQUFNQSxTQUFBQSxHQUFZQyxPQUFBQSxDQUFR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QSxTQUFwQkEsR0FBQSxTQUFBQSxDQU53RTtBQUFBLG9CQVF4RVQsTUFBQUEsQ0FBT0MsT0FBUEQsQ0FBZWlCLFdBQWZqQixDQUEyQlMsU0FBM0JULEVBQXNDLElBQXRDQSxFQUE0QyxVQUFVSSxHQUFWLEVBQWVjLE9BQWYsRUFBd0I7QUFBQSx3QkFDaEUsSUFBSUEsT0FBSixFQUFhO0FBQUEsNEJBQ1QsS0FBSyxJQUFJM0IsQ0FBQUEsR0FBSSxDQUFSLENBQUwsQ0FBZ0JBLENBQUFBLEdBQUkyQixPQUFBQSxDQUFRMUIsTUFBNUIsRUFBb0NELENBQUFBLEVBQXBDLEVBQXlDO0FBQUEsZ0NBQ3JDLElBQUlHLElBQUFBLEdBQU8sSUFBSTlCLHFCQUFKLEVBQVgsQ0FEcUM7QUFBQSxnQ0FFckM4QixJQUFBQSxDQUFLUyxLQUFMVCxHQUFhd0IsT0FBQUEsQ0FBUTNCLENBQVIyQixFQUFXQyxJQUF4QnpCLENBRnFDO0FBQUEsZ0NBR3JDSyxJQUFBQSxDQUFLbkIsTUFBTG1CLENBQVlxQixJQUFackIsQ0FBaUJMLElBQWpCSyxFQUhxQztBQUFBLDZCQURoQztBQUFBLDRCQU1UQSxJQUFBQSxDQUFLckIsWUFBTHFCLEdBQW9CQSxJQUFBQSxDQUFLbkIsTUFBTG1CLENBQVksQ0FBWkEsQ0FBcEJBLENBTlM7QUFBQSx5QkFEbUQ7QUFBQSxxQkFBcEVDLEVBUndFO0FBQUEsaUJBQTVFQSxFQUhrQztBQUFBLGFBdkVUO0FBQUEsU0FBVGxDLENBQXhCO1FBZ0dBQSxFQUFBQSxDQUFHRCxpQkFBSEMsR0FBdUJ1RCxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQnhELGlCQUF4Q0MiLCJmaWxlIjoiQ0NTa2VsZXRvbkFuaW1hdGlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwOi8vd3d3LmNvY29zLmNvbVxyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5jb25zdCBBbmltYXRpb24gPSByZXF1aXJlKCcuLi8uLi9jb21wb25lbnRzL0NDQW5pbWF0aW9uJyk7XHJcbmNvbnN0IE1vZGVsID0gcmVxdWlyZSgnLi4vQ0NNb2RlbCcpO1xyXG5jb25zdCBTa2VsZXRvbkFuaW1hdGlvbkNsaXAgPSByZXF1aXJlKCcuL0NDU2tlbGV0b25BbmltYXRpb25DbGlwJyk7XHJcblxyXG4vKipcclxuICogQG1vZHVsZSBjY1xyXG4gKi9cclxuLyoqXHJcbiAqICEjZW4gLlxyXG4gKiAhI3poIOOAglxyXG4gKiBAY2xhc3MgU2tlbGV0b25BbmltYXRpb25cclxuICogQGV4dGVuZHMgQW5pbWF0aW9uXHJcbiAqL1xyXG5sZXQgU2tlbGV0b25BbmltYXRpb24gPSBjYy5DbGFzcyh7XHJcbiAgICBuYW1lOiAnY2MuU2tlbGV0b25BbmltYXRpb24nLFxyXG4gICAgZXh0ZW5kczogQW5pbWF0aW9uLFxyXG5cclxuICAgIGVkaXRvcjogQ0NfRURJVE9SICYmIHtcclxuICAgICAgICBpbnNwZWN0b3I6ICdwYWNrYWdlczovL2luc3BlY3Rvci9pbnNwZWN0b3JzL2NvbXBzL3NrZWxldG9uLWFuaW1hdGlvbi5qcycsXHJcbiAgICAgICAgbWVudTogJ2kxOG46TUFJTl9NRU5VLmNvbXBvbmVudC5vdGhlcnMvU2tlbGV0b24gQW5pbWF0aW9uJyxcclxuICAgIH0sXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIF9tb2RlbDoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxyXG4gICAgICAgICAgICB0eXBlOiBNb2RlbFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9kZWZhdWx0Q2xpcDoge1xyXG4gICAgICAgICAgICBvdmVycmlkZTogdHJ1ZSxcclxuICAgICAgICAgICAgZGVmYXVsdDogbnVsbCxcclxuICAgICAgICAgICAgdHlwZTogU2tlbGV0b25BbmltYXRpb25DbGlwLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIF9jbGlwczoge1xyXG4gICAgICAgICAgICBvdmVycmlkZTogdHJ1ZSxcclxuICAgICAgICAgICAgZGVmYXVsdDogW10sXHJcbiAgICAgICAgICAgIHR5cGU6IFtTa2VsZXRvbkFuaW1hdGlvbkNsaXBdLFxyXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIGRlZmF1bHRDbGlwOiB7XHJcbiAgICAgICAgICAgIG92ZXJyaWRlOiB0cnVlLFxyXG4gICAgICAgICAgICBnZXQgKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRDbGlwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXQgKHYpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRDbGlwID0gdjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdHlwZTogU2tlbGV0b25BbmltYXRpb25DbGlwLFxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIG1vZGVsOiB7XHJcbiAgICAgICAgICAgIGdldCAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9kZWw7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldCAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tb2RlbCA9IHZhbDtcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNsaXBNb2RlbCgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0eXBlOiBNb2RlbCxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuXHJcbiAgICBfX3ByZWxvYWQgKCkge1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUNsaXBNb2RlbCgpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfdXBkYXRlQ2xpcE1vZGVsICgpIHtcclxuICAgICAgICBpZiAodGhpcy5fZGVmYXVsdENsaXApIHtcclxuICAgICAgICAgICAgdGhpcy5fZGVmYXVsdENsaXAuX21vZGVsID0gdGhpcy5fbW9kZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBjbGlwcyA9IHRoaXMuX2NsaXBzO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xpcHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgY2xpcHNbaV0uX21vZGVsID0gdGhpcy5fbW9kZWw7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBhZGRDbGlwIChjbGlwLCBuZXdOYW1lKSB7XHJcbiAgICAgICAgY2xpcC5fbW9kZWwgPSB0aGlzLl9tb2RlbDtcclxuICAgICAgICByZXR1cm4gQW5pbWF0aW9uLnByb3RvdHlwZS5hZGRDbGlwLmNhbGwodGhpcywgY2xpcCwgbmV3TmFtZSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHNlYXJjaENsaXBzOiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2NsaXBzLmxlbmd0aCA9IDA7XHJcbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIEVkaXRvci5hc3NldGRiLnF1ZXJ5UGF0aEJ5VXVpZCh0aGlzLl9tb2RlbC5fdXVpZCwgZnVuY3Rpb24gKGVyciwgbW9kZWxQYXRoKSB7XHJcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiBjb25zb2xlLmVycm9yKGVycik7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjb25zdCBQYXRoID0gcmVxdWlyZSgnZmlyZS1wYXRoJyk7XHJcbiAgICAgICAgICAgIGxldCBxdWVyeVBhdGggPSBQYXRoLnJlbGF0aXZlKEVkaXRvci5yZW1vdGUuUHJvamVjdC5wYXRoLCBtb2RlbFBhdGgpO1xyXG4gICAgICAgICAgICBxdWVyeVBhdGggPSBQYXRoLmpvaW4oUGF0aC5kaXJuYW1lKHF1ZXJ5UGF0aCksIFBhdGguYmFzZW5hbWVOb0V4dChxdWVyeVBhdGgpKTtcclxuICAgICAgICAgICAgcXVlcnlQYXRoID0gYGRiOi8vJHtxdWVyeVBhdGh9Ki8qLnNhY2A7XHJcblxyXG4gICAgICAgICAgICBFZGl0b3IuYXNzZXRkYi5xdWVyeUFzc2V0cyhxdWVyeVBhdGgsIG51bGwsIGZ1bmN0aW9uIChlcnIsIHJlc3VsdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjbGlwID0gbmV3IFNrZWxldG9uQW5pbWF0aW9uQ2xpcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlwLl91dWlkID0gcmVzdWx0c1tpXS51dWlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jbGlwcy5wdXNoKGNsaXApO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZWZhdWx0Q2xpcCA9IHNlbGYuX2NsaXBzWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSk7XHJcblxyXG5jYy5Ta2VsZXRvbkFuaW1hdGlvbiA9IG1vZHVsZS5leHBvcnRzID0gU2tlbGV0b25BbmltYXRpb247XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHA6Ly93d3cuY29jb3MuY29tXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIEFuaW1hdGlvbiA9IHJlcXVpcmUoJy4uLy4uL2NvbXBvbmVudHMvQ0NBbmltYXRpb24nKTtcbnZhciBNb2RlbCA9IHJlcXVpcmUoJy4uL0NDTW9kZWwnKTtcbnZhciBTa2VsZXRvbkFuaW1hdGlvbkNsaXAgPSByZXF1aXJlKCcuL0NDU2tlbGV0b25BbmltYXRpb25DbGlwJyk7XG5cbi8qKlxyXG4gKiBAbW9kdWxlIGNjXHJcbiAqL1xuLyoqXHJcbiAqICEjZW4gLlxyXG4gKiAhI3poIOOAglxyXG4gKiBAY2xhc3MgU2tlbGV0b25BbmltYXRpb25cclxuICogQGV4dGVuZHMgQW5pbWF0aW9uXHJcbiAqL1xudmFyIFNrZWxldG9uQW5pbWF0aW9uID0gY2MuQ2xhc3Moe1xuICAgIG5hbWU6ICdjYy5Ta2VsZXRvbkFuaW1hdGlvbicsXG4gICAgZXh0ZW5kczogQW5pbWF0aW9uLFxuXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBpbnNwZWN0b3I6ICdwYWNrYWdlczovL2luc3BlY3Rvci9pbnNwZWN0b3JzL2NvbXBzL3NrZWxldG9uLWFuaW1hdGlvbi5qcycsXG4gICAgICAgIG1lbnU6ICdpMThuOk1BSU5fTUVOVS5jb21wb25lbnQub3RoZXJzL1NrZWxldG9uIEFuaW1hdGlvbidcbiAgICB9LFxuXG4gICAgcHJvcGVydGllczoge1xuICAgICAgICBfbW9kZWw6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IG51bGwsXG4gICAgICAgICAgICB0eXBlOiBNb2RlbFxuICAgICAgICB9LFxuXG4gICAgICAgIF9kZWZhdWx0Q2xpcDoge1xuICAgICAgICAgICAgb3ZlcnJpZGU6IHRydWUsXG4gICAgICAgICAgICBkZWZhdWx0OiBudWxsLFxuICAgICAgICAgICAgdHlwZTogU2tlbGV0b25BbmltYXRpb25DbGlwXG4gICAgICAgIH0sXG5cbiAgICAgICAgX2NsaXBzOiB7XG4gICAgICAgICAgICBvdmVycmlkZTogdHJ1ZSxcbiAgICAgICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICAgICAgdHlwZTogW1NrZWxldG9uQW5pbWF0aW9uQ2xpcF0sXG4gICAgICAgICAgICB2aXNpYmxlOiB0cnVlXG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVmYXVsdENsaXA6IHtcbiAgICAgICAgICAgIG92ZXJyaWRlOiB0cnVlLFxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2RlZmF1bHRDbGlwO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHYpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9kZWZhdWx0Q2xpcCA9IHY7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0eXBlOiBTa2VsZXRvbkFuaW1hdGlvbkNsaXBcbiAgICAgICAgfSxcblxuICAgICAgICBtb2RlbDoge1xuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vZGVsO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX21vZGVsID0gdmFsO1xuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZUNsaXBNb2RlbCgpO1xuICAgICAgICAgICAgfSxcblxuICAgICAgICAgICAgdHlwZTogTW9kZWxcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICBfX3ByZWxvYWQ6IGZ1bmN0aW9uIF9fcHJlbG9hZCgpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlQ2xpcE1vZGVsKCk7XG4gICAgfSxcbiAgICBfdXBkYXRlQ2xpcE1vZGVsOiBmdW5jdGlvbiBfdXBkYXRlQ2xpcE1vZGVsKCkge1xuICAgICAgICBpZiAodGhpcy5fZGVmYXVsdENsaXApIHtcbiAgICAgICAgICAgIHRoaXMuX2RlZmF1bHRDbGlwLl9tb2RlbCA9IHRoaXMuX21vZGVsO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGNsaXBzID0gdGhpcy5fY2xpcHM7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2xpcHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNsaXBzW2ldLl9tb2RlbCA9IHRoaXMuX21vZGVsO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBhZGRDbGlwOiBmdW5jdGlvbiBhZGRDbGlwKGNsaXAsIG5ld05hbWUpIHtcbiAgICAgICAgY2xpcC5fbW9kZWwgPSB0aGlzLl9tb2RlbDtcbiAgICAgICAgcmV0dXJuIEFuaW1hdGlvbi5wcm90b3R5cGUuYWRkQ2xpcC5jYWxsKHRoaXMsIGNsaXAsIG5ld05hbWUpO1xuICAgIH0sXG5cblxuICAgIHNlYXJjaENsaXBzOiBDQ19FRElUT1IgJiYgZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLl9jbGlwcy5sZW5ndGggPSAwO1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgICAgIEVkaXRvci5hc3NldGRiLnF1ZXJ5UGF0aEJ5VXVpZCh0aGlzLl9tb2RlbC5fdXVpZCwgZnVuY3Rpb24gKGVyciwgbW9kZWxQYXRoKSB7XG4gICAgICAgICAgICBpZiAoZXJyKSByZXR1cm4gY29uc29sZS5lcnJvcihlcnIpO1xuXG4gICAgICAgICAgICB2YXIgUGF0aCA9IHJlcXVpcmUoJ2ZpcmUtcGF0aCcpO1xuICAgICAgICAgICAgdmFyIHF1ZXJ5UGF0aCA9IFBhdGgucmVsYXRpdmUoRWRpdG9yLnJlbW90ZS5Qcm9qZWN0LnBhdGgsIG1vZGVsUGF0aCk7XG4gICAgICAgICAgICBxdWVyeVBhdGggPSBQYXRoLmpvaW4oUGF0aC5kaXJuYW1lKHF1ZXJ5UGF0aCksIFBhdGguYmFzZW5hbWVOb0V4dChxdWVyeVBhdGgpKTtcbiAgICAgICAgICAgIHF1ZXJ5UGF0aCA9ICdkYjovLycgKyBxdWVyeVBhdGggKyAnKi8qLnNhYyc7XG5cbiAgICAgICAgICAgIEVkaXRvci5hc3NldGRiLnF1ZXJ5QXNzZXRzKHF1ZXJ5UGF0aCwgbnVsbCwgZnVuY3Rpb24gKGVyciwgcmVzdWx0cykge1xuICAgICAgICAgICAgICAgIGlmIChyZXN1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNsaXAgPSBuZXcgU2tlbGV0b25BbmltYXRpb25DbGlwKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGlwLl91dWlkID0gcmVzdWx0c1tpXS51dWlkO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY2xpcHMucHVzaChjbGlwKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBzZWxmLl9kZWZhdWx0Q2xpcCA9IHNlbGYuX2NsaXBzWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG59KTtcblxuY2MuU2tlbGV0b25BbmltYXRpb24gPSBtb2R1bGUuZXhwb3J0cyA9IFNrZWxldG9uQW5pbWF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFUydGxiR1YwYjI1QmJtbHRZWFJwYjI0dWFuTWlYU3dpYm1GdFpYTWlPbHNpUVc1cGJXRjBhVzl1SWl3aWNtVnhkV2x5WlNJc0lrMXZaR1ZzSWl3aVUydGxiR1YwYjI1QmJtbHRZWFJwYjI1RGJHbHdJaXdpVTJ0bGJHVjBiMjVCYm1sdFlYUnBiMjRpTENKall5SXNJa05zWVhOeklpd2libUZ0WlNJc0ltVjRkR1Z1WkhNaUxDSmxaR2wwYjNJaUxDSkRRMTlGUkVsVVQxSWlMQ0pwYm5Od1pXTjBiM0lpTENKdFpXNTFJaXdpY0hKdmNHVnlkR2xsY3lJc0lsOXRiMlJsYkNJc0ltUmxabUYxYkhRaUxDSjBlWEJsSWl3aVgyUmxabUYxYkhSRGJHbHdJaXdpYjNabGNuSnBaR1VpTENKZlkyeHBjSE1pTENKMmFYTnBZbXhsSWl3aVpHVm1ZWFZzZEVOc2FYQWlMQ0puWlhRaUxDSnpaWFFpTENKMklpd2liVzlrWld3aUxDSjJZV3dpTENKZmRYQmtZWFJsUTJ4cGNFMXZaR1ZzSWl3aVgxOXdjbVZzYjJGa0lpd2lZMnhwY0hNaUxDSnBJaXdpYkdWdVozUm9JaXdpWVdSa1EyeHBjQ0lzSW1Oc2FYQWlMQ0p1WlhkT1lXMWxJaXdpY0hKdmRHOTBlWEJsSWl3aVkyRnNiQ0lzSW5ObFlYSmphRU5zYVhCeklpd2ljMlZzWmlJc0lrVmthWFJ2Y2lJc0ltRnpjMlYwWkdJaUxDSnhkV1Z5ZVZCaGRHaENlVlYxYVdRaUxDSmZkWFZwWkNJc0ltVnljaUlzSW0xdlpHVnNVR0YwYUNJc0ltTnZibk52YkdVaUxDSmxjbkp2Y2lJc0lsQmhkR2dpTENKeGRXVnllVkJoZEdnaUxDSnlaV3hoZEdsMlpTSXNJbkpsYlc5MFpTSXNJbEJ5YjJwbFkzUWlMQ0p3WVhSb0lpd2lhbTlwYmlJc0ltUnBjbTVoYldVaUxDSmlZWE5sYm1GdFpVNXZSWGgwSWl3aWNYVmxjbmxCYzNObGRITWlMQ0p5WlhOMWJIUnpJaXdpZFhWcFpDSXNJbkIxYzJnaUxDSnRiMlIxYkdVaUxDSmxlSEJ2Y25SeklsMHNJbTFoY0hCcGJtZHpJam9pT3p0QlFVRkJPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJlVUpCTEVsQlFVMUJMRmxCUVZsRExGRkJRVkVzT0VKQlFWSXNRMEZCYkVJN1FVRkRRU3hKUVVGTlF5eFJRVUZSUkN4UlFVRlJMRmxCUVZJc1EwRkJaRHRCUVVOQkxFbEJRVTFGTEhkQ1FVRjNRa1lzVVVGQlVTd3lRa0ZCVWl4RFFVRTVRanM3UVVGRlFUczdPMEZCUjBFN096czdPenRCUVUxQkxFbEJRVWxITEc5Q1FVRnZRa01zUjBGQlIwTXNTMEZCU0N4RFFVRlRPMEZCUXpkQ1F5eFZRVUZOTEhOQ1FVUjFRanRCUVVVM1FrTXNZVUZCVTFJc1UwRkdiMEk3TzBGQlNUZENVeXhaUVVGUlF5eGhRVUZoTzBGQlEycENReXh0UWtGQlZ5dzJSRUZFVFR0QlFVVnFRa01zWTBGQlRUdEJRVVpYTEV0QlNsRTdPMEZCVXpkQ1F5eG5Ra0ZCV1R0QlFVTlNReXhuUWtGQlVUdEJRVU5LUXl4eFFrRkJVeXhKUVVSTU8wRkJSVXBETEd0Q1FVRk5aRHRCUVVaR0xGTkJSRUU3TzBGQlRWSmxMSE5DUVVGak8wRkJRMVpETEhOQ1FVRlZMRWxCUkVFN1FVRkZWa2dzY1VKQlFWTXNTVUZHUXp0QlFVZFdReXhyUWtGQlRXSTdRVUZJU1N4VFFVNU9PenRCUVZsU1owSXNaMEpCUVZFN1FVRkRTa1FzYzBKQlFWVXNTVUZFVGp0QlFVVktTQ3h4UWtGQlV5eEZRVVpNTzBGQlIwcERMR3RDUVVGTkxFTkJRVU5pTEhGQ1FVRkVMRU5CU0VZN1FVRkpTbWxDTEhGQ1FVRlRPMEZCU2t3c1UwRmFRVHM3UVVGdFFsSkRMSEZDUVVGaE8wRkJRMVJJTEhOQ1FVRlZMRWxCUkVRN1FVRkZWRWtzWlVGR1V5eHBRa0ZGUmp0QlFVTklMSFZDUVVGUExFdEJRVXRNTEZsQlFWbzdRVUZEU0N4aFFVcFJPMEZCUzFSTkxHVkJURk1zWlVGTFNrTXNRMEZNU1N4RlFVdEVPMEZCUTBvc2NVSkJRVXRRTEZsQlFVd3NSMEZCYjBKUExFTkJRWEJDTzBGQlEwZ3NZVUZRVVRzN1FVRlJWRklzYTBKQlFVMWlPMEZCVWtjc1UwRnVRa3c3TzBGQk9FSlNjMElzWlVGQlR6dEJRVU5JU0N4bFFVUkhMR2xDUVVOSk8wRkJRMGdzZFVKQlFVOHNTMEZCUzFJc1RVRkJXanRCUVVOSUxHRkJTRVU3UVVGSlNGTXNaVUZLUnl4bFFVbEZSeXhIUVVwR0xFVkJTVTg3UVVGRFRpeHhRa0ZCUzFvc1RVRkJUQ3hIUVVGaldTeEhRVUZrTzBGQlEwRXNjVUpCUVV0RExHZENRVUZNTzBGQlEwZ3NZVUZRUlRzN1FVRlJTRmdzYTBKQlFVMWtPMEZCVWtnN1FVRTVRa01zUzBGVWFVSTdPMEZCYlVRM1FqQkNMR0ZCYmtRMlFpeDFRa0Z0UkdoQ08wRkJRMVFzWVVGQlMwUXNaMEpCUVV3N1FVRkRTQ3hMUVhKRU5FSTdRVUYxUkRkQ1FTeHZRa0YyUkRaQ0xEaENRWFZFVkR0QlFVTm9RaXhaUVVGSkxFdEJRVXRXTEZsQlFWUXNSVUZCZFVJN1FVRkRia0lzYVVKQlFVdEJMRmxCUVV3c1EwRkJhMEpJTEUxQlFXeENMRWRCUVRKQ0xFdEJRVXRCTEUxQlFXaERPMEZCUTBnN08wRkJSVVFzV1VGQlNXVXNVVUZCVVN4TFFVRkxWaXhOUVVGcVFqdEJRVU5CTEdGQlFVc3NTVUZCU1Zjc1NVRkJTU3hEUVVGaUxFVkJRV2RDUVN4SlFVRkpSQ3hOUVVGTlJTeE5RVUV4UWl4RlFVRnJRMFFzUjBGQmJFTXNSVUZCZFVNN1FVRkRia05FTEd0Q1FVRk5ReXhEUVVGT0xFVkJRVk5vUWl4TlFVRlVMRWRCUVd0Q0xFdEJRVXRCTEUxQlFYWkNPMEZCUTBnN1FVRkRTaXhMUVdoRk5FSTdRVUZyUlRkQ2EwSXNWMEZzUlRaQ0xHMUNRV3RGY0VKRExFbEJiRVZ2UWl4RlFXdEZaRU1zVDBGc1JXTXNSVUZyUlV3N1FVRkRjRUpFTEdGQlFVdHVRaXhOUVVGTUxFZEJRV01zUzBGQlMwRXNUVUZCYmtJN1FVRkRRU3hsUVVGUFpDeFZRVUZWYlVNc1UwRkJWaXhEUVVGdlFrZ3NUMEZCY0VJc1EwRkJORUpKTEVsQlFUVkNMRU5CUVdsRExFbEJRV3BETEVWQlFYVkRTQ3hKUVVGMlF5eEZRVUUyUTBNc1QwRkJOME1zUTBGQlVEdEJRVU5JTEV0QmNrVTBRanM3TzBGQmRVVTNRa2NzYVVKQlFXRXpRaXhoUVVGaExGbEJRVms3UVVGRGJFTXNZVUZCUzFNc1RVRkJUQ3hEUVVGWldTeE5RVUZhTEVkQlFYRkNMRU5CUVhKQ08wRkJRMEVzV1VGQlNVOHNUMEZCVHl4SlFVRllPMEZCUTBGRExHVkJRVTlETEU5QlFWQXNRMEZCWlVNc1pVRkJaaXhEUVVFclFpeExRVUZMTTBJc1RVRkJUQ3hEUVVGWk5FSXNTMEZCTTBNc1JVRkJhMFFzVlVGQlZVTXNSMEZCVml4RlFVRmxReXhUUVVGbUxFVkJRVEJDTzBGQlEzaEZMR2RDUVVGSlJDeEhRVUZLTEVWQlFWTXNUMEZCVDBVc1VVRkJVVU1zUzBGQlVpeERRVUZqU0N4SFFVRmtMRU5CUVZBN08wRkJSVlFzWjBKQlFVMUpMRTlCUVU4NVF5eFJRVUZSTEZkQlFWSXNRMEZCWWp0QlFVTkJMR2RDUVVGSkswTXNXVUZCV1VRc1MwRkJTMFVzVVVGQlRDeERRVUZqVml4UFFVRlBWeXhOUVVGUUxFTkJRV05ETEU5QlFXUXNRMEZCYzBKRExFbEJRWEJETEVWQlFUQkRVaXhUUVVFeFF5eERRVUZvUWp0QlFVTkJTU3gzUWtGQldVUXNTMEZCUzAwc1NVRkJUQ3hEUVVGVlRpeExRVUZMVHl4UFFVRk1MRU5CUVdGT0xGTkJRV0lzUTBGQlZpeEZRVUZ0UTBRc1MwRkJTMUVzWVVGQlRDeERRVUZ0UWxBc1UwRkJia0lzUTBGQmJrTXNRMEZCV2p0QlFVTkJRU3hyUTBGQmIwSkJMRk5CUVhCQ096dEJRVVZCVkN4dFFrRkJUME1zVDBGQlVDeERRVUZsWjBJc1YwRkJaaXhEUVVFeVFsSXNVMEZCTTBJc1JVRkJjME1zU1VGQmRFTXNSVUZCTkVNc1ZVRkJWVXdzUjBGQlZpeEZRVUZsWXl4UFFVRm1MRVZCUVhkQ08wRkJRMmhGTEc5Q1FVRkpRU3hQUVVGS0xFVkJRV0U3UVVGRFZDeDVRa0ZCU3l4SlFVRkpNMElzU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSk1rSXNVVUZCVVRGQ0xFMUJRVFZDTEVWQlFXOURSQ3hIUVVGd1F5eEZRVUY1UXp0QlFVTnlReXcwUWtGQlNVY3NUMEZCVHl4SlFVRkpPVUlzY1VKQlFVb3NSVUZCV0R0QlFVTkJPRUlzTmtKQlFVdFRMRXRCUVV3c1IwRkJZV1VzVVVGQlVUTkNMRU5CUVZJc1JVRkJWelJDTEVsQlFYaENPMEZCUTBGd1FpdzJRa0ZCUzI1Q0xFMUJRVXdzUTBGQldYZERMRWxCUVZvc1EwRkJhVUl4UWl4SlFVRnFRanRCUVVOSU8wRkJRMFJMTEhsQ1FVRkxja0lzV1VGQlRDeEhRVUZ2UW5GQ0xFdEJRVXR1UWl4TlFVRk1MRU5CUVZrc1EwRkJXaXhEUVVGd1FqdEJRVU5JTzBGQlEwb3NZVUZVUkR0QlFWVklMRk5CYkVKRU8wRkJiVUpJTzBGQk4wWTBRaXhEUVVGVUxFTkJRWGhDT3p0QlFXZEhRV1FzUjBGQlIwUXNhVUpCUVVnc1IwRkJkVUozUkN4UFFVRlBReXhQUVVGUUxFZEJRV2xDZWtRc2FVSkJRWGhESWl3aVptbHNaU0k2SWtORFUydGxiR1YwYjI1QmJtbHRZWFJwYjI0dWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHlYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEhKY2JseHlYRzRnYUhSMGNEb3ZMM2QzZHk1amIyTnZjeTVqYjIxY2NseHVYSEpjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYSEpjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2NseHVJQ0IzYjNKc1pIZHBaR1VzSUhKdmVXRnNkSGt0Wm5KbFpTd2dibTl1TFdGemMybG5ibUZpYkdVc0lISmxkbTlqWVdKc1pTQmhibVFnYm05dUxXVjRZMngxYzJsMlpTQnNhV05sYm5ObFhISmNiaUIwYnlCMWMyVWdRMjlqYjNNZ1EzSmxZWFJ2Y2lCemIyeGxiSGtnZEc4Z1pHVjJaV3h2Y0NCbllXMWxjeUJ2YmlCNWIzVnlJSFJoY21kbGRDQndiR0YwWm05eWJYTXVJRmx2ZFNCemFHRnNiRnh5WEc0Z0lHNXZkQ0IxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJaMGQyRnlaU0JtYjNJZ1pHVjJaV3h2Y0dsdVp5QnZkR2hsY2lCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCMGFHRjBKM05jY2x4dUlDQjFjMlZrSUdadmNpQmtaWFpsYkc5d2FXNW5JR2RoYldWekxpQlpiM1VnWVhKbElHNXZkQ0JuY21GdWRHVmtJSFJ2SUhCMVlteHBjMmdzSUdScGMzUnlhV0oxZEdVc1hISmNiaUFnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHd2dZMjl3YVdWeklHOW1JRU52WTI5eklFTnlaV0YwYjNJdVhISmNibHh5WEc0Z1ZHaGxJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJR2x1SUhSb2FYTWdUR2xqWlc1elpTQkJaM0psWlcxbGJuUWdZWEpsSUd4cFkyVnVjMlZrTENCdWIzUWdjMjlzWkM1Y2NseHVJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGlCeVpYTmxjblpsY3lCaGJHd2djbWxuYUhSeklHNXZkQ0JsZUhCeVpYTnpiSGtnWjNKaGJuUmxaQ0IwYnlCNWIzVXVYSEpjYmx4eVhHNGdWRWhGSUZOUFJsUlhRVkpGSUVsVElGQlNUMVpKUkVWRUlGd2lRVk1nU1ZOY0lpd2dWMGxVU0U5VlZDQlhRVkpTUVU1VVdTQlBSaUJCVGxrZ1MwbE9SQ3dnUlZoUVVrVlRVeUJQVWx4eVhHNGdTVTFRVEVsRlJDd2dTVTVEVEZWRVNVNUhJRUpWVkNCT1QxUWdURWxOU1ZSRlJDQlVUeUJVU0VVZ1YwRlNVa0ZPVkVsRlV5QlBSaUJOUlZKRFNFRk9WRUZDU1V4SlZGa3NYSEpjYmlCR1NWUk9SVk5USUVaUFVpQkJJRkJCVWxSSlExVk1RVklnVUZWU1VFOVRSU0JCVGtRZ1RrOU9TVTVHVWtsT1IwVk5SVTVVTGlCSlRpQk9UeUJGVmtWT1ZDQlRTRUZNVENCVVNFVmNjbHh1SUVGVlZFaFBVbE1nVDFJZ1EwOVFXVkpKUjBoVUlFaFBURVJGVWxNZ1FrVWdURWxCUWt4RklFWlBVaUJCVGxrZ1EweEJTVTBzSUVSQlRVRkhSVk1nVDFJZ1QxUklSVkpjY2x4dUlFeEpRVUpKVEVsVVdTd2dWMGhGVkVoRlVpQkpUaUJCVGlCQlExUkpUMDRnVDBZZ1EwOU9WRkpCUTFRc0lGUlBVbFFnVDFJZ1QxUklSVkpYU1ZORkxDQkJVa2xUU1U1SElFWlNUMDBzWEhKY2JpQlBWVlFnVDBZZ1QxSWdTVTRnUTA5T1RrVkRWRWxQVGlCWFNWUklJRlJJUlNCVFQwWlVWMEZTUlNCUFVpQlVTRVVnVlZORklFOVNJRTlVU0VWU0lFUkZRVXhKVGtkVElFbE9YSEpjYmlCVVNFVWdVMDlHVkZkQlVrVXVYSEpjYmlBcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FMMXh5WEc1Y2NseHVZMjl1YzNRZ1FXNXBiV0YwYVc5dUlEMGdjbVZ4ZFdseVpTZ25MaTR2TGk0dlkyOXRjRzl1Wlc1MGN5OURRMEZ1YVcxaGRHbHZiaWNwTzF4eVhHNWpiMjV6ZENCTmIyUmxiQ0E5SUhKbGNYVnBjbVVvSnk0dUwwTkRUVzlrWld3bktUdGNjbHh1WTI5dWMzUWdVMnRsYkdWMGIyNUJibWx0WVhScGIyNURiR2x3SUQwZ2NtVnhkV2x5WlNnbkxpOURRMU5yWld4bGRHOXVRVzVwYldGMGFXOXVRMnhwY0NjcE8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlFQnRiMlIxYkdVZ1kyTmNjbHh1SUNvdlhISmNiaThxS2x4eVhHNGdLaUFoSTJWdUlDNWNjbHh1SUNvZ0lTTjZhQ0RqZ0lKY2NseHVJQ29nUUdOc1lYTnpJRk5yWld4bGRHOXVRVzVwYldGMGFXOXVYSEpjYmlBcUlFQmxlSFJsYm1SeklFRnVhVzFoZEdsdmJseHlYRzRnS2k5Y2NseHViR1YwSUZOclpXeGxkRzl1UVc1cGJXRjBhVzl1SUQwZ1kyTXVRMnhoYzNNb2UxeHlYRzRnSUNBZ2JtRnRaVG9nSjJOakxsTnJaV3hsZEc5dVFXNXBiV0YwYVc5dUp5eGNjbHh1SUNBZ0lHVjRkR1Z1WkhNNklFRnVhVzFoZEdsdmJpeGNjbHh1WEhKY2JpQWdJQ0JsWkdsMGIzSTZJRU5EWDBWRVNWUlBVaUFtSmlCN1hISmNiaUFnSUNBZ0lDQWdhVzV6Y0dWamRHOXlPaUFuY0dGamEyRm5aWE02THk5cGJuTndaV04wYjNJdmFXNXpjR1ZqZEc5eWN5OWpiMjF3Y3k5emEyVnNaWFJ2YmkxaGJtbHRZWFJwYjI0dWFuTW5MRnh5WEc0Z0lDQWdJQ0FnSUcxbGJuVTZJQ2RwTVRodU9rMUJTVTVmVFVWT1ZTNWpiMjF3YjI1bGJuUXViM1JvWlhKekwxTnJaV3hsZEc5dUlFRnVhVzFoZEdsdmJpY3NYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUhCeWIzQmxjblJwWlhNNklIdGNjbHh1SUNBZ0lDQWdJQ0JmYlc5a1pXdzZJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZtWVhWc2REb2diblZzYkN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEhsd1pUb2dUVzlrWld4Y2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmZaR1ZtWVhWc2RFTnNhWEE2SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjNabGNuSnBaR1U2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNklHNTFiR3dzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklGTnJaV3hsZEc5dVFXNXBiV0YwYVc5dVEyeHBjQ3hjY2x4dUlDQWdJQ0FnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQ0FnSUNCZlkyeHBjSE02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYjNabGNuSnBaR1U2SUhSeWRXVXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmxabUYxYkhRNklGdGRMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBlWEJsT2lCYlUydGxiR1YwYjI1QmJtbHRZWFJwYjI1RGJHbHdYU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbWx6YVdKc1pUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQmtaV1poZFd4MFEyeHBjRG9nZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J2ZG1WeWNtbGtaVG9nZEhKMVpTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWldaaGRXeDBRMnhwY0R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJWMElDaDJLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlrWldaaGRXeDBRMnhwY0NBOUlIWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMHNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUZOclpXeGxkRzl1UVc1cGJXRjBhVzl1UTJ4cGNDeGNjbHh1SUNBZ0lDQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0J0YjJSbGJEb2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm5aWFFnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDIxdlpHVnNPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnpaWFFnS0haaGJDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiVzlrWld3Z1BTQjJZV3c3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDkxY0dSaGRHVkRiR2x3VFc5a1pXd29LVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkSGx3WlRvZ1RXOWtaV3dzWEhKY2JpQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnWDE5d2NtVnNiMkZrSUNncElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOTFjR1JoZEdWRGJHbHdUVzlrWld3b0tUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnWDNWd1pHRjBaVU5zYVhCTmIyUmxiQ0FvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMlJsWm1GMWJIUkRiR2x3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlJsWm1GMWJIUkRiR2x3TGw5dGIyUmxiQ0E5SUhSb2FYTXVYMjF2WkdWc08xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQnNaWFFnWTJ4cGNITWdQU0IwYUdsekxsOWpiR2x3Y3p0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0d4bGRDQnBJRDBnTURzZ2FTQThJR05zYVhCekxteGxibWQwYURzZ2FTc3JLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR05zYVhCelcybGRMbDl0YjJSbGJDQTlJSFJvYVhNdVgyMXZaR1ZzTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnWVdSa1EyeHBjQ0FvWTJ4cGNDd2dibVYzVG1GdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdOc2FYQXVYMjF2WkdWc0lEMGdkR2hwY3k1ZmJXOWtaV3c3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUVGdWFXMWhkR2x2Ymk1d2NtOTBiM1I1Y0dVdVlXUmtRMnhwY0M1allXeHNLSFJvYVhNc0lHTnNhWEFzSUc1bGQwNWhiV1VwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQnpaV0Z5WTJoRGJHbHdjem9nUTBOZlJVUkpWRTlTSUNZbUlHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqYkdsd2N5NXNaVzVuZEdnZ1BTQXdPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnpaV3htSUQwZ2RHaHBjenRjY2x4dUlDQWdJQ0FnSUNCRlpHbDBiM0l1WVhOelpYUmtZaTV4ZFdWeWVWQmhkR2hDZVZWMWFXUW9kR2hwY3k1ZmJXOWtaV3d1WDNWMWFXUXNJR1oxYm1OMGFXOXVJQ2hsY25Jc0lHMXZaR1ZzVUdGMGFDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvWlhKeUtTQnlaWFIxY200Z1kyOXVjMjlzWlM1bGNuSnZjaWhsY25JcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTI5dWMzUWdVR0YwYUNBOUlISmxjWFZwY21Vb0oyWnBjbVV0Y0dGMGFDY3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnNaWFFnY1hWbGNubFFZWFJvSUQwZ1VHRjBhQzV5Wld4aGRHbDJaU2hGWkdsMGIzSXVjbVZ0YjNSbExsQnliMnBsWTNRdWNHRjBhQ3dnYlc5a1pXeFFZWFJvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY1hWbGNubFFZWFJvSUQwZ1VHRjBhQzVxYjJsdUtGQmhkR2d1WkdseWJtRnRaU2h4ZFdWeWVWQmhkR2dwTENCUVlYUm9MbUpoYzJWdVlXMWxUbTlGZUhRb2NYVmxjbmxRWVhSb0tTazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIRjFaWEo1VUdGMGFDQTlJR0JrWWpvdkx5UjdjWFZsY25sUVlYUm9mU292S2k1ellXTmdPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnUldScGRHOXlMbUZ6YzJWMFpHSXVjWFZsY25sQmMzTmxkSE1vY1hWbGNubFFZWFJvTENCdWRXeHNMQ0JtZFc1amRHbHZiaUFvWlhKeUxDQnlaWE4xYkhSektTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2NtVnpkV3gwY3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdadmNpQW9iR1YwSUdrZ1BTQXdPeUJwSUR3Z2NtVnpkV3gwY3k1c1pXNW5kR2c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzWlhRZ1kyeHBjQ0E5SUc1bGR5QlRhMlZzWlhSdmJrRnVhVzFoZEdsdmJrTnNhWEFvS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyeHBjQzVmZFhWcFpDQTlJSEpsYzNWc2RITmJhVjB1ZFhWcFpEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZlkyeHBjSE11Y0hWemFDaGpiR2x3S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZlpHVm1ZWFZzZEVOc2FYQWdQU0J6Wld4bUxsOWpiR2x3YzFzd1hUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0FnSUNBZ2ZTazdYSEpjYmlBZ0lDQjlYSEpjYm4wcE8xeHlYRzVjY2x4dVkyTXVVMnRsYkdWMGIyNUJibWx0WVhScGIyNGdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRk5yWld4bGRHOXVRVzVwYldGMGFXOXVPMXh5WEc0aVhYMD0iXX0=