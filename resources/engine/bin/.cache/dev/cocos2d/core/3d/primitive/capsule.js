(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/capsule.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            var radiusTop = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
            var radiusBottom = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
            var height = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;
            var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
            var torsoHeight = height - radiusTop - radiusBottom;
            var sides = opts.sides || 32;
            var heightSegments = opts.heightSegments || 32;
            var bottomProp = radiusBottom / height;
            var torProp = torsoHeight / height;
            var topProp = radiusTop / height;
            var bottomSegments = Math.floor(heightSegments * bottomProp);
            var topSegments = Math.floor(heightSegments * topProp);
            var torSegments = Math.floor(heightSegments * torProp);
            var topOffset = torsoHeight + radiusBottom - height / 2;
            var torOffset = radiusBottom - height / 2;
            var bottomOffset = radiusBottom - height / 2;
            var arc = opts.arc || 2 * Math.PI;
            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];
            var maxRadius = Math.max(radiusTop, radiusBottom);
            var minPos = _vmath.vec3.create(-maxRadius, -height / 2, -maxRadius);
            var maxPos = _vmath.vec3.create(maxRadius, height / 2, maxRadius);
            var boundingRadius = height / 2;
            var index = 0;
            var indexArray = [];
            generateBottom();
            generateTorso();
            generateTop();
            return new _vertexData2.default(positions, normals, uvs, indices, minPos, maxPos, boundingRadius);
            function generateTorso() {
                var slope = (radiusTop - radiusBottom) / torsoHeight;
                for (var y = 0; y <= torSegments; y++) {
                    var indexRow = [];
                    var lat = y / torSegments;
                    var radius = lat * (radiusTop - radiusBottom) + radiusBottom;
                    for (var x = 0; x <= sides; ++x) {
                        var u = x / sides;
                        var v = lat * torProp + bottomProp;
                        var theta = u * arc - arc / 4;
                        var sinTheta = Math.sin(theta);
                        var cosTheta = Math.cos(theta);
                        positions.push(radius * sinTheta);
                        positions.push(lat * torsoHeight + torOffset);
                        positions.push(radius * cosTheta);
                        _vmath.vec3.normalize(temp1, _vmath.vec3.set(temp2, sinTheta, -slope, cosTheta));
                        normals.push(temp1.x);
                        normals.push(temp1.y);
                        normals.push(temp1.z);
                        uvs.push(u, v);
                        indexRow.push(index);
                        ++index;
                    }
                    indexArray.push(indexRow);
                }
                for (var _y = 0; _y < torSegments; ++_y) {
                    for (var _x5 = 0; _x5 < sides; ++_x5) {
                        var i1 = indexArray[_y][_x5];
                        var i2 = indexArray[_y + 1][_x5];
                        var i3 = indexArray[_y + 1][_x5 + 1];
                        var i4 = indexArray[_y][_x5 + 1];
                        indices.push(i1);
                        indices.push(i4);
                        indices.push(i2);
                        indices.push(i4);
                        indices.push(i3);
                        indices.push(i2);
                    }
                }
            }
            function generateBottom() {
                for (var lat = 0; lat <= bottomSegments; ++lat) {
                    var theta = lat * Math.PI / bottomSegments / 2;
                    var sinTheta = Math.sin(theta);
                    var cosTheta = -Math.cos(theta);
                    for (var lon = 0; lon <= sides; ++lon) {
                        var phi = lon * 2 * Math.PI / sides - Math.PI / 2;
                        var sinPhi = Math.sin(phi);
                        var cosPhi = Math.cos(phi);
                        var x = sinPhi * sinTheta;
                        var y = cosTheta;
                        var z = cosPhi * sinTheta;
                        var u = lon / sides;
                        var v = lat / heightSegments;
                        positions.push(x * radiusBottom, y * radiusBottom + bottomOffset, z * radiusBottom);
                        normals.push(x, y, z);
                        uvs.push(u, v);
                        if (lat < bottomSegments && lon < sides) {
                            var seg1 = sides + 1;
                            var a = seg1 * lat + lon;
                            var b = seg1 * (lat + 1) + lon;
                            var c = seg1 * (lat + 1) + lon + 1;
                            var d = seg1 * lat + lon + 1;
                            indices.push(a, d, b);
                            indices.push(d, c, b);
                        }
                        ++index;
                    }
                }
            }
            function generateTop() {
                for (var lat = 0; lat <= topSegments; ++lat) {
                    var theta = lat * Math.PI / topSegments / 2 + Math.PI / 2;
                    var sinTheta = Math.sin(theta);
                    var cosTheta = -Math.cos(theta);
                    for (var lon = 0; lon <= sides; ++lon) {
                        var phi = lon * 2 * Math.PI / sides - Math.PI / 2;
                        var sinPhi = Math.sin(phi);
                        var cosPhi = Math.cos(phi);
                        var x = sinPhi * sinTheta;
                        var y = cosTheta;
                        var z = cosPhi * sinTheta;
                        var u = lon / sides;
                        var v = lat / heightSegments + (1 - topProp);
                        positions.push(x * radiusTop, y * radiusTop + topOffset, z * radiusTop);
                        normals.push(x, y, z);
                        uvs.push(u, v);
                        if (lat < topSegments && lon < sides) {
                            var seg1 = sides + 1;
                            var a = seg1 * lat + lon + indexArray[torSegments][sides] + 1;
                            var b = seg1 * (lat + 1) + lon + indexArray[torSegments][sides] + 1;
                            var c = seg1 * (lat + 1) + lon + 1 + indexArray[torSegments][sides] + 1;
                            var d = seg1 * lat + lon + 1 + indexArray[torSegments][sides] + 1;
                            indices.push(a, d, b);
                            indices.push(d, c, b);
                        }
                    }
                }
            }
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var temp1 = _vmath.vec3.create(0, 0, 0);
        var temp2 = _vmath.vec3.create(0, 0, 0);
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,