(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/CCModel.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Model = cc.Class({
            name: 'cc.Model',
            extends: cc.Asset,
            ctor: function ctor() {
                this._rootNode = null;
            },
            properties: {
                _nodes: { default: [] },
                _precomputeJointMatrix: false,
                nodes: {
                    get: function get() {
                        return this._nodes;
                    }
                },
                rootNode: {
                    get: function get() {
                        return this._rootNode;
                    }
                },
                precomputeJointMatrix: {
                    get: function get() {
                        return this._precomputeJointMatrix;
                    }
                }
            },
            onLoad: function onLoad() {
                var nodes = this._nodes;
                this._rootNode = nodes[0];
                for (var i = 0; i < nodes.length; i++) {
                    var node = nodes[i];
                    node.position = cc.v3.apply(this, node.position);
                    node.scale = cc.v3.apply(this, node.scale);
                    node.quat = cc.quat.apply(this, node.quat);
                    if (node.uniqueBindPose) {
                        node.uniqueBindPose = cc.mat4.apply(this, node.uniqueBindPose);
                    }
                    var pose = node.bindpose;
                    if (pose) {
                        for (var _i in pose) {
                            pose[_i] = cc.mat4.apply(this, pose[_i]);
                        }
                    }
                    var children = node.children;
                    if (children) {
                        for (var _i2 = 0; _i2 < children.length; _i2++) {
                            children[_i2] = nodes[children[_i2]];
                        }
                    }
                }
            }
        });
        cc.Model = module.exports = Model;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,