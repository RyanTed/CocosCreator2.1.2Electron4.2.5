(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/primitive/sphere.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.default = function () {
            var radius = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0.5;
            var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
            var segments = opts.segments !== undefined ? opts.segments : 32;
            var positions = [];
            var normals = [];
            var uvs = [];
            var indices = [];
            var minPos = _vmath.vec3.create(-radius, -radius, -radius);
            var maxPos = _vmath.vec3.create(radius, radius, radius);
            var boundingRadius = radius;
            for (var lat = 0; lat <= segments; ++lat) {
                var theta = lat * Math.PI / segments;
                var sinTheta = Math.sin(theta);
                var cosTheta = -Math.cos(theta);
                for (var lon = 0; lon <= segments; ++lon) {
                    var phi = lon * 2 * Math.PI / segments - Math.PI / 2;
                    var sinPhi = Math.sin(phi);
                    var cosPhi = Math.cos(phi);
                    var x = sinPhi * sinTheta;
                    var y = cosTheta;
                    var z = cosPhi * sinTheta;
                    var u = lon / segments;
                    var v = lat / segments;
                    positions.push(x * radius, y * radius, z * radius);
                    normals.push(x, y, z);
                    uvs.push(u, v);
                    if (lat < segments && lon < segments) {
                        var seg1 = segments + 1;
                        var a = seg1 * lat + lon;
                        var b = seg1 * (lat + 1) + lon;
                        var c = seg1 * (lat + 1) + lon + 1;
                        var d = seg1 * lat + lon + 1;
                        indices.push(a, d, b);
                        indices.push(d, c, b);
                    }
                }
            }
            return new _vertexData2.default(positions, indices, normals, uvs, minPos, maxPos, boundingRadius);
        };
        var _vmath = require('../../vmath');
        var _vertexData = require('./vertex-data');
        var _vertexData2 = _interopRequireDefault(_vertexData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        module.exports = exports['default'];
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,