(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/3d/actions.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var quat = cc.vmath.quat;
        var _quat_tmp = cc.quat();
        var _vec3_tmp = cc.v3();
        cc.Rotate3DTo = cc.Class({
            name: 'cc.Rotate3DTo',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, dstAngleX, dstAngleY, dstAngleZ) {
                this._startQuat = cc.quat();
                this._dstQuat = cc.quat();
                dstAngleX !== undefined && this.initWithDuration(duration, dstAngleX, dstAngleY, dstAngleZ);
            },
            initWithDuration: function initWithDuration(duration, dstAngleX, dstAngleY, dstAngleZ) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    var dstQuat = this._dstQuat;
                    if (dstAngleX instanceof cc.Quat) {
                        dstQuat.set(dstAngleX);
                    } else {
                        if (dstAngleX instanceof cc.Vec3) {
                            dstAngleY = dstAngleX.y;
                            dstAngleZ = dstAngleX.z;
                            dstAngleX = dstAngleX.x;
                        } else {
                            dstAngleY = dstAngleY || 0;
                            dstAngleZ = dstAngleZ || 0;
                        }
                        cc.vmath.quat.fromEuler(dstQuat, dstAngleX, dstAngleY, dstAngleZ);
                    }
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Rotate3DTo();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._dstQuat);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._startQuat.set(target.quat);
            },
            reverse: function reverse() {
                cc.logID(1016);
            },
            update: function update(dt) {
                dt = this._computeEaseTime(dt);
                if (this.target) {
                    quat.slerp(_quat_tmp, this._startQuat, this._dstQuat, dt);
                    this.target.setRotation(_quat_tmp);
                }
            }
        });
        cc.rotate3DTo = function (duration, dstAngleX, dstAngleY, dstAngleZ) {
            return new cc.Rotate3DTo(duration, dstAngleX, dstAngleY, dstAngleZ);
        };
        cc.Rotate3DBy = cc.Class({
            name: 'cc.Rotate3DBy',
            extends: cc.ActionInterval,
            ctor: function ctor(duration, deltaAngleX, deltaAngleY, deltaAngleZ) {
                this._angle = cc.v3();
                this._quat = cc.quat();
                this._lastDt = 0;
                deltaAngleX !== undefined && this.initWithDuration(duration, deltaAngleX, deltaAngleY, deltaAngleZ);
            },
            initWithDuration: function initWithDuration(duration, deltaAngleX, deltaAngleY, deltaAngleZ) {
                if (cc.ActionInterval.prototype.initWithDuration.call(this, duration)) {
                    if (deltaAngleX instanceof cc.Vec3) {
                        deltaAngleY = deltaAngleX.y;
                        deltaAngleZ = deltaAngleX.z;
                        deltaAngleX = deltaAngleX.x;
                    } else {
                        deltaAngleY = deltaAngleY || 0;
                        deltaAngleZ = deltaAngleZ || 0;
                    }
                    cc.vmath.vec3.set(this._angle, deltaAngleX, deltaAngleY, deltaAngleZ);
                    return true;
                }
                return false;
            },
            clone: function clone() {
                var action = new cc.Rotate3DBy();
                this._cloneDecoration(action);
                action.initWithDuration(this._duration, this._angle);
                return action;
            },
            startWithTarget: function startWithTarget(target) {
                cc.ActionInterval.prototype.startWithTarget.call(this, target);
                this._quat.set(target.quat);
                this._lastDt = 0;
            },
            update: function () {
                var RAD = Math.PI / 180;
                return function (dt) {
                    dt = this._computeEaseTime(dt);
                    if (this.target) {
                        var angle = this._angle;
                        var dstQuat = this._quat;
                        var delta = dt - this._lastDt;
                        var angleX = angle.x, angleY = angle.y, angleZ = angle.z;
                        if (angleX)
                            quat.rotateX(dstQuat, dstQuat, angleX * RAD * delta);
                        if (angleY)
                            quat.rotateY(dstQuat, dstQuat, angleY * RAD * delta);
                        if (angleZ)
                            quat.rotateZ(dstQuat, dstQuat, angleZ * RAD * delta);
                        this.target.setRotation(dstQuat);
                        this._lastDt = dt;
                    }
                };
            }(),
            reverse: function reverse() {
                var angle = this._angle;
                _vec3_tmp.x = -angle.x;
                _vec3_tmp.y = -angle.y;
                _vec3_tmp.z = -angle.z;
                var action = new cc.Rotate3DBy(this._duration, _vec3_tmp);
                this._cloneDecoration(action);
                this._reverseEaseList(action);
                return action;
            }
        });
        cc.rotate3DBy = function (duration, deltaAngleX, deltaAngleY, deltaAngleZ) {
            return new cc.Rotate3DBy(duration, deltaAngleX, deltaAngleY, deltaAngleZ);
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,