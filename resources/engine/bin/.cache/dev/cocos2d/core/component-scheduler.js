(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/component-scheduler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./platform/CCClass');
        var Flags = require('./platform/CCObject').Flags;
        var jsArray = require('./platform/js').array;
        var IsStartCalled = Flags.IsStartCalled;
        var IsOnEnableCalled = Flags.IsOnEnableCalled;
        var IsEditorOnEnableCalled = Flags.IsEditorOnEnableCalled;
        var callerFunctor = CC_EDITOR && require('./utils/misc').tryCatchFunctor_EDITOR;
        var callOnEnableInTryCatch = CC_EDITOR && callerFunctor('onEnable');
        var callStartInTryCatch = CC_EDITOR && callerFunctor('start', null, 'target._objFlags |= ' + IsStartCalled);
        var callUpdateInTryCatch = CC_EDITOR && callerFunctor('update', 'dt');
        var callLateUpdateInTryCatch = CC_EDITOR && callerFunctor('lateUpdate', 'dt');
        var callOnDisableInTryCatch = CC_EDITOR && callerFunctor('onDisable');
        var callStart = CC_SUPPORT_JIT ? 'c.start();c._objFlags|=' + IsStartCalled : function (c) {
            c.start();
            c._objFlags |= IsStartCalled;
        };
        var callUpdate = CC_SUPPORT_JIT ? 'c.update(dt)' : function (c, dt) {
            c.update(dt);
        };
        var callLateUpdate = CC_SUPPORT_JIT ? 'c.lateUpdate(dt)' : function (c, dt) {
            c.lateUpdate(dt);
        };
        function sortedIndex(array, comp) {
            var order = comp.constructor._executionOrder;
            var id = comp._id;
            for (var l = 0, h = array.length - 1, m = h >>> 1; l <= h; m = l + h >>> 1) {
                var test = array[m];
                var testOrder = test.constructor._executionOrder;
                if (testOrder > order) {
                    h = m - 1;
                } else if (testOrder < order) {
                    l = m + 1;
                } else {
                    var testId = test._id;
                    if (testId > id) {
                        h = m - 1;
                    } else if (testId < id) {
                        l = m + 1;
                    } else {
                        return m;
                    }
                }
            }
            return ~l;
        }
        function stableRemoveInactive(iterator, flagToClear) {
            var array = iterator.array;
            var next = iterator.i + 1;
            while (next < array.length) {
                var comp = array[next];
                if (comp._enabled && comp.node._activeInHierarchy) {
                    ++next;
                } else {
                    iterator.removeAt(next);
                    if (flagToClear) {
                        comp._objFlags &= ~flagToClear;
                    }
                }
            }
        }
        var LifeCycleInvoker = cc.Class({
            __ctor__: function __ctor__(invokeFunc) {
                var Iterator = jsArray.MutableForwardIterator;
                this._zero = new Iterator([]);
                this._neg = new Iterator([]);
                this._pos = new Iterator([]);
                if (CC_TEST) {
                    cc.assert(typeof invokeFunc === 'function', 'invokeFunc must be type function');
                }
                this._invoke = invokeFunc;
            },
            statics: { stableRemoveInactive: stableRemoveInactive },
            add: null,
            remove: null,
            invoke: null
        });
        function compareOrder(a, b) {
            return a.constructor._executionOrder - b.constructor._executionOrder;
        }
        var OneOffInvoker = cc.Class({
            extends: LifeCycleInvoker,
            add: function add(comp) {
                var order = comp.constructor._executionOrder;
                (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).array.push(comp);
            },
            remove: function remove(comp) {
                var order = comp.constructor._executionOrder;
                (order === 0 ? this._zero : order < 0 ? this._neg : this._pos).fastRemove(comp);
            },
            cancelInactive: function cancelInactive(flagToClear) {
                stableRemoveInactive(this._zero, flagToClear);
                stableRemoveInactive(this._neg, flagToClear);
                stableRemoveInactive(this._pos, flagToClear);
            },
            invoke: function invoke() {
                var compsNeg = this._neg;
                if (compsNeg.array.length > 0) {
                    compsNeg.array.sort(compareOrder);
                    this._invoke(compsNeg);
                    compsNeg.array.length = 0;
                }
                this._invoke(this._zero);
                this._zero.array.length = 0;
                var compsPos = this._pos;
                if (compsPos.array.length > 0) {
                    compsPos.array.sort(compareOrder);
                    this._invoke(compsPos);
                    compsPos.array.length = 0;
                }
            }
        });
        var ReusableInvoker = cc.Class({
            extends: LifeCycleInvoker,
            add: function add(comp) {
                var order = comp.constructor._executionOrder;
                if (order === 0) {
                    this._zero.array.push(comp);
                } else {
                    var array = order < 0 ? this._neg.array : this._pos.array;
                    var i = sortedIndex(array, comp);
                    if (i < 0) {
                        array.splice(~i, 0, comp);
                    } else if (CC_DEV) {
                        cc.error('component already added');
                    }
                }
            },
            remove: function remove(comp) {
                var order = comp.constructor._executionOrder;
                if (order === 0) {
                    this._zero.fastRemove(comp);
                } else {
                    var iterator = order < 0 ? this._neg : this._pos;
                    var i = sortedIndex(iterator.array, comp);
                    if (i >= 0) {
                        iterator.removeAt(i);
                    }
                }
            },
            invoke: function invoke(dt) {
                if (this._neg.array.length > 0) {
                    this._invoke(this._neg, dt);
                }
                this._invoke(this._zero, dt);
                if (this._pos.array.length > 0) {
                    this._invoke(this._pos, dt);
                }
            }
        });
        function enableInEditor(comp) {
            if (!(comp._objFlags & IsEditorOnEnableCalled)) {
                cc.engine.emit('component-enabled', comp.uuid);
                comp._objFlags |= IsEditorOnEnableCalled;
            }
        }
        function createInvokeImpl(funcOrCode, useDt) {
            if (typeof funcOrCode === 'function') {
                if (useDt) {
                    return function (iterator, dt) {
                        var array = iterator.array;
                        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                            var comp = array[iterator.i];
                            funcOrCode(comp, dt);
                        }
                    };
                } else {
                    return function (iterator) {
                        var array = iterator.array;
                        for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                            var comp = array[iterator.i];
                            funcOrCode(comp);
                        }
                    };
                }
            } else {
                var body = 'var a=it.array;' + 'for(it.i=0;it.i<a.length;++it.i){' + 'var c=a[it.i];' + funcOrCode + '}';
                if (useDt) {
                    return Function('it', 'dt', body);
                } else {
                    return Function('it', body);
                }
            }
        }
        function ctor() {
            this.startInvoker = new OneOffInvoker(createInvokeImpl(CC_EDITOR ? callStartInTryCatch : callStart));
            this.updateInvoker = new ReusableInvoker(createInvokeImpl(CC_EDITOR ? callUpdateInTryCatch : callUpdate, true));
            this.lateUpdateInvoker = new ReusableInvoker(createInvokeImpl(CC_EDITOR ? callLateUpdateInTryCatch : callLateUpdate, true));
            this.scheduleInNextFrame = [];
            this._updating = false;
        }
        var ComponentScheduler = cc.Class({
            ctor: ctor,
            unscheduleAll: ctor,
            statics: {
                LifeCycleInvoker: LifeCycleInvoker,
                OneOffInvoker: OneOffInvoker,
                createInvokeImpl: createInvokeImpl,
                invokeOnEnable: CC_EDITOR ? function (iterator) {
                    var compScheduler = cc.director._compScheduler;
                    var array = iterator.array;
                    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                        var comp = array[iterator.i];
                        if (comp._enabled) {
                            callOnEnableInTryCatch(comp);
                            var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;
                            if (!deactivatedDuringOnEnable) {
                                compScheduler._onEnabled(comp);
                            }
                        }
                    }
                } : function (iterator) {
                    var compScheduler = cc.director._compScheduler;
                    var array = iterator.array;
                    for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                        var comp = array[iterator.i];
                        if (comp._enabled) {
                            comp.onEnable();
                            var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;
                            if (!deactivatedDuringOnEnable) {
                                compScheduler._onEnabled(comp);
                            }
                        }
                    }
                }
            },
            _onEnabled: function _onEnabled(comp) {
                cc.director.getScheduler().resumeTarget(comp);
                comp._objFlags |= IsOnEnableCalled;
                if (this._updating) {
                    this.scheduleInNextFrame.push(comp);
                } else {
                    this._scheduleImmediate(comp);
                }
            },
            _onDisabled: function _onDisabled(comp) {
                cc.director.getScheduler().pauseTarget(comp);
                comp._objFlags &= ~IsOnEnableCalled;
                var index = this.scheduleInNextFrame.indexOf(comp);
                if (index >= 0) {
                    jsArray.fastRemoveAt(this.scheduleInNextFrame, index);
                    return;
                }
                if (comp.start && !(comp._objFlags & IsStartCalled)) {
                    this.startInvoker.remove(comp);
                }
                if (comp.update) {
                    this.updateInvoker.remove(comp);
                }
                if (comp.lateUpdate) {
                    this.lateUpdateInvoker.remove(comp);
                }
            },
            enableComp: CC_EDITOR ? function (comp, invoker) {
                if (cc.engine.isPlaying || comp.constructor._executeInEditMode) {
                    if (!(comp._objFlags & IsOnEnableCalled)) {
                        if (comp.onEnable) {
                            if (invoker) {
                                invoker.add(comp);
                                enableInEditor(comp);
                                return;
                            } else {
                                callOnEnableInTryCatch(comp);
                                var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;
                                if (deactivatedDuringOnEnable) {
                                    return;
                                }
                            }
                        }
                        this._onEnabled(comp);
                    }
                }
                enableInEditor(comp);
            } : function (comp, invoker) {
                if (!(comp._objFlags & IsOnEnableCalled)) {
                    if (comp.onEnable) {
                        if (invoker) {
                            invoker.add(comp);
                            return;
                        } else {
                            comp.onEnable();
                            var deactivatedDuringOnEnable = !comp.node._activeInHierarchy;
                            if (deactivatedDuringOnEnable) {
                                return;
                            }
                        }
                    }
                    this._onEnabled(comp);
                }
            },
            disableComp: CC_EDITOR ? function (comp) {
                if (cc.engine.isPlaying || comp.constructor._executeInEditMode) {
                    if (comp._objFlags & IsOnEnableCalled) {
                        if (comp.onDisable) {
                            callOnDisableInTryCatch(comp);
                        }
                        this._onDisabled(comp);
                    }
                }
                if (comp._objFlags & IsEditorOnEnableCalled) {
                    cc.engine.emit('component-disabled', comp.uuid);
                    comp._objFlags &= ~IsEditorOnEnableCalled;
                }
            } : function (comp) {
                if (comp._objFlags & IsOnEnableCalled) {
                    if (comp.onDisable) {
                        comp.onDisable();
                    }
                    this._onDisabled(comp);
                }
            },
            _scheduleImmediate: function _scheduleImmediate(comp) {
                if (comp.start && !(comp._objFlags & IsStartCalled)) {
                    this.startInvoker.add(comp);
                }
                if (comp.update) {
                    this.updateInvoker.add(comp);
                }
                if (comp.lateUpdate) {
                    this.lateUpdateInvoker.add(comp);
                }
            },
            _deferredSchedule: function _deferredSchedule() {
                var comps = this.scheduleInNextFrame;
                for (var i = 0, len = comps.length; i < len; i++) {
                    var comp = comps[i];
                    this._scheduleImmediate(comp);
                }
                comps.length = 0;
            },
            startPhase: function startPhase() {
                this._updating = true;
                if (this.scheduleInNextFrame.length > 0) {
                    this._deferredSchedule();
                }
                this.startInvoker.invoke();
            },
            updatePhase: function updatePhase(dt) {
                this.updateInvoker.invoke(dt);
            },
            lateUpdatePhase: function lateUpdatePhase(dt) {
                this.lateUpdateInvoker.invoke(dt);
                this._updating = false;
            }
        });
        module.exports = ComponentScheduler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,