(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/font-loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var textUtils = require('../utils/text-utils');
        var _canvasContext = null;
        var _testString = 'BES bswy:->@123丁ぁᄁ';
        var _fontFaces = {};
        var _intervalId = -1;
        var _loadingFonts = [];
        var _timeout = 3000;
        var useNativeCheck = function () {
            var nativeCheck = undefined;
            return function () {
                if (nativeCheck === undefined) {
                    if (!!window.FontFace) {
                        var match = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
                        var safari10Match = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
                        if (match) {
                            nativeCheck = parseInt(match[1], 10) > 42;
                        } else if (safari10Match) {
                            nativeCheck = false;
                        } else {
                            nativeCheck = true;
                        }
                    } else {
                        nativeCheck = false;
                    }
                }
                return nativeCheck;
            };
        }();
        function _checkFontLoaded() {
            var allFontsLoaded = true;
            var now = Date.now();
            for (var i = _loadingFonts.length - 1; i >= 0; i--) {
                var fontLoadHandle = _loadingFonts[i];
                var fontFamily = fontLoadHandle.fontFamilyName;
                if (now - fontLoadHandle.startTime > _timeout) {
                    cc.warnID(4933, fontFamily);
                    fontLoadHandle.callback(null, fontFamily);
                    _loadingFonts.splice(i, 1);
                    continue;
                }
                var oldWidth = fontLoadHandle.refWidth;
                _canvasContext.font = '40px ' + fontFamily;
                var newWidth = textUtils.safeMeasureText(_canvasContext, _testString);
                if (oldWidth !== newWidth) {
                    _loadingFonts.splice(i, 1);
                    fontLoadHandle.callback(null, fontFamily);
                } else {
                    allFontsLoaded = false;
                }
            }
            if (allFontsLoaded) {
                clearInterval(_intervalId);
                _intervalId = -1;
            }
        }
        function nativeCheckFontLoaded(start, font, callback) {
            var loader = new Promise(function (resolve, reject) {
                var check = function check() {
                    var now = Date.now();
                    if (now - start >= _timeout) {
                        reject();
                    } else {
                        document.fonts.load('40px ' + font).then(function (fonts) {
                            if (fonts.length >= 1) {
                                resolve();
                            } else {
                                setTimeout(check, 100);
                            }
                        }, function () {
                            reject();
                        });
                    }
                };
                check();
            });
            var timeoutId = null, timer = new Promise(function (resolve, reject) {
                    timeoutId = setTimeout(reject, _timeout);
                });
            Promise.race([
                timer,
                loader
            ]).then(function () {
                if (timeoutId) {
                    clearTimeout(timeoutId);
                    timeoutId = null;
                }
                callback(null, font);
            }, function () {
                cc.warnID(4933, font);
                callback(null, font);
            });
        }
        var fontLoader = {
            loadFont: function loadFont(item, callback) {
                var url = item.url;
                var fontFamilyName = fontLoader._getFontFamily(url);
                if (_fontFaces[fontFamilyName]) {
                    return fontFamilyName;
                }
                if (!_canvasContext) {
                    var labelCanvas = document.createElement('canvas');
                    labelCanvas.width = 100;
                    labelCanvas.height = 100;
                    _canvasContext = labelCanvas.getContext('2d');
                }
                var fontDesc = '40px ' + fontFamilyName;
                _canvasContext.font = fontDesc;
                var refWidth = textUtils.safeMeasureText(_canvasContext, _testString);
                var fontStyle = document.createElement('style');
                fontStyle.type = 'text/css';
                var fontStr = '';
                if (isNaN(fontFamilyName - 0))
                    fontStr += '@font-face { font-family:' + fontFamilyName + '; src:';
                else
                    fontStr += '@font-face { font-family:\'' + fontFamilyName + '\'; src:';
                fontStr += 'url(\'' + url + '\');';
                fontStyle.textContent = fontStr + '}';
                document.body.appendChild(fontStyle);
                var preloadDiv = document.createElement('div');
                var divStyle = preloadDiv.style;
                divStyle.fontFamily = fontFamilyName;
                preloadDiv.innerHTML = '.';
                divStyle.position = 'absolute';
                divStyle.left = '-100px';
                divStyle.top = '-100px';
                document.body.appendChild(preloadDiv);
                if (useNativeCheck()) {
                    nativeCheckFontLoaded(Date.now(), fontFamilyName, callback);
                } else {
                    var fontLoadHandle = {
                        fontFamilyName: fontFamilyName,
                        refWidth: refWidth,
                        callback: callback,
                        startTime: Date.now()
                    };
                    _loadingFonts.push(fontLoadHandle);
                    if (_intervalId === -1) {
                        _intervalId = setInterval(_checkFontLoaded, 100);
                    }
                }
                _fontFaces[fontFamilyName] = fontStyle;
            },
            _getFontFamily: function _getFontFamily(fontHandle) {
                var ttfIndex = fontHandle.lastIndexOf('.ttf');
                if (ttfIndex === -1)
                    return fontHandle;
                var slashPos = fontHandle.lastIndexOf('/');
                var fontFamilyName;
                if (slashPos === -1) {
                    fontFamilyName = fontHandle.substring(0, ttfIndex) + '_LABEL';
                } else {
                    fontFamilyName = fontHandle.substring(slashPos + 1, ttfIndex) + '_LABEL';
                }
                if (fontFamilyName.indexOf(' ') !== -1) {
                    fontFamilyName = '"' + fontFamilyName + '"';
                }
                return fontFamilyName;
            }
        };
        module.exports = fontLoader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,