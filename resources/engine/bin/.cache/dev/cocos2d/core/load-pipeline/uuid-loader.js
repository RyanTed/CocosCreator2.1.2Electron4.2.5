(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/uuid-loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('../platform/js');
        var debug = require('../CCDebug');
        require('../platform/deserialize');
        var LoadingItems = require('./loading-items');
        function isSceneObj(json) {
            var SCENE_ID = 'cc.Scene';
            var PREFAB_ID = 'cc.Prefab';
            return json && (json[0] && json[0].__type__ === SCENE_ID || json[1] && json[1].__type__ === SCENE_ID || json[0] && json[0].__type__ === PREFAB_ID);
        }
        function parseDepends(item, asset, tdInfo, deferredLoadRawAssetsInRuntime) {
            var uuidList = tdInfo.uuidList;
            var objList = tdInfo.uuidObjList;
            var propList = tdInfo.uuidPropList;
            var stillUseUrl = tdInfo._stillUseUrl;
            var depends;
            var i, dependUuid;
            var dependKeys = item.dependKeys = [];
            if (deferredLoadRawAssetsInRuntime) {
                depends = [];
                for (i = 0; i < uuidList.length; i++) {
                    dependUuid = uuidList[i];
                    var obj = objList[i];
                    var prop = propList[i];
                    var info = cc.AssetLibrary._getAssetInfoInRuntime(dependUuid);
                    if (info.raw) {
                        var url = info.url;
                        obj[prop] = url;
                        dependKeys.push(url);
                    } else {
                        depends.push({
                            type: 'uuid',
                            uuid: dependUuid,
                            deferredLoadRaw: true,
                            _owner: obj,
                            _ownerProp: prop,
                            _stillUseUrl: stillUseUrl[i]
                        });
                    }
                }
            } else {
                depends = new Array(uuidList.length);
                for (i = 0; i < uuidList.length; i++) {
                    dependUuid = uuidList[i];
                    depends[i] = {
                        type: 'uuid',
                        uuid: dependUuid,
                        _owner: objList[i],
                        _ownerProp: propList[i],
                        _stillUseUrl: stillUseUrl[i]
                    };
                }
                if (asset._native && !asset.constructor.preventPreloadNativeObject) {
                    depends.push({
                        url: asset.nativeUrl,
                        _owner: asset,
                        _ownerProp: '_nativeAsset'
                    });
                }
            }
            return depends;
        }
        function loadDepends(pipeline, item, asset, depends, callback) {
            item.content = asset;
            var dependKeys = item.dependKeys;
            pipeline.flowInDeps(item, depends, function (errors, items) {
                var item, missingAssetReporter;
                var itemsMap = items.map;
                for (var src in itemsMap) {
                    item = itemsMap[src];
                    if (item.uuid && item.content) {
                        item.content._uuid = item.uuid;
                    }
                }
                for (var i = 0; i < depends.length; i++) {
                    var loadCallback = function loadCallback(item) {
                        var value = item.content;
                        if (this._stillUseUrl) {
                            value = value && cc.RawAsset.wasRawAssetType(value.constructor) ? value.nativeUrl : item.rawUrl;
                        }
                        if (this._ownerProp === '_nativeAsset') {
                            this._owner.url = item.url;
                        }
                        this._owner[this._ownerProp] = value;
                        if (item.uuid !== asset._uuid && dependKeys.indexOf(item.id) < 0) {
                            dependKeys.push(item.id);
                        }
                    };
                    var dep = depends[i];
                    var dependSrc = dep.uuid;
                    var dependUrl = dep.url;
                    var dependObj = dep._owner;
                    var dependProp = dep._ownerProp;
                    item = itemsMap[dependUrl];
                    if (!item) {
                        continue;
                    }
                    var loadCallbackCtx = dep;
                    if (item.complete || item.content) {
                        if (item.error) {
                            if (CC_EDITOR && item.error.errorCode === 'db.NOTFOUND') {
                                if (!missingAssetReporter) {
                                    var MissingObjectReporter = Editor.require('app://editor/page/scene-utils/missing-object-reporter');
                                    missingAssetReporter = new MissingObjectReporter(asset);
                                }
                                missingAssetReporter.stashByOwner(dependObj, dependProp, Editor.serialize.asAsset(dependSrc));
                            } else {
                                cc._throw(item.error.message || item.error.errorMessage || item.error);
                            }
                        } else {
                            loadCallback.call(loadCallbackCtx, item);
                        }
                    } else {
                        var queue = LoadingItems.getQueue(item);
                        var list = queue._callbackTable[dependSrc];
                        if (list) {
                            list.unshift(loadCallback, loadCallbackCtx);
                        } else {
                            queue.addListener(dependSrc, loadCallback, loadCallbackCtx);
                        }
                    }
                }
                if (CC_EDITOR && missingAssetReporter) {
                    missingAssetReporter.reportByOwner();
                    callback(null, asset);
                } else {
                    if (!errors && asset.onLoad)
                        asset.onLoad();
                    callback(errors, asset);
                }
            });
        }
        function canDeferredLoad(asset, item, isScene) {
            if (CC_EDITOR) {
                return false;
            }
            var res = item.deferredLoadRaw;
            if (res) {
                if (asset instanceof cc.Asset && asset.constructor.preventDeferredLoadDependents) {
                    res = false;
                }
            } else if (isScene) {
                if (asset instanceof cc.SceneAsset || asset instanceof cc.Prefab) {
                    res = asset.asyncLoadAssets;
                }
            }
            return res;
        }
        var MissingClass;
        function loadUuid(item, callback) {
            if (CC_EDITOR) {
                MissingClass = MissingClass || Editor.require('app://editor/page/scene-utils/missing-class-reporter').MissingClass;
            }
            var json;
            if (typeof item.content === 'string') {
                try {
                    json = JSON.parse(item.content);
                } catch (e) {
                    return new Error(debug.getError(4923, item.id, e.stack));
                }
            } else if (_typeof(item.content) === 'object') {
                json = item.content;
            } else {
                return new Error(debug.getError(4924));
            }
            var classFinder;
            var isScene = isSceneObj(json);
            if (isScene) {
                if (CC_EDITOR) {
                    MissingClass.hasMissingClass = false;
                    classFinder = function classFinder(type, data, owner, propName) {
                        var res = MissingClass.classFinder(type, data, owner, propName);
                        if (res) {
                            return res;
                        }
                        return cc._MissingScript.getMissingWrapper(type, data);
                    };
                    classFinder.onDereferenced = MissingClass.classFinder.onDereferenced;
                } else {
                    classFinder = cc._MissingScript.safeFindClass;
                }
            } else {
                classFinder = function classFinder(id) {
                    var cls = js._getClassById(id);
                    if (cls) {
                        return cls;
                    }
                    cc.warnID(4903, id);
                    return Object;
                };
            }
            var tdInfo = cc.deserialize.Details.pool.get();
            var asset;
            try {
                asset = cc.deserialize(json, tdInfo, {
                    classFinder: classFinder,
                    target: item.existingAsset,
                    customEnv: item
                });
            } catch (e) {
                cc.deserialize.Details.pool.put(tdInfo);
                var err = CC_JSB || CC_RUNTIME ? e + '\n' + e.stack : e.stack;
                return new Error(debug.getError(4925, item.id, err));
            }
            asset._uuid = item.uuid;
            asset.url = asset.nativeUrl;
            if (CC_EDITOR && isScene && MissingClass.hasMissingClass) {
                MissingClass.reportMissingClass(asset);
            }
            var deferredLoad = canDeferredLoad(asset, item, isScene);
            var depends = parseDepends(item, asset, tdInfo, deferredLoad);
            cc.deserialize.Details.pool.put(tdInfo);
            if (depends.length === 0) {
                if (asset.onLoad)
                    asset.onLoad();
                return callback(null, asset);
            }
            loadDepends(this.pipeline, item, asset, depends, callback);
        }
        module.exports = loadUuid;
        loadUuid.isSceneObj = isSceneObj;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,