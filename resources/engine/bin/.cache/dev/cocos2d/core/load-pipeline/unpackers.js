(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/unpackers.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Texture2D = require('../assets/CCTexture2D');
        var js = require('../platform/js');
        function JsonUnpacker() {
            this.jsons = {};
        }
        JsonUnpacker.prototype.load = function (indices, packedJson) {
            if (packedJson.length !== indices.length) {
                cc.errorID(4915);
            }
            for (var i = 0; i < indices.length; i++) {
                var key = indices[i];
                var json = packedJson[i];
                this.jsons[key] = json;
            }
        };
        JsonUnpacker.prototype.retrieve = function (key) {
            return this.jsons[key] || null;
        };
        function TextureUnpacker() {
            this.contents = {};
        }
        TextureUnpacker.ID = js._getClassId(Texture2D);
        TextureUnpacker.prototype.load = function (indices, packedJson) {
            var datas = packedJson.data.split('|');
            if (datas.length !== indices.length) {
                cc.errorID(4915);
            }
            for (var i = 0; i < indices.length; i++) {
                this.contents[indices[i]] = datas[i];
            }
        };
        TextureUnpacker.prototype.retrieve = function (key) {
            var content = this.contents[key];
            if (content) {
                return {
                    __type__: TextureUnpacker.ID,
                    content: content
                };
            } else {
                return null;
            }
        };
        if (CC_TEST) {
            cc._Test.JsonUnpacker = JsonUnpacker;
            cc._Test.TextureUnpacker = TextureUnpacker;
        }
        module.exports = {
            JsonUnpacker: JsonUnpacker,
            TextureUnpacker: TextureUnpacker
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,