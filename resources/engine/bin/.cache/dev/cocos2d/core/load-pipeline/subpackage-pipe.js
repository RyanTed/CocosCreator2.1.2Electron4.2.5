(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/subpackage-pipe.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Pipeline = require('./pipeline');
        var ID = 'SubPackPipe';
        var UuidRegex = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/;
        function getUuidFromURL(url) {
            var matches = url.match(UuidRegex);
            if (matches) {
                return matches[1];
            }
            return '';
        }
        var _uuidToSubPack = Object.create(null);
        var SubPackPipe = function SubPackPipe(subpackage) {
            this.id = ID;
            this.async = false;
            this.pipeline = null;
            for (var packName in subpackage) {
                var pack = subpackage[packName];
                pack.uuids && pack.uuids.forEach(function (val) {
                    _uuidToSubPack[val] = pack.path;
                });
            }
        };
        SubPackPipe.ID = ID;
        SubPackPipe.prototype.handle = function (item) {
            item.url = this.transformURL(item.url);
            return null;
        };
        SubPackPipe.prototype.transformURL = function (url) {
            var uuid = getUuidFromURL(url);
            if (uuid) {
                var subpackage = _uuidToSubPack[uuid];
                if (subpackage) {
                    return url.replace('res/raw-assets/', subpackage + 'raw-assets/');
                }
            }
            return url;
        };
        Pipeline.SubPackPipe = module.exports = SubPackPipe;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,