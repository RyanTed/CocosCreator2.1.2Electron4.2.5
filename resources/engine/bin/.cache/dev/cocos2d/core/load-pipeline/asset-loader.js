(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/load-pipeline/asset-loader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('../utils/CCPath');
        var debug = require('../CCDebug');
        var Pipeline = require('./pipeline');
        var LoadingItems = require('./loading-items');
        var ID = 'AssetLoader';
        var AssetLoader = function AssetLoader(extMap) {
            this.id = ID;
            this.async = true;
            this.pipeline = null;
        };
        AssetLoader.ID = ID;
        var reusedArray = [];
        AssetLoader.prototype.handle = function (item, callback) {
            var uuid = item.uuid;
            if (!uuid) {
                return item.content || null;
            }
            var self = this;
            cc.AssetLibrary.queryAssetInfo(uuid, function (error, url, isRawAsset) {
                if (error) {
                    callback(error);
                } else {
                    item.url = item.rawUrl = url;
                    item.isRawAsset = isRawAsset;
                    if (isRawAsset) {
                        var ext = cc.path.extname(url).toLowerCase();
                        if (!ext) {
                            callback(new Error(debug.getError(4931, uuid, url)));
                            return;
                        }
                        ext = ext.substr(1);
                        var queue = LoadingItems.getQueue(item);
                        reusedArray[0] = {
                            queueId: item.queueId,
                            id: url,
                            url: url,
                            type: ext,
                            error: null,
                            alias: item,
                            complete: true
                        };
                        if (CC_EDITOR) {
                            self.pipeline._cache[url] = reusedArray[0];
                        }
                        queue.append(reusedArray);
                        item.type = ext;
                        callback(null, item.content);
                    } else {
                        item.type = 'uuid';
                        callback(null, item.content);
                    }
                }
            });
        };
        Pipeline.AssetLoader = module.exports = AssetLoader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFzc2V0LWxvYWRlci5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvY29yZS9sb2FkLXBpcGVsaW5lL2Fzc2V0LWxvYWRlci5qcyJdLCJuYW1lcyI6WyJyZXF1aXJlIiwiZGVidWciLCJQaXBlbGluZSIsIkxvYWRpbmdJdGVtcyIsIklEIiwiQXNzZXRMb2FkZXIiLCJleHRNYXAiLCJpZCIsImFzeW5jIiwicGlwZWxpbmUiLCJyZXVzZWRBcnJheSIsInByb3RvdHlwZSIsImhhbmRsZSIsIml0ZW0iLCJjYWxsYmFjayIsInV1aWQiLCJjb250ZW50Iiwic2VsZiIsImNjIiwiQXNzZXRMaWJyYXJ5IiwicXVlcnlBc3NldEluZm8iLCJlcnJvciIsInVybCIsImlzUmF3QXNzZXQiLCJyYXdVcmwiLCJleHQiLCJwYXRoIiwiZXh0bmFtZSIsInRvTG93ZXJDYXNlIiwiRXJyb3IiLCJnZXRFcnJvciIsInN1YnN0ciIsInF1ZXVlIiwiZ2V0UXVldWUiLCJxdWV1ZUlkIiwidHlwZSIsImFsaWFzIiwiY29tcGxldGUiLCJDQ19FRElUT1IiLCJfY2FjaGUiLCJhcHBlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkFBLE9BQUFBLENBQVEsaUJBQVJBO1FBQ0EsSUFBTUMsS0FBQUEsR0FBUUQsT0FBQUEsQ0FBUSxZQUFSQSxDQUFkO1FBQ0EsSUFBTUUsUUFBQUEsR0FBV0YsT0FBQUEsQ0FBUSxZQUFSQSxDQUFqQjtRQUNBLElBQU1HLFlBQUFBLEdBQWVILE9BQUFBLENBQVEsaUJBQVJBLENBQXJCO1FBRUEsSUFBSUksRUFBQUEsR0FBSyxhQUFUO1FBRUEsSUFBSUMsV0FBQUEsR0FBYyxTQUFkQSxXQUFjLENBQVVDLE1BQVYsRUFBa0I7QUFBQSxZQUNo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QSxDQUFLc0IsSUFBTHRCLEdBQVksTUFBWkEsQ0FEQztBQUFBLHdCQUVEQyxRQUFBQSxDQUFTLElBQVRBLEVBQWVELElBQUFBLENBQUtHLE9BQXBCRixFQUZDO0FBQUEscUJBNUJKO0FBQUEsaUJBSjhEO0FBQUEsYUFBdkVJLEVBUHFEO0FBQUEsU0FBekRiO1FBK0NBSCxRQUFBQSxDQUFTRyxXQUFUSCxHQUF1QnVDLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCcEMsV0FBeENIIiwiZmlsZSI6ImFzc2V0LWxvYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5yZXF1aXJlKCcuLi91dGlscy9DQ1BhdGgnKTtcclxuY29uc3QgZGVidWcgPSByZXF1aXJlKCcuLi9DQ0RlYnVnJyk7XHJcbmNvbnN0IFBpcGVsaW5lID0gcmVxdWlyZSgnLi9waXBlbGluZScpO1xyXG5jb25zdCBMb2FkaW5nSXRlbXMgPSByZXF1aXJlKCcuL2xvYWRpbmctaXRlbXMnKTtcclxuXHJcbnZhciBJRCA9ICdBc3NldExvYWRlcic7XHJcblxyXG52YXIgQXNzZXRMb2FkZXIgPSBmdW5jdGlvbiAoZXh0TWFwKSB7XHJcbiAgICB0aGlzLmlkID0gSUQ7XHJcbiAgICB0aGlzLmFzeW5jID0gdHJ1ZTtcclxuICAgIHRoaXMucGlwZWxpbmUgPSBudWxsO1xyXG59O1xyXG5Bc3NldExvYWRlci5JRCA9IElEO1xyXG5cclxudmFyIHJldXNlZEFycmF5ID0gW107XHJcbkFzc2V0TG9hZGVyLnByb3RvdHlwZS5oYW5kbGUgPSBmdW5jdGlvbiAoaXRlbSwgY2FsbGJhY2spIHtcclxuICAgIHZhciB1dWlkID0gaXRlbS51dWlkO1xyXG4gICAgaWYgKCF1dWlkKSB7XHJcbiAgICAgICAgcmV0dXJuIGl0ZW0uY29udGVudCB8fCBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIGNjLkFzc2V0TGlicmFyeS5xdWVyeUFzc2V0SW5mbyh1dWlkLCBmdW5jdGlvbiAoZXJyb3IsIHVybCwgaXNSYXdBc3NldCkge1xyXG4gICAgICAgIGlmIChlcnJvcikge1xyXG4gICAgICAgICAgICBjYWxsYmFjayhlcnJvcik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpdGVtLnVybCA9IGl0ZW0ucmF3VXJsID0gdXJsO1xyXG4gICAgICAgICAgICBpdGVtLmlzUmF3QXNzZXQgPSBpc1Jhd0Fzc2V0O1xyXG4gICAgICAgICAgICBpZiAoaXNSYXdBc3NldCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGV4dCA9IGNjLnBhdGguZXh0bmFtZSh1cmwpLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWV4dCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihkZWJ1Zy5nZXRFcnJvcig0OTMxLCB1dWlkLCB1cmwpKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZXh0ID0gZXh0LnN1YnN0cigxKTtcclxuICAgICAgICAgICAgICAgIHZhciBxdWV1ZSA9IExvYWRpbmdJdGVtcy5nZXRRdWV1ZShpdGVtKTtcclxuICAgICAgICAgICAgICAgIHJldXNlZEFycmF5WzBdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlSWQ6IGl0ZW0ucXVldWVJZCxcclxuICAgICAgICAgICAgICAgICAgICBpZDogdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHVybDogdXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGV4dCxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBhbGlhczogaXRlbSxcclxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGlmIChDQ19FRElUT1IpIHtcclxuICAgICAgICAgICAgICAgICAgICBzZWxmLnBpcGVsaW5lLl9jYWNoZVt1cmxdID0gcmV1c2VkQXJyYXlbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBxdWV1ZS5hcHBlbmQocmV1c2VkQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggdG8gb3RoZXIgcmF3IHR5cGUgZG93bmxvYWRlclxyXG4gICAgICAgICAgICAgICAgaXRlbS50eXBlID0gZXh0O1xyXG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgaXRlbS5jb250ZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGl0ZW0udHlwZSA9ICd1dWlkJztcclxuICAgICAgICAgICAgICAgIGNhbGxiYWNrKG51bGwsIGl0ZW0uY29udGVudCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuXHJcblBpcGVsaW5lLkFzc2V0TG9hZGVyID0gbW9kdWxlLmV4cG9ydHMgPSBBc3NldExvYWRlcjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnJlcXVpcmUoJy4uL3V0aWxzL0NDUGF0aCcpO1xudmFyIGRlYnVnID0gcmVxdWlyZSgnLi4vQ0NEZWJ1ZycpO1xudmFyIFBpcGVsaW5lID0gcmVxdWlyZSgnLi9waXBlbGluZScpO1xudmFyIExvYWRpbmdJdGVtcyA9IHJlcXVpcmUoJy4vbG9hZGluZy1pdGVtcycpO1xuXG52YXIgSUQgPSAnQXNzZXRMb2FkZXInO1xuXG52YXIgQXNzZXRMb2FkZXIgPSBmdW5jdGlvbiBBc3NldExvYWRlcihleHRNYXApIHtcbiAgICB0aGlzLmlkID0gSUQ7XG4gICAgdGhpcy5hc3luYyA9IHRydWU7XG4gICAgdGhpcy5waXBlbGluZSA9IG51bGw7XG59O1xuQXNzZXRMb2FkZXIuSUQgPSBJRDtcblxudmFyIHJldXNlZEFycmF5ID0gW107XG5Bc3NldExvYWRlci5wcm90b3R5cGUuaGFuZGxlID0gZnVuY3Rpb24gKGl0ZW0sIGNhbGxiYWNrKSB7XG4gICAgdmFyIHV1aWQgPSBpdGVtLnV1aWQ7XG4gICAgaWYgKCF1dWlkKSB7XG4gICAgICAgIHJldHVybiBpdGVtLmNvbnRlbnQgfHwgbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgY2MuQXNzZXRMaWJyYXJ5LnF1ZXJ5QXNzZXRJbmZvKHV1aWQsIGZ1bmN0aW9uIChlcnJvciwgdXJsLCBpc1Jhd0Fzc2V0KSB7XG4gICAgICAgIGlmIChlcnJvcikge1xuICAgICAgICAgICAgY2FsbGJhY2soZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaXRlbS51cmwgPSBpdGVtLnJhd1VybCA9IHVybDtcbiAgICAgICAgICAgIGl0ZW0uaXNSYXdBc3NldCA9IGlzUmF3QXNzZXQ7XG4gICAgICAgICAgICBpZiAoaXNSYXdBc3NldCkge1xuICAgICAgICAgICAgICAgIHZhciBleHQgPSBjYy5wYXRoLmV4dG5hbWUodXJsKS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIGlmICghZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKG5ldyBFcnJvcihkZWJ1Zy5nZXRFcnJvcig0OTMxLCB1dWlkLCB1cmwpKSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZXh0ID0gZXh0LnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICB2YXIgcXVldWUgPSBMb2FkaW5nSXRlbXMuZ2V0UXVldWUoaXRlbSk7XG4gICAgICAgICAgICAgICAgcmV1c2VkQXJyYXlbMF0gPSB7XG4gICAgICAgICAgICAgICAgICAgIHF1ZXVlSWQ6IGl0ZW0ucXVldWVJZCxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IHVybCxcbiAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGV4dCxcbiAgICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgICAgIGFsaWFzOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICBjb21wbGV0ZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgaWYgKENDX0VESVRPUikge1xuICAgICAgICAgICAgICAgICAgICBzZWxmLnBpcGVsaW5lLl9jYWNoZVt1cmxdID0gcmV1c2VkQXJyYXlbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHF1ZXVlLmFwcGVuZChyZXVzZWRBcnJheSk7XG4gICAgICAgICAgICAgICAgLy8gRGlzcGF0Y2ggdG8gb3RoZXIgcmF3IHR5cGUgZG93bmxvYWRlclxuICAgICAgICAgICAgICAgIGl0ZW0udHlwZSA9IGV4dDtcbiAgICAgICAgICAgICAgICBjYWxsYmFjayhudWxsLCBpdGVtLmNvbnRlbnQpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpdGVtLnR5cGUgPSAndXVpZCc7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sobnVsbCwgaXRlbS5jb250ZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xufTtcblxuUGlwZWxpbmUuQXNzZXRMb2FkZXIgPSBtb2R1bGUuZXhwb3J0cyA9IEFzc2V0TG9hZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GemMyVjBMV3h2WVdSbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKeVpYRjFhWEpsSWl3aVpHVmlkV2NpTENKUWFYQmxiR2x1WlNJc0lreHZZV1JwYm1kSmRHVnRjeUlzSWtsRUlpd2lRWE56WlhSTWIyRmtaWElpTENKbGVIUk5ZWEFpTENKcFpDSXNJbUZ6ZVc1aklpd2ljR2x3Wld4cGJtVWlMQ0p5WlhWelpXUkJjbkpoZVNJc0luQnliM1J2ZEhsd1pTSXNJbWhoYm1Sc1pTSXNJbWwwWlcwaUxDSmpZV3hzWW1GamF5SXNJblYxYVdRaUxDSmpiMjUwWlc1MElpd2ljMlZzWmlJc0ltTmpJaXdpUVhOelpYUk1hV0p5WVhKNUlpd2ljWFZsY25sQmMzTmxkRWx1Wm04aUxDSmxjbkp2Y2lJc0luVnliQ0lzSW1selVtRjNRWE56WlhRaUxDSnlZWGRWY213aUxDSmxlSFFpTENKd1lYUm9JaXdpWlhoMGJtRnRaU0lzSW5SdlRHOTNaWEpEWVhObElpd2lSWEp5YjNJaUxDSm5aWFJGY25KdmNpSXNJbk4xWW5OMGNpSXNJbkYxWlhWbElpd2laMlYwVVhWbGRXVWlMQ0p4ZFdWMVpVbGtJaXdpZEhsd1pTSXNJbUZzYVdGeklpd2lZMjl0Y0d4bGRHVWlMQ0pEUTE5RlJFbFVUMUlpTENKZlkyRmphR1VpTENKaGNIQmxibVFpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNRVUVzVVVGQlVTeHBRa0ZCVWp0QlFVTkJMRWxCUVUxRExGRkJRVkZFTEZGQlFWRXNXVUZCVWl4RFFVRmtPMEZCUTBFc1NVRkJUVVVzVjBGQlYwWXNVVUZCVVN4WlFVRlNMRU5CUVdwQ08wRkJRMEVzU1VGQlRVY3NaVUZCWlVnc1VVRkJVU3hwUWtGQlVpeERRVUZ5UWpzN1FVRkZRU3hKUVVGSlNTeExRVUZMTEdGQlFWUTdPMEZCUlVFc1NVRkJTVU1zWTBGQll5eFRRVUZrUVN4WFFVRmpMRU5CUVZWRExFMUJRVllzUlVGQmEwSTdRVUZEYUVNc1UwRkJTME1zUlVGQlRDeEhRVUZWU0N4RlFVRldPMEZCUTBFc1UwRkJTMGtzUzBGQlRDeEhRVUZoTEVsQlFXSTdRVUZEUVN4VFFVRkxReXhSUVVGTUxFZEJRV2RDTEVsQlFXaENPMEZCUTBnc1EwRktSRHRCUVV0QlNpeFpRVUZaUkN4RlFVRmFMRWRCUVdsQ1FTeEZRVUZxUWpzN1FVRkZRU3hKUVVGSlRTeGpRVUZqTEVWQlFXeENPMEZCUTBGTUxGbEJRVmxOTEZOQlFWb3NRMEZCYzBKRExFMUJRWFJDTEVkQlFTdENMRlZCUVZWRExFbEJRVllzUlVGQlowSkRMRkZCUVdoQ0xFVkJRVEJDTzBGQlEzSkVMRkZCUVVsRExFOUJRVTlHTEV0QlFVdEZMRWxCUVdoQ08wRkJRMEVzVVVGQlNTeERRVUZEUVN4SlFVRk1MRVZCUVZjN1FVRkRVQ3hsUVVGUFJpeExRVUZMUnl4UFFVRk1MRWxCUVdkQ0xFbEJRWFpDTzBGQlEwZzdPMEZCUlVRc1VVRkJTVU1zVDBGQlR5eEpRVUZZTzBGQlEwRkRMRTlCUVVkRExGbEJRVWdzUTBGQlowSkRMR05CUVdoQ0xFTkJRU3RDVEN4SlFVRXZRaXhGUVVGeFF5eFZRVUZWVFN4TFFVRldMRVZCUVdsQ1F5eEhRVUZxUWl4RlFVRnpRa01zVlVGQmRFSXNSVUZCYTBNN1FVRkRia1VzV1VGQlNVWXNTMEZCU2l4RlFVRlhPMEZCUTFCUUxIRkNRVUZUVHl4TFFVRlVPMEZCUTBnc1UwRkdSQ3hOUVVkTE8wRkJRMFJTTEdsQ1FVRkxVeXhIUVVGTUxFZEJRVmRVTEV0QlFVdFhMRTFCUVV3c1IwRkJZMFlzUjBGQmVrSTdRVUZEUVZRc2FVSkJRVXRWTEZWQlFVd3NSMEZCYTBKQkxGVkJRV3hDTzBGQlEwRXNaMEpCUVVsQkxGVkJRVW9zUlVGQlowSTdRVUZEV2l4dlFrRkJTVVVzVFVGQlRWQXNSMEZCUjFFc1NVRkJTQ3hEUVVGUlF5eFBRVUZTTEVOQlFXZENUQ3hIUVVGb1FpeEZRVUZ4UWswc1YwRkJja0lzUlVGQlZqdEJRVU5CTEc5Q1FVRkpMRU5CUVVOSUxFZEJRVXdzUlVGQlZUdEJRVU5PV0N3MlFrRkJVeXhKUVVGSlpTeExRVUZLTEVOQlFWVTFRaXhOUVVGTk5rSXNVVUZCVGl4RFFVRmxMRWxCUVdZc1JVRkJjVUptTEVsQlFYSkNMRVZCUVRKQ1R5eEhRVUV6UWl4RFFVRldMRU5CUVZRN1FVRkRRVHRCUVVOSU8wRkJRMFJITEhOQ1FVRk5RU3hKUVVGSlRTeE5RVUZLTEVOQlFWY3NRMEZCV0N4RFFVRk9PMEZCUTBFc2IwSkJRVWxETEZGQlFWRTNRaXhoUVVGaE9FSXNVVUZCWWl4RFFVRnpRbkJDTEVsQlFYUkNMRU5CUVZvN1FVRkRRVWdzTkVKQlFWa3NRMEZCV2l4SlFVRnBRanRCUVVOaWQwSXNOa0pCUVZOeVFpeExRVUZMY1VJc1QwRkVSRHRCUVVWaU0wSXNkMEpCUVVsbExFZEJSbE03UVVGSFlrRXNlVUpCUVV0QkxFZEJTRkU3UVVGSlltRXNNRUpCUVUxV0xFZEJTazg3UVVGTFlrb3NNa0pCUVU4c1NVRk1UVHRCUVUxaVpTd3lRa0ZCVDNaQ0xFbEJUazA3UVVGUFluZENMRGhDUVVGVk8wRkJVRWNzYVVKQlFXcENPMEZCVTBFc2IwSkJRVWxETEZOQlFVb3NSVUZCWlR0QlFVTllja0lzZVVKQlFVdFNMRkZCUVV3c1EwRkJZemhDTEUxQlFXUXNRMEZCY1VKcVFpeEhRVUZ5UWl4SlFVRTBRbG9zV1VGQldTeERRVUZhTEVOQlFUVkNPMEZCUTBnN1FVRkRSSE5DTEhOQ1FVRk5VU3hOUVVGT0xFTkJRV0U1UWl4WFFVRmlPMEZCUTBFN1FVRkRRVWNzY1VKQlFVdHpRaXhKUVVGTUxFZEJRVmxXTEVkQlFWbzdRVUZEUVZnc2VVSkJRVk1zU1VGQlZDeEZRVUZsUkN4TFFVRkxSeXhQUVVGd1FqdEJRVU5JTEdGQmVFSkVMRTFCZVVKTE8wRkJRMFJJTEhGQ1FVRkxjMElzU1VGQlRDeEhRVUZaTEUxQlFWbzdRVUZEUVhKQ0xIbENRVUZUTEVsQlFWUXNSVUZCWlVRc1MwRkJTMGNzVDBGQmNFSTdRVUZEU0R0QlFVTktPMEZCUTBvc1MwRnlRMFE3UVVGelEwZ3NRMEUzUTBRN08wRkJLME5CWkN4VFFVRlRSeXhYUVVGVUxFZEJRWFZDYjBNc1QwRkJUME1zVDBGQlVDeEhRVUZwUW5KRExGZEJRWGhESWl3aVptbHNaU0k2SW1GemMyVjBMV3h2WVdSbGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYSEpjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRZZ1EyaDFhMjl1WnlCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGx4eVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYSEpjYmx4eVhHNGdhSFIwY0hNNkx5OTNkM2N1WTI5amIzTXVZMjl0TDF4eVhHNWNjbHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNjbHh1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaVzVuYVc1bElITnZkWEpqWlNCamIyUmxJQ2gwYUdVZ1hDSlRiMlowZDJGeVpWd2lLU3dnWVNCc2FXMXBkR1ZrTEZ4eVhHNGdJSGR2Y214a2QybGtaU3dnY205NVlXeDBlUzFtY21WbExDQnViMjR0WVhOemFXZHVZV0pzWlN3Z2NtVjJiMk5oWW14bElHRnVaQ0J1YjI0dFpYaGpiSFZ6YVhabElHeHBZMlZ1YzJWY2NseHVJSFJ2SUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdmJHVnNlU0IwYnlCa1pYWmxiRzl3SUdkaGJXVnpJRzl1SUhsdmRYSWdkR0Z5WjJWMElIQnNZWFJtYjNKdGN5NGdXVzkxSUhOb1lXeHNYSEpjYmlBZ2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh5WEc0Z0lIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2NseHVJQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2NseHVYSEpjYmlCVWFHVWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdhVzRnZEdocGN5Qk1hV05sYm5ObElFRm5jbVZsYldWdWRDQmhjbVVnYkdsalpXNXpaV1FzSUc1dmRDQnpiMnhrTGx4eVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNjbHh1WEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEhKY2JpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTeGNjbHh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHlYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh5WEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjY2x4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNjbHh1SUZSSVJTQlRUMFpVVjBGU1JTNWNjbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYSEpjYmx4eVhHNXlaWEYxYVhKbEtDY3VMaTkxZEdsc2N5OURRMUJoZEdnbktUdGNjbHh1WTI5dWMzUWdaR1ZpZFdjZ1BTQnlaWEYxYVhKbEtDY3VMaTlEUTBSbFluVm5KeWs3WEhKY2JtTnZibk4wSUZCcGNHVnNhVzVsSUQwZ2NtVnhkV2x5WlNnbkxpOXdhWEJsYkdsdVpTY3BPMXh5WEc1amIyNXpkQ0JNYjJGa2FXNW5TWFJsYlhNZ1BTQnlaWEYxYVhKbEtDY3VMMnh2WVdScGJtY3RhWFJsYlhNbktUdGNjbHh1WEhKY2JuWmhjaUJKUkNBOUlDZEJjM05sZEV4dllXUmxjaWM3WEhKY2JseHlYRzUyWVhJZ1FYTnpaWFJNYjJGa1pYSWdQU0JtZFc1amRHbHZiaUFvWlhoMFRXRndLU0I3WEhKY2JpQWdJQ0IwYUdsekxtbGtJRDBnU1VRN1hISmNiaUFnSUNCMGFHbHpMbUZ6ZVc1aklEMGdkSEoxWlR0Y2NseHVJQ0FnSUhSb2FYTXVjR2x3Wld4cGJtVWdQU0J1ZFd4c08xeHlYRzU5TzF4eVhHNUJjM05sZEV4dllXUmxjaTVKUkNBOUlFbEVPMXh5WEc1Y2NseHVkbUZ5SUhKbGRYTmxaRUZ5Y21GNUlEMGdXMTA3WEhKY2JrRnpjMlYwVEc5aFpHVnlMbkJ5YjNSdmRIbHdaUzVvWVc1a2JHVWdQU0JtZFc1amRHbHZiaUFvYVhSbGJTd2dZMkZzYkdKaFkyc3BJSHRjY2x4dUlDQWdJSFpoY2lCMWRXbGtJRDBnYVhSbGJTNTFkV2xrTzF4eVhHNGdJQ0FnYVdZZ0tDRjFkV2xrS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHbDBaVzB1WTI5dWRHVnVkQ0I4ZkNCdWRXeHNPMXh5WEc0Z0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjenRjY2x4dUlDQWdJR05qTGtGemMyVjBUR2xpY21GeWVTNXhkV1Z5ZVVGemMyVjBTVzVtYnloMWRXbGtMQ0JtZFc1amRHbHZiaUFvWlhKeWIzSXNJSFZ5YkN3Z2FYTlNZWGRCYzNObGRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaGxjbkp2Y2lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCallXeHNZbUZqYXlobGNuSnZjaWs3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRMblZ5YkNBOUlHbDBaVzB1Y21GM1ZYSnNJRDBnZFhKc08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcGRHVnRMbWx6VW1GM1FYTnpaWFFnUFNCcGMxSmhkMEZ6YzJWME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hWE5TWVhkQmMzTmxkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR1Y0ZENBOUlHTmpMbkJoZEdndVpYaDBibUZ0WlNoMWNtd3BMblJ2VEc5M1pYSkRZWE5sS0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWNGRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmhiR3hpWVdOcktHNWxkeUJGY25KdmNpaGtaV0oxWnk1blpYUkZjbkp2Y2lnME9UTXhMQ0IxZFdsa0xDQjFjbXdwS1NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pYaDBJRDBnWlhoMExuTjFZbk4wY2lneEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCeGRXVjFaU0E5SUV4dllXUnBibWRKZEdWdGN5NW5aWFJSZFdWMVpTaHBkR1Z0S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkWE5sWkVGeWNtRjVXekJkSUQwZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhGMVpYVmxTV1E2SUdsMFpXMHVjWFZsZFdWSlpDeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFpEb2dkWEpzTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFZ5YkRvZ2RYSnNMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUjVjR1U2SUdWNGRDeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGNuSnZjam9nYm5Wc2JDeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCaGJHbGhjem9nYVhSbGJTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCamIyMXdiR1YwWlRvZ2RISjFaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hEUTE5RlJFbFVUMUlwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J6Wld4bUxuQnBjR1ZzYVc1bExsOWpZV05vWlZ0MWNteGRJRDBnY21WMWMyVmtRWEp5WVhsYk1GMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeGRXVjFaUzVoY0hCbGJtUW9jbVYxYzJWa1FYSnlZWGtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0x5OGdSR2x6Y0dGMFkyZ2dkRzhnYjNSb1pYSWdjbUYzSUhSNWNHVWdaRzkzYm14dllXUmxjbHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVhSbGJTNTBlWEJsSUQwZ1pYaDBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJGc2JHSmhZMnNvYm5Wc2JDd2dhWFJsYlM1amIyNTBaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2wwWlcwdWRIbHdaU0E5SUNkMWRXbGtKenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGJHeGlZV05yS0c1MWJHd3NJR2wwWlcwdVkyOXVkR1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlLVHRjY2x4dWZUdGNjbHh1WEhKY2JsQnBjR1ZzYVc1bExrRnpjMlYwVEc5aFpHVnlJRDBnYlc5a2RXeGxMbVY0Y0c5eWRITWdQU0JCYzNObGRFeHZZV1JsY2pzaVhYMD0iXX0=