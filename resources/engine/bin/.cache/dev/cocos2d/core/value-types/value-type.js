(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/value-type.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        function ValueType() {
        }
        js.setClassName('cc.ValueType', ValueType);
        var proto = ValueType.prototype;
        if (CC_EDITOR) {
            proto.clone = function () {
                cc.errorID('0100', js.getClassName(this) + '.clone');
                return null;
            };
            proto.equals = function (other) {
                cc.errorID('0100', js.getClassName(this) + '.equals');
                return false;
            };
            proto.lerp = function (to, ratio) {
                cc.errorID('0100', js.getClassName(this) + '.lerp');
                return this.clone();
            };
            proto.set = function (source) {
                cc.errorID('0100', js.getClassName(this) + '.set');
            };
        }
        proto.toString = function () {
            return '' + {};
        };
        cc.ValueType = module.exports = ValueType;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,