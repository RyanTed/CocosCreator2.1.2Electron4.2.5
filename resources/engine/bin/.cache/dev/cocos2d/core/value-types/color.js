(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/value-types/color.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var ValueType = require('./value-type');
        var js = require('../platform/js');
        var Color = function () {
            function Color(r, g, b, a) {
                if ((typeof r === 'undefined' ? 'undefined' : _typeof(r)) === 'object') {
                    g = r.g;
                    b = r.b;
                    a = r.a;
                    r = r.r;
                }
                r = r || 0;
                g = g || 0;
                b = b || 0;
                a = typeof a === 'number' ? a : 255;
                this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
            }
            js.extend(Color, ValueType);
            require('../platform/CCClass').fastDefine('cc.Color', Color, {
                r: 0,
                g: 0,
                b: 0,
                a: 255
            });
            var DefaultColors = {
                WHITE: [
                    255,
                    255,
                    255,
                    255
                ],
                BLACK: [
                    0,
                    0,
                    0,
                    255
                ],
                TRANSPARENT: [
                    0,
                    0,
                    0,
                    0
                ],
                GRAY: [
                    127.5,
                    127.5,
                    127.5
                ],
                RED: [
                    255,
                    0,
                    0
                ],
                GREEN: [
                    0,
                    255,
                    0
                ],
                BLUE: [
                    0,
                    0,
                    255
                ],
                YELLOW: [
                    255,
                    235,
                    4
                ],
                ORANGE: [
                    255,
                    127,
                    0
                ],
                CYAN: [
                    0,
                    255,
                    255
                ],
                MAGENTA: [
                    255,
                    0,
                    255
                ]
            };
            for (var colorName in DefaultColors) {
                js.get(Color, colorName, function (rgba) {
                    return function () {
                        return new Color(rgba[0], rgba[1], rgba[2], rgba[3]);
                    };
                }(DefaultColors[colorName]));
            }
            var proto = Color.prototype;
            proto.clone = function () {
                var ret = new Color();
                ret._val = this._val;
                return ret;
            };
            proto.equals = function (other) {
                return other && this._val === other._val;
            };
            proto.lerp = function (to, ratio, out) {
                out = out || new Color();
                var r = this.r;
                var g = this.g;
                var b = this.b;
                var a = this.a;
                out.r = r + (to.r - r) * ratio;
                out.g = g + (to.g - g) * ratio;
                out.b = b + (to.b - b) * ratio;
                out.a = a + (to.a - a) * ratio;
                return out;
            };
            proto.toString = function () {
                return 'rgba(' + this.r.toFixed() + ', ' + this.g.toFixed() + ', ' + this.b.toFixed() + ', ' + this.a.toFixed() + ')';
            };
            proto.getR = function () {
                return this._val & 255;
            };
            proto.setR = function (red) {
                red = ~~cc.misc.clampf(red, 0, 255);
                this._val = (this._val & 4294967040 | red) >>> 0;
                return this;
            };
            proto.getG = function () {
                return (this._val & 65280) >> 8;
            };
            proto.setG = function (green) {
                green = ~~cc.misc.clampf(green, 0, 255);
                this._val = (this._val & 4294902015 | green << 8) >>> 0;
                return this;
            };
            proto.getB = function () {
                return (this._val & 16711680) >> 16;
            };
            proto.setB = function (blue) {
                blue = ~~cc.misc.clampf(blue, 0, 255);
                this._val = (this._val & 4278255615 | blue << 16) >>> 0;
                return this;
            };
            proto.getA = function () {
                return (this._val & 4278190080) >>> 24;
            };
            proto.setA = function (alpha) {
                alpha = ~~cc.misc.clampf(alpha, 0, 255);
                this._val = (this._val & 16777215 | alpha << 24) >>> 0;
                return this;
            };
            proto._fastSetA = function (alpha) {
                this._val = (this._val & 16777215 | alpha << 24) >>> 0;
            };
            js.getset(proto, 'r', proto.getR, proto.setR, true);
            js.getset(proto, 'g', proto.getG, proto.setG, true);
            js.getset(proto, 'b', proto.getB, proto.setB, true);
            js.getset(proto, 'a', proto.getA, proto.setA, true);
            proto.toCSS = function (opt) {
                if (opt === 'rgba') {
                    return 'rgba(' + (this.r | 0) + ',' + (this.g | 0) + ',' + (this.b | 0) + ',' + (this.a / 255).toFixed(2) + ')';
                } else if (opt === 'rgb') {
                    return 'rgb(' + (this.r | 0) + ',' + (this.g | 0) + ',' + (this.b | 0) + ')';
                } else {
                    return '#' + this.toHEX(opt);
                }
            };
            proto.fromHEX = function (hexString) {
                hexString = hexString.indexOf('#') === 0 ? hexString.substring(1) : hexString;
                var r = parseInt(hexString.substr(0, 2), 16) || 0;
                var g = parseInt(hexString.substr(2, 2), 16) || 0;
                var b = parseInt(hexString.substr(4, 2), 16) || 0;
                var a = parseInt(hexString.substr(6, 2), 16) || 255;
                this._val = (a << 24 >>> 0) + (b << 16) + (g << 8) + r;
                return this;
            };
            proto.toHEX = function (fmt) {
                var prefix = '0';
                var hex = [
                    (this.r < 16 ? prefix : '') + (this.r | 0).toString(16),
                    (this.g < 16 ? prefix : '') + (this.g | 0).toString(16),
                    (this.b < 16 ? prefix : '') + (this.b | 0).toString(16)
                ];
                var i = -1;
                if (fmt === '#rgb') {
                    for (i = 0; i < hex.length; ++i) {
                        if (hex[i].length > 1) {
                            hex[i] = hex[i][0];
                        }
                    }
                } else if (fmt === '#rrggbb') {
                    for (i = 0; i < hex.length; ++i) {
                        if (hex[i].length === 1) {
                            hex[i] = '0' + hex[i];
                        }
                    }
                } else if (fmt === '#rrggbbaa') {
                    hex.push((this.a < 16 ? prefix : '') + (this.a | 0).toString(16));
                }
                return hex.join('');
            };
            proto.toRGBValue = function () {
                return this._val & 16777215;
            };
            proto.fromHSV = function (h, s, v) {
                var r, g, b;
                if (s === 0) {
                    r = g = b = v;
                } else {
                    if (v === 0) {
                        r = g = b = 0;
                    } else {
                        if (h === 1)
                            h = 0;
                        h *= 6;
                        s = s;
                        v = v;
                        var i = Math.floor(h);
                        var f = h - i;
                        var p = v * (1 - s);
                        var q = v * (1 - s * f);
                        var t = v * (1 - s * (1 - f));
                        switch (i) {
                        case 0:
                            r = v;
                            g = t;
                            b = p;
                            break;
                        case 1:
                            r = q;
                            g = v;
                            b = p;
                            break;
                        case 2:
                            r = p;
                            g = v;
                            b = t;
                            break;
                        case 3:
                            r = p;
                            g = q;
                            b = v;
                            break;
                        case 4:
                            r = t;
                            g = p;
                            b = v;
                            break;
                        case 5:
                            r = v;
                            g = p;
                            b = q;
                            break;
                        }
                    }
                }
                r *= 255;
                g *= 255;
                b *= 255;
                this._val = (this.a << 24 >>> 0) + (b << 16) + (g << 8) + r;
                return this;
            };
            proto.toHSV = function () {
                var r = this.r / 255;
                var g = this.g / 255;
                var b = this.b / 255;
                var hsv = {
                    h: 0,
                    s: 0,
                    v: 0
                };
                var max = Math.max(r, g, b);
                var min = Math.min(r, g, b);
                var delta = 0;
                hsv.v = max;
                hsv.s = max ? (max - min) / max : 0;
                if (!hsv.s)
                    hsv.h = 0;
                else {
                    delta = max - min;
                    if (r === max)
                        hsv.h = (g - b) / delta;
                    else if (g === max)
                        hsv.h = 2 + (b - r) / delta;
                    else
                        hsv.h = 4 + (r - g) / delta;
                    hsv.h /= 6;
                    if (hsv.h < 0)
                        hsv.h += 1;
                }
                return hsv;
            };
            proto.set = function (color) {
                if (color._val) {
                    this._val = color._val;
                } else {
                    this.r = color.r;
                    this.g = color.g;
                    this.b = color.b;
                    this.a = color.a;
                }
            };
            return Color;
        }();
        cc.Color = Color;
        cc.color = function color(r, g, b, a) {
            if (typeof r === 'string') {
                var result = new cc.Color();
                return result.fromHEX(r);
            }
            if ((typeof r === 'undefined' ? 'undefined' : _typeof(r)) === 'object') {
                return new cc.Color(r.r, r.g, r.b, r.a);
            }
            return new cc.Color(r, g, b, a);
        };
        module.exports = cc.Color;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbG9yLmpzIiwiQzovVXNlcnMvbmFudGFzL2ZpcmViYWxsLXgvZmJfMjEtcmVsZWFzZS9lbmdpbmUvY29jb3MyZC9jb3JlL3ZhbHVlLXR5cGVzL2NvbG9yLmpzIl0sIm5hbWVzIjpbIlZhbHVlVHlwZSIsInJlcXVpcmUiLCJqcyIsIkNvbG9yIiwiciIsImciLCJiIiwiYSIsIl92YWwiLCJleHRlbmQiLCJmYXN0RGVmaW5lIiwiRGVmYXVsdENvbG9ycyIsIldISVRFIiwiQkxBQ0siLCJUUkFOU1BBUkVOVCIsIkdSQVkiLCJSRUQiLCJHUkVFTiIsIkJMVUUiLCJZRUxMT1ciLCJPUkFOR0UiLCJDWUFOIiwiTUFHRU5UQSIsImNvbG9yTmFtZSIsImdldCIsInJnYmEiLCJwcm90byIsInByb3RvdHlwZSIsImNsb25lIiwicmV0IiwiZXF1YWxzIiwib3RoZXIiLCJsZXJwIiwidG8iLCJyYXRpbyIsIm91dCIsInRvU3RyaW5nIiwidG9GaXhlZCIsImdldFIiLCJzZXRSIiwicmVkIiwiY2MiLCJtaXNjIiwiY2xhbXBmIiwiZ2V0RyIsInNldEciLCJncmVlbiIsImdldEIiLCJzZXRCIiwiYmx1ZSIsImdldEEiLCJzZXRBIiwiYWxwaGEiLCJfZmFzdFNldEEiLCJnZXRzZXQiLCJ0b0NTUyIsIm9wdCIsInRvSEVYIiwiZnJvbUhFWCIsImhleFN0cmluZyIsImluZGV4T2YiLCJzdWJzdHJpbmciLCJwYXJzZUludCIsInN1YnN0ciIsImZtdCIsInByZWZpeCIsImhleCIsImkiLCJsZW5ndGgiLCJwdXNoIiwiam9pbiIsInRvUkdCVmFsdWUiLCJmcm9tSFNWIiwiaCIsInMiLCJ2IiwiTWF0aCIsImZsb29yIiwiZiIsInAiLCJxIiwidCIsInRvSFNWIiwiaHN2IiwibWF4IiwibWluIiwiZGVsdGEiLCJzZXQiLCJjb2xvciIsInJlc3VsdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7OztJQUFBLElBQUEsVUFBQSxHQUFBLDhDQUFBOzs7Ozs7Ozs7Ozs7Ozs7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QUFBQSxDQUFPQyxPQUFQRCxHQUFpQmpELEVBQUFBLENBQUd0QyxLQUFwQnVGIiwiZmlsZSI6ImNvbG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxudmFyIFZhbHVlVHlwZSA9IHJlcXVpcmUoJy4vdmFsdWUtdHlwZScpO1xyXG52YXIganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xyXG5cclxudmFyIENvbG9yID0gKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIFJlcHJlc2VudGF0aW9uIG9mIFJHQkEgY29sb3JzLlxyXG4gICAgICpcclxuICAgICAqIEVhY2ggY29sb3IgY29tcG9uZW50IGlzIGEgZmxvYXRpbmcgcG9pbnQgdmFsdWUgd2l0aCBhIHJhbmdlIGZyb20gMCB0byAyNTUuXHJcbiAgICAgKlxyXG4gICAgICogWW91IGNhbiBhbHNvIHVzZSB0aGUgY29udmVuaWVuY2UgbWV0aG9kIHt7I2Nyb3NzTGluayBcImNjL2NvbG9yOm1ldGhvZFwifX1jYy5jb2xvcnt7L2Nyb3NzTGlua319IHRvIGNyZWF0ZSBhIG5ldyBDb2xvci5cclxuICAgICAqXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiBjYy5Db2xvciDnlKjkuo7ooajnpLrpopzoibLjgIJcclxuICAgICAqXHJcbiAgICAgKiDlroPljIXlkKsgUkdCQSDlm5vkuKrku6Xmta7ngrnmlbDkv53lrZjnmoTpopzoibLliIbph4/vvIzmr4/kuKrnmoTlgLzpg73lnKggMCDliLAgMjU1IOS5i+mXtOOAglxyXG4gICAgICpcclxuICAgICAqIOaCqOS5n+WPr+S7pemAmui/h+S9v+eUqCB7eyNjcm9zc0xpbmsgXCJjYy9jb2xvcjptZXRob2RcIn19Y2MuY29sb3J7ey9jcm9zc0xpbmt9fSDnmoTkvr/mjbfmlrnms5XmnaXliJvlu7rkuIDkuKrmlrDnmoQgQ29sb3LjgIJcclxuICAgICAqXHJcbiAgICAgKiBAY2xhc3MgQ29sb3JcclxuICAgICAqIEBleHRlbmRzIFZhbHVlVHlwZVxyXG4gICAgICovXHJcbiAgICAvKipcclxuICAgICAqIEBtZXRob2QgY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcj0wXSAtIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yLCBkZWZhdWx0IHZhbHVlIGlzIDAuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2c9MF0gLSBncmVlbiBjb21wb25lbnQgb2YgdGhlIGNvbG9yLCBkZWZ1YWx0IHZhbHVlIGlzIDAuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2I9MF0gLSBibHVlIGNvbXBvbmVudCBvZiB0aGUgY29sb3IsIGRlZmF1bHQgdmFsdWUgaXMgMC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYT0yNTVdIC0gYWxwaGEgY29tcG9uZW50IG9mIHRoZSBjb2xvciwgZGVmYXVsdCB2YWx1ZSBpcyAyNTUuXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIENvbG9yKCByLCBnLCBiLCBhICkge1xyXG4gICAgICAgIGlmICh0eXBlb2YgciA9PT0gJ29iamVjdCcpIHtcclxuICAgICAgICAgICAgZyA9IHIuZztcclxuICAgICAgICAgICAgYiA9IHIuYjtcclxuICAgICAgICAgICAgYSA9IHIuYTtcclxuICAgICAgICAgICAgciA9IHIucjtcclxuICAgICAgICB9XHJcbiAgICAgICAgciA9IHIgfHwgMDtcclxuICAgICAgICBnID0gZyB8fCAwO1xyXG4gICAgICAgIGIgPSBiIHx8IDA7XHJcbiAgICAgICAgYSA9IHR5cGVvZiBhID09PSAnbnVtYmVyJyA/IGEgOiAyNTU7XHJcbiAgICAgICAgdGhpcy5fdmFsID0gKChhPDwyNCkgPj4+IDApICsgKGI8PDE2KSArIChnPDw4KSArIHI7XHJcbiAgICB9XHJcbiAgICBqcy5leHRlbmQoQ29sb3IsIFZhbHVlVHlwZSk7XHJcbiAgICByZXF1aXJlKCcuLi9wbGF0Zm9ybS9DQ0NsYXNzJykuZmFzdERlZmluZSgnY2MuQ29sb3InLCBDb2xvciwge3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX0pO1xyXG5cclxuICAgIHZhciBEZWZhdWx0Q29sb3JzID0ge1xyXG4gICAgICAgIC8vIGNvbG9yOiBbciwgZywgYiwgYV1cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFNvbGlkIHdoaXRlLCBSR0JBIGlzIFsyNTUsIDI1NSwgMjU1LCAyNTVdLlxyXG4gICAgICAgICAqICEjemgg57qv55m96Imy77yMUkdCQSDmmK8gWzI1NSwgMjU1LCAyNTUsIDI1NV3jgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkgV0hJVEVcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFdISVRFOiAgICAgIFsyNTUsIDI1NSwgMjU1LCAyNTVdLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gU29saWQgYmxhY2ssIFJHQkEgaXMgWzAsIDAsIDAsIDI1NV0uXHJcbiAgICAgICAgICogISN6aCDnuq/pu5HoibLvvIxSR0JBIOaYryBbMCwgMCwgMCwgMjU1XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBCTEFDS1xyXG4gICAgICAgICAqIEB0eXBlIHtDb2xvcn1cclxuICAgICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgQkxBQ0s6ICAgICAgWzAsIDAsIDAsIDI1NV0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBUcmFuc3BhcmVudCwgUkdCQSBpcyBbMCwgMCwgMCwgMF0uXHJcbiAgICAgICAgICogISN6aCDpgI/mmI7vvIxSR0JBIOaYryBbMCwgMCwgMCwgMF3jgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkgVFJBTlNQQVJFTlRcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFRSQU5TUEFSRU5UOlswLCAwLCAwLCAwXSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIEdyZXksIFJHQkEgaXMgWzEyNy41LCAxMjcuNSwgMTI3LjVdLlxyXG4gICAgICAgICAqICEjemgg54Gw6Imy77yMUkdCQSDmmK8gWzEyNy41LCAxMjcuNSwgMTI3LjVd44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IEdSQVlcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIEdSQVk6ICAgICAgIFsxMjcuNSwgMTI3LjUsIDEyNy41XSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFNvbGlkIHJlZCwgUkdCQSBpcyBbMjU1LCAwLCAwXS5cclxuICAgICAgICAgKiAhI3poIOe6r+e6ouiJsu+8jFJHQkEg5pivIFsyNTUsIDAsIDBd44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IFJFRFxyXG4gICAgICAgICAqIEB0eXBlIHtDb2xvcn1cclxuICAgICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgUkVEOiAgICAgICAgWzI1NSwgMCwgMF0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBTb2xpZCBncmVlbiwgUkdCQSBpcyBbMCwgMjU1LCAwXS5cclxuICAgICAgICAgKiAhI3poIOe6r+e7v+iJsu+8jFJHQkEg5pivIFswLCAyNTUsIDBd44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IEdSRUVOXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBHUkVFTjogICAgICBbMCwgMjU1LCAwXSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFNvbGlkIGJsdWUsIFJHQkEgaXMgWzAsIDAsIDI1NV0uXHJcbiAgICAgICAgICogISN6aCDnuq/ok53oibLvvIxSR0JBIOaYryBbMCwgMCwgMjU1XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBCTFVFXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBCTFVFOiAgICAgICBbMCwgMCwgMjU1XSxcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFllbGxvdywgUkdCQSBpcyBbMjU1LCAyMzUsIDRdLlxyXG4gICAgICAgICAqICEjemgg6buE6Imy77yMUkdCQSDmmK8gWzI1NSwgMjM1LCA0XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBZRUxMT1dcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIFlFTExPVzogICAgIFsyNTUsIDIzNSwgNF0sXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBPcmFuZ2UsIFJHQkEgaXMgWzI1NSwgMTI3LCAwXS5cclxuICAgICAgICAgKiAhI3poIOapmeiJsu+8jFJHQkEg5pivIFsyNTUsIDEyNywgMF3jgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkgT1JBTkdFXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBPUkFOR0U6ICAgICBbMjU1LCAxMjcsIDBdLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gQ3lhbiwgUkdCQSBpcyBbMCwgMjU1LCAyNTVdLlxyXG4gICAgICAgICAqICEjemgg6Z2S6Imy77yMUkdCQSDmmK8gWzAsIDI1NSwgMjU1XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBDWUFOXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBDWUFOOiAgICAgICBbMCwgMjU1LCAyNTVdLFxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gTWFnZW50YSwgUkdCQSBpcyBbMjU1LCAwLCAyNTVdLlxyXG4gICAgICAgICAqICEjemgg5rSL57qi6Imy77yI5ZOB57qi6Imy77yJ77yMUkdCQSDmmK8gWzI1NSwgMCwgMjU1XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBNQUdFTlRBXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cclxuICAgICAgICBNQUdFTlRBOiAgICBbMjU1LCAwLCAyNTVdXHJcbiAgICB9O1xyXG4gICAgZm9yICh2YXIgY29sb3JOYW1lIGluIERlZmF1bHRDb2xvcnMpIHtcclxuICAgICAgICBqcy5nZXQoQ29sb3IsIGNvbG9yTmFtZSwgKGZ1bmN0aW9uIChyZ2JhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IENvbG9yKHJnYmFbMF0sIHJnYmFbMV0sIHJnYmFbMl0sIHJnYmFbM10pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0pKERlZmF1bHRDb2xvcnNbY29sb3JOYW1lXSkpO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBwcm90byA9IENvbG9yLnByb3RvdHlwZTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gQ2xvbmUgYSBuZXcgY29sb3IgZnJvbSB0aGUgY3VycmVudCBjb2xvci5cclxuICAgICAqICEjemgg5YWL6ZqG5b2T5YmN6aKc6Imy44CCXHJcbiAgICAgKiBAbWV0aG9kIGNsb25lXHJcbiAgICAgKiBAcmV0dXJuIHtDb2xvcn0gTmV3bHkgY3JlYXRlZCBjb2xvci5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgY29sb3IgPSBuZXcgY2MuQ29sb3IoKTtcclxuICAgICAqIHZhciBuZXdDb2xvciA9IGNvbG9yLmNsb25lKCk7Ly8gQ29sb3Ige3I6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NX1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uY2xvbmUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJldCA9IG5ldyBDb2xvcigpO1xyXG4gICAgICAgIHJldC5fdmFsID0gdGhpcy5fdmFsO1xyXG4gICAgICAgIHJldHVybiByZXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBUT0RPXHJcbiAgICAgKiAhI3poIOWIpOaWreS4pOS4quminOiJsuaYr+WQpuebuOetieOAglxyXG4gICAgICogQG1ldGhvZCBlcXVhbHNcclxuICAgICAqIEBwYXJhbSB7Q29sb3J9IG90aGVyXHJcbiAgICAgKiBAcmV0dXJuIHtCb29sZWFufVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvcjEgPSBjYy5Db2xvci5XSElURTtcclxuICAgICAqIHZhciBjb2xvcjIgPSBuZXcgY2MuQ29sb3IoMjU1LCAyNTUsIDI1NSk7XHJcbiAgICAgKiBjYy5sb2coY29sb3IxLmVxdWFscyhjb2xvcjIpKTsgLy8gdHJ1ZTtcclxuICAgICAqIGNvbG9yMiA9IGNjLkNvbG9yLlJFRDtcclxuICAgICAqIGNjLmxvZyhjb2xvcjIuZXF1YWxzKGNvbG9yMSkpOyAvLyBmYWxzZTtcclxuICAgICAqL1xyXG4gICAgcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG90aGVyICYmIHRoaXMuX3ZhbCA9PT0gb3RoZXIuX3ZhbDtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRPRE9cclxuICAgICAqICEjemgg57q/5oCn5o+S5YC8XHJcbiAgICAgKiBAbWV0aG9kIGxlcnBcclxuICAgICAqIEBwYXJhbSB7Q29sb3J9IHRvXHJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gcmF0aW8gLSB0aGUgaW50ZXJwb2xhdGlvbiBjb2VmZmljaWVudC5cclxuICAgICAqIEBwYXJhbSB7Q29sb3J9IFtvdXRdIC0gb3B0aW9uYWwsIHRoZSByZWNlaXZpbmcgdmVjdG9yLlxyXG4gICAgICogQHJldHVybiB7Q29sb3J9XHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgdXRpbHMvYXBpL2VuZ2luZS9kb2NzL2NvY29zMmQvY29yZS92YWx1ZS10eXBlcy9DQ0NvbG9yL2xlcnAuanN9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmxlcnAgPSBmdW5jdGlvbiAodG8sIHJhdGlvLCBvdXQpIHtcclxuICAgICAgICBvdXQgPSBvdXQgfHwgbmV3IENvbG9yKCk7XHJcbiAgICAgICAgdmFyIHIgPSB0aGlzLnI7XHJcbiAgICAgICAgdmFyIGcgPSB0aGlzLmc7XHJcbiAgICAgICAgdmFyIGIgPSB0aGlzLmI7XHJcbiAgICAgICAgdmFyIGEgPSB0aGlzLmE7XHJcbiAgICAgICAgb3V0LnIgPSByICsgKHRvLnIgLSByKSAqIHJhdGlvO1xyXG4gICAgICAgIG91dC5nID0gZyArICh0by5nIC0gZykgKiByYXRpbztcclxuICAgICAgICBvdXQuYiA9IGIgKyAodG8uYiAtIGIpICogcmF0aW87XHJcbiAgICAgICAgb3V0LmEgPSBhICsgKHRvLmEgLSBhKSAqIHJhdGlvO1xyXG4gICAgICAgIHJldHVybiBvdXQ7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBUT0RPXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uuaWueS+v+mYheivu+eahOWtl+espuS4suOAglxyXG4gICAgICogQG1ldGhvZCB0b1N0cmluZ1xyXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IGNjLkNvbG9yLldISVRFO1xyXG4gICAgICogY29sb3IudG9TdHJpbmcoKTsgLy8gXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDI1NSlcIlxyXG4gICAgICovXHJcbiAgICBwcm90by50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gXCJyZ2JhKFwiICtcclxuICAgICAgICAgICAgdGhpcy5yLnRvRml4ZWQoKSArIFwiLCBcIiArXHJcbiAgICAgICAgICAgIHRoaXMuZy50b0ZpeGVkKCkgKyBcIiwgXCIgK1xyXG4gICAgICAgICAgICB0aGlzLmIudG9GaXhlZCgpICsgXCIsIFwiICtcclxuICAgICAgICAgICAgdGhpcy5hLnRvRml4ZWQoKSArIFwiKVwiO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0cyByZWQgY2hhbm5lbCB2YWx1ZVxyXG4gICAgICogISN6aCDojrflj5blvZPliY3popzoibLnmoTnuqLoibLlgLzjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0UlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSByZWQgdmFsdWUuXHJcbiAgICAgKi9cclxuICAgIHByb3RvLmdldFIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3ZhbCAmIDB4MDAwMDAwZmY7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldHMgcmVkIHZhbHVlIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgY29sb3Igb2JqZWN0XHJcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOe6ouiJsuWAvO+8jOW5tui/lOWbnuW9k+WJjeWvueixoeOAglxyXG4gICAgICogQG1ldGhvZCBzZXRSXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVkIC0gdGhlIG5ldyBSZWQgY29tcG9uZW50LlxyXG4gICAgICogQHJldHVybiB7Q29sb3J9IHRoaXMgY29sb3IuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gbmV3IGNjLkNvbG9yKCk7XHJcbiAgICAgKiBjb2xvci5zZXRSKDI1NSk7IC8vIENvbG9yIHtyOiAyNTUsIGc6IDAsIGI6IDAsIGE6IDI1NX1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc2V0UiA9IGZ1bmN0aW9uIChyZWQpIHtcclxuICAgICAgICByZWQgPSB+fmNjLm1pc2MuY2xhbXBmKHJlZCwgMCwgMjU1KTtcclxuICAgICAgICB0aGlzLl92YWwgPSAoKHRoaXMuX3ZhbCAmIDB4ZmZmZmZmMDApIHwgcmVkKSA+Pj4gMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0cyBncmVlbiBjaGFubmVsIHZhbHVlXHJcbiAgICAgKiAhI3poIOiOt+WPluW9k+WJjeminOiJsueahOe7v+iJsuWAvOOAglxyXG4gICAgICogQG1ldGhvZCBnZXRHXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGdyZWVuIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBwcm90by5nZXRHID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsICYgMHgwMDAwZmYwMCkgPj4gODtcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0cyBncmVlbiB2YWx1ZSBhbmQgcmV0dXJuIHRoZSBjdXJyZW50IGNvbG9yIG9iamVjdFxyXG4gICAgICogISN6aCDorr7nva7lvZPliY3nmoTnu7/oibLlgLzvvIzlubbov5Tlm57lvZPliY3lr7nosaHjgIJcclxuICAgICAqIEBtZXRob2Qgc2V0R1xyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGdyZWVuIC0gdGhlIG5ldyBHcmVlbiBjb21wb25lbnQuXHJcbiAgICAgKiBAcmV0dXJuIHtDb2xvcn0gdGhpcyBjb2xvci5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgY29sb3IgPSBuZXcgY2MuQ29sb3IoKTtcclxuICAgICAqIGNvbG9yLnNldEcoMjU1KTsgLy8gQ29sb3Ige3I6IDAsIGc6IDI1NSwgYjogMCwgYTogMjU1fVxyXG4gICAgICovXHJcbiAgICBwcm90by5zZXRHID0gZnVuY3Rpb24gKGdyZWVuKSB7XHJcbiAgICAgICAgZ3JlZW4gPSB+fmNjLm1pc2MuY2xhbXBmKGdyZWVuLCAwLCAyNTUpO1xyXG4gICAgICAgIHRoaXMuX3ZhbCA9ICgodGhpcy5fdmFsICYgMHhmZmZmMDBmZikgfCAoZ3JlZW4gPDwgOCkpID4+PiAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXRzIGJsdWUgY2hhbm5lbCB2YWx1ZVxyXG4gICAgICogISN6aCDojrflj5blvZPliY3popzoibLnmoTok53oibLlgLzjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0QlxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBibHVlIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBwcm90by5nZXRCID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsICYgMHgwMGZmMDAwMCkgPj4gMTY7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldHMgYmx1ZSB2YWx1ZSBhbmQgcmV0dXJuIHRoZSBjdXJyZW50IGNvbG9yIG9iamVjdFxyXG4gICAgICogISN6aCDorr7nva7lvZPliY3nmoTok53oibLlgLzvvIzlubbov5Tlm57lvZPliY3lr7nosaHjgIJcclxuICAgICAqIEBtZXRob2Qgc2V0QlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGJsdWUgLSB0aGUgbmV3IEJsdWUgY29tcG9uZW50LlxyXG4gICAgICogQHJldHVybiB7Q29sb3J9IHRoaXMgY29sb3IuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gbmV3IGNjLkNvbG9yKCk7XHJcbiAgICAgKiBjb2xvci5zZXRCKDI1NSk7IC8vIENvbG9yIHtyOiAwLCBnOiAwLCBiOiAyNTUsIGE6IDI1NX1cclxuICAgICAqL1xyXG4gICAgcHJvdG8uc2V0QiA9IGZ1bmN0aW9uIChibHVlKSB7XHJcbiAgICAgICAgYmx1ZSA9IH5+Y2MubWlzYy5jbGFtcGYoYmx1ZSwgMCwgMjU1KTtcclxuICAgICAgICB0aGlzLl92YWwgPSAoKHRoaXMuX3ZhbCAmIDB4ZmYwMGZmZmYpIHwgKGJsdWUgPDwgMTYpKSA+Pj4gMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH07XHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0cyBhbHBoYSBjaGFubmVsIHZhbHVlXHJcbiAgICAgKiAhI3poIOiOt+WPluW9k+WJjeminOiJsueahOmAj+aYjuW6puWAvOOAglxyXG4gICAgICogQG1ldGhvZCBnZXRBXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IGFscGhhIHZhbHVlLlxyXG4gICAgICovXHJcbiAgICBwcm90by5nZXRBID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsICYgMHhmZjAwMDAwMCkgPj4+IDI0O1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogISNlbiBTZXRzIGFscGhhIHZhbHVlIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgY29sb3Igb2JqZWN0XHJcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOmAj+aYjuW6pu+8jOW5tui/lOWbnuW9k+WJjeWvueixoeOAglxyXG4gICAgICogQG1ldGhvZCBzZXRBXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYWxwaGEgLSB0aGUgbmV3IEFscGhhIGNvbXBvbmVudC5cclxuICAgICAqIEByZXR1cm4ge0NvbG9yfSB0aGlzIGNvbG9yLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IG5ldyBjYy5Db2xvcigpO1xyXG4gICAgICogY29sb3Iuc2V0QSgwKTsgLy8gQ29sb3Ige3I6IDAsIGc6IDAsIGI6IDAsIGE6IDB9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnNldEEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcclxuICAgICAgICBhbHBoYSA9IH5+Y2MubWlzYy5jbGFtcGYoYWxwaGEsIDAsIDI1NSk7XHJcbiAgICAgICAgdGhpcy5fdmFsID0gKCh0aGlzLl92YWwgJiAweDAwZmZmZmZmKSB8IChhbHBoYSA8PCAyNCkpID4+PiAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm90by5fZmFzdFNldEEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcclxuICAgICAgICB0aGlzLl92YWwgPSAoKHRoaXMuX3ZhbCAmIDB4MDBmZmZmZmYpIHwgKGFscGhhIDw8IDI0KSkgPj4+IDA7XHJcbiAgICB9O1xyXG5cclxuICAgIGpzLmdldHNldChwcm90bywgJ3InLCBwcm90by5nZXRSLCBwcm90by5zZXRSLCB0cnVlKTtcclxuICAgIGpzLmdldHNldChwcm90bywgJ2cnLCBwcm90by5nZXRHLCBwcm90by5zZXRHLCB0cnVlKTtcclxuICAgIGpzLmdldHNldChwcm90bywgJ2InLCBwcm90by5nZXRCLCBwcm90by5zZXRCLCB0cnVlKTtcclxuICAgIGpzLmdldHNldChwcm90bywgJ2EnLCBwcm90by5nZXRBLCBwcm90by5zZXRBLCB0cnVlKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gQ29udmVydCBjb2xvciB0byBjc3MgZm9ybWF0LlxyXG4gICAgICogISN6aCDovazmjaLkuLogQ1NTIOagvOW8j+OAglxyXG4gICAgICogQG1ldGhvZCB0b0NTU1xyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IG9wdCAtIFwicmdiYVwiLCBcInJnYlwiLCBcIiNyZ2JcIiBvciBcIiNycmdnYmJcIi5cclxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cclxuICAgICAqIEBleGFtcGxlIHtAbGluayB1dGlscy9hcGkvZW5naW5lL2RvY3MvY29jb3MyZC9jb3JlL3ZhbHVlLXR5cGVzL0NDQ29sb3IvdG9DU1MuanN9XHJcbiAgICAgKi9cclxuICAgIHByb3RvLnRvQ1NTID0gZnVuY3Rpb24gKCBvcHQgKSB7XHJcbiAgICAgICAgaWYgKCBvcHQgPT09ICdyZ2JhJyApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwicmdiYShcIiArXHJcbiAgICAgICAgICAgICAgICAodGhpcy5yIHwgMCApICsgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKHRoaXMuZyB8IDAgKSArIFwiLFwiICtcclxuICAgICAgICAgICAgICAgICh0aGlzLmIgfCAwICkgKyBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAodGhpcy5hIC8gMjU1KS50b0ZpeGVkKDIpICsgXCIpXCJcclxuICAgICAgICAgICAgO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggb3B0ID09PSAncmdiJyApIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwicmdiKFwiICtcclxuICAgICAgICAgICAgICAgICh0aGlzLnIgfCAwICkgKyBcIixcIiArXHJcbiAgICAgICAgICAgICAgICAodGhpcy5nIHwgMCApICsgXCIsXCIgK1xyXG4gICAgICAgICAgICAgICAgKHRoaXMuYiB8IDAgKSArIFwiKVwiXHJcbiAgICAgICAgICAgIDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiAnIycgKyB0aGlzLnRvSEVYKG9wdCk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gUmVhZCBoZXggc3RyaW5nIGFuZCBzdG9yZSBjb2xvciBkYXRhIGludG8gdGhlIGN1cnJlbnQgY29sb3Igb2JqZWN0LCB0aGUgaGV4IHN0cmluZyBtdXN0IGJlIGZvcm1hdGVkIGFzIHJnYmEgb3IgcmdiLlxyXG4gICAgICogISN6aCDor7vlj5YgMTYg6L+b5Yi26aKc6Imy44CCXHJcbiAgICAgKiBAbWV0aG9kIGZyb21IRVhcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBoZXhTdHJpbmdcclxuICAgICAqIEByZXR1cm4ge0NvbG9yfVxyXG4gICAgICogQGNoYWluYWJsZVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IGNjLkNvbG9yLkJMQUNLO1xyXG4gICAgICogY29sb3IuZnJvbUhFWChcIiNGRkZGMzNcIik7IC8vIENvbG9yIHtyOiAyNTUsIGc6IDI1NSwgYjogNTEsIGE6IDI1NX07XHJcbiAgICAgKi9cclxuICAgIHByb3RvLmZyb21IRVggPSBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7XHJcbiAgICAgICAgaGV4U3RyaW5nID0gKGhleFN0cmluZy5pbmRleE9mKCcjJykgPT09IDApID8gaGV4U3RyaW5nLnN1YnN0cmluZygxKSA6IGhleFN0cmluZztcclxuICAgICAgICBsZXQgciA9IHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHIoMCwgMiksIDE2KSB8fCAwO1xyXG4gICAgICAgIGxldCBnID0gcGFyc2VJbnQoaGV4U3RyaW5nLnN1YnN0cigyLCAyKSwgMTYpIHx8IDA7XHJcbiAgICAgICAgbGV0IGIgPSBwYXJzZUludChoZXhTdHJpbmcuc3Vic3RyKDQsIDIpLCAxNikgfHwgMDtcclxuICAgICAgICBsZXQgYSA9IHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHIoNiwgMiksIDE2KSB8fCAyNTU7XHJcbiAgICAgICAgdGhpcy5fdmFsID0gKChhPDwyNCkgPj4+IDApICsgKGI8PDE2KSArIChnPDw4KSArIHI7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9O1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBjb252ZXJ0IENvbG9yIHRvIEhFWCBjb2xvciBzdHJpbmcuXHJcbiAgICAgKiBlLmcuICBjYy5jb2xvcigyNTUsNiwyNTUpICB0byA6IFwiI2ZmMDZmZlwiXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uiAxNiDov5vliLbjgIJcclxuICAgICAqIEBtZXRob2QgdG9IRVhcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmbXQgLSBcIiNyZ2JcIiwgXCIjcnJnZ2JiXCIgb3IgXCIjcnJnZ2JiYWFcIi5cclxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgY29sb3IgPSBjYy5Db2xvci5CTEFDSztcclxuICAgICAqIGNvbG9yLnRvSEVYKFwiI3JnYlwiKTsgICAgIC8vIFwiMDAwXCI7XHJcbiAgICAgKiBjb2xvci50b0hFWChcIiNycmdnYmJcIik7ICAvLyBcIjAwMDAwMFwiO1xyXG4gICAgICovXHJcbiAgICBwcm90by50b0hFWCA9IGZ1bmN0aW9uICggZm10ICkge1xyXG4gICAgICAgIGxldCBwcmVmaXggPSAnMCc7XHJcbiAgICAgICAgbGV0IGhleCA9IFtcclxuICAgICAgICAgICAgKHRoaXMuciA8IDE2ID8gcHJlZml4IDogJycpICsgKHRoaXMuciB8IDApLnRvU3RyaW5nKDE2KSxcclxuICAgICAgICAgICAgKHRoaXMuZyA8IDE2ID8gcHJlZml4IDogJycpICsgKHRoaXMuZyB8IDApLnRvU3RyaW5nKDE2KSxcclxuICAgICAgICAgICAgKHRoaXMuYiA8IDE2ID8gcHJlZml4IDogJycpICsgKHRoaXMuYiB8IDApLnRvU3RyaW5nKDE2KSxcclxuICAgICAgICBdO1xyXG4gICAgICAgIHZhciBpID0gLTE7XHJcbiAgICAgICAgaWYgKCBmbXQgPT09ICcjcmdiJyApIHtcclxuICAgICAgICAgICAgZm9yICggaSA9IDA7IGkgPCBoZXgubGVuZ3RoOyArK2kgKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIGhleFtpXS5sZW5ndGggPiAxICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhleFtpXSA9IGhleFtpXVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICggZm10ID09PSAnI3JyZ2diYicgKSB7XHJcbiAgICAgICAgICAgIGZvciAoIGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgKytpICkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCBoZXhbaV0ubGVuZ3RoID09PSAxICkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhleFtpXSA9ICcwJyArIGhleFtpXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChmbXQgPT09ICcjcnJnZ2JiYWEnKSB7XHJcbiAgICAgICAgICAgIGhleC5wdXNoKCh0aGlzLmEgPCAxNiA/IHByZWZpeCA6ICcnKSArICh0aGlzLmEgfCAwKS50b1N0cmluZygxNikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gQ29udmVydCB0byAyNGJpdCByZ2IgdmFsdWUuXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uiAyNGJpdCDnmoQgUkdCIOWAvOOAglxyXG4gICAgICogQG1ldGhvZCB0b1JHQlZhbHVlXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gY2MuQ29sb3IuWUVMTE9XO1xyXG4gICAgICogY29sb3IudG9SR0JWYWx1ZSgpOyAvLyAxNjc3MTg0NDtcclxuICAgICAqL1xyXG4gICAgcHJvdG8udG9SR0JWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdmFsICYgMHgwMGZmZmZmZjtcclxuICAgIH07XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFJlYWQgSFNWIG1vZGVsIGNvbG9yIGFuZCBjb252ZXJ0IHRvIFJHQiBjb2xvclxyXG4gICAgICogISN6aCDor7vlj5YgSFNW77yI6Imy5b2p5qih5Z6L77yJ5qC85byP44CCXHJcbiAgICAgKiBAbWV0aG9kIGZyb21IU1ZcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBoXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gc1xyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHZcclxuICAgICAqIEByZXR1cm4ge0NvbG9yfVxyXG4gICAgICogQGNoYWluYWJsZVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IGNjLkNvbG9yLllFTExPVztcclxuICAgICAqIGNvbG9yLmZyb21IU1YoMCwgMCwgMSk7IC8vIENvbG9yIHtyOiAyNTUsIGc6IDI1NSwgYjogMjU1LCBhOiAyNTV9O1xyXG4gICAgICovXHJcbiAgICBwcm90by5mcm9tSFNWID0gZnVuY3Rpb24gKCBoLCBzLCB2ICkge1xyXG4gICAgICAgIHZhciByLCBnLCBiO1xyXG4gICAgICAgIGlmIChzID09PSAwKSB7XHJcbiAgICAgICAgICAgIHIgPSBnID0gYiA9IHY7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAodiA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgciA9IGcgPSBiID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGlmIChoID09PSAxKSBoID0gMDtcclxuICAgICAgICAgICAgICAgIGggKj0gNjtcclxuICAgICAgICAgICAgICAgIHMgPSBzO1xyXG4gICAgICAgICAgICAgICAgdiA9IHY7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9IE1hdGguZmxvb3IoaCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGggLSBpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSB2ICogKDEgLSBzKTtcclxuICAgICAgICAgICAgICAgIHZhciBxID0gdiAqICgxIC0gKHMgKiBmKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9IHYgKiAoMSAtIChzICogKDEgLSBmKSkpO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAwOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gdjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gcTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSB0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSB2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA1OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICByID0gdjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGIgPSBxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByICo9IDI1NTtcclxuICAgICAgICBnICo9IDI1NTtcclxuICAgICAgICBiICo9IDI1NTtcclxuICAgICAgICB0aGlzLl92YWwgPSAoKHRoaXMuYTw8MjQpID4+PiAwKSArIChiPDwxNikgKyAoZzw8OCkgKyByO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gVHJhbnNmb3JtIHRvIEhTViBtb2RlbCBjb2xvclxyXG4gICAgICogISN6aCDovazmjaLkuLogSFNW77yI6Imy5b2p5qih5Z6L77yJ5qC85byP44CCXHJcbiAgICAgKiBAbWV0aG9kIHRvSFNWXHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IC0ge2g6IG51bWJlciwgczogbnVtYmVyLCB2OiBudW1iZXJ9LlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IGNjLkNvbG9yLllFTExPVztcclxuICAgICAqIGNvbG9yLnRvSFNWKCk7IC8vIE9iamVjdCB7aDogMC4xNTMzODY0NTQxODMyNjY5LCBzOiAwLjk4NDMxMzcyNTQ5MDE5NjEsIHY6IDF9O1xyXG4gICAgICovXHJcbiAgICBwcm90by50b0hTViA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgciA9IHRoaXMuciAvIDI1NTtcclxuICAgICAgICB2YXIgZyA9IHRoaXMuZyAvIDI1NTtcclxuICAgICAgICB2YXIgYiA9IHRoaXMuYiAvIDI1NTtcclxuICAgICAgICB2YXIgaHN2ID0geyBoOiAwLCBzOiAwLCB2OiAwIH07XHJcbiAgICAgICAgdmFyIG1heCA9IE1hdGgubWF4KHIsZyxiKTtcclxuICAgICAgICB2YXIgbWluID0gTWF0aC5taW4ocixnLGIpO1xyXG4gICAgICAgIHZhciBkZWx0YSA9IDA7XHJcbiAgICAgICAgaHN2LnYgPSBtYXg7XHJcbiAgICAgICAgaHN2LnMgPSBtYXggPyAobWF4IC0gbWluKSAvIG1heCA6IDA7XHJcbiAgICAgICAgaWYgKCFoc3YucykgaHN2LmggPSAwO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkZWx0YSA9IG1heCAtIG1pbjtcclxuICAgICAgICAgICAgaWYgKHIgPT09IG1heCkgaHN2LmggPSAoZyAtIGIpIC8gZGVsdGE7XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKGcgPT09IG1heCkgaHN2LmggPSAyICsgKGIgLSByKSAvIGRlbHRhO1xyXG4gICAgICAgICAgICBlbHNlIGhzdi5oID0gNCArIChyIC0gZykgLyBkZWx0YTtcclxuICAgICAgICAgICAgaHN2LmggLz0gNjtcclxuICAgICAgICAgICAgaWYgKGhzdi5oIDwgMCkgaHN2LmggKz0gMS4wO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaHN2O1xyXG4gICAgfTtcclxuXHJcbiAgICBwcm90by5zZXQgPSBmdW5jdGlvbiAoY29sb3IpIHtcclxuICAgICAgICBpZiAoY29sb3IuX3ZhbCkge1xyXG4gICAgICAgICAgICB0aGlzLl92YWwgPSBjb2xvci5fdmFsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yID0gY29sb3IucjtcclxuICAgICAgICAgICAgdGhpcy5nID0gY29sb3IuZztcclxuICAgICAgICAgICAgdGhpcy5iID0gY29sb3IuYjtcclxuICAgICAgICAgICAgdGhpcy5hID0gY29sb3IuYTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHJldHVybiBDb2xvcjtcclxufSkoKTtcclxuXHJcbmNjLkNvbG9yID0gQ29sb3I7XHJcblxyXG4vKipcclxuICogQG1vZHVsZSBjY1xyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIFRoZSBjb252ZW5pZW5jZSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IHt7I2Nyb3NzTGluayBcIkNvbG9yL0NvbG9yOm1ldGhvZFwifX1jYy5Db2xvcnt7L2Nyb3NzTGlua319XHJcbiAqIEFscGhhIGNoYW5uZWwgaXMgb3B0aW9uYWwuIERlZmF1bHQgdmFsdWUgaXMgMjU1LlxyXG4gKlxyXG4gKiAhI3poXHJcbiAqIOmAmui/h+ivpeaWueazleadpeWIm+W7uuS4gOS4quaWsOeahCB7eyNjcm9zc0xpbmsgXCJDb2xvci9Db2xvcjptZXRob2RcIn19Y2MuQ29sb3J7ey9jcm9zc0xpbmt9fSDlr7nosaHjgIJcclxuICogQWxwaGEg6YCa6YGT5piv5Y+v6YCJ55qE44CC6buY6K6k5YC85pivIDI1NeOAglxyXG4gKlxyXG4gKiBAbWV0aG9kIGNvbG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcj0wXVxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2c9MF1cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtiPTBdXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbYT0yNTVdXHJcbiAqIEByZXR1cm4ge0NvbG9yfVxyXG4gKiBAZXhhbXBsZSB7QGxpbmsgdXRpbHMvYXBpL2VuZ2luZS9kb2NzL2NvY29zMmQvY29yZS92YWx1ZS10eXBlcy9DQ0NvbG9yL2NvbG9yLmpzfVxyXG4gKi9cclxuY2MuY29sb3IgPSBmdW5jdGlvbiBjb2xvciAociwgZywgYiwgYSkge1xyXG4gICAgaWYgKHR5cGVvZiByID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBuZXcgY2MuQ29sb3IoKTtcclxuICAgICAgICByZXR1cm4gcmVzdWx0LmZyb21IRVgocik7XHJcbiAgICB9XHJcbiAgICBpZiAodHlwZW9mIHIgPT09ICdvYmplY3QnKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBjYy5Db2xvcihyLnIsIHIuZywgci5iLCByLmEpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICBuZXcgY2MuQ29sb3IociwgZywgYiwgYSk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGNjLkNvbG9yOyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciBWYWx1ZVR5cGUgPSByZXF1aXJlKCcuL3ZhbHVlLXR5cGUnKTtcbnZhciBqcyA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL2pzJyk7XG5cbnZhciBDb2xvciA9IGZ1bmN0aW9uICgpIHtcblxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogUmVwcmVzZW50YXRpb24gb2YgUkdCQSBjb2xvcnMuXHJcbiAgICAgKlxyXG4gICAgICogRWFjaCBjb2xvciBjb21wb25lbnQgaXMgYSBmbG9hdGluZyBwb2ludCB2YWx1ZSB3aXRoIGEgcmFuZ2UgZnJvbSAwIHRvIDI1NS5cclxuICAgICAqXHJcbiAgICAgKiBZb3UgY2FuIGFsc28gdXNlIHRoZSBjb252ZW5pZW5jZSBtZXRob2Qge3sjY3Jvc3NMaW5rIFwiY2MvY29sb3I6bWV0aG9kXCJ9fWNjLmNvbG9ye3svY3Jvc3NMaW5rfX0gdG8gY3JlYXRlIGEgbmV3IENvbG9yLlxyXG4gICAgICpcclxuICAgICAqICEjemhcclxuICAgICAqIGNjLkNvbG9yIOeUqOS6juihqOekuuminOiJsuOAglxyXG4gICAgICpcclxuICAgICAqIOWug+WMheWQqyBSR0JBIOWbm+S4quS7pea1rueCueaVsOS/neWtmOeahOminOiJsuWIhumHj++8jOavj+S4queahOWAvOmDveWcqCAwIOWIsCAyNTUg5LmL6Ze044CCXHJcbiAgICAgKlxyXG4gICAgICog5oKo5Lmf5Y+v5Lul6YCa6L+H5L2/55SoIHt7I2Nyb3NzTGluayBcImNjL2NvbG9yOm1ldGhvZFwifX1jYy5jb2xvcnt7L2Nyb3NzTGlua319IOeahOS+v+aNt+aWueazleadpeWIm+W7uuS4gOS4quaWsOeahCBDb2xvcuOAglxyXG4gICAgICpcclxuICAgICAqIEBjbGFzcyBDb2xvclxyXG4gICAgICogQGV4dGVuZHMgVmFsdWVUeXBlXHJcbiAgICAgKi9cbiAgICAvKipcclxuICAgICAqIEBtZXRob2QgY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbcj0wXSAtIHJlZCBjb21wb25lbnQgb2YgdGhlIGNvbG9yLCBkZWZhdWx0IHZhbHVlIGlzIDAuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2c9MF0gLSBncmVlbiBjb21wb25lbnQgb2YgdGhlIGNvbG9yLCBkZWZ1YWx0IHZhbHVlIGlzIDAuXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2I9MF0gLSBibHVlIGNvbXBvbmVudCBvZiB0aGUgY29sb3IsIGRlZmF1bHQgdmFsdWUgaXMgMC5cclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBbYT0yNTVdIC0gYWxwaGEgY29tcG9uZW50IG9mIHRoZSBjb2xvciwgZGVmYXVsdCB2YWx1ZSBpcyAyNTUuXHJcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBDb2xvcihyLCBnLCBiLCBhKSB7XG4gICAgICAgIGlmICgodHlwZW9mIHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHIpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICAgIGcgPSByLmc7XG4gICAgICAgICAgICBiID0gci5iO1xuICAgICAgICAgICAgYSA9IHIuYTtcbiAgICAgICAgICAgIHIgPSByLnI7XG4gICAgICAgIH1cbiAgICAgICAgciA9IHIgfHwgMDtcbiAgICAgICAgZyA9IGcgfHwgMDtcbiAgICAgICAgYiA9IGIgfHwgMDtcbiAgICAgICAgYSA9IHR5cGVvZiBhID09PSAnbnVtYmVyJyA/IGEgOiAyNTU7XG4gICAgICAgIHRoaXMuX3ZhbCA9IChhIDw8IDI0ID4+PiAwKSArIChiIDw8IDE2KSArIChnIDw8IDgpICsgcjtcbiAgICB9XG4gICAganMuZXh0ZW5kKENvbG9yLCBWYWx1ZVR5cGUpO1xuICAgIHJlcXVpcmUoJy4uL3BsYXRmb3JtL0NDQ2xhc3MnKS5mYXN0RGVmaW5lKCdjYy5Db2xvcicsIENvbG9yLCB7IHI6IDAsIGc6IDAsIGI6IDAsIGE6IDI1NSB9KTtcblxuICAgIHZhciBEZWZhdWx0Q29sb3JzID0ge1xuICAgICAgICAvLyBjb2xvcjogW3IsIGcsIGIsIGFdXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gU29saWQgd2hpdGUsIFJHQkEgaXMgWzI1NSwgMjU1LCAyNTUsIDI1NV0uXHJcbiAgICAgICAgICogISN6aCDnuq/nmb3oibLvvIxSR0JBIOaYryBbMjU1LCAyNTUsIDI1NSwgMjU1XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBXSElURVxyXG4gICAgICAgICAqIEB0eXBlIHtDb2xvcn1cclxuICAgICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAgICovXG4gICAgICAgIFdISVRFOiBbMjU1LCAyNTUsIDI1NSwgMjU1XSxcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBTb2xpZCBibGFjaywgUkdCQSBpcyBbMCwgMCwgMCwgMjU1XS5cclxuICAgICAgICAgKiAhI3poIOe6r+m7keiJsu+8jFJHQkEg5pivIFswLCAwLCAwLCAyNTVd44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IEJMQUNLXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cbiAgICAgICAgQkxBQ0s6IFswLCAwLCAwLCAyNTVdLFxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFRyYW5zcGFyZW50LCBSR0JBIGlzIFswLCAwLCAwLCAwXS5cclxuICAgICAgICAgKiAhI3poIOmAj+aYju+8jFJHQkEg5pivIFswLCAwLCAwLCAwXeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBUUkFOU1BBUkVOVFxyXG4gICAgICAgICAqIEB0eXBlIHtDb2xvcn1cclxuICAgICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAgICovXG4gICAgICAgIFRSQU5TUEFSRU5UOiBbMCwgMCwgMCwgMF0sXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gR3JleSwgUkdCQSBpcyBbMTI3LjUsIDEyNy41LCAxMjcuNV0uXHJcbiAgICAgICAgICogISN6aCDngbDoibLvvIxSR0JBIOaYryBbMTI3LjUsIDEyNy41LCAxMjcuNV3jgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkgR1JBWVxyXG4gICAgICAgICAqIEB0eXBlIHtDb2xvcn1cclxuICAgICAgICAgKiBAc3RhdGljXHJcbiAgICAgICAgICovXG4gICAgICAgIEdSQVk6IFsxMjcuNSwgMTI3LjUsIDEyNy41XSxcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBTb2xpZCByZWQsIFJHQkEgaXMgWzI1NSwgMCwgMF0uXHJcbiAgICAgICAgICogISN6aCDnuq/nuqLoibLvvIxSR0JBIOaYryBbMjU1LCAwLCAwXeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBSRURcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xuICAgICAgICBSRUQ6IFsyNTUsIDAsIDBdLFxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFNvbGlkIGdyZWVuLCBSR0JBIGlzIFswLCAyNTUsIDBdLlxyXG4gICAgICAgICAqICEjemgg57qv57u/6Imy77yMUkdCQSDmmK8gWzAsIDI1NSwgMF3jgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkgR1JFRU5cclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xuICAgICAgICBHUkVFTjogWzAsIDI1NSwgMF0sXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gU29saWQgYmx1ZSwgUkdCQSBpcyBbMCwgMCwgMjU1XS5cclxuICAgICAgICAgKiAhI3poIOe6r+iTneiJsu+8jFJHQkEg5pivIFswLCAwLCAyNTVd44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IEJMVUVcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xuICAgICAgICBCTFVFOiBbMCwgMCwgMjU1XSxcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBZZWxsb3csIFJHQkEgaXMgWzI1NSwgMjM1LCA0XS5cclxuICAgICAgICAgKiAhI3poIOm7hOiJsu+8jFJHQkEg5pivIFsyNTUsIDIzNSwgNF3jgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkgWUVMTE9XXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cbiAgICAgICAgWUVMTE9XOiBbMjU1LCAyMzUsIDRdLFxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIE9yYW5nZSwgUkdCQSBpcyBbMjU1LCAxMjcsIDBdLlxyXG4gICAgICAgICAqICEjemgg5qmZ6Imy77yMUkdCQSDmmK8gWzI1NSwgMTI3LCAwXeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBPUkFOR0VcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xuICAgICAgICBPUkFOR0U6IFsyNTUsIDEyNywgMF0sXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICEjZW4gQ3lhbiwgUkdCQSBpcyBbMCwgMjU1LCAyNTVdLlxyXG4gICAgICAgICAqICEjemgg6Z2S6Imy77yMUkdCQSDmmK8gWzAsIDI1NSwgMjU1XeOAglxyXG4gICAgICAgICAqIEBwcm9wZXJ0eSBDWUFOXHJcbiAgICAgICAgICogQHR5cGUge0NvbG9yfVxyXG4gICAgICAgICAqIEBzdGF0aWNcclxuICAgICAgICAgKi9cbiAgICAgICAgQ1lBTjogWzAsIDI1NSwgMjU1XSxcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBNYWdlbnRhLCBSR0JBIGlzIFsyNTUsIDAsIDI1NV0uXHJcbiAgICAgICAgICogISN6aCDmtIvnuqLoibLvvIjlk4HnuqLoibLvvInvvIxSR0JBIOaYryBbMjU1LCAwLCAyNTVd44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IE1BR0VOVEFcclxuICAgICAgICAgKiBAdHlwZSB7Q29sb3J9XHJcbiAgICAgICAgICogQHN0YXRpY1xyXG4gICAgICAgICAqL1xuICAgICAgICBNQUdFTlRBOiBbMjU1LCAwLCAyNTVdXG4gICAgfTtcbiAgICBmb3IgKHZhciBjb2xvck5hbWUgaW4gRGVmYXVsdENvbG9ycykge1xuICAgICAgICBqcy5nZXQoQ29sb3IsIGNvbG9yTmFtZSwgZnVuY3Rpb24gKHJnYmEpIHtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb2xvcihyZ2JhWzBdLCByZ2JhWzFdLCByZ2JhWzJdLCByZ2JhWzNdKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0oRGVmYXVsdENvbG9yc1tjb2xvck5hbWVdKSk7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gQ29sb3IucHJvdG90eXBlO1xuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIENsb25lIGEgbmV3IGNvbG9yIGZyb20gdGhlIGN1cnJlbnQgY29sb3IuXHJcbiAgICAgKiAhI3poIOWFi+mahuW9k+WJjeminOiJsuOAglxyXG4gICAgICogQG1ldGhvZCBjbG9uZVxyXG4gICAgICogQHJldHVybiB7Q29sb3J9IE5ld2x5IGNyZWF0ZWQgY29sb3IuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gbmV3IGNjLkNvbG9yKCk7XHJcbiAgICAgKiB2YXIgbmV3Q29sb3IgPSBjb2xvci5jbG9uZSgpOy8vIENvbG9yIHtyOiAwLCBnOiAwLCBiOiAwLCBhOiAyNTV9XHJcbiAgICAgKi9cbiAgICBwcm90by5jbG9uZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJldCA9IG5ldyBDb2xvcigpO1xuICAgICAgICByZXQuX3ZhbCA9IHRoaXMuX3ZhbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRPRE9cclxuICAgICAqICEjemgg5Yik5pat5Lik5Liq6aKc6Imy5piv5ZCm55u4562J44CCXHJcbiAgICAgKiBAbWV0aG9kIGVxdWFsc1xyXG4gICAgICogQHBhcmFtIHtDb2xvcn0gb3RoZXJcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yMSA9IGNjLkNvbG9yLldISVRFO1xyXG4gICAgICogdmFyIGNvbG9yMiA9IG5ldyBjYy5Db2xvcigyNTUsIDI1NSwgMjU1KTtcclxuICAgICAqIGNjLmxvZyhjb2xvcjEuZXF1YWxzKGNvbG9yMikpOyAvLyB0cnVlO1xyXG4gICAgICogY29sb3IyID0gY2MuQ29sb3IuUkVEO1xyXG4gICAgICogY2MubG9nKGNvbG9yMi5lcXVhbHMoY29sb3IxKSk7IC8vIGZhbHNlO1xyXG4gICAgICovXG4gICAgcHJvdG8uZXF1YWxzID0gZnVuY3Rpb24gKG90aGVyKSB7XG4gICAgICAgIHJldHVybiBvdGhlciAmJiB0aGlzLl92YWwgPT09IG90aGVyLl92YWw7XG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUT0RPXHJcbiAgICAgKiAhI3poIOe6v+aAp+aPkuWAvFxyXG4gICAgICogQG1ldGhvZCBsZXJwXHJcbiAgICAgKiBAcGFyYW0ge0NvbG9yfSB0b1xyXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHJhdGlvIC0gdGhlIGludGVycG9sYXRpb24gY29lZmZpY2llbnQuXHJcbiAgICAgKiBAcGFyYW0ge0NvbG9yfSBbb3V0XSAtIG9wdGlvbmFsLCB0aGUgcmVjZWl2aW5nIHZlY3Rvci5cclxuICAgICAqIEByZXR1cm4ge0NvbG9yfVxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIHV0aWxzL2FwaS9lbmdpbmUvZG9jcy9jb2NvczJkL2NvcmUvdmFsdWUtdHlwZXMvQ0NDb2xvci9sZXJwLmpzfVxyXG4gICAgICovXG4gICAgcHJvdG8ubGVycCA9IGZ1bmN0aW9uICh0bywgcmF0aW8sIG91dCkge1xuICAgICAgICBvdXQgPSBvdXQgfHwgbmV3IENvbG9yKCk7XG4gICAgICAgIHZhciByID0gdGhpcy5yO1xuICAgICAgICB2YXIgZyA9IHRoaXMuZztcbiAgICAgICAgdmFyIGIgPSB0aGlzLmI7XG4gICAgICAgIHZhciBhID0gdGhpcy5hO1xuICAgICAgICBvdXQuciA9IHIgKyAodG8uciAtIHIpICogcmF0aW87XG4gICAgICAgIG91dC5nID0gZyArICh0by5nIC0gZykgKiByYXRpbztcbiAgICAgICAgb3V0LmIgPSBiICsgKHRvLmIgLSBiKSAqIHJhdGlvO1xuICAgICAgICBvdXQuYSA9IGEgKyAodG8uYSAtIGEpICogcmF0aW87XG4gICAgICAgIHJldHVybiBvdXQ7XG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUT0RPXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uuaWueS+v+mYheivu+eahOWtl+espuS4suOAglxyXG4gICAgICogQG1ldGhvZCB0b1N0cmluZ1xyXG4gICAgICogQHJldHVybiB7U3RyaW5nfVxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IGNjLkNvbG9yLldISVRFO1xyXG4gICAgICogY29sb3IudG9TdHJpbmcoKTsgLy8gXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDI1NSlcIlxyXG4gICAgICovXG4gICAgcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBcInJnYmEoXCIgKyB0aGlzLnIudG9GaXhlZCgpICsgXCIsIFwiICsgdGhpcy5nLnRvRml4ZWQoKSArIFwiLCBcIiArIHRoaXMuYi50b0ZpeGVkKCkgKyBcIiwgXCIgKyB0aGlzLmEudG9GaXhlZCgpICsgXCIpXCI7XG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXRzIHJlZCBjaGFubmVsIHZhbHVlXHJcbiAgICAgKiAhI3poIOiOt+WPluW9k+WJjeminOiJsueahOe6ouiJsuWAvOOAglxyXG4gICAgICogQG1ldGhvZCBnZXRSXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9IHJlZCB2YWx1ZS5cclxuICAgICAqL1xuICAgIHByb3RvLmdldFIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWwgJiAweDAwMDAwMGZmO1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldHMgcmVkIHZhbHVlIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgY29sb3Igb2JqZWN0XHJcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOe6ouiJsuWAvO+8jOW5tui/lOWbnuW9k+WJjeWvueixoeOAglxyXG4gICAgICogQG1ldGhvZCBzZXRSXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gcmVkIC0gdGhlIG5ldyBSZWQgY29tcG9uZW50LlxyXG4gICAgICogQHJldHVybiB7Q29sb3J9IHRoaXMgY29sb3IuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gbmV3IGNjLkNvbG9yKCk7XHJcbiAgICAgKiBjb2xvci5zZXRSKDI1NSk7IC8vIENvbG9yIHtyOiAyNTUsIGc6IDAsIGI6IDAsIGE6IDI1NX1cclxuICAgICAqL1xuICAgIHByb3RvLnNldFIgPSBmdW5jdGlvbiAocmVkKSB7XG4gICAgICAgIHJlZCA9IH5+Y2MubWlzYy5jbGFtcGYocmVkLCAwLCAyNTUpO1xuICAgICAgICB0aGlzLl92YWwgPSAodGhpcy5fdmFsICYgMHhmZmZmZmYwMCB8IHJlZCkgPj4+IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIEdldHMgZ3JlZW4gY2hhbm5lbCB2YWx1ZVxyXG4gICAgICogISN6aCDojrflj5blvZPliY3popzoibLnmoTnu7/oibLlgLzjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0R1xyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBncmVlbiB2YWx1ZS5cclxuICAgICAqL1xuICAgIHByb3RvLmdldEcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsICYgMHgwMDAwZmYwMCkgPj4gODtcbiAgICB9O1xuICAgIC8qKlxyXG4gICAgICogISNlbiBTZXRzIGdyZWVuIHZhbHVlIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgY29sb3Igb2JqZWN0XHJcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOe7v+iJsuWAvO+8jOW5tui/lOWbnuW9k+WJjeWvueixoeOAglxyXG4gICAgICogQG1ldGhvZCBzZXRHXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZ3JlZW4gLSB0aGUgbmV3IEdyZWVuIGNvbXBvbmVudC5cclxuICAgICAqIEByZXR1cm4ge0NvbG9yfSB0aGlzIGNvbG9yLlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIHZhciBjb2xvciA9IG5ldyBjYy5Db2xvcigpO1xyXG4gICAgICogY29sb3Iuc2V0RygyNTUpOyAvLyBDb2xvciB7cjogMCwgZzogMjU1LCBiOiAwLCBhOiAyNTV9XHJcbiAgICAgKi9cbiAgICBwcm90by5zZXRHID0gZnVuY3Rpb24gKGdyZWVuKSB7XG4gICAgICAgIGdyZWVuID0gfn5jYy5taXNjLmNsYW1wZihncmVlbiwgMCwgMjU1KTtcbiAgICAgICAgdGhpcy5fdmFsID0gKHRoaXMuX3ZhbCAmIDB4ZmZmZjAwZmYgfCBncmVlbiA8PCA4KSA+Pj4gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0cyBibHVlIGNoYW5uZWwgdmFsdWVcclxuICAgICAqICEjemgg6I635Y+W5b2T5YmN6aKc6Imy55qE6JOd6Imy5YC844CCXHJcbiAgICAgKiBAbWV0aG9kIGdldEJcclxuICAgICAqIEByZXR1cm4ge051bWJlcn0gYmx1ZSB2YWx1ZS5cclxuICAgICAqL1xuICAgIHByb3RvLmdldEIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsICYgMHgwMGZmMDAwMCkgPj4gMTY7XG4gICAgfTtcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0cyBibHVlIHZhbHVlIGFuZCByZXR1cm4gdGhlIGN1cnJlbnQgY29sb3Igb2JqZWN0XHJcbiAgICAgKiAhI3poIOiuvue9ruW9k+WJjeeahOiTneiJsuWAvO+8jOW5tui/lOWbnuW9k+WJjeWvueixoeOAglxyXG4gICAgICogQG1ldGhvZCBzZXRCXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gYmx1ZSAtIHRoZSBuZXcgQmx1ZSBjb21wb25lbnQuXHJcbiAgICAgKiBAcmV0dXJuIHtDb2xvcn0gdGhpcyBjb2xvci5cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgY29sb3IgPSBuZXcgY2MuQ29sb3IoKTtcclxuICAgICAqIGNvbG9yLnNldEIoMjU1KTsgLy8gQ29sb3Ige3I6IDAsIGc6IDAsIGI6IDI1NSwgYTogMjU1fVxyXG4gICAgICovXG4gICAgcHJvdG8uc2V0QiA9IGZ1bmN0aW9uIChibHVlKSB7XG4gICAgICAgIGJsdWUgPSB+fmNjLm1pc2MuY2xhbXBmKGJsdWUsIDAsIDI1NSk7XG4gICAgICAgIHRoaXMuX3ZhbCA9ICh0aGlzLl92YWwgJiAweGZmMDBmZmZmIHwgYmx1ZSA8PCAxNikgPj4+IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIEdldHMgYWxwaGEgY2hhbm5lbCB2YWx1ZVxyXG4gICAgICogISN6aCDojrflj5blvZPliY3popzoibLnmoTpgI/mmI7luqblgLzjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0QVxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfSBhbHBoYSB2YWx1ZS5cclxuICAgICAqL1xuICAgIHByb3RvLmdldEEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAodGhpcy5fdmFsICYgMHhmZjAwMDAwMCkgPj4+IDI0O1xuICAgIH07XG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldHMgYWxwaGEgdmFsdWUgYW5kIHJldHVybiB0aGUgY3VycmVudCBjb2xvciBvYmplY3RcclxuICAgICAqICEjemgg6K6+572u5b2T5YmN55qE6YCP5piO5bqm77yM5bm26L+U5Zue5b2T5YmN5a+56LGh44CCXHJcbiAgICAgKiBAbWV0aG9kIHNldEFcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBhbHBoYSAtIHRoZSBuZXcgQWxwaGEgY29tcG9uZW50LlxyXG4gICAgICogQHJldHVybiB7Q29sb3J9IHRoaXMgY29sb3IuXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gbmV3IGNjLkNvbG9yKCk7XHJcbiAgICAgKiBjb2xvci5zZXRBKDApOyAvLyBDb2xvciB7cjogMCwgZzogMCwgYjogMCwgYTogMH1cclxuICAgICAqL1xuICAgIHByb3RvLnNldEEgPSBmdW5jdGlvbiAoYWxwaGEpIHtcbiAgICAgICAgYWxwaGEgPSB+fmNjLm1pc2MuY2xhbXBmKGFscGhhLCAwLCAyNTUpO1xuICAgICAgICB0aGlzLl92YWwgPSAodGhpcy5fdmFsICYgMHgwMGZmZmZmZiB8IGFscGhhIDw8IDI0KSA+Pj4gMDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIHByb3RvLl9mYXN0U2V0QSA9IGZ1bmN0aW9uIChhbHBoYSkge1xuICAgICAgICB0aGlzLl92YWwgPSAodGhpcy5fdmFsICYgMHgwMGZmZmZmZiB8IGFscGhhIDw8IDI0KSA+Pj4gMDtcbiAgICB9O1xuXG4gICAganMuZ2V0c2V0KHByb3RvLCAncicsIHByb3RvLmdldFIsIHByb3RvLnNldFIsIHRydWUpO1xuICAgIGpzLmdldHNldChwcm90bywgJ2cnLCBwcm90by5nZXRHLCBwcm90by5zZXRHLCB0cnVlKTtcbiAgICBqcy5nZXRzZXQocHJvdG8sICdiJywgcHJvdG8uZ2V0QiwgcHJvdG8uc2V0QiwgdHJ1ZSk7XG4gICAganMuZ2V0c2V0KHByb3RvLCAnYScsIHByb3RvLmdldEEsIHByb3RvLnNldEEsIHRydWUpO1xuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIENvbnZlcnQgY29sb3IgdG8gY3NzIGZvcm1hdC5cclxuICAgICAqICEjemgg6L2s5o2i5Li6IENTUyDmoLzlvI/jgIJcclxuICAgICAqIEBtZXRob2QgdG9DU1NcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvcHQgLSBcInJnYmFcIiwgXCJyZ2JcIiwgXCIjcmdiXCIgb3IgXCIjcnJnZ2JiXCIuXHJcbiAgICAgKiBAcmV0dXJuIHtTdHJpbmd9XHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgdXRpbHMvYXBpL2VuZ2luZS9kb2NzL2NvY29zMmQvY29yZS92YWx1ZS10eXBlcy9DQ0NvbG9yL3RvQ1NTLmpzfVxyXG4gICAgICovXG4gICAgcHJvdG8udG9DU1MgPSBmdW5jdGlvbiAob3B0KSB7XG4gICAgICAgIGlmIChvcHQgPT09ICdyZ2JhJykge1xuICAgICAgICAgICAgcmV0dXJuIFwicmdiYShcIiArICh0aGlzLnIgfCAwKSArIFwiLFwiICsgKHRoaXMuZyB8IDApICsgXCIsXCIgKyAodGhpcy5iIHwgMCkgKyBcIixcIiArICh0aGlzLmEgLyAyNTUpLnRvRml4ZWQoMikgKyBcIilcIjtcbiAgICAgICAgfSBlbHNlIGlmIChvcHQgPT09ICdyZ2InKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJyZ2IoXCIgKyAodGhpcy5yIHwgMCkgKyBcIixcIiArICh0aGlzLmcgfCAwKSArIFwiLFwiICsgKHRoaXMuYiB8IDApICsgXCIpXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJyMnICsgdGhpcy50b0hFWChvcHQpO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZWFkIGhleCBzdHJpbmcgYW5kIHN0b3JlIGNvbG9yIGRhdGEgaW50byB0aGUgY3VycmVudCBjb2xvciBvYmplY3QsIHRoZSBoZXggc3RyaW5nIG11c3QgYmUgZm9ybWF0ZWQgYXMgcmdiYSBvciByZ2IuXHJcbiAgICAgKiAhI3poIOivu+WPliAxNiDov5vliLbpopzoibLjgIJcclxuICAgICAqIEBtZXRob2QgZnJvbUhFWFxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGhleFN0cmluZ1xyXG4gICAgICogQHJldHVybiB7Q29sb3J9XHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gY2MuQ29sb3IuQkxBQ0s7XHJcbiAgICAgKiBjb2xvci5mcm9tSEVYKFwiI0ZGRkYzM1wiKTsgLy8gQ29sb3Ige3I6IDI1NSwgZzogMjU1LCBiOiA1MSwgYTogMjU1fTtcclxuICAgICAqL1xuICAgIHByb3RvLmZyb21IRVggPSBmdW5jdGlvbiAoaGV4U3RyaW5nKSB7XG4gICAgICAgIGhleFN0cmluZyA9IGhleFN0cmluZy5pbmRleE9mKCcjJykgPT09IDAgPyBoZXhTdHJpbmcuc3Vic3RyaW5nKDEpIDogaGV4U3RyaW5nO1xuICAgICAgICB2YXIgciA9IHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHIoMCwgMiksIDE2KSB8fCAwO1xuICAgICAgICB2YXIgZyA9IHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHIoMiwgMiksIDE2KSB8fCAwO1xuICAgICAgICB2YXIgYiA9IHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHIoNCwgMiksIDE2KSB8fCAwO1xuICAgICAgICB2YXIgYSA9IHBhcnNlSW50KGhleFN0cmluZy5zdWJzdHIoNiwgMiksIDE2KSB8fCAyNTU7XG4gICAgICAgIHRoaXMuX3ZhbCA9IChhIDw8IDI0ID4+PiAwKSArIChiIDw8IDE2KSArIChnIDw8IDgpICsgcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBjb252ZXJ0IENvbG9yIHRvIEhFWCBjb2xvciBzdHJpbmcuXHJcbiAgICAgKiBlLmcuICBjYy5jb2xvcigyNTUsNiwyNTUpICB0byA6IFwiI2ZmMDZmZlwiXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uiAxNiDov5vliLbjgIJcclxuICAgICAqIEBtZXRob2QgdG9IRVhcclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBmbXQgLSBcIiNyZ2JcIiwgXCIjcnJnZ2JiXCIgb3IgXCIjcnJnZ2JiYWFcIi5cclxuICAgICAqIEByZXR1cm4ge1N0cmluZ31cclxuICAgICAqIEBleGFtcGxlXHJcbiAgICAgKiB2YXIgY29sb3IgPSBjYy5Db2xvci5CTEFDSztcclxuICAgICAqIGNvbG9yLnRvSEVYKFwiI3JnYlwiKTsgICAgIC8vIFwiMDAwXCI7XHJcbiAgICAgKiBjb2xvci50b0hFWChcIiNycmdnYmJcIik7ICAvLyBcIjAwMDAwMFwiO1xyXG4gICAgICovXG4gICAgcHJvdG8udG9IRVggPSBmdW5jdGlvbiAoZm10KSB7XG4gICAgICAgIHZhciBwcmVmaXggPSAnMCc7XG4gICAgICAgIHZhciBoZXggPSBbKHRoaXMuciA8IDE2ID8gcHJlZml4IDogJycpICsgKHRoaXMuciB8IDApLnRvU3RyaW5nKDE2KSwgKHRoaXMuZyA8IDE2ID8gcHJlZml4IDogJycpICsgKHRoaXMuZyB8IDApLnRvU3RyaW5nKDE2KSwgKHRoaXMuYiA8IDE2ID8gcHJlZml4IDogJycpICsgKHRoaXMuYiB8IDApLnRvU3RyaW5nKDE2KV07XG4gICAgICAgIHZhciBpID0gLTE7XG4gICAgICAgIGlmIChmbXQgPT09ICcjcmdiJykge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGhleC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGlmIChoZXhbaV0ubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgICAgICAgICBoZXhbaV0gPSBoZXhbaV1bMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGZtdCA9PT0gJyNycmdnYmInKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgaGV4Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhleFtpXS5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgICAgICAgICAgaGV4W2ldID0gJzAnICsgaGV4W2ldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChmbXQgPT09ICcjcnJnZ2JiYWEnKSB7XG4gICAgICAgICAgICBoZXgucHVzaCgodGhpcy5hIDwgMTYgPyBwcmVmaXggOiAnJykgKyAodGhpcy5hIHwgMCkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGV4LmpvaW4oJycpO1xuICAgIH07XG5cbiAgICAvKipcclxuICAgICAqICEjZW4gQ29udmVydCB0byAyNGJpdCByZ2IgdmFsdWUuXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uiAyNGJpdCDnmoQgUkdCIOWAvOOAglxyXG4gICAgICogQG1ldGhvZCB0b1JHQlZhbHVlXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gY2MuQ29sb3IuWUVMTE9XO1xyXG4gICAgICogY29sb3IudG9SR0JWYWx1ZSgpOyAvLyAxNjc3MTg0NDtcclxuICAgICAqL1xuICAgIHByb3RvLnRvUkdCVmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWwgJiAweDAwZmZmZmZmO1xuICAgIH07XG5cbiAgICAvKipcclxuICAgICAqICEjZW4gUmVhZCBIU1YgbW9kZWwgY29sb3IgYW5kIGNvbnZlcnQgdG8gUkdCIGNvbG9yXHJcbiAgICAgKiAhI3poIOivu+WPliBIU1bvvIjoibLlvanmqKHlnovvvInmoLzlvI/jgIJcclxuICAgICAqIEBtZXRob2QgZnJvbUhTVlxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGhcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBzXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gdlxyXG4gICAgICogQHJldHVybiB7Q29sb3J9XHJcbiAgICAgKiBAY2hhaW5hYmxlXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gY2MuQ29sb3IuWUVMTE9XO1xyXG4gICAgICogY29sb3IuZnJvbUhTVigwLCAwLCAxKTsgLy8gQ29sb3Ige3I6IDI1NSwgZzogMjU1LCBiOiAyNTUsIGE6IDI1NX07XHJcbiAgICAgKi9cbiAgICBwcm90by5mcm9tSFNWID0gZnVuY3Rpb24gKGgsIHMsIHYpIHtcbiAgICAgICAgdmFyIHIsIGcsIGI7XG4gICAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgICAgICByID0gZyA9IGIgPSB2O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKHYgPT09IDApIHtcbiAgICAgICAgICAgICAgICByID0gZyA9IGIgPSAwO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpZiAoaCA9PT0gMSkgaCA9IDA7XG4gICAgICAgICAgICAgICAgaCAqPSA2O1xuICAgICAgICAgICAgICAgIHMgPSBzO1xuICAgICAgICAgICAgICAgIHYgPSB2O1xuICAgICAgICAgICAgICAgIHZhciBpID0gTWF0aC5mbG9vcihoKTtcbiAgICAgICAgICAgICAgICB2YXIgZiA9IGggLSBpO1xuICAgICAgICAgICAgICAgIHZhciBwID0gdiAqICgxIC0gcyk7XG4gICAgICAgICAgICAgICAgdmFyIHEgPSB2ICogKDEgLSBzICogZik7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB2ICogKDEgLSBzICogKDEgLSBmKSk7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBxO1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gcDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHY7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gdDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSBwO1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHE7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB0O1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHIgPSB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgZyA9IHA7XG4gICAgICAgICAgICAgICAgICAgICAgICBiID0gcTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByICo9IDI1NTtcbiAgICAgICAgZyAqPSAyNTU7XG4gICAgICAgIGIgKj0gMjU1O1xuICAgICAgICB0aGlzLl92YWwgPSAodGhpcy5hIDw8IDI0ID4+PiAwKSArIChiIDw8IDE2KSArIChnIDw8IDgpICsgcjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUcmFuc2Zvcm0gdG8gSFNWIG1vZGVsIGNvbG9yXHJcbiAgICAgKiAhI3poIOi9rOaNouS4uiBIU1bvvIjoibLlvanmqKHlnovvvInmoLzlvI/jgIJcclxuICAgICAqIEBtZXRob2QgdG9IU1ZcclxuICAgICAqIEByZXR1cm4ge09iamVjdH0gLSB7aDogbnVtYmVyLCBzOiBudW1iZXIsIHY6IG51bWJlcn0uXHJcbiAgICAgKiBAZXhhbXBsZVxyXG4gICAgICogdmFyIGNvbG9yID0gY2MuQ29sb3IuWUVMTE9XO1xyXG4gICAgICogY29sb3IudG9IU1YoKTsgLy8gT2JqZWN0IHtoOiAwLjE1MzM4NjQ1NDE4MzI2NjksIHM6IDAuOTg0MzEzNzI1NDkwMTk2MSwgdjogMX07XHJcbiAgICAgKi9cbiAgICBwcm90by50b0hTViA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHIgPSB0aGlzLnIgLyAyNTU7XG4gICAgICAgIHZhciBnID0gdGhpcy5nIC8gMjU1O1xuICAgICAgICB2YXIgYiA9IHRoaXMuYiAvIDI1NTtcbiAgICAgICAgdmFyIGhzdiA9IHsgaDogMCwgczogMCwgdjogMCB9O1xuICAgICAgICB2YXIgbWF4ID0gTWF0aC5tYXgociwgZywgYik7XG4gICAgICAgIHZhciBtaW4gPSBNYXRoLm1pbihyLCBnLCBiKTtcbiAgICAgICAgdmFyIGRlbHRhID0gMDtcbiAgICAgICAgaHN2LnYgPSBtYXg7XG4gICAgICAgIGhzdi5zID0gbWF4ID8gKG1heCAtIG1pbikgLyBtYXggOiAwO1xuICAgICAgICBpZiAoIWhzdi5zKSBoc3YuaCA9IDA7ZWxzZSB7XG4gICAgICAgICAgICBkZWx0YSA9IG1heCAtIG1pbjtcbiAgICAgICAgICAgIGlmIChyID09PSBtYXgpIGhzdi5oID0gKGcgLSBiKSAvIGRlbHRhO2Vsc2UgaWYgKGcgPT09IG1heCkgaHN2LmggPSAyICsgKGIgLSByKSAvIGRlbHRhO2Vsc2UgaHN2LmggPSA0ICsgKHIgLSBnKSAvIGRlbHRhO1xuICAgICAgICAgICAgaHN2LmggLz0gNjtcbiAgICAgICAgICAgIGlmIChoc3YuaCA8IDApIGhzdi5oICs9IDEuMDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaHN2O1xuICAgIH07XG5cbiAgICBwcm90by5zZXQgPSBmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgICAgaWYgKGNvbG9yLl92YWwpIHtcbiAgICAgICAgICAgIHRoaXMuX3ZhbCA9IGNvbG9yLl92YWw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnIgPSBjb2xvci5yO1xuICAgICAgICAgICAgdGhpcy5nID0gY29sb3IuZztcbiAgICAgICAgICAgIHRoaXMuYiA9IGNvbG9yLmI7XG4gICAgICAgICAgICB0aGlzLmEgPSBjb2xvci5hO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBDb2xvcjtcbn0oKTtcblxuY2MuQ29sb3IgPSBDb2xvcjtcblxuLyoqXHJcbiAqIEBtb2R1bGUgY2NcclxuICovXG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIFRoZSBjb252ZW5pZW5jZSBtZXRob2QgdG8gY3JlYXRlIGEgbmV3IHt7I2Nyb3NzTGluayBcIkNvbG9yL0NvbG9yOm1ldGhvZFwifX1jYy5Db2xvcnt7L2Nyb3NzTGlua319XHJcbiAqIEFscGhhIGNoYW5uZWwgaXMgb3B0aW9uYWwuIERlZmF1bHQgdmFsdWUgaXMgMjU1LlxyXG4gKlxyXG4gKiAhI3poXHJcbiAqIOmAmui/h+ivpeaWueazleadpeWIm+W7uuS4gOS4quaWsOeahCB7eyNjcm9zc0xpbmsgXCJDb2xvci9Db2xvcjptZXRob2RcIn19Y2MuQ29sb3J7ey9jcm9zc0xpbmt9fSDlr7nosaHjgIJcclxuICogQWxwaGEg6YCa6YGT5piv5Y+v6YCJ55qE44CC6buY6K6k5YC85pivIDI1NeOAglxyXG4gKlxyXG4gKiBAbWV0aG9kIGNvbG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbcj0wXVxyXG4gKiBAcGFyYW0ge051bWJlcn0gW2c9MF1cclxuICogQHBhcmFtIHtOdW1iZXJ9IFtiPTBdXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBbYT0yNTVdXHJcbiAqIEByZXR1cm4ge0NvbG9yfVxyXG4gKiBAZXhhbXBsZSB7QGxpbmsgdXRpbHMvYXBpL2VuZ2luZS9kb2NzL2NvY29zMmQvY29yZS92YWx1ZS10eXBlcy9DQ0NvbG9yL2NvbG9yLmpzfVxyXG4gKi9cbmNjLmNvbG9yID0gZnVuY3Rpb24gY29sb3IociwgZywgYiwgYSkge1xuICAgIGlmICh0eXBlb2YgciA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IG5ldyBjYy5Db2xvcigpO1xuICAgICAgICByZXR1cm4gcmVzdWx0LmZyb21IRVgocik7XG4gICAgfVxuICAgIGlmICgodHlwZW9mIHIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHIpKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBjYy5Db2xvcihyLnIsIHIuZywgci5iLCByLmEpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IGNjLkNvbG9yKHIsIGcsIGIsIGEpO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBjYy5Db2xvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltTnZiRzl5TG1weklsMHNJbTVoYldWeklqcGJJbFpoYkhWbFZIbHdaU0lzSW5KbGNYVnBjbVVpTENKcWN5SXNJa052Ykc5eUlpd2ljaUlzSW1jaUxDSmlJaXdpWVNJc0lsOTJZV3dpTENKbGVIUmxibVFpTENKbVlYTjBSR1ZtYVc1bElpd2lSR1ZtWVhWc2RFTnZiRzl5Y3lJc0lsZElTVlJGSWl3aVFreEJRMHNpTENKVVVrRk9VMUJCVWtWT1ZDSXNJa2RTUVZraUxDSlNSVVFpTENKSFVrVkZUaUlzSWtKTVZVVWlMQ0paUlV4TVQxY2lMQ0pQVWtGT1IwVWlMQ0pEV1VGT0lpd2lUVUZIUlU1VVFTSXNJbU52Ykc5eVRtRnRaU0lzSW1kbGRDSXNJbkpuWW1FaUxDSndjbTkwYnlJc0luQnliM1J2ZEhsd1pTSXNJbU5zYjI1bElpd2ljbVYwSWl3aVpYRjFZV3h6SWl3aWIzUm9aWElpTENKc1pYSndJaXdpZEc4aUxDSnlZWFJwYnlJc0ltOTFkQ0lzSW5SdlUzUnlhVzVuSWl3aWRHOUdhWGhsWkNJc0ltZGxkRklpTENKelpYUlNJaXdpY21Wa0lpd2lZMk1pTENKdGFYTmpJaXdpWTJ4aGJYQm1JaXdpWjJWMFJ5SXNJbk5sZEVjaUxDSm5jbVZsYmlJc0ltZGxkRUlpTENKelpYUkNJaXdpWW14MVpTSXNJbWRsZEVFaUxDSnpaWFJCSWl3aVlXeHdhR0VpTENKZlptRnpkRk5sZEVFaUxDSm5aWFJ6WlhRaUxDSjBiME5UVXlJc0ltOXdkQ0lzSW5SdlNFVllJaXdpWm5KdmJVaEZXQ0lzSW1obGVGTjBjbWx1WnlJc0ltbHVaR1Y0VDJZaUxDSnpkV0p6ZEhKcGJtY2lMQ0p3WVhKelpVbHVkQ0lzSW5OMVluTjBjaUlzSW1adGRDSXNJbkJ5WldacGVDSXNJbWhsZUNJc0lta2lMQ0pzWlc1bmRHZ2lMQ0p3ZFhOb0lpd2lhbTlwYmlJc0luUnZVa2RDVm1Gc2RXVWlMQ0ptY205dFNGTldJaXdpYUNJc0luTWlMQ0oySWl3aVRXRjBhQ0lzSW1ac2IyOXlJaXdpWmlJc0luQWlMQ0p4SWl3aWRDSXNJblJ2U0ZOV0lpd2lhSE4ySWl3aWJXRjRJaXdpYldsdUlpd2laR1ZzZEdFaUxDSnpaWFFpTENKamIyeHZjaUlzSW5KbGMzVnNkQ0lzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pWFN3aWJXRndjR2x1WjNNaU9pSTdPenM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXdRa0VzU1VGQlNVRXNXVUZCV1VNc1VVRkJVU3hqUVVGU0xFTkJRV2hDTzBGQlEwRXNTVUZCU1VNc1MwRkJTMFFzVVVGQlVTeG5Ra0ZCVWl4RFFVRlVPenRCUVVWQkxFbEJRVWxGTEZGQlFWTXNXVUZCV1RzN1FVRkZja0k3T3pzN096czdPenM3T3pzN096czdPenRCUVd0Q1FUczdPenM3T3p0QlFVOUJMR0ZCUVZOQkxFdEJRVlFzUTBGQlowSkRMRU5CUVdoQ0xFVkJRVzFDUXl4RFFVRnVRaXhGUVVGelFrTXNRMEZCZEVJc1JVRkJlVUpETEVOQlFYcENMRVZCUVRaQ08wRkJRM3BDTEZsQlFVa3NVVUZCVDBnc1EwRkJVQ3g1UTBGQlQwRXNRMEZCVUN4UFFVRmhMRkZCUVdwQ0xFVkJRVEpDTzBGQlEzWkNReXhuUWtGQlNVUXNSVUZCUlVNc1EwRkJUanRCUVVOQlF5eG5Ra0ZCU1VZc1JVRkJSVVVzUTBGQlRqdEJRVU5CUXl4blFrRkJTVWdzUlVGQlJVY3NRMEZCVGp0QlFVTkJTQ3huUWtGQlNVRXNSVUZCUlVFc1EwRkJUanRCUVVOSU8wRkJRMFJCTEZsQlFVbEJMRXRCUVVzc1EwRkJWRHRCUVVOQlF5eFpRVUZKUVN4TFFVRkxMRU5CUVZRN1FVRkRRVU1zV1VGQlNVRXNTMEZCU3l4RFFVRlVPMEZCUTBGRExGbEJRVWtzVDBGQlQwRXNRMEZCVUN4TFFVRmhMRkZCUVdJc1IwRkJkMEpCTEVOQlFYaENMRWRCUVRSQ0xFZEJRV2hETzBGQlEwRXNZVUZCUzBNc1NVRkJUQ3hIUVVGWkxFTkJRVVZFTEV0QlFVY3NSVUZCU2l4TFFVRlpMRU5CUVdJc1MwRkJiVUpFTEV0QlFVY3NSVUZCZEVJc1MwRkJOa0pFTEV0QlFVY3NRMEZCYUVNc1NVRkJjVU5FTEVOQlFXcEVPMEZCUTBnN1FVRkRSRVlzVDBGQlIwOHNUVUZCU0N4RFFVRlZUaXhMUVVGV0xFVkJRV2xDU0N4VFFVRnFRanRCUVVOQlF5eFpRVUZSTEhGQ1FVRlNMRVZCUVN0Q1V5eFZRVUV2UWl4RFFVRXdReXhWUVVFeFF5eEZRVUZ6UkZBc1MwRkJkRVFzUlVGQk5rUXNSVUZCUTBNc1IwRkJSeXhEUVVGS0xFVkJRVTlETEVkQlFVY3NRMEZCVml4RlFVRmhReXhIUVVGSExFTkJRV2hDTEVWQlFXMUNReXhIUVVGSExFZEJRWFJDTEVWQlFUZEVPenRCUVVWQkxGRkJRVWxKTEdkQ1FVRm5RanRCUVVOb1FqdEJRVU5CT3pzN096czdPMEZCVDBGRExHVkJRVmtzUTBGQlF5eEhRVUZFTEVWQlFVMHNSMEZCVGl4RlFVRlhMRWRCUVZnc1JVRkJaMElzUjBGQmFFSXNRMEZVU1R0QlFWVm9RanM3T3pzN096dEJRVTlCUXl4bFFVRlpMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFTkJRVW9zUlVGQlR5eERRVUZRTEVWQlFWVXNSMEZCVml4RFFXcENTVHRCUVd0Q2FFSTdPenM3T3pzN1FVRlBRVU1zY1VKQlFWa3NRMEZCUXl4RFFVRkVMRVZCUVVrc1EwRkJTaXhGUVVGUExFTkJRVkFzUlVGQlZTeERRVUZXTEVOQmVrSkpPMEZCTUVKb1FqczdPenM3T3p0QlFVOUJReXhqUVVGWkxFTkJRVU1zUzBGQlJDeEZRVUZSTEV0QlFWSXNSVUZCWlN4TFFVRm1MRU5CYWtOSk8wRkJhME5vUWpzN096czdPenRCUVU5QlF5eGhRVUZaTEVOQlFVTXNSMEZCUkN4RlFVRk5MRU5CUVU0c1JVRkJVeXhEUVVGVUxFTkJla05KTzBGQk1FTm9RanM3T3pzN096dEJRVTlCUXl4bFFVRlpMRU5CUVVNc1EwRkJSQ3hGUVVGSkxFZEJRVW9zUlVGQlV5eERRVUZVTEVOQmFrUkpPMEZCYTBSb1FqczdPenM3T3p0QlFVOUJReXhqUVVGWkxFTkJRVU1zUTBGQlJDeEZRVUZKTEVOQlFVb3NSVUZCVHl4SFFVRlFMRU5CZWtSSk8wRkJNRVJvUWpzN096czdPenRCUVU5QlF5eG5Ra0ZCV1N4RFFVRkRMRWRCUVVRc1JVRkJUU3hIUVVGT0xFVkJRVmNzUTBGQldDeERRV3BGU1R0QlFXdEZhRUk3T3pzN096czdRVUZQUVVNc1owSkJRVmtzUTBGQlF5eEhRVUZFTEVWQlFVMHNSMEZCVGl4RlFVRlhMRU5CUVZnc1EwRjZSVWs3UVVFd1JXaENPenM3T3pzN08wRkJUMEZETEdOQlFWa3NRMEZCUXl4RFFVRkVMRVZCUVVrc1IwRkJTaXhGUVVGVExFZEJRVlFzUTBGcVJrazdRVUZyUm1oQ096czdPenM3TzBGQlQwRkRMR2xDUVVGWkxFTkJRVU1zUjBGQlJDeEZRVUZOTEVOQlFVNHNSVUZCVXl4SFFVRlVPMEZCZWtaSkxFdEJRWEJDTzBGQk1rWkJMRk5CUVVzc1NVRkJTVU1zVTBGQlZDeEpRVUZ6UWxvc1lVRkJkRUlzUlVGQmNVTTdRVUZEYWtOVUxGZEJRVWR6UWl4SFFVRklMRU5CUVU5eVFpeExRVUZRTEVWQlFXTnZRaXhUUVVGa0xFVkJRVEJDTEZWQlFWVkZMRWxCUVZZc1JVRkJaMEk3UVVGRGRFTXNiVUpCUVU4c1dVRkJXVHRCUVVObUxIVkNRVUZQTEVsQlFVbDBRaXhMUVVGS0xFTkJRVlZ6UWl4TFFVRkxMRU5CUVV3c1EwRkJWaXhGUVVGdFFrRXNTMEZCU3l4RFFVRk1MRU5CUVc1Q0xFVkJRVFJDUVN4TFFVRkxMRU5CUVV3c1EwRkJOVUlzUlVGQmNVTkJMRXRCUVVzc1EwRkJUQ3hEUVVGeVF5eERRVUZRTzBGQlEwZ3NZVUZHUkR0QlFVZElMRk5CU25kQ0xFTkJTWFJDWkN4alFVRmpXU3hUUVVGa0xFTkJTbk5DTEVOQlFYcENPMEZCUzBnN08wRkJSVVFzVVVGQlNVY3NVVUZCVVhaQ0xFMUJRVTEzUWl4VFFVRnNRanM3UVVGRlFUczdPenM3T3pzN08wRkJVMEZFTEZWQlFVMUZMRXRCUVU0c1IwRkJZeXhaUVVGWk8wRkJRM1JDTEZsQlFVbERMRTFCUVUwc1NVRkJTVEZDTEV0QlFVb3NSVUZCVmp0QlFVTkJNRUlzV1VGQlNYSkNMRWxCUVVvc1IwRkJWeXhMUVVGTFFTeEpRVUZvUWp0QlFVTkJMR1ZCUVU5eFFpeEhRVUZRTzBGQlEwZ3NTMEZLUkRzN1FVRk5RVHM3T3pzN096czdPenM3T3p0QlFXRkJTQ3hWUVVGTlNTeE5RVUZPTEVkQlFXVXNWVUZCVlVNc1MwRkJWaXhGUVVGcFFqdEJRVU0xUWl4bFFVRlBRU3hUUVVGVExFdEJRVXQyUWl4SlFVRk1MRXRCUVdOMVFpeE5RVUZOZGtJc1NVRkJjRU03UVVGRFNDeExRVVpFT3p0QlFVbEJPenM3T3pzN096czdPMEZCVlVGclFpeFZRVUZOVFN4SlFVRk9MRWRCUVdFc1ZVRkJWVU1zUlVGQlZpeEZRVUZqUXl4TFFVRmtMRVZCUVhGQ1F5eEhRVUZ5UWl4RlFVRXdRanRCUVVOdVEwRXNZMEZCVFVFc1QwRkJUeXhKUVVGSmFFTXNTMEZCU2l4RlFVRmlPMEZCUTBFc1dVRkJTVU1zU1VGQlNTeExRVUZMUVN4RFFVRmlPMEZCUTBFc1dVRkJTVU1zU1VGQlNTeExRVUZMUVN4RFFVRmlPMEZCUTBFc1dVRkJTVU1zU1VGQlNTeExRVUZMUVN4RFFVRmlPMEZCUTBFc1dVRkJTVU1zU1VGQlNTeExRVUZMUVN4RFFVRmlPMEZCUTBFMFFpeFpRVUZKTDBJc1EwRkJTaXhIUVVGUlFTeEpRVUZKTEVOQlFVTTJRaXhIUVVGSE4wSXNRMEZCU0N4SFFVRlBRU3hEUVVGU0xFbEJRV0U0UWl4TFFVRjZRanRCUVVOQlF5eFpRVUZKT1VJc1EwRkJTaXhIUVVGUlFTeEpRVUZKTEVOQlFVTTBRaXhIUVVGSE5VSXNRMEZCU0N4SFFVRlBRU3hEUVVGU0xFbEJRV0UyUWl4TFFVRjZRanRCUVVOQlF5eFpRVUZKTjBJc1EwRkJTaXhIUVVGUlFTeEpRVUZKTEVOQlFVTXlRaXhIUVVGSE0wSXNRMEZCU0N4SFFVRlBRU3hEUVVGU0xFbEJRV0UwUWl4TFFVRjZRanRCUVVOQlF5eFpRVUZKTlVJc1EwRkJTaXhIUVVGUlFTeEpRVUZKTEVOQlFVTXdRaXhIUVVGSE1VSXNRMEZCU0N4SFFVRlBRU3hEUVVGU0xFbEJRV0V5UWl4TFFVRjZRanRCUVVOQkxHVkJRVTlETEVkQlFWQTdRVUZEU0N4TFFWaEVPenRCUVdGQk96czdPenM3T3pzN1FVRlRRVlFzVlVGQlRWVXNVVUZCVGl4SFFVRnBRaXhaUVVGWk8wRkJRM3BDTEdWQlFVOHNWVUZEU0N4TFFVRkxhRU1zUTBGQlRDeERRVUZQYVVNc1QwRkJVQ3hGUVVSSExFZEJRMmRDTEVsQlJHaENMRWRCUlVnc1MwRkJTMmhETEVOQlFVd3NRMEZCVDJkRExFOUJRVkFzUlVGR1J5eEhRVVZuUWl4SlFVWm9RaXhIUVVkSUxFdEJRVXN2UWl4RFFVRk1MRU5CUVU4clFpeFBRVUZRTEVWQlNFY3NSMEZIWjBJc1NVRklhRUlzUjBGSlNDeExRVUZMT1VJc1EwRkJUQ3hEUVVGUE9FSXNUMEZCVUN4RlFVcEhMRWRCU1dkQ0xFZEJTblpDTzBGQlMwZ3NTMEZPUkRzN1FVRlJRVHM3T3pzN08wRkJUVUZZTEZWQlFVMVpMRWxCUVU0c1IwRkJZU3haUVVGWk8wRkJRM0pDTEdWQlFVOHNTMEZCU3psQ0xFbEJRVXdzUjBGQldTeFZRVUZ1UWp0QlFVTklMRXRCUmtRN1FVRkhRVHM3T3pzN096czdPenRCUVZWQmEwSXNWVUZCVFdFc1NVRkJUaXhIUVVGaExGVkJRVlZETEVkQlFWWXNSVUZCWlR0QlFVTjRRa0VzWTBGQlRTeERRVUZETEVOQlFVTkRMRWRCUVVkRExFbEJRVWdzUTBGQlVVTXNUVUZCVWl4RFFVRmxTQ3hIUVVGbUxFVkJRVzlDTEVOQlFYQkNMRVZCUVhWQ0xFZEJRWFpDTEVOQlFWSTdRVUZEUVN4aFFVRkxhRU1zU1VGQlRDeEhRVUZaTEVOQlFVVXNTMEZCUzBFc1NVRkJUQ3hIUVVGWkxGVkJRV0lzUjBGQk1rSm5ReXhIUVVFMVFpeE5RVUZ4UXl4RFFVRnFSRHRCUVVOQkxHVkJRVThzU1VGQlVEdEJRVU5JTEV0QlNrUTdRVUZMUVRzN096czdPMEZCVFVGa0xGVkJRVTFyUWl4SlFVRk9MRWRCUVdFc1dVRkJXVHRCUVVOeVFpeGxRVUZQTEVOQlFVTXNTMEZCUzNCRExFbEJRVXdzUjBGQldTeFZRVUZpTEV0QlFUUkNMRU5CUVc1RE8wRkJRMGdzUzBGR1JEdEJRVWRCT3pzN096czdPenM3TzBGQlZVRnJRaXhWUVVGTmJVSXNTVUZCVGl4SFFVRmhMRlZCUVZWRExFdEJRVllzUlVGQmFVSTdRVUZETVVKQkxHZENRVUZSTEVOQlFVTXNRMEZCUTB3c1IwRkJSME1zU1VGQlNDeERRVUZSUXl4TlFVRlNMRU5CUVdWSExFdEJRV1lzUlVGQmMwSXNRMEZCZEVJc1JVRkJlVUlzUjBGQmVrSXNRMEZCVmp0QlFVTkJMR0ZCUVV0MFF5eEpRVUZNTEVkQlFWa3NRMEZCUlN4TFFVRkxRU3hKUVVGTUxFZEJRVmtzVlVGQllpeEhRVUUwUW5ORExGTkJRVk1zUTBGQmRFTXNUVUZCT0VNc1EwRkJNVVE3UVVGRFFTeGxRVUZQTEVsQlFWQTdRVUZEU0N4TFFVcEVPMEZCUzBFN096czdPenRCUVUxQmNFSXNWVUZCVFhGQ0xFbEJRVTRzUjBGQllTeFpRVUZaTzBGQlEzSkNMR1ZCUVU4c1EwRkJReXhMUVVGTGRrTXNTVUZCVEN4SFFVRlpMRlZCUVdJc1MwRkJORUlzUlVGQmJrTTdRVUZEU0N4TFFVWkVPMEZCUjBFN096czdPenM3T3pzN1FVRlZRV3RDTEZWQlFVMXpRaXhKUVVGT0xFZEJRV0VzVlVGQlZVTXNTVUZCVml4RlFVRm5RanRCUVVONlFrRXNaVUZCVHl4RFFVRkRMRU5CUVVOU0xFZEJRVWRETEVsQlFVZ3NRMEZCVVVNc1RVRkJVaXhEUVVGbFRTeEpRVUZtTEVWQlFYRkNMRU5CUVhKQ0xFVkJRWGRDTEVkQlFYaENMRU5CUVZRN1FVRkRRU3hoUVVGTGVrTXNTVUZCVEN4SFFVRlpMRU5CUVVVc1MwRkJTMEVzU1VGQlRDeEhRVUZaTEZWQlFXSXNSMEZCTkVKNVF5eFJRVUZSTEVWQlFYSkRMRTFCUVRoRExFTkJRVEZFTzBGQlEwRXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRktSRHRCUVV0Qk96czdPenM3UVVGTlFYWkNMRlZCUVUxM1FpeEpRVUZPTEVkQlFXRXNXVUZCV1R0QlFVTnlRaXhsUVVGUExFTkJRVU1zUzBGQlN6RkRMRWxCUVV3c1IwRkJXU3hWUVVGaUxFMUJRVFpDTEVWQlFYQkRPMEZCUTBnc1MwRkdSRHRCUVVkQk96czdPenM3T3pzN08wRkJWVUZyUWl4VlFVRk5lVUlzU1VGQlRpeEhRVUZoTEZWQlFWVkRMRXRCUVZZc1JVRkJhVUk3UVVGRE1VSkJMR2RDUVVGUkxFTkJRVU1zUTBGQlExZ3NSMEZCUjBNc1NVRkJTQ3hEUVVGUlF5eE5RVUZTTEVOQlFXVlRMRXRCUVdZc1JVRkJjMElzUTBGQmRFSXNSVUZCZVVJc1IwRkJla0lzUTBGQlZqdEJRVU5CTEdGQlFVczFReXhKUVVGTUxFZEJRVmtzUTBGQlJTeExRVUZMUVN4SlFVRk1MRWRCUVZrc1ZVRkJZaXhIUVVFMFFqUkRMRk5CUVZNc1JVRkJkRU1zVFVGQkswTXNRMEZCTTBRN1FVRkRRU3hsUVVGUExFbEJRVkE3UVVGRFNDeExRVXBFT3p0QlFVMUJNVUlzVlVGQlRUSkNMRk5CUVU0c1IwRkJhMElzVlVGQlZVUXNTMEZCVml4RlFVRnBRanRCUVVNdlFpeGhRVUZMTlVNc1NVRkJUQ3hIUVVGWkxFTkJRVVVzUzBGQlMwRXNTVUZCVEN4SFFVRlpMRlZCUVdJc1IwRkJORUkwUXl4VFFVRlRMRVZCUVhSRExFMUJRU3RETEVOQlFUTkVPMEZCUTBnc1MwRkdSRHM3UVVGSlFXeEVMRTlCUVVkdlJDeE5RVUZJTEVOQlFWVTFRaXhMUVVGV0xFVkJRV2xDTEVkQlFXcENMRVZCUVhOQ1FTeE5RVUZOV1N4SlFVRTFRaXhGUVVGclExb3NUVUZCVFdFc1NVRkJlRU1zUlVGQk9FTXNTVUZCT1VNN1FVRkRRWEpETEU5QlFVZHZSQ3hOUVVGSUxFTkJRVlUxUWl4TFFVRldMRVZCUVdsQ0xFZEJRV3BDTEVWQlFYTkNRU3hOUVVGTmEwSXNTVUZCTlVJc1JVRkJhME5zUWl4TlFVRk5iVUlzU1VGQmVFTXNSVUZCT0VNc1NVRkJPVU03UVVGRFFUTkRMRTlCUVVkdlJDeE5RVUZJTEVOQlFWVTFRaXhMUVVGV0xFVkJRV2xDTEVkQlFXcENMRVZCUVhOQ1FTeE5RVUZOY1VJc1NVRkJOVUlzUlVGQmEwTnlRaXhOUVVGTmMwSXNTVUZCZUVNc1JVRkJPRU1zU1VGQk9VTTdRVUZEUVRsRExFOUJRVWR2UkN4TlFVRklMRU5CUVZVMVFpeExRVUZXTEVWQlFXbENMRWRCUVdwQ0xFVkJRWE5DUVN4TlFVRk5kMElzU1VGQk5VSXNSVUZCYTBONFFpeE5RVUZOZVVJc1NVRkJlRU1zUlVGQk9FTXNTVUZCT1VNN08wRkJSVUU3T3pzN096czdPMEZCVVVGNlFpeFZRVUZOTmtJc1MwRkJUaXhIUVVGakxGVkJRVmRETEVkQlFWZ3NSVUZCYVVJN1FVRkRNMElzV1VGQlMwRXNVVUZCVVN4TlFVRmlMRVZCUVhOQ08wRkJRMnhDTEcxQ1FVRlBMRmRCUTBZc1MwRkJTM0JFTEVOQlFVd3NSMEZCVXl4RFFVUlFMRWxCUTJFc1IwRkVZaXhKUVVWR0xFdEJRVXRETEVOQlFVd3NSMEZCVXl4RFFVWlFMRWxCUldFc1IwRkdZaXhKUVVkR0xFdEJRVXRETEVOQlFVd3NSMEZCVXl4RFFVaFFMRWxCUjJFc1IwRklZaXhIUVVsSUxFTkJRVU1zUzBGQlMwTXNRMEZCVEN4SFFVRlRMRWRCUVZZc1JVRkJaVGhDTEU5QlFXWXNRMEZCZFVJc1EwRkJka0lzUTBGS1J5eEhRVWw1UWl4SFFVcG9RenRCUVUxSUxGTkJVRVFzVFVGUlN5eEpRVUZMYlVJc1VVRkJVU3hMUVVGaUxFVkJRWEZDTzBGQlEzUkNMRzFDUVVGUExGVkJRMFlzUzBGQlMzQkVMRU5CUVV3c1IwRkJVeXhEUVVSUUxFbEJRMkVzUjBGRVlpeEpRVVZHTEV0QlFVdERMRU5CUVV3c1IwRkJVeXhEUVVaUUxFbEJSV0VzUjBGR1lpeEpRVWRHTEV0QlFVdERMRU5CUVV3c1IwRkJVeXhEUVVoUUxFbEJSMkVzUjBGSWNFSTdRVUZMU0N4VFFVNUpMRTFCVDBFN1FVRkRSQ3h0UWtGQlR5eE5RVUZOTEV0QlFVdHRSQ3hMUVVGTUxFTkJRVmRFTEVkQlFWZ3NRMEZCWWp0QlFVTklPMEZCUTBvc1MwRnVRa1E3TzBGQmNVSkJPenM3T3pzN096czdPenRCUVZkQk9VSXNWVUZCVFdkRExFOUJRVTRzUjBGQlowSXNWVUZCVlVNc1UwRkJWaXhGUVVGeFFqdEJRVU5xUTBFc2IwSkJRV0ZCTEZWQlFWVkRMRTlCUVZZc1EwRkJhMElzUjBGQmJFSXNUVUZCTWtJc1EwRkJOVUlzUjBGQmFVTkVMRlZCUVZWRkxGTkJRVllzUTBGQmIwSXNRMEZCY0VJc1EwRkJha01zUjBGQk1FUkdMRk5CUVhSRk8wRkJRMEVzV1VGQlNYWkVMRWxCUVVrd1JDeFRRVUZUU0N4VlFVRlZTU3hOUVVGV0xFTkJRV2xDTEVOQlFXcENMRVZCUVc5Q0xFTkJRWEJDTEVOQlFWUXNSVUZCYVVNc1JVRkJha01zUzBGQmQwTXNRMEZCYUVRN1FVRkRRU3haUVVGSk1VUXNTVUZCU1hsRUxGTkJRVk5JTEZWQlFWVkpMRTFCUVZZc1EwRkJhVUlzUTBGQmFrSXNSVUZCYjBJc1EwRkJjRUlzUTBGQlZDeEZRVUZwUXl4RlFVRnFReXhMUVVGM1F5eERRVUZvUkR0QlFVTkJMRmxCUVVsNlJDeEpRVUZKZDBRc1UwRkJVMGdzVlVGQlZVa3NUVUZCVml4RFFVRnBRaXhEUVVGcVFpeEZRVUZ2UWl4RFFVRndRaXhEUVVGVUxFVkJRV2xETEVWQlFXcERMRXRCUVhkRExFTkJRV2hFTzBGQlEwRXNXVUZCU1hoRUxFbEJRVWwxUkN4VFFVRlRTQ3hWUVVGVlNTeE5RVUZXTEVOQlFXbENMRU5CUVdwQ0xFVkJRVzlDTEVOQlFYQkNMRU5CUVZRc1JVRkJhVU1zUlVGQmFrTXNTMEZCZDBNc1IwRkJhRVE3UVVGRFFTeGhRVUZMZGtRc1NVRkJUQ3hIUVVGWkxFTkJRVVZFTEV0QlFVY3NSVUZCU2l4TFFVRlpMRU5CUVdJc1MwRkJiVUpFTEV0QlFVY3NSVUZCZEVJc1MwRkJOa0pFTEV0QlFVY3NRMEZCYUVNc1NVRkJjVU5FTEVOQlFXcEVPMEZCUTBFc1pVRkJUeXhKUVVGUU8wRkJRMGdzUzBGU1JEczdRVUZWUVRzN096czdPenM3T3pzN08wRkJXVUZ6UWl4VlFVRk5LMElzUzBGQlRpeEhRVUZqTEZWQlFWZFBMRWRCUVZnc1JVRkJhVUk3UVVGRE0wSXNXVUZCU1VNc1UwRkJVeXhIUVVGaU8wRkJRMEVzV1VGQlNVTXNUVUZCVFN4RFFVTk9MRU5CUVVNc1MwRkJTemxFTEVOQlFVd3NSMEZCVXl4RlFVRlVMRWRCUVdNMlJDeE5RVUZrTEVkQlFYVkNMRVZCUVhoQ0xFbEJRVGhDTEVOQlFVTXNTMEZCU3pkRUxFTkJRVXdzUjBGQlV5eERRVUZXTEVWQlFXRm5ReXhSUVVGaUxFTkJRWE5DTEVWQlFYUkNMRU5CUkhoQ0xFVkJSVTRzUTBGQlF5eExRVUZMTDBJc1EwRkJUQ3hIUVVGVExFVkJRVlFzUjBGQll6UkVMRTFCUVdRc1IwRkJkVUlzUlVGQmVFSXNTVUZCT0VJc1EwRkJReXhMUVVGTE5VUXNRMEZCVEN4SFFVRlRMRU5CUVZZc1JVRkJZU3RDTEZGQlFXSXNRMEZCYzBJc1JVRkJkRUlzUTBGR2VFSXNSVUZIVGl4RFFVRkRMRXRCUVVzNVFpeERRVUZNTEVkQlFWTXNSVUZCVkN4SFFVRmpNa1FzVFVGQlpDeEhRVUYxUWl4RlFVRjRRaXhKUVVFNFFpeERRVUZETEV0QlFVc3pSQ3hEUVVGTUxFZEJRVk1zUTBGQlZpeEZRVUZoT0VJc1VVRkJZaXhEUVVGelFpeEZRVUYwUWl4RFFVaDRRaXhEUVVGV08wRkJTMEVzV1VGQlNTdENMRWxCUVVrc1EwRkJReXhEUVVGVU8wRkJRMEVzV1VGQlMwZ3NVVUZCVVN4TlFVRmlMRVZCUVhOQ08wRkJRMnhDTEdsQ1FVRk5SeXhKUVVGSkxFTkJRVllzUlVGQllVRXNTVUZCU1VRc1NVRkJTVVVzVFVGQmNrSXNSVUZCTmtJc1JVRkJSVVFzUTBGQkwwSXNSVUZCYlVNN1FVRkRMMElzYjBKQlFVdEVMRWxCUVVsRExFTkJRVW9zUlVGQlQwTXNUVUZCVUN4SFFVRm5RaXhEUVVGeVFpeEZRVUY1UWp0QlFVTnlRa1lzZDBKQlFVbERMRU5CUVVvc1NVRkJVMFFzU1VGQlNVTXNRMEZCU2l4RlFVRlBMRU5CUVZBc1EwRkJWRHRCUVVOSU8wRkJRMG83UVVGRFNpeFRRVTVFTEUxQlQwc3NTVUZCUzBnc1VVRkJVU3hUUVVGaUxFVkJRWGxDTzBGQlF6RkNMR2xDUVVGTlJ5eEpRVUZKTEVOQlFWWXNSVUZCWVVFc1NVRkJTVVFzU1VGQlNVVXNUVUZCY2tJc1JVRkJOa0lzUlVGQlJVUXNRMEZCTDBJc1JVRkJiVU03UVVGREwwSXNiMEpCUVV0RUxFbEJRVWxETEVOQlFVb3NSVUZCVDBNc1RVRkJVQ3hMUVVGclFpeERRVUYyUWl4RlFVRXlRanRCUVVOMlFrWXNkMEpCUVVsRExFTkJRVW9zU1VGQlV5eE5RVUZOUkN4SlFVRkpReXhEUVVGS0xFTkJRV1k3UVVGRFNEdEJRVU5LTzBGQlEwb3NVMEZPU1N4TlFVOUJMRWxCUVVsSUxGRkJRVkVzVjBGQldpeEZRVUY1UWp0QlFVTXhRa1VzWjBKQlFVbEhMRWxCUVVvc1EwRkJVeXhEUVVGRExFdEJRVXM1UkN4RFFVRk1MRWRCUVZNc1JVRkJWQ3hIUVVGak1FUXNUVUZCWkN4SFFVRjFRaXhGUVVGNFFpeEpRVUU0UWl4RFFVRkRMRXRCUVVzeFJDeERRVUZNTEVkQlFWTXNRMEZCVml4RlFVRmhOa0lzVVVGQllpeERRVUZ6UWl4RlFVRjBRaXhEUVVGMlF6dEJRVU5JTzBGQlEwUXNaVUZCVHpoQ0xFbEJRVWxKTEVsQlFVb3NRMEZCVXl4RlFVRlVMRU5CUVZBN1FVRkRTQ3hMUVRGQ1JEczdRVUUwUWtFN096czdPenM3T3p0QlFWTkJOVU1zVlVGQlRUWkRMRlZCUVU0c1IwRkJiVUlzV1VGQldUdEJRVU16UWl4bFFVRlBMRXRCUVVzdlJDeEpRVUZNTEVkQlFWa3NWVUZCYmtJN1FVRkRTQ3hMUVVaRU96dEJRVWxCT3pzN096czdPenM3T3pzN08wRkJZVUZyUWl4VlFVRk5PRU1zVDBGQlRpeEhRVUZuUWl4VlFVRlhReXhEUVVGWUxFVkJRV05ETEVOQlFXUXNSVUZCYVVKRExFTkJRV3BDTEVWQlFYRkNPMEZCUTJwRExGbEJRVWwyUlN4RFFVRktMRVZCUVU5RExFTkJRVkFzUlVGQlZVTXNRMEZCVmp0QlFVTkJMRmxCUVVsdlJTeE5RVUZOTEVOQlFWWXNSVUZCWVR0QlFVTlVkRVVzWjBKQlFVbERMRWxCUVVsRExFbEJRVWx4UlN4RFFVRmFPMEZCUTBnc1UwRkdSQ3hOUVVkTE8wRkJRMFFzWjBKQlFVbEJMRTFCUVUwc1EwRkJWaXhGUVVGaE8wRkJRMVIyUlN4dlFrRkJTVU1zU1VGQlNVTXNTVUZCU1N4RFFVRmFPMEZCUTBnc1lVRkdSQ3hOUVVkTE8wRkJRMFFzYjBKQlFVbHRSU3hOUVVGTkxFTkJRVllzUlVGQllVRXNTVUZCU1N4RFFVRktPMEZCUTJKQkxIRkNRVUZMTEVOQlFVdzdRVUZEUVVNc2IwSkJRVWxCTEVOQlFVbzdRVUZEUVVNc2IwSkJRVWxCTEVOQlFVbzdRVUZEUVN4dlFrRkJTVklzU1VGQlNWTXNTMEZCUzBNc1MwRkJUQ3hEUVVGWFNpeERRVUZZTEVOQlFWSTdRVUZEUVN4dlFrRkJTVXNzU1VGQlNVd3NTVUZCU1U0c1EwRkJXanRCUVVOQkxHOUNRVUZKV1N4SlFVRkpTaXhMUVVGTExFbEJRVWxFTEVOQlFWUXNRMEZCVWp0QlFVTkJMRzlDUVVGSlRTeEpRVUZKVEN4TFFVRkxMRWxCUVV0RUxFbEJRVWxKTEVOQlFXUXNRMEZCVWp0QlFVTkJMRzlDUVVGSlJ5eEpRVUZKVGl4TFFVRkxMRWxCUVV0RUxFdEJRVXNzU1VGQlNVa3NRMEZCVkN4RFFVRldMRU5CUVZJN1FVRkRRU3gzUWtGQlVWZ3NRMEZCVWp0QlFVTkpMSGxDUVVGTExFTkJRVXc3UVVGRFNTOUVMRFJDUVVGSmRVVXNRMEZCU2p0QlFVTkJkRVVzTkVKQlFVazBSU3hEUVVGS08wRkJRMEV6UlN3MFFrRkJTWGxGTEVOQlFVbzdRVUZEUVRzN1FVRkZTaXg1UWtGQlN5eERRVUZNTzBGQlEwa3pSU3cwUWtGQlNUUkZMRU5CUVVvN1FVRkRRVE5GTERSQ1FVRkpjMFVzUTBGQlNqdEJRVU5CY2tVc05FSkJRVWw1UlN4RFFVRktPMEZCUTBFN08wRkJSVW9zZVVKQlFVc3NRMEZCVER0QlFVTkpNMFVzTkVKQlFVa3lSU3hEUVVGS08wRkJRMEV4UlN3MFFrRkJTWE5GTEVOQlFVbzdRVUZEUVhKRkxEUkNRVUZKTWtVc1EwRkJTanRCUVVOQk96dEJRVVZLTEhsQ1FVRkxMRU5CUVV3N1FVRkRTVGRGTERSQ1FVRkpNa1VzUTBGQlNqdEJRVU5CTVVVc05FSkJRVWt5UlN4RFFVRktPMEZCUTBFeFJTdzBRa0ZCU1hGRkxFTkJRVW83UVVGRFFUczdRVUZGU2l4NVFrRkJTeXhEUVVGTU8wRkJRMGwyUlN3MFFrRkJTVFpGTEVOQlFVbzdRVUZEUVRWRkxEUkNRVUZKTUVVc1EwRkJTanRCUVVOQmVrVXNORUpCUVVseFJTeERRVUZLTzBGQlEwRTdPMEZCUlVvc2VVSkJRVXNzUTBGQlREdEJRVU5KZGtVc05FSkJRVWwxUlN4RFFVRktPMEZCUTBGMFJTdzBRa0ZCU1RCRkxFTkJRVW83UVVGRFFYcEZMRFJDUVVGSk1FVXNRMEZCU2p0QlFVTkJPMEZCYmtOU08wRkJjVU5JTzBGQlEwbzdRVUZEUkRWRkxHRkJRVXNzUjBGQlREdEJRVU5CUXl4aFFVRkxMRWRCUVV3N1FVRkRRVU1zWVVGQlN5eEhRVUZNTzBGQlEwRXNZVUZCUzBVc1NVRkJUQ3hIUVVGWkxFTkJRVVVzUzBGQlMwUXNRMEZCVEN4SlFVRlJMRVZCUVZRc1MwRkJhVUlzUTBGQmJFSXNTMEZCZDBKRUxFdEJRVWNzUlVGQk0wSXNTMEZCYTBORUxFdEJRVWNzUTBGQmNrTXNTVUZCTUVORUxFTkJRWFJFTzBGQlEwRXNaVUZCVHl4SlFVRlFPMEZCUTBnc1MwRXZSRVE3TzBGQmFVVkJPenM3T3pzN096czdRVUZUUVhOQ0xGVkJRVTEzUkN4TFFVRk9MRWRCUVdNc1dVRkJXVHRCUVVOMFFpeFpRVUZKT1VVc1NVRkJTU3hMUVVGTFFTeERRVUZNTEVkQlFWTXNSMEZCYWtJN1FVRkRRU3haUVVGSlF5eEpRVUZKTEV0QlFVdEJMRU5CUVV3c1IwRkJVeXhIUVVGcVFqdEJRVU5CTEZsQlFVbERMRWxCUVVrc1MwRkJTMEVzUTBGQlRDeEhRVUZUTEVkQlFXcENPMEZCUTBFc1dVRkJTVFpGTEUxQlFVMHNSVUZCUlZZc1IwRkJSeXhEUVVGTUxFVkJRVkZETEVkQlFVY3NRMEZCV0N4RlFVRmpReXhIUVVGSExFTkJRV3BDTEVWQlFWWTdRVUZEUVN4WlFVRkpVeXhOUVVGTlVpeExRVUZMVVN4SFFVRk1MRU5CUVZOb1JpeERRVUZVTEVWQlFWZERMRU5CUVZnc1JVRkJZVU1zUTBGQllpeERRVUZXTzBGQlEwRXNXVUZCU1N0RkxFMUJRVTFVTEV0QlFVdFRMRWRCUVV3c1EwRkJVMnBHTEVOQlFWUXNSVUZCVjBNc1EwRkJXQ3hGUVVGaFF5eERRVUZpTEVOQlFWWTdRVUZEUVN4WlFVRkpaMFlzVVVGQlVTeERRVUZhTzBGQlEwRklMRmxCUVVsU0xFTkJRVW9zUjBGQlVWTXNSMEZCVWp0QlFVTkJSQ3haUVVGSlZDeERRVUZLTEVkQlFWRlZMRTFCUVUwc1EwRkJRMEVzVFVGQlRVTXNSMEZCVUN4SlFVRmpSQ3hIUVVGd1FpeEhRVUV3UWl4RFFVRnNRenRCUVVOQkxGbEJRVWtzUTBGQlEwUXNTVUZCU1ZRc1EwRkJWQ3hGUVVGWlV5eEpRVUZKVml4RFFVRktMRWRCUVZFc1EwRkJVaXhEUVVGYUxFdEJRMHM3UVVGRFJHRXNiMEpCUVZGR0xFMUJRVTFETEVkQlFXUTdRVUZEUVN4blFrRkJTV3BHTEUxQlFVMW5SaXhIUVVGV0xFVkJRV1ZFTEVsQlFVbFdMRU5CUVVvc1IwRkJVU3hEUVVGRGNFVXNTVUZCU1VNc1EwRkJUQ3hKUVVGVlowWXNTMEZCYkVJc1EwRkJaaXhMUVVOTExFbEJRVWxxUml4TlFVRk5LMFVzUjBGQlZpeEZRVUZsUkN4SlFVRkpWaXhEUVVGS0xFZEJRVkVzU1VGQlNTeERRVUZEYmtVc1NVRkJTVVlzUTBGQlRDeEpRVUZWYTBZc1MwRkJkRUlzUTBGQlppeExRVU5CU0N4SlFVRkpWaXhEUVVGS0xFZEJRVkVzU1VGQlNTeERRVUZEY2tVc1NVRkJTVU1zUTBGQlRDeEpRVUZWYVVZc1MwRkJkRUk3UVVGRFRFZ3NaMEpCUVVsV0xFTkJRVW9zU1VGQlV5eERRVUZVTzBGQlEwRXNaMEpCUVVsVkxFbEJRVWxXTEVOQlFVb3NSMEZCVVN4RFFVRmFMRVZCUVdWVkxFbEJRVWxXTEVOQlFVb3NTVUZCVXl4SFFVRlVPMEZCUTJ4Q08wRkJRMFFzWlVGQlQxVXNSMEZCVUR0QlFVTklMRXRCY0VKRU96dEJRWE5DUVhwRUxGVkJRVTAyUkN4SFFVRk9MRWRCUVZrc1ZVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTjZRaXhaUVVGSlFTeE5RVUZOYUVZc1NVRkJWaXhGUVVGblFqdEJRVU5hTEdsQ1FVRkxRU3hKUVVGTUxFZEJRVmxuUml4TlFVRk5hRVlzU1VGQmJFSTdRVUZEU0N4VFFVWkVMRTFCUjBzN1FVRkRSQ3hwUWtGQlMwb3NRMEZCVEN4SFFVRlRiMFlzVFVGQlRYQkdMRU5CUVdZN1FVRkRRU3hwUWtGQlMwTXNRMEZCVEN4SFFVRlRiVVlzVFVGQlRXNUdMRU5CUVdZN1FVRkRRU3hwUWtGQlMwTXNRMEZCVEN4SFFVRlRhMFlzVFVGQlRXeEdMRU5CUVdZN1FVRkRRU3hwUWtGQlMwTXNRMEZCVEN4SFFVRlRhVVlzVFVGQlRXcEdMRU5CUVdZN1FVRkRTRHRCUVVOS0xFdEJWa1E3TzBGQldVRXNWMEZCVDBvc1MwRkJVRHRCUVVOSUxFTkJibWxDVnl4RlFVRmFPenRCUVhGcFFrRnpReXhIUVVGSGRFTXNTMEZCU0N4SFFVRlhRU3hMUVVGWU96dEJRVVZCT3pzN08wRkJTVUU3T3pzN096czdPenM3T3pzN096czdPMEZCYVVKQmMwTXNSMEZCUnl0RExFdEJRVWdzUjBGQlZ5eFRRVUZUUVN4TFFVRlVMRU5CUVdkQ2NFWXNRMEZCYUVJc1JVRkJiVUpETEVOQlFXNUNMRVZCUVhOQ1F5eERRVUYwUWl4RlFVRjVRa01zUTBGQmVrSXNSVUZCTkVJN1FVRkRia01zVVVGQlNTeFBRVUZQU0N4RFFVRlFMRXRCUVdFc1VVRkJha0lzUlVGQk1rSTdRVUZEZGtJc1dVRkJTWEZHTEZOQlFWTXNTVUZCU1doRUxFZEJRVWQwUXl4TFFVRlFMRVZCUVdJN1FVRkRRU3hsUVVGUGMwWXNUMEZCVHk5Q0xFOUJRVkFzUTBGQlpYUkVMRU5CUVdZc1EwRkJVRHRCUVVOSU8wRkJRMFFzVVVGQlNTeFJRVUZQUVN4RFFVRlFMSGxEUVVGUFFTeERRVUZRTEU5QlFXRXNVVUZCYWtJc1JVRkJNa0k3UVVGRGRrSXNaVUZCVHl4SlFVRkpjVU1zUjBGQlIzUkRMRXRCUVZBc1EwRkJZVU1zUlVGQlJVRXNRMEZCWml4RlFVRnJRa0VzUlVGQlJVTXNRMEZCY0VJc1JVRkJkVUpFTEVWQlFVVkZMRU5CUVhwQ0xFVkJRVFJDUml4RlFVRkZSeXhEUVVFNVFpeERRVUZRTzBGQlEwZzdRVUZEUkN4WFFVRlJMRWxCUVVsclF5eEhRVUZIZEVNc1MwRkJVQ3hEUVVGaFF5eERRVUZpTEVWQlFXZENReXhEUVVGb1FpeEZRVUZ0UWtNc1EwRkJia0lzUlVGQmMwSkRMRU5CUVhSQ0xFTkJRVkk3UVVGRFNDeERRVlJFT3p0QlFWZEJiVVlzVDBGQlQwTXNUMEZCVUN4SFFVRnBRbXhFTEVkQlFVZDBReXhMUVVGd1FpSXNJbVpwYkdVaU9pSmpiMnh2Y2k1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVE10TWpBeE5pQkRhSFZyYjI1bklGUmxZMmh1YjJ4dloybGxjeUJKYm1NdVhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNVGN0TWpBeE9DQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzVjY2x4dVhISmNiaUJvZEhSd2N6b3ZMM2QzZHk1amIyTnZjeTVqYjIwdlhISmNibHh5WEc0Z1VHVnliV2x6YzJsdmJpQnBjeUJvWlhKbFlua2daM0poYm5SbFpDd2dabkpsWlNCdlppQmphR0Z5WjJVc0lIUnZJR0Z1ZVNCd1pYSnpiMjRnYjJKMFlXbHVhVzVuSUdFZ1kyOXdlVnh5WEc0Z2IyWWdkR2hwY3lCemIyWjBkMkZ5WlNCaGJtUWdZWE56YjJOcFlYUmxaQ0JsYm1kcGJtVWdjMjkxY21ObElHTnZaR1VnS0hSb1pTQmNJbE52Wm5SM1lYSmxYQ0lwTENCaElHeHBiV2wwWldRc1hISmNiaUFnZDI5eWJHUjNhV1JsTENCeWIzbGhiSFI1TFdaeVpXVXNJRzV2YmkxaGMzTnBaMjVoWW14bExDQnlaWFp2WTJGaWJHVWdZVzVrSUc1dmJpMWxlR05zZFhOcGRtVWdiR2xqWlc1elpWeHlYRzRnZEc4Z2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOXNaV3g1SUhSdklHUmxkbVZzYjNBZ1oyRnRaWE1nYjI0Z2VXOTFjaUIwWVhKblpYUWdjR3hoZEdadmNtMXpMaUJaYjNVZ2MyaGhiR3hjY2x4dUlDQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEhKY2JpQWdkWE5sWkNCbWIzSWdaR1YyWld4dmNHbHVaeUJuWVcxbGN5NGdXVzkxSUdGeVpTQnViM1FnWjNKaGJuUmxaQ0IwYnlCd2RXSnNhWE5vTENCa2FYTjBjbWxpZFhSbExGeHlYRzRnSUhOMVlteHBZMlZ1YzJVc0lHRnVaQzl2Y2lCelpXeHNJR052Y0dsbGN5QnZaaUJEYjJOdmN5QkRjbVZoZEc5eUxseHlYRzVjY2x4dUlGUm9aU0J6YjJaMGQyRnlaU0J2Y2lCMGIyOXNjeUJwYmlCMGFHbHpJRXhwWTJWdWMyVWdRV2R5WldWdFpXNTBJR0Z5WlNCc2FXTmxibk5sWkN3Z2JtOTBJSE52YkdRdVhISmNiaUJZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM0Z2NtVnpaWEoyWlhNZ1lXeHNJSEpwWjJoMGN5QnViM1FnWlhod2NtVnpjMng1SUdkeVlXNTBaV1FnZEc4Z2VXOTFMbHh5WEc1Y2NseHVJRlJJUlNCVFQwWlVWMEZTUlNCSlV5QlFVazlXU1VSRlJDQmNJa0ZUSUVsVFhDSXNJRmRKVkVoUFZWUWdWMEZTVWtGT1ZGa2dUMFlnUVU1WklFdEpUa1FzSUVWWVVGSkZVMU1nVDFKY2NseHVJRWxOVUV4SlJVUXNJRWxPUTB4VlJFbE9SeUJDVlZRZ1RrOVVJRXhKVFVsVVJVUWdWRThnVkVoRklGZEJVbEpCVGxSSlJWTWdUMFlnVFVWU1EwaEJUbFJCUWtsTVNWUlpMRnh5WEc0Z1JrbFVUa1ZUVXlCR1QxSWdRU0JRUVZKVVNVTlZURUZTSUZCVlVsQlBVMFVnUVU1RUlFNVBUa2xPUmxKSlRrZEZUVVZPVkM0Z1NVNGdUazhnUlZaRlRsUWdVMGhCVEV3Z1ZFaEZYSEpjYmlCQlZWUklUMUpUSUU5U0lFTlBVRmxTU1VkSVZDQklUMHhFUlZKVElFSkZJRXhKUVVKTVJTQkdUMUlnUVU1WklFTk1RVWxOTENCRVFVMUJSMFZUSUU5U0lFOVVTRVZTWEhKY2JpQk1TVUZDU1V4SlZGa3NJRmRJUlZSSVJWSWdTVTRnUVU0Z1FVTlVTVTlPSUU5R0lFTlBUbFJTUVVOVUxDQlVUMUpVSUU5U0lFOVVTRVZTVjBsVFJTd2dRVkpKVTBsT1J5QkdVazlOTEZ4eVhHNGdUMVZVSUU5R0lFOVNJRWxPSUVOUFRrNUZRMVJKVDA0Z1YwbFVTQ0JVU0VVZ1UwOUdWRmRCVWtVZ1QxSWdWRWhGSUZWVFJTQlBVaUJQVkVoRlVpQkVSVUZNU1U1SFV5QkpUbHh5WEc0Z1ZFaEZJRk5QUmxSWFFWSkZMbHh5WEc0Z0tpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaTljY2x4dVhISmNiblpoY2lCV1lXeDFaVlI1Y0dVZ1BTQnlaWEYxYVhKbEtDY3VMM1poYkhWbExYUjVjR1VuS1R0Y2NseHVkbUZ5SUdweklEMGdjbVZ4ZFdseVpTZ25MaTR2Y0d4aGRHWnZjbTB2YW5NbktUdGNjbHh1WEhKY2JuWmhjaUJEYjJ4dmNpQTlJQ2htZFc1amRHbHZiaUFvS1NCN1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVYSEpjYmlBZ0lDQWdLaUJTWlhCeVpYTmxiblJoZEdsdmJpQnZaaUJTUjBKQklHTnZiRzl5Y3k1Y2NseHVJQ0FnSUNBcVhISmNiaUFnSUNBZ0tpQkZZV05vSUdOdmJHOXlJR052YlhCdmJtVnVkQ0JwY3lCaElHWnNiMkYwYVc1bklIQnZhVzUwSUhaaGJIVmxJSGRwZEdnZ1lTQnlZVzVuWlNCbWNtOXRJREFnZEc4Z01qVTFMbHh5WEc0Z0lDQWdJQ3BjY2x4dUlDQWdJQ0FxSUZsdmRTQmpZVzRnWVd4emJ5QjFjMlVnZEdobElHTnZiblpsYm1sbGJtTmxJRzFsZEdodlpDQjdleU5qY205emMweHBibXNnWENKall5OWpiMnh2Y2pwdFpYUm9iMlJjSW4xOVkyTXVZMjlzYjNKN2V5OWpjbTl6YzB4cGJtdDlmU0IwYnlCamNtVmhkR1VnWVNCdVpYY2dRMjlzYjNJdVhISmNiaUFnSUNBZ0tseHlYRzRnSUNBZ0lDb2dJU042YUZ4eVhHNGdJQ0FnSUNvZ1kyTXVRMjlzYjNJZzU1U281THFPNktHbzU2UzY2YUtjNklteTQ0Q0NYSEpjYmlBZ0lDQWdLbHh5WEc0Z0lDQWdJQ29nNWE2RDVZeUY1WkNySUZKSFFrRWc1WnViNUxpcTVMdWw1cld1NTRLNTVwV3c1TCtkNWEyWTU1cUU2YUtjNklteTVZaUc2WWVQNzd5TTVxK1A1TGlxNTVxRTVZQzg2WU85NVp5b0lEQWc1WWl3SURJMU5TRGt1WXZwbDdUamdJSmNjbHh1SUNBZ0lDQXFYSEpjYmlBZ0lDQWdLaURtZ3Fqa3VaL2xqNi9rdTZYcGdKcm92NGZrdmIvbmxLZ2dlM3NqWTNKdmMzTk1hVzVySUZ3aVkyTXZZMjlzYjNJNmJXVjBhRzlrWENKOWZXTmpMbU52Ykc5eWUzc3ZZM0p2YzNOTWFXNXJmWDBnNTVxRTVMNi81bzIzNXBhNTVyT1Y1cDJsNVlpYjVidTY1TGlBNUxpcTVwYXc1NXFFSUVOdmJHOXk0NENDWEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1FHTnNZWE56SUVOdmJHOXlYSEpjYmlBZ0lDQWdLaUJBWlhoMFpXNWtjeUJXWVd4MVpWUjVjR1ZjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHTnZibk4wY25WamRHOXlYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXM0k5TUYwZ0xTQnlaV1FnWTI5dGNHOXVaVzUwSUc5bUlIUm9aU0JqYjJ4dmNpd2daR1ZtWVhWc2RDQjJZV3gxWlNCcGN5QXdMbHh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRuUFRCZElDMGdaM0psWlc0Z1kyOXRjRzl1Wlc1MElHOW1JSFJvWlNCamIyeHZjaXdnWkdWbWRXRnNkQ0IyWVd4MVpTQnBjeUF3TGx4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0aVBUQmRJQzBnWW14MVpTQmpiMjF3YjI1bGJuUWdiMllnZEdobElHTnZiRzl5TENCa1pXWmhkV3gwSUhaaGJIVmxJR2x6SURBdVhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ1cyRTlNalUxWFNBdElHRnNjR2hoSUdOdmJYQnZibVZ1ZENCdlppQjBhR1VnWTI5c2IzSXNJR1JsWm1GMWJIUWdkbUZzZFdVZ2FYTWdNalUxTGx4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCbWRXNWpkR2x2YmlCRGIyeHZjaWdnY2l3Z1p5d2dZaXdnWVNBcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RIbHdaVzltSUhJZ1BUMDlJQ2R2WW1wbFkzUW5LU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCeUxtYzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHSWdQU0J5TG1JN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdFZ1BTQnlMbUU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSElnUFNCeUxuSTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lISWdQU0J5SUh4OElEQTdYSEpjYmlBZ0lDQWdJQ0FnWnlBOUlHY2dmSHdnTUR0Y2NseHVJQ0FnSUNBZ0lDQmlJRDBnWWlCOGZDQXdPMXh5WEc0Z0lDQWdJQ0FnSUdFZ1BTQjBlWEJsYjJZZ1lTQTlQVDBnSjI1MWJXSmxjaWNnUHlCaElEb2dNalUxTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNaaGJDQTlJQ2dvWVR3OE1qUXBJRDQrUGlBd0tTQXJJQ2hpUER3eE5pa2dLeUFvWnp3OE9Da2dLeUJ5TzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYW5NdVpYaDBaVzVrS0VOdmJHOXlMQ0JXWVd4MVpWUjVjR1VwTzF4eVhHNGdJQ0FnY21WeGRXbHlaU2duTGk0dmNHeGhkR1p2Y20wdlEwTkRiR0Z6Y3ljcExtWmhjM1JFWldacGJtVW9KMk5qTGtOdmJHOXlKeXdnUTI5c2IzSXNJSHR5T2lBd0xDQm5PaUF3TENCaU9pQXdMQ0JoT2lBeU5UVjlLVHRjY2x4dVhISmNiaUFnSUNCMllYSWdSR1ZtWVhWc2RFTnZiRzl5Y3lBOUlIdGNjbHh1SUNBZ0lDQWdJQ0F2THlCamIyeHZjam9nVzNJc0lHY3NJR0lzSUdGZFhISmNiaUFnSUNBZ0lDQWdMeW9xWEhKY2JpQWdJQ0FnSUNBZ0lDb2dJU05sYmlCVGIyeHBaQ0IzYUdsMFpTd2dVa2RDUVNCcGN5QmJNalUxTENBeU5UVXNJREkxTlN3Z01qVTFYUzVjY2x4dUlDQWdJQ0FnSUNBZ0tpQWhJM3BvSU9lNnIrZVp2ZWlKc3UrOGpGSkhRa0VnNXBpdklGc3lOVFVzSURJMU5Td2dNalUxTENBeU5UVmQ0NENDWEhKY2JpQWdJQ0FnSUNBZ0lDb2dRSEJ5YjNCbGNuUjVJRmRJU1ZSRlhISmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlME52Ykc5eWZWeHlYRzRnSUNBZ0lDQWdJQ0FxSUVCemRHRjBhV05jY2x4dUlDQWdJQ0FnSUNBZ0tpOWNjbHh1SUNBZ0lDQWdJQ0JYU0VsVVJUb2dJQ0FnSUNCYk1qVTFMQ0F5TlRVc0lESTFOU3dnTWpVMVhTeGNjbHh1SUNBZ0lDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBZ0lDQWdLaUFoSTJWdUlGTnZiR2xrSUdKc1lXTnJMQ0JTUjBKQklHbHpJRnN3TENBd0xDQXdMQ0F5TlRWZExseHlYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c1N3F2NmJ1UjZJbXk3N3lNVWtkQ1FTRG1tSzhnV3pBc0lEQXNJREFzSURJMU5WM2pnSUpjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dRa3hCUTB0Y2NseHVJQ0FnSUNBZ0lDQWdLaUJBZEhsd1pTQjdRMjlzYjNKOVhISmNiaUFnSUNBZ0lDQWdJQ29nUUhOMFlYUnBZMXh5WEc0Z0lDQWdJQ0FnSUNBcUwxeHlYRzRnSUNBZ0lDQWdJRUpNUVVOTE9pQWdJQ0FnSUZzd0xDQXdMQ0F3TENBeU5UVmRMRnh5WEc0Z0lDQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdWSEpoYm5Od1lYSmxiblFzSUZKSFFrRWdhWE1nV3pBc0lEQXNJREFzSURCZExseHlYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c2WUNQNXBpTzc3eU1Va2RDUVNEbW1LOGdXekFzSURBc0lEQXNJREJkNDRDQ1hISmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUZSU1FVNVRVRUZTUlU1VVhISmNiaUFnSUNBZ0lDQWdJQ29nUUhSNWNHVWdlME52Ykc5eWZWeHlYRzRnSUNBZ0lDQWdJQ0FxSUVCemRHRjBhV05jY2x4dUlDQWdJQ0FnSUNBZ0tpOWNjbHh1SUNBZ0lDQWdJQ0JVVWtGT1UxQkJVa1ZPVkRwYk1Dd2dNQ3dnTUN3Z01GMHNYSEpjYmlBZ0lDQWdJQ0FnTHlvcVhISmNiaUFnSUNBZ0lDQWdJQ29nSVNObGJpQkhjbVY1TENCU1IwSkJJR2x6SUZzeE1qY3VOU3dnTVRJM0xqVXNJREV5Tnk0MVhTNWNjbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9JT2VCc09pSnN1KzhqRkpIUWtFZzVwaXZJRnN4TWpjdU5Td2dNVEkzTGpVc0lERXlOeTQxWGVPQWdseHlYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCSFVrRlpYSEpjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTBOdmJHOXlmVnh5WEc0Z0lDQWdJQ0FnSUNBcUlFQnpkR0YwYVdOY2NseHVJQ0FnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnSUNCSFVrRlpPaUFnSUNBZ0lDQmJNVEkzTGpVc0lERXlOeTQxTENBeE1qY3VOVjBzWEhKY2JpQWdJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJUYjJ4cFpDQnlaV1FzSUZKSFFrRWdhWE1nV3pJMU5Td2dNQ3dnTUYwdVhISmNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG51cS9udXFMb2liTHZ2SXhTUjBKQklPYVlyeUJiTWpVMUxDQXdMQ0F3WGVPQWdseHlYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCU1JVUmNjbHh1SUNBZ0lDQWdJQ0FnS2lCQWRIbHdaU0I3UTI5c2IzSjlYSEpjYmlBZ0lDQWdJQ0FnSUNvZ1FITjBZWFJwWTF4eVhHNGdJQ0FnSUNBZ0lDQXFMMXh5WEc0Z0lDQWdJQ0FnSUZKRlJEb2dJQ0FnSUNBZ0lGc3lOVFVzSURBc0lEQmRMRnh5WEc0Z0lDQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdVMjlzYVdRZ1ozSmxaVzRzSUZKSFFrRWdhWE1nV3pBc0lESTFOU3dnTUYwdVhISmNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG51cS9udTcvb2liTHZ2SXhTUjBKQklPYVlyeUJiTUN3Z01qVTFMQ0F3WGVPQWdseHlYRzRnSUNBZ0lDQWdJQ0FxSUVCd2NtOXdaWEowZVNCSFVrVkZUbHh5WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0RGIyeHZjbjFjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFjM1JoZEdsalhISmNiaUFnSUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUNBZ1IxSkZSVTQ2SUNBZ0lDQWdXekFzSURJMU5Td2dNRjBzWEhKY2JpQWdJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJUYjJ4cFpDQmliSFZsTENCU1IwSkJJR2x6SUZzd0xDQXdMQ0F5TlRWZExseHlYRzRnSUNBZ0lDQWdJQ0FxSUNFamVtZ2c1N3F2NkpPZDZJbXk3N3lNVWtkQ1FTRG1tSzhnV3pBc0lEQXNJREkxTlYzamdJSmNjbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1FreFZSVnh5WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0RGIyeHZjbjFjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFjM1JoZEdsalhISmNiaUFnSUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUNBZ1FreFZSVG9nSUNBZ0lDQWdXekFzSURBc0lESTFOVjBzWEhKY2JpQWdJQ0FnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdJQ0FnSUNvZ0lTTmxiaUJaWld4c2IzY3NJRkpIUWtFZ2FYTWdXekkxTlN3Z01qTTFMQ0EwWFM1Y2NseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPbTdoT2lKc3UrOGpGSkhRa0VnNXBpdklGc3lOVFVzSURJek5Td2dORjNqZ0lKY2NseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnV1VWTVRFOVhYSEpjYmlBZ0lDQWdJQ0FnSUNvZ1FIUjVjR1VnZTBOdmJHOXlmVnh5WEc0Z0lDQWdJQ0FnSUNBcUlFQnpkR0YwYVdOY2NseHVJQ0FnSUNBZ0lDQWdLaTljY2x4dUlDQWdJQ0FnSUNCWlJVeE1UMWM2SUNBZ0lDQmJNalUxTENBeU16VXNJRFJkTEZ4eVhHNGdJQ0FnSUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ0FnSUNBcUlDRWpaVzRnVDNKaGJtZGxMQ0JTUjBKQklHbHpJRnN5TlRVc0lERXlOeXdnTUYwdVhISmNiaUFnSUNBZ0lDQWdJQ29nSVNONmFDRG1xWm5vaWJMdnZJeFNSMEpCSU9hWXJ5QmJNalUxTENBeE1qY3NJREJkNDRDQ1hISmNiaUFnSUNBZ0lDQWdJQ29nUUhCeWIzQmxjblI1SUU5U1FVNUhSVnh5WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0RGIyeHZjbjFjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFjM1JoZEdsalhISmNiaUFnSUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUNBZ1QxSkJUa2RGT2lBZ0lDQWdXekkxTlN3Z01USTNMQ0F3WFN4Y2NseHVJQ0FnSUNBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FnSUNBZ0tpQWhJMlZ1SUVONVlXNHNJRkpIUWtFZ2FYTWdXekFzSURJMU5Td2dNalUxWFM1Y2NseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPbWRrdWlKc3UrOGpGSkhRa0VnNXBpdklGc3dMQ0F5TlRVc0lESTFOVjNqZ0lKY2NseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnUTFsQlRseHlYRzRnSUNBZ0lDQWdJQ0FxSUVCMGVYQmxJSHREYjJ4dmNuMWNjbHh1SUNBZ0lDQWdJQ0FnS2lCQWMzUmhkR2xqWEhKY2JpQWdJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJQ0FnUTFsQlRqb2dJQ0FnSUNBZ1d6QXNJREkxTlN3Z01qVTFYU3hjY2x4dUlDQWdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ0FnS2lBaEkyVnVJRTFoWjJWdWRHRXNJRkpIUWtFZ2FYTWdXekkxTlN3Z01Dd2dNalUxWFM1Y2NseHVJQ0FnSUNBZ0lDQWdLaUFoSTNwb0lPYTBpK2U2b3VpSnN1KzhpT1dUZ2VlNm91aUpzdSs4aWUrOGpGSkhRa0VnNXBpdklGc3lOVFVzSURBc0lESTFOVjNqZ0lKY2NseHVJQ0FnSUNBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnVFVGSFJVNVVRVnh5WEc0Z0lDQWdJQ0FnSUNBcUlFQjBlWEJsSUh0RGIyeHZjbjFjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFjM1JoZEdsalhISmNiaUFnSUNBZ0lDQWdJQ292WEhKY2JpQWdJQ0FnSUNBZ1RVRkhSVTVVUVRvZ0lDQWdXekkxTlN3Z01Dd2dNalUxWFZ4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdOdmJHOXlUbUZ0WlNCcGJpQkVaV1poZFd4MFEyOXNiM0p6S1NCN1hISmNiaUFnSUNBZ0lDQWdhbk11WjJWMEtFTnZiRzl5TENCamIyeHZjazVoYldVc0lDaG1kVzVqZEdsdmJpQW9jbWRpWVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdjbVYwZFhKdUlHNWxkeUJEYjJ4dmNpaHlaMkpoV3pCZExDQnlaMkpoV3pGZExDQnlaMkpoV3pKZExDQnlaMkpoV3pOZEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZUdGNjbHh1SUNBZ0lDQWdJQ0I5S1NoRVpXWmhkV3gwUTI5c2IzSnpXMk52Ykc5eVRtRnRaVjBwS1R0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjJZWElnY0hKdmRHOGdQU0JEYjJ4dmNpNXdjbTkwYjNSNWNHVTdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUVOc2IyNWxJR0VnYm1WM0lHTnZiRzl5SUdaeWIyMGdkR2hsSUdOMWNuSmxiblFnWTI5c2IzSXVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPV0ZpK21haHVXOWsrV0pqZW1pbk9pSnN1T0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JqYkc5dVpWeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRMjlzYjNKOUlFNWxkMng1SUdOeVpXRjBaV1FnWTI5c2IzSXVYSEpjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh5WEc0Z0lDQWdJQ29nZG1GeUlHTnZiRzl5SUQwZ2JtVjNJR05qTGtOdmJHOXlLQ2s3WEhKY2JpQWdJQ0FnS2lCMllYSWdibVYzUTI5c2IzSWdQU0JqYjJ4dmNpNWpiRzl1WlNncE95OHZJRU52Ykc5eUlIdHlPaUF3TENCbk9pQXdMQ0JpT2lBd0xDQmhPaUF5TlRWOVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQnliM1J2TG1Oc2IyNWxJRDBnWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYUWdQU0J1WlhjZ1EyOXNiM0lvS1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFF1WDNaaGJDQTlJSFJvYVhNdVgzWmhiRHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WME8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVkU5RVQxeHlYRzRnSUNBZ0lDb2dJU042YUNEbGlLVG1scTNrdUtUa3VLcnBvcHpvaWJMbW1LL2xrS2JubTdqbnJZbmpnSUpjY2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWlhGMVlXeHpYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlME52Ykc5eWZTQnZkR2hsY2x4eVhHNGdJQ0FnSUNvZ1FISmxkSFZ5YmlCN1FtOXZiR1ZoYm4xY2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQjJZWElnWTI5c2IzSXhJRDBnWTJNdVEyOXNiM0l1VjBoSlZFVTdYSEpjYmlBZ0lDQWdLaUIyWVhJZ1kyOXNiM0l5SUQwZ2JtVjNJR05qTGtOdmJHOXlLREkxTlN3Z01qVTFMQ0F5TlRVcE8xeHlYRzRnSUNBZ0lDb2dZMk11Ykc5bktHTnZiRzl5TVM1bGNYVmhiSE1vWTI5c2IzSXlLU2s3SUM4dklIUnlkV1U3WEhKY2JpQWdJQ0FnS2lCamIyeHZjaklnUFNCall5NURiMnh2Y2k1U1JVUTdYSEpjYmlBZ0lDQWdLaUJqWXk1c2IyY29ZMjlzYjNJeUxtVnhkV0ZzY3loamIyeHZjakVwS1RzZ0x5OGdabUZzYzJVN1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQnliM1J2TG1WeGRXRnNjeUE5SUdaMWJtTjBhVzl1SUNodmRHaGxjaWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdmRHaGxjaUFtSmlCMGFHbHpMbDkyWVd3Z1BUMDlJRzkwYUdWeUxsOTJZV3c3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQlVUMFJQWEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2U2dithQXArYVBrdVdBdkZ4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCc1pYSndYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlME52Ykc5eWZTQjBiMXh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHR1ZFcxaVpYSjlJSEpoZEdsdklDMGdkR2hsSUdsdWRHVnljRzlzWVhScGIyNGdZMjlsWm1acFkybGxiblF1WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBOdmJHOXlmU0JiYjNWMFhTQXRJRzl3ZEdsdmJtRnNMQ0IwYUdVZ2NtVmpaV2wyYVc1bklIWmxZM1J2Y2k1Y2NseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwTnZiRzl5ZlZ4eVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdVZ2UwQnNhVzVySUhWMGFXeHpMMkZ3YVM5bGJtZHBibVV2Wkc5amN5OWpiMk52Y3pKa0wyTnZjbVV2ZG1Gc2RXVXRkSGx3WlhNdlEwTkRiMnh2Y2k5c1pYSndMbXB6ZlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCd2NtOTBieTVzWlhKd0lEMGdablZ1WTNScGIyNGdLSFJ2TENCeVlYUnBieXdnYjNWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnYjNWMElEMGdiM1YwSUh4OElHNWxkeUJEYjJ4dmNpZ3BPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlJRDBnZEdocGN5NXlPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQm5JRDBnZEdocGN5NW5PMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmlJRDBnZEdocGN5NWlPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmhJRDBnZEdocGN5NWhPMXh5WEc0Z0lDQWdJQ0FnSUc5MWRDNXlJRDBnY2lBcklDaDBieTV5SUMwZ2Npa2dLaUJ5WVhScGJ6dGNjbHh1SUNBZ0lDQWdJQ0J2ZFhRdVp5QTlJR2NnS3lBb2RHOHVaeUF0SUdjcElDb2djbUYwYVc4N1hISmNiaUFnSUNBZ0lDQWdiM1YwTG1JZ1BTQmlJQ3NnS0hSdkxtSWdMU0JpS1NBcUlISmhkR2x2TzF4eVhHNGdJQ0FnSUNBZ0lHOTFkQzVoSUQwZ1lTQXJJQ2gwYnk1aElDMGdZU2tnS2lCeVlYUnBienRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYjNWME8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVkU5RVQxeHlYRzRnSUNBZ0lDb2dJU042YUNEb3Zhem1qYUxrdUxybWxybmt2ci9wbUlYb3I3dm5tb1RsclpmbnJLYmt1TExqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2RHOVRkSEpwYm1kY2NseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UxTjBjbWx1WjMxY2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQjJZWElnWTI5c2IzSWdQU0JqWXk1RGIyeHZjaTVYU0VsVVJUdGNjbHh1SUNBZ0lDQXFJR052Ykc5eUxuUnZVM1J5YVc1bktDazdJQzh2SUZ3aWNtZGlZU2d5TlRVc0lESTFOU3dnTWpVMUxDQXlOVFVwWENKY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NISnZkRzh1ZEc5VGRISnBibWNnUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJRndpY21kaVlTaGNJaUFyWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNpNTBiMFpwZUdWa0tDa2dLeUJjSWl3Z1hDSWdLMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1jdWRHOUdhWGhsWkNncElDc2dYQ0lzSUZ3aUlDdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVpTG5SdlJtbDRaV1FvS1NBcklGd2lMQ0JjSWlBclhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZUzUwYjBacGVHVmtLQ2tnS3lCY0lpbGNJanRjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlFZGxkSE1nY21Wa0lHTm9ZVzV1Wld3Z2RtRnNkV1ZjY2x4dUlDQWdJQ0FxSUNFamVtZ2c2STYzNVkrVzViMlQ1WW1ONmFLYzZJbXk1NXFFNTdxaTZJbXk1WUM4NDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRkpjY2x4dUlDQWdJQ0FxSUVCeVpYUjFjbTRnZTA1MWJXSmxjbjBnY21Wa0lIWmhiSFZsTGx4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCd2NtOTBieTVuWlhSU0lEMGdablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkyWVd3Z0ppQXdlREF3TURBd01HWm1PMXh5WEc0Z0lDQWdmVHRjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJUWlhSeklISmxaQ0IyWVd4MVpTQmhibVFnY21WMGRYSnVJSFJvWlNCamRYSnlaVzUwSUdOdmJHOXlJRzlpYW1WamRGeHlYRzRnSUNBZ0lDb2dJU042YUNEb3JyN252YTdsdlpQbGlZM25tb1RudXFMb2liTGxnTHp2dkl6bHViYm92NVRsbTU3bHZaUGxpWTNscjdub3NhSGpnSUpjY2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJWMFVseHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlISmxaQ0F0SUhSb1pTQnVaWGNnVW1Wa0lHTnZiWEJ2Ym1WdWRDNWNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlME52Ykc5eWZTQjBhR2x6SUdOdmJHOXlMbHh5WEc0Z0lDQWdJQ29nUUdWNFlXMXdiR1ZjY2x4dUlDQWdJQ0FxSUhaaGNpQmpiMnh2Y2lBOUlHNWxkeUJqWXk1RGIyeHZjaWdwTzF4eVhHNGdJQ0FnSUNvZ1kyOXNiM0l1YzJWMFVpZ3lOVFVwT3lBdkx5QkRiMnh2Y2lCN2Nqb2dNalUxTENCbk9pQXdMQ0JpT2lBd0xDQmhPaUF5TlRWOVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQnliM1J2TG5ObGRGSWdQU0JtZFc1amRHbHZiaUFvY21Wa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21Wa0lEMGdmbjVqWXk1dGFYTmpMbU5zWVcxd1ppaHlaV1FzSURBc0lESTFOU2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1Gc0lEMGdLQ2gwYUdsekxsOTJZV3dnSmlBd2VHWm1abVptWmpBd0tTQjhJSEpsWkNrZ1BqNCtJREE3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRWRsZEhNZ1ozSmxaVzRnWTJoaGJtNWxiQ0IyWVd4MVpWeHlYRzRnSUNBZ0lDb2dJU042YUNEb2pyZmxqNWJsdlpQbGlZM3BvcHpvaWJMbm1vVG51Ny9vaWJMbGdMempnSUpjY2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWjJWMFIxeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZTQm5jbVZsYmlCMllXeDFaUzVjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnY0hKdmRHOHVaMlYwUnlBOUlHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnS0hSb2FYTXVYM1poYkNBbUlEQjRNREF3TUdabU1EQXBJRDQrSURnN1hISmNiaUFnSUNCOU8xeHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGTmxkSE1nWjNKbFpXNGdkbUZzZFdVZ1lXNWtJSEpsZEhWeWJpQjBhR1VnWTNWeWNtVnVkQ0JqYjJ4dmNpQnZZbXBsWTNSY2NseHVJQ0FnSUNBcUlDRWplbWdnNks2KzU3MnU1YjJUNVltTjU1cUU1N3UvNklteTVZQzg3N3lNNWJtMjZMK1U1WnVlNWIyVDVZbU41YSs1NkxHaDQ0Q0NYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSE5sZEVkY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCbmNtVmxiaUF0SUhSb1pTQnVaWGNnUjNKbFpXNGdZMjl0Y0c5dVpXNTBMbHh5WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3UTI5c2IzSjlJSFJvYVhNZ1kyOXNiM0l1WEhKY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlZ4eVhHNGdJQ0FnSUNvZ2RtRnlJR052Ykc5eUlEMGdibVYzSUdOakxrTnZiRzl5S0NrN1hISmNiaUFnSUNBZ0tpQmpiMnh2Y2k1elpYUkhLREkxTlNrN0lDOHZJRU52Ykc5eUlIdHlPaUF3TENCbk9pQXlOVFVzSUdJNklEQXNJR0U2SURJMU5YMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjSEp2ZEc4dWMyVjBSeUE5SUdaMWJtTjBhVzl1SUNobmNtVmxiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lHZHlaV1Z1SUQwZ2ZuNWpZeTV0YVhOakxtTnNZVzF3WmlobmNtVmxiaXdnTUN3Z01qVTFLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDkyWVd3Z1BTQW9LSFJvYVhNdVgzWmhiQ0FtSURCNFptWm1aakF3Wm1ZcElId2dLR2R5WldWdUlEdzhJRGdwS1NBK1BqNGdNRHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNjbHh1SUNBZ0lIMDdYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUNFalpXNGdSMlYwY3lCaWJIVmxJR05vWVc1dVpXd2dkbUZzZFdWY2NseHVJQ0FnSUNBcUlDRWplbWdnNkk2MzVZK1c1YjJUNVltTjZhS2M2SW15NTVxRTZKT2Q2SW15NVlDODQ0Q0NYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2RsZEVKY2NseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwNTFiV0psY24wZ1lteDFaU0IyWVd4MVpTNWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjSEp2ZEc4dVoyVjBRaUE5SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdLSFJvYVhNdVgzWmhiQ0FtSURCNE1EQm1aakF3TURBcElENCtJREUyTzF4eVhHNGdJQ0FnZlR0Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCVFpYUnpJR0pzZFdVZ2RtRnNkV1VnWVc1a0lISmxkSFZ5YmlCMGFHVWdZM1Z5Y21WdWRDQmpiMnh2Y2lCdlltcGxZM1JjY2x4dUlDQWdJQ0FxSUNFamVtZ2c2SzYrNTcydTViMlQ1WW1ONTVxRTZKT2Q2SW15NVlDODc3eU01Ym0yNkwrVTVadWU1YjJUNVltTjVhKzU2TEdoNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lITmxkRUpjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JpYkhWbElDMGdkR2hsSUc1bGR5QkNiSFZsSUdOdmJYQnZibVZ1ZEM1Y2NseHVJQ0FnSUNBcUlFQnlaWFIxY200Z2UwTnZiRzl5ZlNCMGFHbHpJR052Ykc5eUxseHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJSFpoY2lCamIyeHZjaUE5SUc1bGR5QmpZeTVEYjJ4dmNpZ3BPMXh5WEc0Z0lDQWdJQ29nWTI5c2IzSXVjMlYwUWlneU5UVXBPeUF2THlCRGIyeHZjaUI3Y2pvZ01Dd2daem9nTUN3Z1lqb2dNalUxTENCaE9pQXlOVFY5WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhCeWIzUnZMbk5sZEVJZ1BTQm1kVzVqZEdsdmJpQW9ZbXgxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJR0pzZFdVZ1BTQitmbU5qTG0xcGMyTXVZMnhoYlhCbUtHSnNkV1VzSURBc0lESTFOU2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1Gc0lEMGdLQ2gwYUdsekxsOTJZV3dnSmlBd2VHWm1NREJtWm1abUtTQjhJQ2hpYkhWbElEdzhJREUyS1NrZ1BqNCtJREE3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhSb2FYTTdYSEpjYmlBZ0lDQjlPMXh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRWRsZEhNZ1lXeHdhR0VnWTJoaGJtNWxiQ0IyWVd4MVpWeHlYRzRnSUNBZ0lDb2dJU042YUNEb2pyZmxqNWJsdlpQbGlZM3BvcHpvaWJMbm1vVHBnSS9tbUk3bHVxYmxnTHpqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1oyVjBRVnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmU0JoYkhCb1lTQjJZV3gxWlM1Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NISnZkRzh1WjJWMFFTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z0tIUm9hWE11WDNaaGJDQW1JREI0Wm1Zd01EQXdNREFwSUQ0K1BpQXlORHRjY2x4dUlDQWdJSDA3WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVTJWMGN5QmhiSEJvWVNCMllXeDFaU0JoYm1RZ2NtVjBkWEp1SUhSb1pTQmpkWEp5Wlc1MElHTnZiRzl5SUc5aWFtVmpkRnh5WEc0Z0lDQWdJQ29nSVNONmFDRG9ycjdudmE3bHZaUGxpWTNubW9UcGdJL21tSTdsdXFidnZJemx1YmJvdjVUbG01N2x2WlBsaVkzbHI3bm9zYUhqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2MyVjBRVnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR0ZzY0doaElDMGdkR2hsSUc1bGR5QkJiSEJvWVNCamIyMXdiMjVsYm5RdVhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdERiMnh2Y24wZ2RHaHBjeUJqYjJ4dmNpNWNjbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYSEpjYmlBZ0lDQWdLaUIyWVhJZ1kyOXNiM0lnUFNCdVpYY2dZMk11UTI5c2IzSW9LVHRjY2x4dUlDQWdJQ0FxSUdOdmJHOXlMbk5sZEVFb01DazdJQzh2SUVOdmJHOXlJSHR5T2lBd0xDQm5PaUF3TENCaU9pQXdMQ0JoT2lBd2ZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQndjbTkwYnk1elpYUkJJRDBnWm5WdVkzUnBiMjRnS0dGc2NHaGhLU0I3WEhKY2JpQWdJQ0FnSUNBZ1lXeHdhR0VnUFNCK2ZtTmpMbTFwYzJNdVkyeGhiWEJtS0dGc2NHaGhMQ0F3TENBeU5UVXBPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1poYkNBOUlDZ29kR2hwY3k1ZmRtRnNJQ1lnTUhnd01HWm1abVptWmlrZ2ZDQW9ZV3h3YUdFZ1BEd2dNalFwS1NBK1BqNGdNRHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN6dGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnY0hKdmRHOHVYMlpoYzNSVFpYUkJJRDBnWm5WdVkzUnBiMjRnS0dGc2NHaGhLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZG1Gc0lEMGdLQ2gwYUdsekxsOTJZV3dnSmlBd2VEQXdabVptWm1abUtTQjhJQ2hoYkhCb1lTQThQQ0F5TkNrcElENCtQaUF3TzF4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQnFjeTVuWlhSelpYUW9jSEp2ZEc4c0lDZHlKeXdnY0hKdmRHOHVaMlYwVWl3Z2NISnZkRzh1YzJWMFVpd2dkSEoxWlNrN1hISmNiaUFnSUNCcWN5NW5aWFJ6WlhRb2NISnZkRzhzSUNkbkp5d2djSEp2ZEc4dVoyVjBSeXdnY0hKdmRHOHVjMlYwUnl3Z2RISjFaU2s3WEhKY2JpQWdJQ0JxY3k1blpYUnpaWFFvY0hKdmRHOHNJQ2RpSnl3Z2NISnZkRzh1WjJWMFFpd2djSEp2ZEc4dWMyVjBRaXdnZEhKMVpTazdYSEpjYmlBZ0lDQnFjeTVuWlhSelpYUW9jSEp2ZEc4c0lDZGhKeXdnY0hKdmRHOHVaMlYwUVN3Z2NISnZkRzh1YzJWMFFTd2dkSEoxWlNrN1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRU52Ym5abGNuUWdZMjlzYjNJZ2RHOGdZM056SUdadmNtMWhkQzVjY2x4dUlDQWdJQ0FxSUNFamVtZ2c2TDJzNW8yaTVMaTZJRU5UVXlEbW9Memx2SS9qZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2RHOURVMU5jY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0J2Y0hRZ0xTQmNJbkpuWW1GY0lpd2dYQ0p5WjJKY0lpd2dYQ0lqY21kaVhDSWdiM0lnWENJamNuSm5aMkppWENJdVhISmNiaUFnSUNBZ0tpQkFjbVYwZFhKdUlIdFRkSEpwYm1kOVhISmNiaUFnSUNBZ0tpQkFaWGhoYlhCc1pTQjdRR3hwYm1zZ2RYUnBiSE12WVhCcEwyVnVaMmx1WlM5a2IyTnpMMk52WTI5ek1tUXZZMjl5WlM5MllXeDFaUzEwZVhCbGN5OURRME52Ykc5eUwzUnZRMU5UTG1wemZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQndjbTkwYnk1MGIwTlRVeUE5SUdaMWJtTjBhVzl1SUNnZ2IzQjBJQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2dnYjNCMElEMDlQU0FuY21kaVlTY2dLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmNJbkpuWW1Fb1hDSWdLMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnS0hSb2FYTXVjaUI4SURBZ0tTQXJJRndpTEZ3aUlDdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ2gwYUdsekxtY2dmQ0F3SUNrZ0t5QmNJaXhjSWlBclhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kR2hwY3k1aUlId2dNQ0FwSUNzZ1hDSXNYQ0lnSzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11WVNBdklESTFOU2t1ZEc5R2FYaGxaQ2d5S1NBcklGd2lLVndpWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdaV3h6WlNCcFppQW9JRzl3ZENBOVBUMGdKM0puWWljZ0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCY0luSm5ZaWhjSWlBclhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQW9kR2hwY3k1eUlId2dNQ0FwSUNzZ1hDSXNYQ0lnSzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tIUm9hWE11WnlCOElEQWdLU0FySUZ3aUxGd2lJQ3RjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNoMGFHbHpMbUlnZkNBd0lDa2dLeUJjSWlsY0lseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z0p5TW5JQ3NnZEdocGN5NTBiMGhGV0NodmNIUXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRkpsWVdRZ2FHVjRJSE4wY21sdVp5QmhibVFnYzNSdmNtVWdZMjlzYjNJZ1pHRjBZU0JwYm5SdklIUm9aU0JqZFhKeVpXNTBJR052Ykc5eUlHOWlhbVZqZEN3Z2RHaGxJR2hsZUNCemRISnBibWNnYlhWemRDQmlaU0JtYjNKdFlYUmxaQ0JoY3lCeVoySmhJRzl5SUhKbllpNWNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZLKzc1WStXSURFMklPaS9tK1dJdHVtaW5PaUpzdU9BZ2x4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCbWNtOXRTRVZZWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnYUdWNFUzUnlhVzVuWEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1SUh0RGIyeHZjbjFjY2x4dUlDQWdJQ0FxSUVCamFHRnBibUZpYkdWY2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bFhISmNiaUFnSUNBZ0tpQjJZWElnWTI5c2IzSWdQU0JqWXk1RGIyeHZjaTVDVEVGRFN6dGNjbHh1SUNBZ0lDQXFJR052Ykc5eUxtWnliMjFJUlZnb1hDSWpSa1pHUmpNelhDSXBPeUF2THlCRGIyeHZjaUI3Y2pvZ01qVTFMQ0JuT2lBeU5UVXNJR0k2SURVeExDQmhPaUF5TlRWOU8xeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQndjbTkwYnk1bWNtOXRTRVZZSUQwZ1puVnVZM1JwYjI0Z0tHaGxlRk4wY21sdVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUdobGVGTjBjbWx1WnlBOUlDaG9aWGhUZEhKcGJtY3VhVzVrWlhoUFppZ25JeWNwSUQwOVBTQXdLU0EvSUdobGVGTjBjbWx1Wnk1emRXSnpkSEpwYm1jb01Ta2dPaUJvWlhoVGRISnBibWM3WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSElnUFNCd1lYSnpaVWx1ZENob1pYaFRkSEpwYm1jdWMzVmljM1J5S0RBc0lESXBMQ0F4TmlrZ2ZId2dNRHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdaeUE5SUhCaGNuTmxTVzUwS0dobGVGTjBjbWx1Wnk1emRXSnpkSElvTWl3Z01pa3NJREUyS1NCOGZDQXdPMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmlJRDBnY0dGeWMyVkpiblFvYUdWNFUzUnlhVzVuTG5OMVluTjBjaWcwTENBeUtTd2dNVFlwSUh4OElEQTdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHRWdQU0J3WVhKelpVbHVkQ2hvWlhoVGRISnBibWN1YzNWaWMzUnlLRFlzSURJcExDQXhOaWtnZkh3Z01qVTFPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1poYkNBOUlDZ29ZVHc4TWpRcElENCtQaUF3S1NBcklDaGlQRHd4TmlrZ0t5QW9aenc4T0NrZ0t5QnlPMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsek8xeHlYRzRnSUNBZ2ZUdGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnWTI5dWRtVnlkQ0JEYjJ4dmNpQjBieUJJUlZnZ1kyOXNiM0lnYzNSeWFXNW5MbHh5WEc0Z0lDQWdJQ29nWlM1bkxpQWdZMk11WTI5c2IzSW9NalUxTERZc01qVTFLU0FnZEc4Z09pQmNJaU5tWmpBMlptWmNJbHh5WEc0Z0lDQWdJQ29nSVNONmFDRG92YXptamFMa3VMb2dNVFlnNkwrYjVZaTI0NENDWEhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhSdlNFVllYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMU4wY21sdVozMGdabTEwSUMwZ1hDSWpjbWRpWENJc0lGd2lJM0p5WjJkaVlsd2lJRzl5SUZ3aUkzSnlaMmRpWW1GaFhDSXVYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRUZEhKcGJtZDlYSEpjYmlBZ0lDQWdLaUJBWlhoaGJYQnNaVnh5WEc0Z0lDQWdJQ29nZG1GeUlHTnZiRzl5SUQwZ1kyTXVRMjlzYjNJdVFreEJRMHM3WEhKY2JpQWdJQ0FnS2lCamIyeHZjaTUwYjBoRldDaGNJaU55WjJKY0lpazdJQ0FnSUNBdkx5QmNJakF3TUZ3aU8xeHlYRzRnSUNBZ0lDb2dZMjlzYjNJdWRHOUlSVmdvWENJamNuSm5aMkppWENJcE95QWdMeThnWENJd01EQXdNREJjSWp0Y2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NISnZkRzh1ZEc5SVJWZ2dQU0JtZFc1amRHbHZiaUFvSUdadGRDQXBJSHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjSEpsWm1sNElEMGdKekFuTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JvWlhnZ1BTQmJYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG5JZ1BDQXhOaUEvSUhCeVpXWnBlQ0E2SUNjbktTQXJJQ2gwYUdsekxuSWdmQ0F3S1M1MGIxTjBjbWx1WnlneE5pa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG1jZ1BDQXhOaUEvSUhCeVpXWnBlQ0E2SUNjbktTQXJJQ2gwYUdsekxtY2dmQ0F3S1M1MGIxTjBjbWx1WnlneE5pa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDaDBhR2x6TG1JZ1BDQXhOaUEvSUhCeVpXWnBlQ0E2SUNjbktTQXJJQ2gwYUdsekxtSWdmQ0F3S1M1MGIxTjBjbWx1WnlneE5pa3NYSEpjYmlBZ0lDQWdJQ0FnWFR0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYVNBOUlDMHhPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2dabTEwSUQwOVBTQW5JM0puWWljZ0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaUFvSUdrZ1BTQXdPeUJwSUR3Z2FHVjRMbXhsYm1kMGFEc2dLeXRwSUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0NCb1pYaGJhVjB1YkdWdVozUm9JRDRnTVNBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1pYaGJhVjBnUFNCb1pYaGJhVjFiTUYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb0lHWnRkQ0E5UFQwZ0p5TnljbWRuWW1JbklDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQm1iM0lnS0NCcElEMGdNRHNnYVNBOElHaGxlQzVzWlc1bmRHZzdJQ3NyYVNBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnZ2FHVjRXMmxkTG14bGJtZDBhQ0E5UFQwZ01TQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9aWGhiYVYwZ1BTQW5NQ2NnS3lCb1pYaGJhVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQnBaaUFvWm0xMElEMDlQU0FuSTNKeVoyZGlZbUZoSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCb1pYZ3VjSFZ6YUNnb2RHaHBjeTVoSUR3Z01UWWdQeUJ3Y21WbWFYZ2dPaUFuSnlrZ0t5QW9kR2hwY3k1aElId2dNQ2t1ZEc5VGRISnBibWNvTVRZcEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdobGVDNXFiMmx1S0NjbktUdGNjbHh1SUNBZ0lIMDdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUVOdmJuWmxjblFnZEc4Z01qUmlhWFFnY21kaUlIWmhiSFZsTGx4eVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvdmF6bWphTGt1TG9nTWpSaWFYUWc1NXFFSUZKSFFpRGxnTHpqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2RHOVNSMEpXWVd4MVpWeHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUblZ0WW1WeWZWeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVmNjbHh1SUNBZ0lDQXFJSFpoY2lCamIyeHZjaUE5SUdOakxrTnZiRzl5TGxsRlRFeFBWenRjY2x4dUlDQWdJQ0FxSUdOdmJHOXlMblJ2VWtkQ1ZtRnNkV1VvS1RzZ0x5OGdNVFkzTnpFNE5EUTdYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSEJ5YjNSdkxuUnZVa2RDVm1Gc2RXVWdQU0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNaaGJDQW1JREI0TURCbVptWm1abVk3WEhKY2JpQWdJQ0I5TzF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQlNaV0ZrSUVoVFZpQnRiMlJsYkNCamIyeHZjaUJoYm1RZ1kyOXVkbVZ5ZENCMGJ5QlNSMElnWTI5c2IzSmNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZLKzc1WStXSUVoVFZ1KzhpT2lKc3VXOXFlYW9vZVdlaSsrOGllYWd2T1c4aitPQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQm1jbTl0U0ZOV1hISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwNTFiV0psY24wZ2FGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlITmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjJYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHREYjJ4dmNuMWNjbHh1SUNBZ0lDQXFJRUJqYUdGcGJtRmliR1ZjY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsWEhKY2JpQWdJQ0FnS2lCMllYSWdZMjlzYjNJZ1BTQmpZeTVEYjJ4dmNpNVpSVXhNVDFjN1hISmNiaUFnSUNBZ0tpQmpiMnh2Y2k1bWNtOXRTRk5XS0RBc0lEQXNJREVwT3lBdkx5QkRiMnh2Y2lCN2Nqb2dNalUxTENCbk9pQXlOVFVzSUdJNklESTFOU3dnWVRvZ01qVTFmVHRjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnY0hKdmRHOHVabkp2YlVoVFZpQTlJR1oxYm1OMGFXOXVJQ2dnYUN3Z2N5d2dkaUFwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnY2l3Z1p5d2dZanRjY2x4dUlDQWdJQ0FnSUNCcFppQW9jeUE5UFQwZ01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlJRDBnWnlBOUlHSWdQU0IyTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFlnUFQwOUlEQXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhJZ1BTQm5JRDBnWWlBOUlEQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9hQ0E5UFQwZ01Ta2dhQ0E5SURBN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQm9JQ285SURZN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnpJRDBnY3p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIWWdQU0IyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR2tnUFNCTllYUm9MbVpzYjI5eUtHZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZG1GeUlHWWdQU0JvSUMwZ2FUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCd0lEMGdkaUFxSUNneElDMGdjeWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdjU0E5SUhZZ0tpQW9NU0F0SUNoeklDb2daaWtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJSFFnUFNCMklDb2dLREVnTFNBb2N5QXFJQ2d4SUMwZ1ppa3BLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhOM2FYUmphQ0FvYVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNRHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnY0R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNVHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIRTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCMk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnY0R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNanBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCMk8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdNenBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIQTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCeE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnZGp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdORHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCd08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnZGp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOaGMyVWdOVHBjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlIWTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2NnUFNCd08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmlJRDBnY1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1luSmxZV3M3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnY2lBcVBTQXlOVFU3WEhKY2JpQWdJQ0FnSUNBZ1p5QXFQU0F5TlRVN1hISmNiaUFnSUNBZ0lDQWdZaUFxUFNBeU5UVTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkbUZzSUQwZ0tDaDBhR2x6TG1FOFBESTBLU0ErUGo0Z01Da2dLeUFvWWp3OE1UWXBJQ3NnS0djOFBEZ3BJQ3NnY2p0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjenRjY2x4dUlDQWdJSDA3WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGUnlZVzV6Wm05eWJTQjBieUJJVTFZZ2JXOWtaV3dnWTI5c2IzSmNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZMMnM1bzJpNUxpNklFaFRWdSs4aU9pSnN1VzlxZWFvb2VXZWkrKzhpZWFndk9XOGorT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0IwYjBoVFZseHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdUMkpxWldOMGZTQXRJSHRvT2lCdWRXMWlaWElzSUhNNklHNTFiV0psY2l3Z2Rqb2diblZ0WW1WeWZTNWNjbHh1SUNBZ0lDQXFJRUJsZUdGdGNHeGxYSEpjYmlBZ0lDQWdLaUIyWVhJZ1kyOXNiM0lnUFNCall5NURiMnh2Y2k1WlJVeE1UMWM3WEhKY2JpQWdJQ0FnS2lCamIyeHZjaTUwYjBoVFZpZ3BPeUF2THlCUFltcGxZM1FnZTJnNklEQXVNVFV6TXpnMk5EVTBNVGd6TWpZMk9Td2djem9nTUM0NU9EUXpNVE0zTWpVME9UQXhPVFl4TENCMk9pQXhmVHRjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnY0hKdmRHOHVkRzlJVTFZZ1BTQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSElnUFNCMGFHbHpMbklnTHlBeU5UVTdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHY2dQU0IwYUdsekxtY2dMeUF5TlRVN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdJZ1BTQjBhR2x6TG1JZ0x5QXlOVFU3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2h6ZGlBOUlIc2dhRG9nTUN3Z2N6b2dNQ3dnZGpvZ01DQjlPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnRZWGdnUFNCTllYUm9MbTFoZUNoeUxHY3NZaWs3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzFwYmlBOUlFMWhkR2d1YldsdUtISXNaeXhpS1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWkdWc2RHRWdQU0F3TzF4eVhHNGdJQ0FnSUNBZ0lHaHpkaTUySUQwZ2JXRjRPMXh5WEc0Z0lDQWdJQ0FnSUdoemRpNXpJRDBnYldGNElEOGdLRzFoZUNBdElHMXBiaWtnTHlCdFlYZ2dPaUF3TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYUhOMkxuTXBJR2h6ZGk1b0lEMGdNRHRjY2x4dUlDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzZEdFZ1BTQnRZWGdnTFNCdGFXNDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2h5SUQwOVBTQnRZWGdwSUdoemRpNW9JRDBnS0djZ0xTQmlLU0F2SUdSbGJIUmhPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDaG5JRDA5UFNCdFlYZ3BJR2h6ZGk1b0lEMGdNaUFySUNoaUlDMGdjaWtnTHlCa1pXeDBZVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCb2MzWXVhQ0E5SURRZ0t5QW9jaUF0SUdjcElDOGdaR1ZzZEdFN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdoemRpNW9JQzg5SURZN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9jM1l1YUNBOElEQXBJR2h6ZGk1b0lDczlJREV1TUR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJR2h6ZGp0Y2NseHVJQ0FnSUgwN1hISmNibHh5WEc0Z0lDQWdjSEp2ZEc4dWMyVjBJRDBnWm5WdVkzUnBiMjRnS0dOdmJHOXlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR052Ykc5eUxsOTJZV3dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkbUZzSUQwZ1kyOXNiM0l1WDNaaGJEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWNpQTlJR052Ykc5eUxuSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WnlBOUlHTnZiRzl5TG1jN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVZaUE5SUdOdmJHOXlMbUk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVlTQTlJR052Ykc5eUxtRTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlR0Y2NseHVYSEpjYmlBZ0lDQnlaWFIxY200Z1EyOXNiM0k3WEhKY2JuMHBLQ2s3WEhKY2JseHlYRzVqWXk1RGIyeHZjaUE5SUVOdmJHOXlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJRUJ0YjJSMWJHVWdZMk5jY2x4dUlDb3ZYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmx4eVhHNGdLaUJVYUdVZ1kyOXVkbVZ1YVdWdVkyVWdiV1YwYUc5a0lIUnZJR055WldGMFpTQmhJRzVsZHlCN2V5TmpjbTl6YzB4cGJtc2dYQ0pEYjJ4dmNpOURiMnh2Y2pwdFpYUm9iMlJjSW4xOVkyTXVRMjlzYjNKN2V5OWpjbTl6YzB4cGJtdDlmVnh5WEc0Z0tpQkJiSEJvWVNCamFHRnVibVZzSUdseklHOXdkR2x2Ym1Gc0xpQkVaV1poZFd4MElIWmhiSFZsSUdseklESTFOUzVjY2x4dUlDcGNjbHh1SUNvZ0lTTjZhRnh5WEc0Z0tpRHBnSnJvdjRmb3I2WG1scm5tczVYbW5hWGxpSnZsdTdya3VJRGt1S3JtbHJEbm1vUWdlM3NqWTNKdmMzTk1hVzVySUZ3aVEyOXNiM0l2UTI5c2IzSTZiV1YwYUc5a1hDSjlmV05qTGtOdmJHOXllM3N2WTNKdmMzTk1hVzVyZlgwZzVhKzU2TEdoNDRDQ1hISmNiaUFxSUVGc2NHaGhJT21BbXVtQmsrYVlyK1dQcittQWllZWFoT09BZ3VtN21PaXVwT1dBdk9hWXJ5QXlOVFhqZ0lKY2NseHVJQ3BjY2x4dUlDb2dRRzFsZEdodlpDQmpiMnh2Y2x4eVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXM0k5TUYxY2NseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJRnRuUFRCZFhISmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0JiWWowd1hWeHlYRzRnS2lCQWNHRnlZVzBnZTA1MWJXSmxjbjBnVzJFOU1qVTFYVnh5WEc0Z0tpQkFjbVYwZFhKdUlIdERiMnh2Y24xY2NseHVJQ29nUUdWNFlXMXdiR1VnZTBCc2FXNXJJSFYwYVd4ekwyRndhUzlsYm1kcGJtVXZaRzlqY3k5amIyTnZjekprTDJOdmNtVXZkbUZzZFdVdGRIbHdaWE12UTBORGIyeHZjaTlqYjJ4dmNpNXFjMzFjY2x4dUlDb3ZYSEpjYm1OakxtTnZiRzl5SUQwZ1puVnVZM1JwYjI0Z1kyOXNiM0lnS0hJc0lHY3NJR0lzSUdFcElIdGNjbHh1SUNBZ0lHbG1JQ2gwZVhCbGIyWWdjaUE5UFQwZ0ozTjBjbWx1WnljcElIdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ2JtVjNJR05qTGtOdmJHOXlLQ2s3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUhKbGMzVnNkQzVtY205dFNFVllLSElwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnYVdZZ0tIUjVjR1Z2WmlCeUlEMDlQU0FuYjJKcVpXTjBKeWtnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCdVpYY2dZMk11UTI5c2IzSW9jaTV5TENCeUxtY3NJSEl1WWl3Z2NpNWhLVHRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQWdibVYzSUdOakxrTnZiRzl5S0hJc0lHY3NJR0lzSUdFcE8xeHlYRzU5TzF4eVhHNWNjbHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JqWXk1RGIyeHZjanNpWFgwPSJdfQ==