(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCScheduler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./platform/js');
        var IdGenerater = require('./platform/id-generater');
        var MAX_POOL_SIZE = 20;
        var idGenerater = new IdGenerater('Scheduler');
        var ListEntry = function ListEntry(target, priority, paused, markedForDeletion) {
            this.target = target;
            this.priority = priority;
            this.paused = paused;
            this.markedForDeletion = markedForDeletion;
        };
        var _listEntries = [];
        ListEntry.get = function (target, priority, paused, markedForDeletion) {
            var result = _listEntries.pop();
            if (result) {
                result.target = target;
                result.priority = priority;
                result.paused = paused;
                result.markedForDeletion = markedForDeletion;
            } else {
                result = new ListEntry(target, priority, paused, markedForDeletion);
            }
            return result;
        };
        ListEntry.put = function (entry) {
            if (_listEntries.length < MAX_POOL_SIZE) {
                entry.target = null;
                _listEntries.push(entry);
            }
        };
        var HashUpdateEntry = function HashUpdateEntry(list, entry, target, callback) {
            this.list = list;
            this.entry = entry;
            this.target = target;
            this.callback = callback;
        };
        var _hashUpdateEntries = [];
        HashUpdateEntry.get = function (list, entry, target, callback) {
            var result = _hashUpdateEntries.pop();
            if (result) {
                result.list = list;
                result.entry = entry;
                result.target = target;
                result.callback = callback;
            } else {
                result = new HashUpdateEntry(list, entry, target, callback);
            }
            return result;
        };
        HashUpdateEntry.put = function (entry) {
            if (_hashUpdateEntries.length < MAX_POOL_SIZE) {
                entry.list = entry.entry = entry.target = entry.callback = null;
                _hashUpdateEntries.push(entry);
            }
        };
        var HashTimerEntry = function HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
            var _t = this;
            _t.timers = timers;
            _t.target = target;
            _t.timerIndex = timerIndex;
            _t.currentTimer = currentTimer;
            _t.currentTimerSalvaged = currentTimerSalvaged;
            _t.paused = paused;
        };
        var _hashTimerEntries = [];
        HashTimerEntry.get = function (timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused) {
            var result = _hashTimerEntries.pop();
            if (result) {
                result.timers = timers;
                result.target = target;
                result.timerIndex = timerIndex;
                result.currentTimer = currentTimer;
                result.currentTimerSalvaged = currentTimerSalvaged;
                result.paused = paused;
            } else {
                result = new HashTimerEntry(timers, target, timerIndex, currentTimer, currentTimerSalvaged, paused);
            }
            return result;
        };
        HashTimerEntry.put = function (entry) {
            if (_hashTimerEntries.length < MAX_POOL_SIZE) {
                entry.timers = entry.target = entry.currentTimer = null;
                _hashTimerEntries.push(entry);
            }
        };
        function CallbackTimer() {
            this._lock = false;
            this._scheduler = null;
            this._elapsed = -1;
            this._runForever = false;
            this._useDelay = false;
            this._timesExecuted = 0;
            this._repeat = 0;
            this._delay = 0;
            this._interval = 0;
            this._target = null;
            this._callback = null;
        }
        var proto = CallbackTimer.prototype;
        proto.initWithCallback = function (scheduler, callback, target, seconds, repeat, delay) {
            this._lock = false;
            this._scheduler = scheduler;
            this._target = target;
            this._callback = callback;
            this._elapsed = -1;
            this._interval = seconds;
            this._delay = delay;
            this._useDelay = this._delay > 0;
            this._repeat = repeat;
            this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
            return true;
        };
        proto.getInterval = function () {
            return this._interval;
        };
        proto.setInterval = function (interval) {
            this._interval = interval;
        };
        proto.update = function (dt) {
            if (this._elapsed === -1) {
                this._elapsed = 0;
                this._timesExecuted = 0;
            } else {
                this._elapsed += dt;
                if (this._runForever && !this._useDelay) {
                    if (this._elapsed >= this._interval) {
                        this.trigger();
                        this._elapsed = 0;
                    }
                } else {
                    if (this._useDelay) {
                        if (this._elapsed >= this._delay) {
                            this.trigger();
                            this._elapsed -= this._delay;
                            this._timesExecuted += 1;
                            this._useDelay = false;
                        }
                    } else {
                        if (this._elapsed >= this._interval) {
                            this.trigger();
                            this._elapsed = 0;
                            this._timesExecuted += 1;
                        }
                    }
                    if (this._callback && !this._runForever && this._timesExecuted > this._repeat)
                        this.cancel();
                }
            }
        };
        proto.getCallback = function () {
            return this._callback;
        };
        proto.trigger = function () {
            if (this._target && this._callback) {
                this._lock = true;
                this._callback.call(this._target, this._elapsed);
                this._lock = false;
            }
        };
        proto.cancel = function () {
            this._scheduler.unschedule(this._callback, this._target);
        };
        var _timers = [];
        CallbackTimer.get = function () {
            return _timers.pop() || new CallbackTimer();
        };
        CallbackTimer.put = function (timer) {
            if (_timers.length < MAX_POOL_SIZE && !timer._lock) {
                timer._scheduler = timer._target = timer._callback = null;
                _timers.push(timer);
            }
        };
        cc.Scheduler = function () {
            this._timeScale = 1;
            this._updatesNegList = [];
            this._updates0List = [];
            this._updatesPosList = [];
            this._hashForUpdates = js.createMap(true);
            this._hashForTimers = js.createMap(true);
            this._currentTarget = null;
            this._currentTargetSalvaged = false;
            this._updateHashLocked = false;
            this._arrayForTimers = [];
        };
        cc.Scheduler.prototype = {
            constructor: cc.Scheduler,
            _removeHashElement: function _removeHashElement(element) {
                delete this._hashForTimers[element.target._id];
                var arr = this._arrayForTimers;
                for (var i = 0, l = arr.length; i < l; i++) {
                    if (arr[i] === element) {
                        arr.splice(i, 1);
                        break;
                    }
                }
                HashTimerEntry.put(element);
            },
            _removeUpdateFromHash: function _removeUpdateFromHash(entry) {
                var targetId = entry.target._id;
                var self = this, element = self._hashForUpdates[targetId];
                if (element) {
                    var list = element.list, listEntry = element.entry;
                    for (var i = 0, l = list.length; i < l; i++) {
                        if (list[i] === listEntry) {
                            list.splice(i, 1);
                            break;
                        }
                    }
                    delete self._hashForUpdates[targetId];
                    ListEntry.put(listEntry);
                    HashUpdateEntry.put(element);
                }
            },
            _priorityIn: function _priorityIn(ppList, listElement, priority) {
                for (var i = 0; i < ppList.length; i++) {
                    if (priority < ppList[i].priority) {
                        ppList.splice(i, 0, listElement);
                        return;
                    }
                }
                ppList.push(listElement);
            },
            _appendIn: function _appendIn(ppList, listElement) {
                ppList.push(listElement);
            },
            enableForTarget: function enableForTarget(target) {
                if (!target._id) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                    } else {
                        target._id = idGenerater.getNewId();
                    }
                }
            },
            setTimeScale: function setTimeScale(timeScale) {
                this._timeScale = timeScale;
            },
            getTimeScale: function getTimeScale() {
                return this._timeScale;
            },
            update: function update(dt) {
                this._updateHashLocked = true;
                if (this._timeScale !== 1)
                    dt *= this._timeScale;
                var i, list, len, entry;
                for (i = 0, list = this._updatesNegList, len = list.length; i < len; i++) {
                    entry = list[i];
                    if (!entry.paused && !entry.markedForDeletion)
                        entry.target.update(dt);
                }
                for (i = 0, list = this._updates0List, len = list.length; i < len; i++) {
                    entry = list[i];
                    if (!entry.paused && !entry.markedForDeletion)
                        entry.target.update(dt);
                }
                for (i = 0, list = this._updatesPosList, len = list.length; i < len; i++) {
                    entry = list[i];
                    if (!entry.paused && !entry.markedForDeletion)
                        entry.target.update(dt);
                }
                var elt, arr = this._arrayForTimers;
                for (i = 0; i < arr.length; i++) {
                    elt = arr[i];
                    this._currentTarget = elt;
                    this._currentTargetSalvaged = false;
                    if (!elt.paused) {
                        for (elt.timerIndex = 0; elt.timerIndex < elt.timers.length; ++elt.timerIndex) {
                            elt.currentTimer = elt.timers[elt.timerIndex];
                            elt.currentTimerSalvaged = false;
                            elt.currentTimer.update(dt);
                            elt.currentTimer = null;
                        }
                    }
                    if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
                        this._removeHashElement(this._currentTarget);
                        --i;
                    }
                }
                for (i = 0, list = this._updatesNegList; i < list.length;) {
                    entry = list[i];
                    if (entry.markedForDeletion)
                        this._removeUpdateFromHash(entry);
                    else
                        i++;
                }
                for (i = 0, list = this._updates0List; i < list.length;) {
                    entry = list[i];
                    if (entry.markedForDeletion)
                        this._removeUpdateFromHash(entry);
                    else
                        i++;
                }
                for (i = 0, list = this._updatesPosList; i < list.length;) {
                    entry = list[i];
                    if (entry.markedForDeletion)
                        this._removeUpdateFromHash(entry);
                    else
                        i++;
                }
                this._updateHashLocked = false;
                this._currentTarget = null;
            },
            schedule: function schedule(callback, target, interval, repeat, delay, paused) {
                'use strict';
                if (typeof callback !== 'function') {
                    var tmp = callback;
                    callback = target;
                    target = tmp;
                }
                if (arguments.length === 4 || arguments.length === 5) {
                    paused = !!repeat;
                    repeat = cc.macro.REPEAT_FOREVER;
                    delay = 0;
                }
                cc.assertID(target, 1502);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (!element) {
                    element = HashTimerEntry.get(null, target, 0, null, null, paused);
                    this._arrayForTimers.push(element);
                    this._hashForTimers[targetId] = element;
                } else if (element.paused !== paused) {
                    cc.warnID(1511);
                }
                var timer, i;
                if (element.timers == null) {
                    element.timers = [];
                } else {
                    for (i = 0; i < element.timers.length; ++i) {
                        timer = element.timers[i];
                        if (timer && callback === timer._callback) {
                            cc.logID(1507, timer.getInterval(), interval);
                            timer._interval = interval;
                            return;
                        }
                    }
                }
                timer = CallbackTimer.get();
                timer.initWithCallback(this, callback, target, interval, repeat, delay);
                element.timers.push(timer);
                if (this._currentTarget === element && this._currentTargetSalvaged) {
                    this._currentTargetSalvaged = false;
                }
            },
            scheduleUpdate: function scheduleUpdate(target, priority, paused) {
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var hashElement = this._hashForUpdates[targetId];
                if (hashElement && hashElement.entry) {
                    if (hashElement.entry.priority !== priority) {
                        if (this._updateHashLocked) {
                            cc.logID(1506);
                            hashElement.entry.markedForDeletion = false;
                            hashElement.entry.paused = paused;
                            return;
                        } else {
                            this.unscheduleUpdate(target);
                        }
                    } else {
                        hashElement.entry.markedForDeletion = false;
                        hashElement.entry.paused = paused;
                        return;
                    }
                }
                var listElement = ListEntry.get(target, priority, paused, false);
                var ppList;
                if (priority === 0) {
                    ppList = this._updates0List;
                    this._appendIn(ppList, listElement);
                } else {
                    ppList = priority < 0 ? this._updatesNegList : this._updatesPosList;
                    this._priorityIn(ppList, listElement, priority);
                }
                this._hashForUpdates[targetId] = HashUpdateEntry.get(ppList, listElement, target, null);
            },
            unschedule: function unschedule(callback, target) {
                if (!target || !callback)
                    return;
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var self = this, element = self._hashForTimers[targetId];
                if (element) {
                    var timers = element.timers;
                    for (var i = 0, li = timers.length; i < li; i++) {
                        var timer = timers[i];
                        if (callback === timer._callback) {
                            if (timer === element.currentTimer && !element.currentTimerSalvaged) {
                                element.currentTimerSalvaged = true;
                            }
                            timers.splice(i, 1);
                            CallbackTimer.put(timer);
                            if (element.timerIndex >= i) {
                                element.timerIndex--;
                            }
                            if (timers.length === 0) {
                                if (self._currentTarget === element) {
                                    self._currentTargetSalvaged = true;
                                } else {
                                    self._removeHashElement(element);
                                }
                            }
                            return;
                        }
                    }
                }
            },
            unscheduleUpdate: function unscheduleUpdate(target) {
                if (!target)
                    return;
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForUpdates[targetId];
                if (element) {
                    if (this._updateHashLocked) {
                        element.entry.markedForDeletion = true;
                    } else {
                        this._removeUpdateFromHash(element.entry);
                    }
                }
            },
            unscheduleAllForTarget: function unscheduleAllForTarget(target) {
                if (!target) {
                    return;
                }
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (element) {
                    var timers = element.timers;
                    if (timers.indexOf(element.currentTimer) > -1 && !element.currentTimerSalvaged) {
                        element.currentTimerSalvaged = true;
                    }
                    for (var i = 0, l = timers.length; i < l; i++) {
                        CallbackTimer.put(timers[i]);
                    }
                    timers.length = 0;
                    if (this._currentTarget === element) {
                        this._currentTargetSalvaged = true;
                    } else {
                        this._removeHashElement(element);
                    }
                }
                this.unscheduleUpdate(target);
            },
            unscheduleAll: function unscheduleAll() {
                this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
            },
            unscheduleAllWithMinPriority: function unscheduleAllWithMinPriority(minPriority) {
                var i, element, arr = this._arrayForTimers;
                for (i = arr.length - 1; i >= 0; i--) {
                    element = arr[i];
                    this.unscheduleAllForTarget(element.target);
                }
                var entry;
                var temp_length = 0;
                if (minPriority < 0) {
                    for (i = 0; i < this._updatesNegList.length;) {
                        temp_length = this._updatesNegList.length;
                        entry = this._updatesNegList[i];
                        if (entry && entry.priority >= minPriority)
                            this.unscheduleUpdate(entry.target);
                        if (temp_length == this._updatesNegList.length)
                            i++;
                    }
                }
                if (minPriority <= 0) {
                    for (i = 0; i < this._updates0List.length;) {
                        temp_length = this._updates0List.length;
                        entry = this._updates0List[i];
                        if (entry)
                            this.unscheduleUpdate(entry.target);
                        if (temp_length == this._updates0List.length)
                            i++;
                    }
                }
                for (i = 0; i < this._updatesPosList.length;) {
                    temp_length = this._updatesPosList.length;
                    entry = this._updatesPosList[i];
                    if (entry && entry.priority >= minPriority)
                        this.unscheduleUpdate(entry.target);
                    if (temp_length == this._updatesPosList.length)
                        i++;
                }
            },
            isScheduled: function isScheduled(callback, target) {
                cc.assertID(callback, 1508);
                cc.assertID(target, 1509);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (!element) {
                    return false;
                }
                if (element.timers == null) {
                    return false;
                } else {
                    var timers = element.timers;
                    for (var i = 0; i < timers.length; ++i) {
                        var timer = timers[i];
                        if (callback === timer._callback) {
                            return true;
                        }
                    }
                    return false;
                }
            },
            pauseAllTargets: function pauseAllTargets() {
                return this.pauseAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
            },
            pauseAllTargetsWithMinPriority: function pauseAllTargetsWithMinPriority(minPriority) {
                var idsWithSelectors = [];
                var self = this, element, locArrayForTimers = self._arrayForTimers;
                var i, li;
                for (i = 0, li = locArrayForTimers.length; i < li; i++) {
                    element = locArrayForTimers[i];
                    if (element) {
                        element.paused = true;
                        idsWithSelectors.push(element.target);
                    }
                }
                var entry;
                if (minPriority < 0) {
                    for (i = 0; i < this._updatesNegList.length; i++) {
                        entry = this._updatesNegList[i];
                        if (entry) {
                            if (entry.priority >= minPriority) {
                                entry.paused = true;
                                idsWithSelectors.push(entry.target);
                            }
                        }
                    }
                }
                if (minPriority <= 0) {
                    for (i = 0; i < this._updates0List.length; i++) {
                        entry = this._updates0List[i];
                        if (entry) {
                            entry.paused = true;
                            idsWithSelectors.push(entry.target);
                        }
                    }
                }
                for (i = 0; i < this._updatesPosList.length; i++) {
                    entry = this._updatesPosList[i];
                    if (entry) {
                        if (entry.priority >= minPriority) {
                            entry.paused = true;
                            idsWithSelectors.push(entry.target);
                        }
                    }
                }
                return idsWithSelectors;
            },
            resumeTargets: function resumeTargets(targetsToResume) {
                if (!targetsToResume)
                    return;
                for (var i = 0; i < targetsToResume.length; i++) {
                    this.resumeTarget(targetsToResume[i]);
                }
            },
            pauseTarget: function pauseTarget(target) {
                cc.assertID(target, 1503);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var self = this, element = self._hashForTimers[targetId];
                if (element) {
                    element.paused = true;
                }
                var elementUpdate = self._hashForUpdates[targetId];
                if (elementUpdate) {
                    elementUpdate.entry.paused = true;
                }
            },
            resumeTarget: function resumeTarget(target) {
                cc.assertID(target, 1504);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var self = this, element = self._hashForTimers[targetId];
                if (element) {
                    element.paused = false;
                }
                var elementUpdate = self._hashForUpdates[targetId];
                if (elementUpdate) {
                    elementUpdate.entry.paused = false;
                }
            },
            isTargetPaused: function isTargetPaused(target) {
                cc.assertID(target, 1505);
                var targetId = target._id;
                if (!targetId) {
                    if (target.__instanceId) {
                        cc.warnID(1513);
                        targetId = target._id = target.__instanceId;
                    } else {
                        cc.errorID(1510);
                    }
                }
                var element = this._hashForTimers[targetId];
                if (element) {
                    return element.paused;
                }
                var elementUpdate = this._hashForUpdates[targetId];
                if (elementUpdate) {
                    return elementUpdate.entry.paused;
                }
                return false;
            }
        };
        cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
        cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
        module.exports = cc.Scheduler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDU2NoZWR1bGVyLmpzIiwiQzovVXNlcnMvbmFudGFzL2ZpcmViYWxsLXgvZmJfMjEtcmVsZWFzZS9lbmdpbmUvY29jb3MyZC9jb3JlL0NDU2NoZWR1bGVyLmpzIl0sIm5hbWVzIjpbImpzIiwicmVxdWlyZSIsIklkR2VuZXJhdGVyIiwiTUFYX1BPT0xfU0laRSIsImlkR2VuZXJhdGVyIiwiTGlzdEVudHJ5IiwidGFyZ2V0IiwicHJpb3JpdHkiLCJwYXVzZWQiLCJtYXJrZWRGb3JEZWxldGlvbiIsIl9saXN0RW50cmllcyIsImdldCIsInJlc3VsdCIsInBvcCIsInB1dCIsImVudHJ5IiwibGVuZ3RoIiwicHVzaCIsIkhhc2hVcGRhdGVFbnRyeSIsImxpc3QiLCJjYWxsYmFjayIsIl9oYXNoVXBkYXRlRW50cmllcyIsIkhhc2hUaW1lckVudHJ5IiwidGltZXJzIiwidGltZXJJbmRleCIsImN1cnJlbnRUaW1lciIsImN1cnJlbnRUaW1lclNhbHZhZ2VkIiwiX3QiLCJfaGFzaFRpbWVyRW50cmllcyIsIkNhbGxiYWNrVGltZXIiLCJfbG9jayIsIl9zY2hlZHVsZXIiLCJfZWxhcHNlZCIsIl9ydW5Gb3JldmVyIiwiX3VzZURlbGF5IiwiX3RpbWVzRXhlY3V0ZWQiLCJfcmVwZWF0IiwiX2RlbGF5IiwiX2ludGVydmFsIiwiX3RhcmdldCIsIl9jYWxsYmFjayIsInByb3RvIiwicHJvdG90eXBlIiwiaW5pdFdpdGhDYWxsYmFjayIsInNjaGVkdWxlciIsInNlY29uZHMiLCJyZXBlYXQiLCJkZWxheSIsImNjIiwibWFjcm8iLCJSRVBFQVRfRk9SRVZFUiIsImdldEludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJpbnRlcnZhbCIsInVwZGF0ZSIsImR0IiwidHJpZ2dlciIsImNhbmNlbCIsImdldENhbGxiYWNrIiwiY2FsbCIsInVuc2NoZWR1bGUiLCJfdGltZXJzIiwidGltZXIiLCJTY2hlZHVsZXIiLCJfdGltZVNjYWxlIiwiX3VwZGF0ZXNOZWdMaXN0IiwiX3VwZGF0ZXMwTGlzdCIsIl91cGRhdGVzUG9zTGlzdCIsIl9oYXNoRm9yVXBkYXRlcyIsImNyZWF0ZU1hcCIsIl9oYXNoRm9yVGltZXJzIiwiX2N1cnJlbnRUYXJnZXQiLCJfY3VycmVudFRhcmdldFNhbHZhZ2VkIiwiX3VwZGF0ZUhhc2hMb2NrZWQiLCJfYXJyYXlGb3JUaW1lcnMiLCJjb25zdHJ1Y3RvciIsIl9yZW1vdmVIYXNoRWxlbWVudCIsImVsZW1lbnQiLCJfaWQiLCJhcnIiLCJpIiwibCIsInNwbGljZSIsIl9yZW1vdmVVcGRhdGVGcm9tSGFzaCIsInRhcmdldElkIiwic2VsZiIsImxpc3RFbnRyeSIsIl9wcmlvcml0eUluIiwicHBMaXN0IiwibGlzdEVsZW1lbnQiLCJfYXBwZW5kSW4iLCJlbmFibGVGb3JUYXJnZXQiLCJfX2luc3RhbmNlSWQiLCJ3YXJuSUQiLCJnZXROZXdJZCIsInNldFRpbWVTY2FsZSIsInRpbWVTY2FsZSIsImdldFRpbWVTY2FsZSIsImxlbiIsImVsdCIsInNjaGVkdWxlIiwidG1wIiwiYXJndW1lbnRzIiwiYXNzZXJ0SUQiLCJlcnJvcklEIiwibG9nSUQiLCJzY2hlZHVsZVVwZGF0ZSIsImhhc2hFbGVtZW50IiwidW5zY2hlZHVsZVVwZGF0ZSIsImxpIiwidW5zY2hlZHVsZUFsbEZvclRhcmdldCIsImluZGV4T2YiLCJ1bnNjaGVkdWxlQWxsIiwidW5zY2hlZHVsZUFsbFdpdGhNaW5Qcmlvcml0eSIsIlBSSU9SSVRZX1NZU1RFTSIsIm1pblByaW9yaXR5IiwidGVtcF9sZW5ndGgiLCJpc1NjaGVkdWxlZCIsInBhdXNlQWxsVGFyZ2V0cyIsInBhdXNlQWxsVGFyZ2V0c1dpdGhNaW5Qcmlvcml0eSIsImlkc1dpdGhTZWxlY3RvcnMiLCJsb2NBcnJheUZvclRpbWVycyIsInJlc3VtZVRhcmdldHMiLCJ0YXJnZXRzVG9SZXN1bWUiLCJyZXN1bWVUYXJnZXQiLCJwYXVzZVRhcmdldCIsImVsZW1lbnRVcGRhdGUiLCJpc1RhcmdldFBhdXNlZCIsIlBSSU9SSVRZX05PTl9TWVNURU0i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IjpbIi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiBAbW9kdWxlIGNjXHJcbiAqL1xyXG5jb25zdCBqcyA9IHJlcXVpcmUoJy4vcGxhdGZvcm0vanMnKTtcclxuY29uc3QgSWRHZW5lcmF0ZXIgPSByZXF1aXJlKCcuL3BsYXRmb3JtL2lkLWdlbmVyYXRlcicpO1xyXG5jb25zdCBNQVhfUE9PTF9TSVpFID0gMjA7XHJcblxyXG52YXIgaWRHZW5lcmF0ZXIgPSBuZXcgSWRHZW5lcmF0ZXIoJ1NjaGVkdWxlcicpO1xyXG5cclxuLy9kYXRhIHN0cnVjdHVyZXNcclxuLypcclxuICogQSBsaXN0IGRvdWJsZS1saW5rZWQgbGlzdCB1c2VkIGZvciBcInVwZGF0ZXMgd2l0aCBwcmlvcml0eVwiXHJcbiAqIEBjbGFzcyBMaXN0RW50cnlcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBub3QgcmV0YWluZWQgKHJldGFpbmVkIGJ5IGhhc2hVcGRhdGVFbnRyeSlcclxuICogQHBhcmFtIHtOdW1iZXJ9IHByaW9yaXR5XHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcGF1c2VkXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gbWFya2VkRm9yRGVsZXRpb24gc2VsZWN0b3Igd2lsbCBubyBsb25nZXIgYmUgY2FsbGVkIGFuZCBlbnRyeSB3aWxsIGJlIHJlbW92ZWQgYXQgZW5kIG9mIHRoZSBuZXh0IHRpY2tcclxuICovXHJcbnZhciBMaXN0RW50cnkgPSBmdW5jdGlvbiAodGFyZ2V0LCBwcmlvcml0eSwgcGF1c2VkLCBtYXJrZWRGb3JEZWxldGlvbikge1xyXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICB0aGlzLnBhdXNlZCA9IHBhdXNlZDtcclxuICAgIHRoaXMubWFya2VkRm9yRGVsZXRpb24gPSBtYXJrZWRGb3JEZWxldGlvbjtcclxufTtcclxuXHJcbnZhciBfbGlzdEVudHJpZXMgPSBbXTtcclxuTGlzdEVudHJ5LmdldCA9IGZ1bmN0aW9uICh0YXJnZXQsIHByaW9yaXR5LCBwYXVzZWQsIG1hcmtlZEZvckRlbGV0aW9uKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gX2xpc3RFbnRyaWVzLnBvcCgpO1xyXG4gICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgIHJlc3VsdC50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICAgICAgcmVzdWx0LnByaW9yaXR5ID0gcHJpb3JpdHk7XHJcbiAgICAgICAgcmVzdWx0LnBhdXNlZCA9IHBhdXNlZDtcclxuICAgICAgICByZXN1bHQubWFya2VkRm9yRGVsZXRpb24gPSBtYXJrZWRGb3JEZWxldGlvbjtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBMaXN0RW50cnkodGFyZ2V0LCBwcmlvcml0eSwgcGF1c2VkLCBtYXJrZWRGb3JEZWxldGlvbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5MaXN0RW50cnkucHV0ID0gZnVuY3Rpb24gKGVudHJ5KSB7XHJcbiAgICBpZiAoX2xpc3RFbnRyaWVzLmxlbmd0aCA8IE1BWF9QT09MX1NJWkUpIHtcclxuICAgICAgICBlbnRyeS50YXJnZXQgPSBudWxsO1xyXG4gICAgICAgIF9saXN0RW50cmllcy5wdXNoKGVudHJ5KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qXHJcbiAqIEEgdXBkYXRlIGVudHJ5IGxpc3RcclxuICogQGNsYXNzIEhhc2hVcGRhdGVFbnRyeVxyXG4gKiBAcGFyYW0ge0FycmF5fSBsaXN0IFdoaWNoIGxpc3QgZG9lcyBpdCBiZWxvbmcgdG8gP1xyXG4gKiBAcGFyYW0ge0xpc3RFbnRyeX0gZW50cnkgZW50cnkgaW4gdGhlIGxpc3RcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBoYXNoIGtleSAocmV0YWluZWQpXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNhbGxiYWNrXHJcbiAqL1xyXG52YXIgSGFzaFVwZGF0ZUVudHJ5ID0gZnVuY3Rpb24gKGxpc3QsIGVudHJ5LCB0YXJnZXQsIGNhbGxiYWNrKSB7XHJcbiAgICB0aGlzLmxpc3QgPSBsaXN0O1xyXG4gICAgdGhpcy5lbnRyeSA9IGVudHJ5O1xyXG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XHJcbn07XHJcbnZhciBfaGFzaFVwZGF0ZUVudHJpZXMgPSBbXTtcclxuSGFzaFVwZGF0ZUVudHJ5LmdldCA9IGZ1bmN0aW9uIChsaXN0LCBlbnRyeSwgdGFyZ2V0LCBjYWxsYmFjaykge1xyXG4gICAgdmFyIHJlc3VsdCA9IF9oYXNoVXBkYXRlRW50cmllcy5wb3AoKTtcclxuICAgIGlmIChyZXN1bHQpIHtcclxuICAgICAgICByZXN1bHQubGlzdCA9IGxpc3Q7XHJcbiAgICAgICAgcmVzdWx0LmVudHJ5ID0gZW50cnk7XHJcbiAgICAgICAgcmVzdWx0LnRhcmdldCA9IHRhcmdldDtcclxuICAgICAgICByZXN1bHQuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJlc3VsdCA9IG5ldyBIYXNoVXBkYXRlRW50cnkobGlzdCwgZW50cnksIHRhcmdldCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxufTtcclxuSGFzaFVwZGF0ZUVudHJ5LnB1dCA9IGZ1bmN0aW9uIChlbnRyeSkge1xyXG4gICAgaWYgKF9oYXNoVXBkYXRlRW50cmllcy5sZW5ndGggPCBNQVhfUE9PTF9TSVpFKSB7XHJcbiAgICAgICAgZW50cnkubGlzdCA9IGVudHJ5LmVudHJ5ID0gZW50cnkudGFyZ2V0ID0gZW50cnkuY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgIF9oYXNoVXBkYXRlRW50cmllcy5wdXNoKGVudHJ5KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8vXHJcbi8qXHJcbiAqIEhhc2ggRWxlbWVudCB1c2VkIGZvciBcInNlbGVjdG9ycyB3aXRoIGludGVydmFsXCJcclxuICogQGNsYXNzIEhhc2hUaW1lckVudHJ5XHJcbiAqIEBwYXJhbSB7QXJyYXl9IHRpbWVyc1xyXG4gKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0ICBoYXNoIGtleSAocmV0YWluZWQpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lckluZGV4XHJcbiAqIEBwYXJhbSB7VGltZXJ9IGN1cnJlbnRUaW1lclxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IGN1cnJlbnRUaW1lclNhbHZhZ2VkXHJcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gcGF1c2VkXHJcbiAqL1xyXG52YXIgSGFzaFRpbWVyRW50cnkgPSBmdW5jdGlvbiAodGltZXJzLCB0YXJnZXQsIHRpbWVySW5kZXgsIGN1cnJlbnRUaW1lciwgY3VycmVudFRpbWVyU2FsdmFnZWQsIHBhdXNlZCkge1xyXG4gICAgdmFyIF90ID0gdGhpcztcclxuICAgIF90LnRpbWVycyA9IHRpbWVycztcclxuICAgIF90LnRhcmdldCA9IHRhcmdldDtcclxuICAgIF90LnRpbWVySW5kZXggPSB0aW1lckluZGV4O1xyXG4gICAgX3QuY3VycmVudFRpbWVyID0gY3VycmVudFRpbWVyO1xyXG4gICAgX3QuY3VycmVudFRpbWVyU2FsdmFnZWQgPSBjdXJyZW50VGltZXJTYWx2YWdlZDtcclxuICAgIF90LnBhdXNlZCA9IHBhdXNlZDtcclxufTtcclxudmFyIF9oYXNoVGltZXJFbnRyaWVzID0gW107XHJcbkhhc2hUaW1lckVudHJ5LmdldCA9IGZ1bmN0aW9uICh0aW1lcnMsIHRhcmdldCwgdGltZXJJbmRleCwgY3VycmVudFRpbWVyLCBjdXJyZW50VGltZXJTYWx2YWdlZCwgcGF1c2VkKSB7XHJcbiAgICB2YXIgcmVzdWx0ID0gX2hhc2hUaW1lckVudHJpZXMucG9wKCk7XHJcbiAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgcmVzdWx0LnRpbWVycyA9IHRpbWVycztcclxuICAgICAgICByZXN1bHQudGFyZ2V0ID0gdGFyZ2V0O1xyXG4gICAgICAgIHJlc3VsdC50aW1lckluZGV4ID0gdGltZXJJbmRleDtcclxuICAgICAgICByZXN1bHQuY3VycmVudFRpbWVyID0gY3VycmVudFRpbWVyO1xyXG4gICAgICAgIHJlc3VsdC5jdXJyZW50VGltZXJTYWx2YWdlZCA9IGN1cnJlbnRUaW1lclNhbHZhZ2VkO1xyXG4gICAgICAgIHJlc3VsdC5wYXVzZWQgPSBwYXVzZWQ7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXN1bHQgPSBuZXcgSGFzaFRpbWVyRW50cnkodGltZXJzLCB0YXJnZXQsIHRpbWVySW5kZXgsIGN1cnJlbnRUaW1lciwgY3VycmVudFRpbWVyU2FsdmFnZWQsIHBhdXNlZCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5IYXNoVGltZXJFbnRyeS5wdXQgPSBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgIGlmIChfaGFzaFRpbWVyRW50cmllcy5sZW5ndGggPCBNQVhfUE9PTF9TSVpFKSB7XHJcbiAgICAgICAgZW50cnkudGltZXJzID0gZW50cnkudGFyZ2V0ID0gZW50cnkuY3VycmVudFRpbWVyID0gbnVsbDtcclxuICAgICAgICBfaGFzaFRpbWVyRW50cmllcy5wdXNoKGVudHJ5KTtcclxuICAgIH1cclxufTtcclxuXHJcbi8qXHJcbiAqIExpZ2h0IHdlaWdodCB0aW1lclxyXG4gKiBAZXh0ZW5kcyBjYy5DbGFzc1xyXG4gKi9cclxuZnVuY3Rpb24gQ2FsbGJhY2tUaW1lciAoKSB7XHJcbiAgICB0aGlzLl9sb2NrID0gZmFsc2U7XHJcbiAgICB0aGlzLl9zY2hlZHVsZXIgPSBudWxsO1xyXG4gICAgdGhpcy5fZWxhcHNlZCA9IC0xO1xyXG4gICAgdGhpcy5fcnVuRm9yZXZlciA9IGZhbHNlO1xyXG4gICAgdGhpcy5fdXNlRGVsYXkgPSBmYWxzZTtcclxuICAgIHRoaXMuX3RpbWVzRXhlY3V0ZWQgPSAwO1xyXG4gICAgdGhpcy5fcmVwZWF0ID0gMDtcclxuICAgIHRoaXMuX2RlbGF5ID0gMDtcclxuICAgIHRoaXMuX2ludGVydmFsID0gMDtcclxuXHJcbiAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xyXG4gICAgdGhpcy5fY2FsbGJhY2sgPSBudWxsO1xyXG59XHJcblxyXG52YXIgcHJvdG8gPSBDYWxsYmFja1RpbWVyLnByb3RvdHlwZTtcclxuXHJcbnByb3RvLmluaXRXaXRoQ2FsbGJhY2sgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBjYWxsYmFjaywgdGFyZ2V0LCBzZWNvbmRzLCByZXBlYXQsIGRlbGF5KSB7XHJcbiAgICB0aGlzLl9sb2NrID0gZmFsc2U7XHJcbiAgICB0aGlzLl9zY2hlZHVsZXIgPSBzY2hlZHVsZXI7XHJcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XHJcbiAgICB0aGlzLl9jYWxsYmFjayA9IGNhbGxiYWNrO1xyXG5cclxuICAgIHRoaXMuX2VsYXBzZWQgPSAtMTtcclxuICAgIHRoaXMuX2ludGVydmFsID0gc2Vjb25kcztcclxuICAgIHRoaXMuX2RlbGF5ID0gZGVsYXk7XHJcbiAgICB0aGlzLl91c2VEZWxheSA9ICh0aGlzLl9kZWxheSA+IDApO1xyXG4gICAgdGhpcy5fcmVwZWF0ID0gcmVwZWF0O1xyXG4gICAgdGhpcy5fcnVuRm9yZXZlciA9ICh0aGlzLl9yZXBlYXQgPT09IGNjLm1hY3JvLlJFUEVBVF9GT1JFVkVSKTtcclxuICAgIHJldHVybiB0cnVlO1xyXG59O1xyXG4vKipcclxuICogQHJldHVybiB7TnVtYmVyfSByZXR1cm5zIGludGVydmFsIG9mIHRpbWVyXHJcbiAqL1xyXG5wcm90by5nZXRJbnRlcnZhbCA9IGZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX2ludGVydmFsO307XHJcbi8qKlxyXG4gKiBAcGFyYW0ge051bWJlcn0gaW50ZXJ2YWwgc2V0IGludGVydmFsIGluIHNlY29uZHNcclxuICovXHJcbnByb3RvLnNldEludGVydmFsID0gZnVuY3Rpb24oaW50ZXJ2YWwpe3RoaXMuX2ludGVydmFsID0gaW50ZXJ2YWw7fTtcclxuXHJcbi8qKlxyXG4gKiB0cmlnZ2VycyB0aGUgdGltZXJcclxuICogQHBhcmFtIHtOdW1iZXJ9IGR0IGRlbHRhIHRpbWVcclxuICovXHJcbnByb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgaWYgKHRoaXMuX2VsYXBzZWQgPT09IC0xKSB7XHJcbiAgICAgICAgdGhpcy5fZWxhcHNlZCA9IDA7XHJcbiAgICAgICAgdGhpcy5fdGltZXNFeGVjdXRlZCA9IDA7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuX2VsYXBzZWQgKz0gZHQ7XHJcbiAgICAgICAgaWYgKHRoaXMuX3J1bkZvcmV2ZXIgJiYgIXRoaXMuX3VzZURlbGF5KSB7Ly9zdGFuZGFyZCB0aW1lciB1c2FnZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fZWxhcHNlZCA+PSB0aGlzLl9pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7Ly9hZHZhbmNlZCB1c2FnZVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fdXNlRGVsYXkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9lbGFwc2VkID49IHRoaXMuX2RlbGF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX2VsYXBzZWQgLT0gdGhpcy5fZGVsYXk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXNFeGVjdXRlZCArPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3VzZURlbGF5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fZWxhcHNlZCA+PSB0aGlzLl9pbnRlcnZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90aW1lc0V4ZWN1dGVkICs9IDE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWxsYmFjayAmJiAhdGhpcy5fcnVuRm9yZXZlciAmJiB0aGlzLl90aW1lc0V4ZWN1dGVkID4gdGhpcy5fcmVwZWF0KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW5jZWwoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn07XHJcblxyXG5wcm90by5nZXRDYWxsYmFjayA9IGZ1bmN0aW9uKCl7XHJcbiAgICByZXR1cm4gdGhpcy5fY2FsbGJhY2s7XHJcbn07XHJcblxyXG5wcm90by50cmlnZ2VyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuX3RhcmdldCAmJiB0aGlzLl9jYWxsYmFjaykge1xyXG4gICAgICAgIHRoaXMuX2xvY2sgPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2NhbGxiYWNrLmNhbGwodGhpcy5fdGFyZ2V0LCB0aGlzLl9lbGFwc2VkKTtcclxuICAgICAgICB0aGlzLl9sb2NrID0gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcblxyXG5wcm90by5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAvL292ZXJyaWRlXHJcbiAgICB0aGlzLl9zY2hlZHVsZXIudW5zY2hlZHVsZSh0aGlzLl9jYWxsYmFjaywgdGhpcy5fdGFyZ2V0KTtcclxufTtcclxuXHJcbnZhciBfdGltZXJzID0gW107XHJcbkNhbGxiYWNrVGltZXIuZ2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIF90aW1lcnMucG9wKCkgfHwgbmV3IENhbGxiYWNrVGltZXIoKTtcclxufTtcclxuQ2FsbGJhY2tUaW1lci5wdXQgPSBmdW5jdGlvbiAodGltZXIpIHtcclxuICAgIGlmIChfdGltZXJzLmxlbmd0aCA8IE1BWF9QT09MX1NJWkUgJiYgIXRpbWVyLl9sb2NrKSB7XHJcbiAgICAgICAgdGltZXIuX3NjaGVkdWxlciA9IHRpbWVyLl90YXJnZXQgPSB0aW1lci5fY2FsbGJhY2sgPSBudWxsO1xyXG4gICAgICAgIF90aW1lcnMucHVzaCh0aW1lcik7XHJcbiAgICB9XHJcbn07XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBTY2hlZHVsZXIgaXMgcmVzcG9uc2libGUgb2YgdHJpZ2dlcmluZyB0aGUgc2NoZWR1bGVkIGNhbGxiYWNrcy48YnIvPlxyXG4gKiBZb3Ugc2hvdWxkIG5vdCB1c2UgTlNUaW1lci4gSW5zdGVhZCB1c2UgdGhpcyBjbGFzcy48YnIvPlxyXG4gKiA8YnIvPlxyXG4gKiBUaGVyZSBhcmUgMiBkaWZmZXJlbnQgdHlwZXMgb2YgY2FsbGJhY2tzIChzZWxlY3RvcnMpOjxici8+XHJcbiAqICAgICAtIHVwZGF0ZSBjYWxsYmFjazogdGhlICd1cGRhdGUnIGNhbGxiYWNrIHdpbGwgYmUgY2FsbGVkIGV2ZXJ5IGZyYW1lLiBZb3UgY2FuIGN1c3RvbWl6ZSB0aGUgcHJpb3JpdHkuPGJyLz5cclxuICogICAgIC0gY3VzdG9tIGNhbGxiYWNrOiBBIGN1c3RvbSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBldmVyeSBmcmFtZSwgb3Igd2l0aCBhIGN1c3RvbSBpbnRlcnZhbCBvZiB0aW1lPGJyLz5cclxuICogPGJyLz5cclxuICogVGhlICdjdXN0b20gc2VsZWN0b3JzJyBzaG91bGQgYmUgYXZvaWRlZCB3aGVuIHBvc3NpYmxlLiBJdCBpcyBmYXN0ZXIsXHJcbiAqIGFuZCBjb25zdW1lcyBsZXNzIG1lbW9yeSB0byB1c2UgdGhlICd1cGRhdGUgY2FsbGJhY2snLiAqXHJcbiAqICEjemhcclxuICogU2NoZWR1bGVyIOaYr+i0n+i0o+inpuWPkeWbnuiwg+WHveaVsOeahOexu+OAgjxici8+XHJcbiAqIOmAmuW4uOaDheWGteS4i++8jOW7uuiuruS9v+eUqCBjYy5kaXJlY3Rvci5nZXRTY2hlZHVsZXIoKSDmnaXojrflj5bns7vnu5/lrprml7blmajjgII8YnIvPlxyXG4gKiDmnInkuKTnp43kuI3lkIznsbvlnovnmoTlrprml7blmajvvJo8YnIvPlxyXG4gKiAgICAgLSB1cGRhdGUg5a6a5pe25Zmo77ya5q+P5LiA5bin6YO95Lya6Kem5Y+R44CC5oKo5Y+v5Lul6Ieq5a6a5LmJ5LyY5YWI57qn44CCPGJyLz5cclxuICogICAgIC0g6Ieq5a6a5LmJ5a6a5pe25Zmo77ya6Ieq5a6a5LmJ5a6a5pe25Zmo5Y+v5Lul5q+P5LiA5bin5oiW6ICF6Ieq5a6a5LmJ55qE5pe26Ze06Ze06ZqU6Kem5Y+R44CCPGJyLz5cclxuICog5aaC5p6c5biM5pyb5q+P5bin6YO96Kem5Y+R77yM5bqU6K+l5L2/55SoIHVwZGF0ZSDlrprml7blmajvvIzkvb/nlKggdXBkYXRlIOWumuaXtuWZqOabtOW/q++8jOiAjOS4lOa2iOiAl+abtOWwkeeahOWGheWtmOOAglxyXG4gKlxyXG4gKiBAY2xhc3MgU2NoZWR1bGVyXHJcbiAqL1xyXG5jYy5TY2hlZHVsZXIgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLl90aW1lU2NhbGUgPSAxLjA7XHJcbiAgICB0aGlzLl91cGRhdGVzTmVnTGlzdCA9IFtdOyAgLy8gbGlzdCBvZiBwcmlvcml0eSA8IDBcclxuICAgIHRoaXMuX3VwZGF0ZXMwTGlzdCA9IFtdOyAgICAvLyBsaXN0IG9mIHByaW9yaXR5ID09IDBcclxuICAgIHRoaXMuX3VwZGF0ZXNQb3NMaXN0ID0gW107ICAvLyBsaXN0IG9mIHByaW9yaXR5ID4gMFxyXG4gICAgdGhpcy5faGFzaEZvclVwZGF0ZXMgPSBqcy5jcmVhdGVNYXAodHJ1ZSk7ICAvLyBoYXNoIHVzZWQgdG8gZmV0Y2ggcXVpY2tseSB0aGUgbGlzdCBlbnRyaWVzIGZvciBwYXVzZSwgZGVsZXRlLCBldGNcclxuICAgIHRoaXMuX2hhc2hGb3JUaW1lcnMgPSBqcy5jcmVhdGVNYXAodHJ1ZSk7ICAgLy8gVXNlZCBmb3IgXCJzZWxlY3RvcnMgd2l0aCBpbnRlcnZhbFwiXHJcbiAgICB0aGlzLl9jdXJyZW50VGFyZ2V0ID0gbnVsbDtcclxuICAgIHRoaXMuX2N1cnJlbnRUYXJnZXRTYWx2YWdlZCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fdXBkYXRlSGFzaExvY2tlZCA9IGZhbHNlOyAvLyBJZiB0cnVlIHVuc2NoZWR1bGUgd2lsbCBub3QgcmVtb3ZlIGFueXRoaW5nIGZyb20gYSBoYXNoLiBFbGVtZW50cyB3aWxsIG9ubHkgYmUgbWFya2VkIGZvciBkZWxldGlvbi5cclxuXHJcbiAgICB0aGlzLl9hcnJheUZvclRpbWVycyA9IFtdOyAgLy8gU3BlZWQgdXAgaW5kZXhpbmdcclxuICAgIC8vdGhpcy5fYXJyYXlGb3JVcGRhdGVzID0gW107ICAgLy8gU3BlZWQgdXAgaW5kZXhpbmdcclxufTtcclxuXHJcbmNjLlNjaGVkdWxlci5wcm90b3R5cGUgPSB7XHJcbiAgICBjb25zdHJ1Y3RvcjogY2MuU2NoZWR1bGVyLFxyXG4gICAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXByaXZhdGUgbWV0aG9kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAgIF9yZW1vdmVIYXNoRWxlbWVudDogZnVuY3Rpb24gKGVsZW1lbnQpIHtcclxuICAgICAgICBkZWxldGUgdGhpcy5faGFzaEZvclRpbWVyc1tlbGVtZW50LnRhcmdldC5faWRdO1xyXG4gICAgICAgIHZhciBhcnIgPSB0aGlzLl9hcnJheUZvclRpbWVycztcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgaWYgKGFycltpXSA9PT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgYXJyLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIEhhc2hUaW1lckVudHJ5LnB1dChlbGVtZW50KTtcclxuICAgIH0sXHJcblxyXG4gICAgX3JlbW92ZVVwZGF0ZUZyb21IYXNoOiBmdW5jdGlvbiAoZW50cnkpIHtcclxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSBlbnRyeS50YXJnZXQuX2lkO1xyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcywgZWxlbWVudCA9IHNlbGYuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXTtcclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICAvLyBSZW1vdmUgbGlzdCBlbnRyeSBmcm9tIGxpc3RcclxuICAgICAgICAgICAgdmFyIGxpc3QgPSBlbGVtZW50Lmxpc3QsIGxpc3RFbnRyeSA9IGVsZW1lbnQuZW50cnk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChsaXN0W2ldID09PSBsaXN0RW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZGVsZXRlIHNlbGYuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXTtcclxuICAgICAgICAgICAgTGlzdEVudHJ5LnB1dChsaXN0RW50cnkpO1xyXG4gICAgICAgICAgICBIYXNoVXBkYXRlRW50cnkucHV0KGVsZW1lbnQpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgX3ByaW9yaXR5SW46IGZ1bmN0aW9uIChwcExpc3QsIGxpc3RFbGVtZW50LCBwcmlvcml0eSkge1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHBMaXN0Lmxlbmd0aDsgaSsrKXtcclxuICAgICAgICAgICAgaWYgKHByaW9yaXR5IDwgcHBMaXN0W2ldLnByaW9yaXR5KSB7XHJcbiAgICAgICAgICAgICAgICBwcExpc3Quc3BsaWNlKGksIDAsIGxpc3RFbGVtZW50KTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBwcExpc3QucHVzaChsaXN0RWxlbWVudCk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9hcHBlbmRJbjogZnVuY3Rpb24gKHBwTGlzdCwgbGlzdEVsZW1lbnQpIHtcclxuICAgICAgICBwcExpc3QucHVzaChsaXN0RWxlbWVudCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1wdWJsaWMgbWV0aG9kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgLyoqXHJcbiAgICAgKiAhZW4gVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBmb3IgYW55IHRhcmdldCB3aGljaCBuZWVkcyB0byBzY2hlZHVsZSB0YXNrcywgYW5kIHRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgYmVmb3JlIGFueSBzY2hlZHVsZXIgQVBJIHVzYWdlLlxyXG4gICAgICogVGhpcyBtZXRob2Qgd2lsbCBhZGQgYSBgX2lkYCBwcm9wZXJ0eSBpZiBpdCBkb2Vzbid0IGV4aXN0LlxyXG4gICAgICogIXpoIOS7u+S9lemcgOimgeeUqCBTY2hlZHVsZXIg566h55CG5Lu75Yqh55qE5a+56LGh5Li75L2T6YO95bqU6K+l6LCD55So6L+Z5Liq5pa55rOV77yM5bm25LiU5bqU6K+l5Zyo6LCD55So5Lu75L2VIFNjaGVkdWxlciBBUEkg5LmL5YmN6LCD55So6L+Z5Liq5pa55rOV44CCXHJcbiAgICAgKiDov5nkuKrmlrnms5XkvJrnu5nlr7nosaHmt7vliqDkuIDkuKogYF9pZGAg5bGe5oCn77yM5aaC5p6c6L+Z5Liq5bGe5oCn5LiN5a2Y5Zyo55qE6K+d44CCXHJcbiAgICAgKiBAbWV0aG9kIGVuYWJsZUZvclRhcmdldFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gICAgICovXHJcbiAgICBlbmFibGVGb3JUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBpZiAoIXRhcmdldC5faWQpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRhcmdldC5faWQgPSBpZEdlbmVyYXRlci5nZXROZXdJZCgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIE1vZGlmaWVzIHRoZSB0aW1lIG9mIGFsbCBzY2hlZHVsZWQgY2FsbGJhY2tzLjxici8+XHJcbiAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIHByb3BlcnR5IHRvIGNyZWF0ZSBhICdzbG93IG1vdGlvbicgb3IgJ2Zhc3QgZm9yd2FyZCcgZWZmZWN0Ljxici8+XHJcbiAgICAgKiBEZWZhdWx0IGlzIDEuMC4gVG8gY3JlYXRlIGEgJ3Nsb3cgbW90aW9uJyBlZmZlY3QsIHVzZSB2YWx1ZXMgYmVsb3cgMS4wLjxici8+XHJcbiAgICAgKiBUbyBjcmVhdGUgYSAnZmFzdCBmb3J3YXJkJyBlZmZlY3QsIHVzZSB2YWx1ZXMgaGlnaGVyIHRoYW4gMS4wLjxici8+XHJcbiAgICAgKiBOb3Rl77yaSXQgd2lsbCBhZmZlY3QgRVZFUlkgc2NoZWR1bGVkIHNlbGVjdG9yIC8gYWN0aW9uLlxyXG4gICAgICogISN6aFxyXG4gICAgICog6K6+572u5pe26Ze06Ze06ZqU55qE57yp5pS+5q+U5L6L44CCPGJyLz5cclxuICAgICAqIOaCqOWPr+S7peS9v+eUqOi/meS4quaWueazleadpeWIm+W7uuS4gOS4qiDigJxzbG93IG1vdGlvbu+8iOaFouWKqOS9nO+8ieKAnSDmiJYg4oCcZmFzdCBmb3J3YXJk77yI5b+r6L+b77yJ4oCdIOeahOaViOaenOOAgjxici8+XHJcbiAgICAgKiDpu5jorqTmmK8gMS4w44CC6KaB5Yib5bu65LiA5LiqIOKAnHNsb3cgbW90aW9u77yI5oWi5Yqo5L2c77yJ4oCdIOaViOaenCzkvb/nlKjlgLzkvY7kuo4gMS4w44CCPGJyLz5cclxuICAgICAqIOimgeS9v+eUqCDigJxmYXN0IGZvcndhcmTvvIjlv6vov5vvvInigJ0g5pWI5p6c77yM5L2/55So5YC85aSn5LqOIDEuMOOAgjxici8+XHJcbiAgICAgKiDms6jmhI/vvJrlroPlvbHlk43or6UgU2NoZWR1bGVyIOS4i+euoeeQhueahOaJgOacieWumuaXtuWZqOOAglxyXG4gICAgICogQG1ldGhvZCBzZXRUaW1lU2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lU2NhbGVcclxuICAgICAqL1xyXG4gICAgc2V0VGltZVNjYWxlOiBmdW5jdGlvbiAodGltZVNjYWxlKSB7XHJcbiAgICAgICAgdGhpcy5fdGltZVNjYWxlID0gdGltZVNjYWxlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gUmV0dXJucyB0aW1lIHNjYWxlIG9mIHNjaGVkdWxlci5cclxuICAgICAqICEjemgg6I635Y+W5pe26Ze06Ze06ZqU55qE57yp5pS+5q+U5L6L44CCXHJcbiAgICAgKiBAbWV0aG9kIGdldFRpbWVTY2FsZVxyXG4gICAgICogQHJldHVybiB7TnVtYmVyfVxyXG4gICAgICovXHJcbiAgICBnZXRUaW1lU2NhbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fdGltZVNjYWxlO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gJ3VwZGF0ZScgdGhlIHNjaGVkdWxlci4gKFlvdSBzaG91bGQgTkVWRVIgY2FsbCB0aGlzIG1ldGhvZCwgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy4pXHJcbiAgICAgKiAhI3poIHVwZGF0ZSDosIPluqblh73mlbDjgIIo5LiN5bqU6K+l55u05o6l6LCD55So6L+Z5Liq5pa55rOV77yM6Zmk6Z2e5a6M5YWo5LqG6Kej6L+Z5LmI5YGa55qE57uT5p6cKVxyXG4gICAgICogQG1ldGhvZCB1cGRhdGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBkdCBkZWx0YSB0aW1lXHJcbiAgICAgKi9cclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaExvY2tlZCA9IHRydWU7XHJcbiAgICAgICAgaWYodGhpcy5fdGltZVNjYWxlICE9PSAxKVxyXG4gICAgICAgICAgICBkdCAqPSB0aGlzLl90aW1lU2NhbGU7XHJcblxyXG4gICAgICAgIHZhciBpLCBsaXN0LCBsZW4sIGVudHJ5O1xyXG5cclxuICAgICAgICBmb3IoaT0wLGxpc3Q9dGhpcy5fdXBkYXRlc05lZ0xpc3QsIGxlbiA9IGxpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKXtcclxuICAgICAgICAgICAgZW50cnkgPSBsaXN0W2ldO1xyXG4gICAgICAgICAgICBpZiAoIWVudHJ5LnBhdXNlZCAmJiAhZW50cnkubWFya2VkRm9yRGVsZXRpb24pXHJcbiAgICAgICAgICAgICAgICBlbnRyeS50YXJnZXQudXBkYXRlKGR0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihpPTAsIGxpc3Q9dGhpcy5fdXBkYXRlczBMaXN0LCBsZW49bGlzdC5sZW5ndGg7IGk8bGVuOyBpKyspe1xyXG4gICAgICAgICAgICBlbnRyeSA9IGxpc3RbaV07XHJcbiAgICAgICAgICAgIGlmICghZW50cnkucGF1c2VkICYmICFlbnRyeS5tYXJrZWRGb3JEZWxldGlvbilcclxuICAgICAgICAgICAgICAgIGVudHJ5LnRhcmdldC51cGRhdGUoZHQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGk9MCwgbGlzdD10aGlzLl91cGRhdGVzUG9zTGlzdCwgbGVuPWxpc3QubGVuZ3RoOyBpPGxlbjsgaSsrKXtcclxuICAgICAgICAgICAgZW50cnkgPSBsaXN0W2ldO1xyXG4gICAgICAgICAgICBpZiAoIWVudHJ5LnBhdXNlZCAmJiAhZW50cnkubWFya2VkRm9yRGVsZXRpb24pXHJcbiAgICAgICAgICAgICAgICBlbnRyeS50YXJnZXQudXBkYXRlKGR0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIGN1c3RvbSBzZWxlY3RvcnNcclxuICAgICAgICB2YXIgZWx0LCBhcnIgPSB0aGlzLl9hcnJheUZvclRpbWVycztcclxuICAgICAgICBmb3IoaT0wOyBpPGFyci5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgIGVsdCA9IGFycltpXTtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFRhcmdldCA9IGVsdDtcclxuICAgICAgICAgICAgdGhpcy5fY3VycmVudFRhcmdldFNhbHZhZ2VkID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICBpZiAoIWVsdC5wYXVzZWQpe1xyXG4gICAgICAgICAgICAgICAgLy8gVGhlICd0aW1lcnMnIGFycmF5IG1heSBjaGFuZ2Ugd2hpbGUgaW5zaWRlIHRoaXMgbG9vcFxyXG4gICAgICAgICAgICAgICAgZm9yIChlbHQudGltZXJJbmRleCA9IDA7IGVsdC50aW1lckluZGV4IDwgZWx0LnRpbWVycy5sZW5ndGg7ICsrKGVsdC50aW1lckluZGV4KSl7XHJcbiAgICAgICAgICAgICAgICAgICAgZWx0LmN1cnJlbnRUaW1lciA9IGVsdC50aW1lcnNbZWx0LnRpbWVySW5kZXhdO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsdC5jdXJyZW50VGltZXJTYWx2YWdlZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBlbHQuY3VycmVudFRpbWVyLnVwZGF0ZShkdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWx0LmN1cnJlbnRUaW1lciA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIG9ubHkgZGVsZXRlIGN1cnJlbnRUYXJnZXQgaWYgbm8gYWN0aW9ucyB3ZXJlIHNjaGVkdWxlZCBkdXJpbmcgdGhlIGN5Y2xlIChpc3N1ZSAjNDgxKVxyXG4gICAgICAgICAgICBpZiAodGhpcy5fY3VycmVudFRhcmdldFNhbHZhZ2VkICYmIHRoaXMuX2N1cnJlbnRUYXJnZXQudGltZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlSGFzaEVsZW1lbnQodGhpcy5fY3VycmVudFRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICAtLWk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGRlbGV0ZSBhbGwgdXBkYXRlcyB0aGF0IGFyZSBtYXJrZWQgZm9yIGRlbGV0aW9uXHJcbiAgICAgICAgLy8gdXBkYXRlcyB3aXRoIHByaW9yaXR5IDwgMFxyXG4gICAgICAgIGZvcihpPTAsbGlzdD10aGlzLl91cGRhdGVzTmVnTGlzdDsgaTxsaXN0Lmxlbmd0aDsgKXtcclxuICAgICAgICAgICAgZW50cnkgPSBsaXN0W2ldO1xyXG4gICAgICAgICAgICBpZihlbnRyeS5tYXJrZWRGb3JEZWxldGlvbilcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVVwZGF0ZUZyb21IYXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yKGk9MCwgbGlzdD10aGlzLl91cGRhdGVzMExpc3Q7IGk8bGlzdC5sZW5ndGg7ICl7XHJcbiAgICAgICAgICAgIGVudHJ5ID0gbGlzdFtpXTtcclxuICAgICAgICAgICAgaWYgKGVudHJ5Lm1hcmtlZEZvckRlbGV0aW9uKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlVXBkYXRlRnJvbUhhc2goZW50cnkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IoaT0wLCBsaXN0PXRoaXMuX3VwZGF0ZXNQb3NMaXN0OyBpPGxpc3QubGVuZ3RoOyApe1xyXG4gICAgICAgICAgICBlbnRyeSA9IGxpc3RbaV07XHJcbiAgICAgICAgICAgIGlmIChlbnRyeS5tYXJrZWRGb3JEZWxldGlvbilcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVVwZGF0ZUZyb21IYXNoKGVudHJ5KTtcclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaExvY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX2N1cnJlbnRUYXJnZXQgPSBudWxsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIDxwPlxyXG4gICAgICogICBUaGUgc2NoZWR1bGVkIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBldmVyeSAnaW50ZXJ2YWwnIHNlY29uZHMuPGJyLz5cclxuICAgICAqICAgSWYgcGF1c2VkIGlzIFlFUywgdGhlbiBpdCB3b24ndCBiZSBjYWxsZWQgdW50aWwgaXQgaXMgcmVzdW1lZC48YnIvPlxyXG4gICAgICogICBJZiAnaW50ZXJ2YWwnIGlzIDAsIGl0IHdpbGwgYmUgY2FsbGVkIGV2ZXJ5IGZyYW1lLCBidXQgaWYgc28sIGl0IHJlY29tbWVuZGVkIHRvIHVzZSAnc2NoZWR1bGVVcGRhdGVGb3JUYXJnZXQ6JyBpbnN0ZWFkLjxici8+XHJcbiAgICAgKiAgIElmIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBhbHJlYWR5IHNjaGVkdWxlZCwgdGhlbiBvbmx5IHRoZSBpbnRlcnZhbCBwYXJhbWV0ZXIgd2lsbCBiZSB1cGRhdGVkIHdpdGhvdXQgcmUtc2NoZWR1bGluZyBpdCBhZ2Fpbi48YnIvPlxyXG4gICAgICogICByZXBlYXQgbGV0IHRoZSBhY3Rpb24gYmUgcmVwZWF0ZWQgcmVwZWF0ICsgMSB0aW1lcywgdXNlIGNjLm1hY3JvLlJFUEVBVF9GT1JFVkVSIHRvIGxldCB0aGUgYWN0aW9uIHJ1biBjb250aW51b3VzbHk8YnIvPlxyXG4gICAgICogICBkZWxheSBpcyB0aGUgYW1vdW50IG9mIHRpbWUgdGhlIGFjdGlvbiB3aWxsIHdhaXQgYmVmb3JlIGl0J2xsIHN0YXJ0PGJyLz5cclxuICAgICAqIDwvcD5cclxuICAgICAqICEjemhcclxuICAgICAqIOaMh+WumuWbnuiwg+WHveaVsO+8jOiwg+eUqOWvueixoeetieS/oeaBr+adpea3u+WKoOS4gOS4quaWsOeahOWumuaXtuWZqOOAgjxici8+XHJcbiAgICAgKiDlpoLmnpwgcGF1c2VkIOWAvOS4uiB0cnVl77yM6YKj5LmI55u05YiwIHJlc3VtZSDooqvosIPnlKjmiY3lvIDlp4vorqHml7bjgII8YnIvPlxyXG4gICAgICog5b2T5pe26Ze06Ze06ZqU6L6+5Yiw5oyH5a6a5YC85pe277yM6K6+572u55qE5Zue6LCD5Ye95pWw5bCG5Lya6KKr6LCD55So44CCPGJyLz5cclxuICAgICAqIOWmguaenCBpbnRlcnZhbCDlgLzkuLogMO+8jOmCo+S5iOWbnuiwg+WHveaVsOavj+S4gOW4p+mDveS8muiiq+iwg+eUqO+8jOS9huWmguaenOaYr+i/meagt++8jFxyXG4gICAgICog5bu66K6u5L2/55SoIHNjaGVkdWxlVXBkYXRlRm9yVGFyZ2V0IOS7o+abv+OAgjxici8+XHJcbiAgICAgKiDlpoLmnpzlm57osIPlh73mlbDlt7Lnu4/ooqvlrprml7blmajkvb/nlKjvvIzpgqPkuYjlj6rkvJrmm7TmlrDkuYvliY3lrprml7blmajnmoTml7bpl7Tpl7TpmpTlj4LmlbDvvIzkuI3kvJrorr7nva7mlrDnmoTlrprml7blmajjgII8YnIvPlxyXG4gICAgICogcmVwZWF0IOWAvOWPr+S7peiuqeWumuaXtuWZqOinpuWPkSByZXBlYXQgKyAxIOasoe+8jOS9v+eUqCBjYy5tYWNyby5SRVBFQVRfRk9SRVZFUlxyXG4gICAgICog5Y+v5Lul6K6p5a6a5pe25Zmo5LiA55u05b6q546v6Kem5Y+R44CCPGJyLz5cclxuICAgICAqIGRlbGF5IOWAvOaMh+WumuW7tui/n+aXtumXtO+8jOWumuaXtuWZqOS8muWcqOW7tui/n+aMh+WumueahOaXtumXtOS5i+WQjuW8gOWni+iuoeaXtuOAglxyXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbnRlcnZhbFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtyZXBlYXQ9Y2MubWFjcm8uUkVQRUFUX0ZPUkVWRVJdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGF5PTBdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHBhdXNlZFxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS9DQ1NjaGVkdWxlci9zY2hlZHVsZS5qc31cclxuICAgICAqIEB0eXBlc2NyaXB0XHJcbiAgICAgKiBzY2hlZHVsZShjYWxsYmFjazogRnVuY3Rpb24sIHRhcmdldDogYW55LCBpbnRlcnZhbDogbnVtYmVyLCByZXBlYXQ6IG51bWJlciwgZGVsYXk6IG51bWJlciwgcGF1c2VkPzogYm9vbGVhbik6IHZvaWRcclxuICAgICAqIHNjaGVkdWxlKGNhbGxiYWNrOiBGdW5jdGlvbiwgdGFyZ2V0OiBhbnksIGludGVydmFsOiBudW1iZXIsIHBhdXNlZD86IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgKi9cclxuICAgIHNjaGVkdWxlOiBmdW5jdGlvbiAoY2FsbGJhY2ssIHRhcmdldCwgaW50ZXJ2YWwsIHJlcGVhdCwgZGVsYXksIHBhdXNlZCkge1xyXG4gICAgICAgICd1c2Ugc3RyaWN0JztcclxuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICAgIHZhciB0bXAgPSBjYWxsYmFjaztcclxuICAgICAgICAgICAgY2FsbGJhY2sgPSB0YXJnZXQ7XHJcbiAgICAgICAgICAgIHRhcmdldCA9IHRtcDtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy9zZWxlY3RvciwgdGFyZ2V0LCBpbnRlcnZhbCwgcmVwZWF0LCBkZWxheSwgcGF1c2VkXHJcbiAgICAgICAgLy9zZWxlY3RvciwgdGFyZ2V0LCBpbnRlcnZhbCwgcGF1c2VkXHJcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDQgfHwgYXJndW1lbnRzLmxlbmd0aCA9PT0gNSkge1xyXG4gICAgICAgICAgICBwYXVzZWQgPSAhIXJlcGVhdDtcclxuICAgICAgICAgICAgcmVwZWF0ID0gY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVI7XHJcbiAgICAgICAgICAgIGRlbGF5ID0gMDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNjLmFzc2VydElEKHRhcmdldCwgMTUwMik7XHJcblxyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9oYXNoRm9yVGltZXJzW3RhcmdldElkXTtcclxuICAgICAgICBpZiAoIWVsZW1lbnQpIHtcclxuICAgICAgICAgICAgLy8gSXMgdGhpcyB0aGUgMXN0IGVsZW1lbnQgPyBUaGVuIHNldCB0aGUgcGF1c2UgbGV2ZWwgdG8gYWxsIHRoZSBjYWxsYmFja19mbnMgb2YgdGhpcyB0YXJnZXRcclxuICAgICAgICAgICAgZWxlbWVudCA9IEhhc2hUaW1lckVudHJ5LmdldChudWxsLCB0YXJnZXQsIDAsIG51bGwsIG51bGwsIHBhdXNlZCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2FycmF5Rm9yVGltZXJzLnB1c2goZWxlbWVudCk7XHJcbiAgICAgICAgICAgIHRoaXMuX2hhc2hGb3JUaW1lcnNbdGFyZ2V0SWRdID0gZWxlbWVudDtcclxuICAgICAgICB9IGVsc2UgaWYgKGVsZW1lbnQucGF1c2VkICE9PSBwYXVzZWQpIHtcclxuICAgICAgICAgICAgY2Mud2FybklEKDE1MTEpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdmFyIHRpbWVyLCBpO1xyXG4gICAgICAgIGlmIChlbGVtZW50LnRpbWVycyA9PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQudGltZXJzID0gW107XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgZWxlbWVudC50aW1lcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHRpbWVyID0gZWxlbWVudC50aW1lcnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAodGltZXIgJiYgY2FsbGJhY2sgPT09IHRpbWVyLl9jYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDE1MDcsIHRpbWVyLmdldEludGVydmFsKCksIGludGVydmFsKTtcclxuICAgICAgICAgICAgICAgICAgICB0aW1lci5faW50ZXJ2YWwgPSBpbnRlcnZhbDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRpbWVyID0gQ2FsbGJhY2tUaW1lci5nZXQoKTtcclxuICAgICAgICB0aW1lci5pbml0V2l0aENhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCB0YXJnZXQsIGludGVydmFsLCByZXBlYXQsIGRlbGF5KTtcclxuICAgICAgICBlbGVtZW50LnRpbWVycy5wdXNoKHRpbWVyKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUYXJnZXQgPT09IGVsZW1lbnQgJiYgdGhpcy5fY3VycmVudFRhcmdldFNhbHZhZ2VkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRUYXJnZXRTYWx2YWdlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBTY2hlZHVsZXMgdGhlIHVwZGF0ZSBjYWxsYmFjayBmb3IgYSBnaXZlbiB0YXJnZXQsXHJcbiAgICAgKiBEdXJpbmcgZXZlcnkgZnJhbWUgYWZ0ZXIgc2NoZWR1bGUgc3RhcnRlZCwgdGhlIFwidXBkYXRlXCIgZnVuY3Rpb24gb2YgdGFyZ2V0IHdpbGwgYmUgaW52b2tlZC5cclxuICAgICAqICEjemhcclxuICAgICAqIOS9v+eUqOaMh+WumueahOS8mOWFiOe6p+S4uuaMh+WumueahOWvueixoeiuvue9riB1cGRhdGUg5a6a5pe25Zmo44CCXHJcbiAgICAgKiB1cGRhdGUg5a6a5pe25Zmo5q+P5LiA5bin6YO95Lya6KKr6Kem5Y+R77yM6Kem5Y+R5pe26Ieq5Yqo6LCD55So5oyH5a6a5a+56LGh55qEIFwidXBkYXRlXCIg5Ye95pWw44CCXHJcbiAgICAgKiDkvJjlhYjnuqfnmoTlgLzotorkvY7vvIzlrprml7blmajooqvop6blj5HnmoTotorml6njgIJcclxuICAgICAqIEBtZXRob2Qgc2NoZWR1bGVVcGRhdGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBwcmlvcml0eVxyXG4gICAgICogQHBhcmFtIHtCb29sZWFufSBwYXVzZWRcclxuICAgICAqL1xyXG4gICAgc2NoZWR1bGVVcGRhdGU6IGZ1bmN0aW9uKHRhcmdldCwgcHJpb3JpdHksIHBhdXNlZCkge1xyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGhhc2hFbGVtZW50ID0gdGhpcy5faGFzaEZvclVwZGF0ZXNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIGlmIChoYXNoRWxlbWVudCAmJiBoYXNoRWxlbWVudC5lbnRyeSl7XHJcbiAgICAgICAgICAgIC8vIGNoZWNrIGlmIHByaW9yaXR5IGhhcyBjaGFuZ2VkXHJcbiAgICAgICAgICAgIGlmIChoYXNoRWxlbWVudC5lbnRyeS5wcmlvcml0eSAhPT0gcHJpb3JpdHkpe1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX3VwZGF0ZUhhc2hMb2NrZWQpe1xyXG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDE1MDYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGhhc2hFbGVtZW50LmVudHJ5Lm1hcmtlZEZvckRlbGV0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaGFzaEVsZW1lbnQuZW50cnkucGF1c2VkID0gcGF1c2VkO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1lbHNle1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHdpbGwgYmUgYWRkZWQgYWdhaW4gb3V0c2lkZSBpZiAoaGFzaEVsZW1lbnQpLlxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zY2hlZHVsZVVwZGF0ZSh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9ZWxzZXtcclxuICAgICAgICAgICAgICAgIGhhc2hFbGVtZW50LmVudHJ5Lm1hcmtlZEZvckRlbGV0aW9uID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBoYXNoRWxlbWVudC5lbnRyeS5wYXVzZWQgPSBwYXVzZWQ7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBsaXN0RWxlbWVudCA9IExpc3RFbnRyeS5nZXQodGFyZ2V0LCBwcmlvcml0eSwgcGF1c2VkLCBmYWxzZSk7XHJcbiAgICAgICAgdmFyIHBwTGlzdDtcclxuXHJcbiAgICAgICAgLy8gbW9zdCBvZiB0aGUgdXBkYXRlcyBhcmUgZ29pbmcgdG8gYmUgMCwgdGhhdCdzIHdheSB0aGVyZVxyXG4gICAgICAgIC8vIGlzIGFuIHNwZWNpYWwgbGlzdCBmb3IgdXBkYXRlcyB3aXRoIHByaW9yaXR5IDBcclxuICAgICAgICBpZiAocHJpb3JpdHkgPT09IDApIHtcclxuICAgICAgICAgICAgcHBMaXN0ID0gdGhpcy5fdXBkYXRlczBMaXN0O1xyXG4gICAgICAgICAgICB0aGlzLl9hcHBlbmRJbihwcExpc3QsIGxpc3RFbGVtZW50KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHBwTGlzdCA9IHByaW9yaXR5IDwgMCA/IHRoaXMuX3VwZGF0ZXNOZWdMaXN0IDogdGhpcy5fdXBkYXRlc1Bvc0xpc3Q7XHJcbiAgICAgICAgICAgIHRoaXMuX3ByaW9yaXR5SW4ocHBMaXN0LCBsaXN0RWxlbWVudCwgcHJpb3JpdHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy91cGRhdGUgaGFzaCBlbnRyeSBmb3IgcXVpY2sgYWNjZXNzXHJcbiAgICAgICAgdGhpcy5faGFzaEZvclVwZGF0ZXNbdGFyZ2V0SWRdID0gSGFzaFVwZGF0ZUVudHJ5LmdldChwcExpc3QsIGxpc3RFbGVtZW50LCB0YXJnZXQsIG51bGwpO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIFVuc2NoZWR1bGVzIGEgY2FsbGJhY2sgZm9yIGEgY2FsbGJhY2sgYW5kIGEgZ2l2ZW4gdGFyZ2V0LlxyXG4gICAgICogSWYgeW91IHdhbnQgdG8gdW5zY2hlZHVsZSB0aGUgXCJ1cGRhdGVcIiwgdXNlIGB1bnNjaGVkdWxlVXBkYXRlKClgXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDlj5bmtojmjIflrprlr7nosaHlrprml7blmajjgIJcclxuICAgICAqIOWmguaenOmcgOimgeWPlua2iCB1cGRhdGUg5a6a5pe25Zmo77yM6K+35L2/55SoIHVuc2NoZWR1bGVVcGRhdGUoKeOAglxyXG4gICAgICogQG1ldGhvZCB1bnNjaGVkdWxlXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gYmUgdW5zY2hlZHVsZWRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIHRhcmdldCBib3VuZCB0byB0aGUgY2FsbGJhY2suXHJcbiAgICAgKi9cclxuICAgIHVuc2NoZWR1bGU6IGZ1bmN0aW9uIChjYWxsYmFjaywgdGFyZ2V0KSB7XHJcbiAgICAgICAgLy9jYWxsYmFjaywgdGFyZ2V0XHJcblxyXG4gICAgICAgIC8vIGV4cGxpY2l0eSBoYW5kbGUgbmlsIGFyZ3VtZW50cyB3aGVuIHJlbW92aW5nIGFuIG9iamVjdFxyXG4gICAgICAgIGlmICghdGFyZ2V0IHx8ICFjYWxsYmFjaylcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBzZWxmID0gdGhpcywgZWxlbWVudCA9IHNlbGYuX2hhc2hGb3JUaW1lcnNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB0aW1lcnMgPSBlbGVtZW50LnRpbWVycztcclxuICAgICAgICAgICAgZm9yKHZhciBpID0gMCwgbGkgPSB0aW1lcnMubGVuZ3RoOyBpIDwgbGk7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSB0aW1lcnNbaV07XHJcbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHRpbWVyLl9jYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgodGltZXIgPT09IGVsZW1lbnQuY3VycmVudFRpbWVyKSAmJiAoIWVsZW1lbnQuY3VycmVudFRpbWVyU2FsdmFnZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudFRpbWVyU2FsdmFnZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB0aW1lcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIENhbGxiYWNrVGltZXIucHV0KHRpbWVyKTtcclxuICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aW1lckluZGV4IGluIGNhc2Ugd2UgYXJlIGluIHRpY2s7LCBsb29waW5nIG92ZXIgdGhlIGFjdGlvbnNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbWVudC50aW1lckluZGV4ID49IGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50aW1lckluZGV4LS07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXJzLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZi5fY3VycmVudFRhcmdldCA9PT0gZWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fY3VycmVudFRhcmdldFNhbHZhZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuX3JlbW92ZUhhc2hFbGVtZW50KGVsZW1lbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogISNlbiBVbnNjaGVkdWxlcyB0aGUgdXBkYXRlIGNhbGxiYWNrIGZvciBhIGdpdmVuIHRhcmdldC5cclxuICAgICAqICEjemgg5Y+W5raI5oyH5a6a5a+56LGh55qEIHVwZGF0ZSDlrprml7blmajjgIJcclxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZVVwZGF0ZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IHRvIGJlIHVuc2NoZWR1bGVkLlxyXG4gICAgICovXHJcbiAgICB1bnNjaGVkdWxlVXBkYXRlOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgaWYgKCF0YXJnZXQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xyXG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXTtcclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fdXBkYXRlSGFzaExvY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5lbnRyeS5tYXJrZWRGb3JEZWxldGlvbiA9IHRydWU7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVVcGRhdGVGcm9tSGFzaChlbGVtZW50LmVudHJ5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqIFxyXG4gICAgICogISNlblxyXG4gICAgICogVW5zY2hlZHVsZXMgYWxsIHNjaGVkdWxlZCBjYWxsYmFja3MgZm9yIGEgZ2l2ZW4gdGFyZ2V0LlxyXG4gICAgICogVGhpcyBhbHNvIGluY2x1ZGVzIHRoZSBcInVwZGF0ZVwiIGNhbGxiYWNrLlxyXG4gICAgICogISN6aCDlj5bmtojmjIflrprlr7nosaHnmoTmiYDmnInlrprml7blmajvvIzljIXmi6wgdXBkYXRlIOWumuaXtuWZqOOAglxyXG4gICAgICogQG1ldGhvZCB1bnNjaGVkdWxlQWxsRm9yVGFyZ2V0XHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgdG8gYmUgdW5zY2hlZHVsZWQuXHJcbiAgICAgKi9cclxuICAgIHVuc2NoZWR1bGVBbGxGb3JUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICAvLyBleHBsaWNpdCBudWxscHRyIGhhbmRsaW5nXHJcbiAgICAgICAgaWYgKCF0YXJnZXQpe1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIEN1c3RvbSBTZWxlY3RvcnNcclxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2hhc2hGb3JUaW1lcnNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIHZhciB0aW1lcnMgPSBlbGVtZW50LnRpbWVycztcclxuICAgICAgICAgICAgaWYgKHRpbWVycy5pbmRleE9mKGVsZW1lbnQuY3VycmVudFRpbWVyKSA+IC0xICYmIFxyXG4gICAgICAgICAgICAgICAgKCFlbGVtZW50LmN1cnJlbnRUaW1lclNhbHZhZ2VkKSkge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5jdXJyZW50VGltZXJTYWx2YWdlZCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aW1lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBDYWxsYmFja1RpbWVyLnB1dCh0aW1lcnNbaV0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRpbWVycy5sZW5ndGggPSAwO1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUYXJnZXQgPT09IGVsZW1lbnQpe1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fY3VycmVudFRhcmdldFNhbHZhZ2VkID0gdHJ1ZTtcclxuICAgICAgICAgICAgfWVsc2V7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVIYXNoRWxlbWVudChlbGVtZW50KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gdXBkYXRlIHNlbGVjdG9yXHJcbiAgICAgICAgdGhpcy51bnNjaGVkdWxlVXBkYXRlKHRhcmdldCk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogVW5zY2hlZHVsZXMgYWxsIHNjaGVkdWxlZCBjYWxsYmFja3MgZnJvbSBhbGwgdGFyZ2V0cyBpbmNsdWRpbmcgdGhlIHN5c3RlbSBjYWxsYmFja3MuPGJyLz5cclxuICAgICAqIFlvdSBzaG91bGQgTkVWRVIgY2FsbCB0aGlzIG1ldGhvZCwgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cclxuICAgICAqICEjemhcclxuICAgICAqIOWPlua2iOaJgOacieWvueixoeeahOaJgOacieWumuaXtuWZqO+8jOWMheaLrOezu+e7n+WumuaXtuWZqOOAgjxici8+XHJcbiAgICAgKiDkuI3nlKjosIPnlKjmraTlh73mlbDvvIzpmaTpnZ7kvaDnoa7lrprkvaDlnKjlgZrku4DkuYjjgIJcclxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZUFsbFxyXG4gICAgICovXHJcbiAgICB1bnNjaGVkdWxlQWxsOiBmdW5jdGlvbigpe1xyXG4gICAgICAgIHRoaXMudW5zY2hlZHVsZUFsbFdpdGhNaW5Qcmlvcml0eShjYy5TY2hlZHVsZXIuUFJJT1JJVFlfU1lTVEVNKTtcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBVbnNjaGVkdWxlcyBhbGwgY2FsbGJhY2tzIGZyb20gYWxsIHRhcmdldHMgd2l0aCBhIG1pbmltdW0gcHJpb3JpdHkuPGJyLz5cclxuICAgICAqIFlvdSBzaG91bGQgb25seSBjYWxsIHRoaXMgd2l0aCBgUFJJT1JJVFlfTk9OX1NZU1RFTV9NSU5gIG9yIGhpZ2hlci5cclxuICAgICAqICEjemhcclxuICAgICAqIOWPlua2iOaJgOacieS8mOWFiOe6p+eahOWAvOWkp+S6juaMh+WumuS8mOWFiOe6p+eahOWumuaXtuWZqOOAgjxici8+XHJcbiAgICAgKiDkvaDlupTor6Xlj6rlj5bmtojkvJjlhYjnuqfnmoTlgLzlpKfkuo4gUFJJT1JJVFlfTk9OX1NZU1RFTV9NSU4g55qE5a6a5pe25Zmo44CCXHJcbiAgICAgKiBAbWV0aG9kIHVuc2NoZWR1bGVBbGxXaXRoTWluUHJpb3JpdHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtaW5Qcmlvcml0eSBUaGUgbWluaW11bSBwcmlvcml0eSBvZiBzZWxlY3RvciB0byBiZSB1bnNjaGVkdWxlZC4gV2hpY2ggbWVhbnMsIGFsbCBzZWxlY3RvcnMgd2hpY2hcclxuICAgICAqICAgICAgICBwcmlvcml0eSBpcyBoaWdoZXIgdGhhbiBtaW5Qcmlvcml0eSB3aWxsIGJlIHVuc2NoZWR1bGVkLlxyXG4gICAgICovXHJcbiAgICB1bnNjaGVkdWxlQWxsV2l0aE1pblByaW9yaXR5OiBmdW5jdGlvbihtaW5Qcmlvcml0eSl7XHJcbiAgICAgICAgLy8gQ3VzdG9tIFNlbGVjdG9yc1xyXG4gICAgICAgIHZhciBpLCBlbGVtZW50LCBhcnIgPSB0aGlzLl9hcnJheUZvclRpbWVycztcclxuICAgICAgICBmb3IoaT1hcnIubGVuZ3RoLTE7IGk+PTA7IGktLSl7XHJcbiAgICAgICAgICAgIGVsZW1lbnQgPSBhcnJbaV07XHJcbiAgICAgICAgICAgIHRoaXMudW5zY2hlZHVsZUFsbEZvclRhcmdldChlbGVtZW50LnRhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBVcGRhdGVzIHNlbGVjdG9yc1xyXG4gICAgICAgIHZhciBlbnRyeTtcclxuICAgICAgICB2YXIgdGVtcF9sZW5ndGggPSAwO1xyXG4gICAgICAgIGlmKG1pblByaW9yaXR5IDwgMCl7XHJcbiAgICAgICAgICAgIGZvcihpPTA7IGk8dGhpcy5fdXBkYXRlc05lZ0xpc3QubGVuZ3RoOyApe1xyXG4gICAgICAgICAgICAgICAgdGVtcF9sZW5ndGggPSB0aGlzLl91cGRhdGVzTmVnTGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXNOZWdMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYoZW50cnkgJiYgZW50cnkucHJpb3JpdHkgPj0gbWluUHJpb3JpdHkpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNjaGVkdWxlVXBkYXRlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodGVtcF9sZW5ndGggPT0gdGhpcy5fdXBkYXRlc05lZ0xpc3QubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGkrKztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYobWluUHJpb3JpdHkgPD0gMCl7XHJcbiAgICAgICAgICAgIGZvcihpPTA7IGk8dGhpcy5fdXBkYXRlczBMaXN0Lmxlbmd0aDsgKXtcclxuICAgICAgICAgICAgICAgIHRlbXBfbGVuZ3RoID0gdGhpcy5fdXBkYXRlczBMaXN0Lmxlbmd0aDtcclxuICAgICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fdXBkYXRlczBMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5KVxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zY2hlZHVsZVVwZGF0ZShlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHRlbXBfbGVuZ3RoID09IHRoaXMuX3VwZGF0ZXMwTGlzdC5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICAgICAgaSsrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IoaT0wOyBpPHRoaXMuX3VwZGF0ZXNQb3NMaXN0Lmxlbmd0aDsgKXtcclxuICAgICAgICAgICAgdGVtcF9sZW5ndGggPSB0aGlzLl91cGRhdGVzUG9zTGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fdXBkYXRlc1Bvc0xpc3RbaV07XHJcbiAgICAgICAgICAgIGlmKGVudHJ5ICYmIGVudHJ5LnByaW9yaXR5ID49IG1pblByaW9yaXR5KVxyXG4gICAgICAgICAgICAgICAgdGhpcy51bnNjaGVkdWxlVXBkYXRlKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmICh0ZW1wX2xlbmd0aCA9PSB0aGlzLl91cGRhdGVzUG9zTGlzdC5sZW5ndGgpXHJcbiAgICAgICAgICAgICAgICBpKys7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKiogXHJcbiAgICAgKiAhI2VuIENoZWNrcyB3aGV0aGVyIGEgY2FsbGJhY2sgZm9yIGEgZ2l2ZW4gdGFyZ2V0IGlzIHNjaGVkdWxlZC5cclxuICAgICAqICEjemgg5qOA5p+l5oyH5a6a55qE5Zue6LCD5Ye95pWw5ZKM5Zue6LCD5a+56LGh57uE5ZCI5piv5ZCm5a2Y5Zyo5a6a5pe25Zmo44CCXHJcbiAgICAgKiBAbWV0aG9kIGlzU2NoZWR1bGVkXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gY2hlY2suXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgb2YgdGhlIGNhbGxiYWNrLlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGlzIGludm9rZWQsIGZhbHNlIGlmIG5vdC5cclxuICAgICAqL1xyXG4gICAgaXNTY2hlZHVsZWQ6IGZ1bmN0aW9uKGNhbGxiYWNrLCB0YXJnZXQpe1xyXG4gICAgICAgIC8va2V5LCB0YXJnZXRcclxuICAgICAgICAvL3NlbGVjdG9yLCB0YXJnZXRcclxuICAgICAgICBjYy5hc3NlcnRJRChjYWxsYmFjaywgMTUwOCk7XHJcbiAgICAgICAgY2MuYXNzZXJ0SUQodGFyZ2V0LCAxNTA5KTtcclxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xyXG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XHJcblxyXG4gICAgICAgIGlmICghZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoZWxlbWVudC50aW1lcnMgPT0gbnVsbCl7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHZhciB0aW1lcnMgPSBlbGVtZW50LnRpbWVycztcclxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aW1lcnMubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lciA9ICB0aW1lcnNbaV07XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGNhbGxiYWNrID09PSB0aW1lci5fY2FsbGJhY2spe1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogUGF1c2UgYWxsIHNlbGVjdG9ycyBmcm9tIGFsbCB0YXJnZXRzLjxici8+XHJcbiAgICAgKiBZb3Ugc2hvdWxkIE5FVkVSIGNhbGwgdGhpcyBtZXRob2QsIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDmmoLlgZzmiYDmnInlr7nosaHnmoTmiYDmnInlrprml7blmajjgII8YnIvPlxyXG4gICAgICog5LiN6KaB6LCD55So6L+Z5Liq5pa55rOV77yM6Zmk6Z2e5L2g55+l6YGT5L2g5q2j5Zyo5YGa5LuA5LmI44CCXHJcbiAgICAgKiBAbWV0aG9kIHBhdXNlQWxsVGFyZ2V0c1xyXG4gICAgICovXHJcbiAgICBwYXVzZUFsbFRhcmdldHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5wYXVzZUFsbFRhcmdldHNXaXRoTWluUHJpb3JpdHkoY2MuU2NoZWR1bGVyLlBSSU9SSVRZX1NZU1RFTSk7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogUGF1c2UgYWxsIHNlbGVjdG9ycyBmcm9tIGFsbCB0YXJnZXRzIHdpdGggYSBtaW5pbXVtIHByaW9yaXR5LiA8YnIvPlxyXG4gICAgICogWW91IHNob3VsZCBvbmx5IGNhbGwgdGhpcyB3aXRoIGtDQ1ByaW9yaXR5Tm9uU3lzdGVtTWluIG9yIGhpZ2hlci5cclxuICAgICAqICEjemhcclxuICAgICAqIOaaguWBnOaJgOacieS8mOWFiOe6p+eahOWAvOWkp+S6juaMh+WumuS8mOWFiOe6p+eahOWumuaXtuWZqOOAgjxici8+XHJcbiAgICAgKiDkvaDlupTor6Xlj6rmmoLlgZzkvJjlhYjnuqfnmoTlgLzlpKfkuo4gUFJJT1JJVFlfTk9OX1NZU1RFTV9NSU4g55qE5a6a5pe25Zmo44CCXHJcbiAgICAgKiBAbWV0aG9kIHBhdXNlQWxsVGFyZ2V0c1dpdGhNaW5Qcmlvcml0eVxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IG1pblByaW9yaXR5XHJcbiAgICAgKi9cclxuICAgIHBhdXNlQWxsVGFyZ2V0c1dpdGhNaW5Qcmlvcml0eTogZnVuY3Rpb24gKG1pblByaW9yaXR5KSB7XHJcbiAgICAgICAgdmFyIGlkc1dpdGhTZWxlY3RvcnMgPSBbXTtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBlbGVtZW50LCBsb2NBcnJheUZvclRpbWVycyA9IHNlbGYuX2FycmF5Rm9yVGltZXJzO1xyXG4gICAgICAgIHZhciBpLCBsaTtcclxuICAgICAgICAvLyBDdXN0b20gU2VsZWN0b3JzXHJcbiAgICAgICAgZm9yKGkgPSAwLCBsaSA9IGxvY0FycmF5Rm9yVGltZXJzLmxlbmd0aDsgaSA8IGxpOyBpKyspe1xyXG4gICAgICAgICAgICBlbGVtZW50ID0gbG9jQXJyYXlGb3JUaW1lcnNbaV07XHJcbiAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBpZHNXaXRoU2VsZWN0b3JzLnB1c2goZWxlbWVudC50YXJnZXQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB2YXIgZW50cnk7XHJcbiAgICAgICAgaWYobWluUHJpb3JpdHkgPCAwKXtcclxuICAgICAgICAgICAgZm9yKGk9MDsgaTx0aGlzLl91cGRhdGVzTmVnTGlzdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXNOZWdMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVudHJ5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYoZW50cnkucHJpb3JpdHkgPj0gbWluUHJpb3JpdHkpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5wYXVzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZHNXaXRoU2VsZWN0b3JzLnB1c2goZW50cnkudGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmKG1pblByaW9yaXR5IDw9IDApe1xyXG4gICAgICAgICAgICBmb3IoaT0wOyBpPHRoaXMuX3VwZGF0ZXMwTGlzdC5sZW5ndGg7IGkrKyl7XHJcbiAgICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXMwTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRyeSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVudHJ5LnBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgaWRzV2l0aFNlbGVjdG9ycy5wdXNoKGVudHJ5LnRhcmdldCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvcihpPTA7IGk8dGhpcy5fdXBkYXRlc1Bvc0xpc3QubGVuZ3RoOyBpKyspe1xyXG4gICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXNQb3NMaXN0W2ldO1xyXG4gICAgICAgICAgICBpZiAoZW50cnkpIHtcclxuICAgICAgICAgICAgICAgIGlmKGVudHJ5LnByaW9yaXR5ID49IG1pblByaW9yaXR5KXtcclxuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wYXVzZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlkc1dpdGhTZWxlY3RvcnMucHVzaChlbnRyeS50YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gaWRzV2l0aFNlbGVjdG9ycztcclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBSZXN1bWUgc2VsZWN0b3JzIG9uIGEgc2V0IG9mIHRhcmdldHMuPGJyLz5cclxuICAgICAqIFRoaXMgY2FuIGJlIHVzZWZ1bCBmb3IgdW5kb2luZyBhIGNhbGwgdG8gcGF1c2VBbGxDYWxsYmFja3MuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDmgaLlpI3mjIflrprmlbDnu4TkuK3miYDmnInlr7nosaHnmoTlrprml7blmajjgII8YnIvPlxyXG4gICAgICog6L+Z5Liq5Ye95pWw5pivIHBhdXNlQWxsQ2FsbGJhY2tzIOeahOmAhuaTjeS9nOOAglxyXG4gICAgICogQG1ldGhvZCByZXN1bWVUYXJnZXRzXHJcbiAgICAgKiBAcGFyYW0ge0FycmF5fSB0YXJnZXRzVG9SZXN1bWVcclxuICAgICAqL1xyXG4gICAgcmVzdW1lVGFyZ2V0czogZnVuY3Rpb24gKHRhcmdldHNUb1Jlc3VtZSkge1xyXG4gICAgICAgIGlmICghdGFyZ2V0c1RvUmVzdW1lKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0c1RvUmVzdW1lLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVzdW1lVGFyZ2V0KHRhcmdldHNUb1Jlc3VtZVtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIFBhdXNlcyB0aGUgdGFyZ2V0Ljxici8+XHJcbiAgICAgKiBBbGwgc2NoZWR1bGVkIHNlbGVjdG9ycy91cGRhdGUgZm9yIGEgZ2l2ZW4gdGFyZ2V0IHdvbid0IGJlICd0aWNrZWQnIHVudGlsIHRoZSB0YXJnZXQgaXMgcmVzdW1lZC48YnIvPlxyXG4gICAgICogSWYgdGhlIHRhcmdldCBpcyBub3QgcHJlc2VudCwgbm90aGluZyBoYXBwZW5zLlxyXG4gICAgICogISN6aFxyXG4gICAgICog5pqC5YGc5oyH5a6a5a+56LGh55qE5a6a5pe25Zmo44CCPGJyLz5cclxuICAgICAqIOaMh+WumuWvueixoeeahOaJgOacieWumuaXtuWZqOmDveS8muiiq+aaguWBnOOAgjxici8+XHJcbiAgICAgKiDlpoLmnpzmjIflrprnmoTlr7nosaHmsqHmnInlrprml7blmajvvIzku4DkuYjkuZ/kuI3kvJrlj5HnlJ/jgIJcclxuICAgICAqIEBtZXRob2QgcGF1c2VUYXJnZXRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqL1xyXG4gICAgcGF1c2VUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQpIHtcclxuICAgICAgICBjYy5hc3NlcnRJRCh0YXJnZXQsIDE1MDMpO1xyXG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xyXG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xyXG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vY3VzdG9tZXIgc2VsZWN0b3JzXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLCBcclxuICAgICAgICAgICAgZWxlbWVudCA9IHNlbGYuX2hhc2hGb3JUaW1lcnNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIGlmIChlbGVtZW50KSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQucGF1c2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIGNhbGxiYWNrXHJcbiAgICAgICAgdmFyIGVsZW1lbnRVcGRhdGUgPSBzZWxmLl9oYXNoRm9yVXBkYXRlc1t0YXJnZXRJZF07XHJcbiAgICAgICAgaWYgKGVsZW1lbnRVcGRhdGUpIHtcclxuICAgICAgICAgICAgZWxlbWVudFVwZGF0ZS5lbnRyeS5wYXVzZWQgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBSZXN1bWVzIHRoZSB0YXJnZXQuPGJyLz5cclxuICAgICAqIFRoZSAndGFyZ2V0JyB3aWxsIGJlIHVucGF1c2VkLCBzbyBhbGwgc2NoZWR1bGUgc2VsZWN0b3JzL3VwZGF0ZSB3aWxsIGJlICd0aWNrZWQnIGFnYWluLjxici8+XHJcbiAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzIG5vdCBwcmVzZW50LCBub3RoaW5nIGhhcHBlbnMuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDmgaLlpI3mjIflrprlr7nosaHnmoTmiYDmnInlrprml7blmajjgII8YnIvPlxyXG4gICAgICog5oyH5a6a5a+56LGh55qE5omA5pyJ5a6a5pe25Zmo5bCG57un57ut5bel5L2c44CCPGJyLz5cclxuICAgICAqIOWmguaenOaMh+WumueahOWvueixoeayoeacieWumuaXtuWZqO+8jOS7gOS5iOS5n+S4jeS8muWPkeeUn+OAglxyXG4gICAgICogQG1ldGhvZCByZXN1bWVUYXJnZXRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqL1xyXG4gICAgcmVzdW1lVGFyZ2V0OiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgY2MuYXNzZXJ0SUQodGFyZ2V0LCAxNTA0KTtcclxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xyXG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBjdXN0b20gc2VsZWN0b3JzXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxyXG4gICAgICAgICAgICBlbGVtZW50ID0gc2VsZi5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XHJcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgZWxlbWVudC5wYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vdXBkYXRlIGNhbGxiYWNrXHJcbiAgICAgICAgdmFyIGVsZW1lbnRVcGRhdGUgPSBzZWxmLl9oYXNoRm9yVXBkYXRlc1t0YXJnZXRJZF07XHJcbiAgICAgICAgaWYgKGVsZW1lbnRVcGRhdGUpIHtcclxuICAgICAgICAgICAgZWxlbWVudFVwZGF0ZS5lbnRyeS5wYXVzZWQgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB0YXJnZXQgaXMgcGF1c2VkLlxyXG4gICAgICogISN6aCDov5Tlm57mjIflrprlr7nosaHnmoTlrprml7blmajmmK/lkKbmmoLlgZzkuobjgIJcclxuICAgICAqIEBtZXRob2QgaXNUYXJnZXRQYXVzZWRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cclxuICAgIGlzVGFyZ2V0UGF1c2VkOiBmdW5jdGlvbiAodGFyZ2V0KSB7XHJcbiAgICAgICAgY2MuYXNzZXJ0SUQodGFyZ2V0LCAxNTA1KTtcclxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xyXG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcclxuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcclxuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcclxuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBDdXN0b20gc2VsZWN0b3JzXHJcbiAgICAgICAgdmFyIGVsZW1lbnQgPSB0aGlzLl9oYXNoRm9yVGltZXJzW3RhcmdldElkXTtcclxuICAgICAgICBpZiAoZWxlbWVudCkge1xyXG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5wYXVzZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBlbGVtZW50VXBkYXRlID0gdGhpcy5faGFzaEZvclVwZGF0ZXNbdGFyZ2V0SWRdO1xyXG4gICAgICAgIGlmIChlbGVtZW50VXBkYXRlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50VXBkYXRlLmVudHJ5LnBhdXNlZDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuIFByaW9yaXR5IGxldmVsIHJlc2VydmVkIGZvciBzeXN0ZW0gc2VydmljZXMuXHJcbiAqICEjemgg57O757uf5pyN5Yqh55qE5LyY5YWI57qn44CCXHJcbiAqIEBwcm9wZXJ0eSBQUklPUklUWV9TWVNURU1cclxuICogQHR5cGUge051bWJlcn1cclxuICogQHN0YXRpY1xyXG4gKi9cclxuY2MuU2NoZWR1bGVyLlBSSU9SSVRZX1NZU1RFTSA9IDEgPDwgMzE7XHJcblxyXG4vKipcclxuICogISNlbiBNaW5pbXVtIHByaW9yaXR5IGxldmVsIGZvciB1c2VyIHNjaGVkdWxpbmcuXHJcbiAqICEjemgg55So5oi36LCD5bqm5pyA5L2O5LyY5YWI57qn44CCXHJcbiAqIEBwcm9wZXJ0eSBQUklPUklUWV9OT05fU1lTVEVNXHJcbiAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAqIEBzdGF0aWNcclxuICovXHJcbmNjLlNjaGVkdWxlci5QUklPUklUWV9OT05fU1lTVEVNID0gY2MuU2NoZWR1bGVyLlBSSU9SSVRZX1NZU1RFTSArIDE7XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGNjLlNjaGVkdWxlcjsiLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXHJcbiAqIEBtb2R1bGUgY2NcclxuICovXG52YXIganMgPSByZXF1aXJlKCcuL3BsYXRmb3JtL2pzJyk7XG52YXIgSWRHZW5lcmF0ZXIgPSByZXF1aXJlKCcuL3BsYXRmb3JtL2lkLWdlbmVyYXRlcicpO1xudmFyIE1BWF9QT09MX1NJWkUgPSAyMDtcblxudmFyIGlkR2VuZXJhdGVyID0gbmV3IElkR2VuZXJhdGVyKCdTY2hlZHVsZXInKTtcblxuLy9kYXRhIHN0cnVjdHVyZXNcbi8qXHJcbiAqIEEgbGlzdCBkb3VibGUtbGlua2VkIGxpc3QgdXNlZCBmb3IgXCJ1cGRhdGVzIHdpdGggcHJpb3JpdHlcIlxyXG4gKiBAY2xhc3MgTGlzdEVudHJ5XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgbm90IHJldGFpbmVkIChyZXRhaW5lZCBieSBoYXNoVXBkYXRlRW50cnkpXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBwcmlvcml0eVxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhdXNlZFxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IG1hcmtlZEZvckRlbGV0aW9uIHNlbGVjdG9yIHdpbGwgbm8gbG9uZ2VyIGJlIGNhbGxlZCBhbmQgZW50cnkgd2lsbCBiZSByZW1vdmVkIGF0IGVuZCBvZiB0aGUgbmV4dCB0aWNrXHJcbiAqL1xudmFyIExpc3RFbnRyeSA9IGZ1bmN0aW9uIExpc3RFbnRyeSh0YXJnZXQsIHByaW9yaXR5LCBwYXVzZWQsIG1hcmtlZEZvckRlbGV0aW9uKSB7XG4gICAgdGhpcy50YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5wcmlvcml0eSA9IHByaW9yaXR5O1xuICAgIHRoaXMucGF1c2VkID0gcGF1c2VkO1xuICAgIHRoaXMubWFya2VkRm9yRGVsZXRpb24gPSBtYXJrZWRGb3JEZWxldGlvbjtcbn07XG5cbnZhciBfbGlzdEVudHJpZXMgPSBbXTtcbkxpc3RFbnRyeS5nZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwcmlvcml0eSwgcGF1c2VkLCBtYXJrZWRGb3JEZWxldGlvbikge1xuICAgIHZhciByZXN1bHQgPSBfbGlzdEVudHJpZXMucG9wKCk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXN1bHQudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICByZXN1bHQucHJpb3JpdHkgPSBwcmlvcml0eTtcbiAgICAgICAgcmVzdWx0LnBhdXNlZCA9IHBhdXNlZDtcbiAgICAgICAgcmVzdWx0Lm1hcmtlZEZvckRlbGV0aW9uID0gbWFya2VkRm9yRGVsZXRpb247XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmVzdWx0ID0gbmV3IExpc3RFbnRyeSh0YXJnZXQsIHByaW9yaXR5LCBwYXVzZWQsIG1hcmtlZEZvckRlbGV0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5MaXN0RW50cnkucHV0ID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgaWYgKF9saXN0RW50cmllcy5sZW5ndGggPCBNQVhfUE9PTF9TSVpFKSB7XG4gICAgICAgIGVudHJ5LnRhcmdldCA9IG51bGw7XG4gICAgICAgIF9saXN0RW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICB9XG59O1xuXG4vKlxyXG4gKiBBIHVwZGF0ZSBlbnRyeSBsaXN0XHJcbiAqIEBjbGFzcyBIYXNoVXBkYXRlRW50cnlcclxuICogQHBhcmFtIHtBcnJheX0gbGlzdCBXaGljaCBsaXN0IGRvZXMgaXQgYmVsb25nIHRvID9cclxuICogQHBhcmFtIHtMaXN0RW50cnl9IGVudHJ5IGVudHJ5IGluIHRoZSBsaXN0XHJcbiAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgaGFzaCBrZXkgKHJldGFpbmVkKVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBjYWxsYmFja1xyXG4gKi9cbnZhciBIYXNoVXBkYXRlRW50cnkgPSBmdW5jdGlvbiBIYXNoVXBkYXRlRW50cnkobGlzdCwgZW50cnksIHRhcmdldCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLmxpc3QgPSBsaXN0O1xuICAgIHRoaXMuZW50cnkgPSBlbnRyeTtcbiAgICB0aGlzLnRhcmdldCA9IHRhcmdldDtcbiAgICB0aGlzLmNhbGxiYWNrID0gY2FsbGJhY2s7XG59O1xudmFyIF9oYXNoVXBkYXRlRW50cmllcyA9IFtdO1xuSGFzaFVwZGF0ZUVudHJ5LmdldCA9IGZ1bmN0aW9uIChsaXN0LCBlbnRyeSwgdGFyZ2V0LCBjYWxsYmFjaykge1xuICAgIHZhciByZXN1bHQgPSBfaGFzaFVwZGF0ZUVudHJpZXMucG9wKCk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXN1bHQubGlzdCA9IGxpc3Q7XG4gICAgICAgIHJlc3VsdC5lbnRyeSA9IGVudHJ5O1xuICAgICAgICByZXN1bHQudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICByZXN1bHQuY2FsbGJhY2sgPSBjYWxsYmFjaztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHQgPSBuZXcgSGFzaFVwZGF0ZUVudHJ5KGxpc3QsIGVudHJ5LCB0YXJnZXQsIGNhbGxiYWNrKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5IYXNoVXBkYXRlRW50cnkucHV0ID0gZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgaWYgKF9oYXNoVXBkYXRlRW50cmllcy5sZW5ndGggPCBNQVhfUE9PTF9TSVpFKSB7XG4gICAgICAgIGVudHJ5Lmxpc3QgPSBlbnRyeS5lbnRyeSA9IGVudHJ5LnRhcmdldCA9IGVudHJ5LmNhbGxiYWNrID0gbnVsbDtcbiAgICAgICAgX2hhc2hVcGRhdGVFbnRyaWVzLnB1c2goZW50cnkpO1xuICAgIH1cbn07XG5cbi8vXG4vKlxyXG4gKiBIYXNoIEVsZW1lbnQgdXNlZCBmb3IgXCJzZWxlY3RvcnMgd2l0aCBpbnRlcnZhbFwiXHJcbiAqIEBjbGFzcyBIYXNoVGltZXJFbnRyeVxyXG4gKiBAcGFyYW0ge0FycmF5fSB0aW1lcnNcclxuICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAgaGFzaCBrZXkgKHJldGFpbmVkKVxyXG4gKiBAcGFyYW0ge051bWJlcn0gdGltZXJJbmRleFxyXG4gKiBAcGFyYW0ge1RpbWVyfSBjdXJyZW50VGltZXJcclxuICogQHBhcmFtIHtCb29sZWFufSBjdXJyZW50VGltZXJTYWx2YWdlZFxyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IHBhdXNlZFxyXG4gKi9cbnZhciBIYXNoVGltZXJFbnRyeSA9IGZ1bmN0aW9uIEhhc2hUaW1lckVudHJ5KHRpbWVycywgdGFyZ2V0LCB0aW1lckluZGV4LCBjdXJyZW50VGltZXIsIGN1cnJlbnRUaW1lclNhbHZhZ2VkLCBwYXVzZWQpIHtcbiAgICB2YXIgX3QgPSB0aGlzO1xuICAgIF90LnRpbWVycyA9IHRpbWVycztcbiAgICBfdC50YXJnZXQgPSB0YXJnZXQ7XG4gICAgX3QudGltZXJJbmRleCA9IHRpbWVySW5kZXg7XG4gICAgX3QuY3VycmVudFRpbWVyID0gY3VycmVudFRpbWVyO1xuICAgIF90LmN1cnJlbnRUaW1lclNhbHZhZ2VkID0gY3VycmVudFRpbWVyU2FsdmFnZWQ7XG4gICAgX3QucGF1c2VkID0gcGF1c2VkO1xufTtcbnZhciBfaGFzaFRpbWVyRW50cmllcyA9IFtdO1xuSGFzaFRpbWVyRW50cnkuZ2V0ID0gZnVuY3Rpb24gKHRpbWVycywgdGFyZ2V0LCB0aW1lckluZGV4LCBjdXJyZW50VGltZXIsIGN1cnJlbnRUaW1lclNhbHZhZ2VkLCBwYXVzZWQpIHtcbiAgICB2YXIgcmVzdWx0ID0gX2hhc2hUaW1lckVudHJpZXMucG9wKCk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgICByZXN1bHQudGltZXJzID0gdGltZXJzO1xuICAgICAgICByZXN1bHQudGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICByZXN1bHQudGltZXJJbmRleCA9IHRpbWVySW5kZXg7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50VGltZXIgPSBjdXJyZW50VGltZXI7XG4gICAgICAgIHJlc3VsdC5jdXJyZW50VGltZXJTYWx2YWdlZCA9IGN1cnJlbnRUaW1lclNhbHZhZ2VkO1xuICAgICAgICByZXN1bHQucGF1c2VkID0gcGF1c2VkO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdCA9IG5ldyBIYXNoVGltZXJFbnRyeSh0aW1lcnMsIHRhcmdldCwgdGltZXJJbmRleCwgY3VycmVudFRpbWVyLCBjdXJyZW50VGltZXJTYWx2YWdlZCwgcGF1c2VkKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG5IYXNoVGltZXJFbnRyeS5wdXQgPSBmdW5jdGlvbiAoZW50cnkpIHtcbiAgICBpZiAoX2hhc2hUaW1lckVudHJpZXMubGVuZ3RoIDwgTUFYX1BPT0xfU0laRSkge1xuICAgICAgICBlbnRyeS50aW1lcnMgPSBlbnRyeS50YXJnZXQgPSBlbnRyeS5jdXJyZW50VGltZXIgPSBudWxsO1xuICAgICAgICBfaGFzaFRpbWVyRW50cmllcy5wdXNoKGVudHJ5KTtcbiAgICB9XG59O1xuXG4vKlxyXG4gKiBMaWdodCB3ZWlnaHQgdGltZXJcclxuICogQGV4dGVuZHMgY2MuQ2xhc3NcclxuICovXG5mdW5jdGlvbiBDYWxsYmFja1RpbWVyKCkge1xuICAgIHRoaXMuX2xvY2sgPSBmYWxzZTtcbiAgICB0aGlzLl9zY2hlZHVsZXIgPSBudWxsO1xuICAgIHRoaXMuX2VsYXBzZWQgPSAtMTtcbiAgICB0aGlzLl9ydW5Gb3JldmVyID0gZmFsc2U7XG4gICAgdGhpcy5fdXNlRGVsYXkgPSBmYWxzZTtcbiAgICB0aGlzLl90aW1lc0V4ZWN1dGVkID0gMDtcbiAgICB0aGlzLl9yZXBlYXQgPSAwO1xuICAgIHRoaXMuX2RlbGF5ID0gMDtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IDA7XG5cbiAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xuICAgIHRoaXMuX2NhbGxiYWNrID0gbnVsbDtcbn1cblxudmFyIHByb3RvID0gQ2FsbGJhY2tUaW1lci5wcm90b3R5cGU7XG5cbnByb3RvLmluaXRXaXRoQ2FsbGJhY2sgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBjYWxsYmFjaywgdGFyZ2V0LCBzZWNvbmRzLCByZXBlYXQsIGRlbGF5KSB7XG4gICAgdGhpcy5fbG9jayA9IGZhbHNlO1xuICAgIHRoaXMuX3NjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICB0aGlzLl90YXJnZXQgPSB0YXJnZXQ7XG4gICAgdGhpcy5fY2FsbGJhY2sgPSBjYWxsYmFjaztcblxuICAgIHRoaXMuX2VsYXBzZWQgPSAtMTtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IHNlY29uZHM7XG4gICAgdGhpcy5fZGVsYXkgPSBkZWxheTtcbiAgICB0aGlzLl91c2VEZWxheSA9IHRoaXMuX2RlbGF5ID4gMDtcbiAgICB0aGlzLl9yZXBlYXQgPSByZXBlYXQ7XG4gICAgdGhpcy5fcnVuRm9yZXZlciA9IHRoaXMuX3JlcGVhdCA9PT0gY2MubWFjcm8uUkVQRUFUX0ZPUkVWRVI7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuLyoqXHJcbiAqIEByZXR1cm4ge051bWJlcn0gcmV0dXJucyBpbnRlcnZhbCBvZiB0aW1lclxyXG4gKi9cbnByb3RvLmdldEludGVydmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9pbnRlcnZhbDtcbn07XG4vKipcclxuICogQHBhcmFtIHtOdW1iZXJ9IGludGVydmFsIHNldCBpbnRlcnZhbCBpbiBzZWNvbmRzXHJcbiAqL1xucHJvdG8uc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbiAoaW50ZXJ2YWwpIHtcbiAgICB0aGlzLl9pbnRlcnZhbCA9IGludGVydmFsO1xufTtcblxuLyoqXHJcbiAqIHRyaWdnZXJzIHRoZSB0aW1lclxyXG4gKiBAcGFyYW0ge051bWJlcn0gZHQgZGVsdGEgdGltZVxyXG4gKi9cbnByb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIChkdCkge1xuICAgIGlmICh0aGlzLl9lbGFwc2VkID09PSAtMSkge1xuICAgICAgICB0aGlzLl9lbGFwc2VkID0gMDtcbiAgICAgICAgdGhpcy5fdGltZXNFeGVjdXRlZCA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZWxhcHNlZCArPSBkdDtcbiAgICAgICAgaWYgKHRoaXMuX3J1bkZvcmV2ZXIgJiYgIXRoaXMuX3VzZURlbGF5KSB7XG4gICAgICAgICAgICAvL3N0YW5kYXJkIHRpbWVyIHVzYWdlXG4gICAgICAgICAgICBpZiAodGhpcy5fZWxhcHNlZCA+PSB0aGlzLl9pbnRlcnZhbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudHJpZ2dlcigpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2VsYXBzZWQgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy9hZHZhbmNlZCB1c2FnZVxuICAgICAgICAgICAgaWYgKHRoaXMuX3VzZURlbGF5KSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VsYXBzZWQgPj0gdGhpcy5fZGVsYXkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxhcHNlZCAtPSB0aGlzLl9kZWxheTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGltZXNFeGVjdXRlZCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl91c2VEZWxheSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2VsYXBzZWQgPj0gdGhpcy5faW50ZXJ2YWwpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy50cmlnZ2VyKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWxhcHNlZCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RpbWVzRXhlY3V0ZWQgKz0gMTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmICh0aGlzLl9jYWxsYmFjayAmJiAhdGhpcy5fcnVuRm9yZXZlciAmJiB0aGlzLl90aW1lc0V4ZWN1dGVkID4gdGhpcy5fcmVwZWF0KSB0aGlzLmNhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxucHJvdG8uZ2V0Q2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhbGxiYWNrO1xufTtcblxucHJvdG8udHJpZ2dlciA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX2NhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX2xvY2sgPSB0cnVlO1xuICAgICAgICB0aGlzLl9jYWxsYmFjay5jYWxsKHRoaXMuX3RhcmdldCwgdGhpcy5fZWxhcHNlZCk7XG4gICAgICAgIHRoaXMuX2xvY2sgPSBmYWxzZTtcbiAgICB9XG59O1xuXG5wcm90by5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgLy9vdmVycmlkZVxuICAgIHRoaXMuX3NjaGVkdWxlci51bnNjaGVkdWxlKHRoaXMuX2NhbGxiYWNrLCB0aGlzLl90YXJnZXQpO1xufTtcblxudmFyIF90aW1lcnMgPSBbXTtcbkNhbGxiYWNrVGltZXIuZ2V0ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBfdGltZXJzLnBvcCgpIHx8IG5ldyBDYWxsYmFja1RpbWVyKCk7XG59O1xuQ2FsbGJhY2tUaW1lci5wdXQgPSBmdW5jdGlvbiAodGltZXIpIHtcbiAgICBpZiAoX3RpbWVycy5sZW5ndGggPCBNQVhfUE9PTF9TSVpFICYmICF0aW1lci5fbG9jaykge1xuICAgICAgICB0aW1lci5fc2NoZWR1bGVyID0gdGltZXIuX3RhcmdldCA9IHRpbWVyLl9jYWxsYmFjayA9IG51bGw7XG4gICAgICAgIF90aW1lcnMucHVzaCh0aW1lcik7XG4gICAgfVxufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogU2NoZWR1bGVyIGlzIHJlc3BvbnNpYmxlIG9mIHRyaWdnZXJpbmcgdGhlIHNjaGVkdWxlZCBjYWxsYmFja3MuPGJyLz5cclxuICogWW91IHNob3VsZCBub3QgdXNlIE5TVGltZXIuIEluc3RlYWQgdXNlIHRoaXMgY2xhc3MuPGJyLz5cclxuICogPGJyLz5cclxuICogVGhlcmUgYXJlIDIgZGlmZmVyZW50IHR5cGVzIG9mIGNhbGxiYWNrcyAoc2VsZWN0b3JzKTo8YnIvPlxyXG4gKiAgICAgLSB1cGRhdGUgY2FsbGJhY2s6IHRoZSAndXBkYXRlJyBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBldmVyeSBmcmFtZS4gWW91IGNhbiBjdXN0b21pemUgdGhlIHByaW9yaXR5Ljxici8+XHJcbiAqICAgICAtIGN1c3RvbSBjYWxsYmFjazogQSBjdXN0b20gY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgZXZlcnkgZnJhbWUsIG9yIHdpdGggYSBjdXN0b20gaW50ZXJ2YWwgb2YgdGltZTxici8+XHJcbiAqIDxici8+XHJcbiAqIFRoZSAnY3VzdG9tIHNlbGVjdG9ycycgc2hvdWxkIGJlIGF2b2lkZWQgd2hlbiBwb3NzaWJsZS4gSXQgaXMgZmFzdGVyLFxyXG4gKiBhbmQgY29uc3VtZXMgbGVzcyBtZW1vcnkgdG8gdXNlIHRoZSAndXBkYXRlIGNhbGxiYWNrJy4gKlxyXG4gKiAhI3poXHJcbiAqIFNjaGVkdWxlciDmmK/otJ/otKPop6blj5Hlm57osIPlh73mlbDnmoTnsbvjgII8YnIvPlxyXG4gKiDpgJrluLjmg4XlhrXkuIvvvIzlu7rorq7kvb/nlKggY2MuZGlyZWN0b3IuZ2V0U2NoZWR1bGVyKCkg5p2l6I635Y+W57O757uf5a6a5pe25Zmo44CCPGJyLz5cclxuICog5pyJ5Lik56eN5LiN5ZCM57G75Z6L55qE5a6a5pe25Zmo77yaPGJyLz5cclxuICogICAgIC0gdXBkYXRlIOWumuaXtuWZqO+8muavj+S4gOW4p+mDveS8muinpuWPkeOAguaCqOWPr+S7peiHquWumuS5ieS8mOWFiOe6p+OAgjxici8+XHJcbiAqICAgICAtIOiHquWumuS5ieWumuaXtuWZqO+8muiHquWumuS5ieWumuaXtuWZqOWPr+S7peavj+S4gOW4p+aIluiAheiHquWumuS5ieeahOaXtumXtOmXtOmalOinpuWPkeOAgjxici8+XHJcbiAqIOWmguaenOW4jOacm+avj+W4p+mDveinpuWPke+8jOW6lOivpeS9v+eUqCB1cGRhdGUg5a6a5pe25Zmo77yM5L2/55SoIHVwZGF0ZSDlrprml7blmajmm7Tlv6vvvIzogIzkuJTmtojogJfmm7TlsJHnmoTlhoXlrZjjgIJcclxuICpcclxuICogQGNsYXNzIFNjaGVkdWxlclxyXG4gKi9cbmNjLlNjaGVkdWxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl90aW1lU2NhbGUgPSAxLjA7XG4gICAgdGhpcy5fdXBkYXRlc05lZ0xpc3QgPSBbXTsgLy8gbGlzdCBvZiBwcmlvcml0eSA8IDBcbiAgICB0aGlzLl91cGRhdGVzMExpc3QgPSBbXTsgLy8gbGlzdCBvZiBwcmlvcml0eSA9PSAwXG4gICAgdGhpcy5fdXBkYXRlc1Bvc0xpc3QgPSBbXTsgLy8gbGlzdCBvZiBwcmlvcml0eSA+IDBcbiAgICB0aGlzLl9oYXNoRm9yVXBkYXRlcyA9IGpzLmNyZWF0ZU1hcCh0cnVlKTsgLy8gaGFzaCB1c2VkIHRvIGZldGNoIHF1aWNrbHkgdGhlIGxpc3QgZW50cmllcyBmb3IgcGF1c2UsIGRlbGV0ZSwgZXRjXG4gICAgdGhpcy5faGFzaEZvclRpbWVycyA9IGpzLmNyZWF0ZU1hcCh0cnVlKTsgLy8gVXNlZCBmb3IgXCJzZWxlY3RvcnMgd2l0aCBpbnRlcnZhbFwiXG4gICAgdGhpcy5fY3VycmVudFRhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fY3VycmVudFRhcmdldFNhbHZhZ2VkID0gZmFsc2U7XG4gICAgdGhpcy5fdXBkYXRlSGFzaExvY2tlZCA9IGZhbHNlOyAvLyBJZiB0cnVlIHVuc2NoZWR1bGUgd2lsbCBub3QgcmVtb3ZlIGFueXRoaW5nIGZyb20gYSBoYXNoLiBFbGVtZW50cyB3aWxsIG9ubHkgYmUgbWFya2VkIGZvciBkZWxldGlvbi5cblxuICAgIHRoaXMuX2FycmF5Rm9yVGltZXJzID0gW107IC8vIFNwZWVkIHVwIGluZGV4aW5nXG4gICAgLy90aGlzLl9hcnJheUZvclVwZGF0ZXMgPSBbXTsgICAvLyBTcGVlZCB1cCBpbmRleGluZ1xufTtcblxuY2MuU2NoZWR1bGVyLnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogY2MuU2NoZWR1bGVyLFxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1wcml2YXRlIG1ldGhvZC0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAgIF9yZW1vdmVIYXNoRWxlbWVudDogZnVuY3Rpb24gX3JlbW92ZUhhc2hFbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuX2hhc2hGb3JUaW1lcnNbZWxlbWVudC50YXJnZXQuX2lkXTtcbiAgICAgICAgdmFyIGFyciA9IHRoaXMuX2FycmF5Rm9yVGltZXJzO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGFyci5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChhcnJbaV0gPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBhcnIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIEhhc2hUaW1lckVudHJ5LnB1dChlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgX3JlbW92ZVVwZGF0ZUZyb21IYXNoOiBmdW5jdGlvbiBfcmVtb3ZlVXBkYXRlRnJvbUhhc2goZW50cnkpIHtcbiAgICAgICAgdmFyIHRhcmdldElkID0gZW50cnkudGFyZ2V0Ll9pZDtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgZWxlbWVudCA9IHNlbGYuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXTtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIFJlbW92ZSBsaXN0IGVudHJ5IGZyb20gbGlzdFxuICAgICAgICAgICAgdmFyIGxpc3QgPSBlbGVtZW50Lmxpc3QsXG4gICAgICAgICAgICAgICAgbGlzdEVudHJ5ID0gZWxlbWVudC5lbnRyeTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdEVudHJ5KSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGRlbGV0ZSBzZWxmLl9oYXNoRm9yVXBkYXRlc1t0YXJnZXRJZF07XG4gICAgICAgICAgICBMaXN0RW50cnkucHV0KGxpc3RFbnRyeSk7XG4gICAgICAgICAgICBIYXNoVXBkYXRlRW50cnkucHV0KGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIF9wcmlvcml0eUluOiBmdW5jdGlvbiBfcHJpb3JpdHlJbihwcExpc3QsIGxpc3RFbGVtZW50LCBwcmlvcml0eSkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKHByaW9yaXR5IDwgcHBMaXN0W2ldLnByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgcHBMaXN0LnNwbGljZShpLCAwLCBsaXN0RWxlbWVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHBwTGlzdC5wdXNoKGxpc3RFbGVtZW50KTtcbiAgICB9LFxuXG4gICAgX2FwcGVuZEluOiBmdW5jdGlvbiBfYXBwZW5kSW4ocHBMaXN0LCBsaXN0RWxlbWVudCkge1xuICAgICAgICBwcExpc3QucHVzaChsaXN0RWxlbWVudCk7XG4gICAgfSxcblxuICAgIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1wdWJsaWMgbWV0aG9kLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIC8qKlxyXG4gICAgICogIWVuIFRoaXMgbWV0aG9kIHNob3VsZCBiZSBjYWxsZWQgZm9yIGFueSB0YXJnZXQgd2hpY2ggbmVlZHMgdG8gc2NoZWR1bGUgdGFza3MsIGFuZCB0aGlzIG1ldGhvZCBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBhbnkgc2NoZWR1bGVyIEFQSSB1c2FnZS5cclxuICAgICAqIFRoaXMgbWV0aG9kIHdpbGwgYWRkIGEgYF9pZGAgcHJvcGVydHkgaWYgaXQgZG9lc24ndCBleGlzdC5cclxuICAgICAqICF6aCDku7vkvZXpnIDopoHnlKggU2NoZWR1bGVyIOeuoeeQhuS7u+WKoeeahOWvueixoeS4u+S9k+mDveW6lOivpeiwg+eUqOi/meS4quaWueazle+8jOW5tuS4lOW6lOivpeWcqOiwg+eUqOS7u+S9lSBTY2hlZHVsZXIgQVBJIOS5i+WJjeiwg+eUqOi/meS4quaWueazleOAglxyXG4gICAgICog6L+Z5Liq5pa55rOV5Lya57uZ5a+56LGh5re75Yqg5LiA5LiqIGBfaWRgIOWxnuaAp++8jOWmguaenOi/meS4quWxnuaAp+S4jeWtmOWcqOeahOivneOAglxyXG4gICAgICogQG1ldGhvZCBlbmFibGVGb3JUYXJnZXRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqL1xuICAgIGVuYWJsZUZvclRhcmdldDogZnVuY3Rpb24gZW5hYmxlRm9yVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBpZiAoIXRhcmdldC5faWQpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuX19pbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0YXJnZXQuX2lkID0gaWRHZW5lcmF0ZXIuZ2V0TmV3SWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIE1vZGlmaWVzIHRoZSB0aW1lIG9mIGFsbCBzY2hlZHVsZWQgY2FsbGJhY2tzLjxici8+XHJcbiAgICAgKiBZb3UgY2FuIHVzZSB0aGlzIHByb3BlcnR5IHRvIGNyZWF0ZSBhICdzbG93IG1vdGlvbicgb3IgJ2Zhc3QgZm9yd2FyZCcgZWZmZWN0Ljxici8+XHJcbiAgICAgKiBEZWZhdWx0IGlzIDEuMC4gVG8gY3JlYXRlIGEgJ3Nsb3cgbW90aW9uJyBlZmZlY3QsIHVzZSB2YWx1ZXMgYmVsb3cgMS4wLjxici8+XHJcbiAgICAgKiBUbyBjcmVhdGUgYSAnZmFzdCBmb3J3YXJkJyBlZmZlY3QsIHVzZSB2YWx1ZXMgaGlnaGVyIHRoYW4gMS4wLjxici8+XHJcbiAgICAgKiBOb3Rl77yaSXQgd2lsbCBhZmZlY3QgRVZFUlkgc2NoZWR1bGVkIHNlbGVjdG9yIC8gYWN0aW9uLlxyXG4gICAgICogISN6aFxyXG4gICAgICog6K6+572u5pe26Ze06Ze06ZqU55qE57yp5pS+5q+U5L6L44CCPGJyLz5cclxuICAgICAqIOaCqOWPr+S7peS9v+eUqOi/meS4quaWueazleadpeWIm+W7uuS4gOS4qiDigJxzbG93IG1vdGlvbu+8iOaFouWKqOS9nO+8ieKAnSDmiJYg4oCcZmFzdCBmb3J3YXJk77yI5b+r6L+b77yJ4oCdIOeahOaViOaenOOAgjxici8+XHJcbiAgICAgKiDpu5jorqTmmK8gMS4w44CC6KaB5Yib5bu65LiA5LiqIOKAnHNsb3cgbW90aW9u77yI5oWi5Yqo5L2c77yJ4oCdIOaViOaenCzkvb/nlKjlgLzkvY7kuo4gMS4w44CCPGJyLz5cclxuICAgICAqIOimgeS9v+eUqCDigJxmYXN0IGZvcndhcmTvvIjlv6vov5vvvInigJ0g5pWI5p6c77yM5L2/55So5YC85aSn5LqOIDEuMOOAgjxici8+XHJcbiAgICAgKiDms6jmhI/vvJrlroPlvbHlk43or6UgU2NoZWR1bGVyIOS4i+euoeeQhueahOaJgOacieWumuaXtuWZqOOAglxyXG4gICAgICogQG1ldGhvZCBzZXRUaW1lU2NhbGVcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSB0aW1lU2NhbGVcclxuICAgICAqL1xuICAgIHNldFRpbWVTY2FsZTogZnVuY3Rpb24gc2V0VGltZVNjYWxlKHRpbWVTY2FsZSkge1xuICAgICAgICB0aGlzLl90aW1lU2NhbGUgPSB0aW1lU2NhbGU7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZXR1cm5zIHRpbWUgc2NhbGUgb2Ygc2NoZWR1bGVyLlxyXG4gICAgICogISN6aCDojrflj5bml7bpl7Tpl7TpmpTnmoTnvKnmlL7mr5TkvovjgIJcclxuICAgICAqIEBtZXRob2QgZ2V0VGltZVNjYWxlXHJcbiAgICAgKiBAcmV0dXJuIHtOdW1iZXJ9XHJcbiAgICAgKi9cbiAgICBnZXRUaW1lU2NhbGU6IGZ1bmN0aW9uIGdldFRpbWVTY2FsZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVTY2FsZTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuICd1cGRhdGUnIHRoZSBzY2hlZHVsZXIuIChZb3Ugc2hvdWxkIE5FVkVSIGNhbGwgdGhpcyBtZXRob2QsIHVubGVzcyB5b3Uga25vdyB3aGF0IHlvdSBhcmUgZG9pbmcuKVxyXG4gICAgICogISN6aCB1cGRhdGUg6LCD5bqm5Ye95pWw44CCKOS4jeW6lOivpeebtOaOpeiwg+eUqOi/meS4quaWueazle+8jOmZpOmdnuWujOWFqOS6huino+i/meS5iOWBmueahOe7k+aenClcclxuICAgICAqIEBtZXRob2QgdXBkYXRlXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gZHQgZGVsdGEgdGltZVxyXG4gICAgICovXG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUoZHQpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlSGFzaExvY2tlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLl90aW1lU2NhbGUgIT09IDEpIGR0ICo9IHRoaXMuX3RpbWVTY2FsZTtcblxuICAgICAgICB2YXIgaSwgbGlzdCwgbGVuLCBlbnRyeTtcblxuICAgICAgICBmb3IgKGkgPSAwLCBsaXN0ID0gdGhpcy5fdXBkYXRlc05lZ0xpc3QsIGxlbiA9IGxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgICAgIGVudHJ5ID0gbGlzdFtpXTtcbiAgICAgICAgICAgIGlmICghZW50cnkucGF1c2VkICYmICFlbnRyeS5tYXJrZWRGb3JEZWxldGlvbikgZW50cnkudGFyZ2V0LnVwZGF0ZShkdCk7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBsaXN0ID0gdGhpcy5fdXBkYXRlczBMaXN0LCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBlbnRyeSA9IGxpc3RbaV07XG4gICAgICAgICAgICBpZiAoIWVudHJ5LnBhdXNlZCAmJiAhZW50cnkubWFya2VkRm9yRGVsZXRpb24pIGVudHJ5LnRhcmdldC51cGRhdGUoZHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMCwgbGlzdCA9IHRoaXMuX3VwZGF0ZXNQb3NMaXN0LCBsZW4gPSBsaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBlbnRyeSA9IGxpc3RbaV07XG4gICAgICAgICAgICBpZiAoIWVudHJ5LnBhdXNlZCAmJiAhZW50cnkubWFya2VkRm9yRGVsZXRpb24pIGVudHJ5LnRhcmdldC51cGRhdGUoZHQpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gSXRlcmF0ZSBvdmVyIGFsbCB0aGUgY3VzdG9tIHNlbGVjdG9yc1xuICAgICAgICB2YXIgZWx0LFxuICAgICAgICAgICAgYXJyID0gdGhpcy5fYXJyYXlGb3JUaW1lcnM7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGVsdCA9IGFycltpXTtcbiAgICAgICAgICAgIHRoaXMuX2N1cnJlbnRUYXJnZXQgPSBlbHQ7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGFyZ2V0U2FsdmFnZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKCFlbHQucGF1c2VkKSB7XG4gICAgICAgICAgICAgICAgLy8gVGhlICd0aW1lcnMnIGFycmF5IG1heSBjaGFuZ2Ugd2hpbGUgaW5zaWRlIHRoaXMgbG9vcFxuICAgICAgICAgICAgICAgIGZvciAoZWx0LnRpbWVySW5kZXggPSAwOyBlbHQudGltZXJJbmRleCA8IGVsdC50aW1lcnMubGVuZ3RoOyArK2VsdC50aW1lckluZGV4KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsdC5jdXJyZW50VGltZXIgPSBlbHQudGltZXJzW2VsdC50aW1lckluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgZWx0LmN1cnJlbnRUaW1lclNhbHZhZ2VkID0gZmFsc2U7XG5cbiAgICAgICAgICAgICAgICAgICAgZWx0LmN1cnJlbnRUaW1lci51cGRhdGUoZHQpO1xuICAgICAgICAgICAgICAgICAgICBlbHQuY3VycmVudFRpbWVyID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIG9ubHkgZGVsZXRlIGN1cnJlbnRUYXJnZXQgaWYgbm8gYWN0aW9ucyB3ZXJlIHNjaGVkdWxlZCBkdXJpbmcgdGhlIGN5Y2xlIChpc3N1ZSAjNDgxKVxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUYXJnZXRTYWx2YWdlZCAmJiB0aGlzLl9jdXJyZW50VGFyZ2V0LnRpbWVycy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVIYXNoRWxlbWVudCh0aGlzLl9jdXJyZW50VGFyZ2V0KTtcbiAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBkZWxldGUgYWxsIHVwZGF0ZXMgdGhhdCBhcmUgbWFya2VkIGZvciBkZWxldGlvblxuICAgICAgICAvLyB1cGRhdGVzIHdpdGggcHJpb3JpdHkgPCAwXG4gICAgICAgIGZvciAoaSA9IDAsIGxpc3QgPSB0aGlzLl91cGRhdGVzTmVnTGlzdDsgaSA8IGxpc3QubGVuZ3RoOykge1xuICAgICAgICAgICAgZW50cnkgPSBsaXN0W2ldO1xuICAgICAgICAgICAgaWYgKGVudHJ5Lm1hcmtlZEZvckRlbGV0aW9uKSB0aGlzLl9yZW1vdmVVcGRhdGVGcm9tSGFzaChlbnRyeSk7ZWxzZSBpKys7XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwLCBsaXN0ID0gdGhpcy5fdXBkYXRlczBMaXN0OyBpIDwgbGlzdC5sZW5ndGg7KSB7XG4gICAgICAgICAgICBlbnRyeSA9IGxpc3RbaV07XG4gICAgICAgICAgICBpZiAoZW50cnkubWFya2VkRm9yRGVsZXRpb24pIHRoaXMuX3JlbW92ZVVwZGF0ZUZyb21IYXNoKGVudHJ5KTtlbHNlIGkrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAoaSA9IDAsIGxpc3QgPSB0aGlzLl91cGRhdGVzUG9zTGlzdDsgaSA8IGxpc3QubGVuZ3RoOykge1xuICAgICAgICAgICAgZW50cnkgPSBsaXN0W2ldO1xuICAgICAgICAgICAgaWYgKGVudHJ5Lm1hcmtlZEZvckRlbGV0aW9uKSB0aGlzLl9yZW1vdmVVcGRhdGVGcm9tSGFzaChlbnRyeSk7ZWxzZSBpKys7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl91cGRhdGVIYXNoTG9ja2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2N1cnJlbnRUYXJnZXQgPSBudWxsO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIDxwPlxyXG4gICAgICogICBUaGUgc2NoZWR1bGVkIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCBldmVyeSAnaW50ZXJ2YWwnIHNlY29uZHMuPGJyLz5cclxuICAgICAqICAgSWYgcGF1c2VkIGlzIFlFUywgdGhlbiBpdCB3b24ndCBiZSBjYWxsZWQgdW50aWwgaXQgaXMgcmVzdW1lZC48YnIvPlxyXG4gICAgICogICBJZiAnaW50ZXJ2YWwnIGlzIDAsIGl0IHdpbGwgYmUgY2FsbGVkIGV2ZXJ5IGZyYW1lLCBidXQgaWYgc28sIGl0IHJlY29tbWVuZGVkIHRvIHVzZSAnc2NoZWR1bGVVcGRhdGVGb3JUYXJnZXQ6JyBpbnN0ZWFkLjxici8+XHJcbiAgICAgKiAgIElmIHRoZSBjYWxsYmFjayBmdW5jdGlvbiBpcyBhbHJlYWR5IHNjaGVkdWxlZCwgdGhlbiBvbmx5IHRoZSBpbnRlcnZhbCBwYXJhbWV0ZXIgd2lsbCBiZSB1cGRhdGVkIHdpdGhvdXQgcmUtc2NoZWR1bGluZyBpdCBhZ2Fpbi48YnIvPlxyXG4gICAgICogICByZXBlYXQgbGV0IHRoZSBhY3Rpb24gYmUgcmVwZWF0ZWQgcmVwZWF0ICsgMSB0aW1lcywgdXNlIGNjLm1hY3JvLlJFUEVBVF9GT1JFVkVSIHRvIGxldCB0aGUgYWN0aW9uIHJ1biBjb250aW51b3VzbHk8YnIvPlxyXG4gICAgICogICBkZWxheSBpcyB0aGUgYW1vdW50IG9mIHRpbWUgdGhlIGFjdGlvbiB3aWxsIHdhaXQgYmVmb3JlIGl0J2xsIHN0YXJ0PGJyLz5cclxuICAgICAqIDwvcD5cclxuICAgICAqICEjemhcclxuICAgICAqIOaMh+WumuWbnuiwg+WHveaVsO+8jOiwg+eUqOWvueixoeetieS/oeaBr+adpea3u+WKoOS4gOS4quaWsOeahOWumuaXtuWZqOOAgjxici8+XHJcbiAgICAgKiDlpoLmnpwgcGF1c2VkIOWAvOS4uiB0cnVl77yM6YKj5LmI55u05YiwIHJlc3VtZSDooqvosIPnlKjmiY3lvIDlp4vorqHml7bjgII8YnIvPlxyXG4gICAgICog5b2T5pe26Ze06Ze06ZqU6L6+5Yiw5oyH5a6a5YC85pe277yM6K6+572u55qE5Zue6LCD5Ye95pWw5bCG5Lya6KKr6LCD55So44CCPGJyLz5cclxuICAgICAqIOWmguaenCBpbnRlcnZhbCDlgLzkuLogMO+8jOmCo+S5iOWbnuiwg+WHveaVsOavj+S4gOW4p+mDveS8muiiq+iwg+eUqO+8jOS9huWmguaenOaYr+i/meagt++8jFxyXG4gICAgICog5bu66K6u5L2/55SoIHNjaGVkdWxlVXBkYXRlRm9yVGFyZ2V0IOS7o+abv+OAgjxici8+XHJcbiAgICAgKiDlpoLmnpzlm57osIPlh73mlbDlt7Lnu4/ooqvlrprml7blmajkvb/nlKjvvIzpgqPkuYjlj6rkvJrmm7TmlrDkuYvliY3lrprml7blmajnmoTml7bpl7Tpl7TpmpTlj4LmlbDvvIzkuI3kvJrorr7nva7mlrDnmoTlrprml7blmajjgII8YnIvPlxyXG4gICAgICogcmVwZWF0IOWAvOWPr+S7peiuqeWumuaXtuWZqOinpuWPkSByZXBlYXQgKyAxIOasoe+8jOS9v+eUqCBjYy5tYWNyby5SRVBFQVRfRk9SRVZFUlxyXG4gICAgICog5Y+v5Lul6K6p5a6a5pe25Zmo5LiA55u05b6q546v6Kem5Y+R44CCPGJyLz5cclxuICAgICAqIGRlbGF5IOWAvOaMh+WumuW7tui/n+aXtumXtO+8jOWumuaXtuWZqOS8muWcqOW7tui/n+aMh+WumueahOaXtumXtOS5i+WQjuW8gOWni+iuoeaXtuOAglxyXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbnRlcnZhbFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IFtyZXBlYXQ9Y2MubWFjcm8uUkVQRUFUX0ZPUkVWRVJdXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gW2RlbGF5PTBdXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHBhdXNlZFxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS9DQ1NjaGVkdWxlci9zY2hlZHVsZS5qc31cclxuICAgICAqIEB0eXBlc2NyaXB0XHJcbiAgICAgKiBzY2hlZHVsZShjYWxsYmFjazogRnVuY3Rpb24sIHRhcmdldDogYW55LCBpbnRlcnZhbDogbnVtYmVyLCByZXBlYXQ6IG51bWJlciwgZGVsYXk6IG51bWJlciwgcGF1c2VkPzogYm9vbGVhbik6IHZvaWRcclxuICAgICAqIHNjaGVkdWxlKGNhbGxiYWNrOiBGdW5jdGlvbiwgdGFyZ2V0OiBhbnksIGludGVydmFsOiBudW1iZXIsIHBhdXNlZD86IGJvb2xlYW4pOiB2b2lkXHJcbiAgICAgKi9cbiAgICBzY2hlZHVsZTogZnVuY3Rpb24gc2NoZWR1bGUoY2FsbGJhY2ssIHRhcmdldCwgaW50ZXJ2YWwsIHJlcGVhdCwgZGVsYXksIHBhdXNlZCkge1xuICAgICAgICAndXNlIHN0cmljdCc7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgdmFyIHRtcCA9IGNhbGxiYWNrO1xuICAgICAgICAgICAgY2FsbGJhY2sgPSB0YXJnZXQ7XG4gICAgICAgICAgICB0YXJnZXQgPSB0bXA7XG4gICAgICAgIH1cbiAgICAgICAgLy9zZWxlY3RvciwgdGFyZ2V0LCBpbnRlcnZhbCwgcmVwZWF0LCBkZWxheSwgcGF1c2VkXG4gICAgICAgIC8vc2VsZWN0b3IsIHRhcmdldCwgaW50ZXJ2YWwsIHBhdXNlZFxuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gNCB8fCBhcmd1bWVudHMubGVuZ3RoID09PSA1KSB7XG4gICAgICAgICAgICBwYXVzZWQgPSAhIXJlcGVhdDtcbiAgICAgICAgICAgIHJlcGVhdCA9IGNjLm1hY3JvLlJFUEVBVF9GT1JFVkVSO1xuICAgICAgICAgICAgZGVsYXkgPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgY2MuYXNzZXJ0SUQodGFyZ2V0LCAxNTAyKTtcblxuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xuICAgICAgICBpZiAoIXRhcmdldElkKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHRhcmdldC5faWQgPSB0YXJnZXQuX19pbnN0YW5jZUlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XG4gICAgICAgIGlmICghZWxlbWVudCkge1xuICAgICAgICAgICAgLy8gSXMgdGhpcyB0aGUgMXN0IGVsZW1lbnQgPyBUaGVuIHNldCB0aGUgcGF1c2UgbGV2ZWwgdG8gYWxsIHRoZSBjYWxsYmFja19mbnMgb2YgdGhpcyB0YXJnZXRcbiAgICAgICAgICAgIGVsZW1lbnQgPSBIYXNoVGltZXJFbnRyeS5nZXQobnVsbCwgdGFyZ2V0LCAwLCBudWxsLCBudWxsLCBwYXVzZWQpO1xuICAgICAgICAgICAgdGhpcy5fYXJyYXlGb3JUaW1lcnMucHVzaChlbGVtZW50KTtcbiAgICAgICAgICAgIHRoaXMuX2hhc2hGb3JUaW1lcnNbdGFyZ2V0SWRdID0gZWxlbWVudDtcbiAgICAgICAgfSBlbHNlIGlmIChlbGVtZW50LnBhdXNlZCAhPT0gcGF1c2VkKSB7XG4gICAgICAgICAgICBjYy53YXJuSUQoMTUxMSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGltZXIsIGk7XG4gICAgICAgIGlmIChlbGVtZW50LnRpbWVycyA9PSBudWxsKSB7XG4gICAgICAgICAgICBlbGVtZW50LnRpbWVycyA9IFtdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGVsZW1lbnQudGltZXJzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdGltZXIgPSBlbGVtZW50LnRpbWVyc1tpXTtcbiAgICAgICAgICAgICAgICBpZiAodGltZXIgJiYgY2FsbGJhY2sgPT09IHRpbWVyLl9jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICBjYy5sb2dJRCgxNTA3LCB0aW1lci5nZXRJbnRlcnZhbCgpLCBpbnRlcnZhbCk7XG4gICAgICAgICAgICAgICAgICAgIHRpbWVyLl9pbnRlcnZhbCA9IGludGVydmFsO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdGltZXIgPSBDYWxsYmFja1RpbWVyLmdldCgpO1xuICAgICAgICB0aW1lci5pbml0V2l0aENhbGxiYWNrKHRoaXMsIGNhbGxiYWNrLCB0YXJnZXQsIGludGVydmFsLCByZXBlYXQsIGRlbGF5KTtcbiAgICAgICAgZWxlbWVudC50aW1lcnMucHVzaCh0aW1lcik7XG5cbiAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUYXJnZXQgPT09IGVsZW1lbnQgJiYgdGhpcy5fY3VycmVudFRhcmdldFNhbHZhZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLl9jdXJyZW50VGFyZ2V0U2FsdmFnZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIFNjaGVkdWxlcyB0aGUgdXBkYXRlIGNhbGxiYWNrIGZvciBhIGdpdmVuIHRhcmdldCxcclxuICAgICAqIER1cmluZyBldmVyeSBmcmFtZSBhZnRlciBzY2hlZHVsZSBzdGFydGVkLCB0aGUgXCJ1cGRhdGVcIiBmdW5jdGlvbiBvZiB0YXJnZXQgd2lsbCBiZSBpbnZva2VkLlxyXG4gICAgICogISN6aFxyXG4gICAgICog5L2/55So5oyH5a6a55qE5LyY5YWI57qn5Li65oyH5a6a55qE5a+56LGh6K6+572uIHVwZGF0ZSDlrprml7blmajjgIJcclxuICAgICAqIHVwZGF0ZSDlrprml7blmajmr4/kuIDluKfpg73kvJrooqvop6blj5HvvIzop6blj5Hml7boh6rliqjosIPnlKjmjIflrprlr7nosaHnmoQgXCJ1cGRhdGVcIiDlh73mlbDjgIJcclxuICAgICAqIOS8mOWFiOe6p+eahOWAvOi2iuS9ju+8jOWumuaXtuWZqOiiq+inpuWPkeeahOi2iuaXqeOAglxyXG4gICAgICogQG1ldGhvZCBzY2hlZHVsZVVwZGF0ZVxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IHByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IHBhdXNlZFxyXG4gICAgICovXG4gICAgc2NoZWR1bGVVcGRhdGU6IGZ1bmN0aW9uIHNjaGVkdWxlVXBkYXRlKHRhcmdldCwgcHJpb3JpdHksIHBhdXNlZCkge1xuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xuICAgICAgICBpZiAoIXRhcmdldElkKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHRhcmdldC5faWQgPSB0YXJnZXQuX19pbnN0YW5jZUlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhciBoYXNoRWxlbWVudCA9IHRoaXMuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXTtcbiAgICAgICAgaWYgKGhhc2hFbGVtZW50ICYmIGhhc2hFbGVtZW50LmVudHJ5KSB7XG4gICAgICAgICAgICAvLyBjaGVjayBpZiBwcmlvcml0eSBoYXMgY2hhbmdlZFxuICAgICAgICAgICAgaWYgKGhhc2hFbGVtZW50LmVudHJ5LnByaW9yaXR5ICE9PSBwcmlvcml0eSkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl91cGRhdGVIYXNoTG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNjLmxvZ0lEKDE1MDYpO1xuICAgICAgICAgICAgICAgICAgICBoYXNoRWxlbWVudC5lbnRyeS5tYXJrZWRGb3JEZWxldGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBoYXNoRWxlbWVudC5lbnRyeS5wYXVzZWQgPSBwYXVzZWQ7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAvLyB3aWxsIGJlIGFkZGVkIGFnYWluIG91dHNpZGUgaWYgKGhhc2hFbGVtZW50KS5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy51bnNjaGVkdWxlVXBkYXRlKHRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBoYXNoRWxlbWVudC5lbnRyeS5tYXJrZWRGb3JEZWxldGlvbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc2hFbGVtZW50LmVudHJ5LnBhdXNlZCA9IHBhdXNlZDtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbGlzdEVsZW1lbnQgPSBMaXN0RW50cnkuZ2V0KHRhcmdldCwgcHJpb3JpdHksIHBhdXNlZCwgZmFsc2UpO1xuICAgICAgICB2YXIgcHBMaXN0O1xuXG4gICAgICAgIC8vIG1vc3Qgb2YgdGhlIHVwZGF0ZXMgYXJlIGdvaW5nIHRvIGJlIDAsIHRoYXQncyB3YXkgdGhlcmVcbiAgICAgICAgLy8gaXMgYW4gc3BlY2lhbCBsaXN0IGZvciB1cGRhdGVzIHdpdGggcHJpb3JpdHkgMFxuICAgICAgICBpZiAocHJpb3JpdHkgPT09IDApIHtcbiAgICAgICAgICAgIHBwTGlzdCA9IHRoaXMuX3VwZGF0ZXMwTGlzdDtcbiAgICAgICAgICAgIHRoaXMuX2FwcGVuZEluKHBwTGlzdCwgbGlzdEVsZW1lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHBMaXN0ID0gcHJpb3JpdHkgPCAwID8gdGhpcy5fdXBkYXRlc05lZ0xpc3QgOiB0aGlzLl91cGRhdGVzUG9zTGlzdDtcbiAgICAgICAgICAgIHRoaXMuX3ByaW9yaXR5SW4ocHBMaXN0LCBsaXN0RWxlbWVudCwgcHJpb3JpdHkpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgaGFzaCBlbnRyeSBmb3IgcXVpY2sgYWNjZXNzXG4gICAgICAgIHRoaXMuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXSA9IEhhc2hVcGRhdGVFbnRyeS5nZXQocHBMaXN0LCBsaXN0RWxlbWVudCwgdGFyZ2V0LCBudWxsKTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBVbnNjaGVkdWxlcyBhIGNhbGxiYWNrIGZvciBhIGNhbGxiYWNrIGFuZCBhIGdpdmVuIHRhcmdldC5cclxuICAgICAqIElmIHlvdSB3YW50IHRvIHVuc2NoZWR1bGUgdGhlIFwidXBkYXRlXCIsIHVzZSBgdW5zY2hlZHVsZVVwZGF0ZSgpYFxyXG4gICAgICogISN6aFxyXG4gICAgICog5Y+W5raI5oyH5a6a5a+56LGh5a6a5pe25Zmo44CCXHJcbiAgICAgKiDlpoLmnpzpnIDopoHlj5bmtoggdXBkYXRlIOWumuaXtuWZqO+8jOivt+S9v+eUqCB1bnNjaGVkdWxlVXBkYXRlKCnjgIJcclxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZVxyXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGNhbGxiYWNrIHRvIGJlIHVuc2NoZWR1bGVkXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgYm91bmQgdG8gdGhlIGNhbGxiYWNrLlxyXG4gICAgICovXG4gICAgdW5zY2hlZHVsZTogZnVuY3Rpb24gdW5zY2hlZHVsZShjYWxsYmFjaywgdGFyZ2V0KSB7XG4gICAgICAgIC8vY2FsbGJhY2ssIHRhcmdldFxuXG4gICAgICAgIC8vIGV4cGxpY2l0eSBoYW5kbGUgbmlsIGFyZ3VtZW50cyB3aGVuIHJlbW92aW5nIGFuIG9iamVjdFxuICAgICAgICBpZiAoIXRhcmdldCB8fCAhY2FsbGJhY2spIHJldHVybjtcbiAgICAgICAgdmFyIHRhcmdldElkID0gdGFyZ2V0Ll9pZDtcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoMTUxMyk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgxNTEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZWxmID0gdGhpcyxcbiAgICAgICAgICAgIGVsZW1lbnQgPSBzZWxmLl9oYXNoRm9yVGltZXJzW3RhcmdldElkXTtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIHZhciB0aW1lcnMgPSBlbGVtZW50LnRpbWVycztcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsaSA9IHRpbWVycy5sZW5ndGg7IGkgPCBsaTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRpbWVyID0gdGltZXJzW2ldO1xuICAgICAgICAgICAgICAgIGlmIChjYWxsYmFjayA9PT0gdGltZXIuX2NhbGxiYWNrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aW1lciA9PT0gZWxlbWVudC5jdXJyZW50VGltZXIgJiYgIWVsZW1lbnQuY3VycmVudFRpbWVyU2FsdmFnZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY3VycmVudFRpbWVyU2FsdmFnZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRpbWVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIENhbGxiYWNrVGltZXIucHV0KHRpbWVyKTtcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGltZXJJbmRleCBpbiBjYXNlIHdlIGFyZSBpbiB0aWNrOywgbG9vcGluZyBvdmVyIHRoZSBhY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbGVtZW50LnRpbWVySW5kZXggPj0gaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbWVudC50aW1lckluZGV4LS07XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAodGltZXJzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGYuX2N1cnJlbnRUYXJnZXQgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9jdXJyZW50VGFyZ2V0U2FsdmFnZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLl9yZW1vdmVIYXNoRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKiBcclxuICAgICAqICEjZW4gVW5zY2hlZHVsZXMgdGhlIHVwZGF0ZSBjYWxsYmFjayBmb3IgYSBnaXZlbiB0YXJnZXQuXHJcbiAgICAgKiAhI3poIOWPlua2iOaMh+WumuWvueixoeeahCB1cGRhdGUg5a6a5pe25Zmo44CCXHJcbiAgICAgKiBAbWV0aG9kIHVuc2NoZWR1bGVVcGRhdGVcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgVGhlIHRhcmdldCB0byBiZSB1bnNjaGVkdWxlZC5cclxuICAgICAqL1xuICAgIHVuc2NoZWR1bGVVcGRhdGU6IGZ1bmN0aW9uIHVuc2NoZWR1bGVVcGRhdGUodGFyZ2V0KSB7XG4gICAgICAgIGlmICghdGFyZ2V0KSByZXR1cm47XG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuX19pbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgZWxlbWVudCA9IHRoaXMuX2hhc2hGb3JVcGRhdGVzW3RhcmdldElkXTtcbiAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl91cGRhdGVIYXNoTG9ja2VkKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudC5lbnRyeS5tYXJrZWRGb3JEZWxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZVVwZGF0ZUZyb21IYXNoKGVsZW1lbnQuZW50cnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKiBcclxuICAgICAqICEjZW5cclxuICAgICAqIFVuc2NoZWR1bGVzIGFsbCBzY2hlZHVsZWQgY2FsbGJhY2tzIGZvciBhIGdpdmVuIHRhcmdldC5cclxuICAgICAqIFRoaXMgYWxzbyBpbmNsdWRlcyB0aGUgXCJ1cGRhdGVcIiBjYWxsYmFjay5cclxuICAgICAqICEjemgg5Y+W5raI5oyH5a6a5a+56LGh55qE5omA5pyJ5a6a5pe25Zmo77yM5YyF5ousIHVwZGF0ZSDlrprml7blmajjgIJcclxuICAgICAqIEBtZXRob2QgdW5zY2hlZHVsZUFsbEZvclRhcmdldFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCBUaGUgdGFyZ2V0IHRvIGJlIHVuc2NoZWR1bGVkLlxyXG4gICAgICovXG4gICAgdW5zY2hlZHVsZUFsbEZvclRhcmdldDogZnVuY3Rpb24gdW5zY2hlZHVsZUFsbEZvclRhcmdldCh0YXJnZXQpIHtcbiAgICAgICAgLy8gZXhwbGljaXQgbnVsbHB0ciBoYW5kbGluZ1xuICAgICAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuX19pbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDdXN0b20gU2VsZWN0b3JzXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICB2YXIgdGltZXJzID0gZWxlbWVudC50aW1lcnM7XG4gICAgICAgICAgICBpZiAodGltZXJzLmluZGV4T2YoZWxlbWVudC5jdXJyZW50VGltZXIpID4gLTEgJiYgIWVsZW1lbnQuY3VycmVudFRpbWVyU2FsdmFnZWQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LmN1cnJlbnRUaW1lclNhbHZhZ2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gdGltZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgIENhbGxiYWNrVGltZXIucHV0KHRpbWVyc1tpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aW1lcnMubGVuZ3RoID0gMDtcblxuICAgICAgICAgICAgaWYgKHRoaXMuX2N1cnJlbnRUYXJnZXQgPT09IGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9jdXJyZW50VGFyZ2V0U2FsdmFnZWQgPSB0cnVlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZW1vdmVIYXNoRWxlbWVudChlbGVtZW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHVwZGF0ZSBzZWxlY3RvclxuICAgICAgICB0aGlzLnVuc2NoZWR1bGVVcGRhdGUodGFyZ2V0KTtcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBVbnNjaGVkdWxlcyBhbGwgc2NoZWR1bGVkIGNhbGxiYWNrcyBmcm9tIGFsbCB0YXJnZXRzIGluY2x1ZGluZyB0aGUgc3lzdGVtIGNhbGxiYWNrcy48YnIvPlxyXG4gICAgICogWW91IHNob3VsZCBORVZFUiBjYWxsIHRoaXMgbWV0aG9kLCB1bmxlc3MgeW91IGtub3cgd2hhdCB5b3UgYXJlIGRvaW5nLlxyXG4gICAgICogISN6aFxyXG4gICAgICog5Y+W5raI5omA5pyJ5a+56LGh55qE5omA5pyJ5a6a5pe25Zmo77yM5YyF5ous57O757uf5a6a5pe25Zmo44CCPGJyLz5cclxuICAgICAqIOS4jeeUqOiwg+eUqOatpOWHveaVsO+8jOmZpOmdnuS9oOehruWumuS9oOWcqOWBmuS7gOS5iOOAglxyXG4gICAgICogQG1ldGhvZCB1bnNjaGVkdWxlQWxsXHJcbiAgICAgKi9cbiAgICB1bnNjaGVkdWxlQWxsOiBmdW5jdGlvbiB1bnNjaGVkdWxlQWxsKCkge1xuICAgICAgICB0aGlzLnVuc2NoZWR1bGVBbGxXaXRoTWluUHJpb3JpdHkoY2MuU2NoZWR1bGVyLlBSSU9SSVRZX1NZU1RFTSk7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogVW5zY2hlZHVsZXMgYWxsIGNhbGxiYWNrcyBmcm9tIGFsbCB0YXJnZXRzIHdpdGggYSBtaW5pbXVtIHByaW9yaXR5Ljxici8+XHJcbiAgICAgKiBZb3Ugc2hvdWxkIG9ubHkgY2FsbCB0aGlzIHdpdGggYFBSSU9SSVRZX05PTl9TWVNURU1fTUlOYCBvciBoaWdoZXIuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDlj5bmtojmiYDmnInkvJjlhYjnuqfnmoTlgLzlpKfkuo7mjIflrprkvJjlhYjnuqfnmoTlrprml7blmajjgII8YnIvPlxyXG4gICAgICog5L2g5bqU6K+l5Y+q5Y+W5raI5LyY5YWI57qn55qE5YC85aSn5LqOIFBSSU9SSVRZX05PTl9TWVNURU1fTUlOIOeahOWumuaXtuWZqOOAglxyXG4gICAgICogQG1ldGhvZCB1bnNjaGVkdWxlQWxsV2l0aE1pblByaW9yaXR5XHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gbWluUHJpb3JpdHkgVGhlIG1pbmltdW0gcHJpb3JpdHkgb2Ygc2VsZWN0b3IgdG8gYmUgdW5zY2hlZHVsZWQuIFdoaWNoIG1lYW5zLCBhbGwgc2VsZWN0b3JzIHdoaWNoXHJcbiAgICAgKiAgICAgICAgcHJpb3JpdHkgaXMgaGlnaGVyIHRoYW4gbWluUHJpb3JpdHkgd2lsbCBiZSB1bnNjaGVkdWxlZC5cclxuICAgICAqL1xuICAgIHVuc2NoZWR1bGVBbGxXaXRoTWluUHJpb3JpdHk6IGZ1bmN0aW9uIHVuc2NoZWR1bGVBbGxXaXRoTWluUHJpb3JpdHkobWluUHJpb3JpdHkpIHtcbiAgICAgICAgLy8gQ3VzdG9tIFNlbGVjdG9yc1xuICAgICAgICB2YXIgaSxcbiAgICAgICAgICAgIGVsZW1lbnQsXG4gICAgICAgICAgICBhcnIgPSB0aGlzLl9hcnJheUZvclRpbWVycztcbiAgICAgICAgZm9yIChpID0gYXJyLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgICAgICBlbGVtZW50ID0gYXJyW2ldO1xuICAgICAgICAgICAgdGhpcy51bnNjaGVkdWxlQWxsRm9yVGFyZ2V0KGVsZW1lbnQudGFyZ2V0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwZGF0ZXMgc2VsZWN0b3JzXG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgdmFyIHRlbXBfbGVuZ3RoID0gMDtcbiAgICAgICAgaWYgKG1pblByaW9yaXR5IDwgMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuX3VwZGF0ZXNOZWdMaXN0Lmxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICB0ZW1wX2xlbmd0aCA9IHRoaXMuX3VwZGF0ZXNOZWdMaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXNOZWdMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5wcmlvcml0eSA+PSBtaW5Qcmlvcml0eSkgdGhpcy51bnNjaGVkdWxlVXBkYXRlKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgaWYgKHRlbXBfbGVuZ3RoID09IHRoaXMuX3VwZGF0ZXNOZWdMaXN0Lmxlbmd0aCkgaSsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKG1pblByaW9yaXR5IDw9IDApIHtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCB0aGlzLl91cGRhdGVzMExpc3QubGVuZ3RoOykge1xuICAgICAgICAgICAgICAgIHRlbXBfbGVuZ3RoID0gdGhpcy5fdXBkYXRlczBMaXN0Lmxlbmd0aDtcbiAgICAgICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXMwTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkpIHRoaXMudW5zY2hlZHVsZVVwZGF0ZShlbnRyeS50YXJnZXQpO1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wX2xlbmd0aCA9PSB0aGlzLl91cGRhdGVzMExpc3QubGVuZ3RoKSBpKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5fdXBkYXRlc1Bvc0xpc3QubGVuZ3RoOykge1xuICAgICAgICAgICAgdGVtcF9sZW5ndGggPSB0aGlzLl91cGRhdGVzUG9zTGlzdC5sZW5ndGg7XG4gICAgICAgICAgICBlbnRyeSA9IHRoaXMuX3VwZGF0ZXNQb3NMaXN0W2ldO1xuICAgICAgICAgICAgaWYgKGVudHJ5ICYmIGVudHJ5LnByaW9yaXR5ID49IG1pblByaW9yaXR5KSB0aGlzLnVuc2NoZWR1bGVVcGRhdGUoZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgIGlmICh0ZW1wX2xlbmd0aCA9PSB0aGlzLl91cGRhdGVzUG9zTGlzdC5sZW5ndGgpIGkrKztcbiAgICAgICAgfVxuICAgIH0sXG5cbiAgICAvKiogXHJcbiAgICAgKiAhI2VuIENoZWNrcyB3aGV0aGVyIGEgY2FsbGJhY2sgZm9yIGEgZ2l2ZW4gdGFyZ2V0IGlzIHNjaGVkdWxlZC5cclxuICAgICAqICEjemgg5qOA5p+l5oyH5a6a55qE5Zue6LCD5Ye95pWw5ZKM5Zue6LCD5a+56LGh57uE5ZCI5piv5ZCm5a2Y5Zyo5a6a5pe25Zmo44CCXHJcbiAgICAgKiBAbWV0aG9kIGlzU2NoZWR1bGVkXHJcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gY2hlY2suXHJcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgb2YgdGhlIGNhbGxiYWNrLlxyXG4gICAgICogQHJldHVybiB7Qm9vbGVhbn0gVHJ1ZSBpZiB0aGUgc3BlY2lmaWVkIGNhbGxiYWNrIGlzIGludm9rZWQsIGZhbHNlIGlmIG5vdC5cclxuICAgICAqL1xuICAgIGlzU2NoZWR1bGVkOiBmdW5jdGlvbiBpc1NjaGVkdWxlZChjYWxsYmFjaywgdGFyZ2V0KSB7XG4gICAgICAgIC8va2V5LCB0YXJnZXRcbiAgICAgICAgLy9zZWxlY3RvciwgdGFyZ2V0XG4gICAgICAgIGNjLmFzc2VydElEKGNhbGxiYWNrLCAxNTA4KTtcbiAgICAgICAgY2MuYXNzZXJ0SUQodGFyZ2V0LCAxNTA5KTtcbiAgICAgICAgdmFyIHRhcmdldElkID0gdGFyZ2V0Ll9pZDtcbiAgICAgICAgaWYgKCF0YXJnZXRJZCkge1xuICAgICAgICAgICAgaWYgKHRhcmdldC5fX2luc3RhbmNlSWQpIHtcbiAgICAgICAgICAgICAgICBjYy53YXJuSUQoMTUxMyk7XG4gICAgICAgICAgICAgICAgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkID0gdGFyZ2V0Ll9faW5zdGFuY2VJZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY2MuZXJyb3JJRCgxNTEwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XG5cbiAgICAgICAgaWYgKCFlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZWxlbWVudC50aW1lcnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHRpbWVycyA9IGVsZW1lbnQudGltZXJzO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aW1lcnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGltZXIgPSB0aW1lcnNbaV07XG5cbiAgICAgICAgICAgICAgICBpZiAoY2FsbGJhY2sgPT09IHRpbWVyLl9jYWxsYmFjaykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBQYXVzZSBhbGwgc2VsZWN0b3JzIGZyb20gYWxsIHRhcmdldHMuPGJyLz5cclxuICAgICAqIFlvdSBzaG91bGQgTkVWRVIgY2FsbCB0aGlzIG1ldGhvZCwgdW5sZXNzIHlvdSBrbm93IHdoYXQgeW91IGFyZSBkb2luZy5cclxuICAgICAqICEjemhcclxuICAgICAqIOaaguWBnOaJgOacieWvueixoeeahOaJgOacieWumuaXtuWZqOOAgjxici8+XHJcbiAgICAgKiDkuI3opoHosIPnlKjov5nkuKrmlrnms5XvvIzpmaTpnZ7kvaDnn6XpgZPkvaDmraPlnKjlgZrku4DkuYjjgIJcclxuICAgICAqIEBtZXRob2QgcGF1c2VBbGxUYXJnZXRzXHJcbiAgICAgKi9cbiAgICBwYXVzZUFsbFRhcmdldHM6IGZ1bmN0aW9uIHBhdXNlQWxsVGFyZ2V0cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGF1c2VBbGxUYXJnZXRzV2l0aE1pblByaW9yaXR5KGNjLlNjaGVkdWxlci5QUklPUklUWV9TWVNURU0pO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIFBhdXNlIGFsbCBzZWxlY3RvcnMgZnJvbSBhbGwgdGFyZ2V0cyB3aXRoIGEgbWluaW11bSBwcmlvcml0eS4gPGJyLz5cclxuICAgICAqIFlvdSBzaG91bGQgb25seSBjYWxsIHRoaXMgd2l0aCBrQ0NQcmlvcml0eU5vblN5c3RlbU1pbiBvciBoaWdoZXIuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDmmoLlgZzmiYDmnInkvJjlhYjnuqfnmoTlgLzlpKfkuo7mjIflrprkvJjlhYjnuqfnmoTlrprml7blmajjgII8YnIvPlxyXG4gICAgICog5L2g5bqU6K+l5Y+q5pqC5YGc5LyY5YWI57qn55qE5YC85aSn5LqOIFBSSU9SSVRZX05PTl9TWVNURU1fTUlOIOeahOWumuaXtuWZqOOAglxyXG4gICAgICogQG1ldGhvZCBwYXVzZUFsbFRhcmdldHNXaXRoTWluUHJpb3JpdHlcclxuICAgICAqIEBwYXJhbSB7TnVtYmVyfSBtaW5Qcmlvcml0eVxyXG4gICAgICovXG4gICAgcGF1c2VBbGxUYXJnZXRzV2l0aE1pblByaW9yaXR5OiBmdW5jdGlvbiBwYXVzZUFsbFRhcmdldHNXaXRoTWluUHJpb3JpdHkobWluUHJpb3JpdHkpIHtcbiAgICAgICAgdmFyIGlkc1dpdGhTZWxlY3RvcnMgPSBbXTtcblxuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBlbGVtZW50LFxuICAgICAgICAgICAgbG9jQXJyYXlGb3JUaW1lcnMgPSBzZWxmLl9hcnJheUZvclRpbWVycztcbiAgICAgICAgdmFyIGksIGxpO1xuICAgICAgICAvLyBDdXN0b20gU2VsZWN0b3JzXG4gICAgICAgIGZvciAoaSA9IDAsIGxpID0gbG9jQXJyYXlGb3JUaW1lcnMubGVuZ3RoOyBpIDwgbGk7IGkrKykge1xuICAgICAgICAgICAgZWxlbWVudCA9IGxvY0FycmF5Rm9yVGltZXJzW2ldO1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50LnBhdXNlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgaWRzV2l0aFNlbGVjdG9ycy5wdXNoKGVsZW1lbnQudGFyZ2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbnRyeTtcbiAgICAgICAgaWYgKG1pblByaW9yaXR5IDwgMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuX3VwZGF0ZXNOZWdMaXN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgZW50cnkgPSB0aGlzLl91cGRhdGVzTmVnTGlzdFtpXTtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVudHJ5LnByaW9yaXR5ID49IG1pblByaW9yaXR5KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRyeS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWRzV2l0aFNlbGVjdG9ycy5wdXNoKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWluUHJpb3JpdHkgPD0gMCkge1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMuX3VwZGF0ZXMwTGlzdC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fdXBkYXRlczBMaXN0W2ldO1xuICAgICAgICAgICAgICAgIGlmIChlbnRyeSkge1xuICAgICAgICAgICAgICAgICAgICBlbnRyeS5wYXVzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBpZHNXaXRoU2VsZWN0b3JzLnB1c2goZW50cnkudGFyZ2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdGhpcy5fdXBkYXRlc1Bvc0xpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGVudHJ5ID0gdGhpcy5fdXBkYXRlc1Bvc0xpc3RbaV07XG4gICAgICAgICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZW50cnkucHJpb3JpdHkgPj0gbWluUHJpb3JpdHkpIHtcbiAgICAgICAgICAgICAgICAgICAgZW50cnkucGF1c2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgaWRzV2l0aFNlbGVjdG9ycy5wdXNoKGVudHJ5LnRhcmdldCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGlkc1dpdGhTZWxlY3RvcnM7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogUmVzdW1lIHNlbGVjdG9ycyBvbiBhIHNldCBvZiB0YXJnZXRzLjxici8+XHJcbiAgICAgKiBUaGlzIGNhbiBiZSB1c2VmdWwgZm9yIHVuZG9pbmcgYSBjYWxsIHRvIHBhdXNlQWxsQ2FsbGJhY2tzLlxyXG4gICAgICogISN6aFxyXG4gICAgICog5oGi5aSN5oyH5a6a5pWw57uE5Lit5omA5pyJ5a+56LGh55qE5a6a5pe25Zmo44CCPGJyLz5cclxuICAgICAqIOi/meS4quWHveaVsOaYryBwYXVzZUFsbENhbGxiYWNrcyDnmoTpgIbmk43kvZzjgIJcclxuICAgICAqIEBtZXRob2QgcmVzdW1lVGFyZ2V0c1xyXG4gICAgICogQHBhcmFtIHtBcnJheX0gdGFyZ2V0c1RvUmVzdW1lXHJcbiAgICAgKi9cbiAgICByZXN1bWVUYXJnZXRzOiBmdW5jdGlvbiByZXN1bWVUYXJnZXRzKHRhcmdldHNUb1Jlc3VtZSkge1xuICAgICAgICBpZiAoIXRhcmdldHNUb1Jlc3VtZSkgcmV0dXJuO1xuXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGFyZ2V0c1RvUmVzdW1lLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLnJlc3VtZVRhcmdldCh0YXJnZXRzVG9SZXN1bWVbaV0pO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlblxyXG4gICAgICogUGF1c2VzIHRoZSB0YXJnZXQuPGJyLz5cclxuICAgICAqIEFsbCBzY2hlZHVsZWQgc2VsZWN0b3JzL3VwZGF0ZSBmb3IgYSBnaXZlbiB0YXJnZXQgd29uJ3QgYmUgJ3RpY2tlZCcgdW50aWwgdGhlIHRhcmdldCBpcyByZXN1bWVkLjxici8+XHJcbiAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzIG5vdCBwcmVzZW50LCBub3RoaW5nIGhhcHBlbnMuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDmmoLlgZzmjIflrprlr7nosaHnmoTlrprml7blmajjgII8YnIvPlxyXG4gICAgICog5oyH5a6a5a+56LGh55qE5omA5pyJ5a6a5pe25Zmo6YO95Lya6KKr5pqC5YGc44CCPGJyLz5cclxuICAgICAqIOWmguaenOaMh+WumueahOWvueixoeayoeacieWumuaXtuWZqO+8jOS7gOS5iOS5n+S4jeS8muWPkeeUn+OAglxyXG4gICAgICogQG1ldGhvZCBwYXVzZVRhcmdldFxyXG4gICAgICogQHBhcmFtIHtPYmplY3R9IHRhcmdldFxyXG4gICAgICovXG4gICAgcGF1c2VUYXJnZXQ6IGZ1bmN0aW9uIHBhdXNlVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5hc3NlcnRJRCh0YXJnZXQsIDE1MDMpO1xuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xuICAgICAgICBpZiAoIXRhcmdldElkKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHRhcmdldC5faWQgPSB0YXJnZXQuX19pbnN0YW5jZUlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy9jdXN0b21lciBzZWxlY3RvcnNcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzLFxuICAgICAgICAgICAgZWxlbWVudCA9IHNlbGYuX2hhc2hGb3JUaW1lcnNbdGFyZ2V0SWRdO1xuICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgZWxlbWVudC5wYXVzZWQgPSB0cnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgY2FsbGJhY2tcbiAgICAgICAgdmFyIGVsZW1lbnRVcGRhdGUgPSBzZWxmLl9oYXNoRm9yVXBkYXRlc1t0YXJnZXRJZF07XG4gICAgICAgIGlmIChlbGVtZW50VXBkYXRlKSB7XG4gICAgICAgICAgICBlbGVtZW50VXBkYXRlLmVudHJ5LnBhdXNlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBSZXN1bWVzIHRoZSB0YXJnZXQuPGJyLz5cclxuICAgICAqIFRoZSAndGFyZ2V0JyB3aWxsIGJlIHVucGF1c2VkLCBzbyBhbGwgc2NoZWR1bGUgc2VsZWN0b3JzL3VwZGF0ZSB3aWxsIGJlICd0aWNrZWQnIGFnYWluLjxici8+XHJcbiAgICAgKiBJZiB0aGUgdGFyZ2V0IGlzIG5vdCBwcmVzZW50LCBub3RoaW5nIGhhcHBlbnMuXHJcbiAgICAgKiAhI3poXHJcbiAgICAgKiDmgaLlpI3mjIflrprlr7nosaHnmoTmiYDmnInlrprml7blmajjgII8YnIvPlxyXG4gICAgICog5oyH5a6a5a+56LGh55qE5omA5pyJ5a6a5pe25Zmo5bCG57un57ut5bel5L2c44CCPGJyLz5cclxuICAgICAqIOWmguaenOaMh+WumueahOWvueixoeayoeacieWumuaXtuWZqO+8jOS7gOS5iOS5n+S4jeS8muWPkeeUn+OAglxyXG4gICAgICogQG1ldGhvZCByZXN1bWVUYXJnZXRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqL1xuICAgIHJlc3VtZVRhcmdldDogZnVuY3Rpb24gcmVzdW1lVGFyZ2V0KHRhcmdldCkge1xuICAgICAgICBjYy5hc3NlcnRJRCh0YXJnZXQsIDE1MDQpO1xuICAgICAgICB2YXIgdGFyZ2V0SWQgPSB0YXJnZXQuX2lkO1xuICAgICAgICBpZiAoIXRhcmdldElkKSB7XG4gICAgICAgICAgICBpZiAodGFyZ2V0Ll9faW5zdGFuY2VJZCkge1xuICAgICAgICAgICAgICAgIGNjLndhcm5JRCgxNTEzKTtcbiAgICAgICAgICAgICAgICB0YXJnZXRJZCA9IHRhcmdldC5faWQgPSB0YXJnZXQuX19pbnN0YW5jZUlkO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjYy5lcnJvcklEKDE1MTApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gY3VzdG9tIHNlbGVjdG9yc1xuICAgICAgICB2YXIgc2VsZiA9IHRoaXMsXG4gICAgICAgICAgICBlbGVtZW50ID0gc2VsZi5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICBlbGVtZW50LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy91cGRhdGUgY2FsbGJhY2tcbiAgICAgICAgdmFyIGVsZW1lbnRVcGRhdGUgPSBzZWxmLl9oYXNoRm9yVXBkYXRlc1t0YXJnZXRJZF07XG4gICAgICAgIGlmIChlbGVtZW50VXBkYXRlKSB7XG4gICAgICAgICAgICBlbGVtZW50VXBkYXRlLmVudHJ5LnBhdXNlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBSZXR1cm5zIHdoZXRoZXIgb3Igbm90IHRoZSB0YXJnZXQgaXMgcGF1c2VkLlxyXG4gICAgICogISN6aCDov5Tlm57mjIflrprlr7nosaHnmoTlrprml7blmajmmK/lkKbmmoLlgZzkuobjgIJcclxuICAgICAqIEBtZXRob2QgaXNUYXJnZXRQYXVzZWRcclxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXRcclxuICAgICAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAgICAgKi9cbiAgICBpc1RhcmdldFBhdXNlZDogZnVuY3Rpb24gaXNUYXJnZXRQYXVzZWQodGFyZ2V0KSB7XG4gICAgICAgIGNjLmFzc2VydElEKHRhcmdldCwgMTUwNSk7XG4gICAgICAgIHZhciB0YXJnZXRJZCA9IHRhcmdldC5faWQ7XG4gICAgICAgIGlmICghdGFyZ2V0SWQpIHtcbiAgICAgICAgICAgIGlmICh0YXJnZXQuX19pbnN0YW5jZUlkKSB7XG4gICAgICAgICAgICAgICAgY2Mud2FybklEKDE1MTMpO1xuICAgICAgICAgICAgICAgIHRhcmdldElkID0gdGFyZ2V0Ll9pZCA9IHRhcmdldC5fX2luc3RhbmNlSWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGNjLmVycm9ySUQoMTUxMCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBDdXN0b20gc2VsZWN0b3JzXG4gICAgICAgIHZhciBlbGVtZW50ID0gdGhpcy5faGFzaEZvclRpbWVyc1t0YXJnZXRJZF07XG4gICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudC5wYXVzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGVsZW1lbnRVcGRhdGUgPSB0aGlzLl9oYXNoRm9yVXBkYXRlc1t0YXJnZXRJZF07XG4gICAgICAgIGlmIChlbGVtZW50VXBkYXRlKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudFVwZGF0ZS5lbnRyeS5wYXVzZWQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn07XG5cbi8qKlxyXG4gKiAhI2VuIFByaW9yaXR5IGxldmVsIHJlc2VydmVkIGZvciBzeXN0ZW0gc2VydmljZXMuXHJcbiAqICEjemgg57O757uf5pyN5Yqh55qE5LyY5YWI57qn44CCXHJcbiAqIEBwcm9wZXJ0eSBQUklPUklUWV9TWVNURU1cclxuICogQHR5cGUge051bWJlcn1cclxuICogQHN0YXRpY1xyXG4gKi9cbmNjLlNjaGVkdWxlci5QUklPUklUWV9TWVNURU0gPSAxIDw8IDMxO1xuXG4vKipcclxuICogISNlbiBNaW5pbXVtIHByaW9yaXR5IGxldmVsIGZvciB1c2VyIHNjaGVkdWxpbmcuXHJcbiAqICEjemgg55So5oi36LCD5bqm5pyA5L2O5LyY5YWI57qn44CCXHJcbiAqIEBwcm9wZXJ0eSBQUklPUklUWV9OT05fU1lTVEVNXHJcbiAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAqIEBzdGF0aWNcclxuICovXG5jYy5TY2hlZHVsZXIuUFJJT1JJVFlfTk9OX1NZU1RFTSA9IGNjLlNjaGVkdWxlci5QUklPUklUWV9TWVNURU0gKyAxO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNjLlNjaGVkdWxlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRVMk5vWldSMWJHVnlMbXB6SWwwc0ltNWhiV1Z6SWpwYkltcHpJaXdpY21WeGRXbHlaU0lzSWtsa1IyVnVaWEpoZEdWeUlpd2lUVUZZWDFCUFQweGZVMGxhUlNJc0ltbGtSMlZ1WlhKaGRHVnlJaXdpVEdsemRFVnVkSEo1SWl3aWRHRnlaMlYwSWl3aWNISnBiM0pwZEhraUxDSndZWFZ6WldRaUxDSnRZWEpyWldSR2IzSkVaV3hsZEdsdmJpSXNJbDlzYVhOMFJXNTBjbWxsY3lJc0ltZGxkQ0lzSW5KbGMzVnNkQ0lzSW5CdmNDSXNJbkIxZENJc0ltVnVkSEo1SWl3aWJHVnVaM1JvSWl3aWNIVnphQ0lzSWtoaGMyaFZjR1JoZEdWRmJuUnllU0lzSW14cGMzUWlMQ0pqWVd4c1ltRmpheUlzSWw5b1lYTm9WWEJrWVhSbFJXNTBjbWxsY3lJc0lraGhjMmhVYVcxbGNrVnVkSEo1SWl3aWRHbHRaWEp6SWl3aWRHbHRaWEpKYm1SbGVDSXNJbU4xY25KbGJuUlVhVzFsY2lJc0ltTjFjbkpsYm5SVWFXMWxjbE5oYkhaaFoyVmtJaXdpWDNRaUxDSmZhR0Z6YUZScGJXVnlSVzUwY21sbGN5SXNJa05oYkd4aVlXTnJWR2x0WlhJaUxDSmZiRzlqYXlJc0lsOXpZMmhsWkhWc1pYSWlMQ0pmWld4aGNITmxaQ0lzSWw5eWRXNUdiM0psZG1WeUlpd2lYM1Z6WlVSbGJHRjVJaXdpWDNScGJXVnpSWGhsWTNWMFpXUWlMQ0pmY21Wd1pXRjBJaXdpWDJSbGJHRjVJaXdpWDJsdWRHVnlkbUZzSWl3aVgzUmhjbWRsZENJc0lsOWpZV3hzWW1GamF5SXNJbkJ5YjNSdklpd2ljSEp2ZEc5MGVYQmxJaXdpYVc1cGRGZHBkR2hEWVd4c1ltRmpheUlzSW5OamFHVmtkV3hsY2lJc0luTmxZMjl1WkhNaUxDSnlaWEJsWVhRaUxDSmtaV3hoZVNJc0ltTmpJaXdpYldGamNtOGlMQ0pTUlZCRlFWUmZSazlTUlZaRlVpSXNJbWRsZEVsdWRHVnlkbUZzSWl3aWMyVjBTVzUwWlhKMllXd2lMQ0pwYm5SbGNuWmhiQ0lzSW5Wd1pHRjBaU0lzSW1SMElpd2lkSEpwWjJkbGNpSXNJbU5oYm1ObGJDSXNJbWRsZEVOaGJHeGlZV05ySWl3aVkyRnNiQ0lzSW5WdWMyTm9aV1IxYkdVaUxDSmZkR2x0WlhKeklpd2lkR2x0WlhJaUxDSlRZMmhsWkhWc1pYSWlMQ0pmZEdsdFpWTmpZV3hsSWl3aVgzVndaR0YwWlhOT1pXZE1hWE4wSWl3aVgzVndaR0YwWlhNd1RHbHpkQ0lzSWw5MWNHUmhkR1Z6VUc5elRHbHpkQ0lzSWw5b1lYTm9SbTl5VlhCa1lYUmxjeUlzSW1OeVpXRjBaVTFoY0NJc0lsOW9ZWE5vUm05eVZHbHRaWEp6SWl3aVgyTjFjbkpsYm5SVVlYSm5aWFFpTENKZlkzVnljbVZ1ZEZSaGNtZGxkRk5oYkhaaFoyVmtJaXdpWDNWd1pHRjBaVWhoYzJoTWIyTnJaV1FpTENKZllYSnlZWGxHYjNKVWFXMWxjbk1pTENKamIyNXpkSEoxWTNSdmNpSXNJbDl5WlcxdmRtVklZWE5vUld4bGJXVnVkQ0lzSW1Wc1pXMWxiblFpTENKZmFXUWlMQ0poY25JaUxDSnBJaXdpYkNJc0luTndiR2xqWlNJc0lsOXlaVzF2ZG1WVmNHUmhkR1ZHY205dFNHRnphQ0lzSW5SaGNtZGxkRWxrSWl3aWMyVnNaaUlzSW14cGMzUkZiblJ5ZVNJc0lsOXdjbWx2Y21sMGVVbHVJaXdpY0hCTWFYTjBJaXdpYkdsemRFVnNaVzFsYm5RaUxDSmZZWEJ3Wlc1a1NXNGlMQ0psYm1GaWJHVkdiM0pVWVhKblpYUWlMQ0pmWDJsdWMzUmhibU5sU1dRaUxDSjNZWEp1U1VRaUxDSm5aWFJPWlhkSlpDSXNJbk5sZEZScGJXVlRZMkZzWlNJc0luUnBiV1ZUWTJGc1pTSXNJbWRsZEZScGJXVlRZMkZzWlNJc0lteGxiaUlzSW1Wc2RDSXNJbk5qYUdWa2RXeGxJaXdpZEcxd0lpd2lZWEpuZFcxbGJuUnpJaXdpWVhOelpYSjBTVVFpTENKbGNuSnZja2xFSWl3aWJHOW5TVVFpTENKelkyaGxaSFZzWlZWd1pHRjBaU0lzSW1oaGMyaEZiR1Z0Wlc1MElpd2lkVzV6WTJobFpIVnNaVlZ3WkdGMFpTSXNJbXhwSWl3aWRXNXpZMmhsWkhWc1pVRnNiRVp2Y2xSaGNtZGxkQ0lzSW1sdVpHVjRUMllpTENKMWJuTmphR1ZrZFd4bFFXeHNJaXdpZFc1elkyaGxaSFZzWlVGc2JGZHBkR2hOYVc1UWNtbHZjbWwwZVNJc0lsQlNTVTlTU1ZSWlgxTlpVMVJGVFNJc0ltMXBibEJ5YVc5eWFYUjVJaXdpZEdWdGNGOXNaVzVuZEdnaUxDSnBjMU5qYUdWa2RXeGxaQ0lzSW5CaGRYTmxRV3hzVkdGeVoyVjBjeUlzSW5CaGRYTmxRV3hzVkdGeVoyVjBjMWRwZEdoTmFXNVFjbWx2Y21sMGVTSXNJbWxrYzFkcGRHaFRaV3hsWTNSdmNuTWlMQ0pzYjJOQmNuSmhlVVp2Y2xScGJXVnljeUlzSW5KbGMzVnRaVlJoY21kbGRITWlMQ0owWVhKblpYUnpWRzlTWlhOMWJXVWlMQ0p5WlhOMWJXVlVZWEpuWlhRaUxDSndZWFZ6WlZSaGNtZGxkQ0lzSW1Wc1pXMWxiblJWY0dSaGRHVWlMQ0pwYzFSaGNtZGxkRkJoZFhObFpDSXNJbEJTU1U5U1NWUlpYMDVQVGw5VFdWTlVSVTBpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFUQkNRVHM3TzBGQlIwRXNTVUZCVFVFc1MwRkJTME1zVVVGQlVTeGxRVUZTTEVOQlFWZzdRVUZEUVN4SlFVRk5ReXhqUVVGalJDeFJRVUZSTEhsQ1FVRlNMRU5CUVhCQ08wRkJRMEVzU1VGQlRVVXNaMEpCUVdkQ0xFVkJRWFJDT3p0QlFVVkJMRWxCUVVsRExHTkJRV01zU1VGQlNVWXNWMEZCU2l4RFFVRm5RaXhYUVVGb1FpeERRVUZzUWpzN1FVRkZRVHRCUVVOQk96czdPenM3T3p0QlFWRkJMRWxCUVVsSExGbEJRVmtzVTBGQldrRXNVMEZCV1N4RFFVRlZReXhOUVVGV0xFVkJRV3RDUXl4UlFVRnNRaXhGUVVFMFFrTXNUVUZCTlVJc1JVRkJiME5ETEdsQ1FVRndReXhGUVVGMVJEdEJRVU51UlN4VFFVRkxTQ3hOUVVGTUxFZEJRV05CTEUxQlFXUTdRVUZEUVN4VFFVRkxReXhSUVVGTUxFZEJRV2RDUVN4UlFVRm9RanRCUVVOQkxGTkJRVXRETEUxQlFVd3NSMEZCWTBFc1RVRkJaRHRCUVVOQkxGTkJRVXRETEdsQ1FVRk1MRWRCUVhsQ1FTeHBRa0ZCZWtJN1FVRkRTQ3hEUVV4RU96dEJRVTlCTEVsQlFVbERMR1ZCUVdVc1JVRkJia0k3UVVGRFFVd3NWVUZCVlUwc1IwRkJWaXhIUVVGblFpeFZRVUZWVEN4TlFVRldMRVZCUVd0Q1F5eFJRVUZzUWl4RlFVRTBRa01zVFVGQk5VSXNSVUZCYjBORExHbENRVUZ3UXl4RlFVRjFSRHRCUVVOdVJTeFJRVUZKUnl4VFFVRlRSaXhoUVVGaFJ5eEhRVUZpTEVWQlFXSTdRVUZEUVN4UlFVRkpSQ3hOUVVGS0xFVkJRVms3UVVGRFVrRXNaVUZCVDA0c1RVRkJVQ3hIUVVGblFrRXNUVUZCYUVJN1FVRkRRVTBzWlVGQlQwd3NVVUZCVUN4SFFVRnJRa0VzVVVGQmJFSTdRVUZEUVVzc1pVRkJUMG9zVFVGQlVDeEhRVUZuUWtFc1RVRkJhRUk3UVVGRFFVa3NaVUZCVDBnc2FVSkJRVkFzUjBGQk1rSkJMR2xDUVVFelFqdEJRVU5JTEV0QlRFUXNUVUZOU3p0QlFVTkVSeXhwUWtGQlV5eEpRVUZKVUN4VFFVRktMRU5CUVdORExFMUJRV1FzUlVGQmMwSkRMRkZCUVhSQ0xFVkJRV2REUXl4TlFVRm9ReXhGUVVGM1EwTXNhVUpCUVhoRExFTkJRVlE3UVVGRFNEdEJRVU5FTEZkQlFVOUhMRTFCUVZBN1FVRkRTQ3hEUVZwRU8wRkJZVUZRTEZWQlFWVlRMRWRCUVZZc1IwRkJaMElzVlVGQlZVTXNTMEZCVml4RlFVRnBRanRCUVVNM1FpeFJRVUZKVEN4aFFVRmhUU3hOUVVGaUxFZEJRWE5DWWl4aFFVRXhRaXhGUVVGNVF6dEJRVU55UTFrc1kwRkJUVlFzVFVGQlRpeEhRVUZsTEVsQlFXWTdRVUZEUVVrc2NVSkJRV0ZQTEVsQlFXSXNRMEZCYTBKR0xFdEJRV3hDTzBGQlEwZzdRVUZEU2l4RFFVeEVPenRCUVU5Qk96czdPenM3T3p0QlFWRkJMRWxCUVVsSExHdENRVUZyUWl4VFFVRnNRa0VzWlVGQmEwSXNRMEZCVlVNc1NVRkJWaXhGUVVGblFrb3NTMEZCYUVJc1JVRkJkVUpVTEUxQlFYWkNMRVZCUVN0Q1l5eFJRVUV2UWl4RlFVRjVRenRCUVVNelJDeFRRVUZMUkN4SlFVRk1MRWRCUVZsQkxFbEJRVm83UVVGRFFTeFRRVUZMU2l4TFFVRk1MRWRCUVdGQkxFdEJRV0k3UVVGRFFTeFRRVUZMVkN4TlFVRk1MRWRCUVdOQkxFMUJRV1E3UVVGRFFTeFRRVUZMWXl4UlFVRk1MRWRCUVdkQ1FTeFJRVUZvUWp0QlFVTklMRU5CVEVRN1FVRk5RU3hKUVVGSlF5eHhRa0ZCY1VJc1JVRkJla0k3UVVGRFFVZ3NaMEpCUVdkQ1VDeEhRVUZvUWl4SFFVRnpRaXhWUVVGVlVTeEpRVUZXTEVWQlFXZENTaXhMUVVGb1FpeEZRVUYxUWxRc1RVRkJka0lzUlVGQkswSmpMRkZCUVM5Q0xFVkJRWGxETzBGQlF6TkVMRkZCUVVsU0xGTkJRVk5UTEcxQ1FVRnRRbElzUjBGQmJrSXNSVUZCWWp0QlFVTkJMRkZCUVVsRUxFMUJRVW9zUlVGQldUdEJRVU5TUVN4bFFVRlBUeXhKUVVGUUxFZEJRV05CTEVsQlFXUTdRVUZEUVZBc1pVRkJUMGNzUzBGQlVDeEhRVUZsUVN4TFFVRm1PMEZCUTBGSUxHVkJRVTlPTEUxQlFWQXNSMEZCWjBKQkxFMUJRV2hDTzBGQlEwRk5MR1ZCUVU5UkxGRkJRVkFzUjBGQmEwSkJMRkZCUVd4Q08wRkJRMGdzUzBGTVJDeE5RVTFMTzBGQlEwUlNMR2xDUVVGVExFbEJRVWxOTEdWQlFVb3NRMEZCYjBKRExFbEJRWEJDTEVWQlFUQkNTaXhMUVVFeFFpeEZRVUZwUTFRc1RVRkJha01zUlVGQmVVTmpMRkZCUVhwRExFTkJRVlE3UVVGRFNEdEJRVU5FTEZkQlFVOVNMRTFCUVZBN1FVRkRTQ3hEUVZwRU8wRkJZVUZOTEdkQ1FVRm5Ra29zUjBGQmFFSXNSMEZCYzBJc1ZVRkJWVU1zUzBGQlZpeEZRVUZwUWp0QlFVTnVReXhSUVVGSlRTeHRRa0ZCYlVKTUxFMUJRVzVDTEVkQlFUUkNZaXhoUVVGb1F5eEZRVUVyUXp0QlFVTXpRMWtzWTBGQlRVa3NTVUZCVGl4SFFVRmhTaXhOUVVGTlFTeExRVUZPTEVkQlFXTkJMRTFCUVUxVUxFMUJRVTRzUjBGQlpWTXNUVUZCVFVzc1VVRkJUaXhIUVVGcFFpeEpRVUV6UkR0QlFVTkJReXd5UWtGQmJVSktMRWxCUVc1Q0xFTkJRWGRDUml4TFFVRjRRanRCUVVOSU8wRkJRMG9zUTBGTVJEczdRVUZQUVR0QlFVTkJPenM3T3pzN096czdPMEZCVlVFc1NVRkJTVThzYVVKQlFXbENMRk5CUVdwQ1FTeGpRVUZwUWl4RFFVRlZReXhOUVVGV0xFVkJRV3RDYWtJc1RVRkJiRUlzUlVGQk1FSnJRaXhWUVVFeFFpeEZRVUZ6UTBNc1dVRkJkRU1zUlVGQmIwUkRMRzlDUVVGd1JDeEZRVUV3Uld4Q0xFMUJRVEZGTEVWQlFXdEdPMEZCUTI1SExGRkJRVWx0UWl4TFFVRkxMRWxCUVZRN1FVRkRRVUVzVDBGQlIwb3NUVUZCU0N4SFFVRlpRU3hOUVVGYU8wRkJRMEZKTEU5QlFVZHlRaXhOUVVGSUxFZEJRVmxCTEUxQlFWbzdRVUZEUVhGQ0xFOUJRVWRJTEZWQlFVZ3NSMEZCWjBKQkxGVkJRV2hDTzBGQlEwRkhMRTlCUVVkR0xGbEJRVWdzUjBGQmEwSkJMRmxCUVd4Q08wRkJRMEZGTEU5QlFVZEVMRzlDUVVGSUxFZEJRVEJDUVN4dlFrRkJNVUk3UVVGRFFVTXNUMEZCUjI1Q0xFMUJRVWdzUjBGQldVRXNUVUZCV2p0QlFVTklMRU5CVWtRN1FVRlRRU3hKUVVGSmIwSXNiMEpCUVc5Q0xFVkJRWGhDTzBGQlEwRk9MR1ZCUVdWWUxFZEJRV1lzUjBGQmNVSXNWVUZCVlZrc1RVRkJWaXhGUVVGclFtcENMRTFCUVd4Q0xFVkJRVEJDYTBJc1ZVRkJNVUlzUlVGQmMwTkRMRmxCUVhSRExFVkJRVzlFUXl4dlFrRkJjRVFzUlVGQk1FVnNRaXhOUVVFeFJTeEZRVUZyUmp0QlFVTnVSeXhSUVVGSlNTeFRRVUZUWjBJc2EwSkJRV3RDWml4SFFVRnNRaXhGUVVGaU8wRkJRMEVzVVVGQlNVUXNUVUZCU2l4RlFVRlpPMEZCUTFKQkxHVkJRVTlYTEUxQlFWQXNSMEZCWjBKQkxFMUJRV2hDTzBGQlEwRllMR1ZCUVU5T0xFMUJRVkFzUjBGQlowSkJMRTFCUVdoQ08wRkJRMEZOTEdWQlFVOVpMRlZCUVZBc1IwRkJiMEpCTEZWQlFYQkNPMEZCUTBGYUxHVkJRVTloTEZsQlFWQXNSMEZCYzBKQkxGbEJRWFJDTzBGQlEwRmlMR1ZCUVU5akxHOUNRVUZRTEVkQlFUaENRU3h2UWtGQk9VSTdRVUZEUVdRc1pVRkJUMG9zVFVGQlVDeEhRVUZuUWtFc1RVRkJhRUk3UVVGRFNDeExRVkJFTEUxQlVVczdRVUZEUkVrc2FVSkJRVk1zU1VGQlNWVXNZMEZCU2l4RFFVRnRRa01zVFVGQmJrSXNSVUZCTWtKcVFpeE5RVUV6UWl4RlFVRnRRMnRDTEZWQlFXNURMRVZCUVN0RFF5eFpRVUV2UXl4RlFVRTJSRU1zYjBKQlFUZEVMRVZCUVcxR2JFSXNUVUZCYmtZc1EwRkJWRHRCUVVOSU8wRkJRMFFzVjBGQlQwa3NUVUZCVUR0QlFVTklMRU5CWkVRN1FVRmxRVlVzWlVGQlpWSXNSMEZCWml4SFFVRnhRaXhWUVVGVlF5eExRVUZXTEVWQlFXbENPMEZCUTJ4RExGRkJRVWxoTEd0Q1FVRnJRbG9zVFVGQmJFSXNSMEZCTWtKaUxHRkJRUzlDTEVWQlFUaERPMEZCUXpGRFdTeGpRVUZOVVN4TlFVRk9MRWRCUVdWU0xFMUJRVTFVTEUxQlFVNHNSMEZCWlZNc1RVRkJUVlVzV1VGQlRpeEhRVUZ4UWl4SlFVRnVSRHRCUVVOQlJ5d3dRa0ZCYTBKWUxFbEJRV3hDTEVOQlFYVkNSaXhMUVVGMlFqdEJRVU5JTzBGQlEwb3NRMEZNUkRzN1FVRlBRVHM3T3p0QlFVbEJMRk5CUVZOakxHRkJRVlFzUjBGQk1FSTdRVUZEZEVJc1UwRkJTME1zUzBGQlRDeEhRVUZoTEV0QlFXSTdRVUZEUVN4VFFVRkxReXhWUVVGTUxFZEJRV3RDTEVsQlFXeENPMEZCUTBFc1UwRkJTME1zVVVGQlRDeEhRVUZuUWl4RFFVRkRMRU5CUVdwQ08wRkJRMEVzVTBGQlMwTXNWMEZCVEN4SFFVRnRRaXhMUVVGdVFqdEJRVU5CTEZOQlFVdERMRk5CUVV3c1IwRkJhVUlzUzBGQmFrSTdRVUZEUVN4VFFVRkxReXhqUVVGTUxFZEJRWE5DTEVOQlFYUkNPMEZCUTBFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVOQlFXWTdRVUZEUVN4VFFVRkxReXhOUVVGTUxFZEJRV01zUTBGQlpEdEJRVU5CTEZOQlFVdERMRk5CUVV3c1IwRkJhVUlzUTBGQmFrSTdPMEZCUlVFc1UwRkJTME1zVDBGQlRDeEhRVUZsTEVsQlFXWTdRVUZEUVN4VFFVRkxReXhUUVVGTUxFZEJRV2xDTEVsQlFXcENPMEZCUTBnN08wRkJSVVFzU1VGQlNVTXNVVUZCVVZvc1kwRkJZMkVzVTBGQk1VSTdPMEZCUlVGRUxFMUJRVTFGTEdkQ1FVRk9MRWRCUVhsQ0xGVkJRVlZETEZOQlFWWXNSVUZCY1VKNFFpeFJRVUZ5UWl4RlFVRXJRbVFzVFVGQkwwSXNSVUZCZFVOMVF5eFBRVUYyUXl4RlFVRm5SRU1zVFVGQmFFUXNSVUZCZDBSRExFdEJRWGhFTEVWQlFTdEVPMEZCUTNCR0xGTkJRVXRxUWl4TFFVRk1MRWRCUVdFc1MwRkJZanRCUVVOQkxGTkJRVXRETEZWQlFVd3NSMEZCYTBKaExGTkJRV3hDTzBGQlEwRXNVMEZCUzB3c1QwRkJUQ3hIUVVGbGFrTXNUVUZCWmp0QlFVTkJMRk5CUVV0clF5eFRRVUZNTEVkQlFXbENjRUlzVVVGQmFrSTdPMEZCUlVFc1UwRkJTMWtzVVVGQlRDeEhRVUZuUWl4RFFVRkRMRU5CUVdwQ08wRkJRMEVzVTBGQlMwMHNVMEZCVEN4SFFVRnBRazhzVDBGQmFrSTdRVUZEUVN4VFFVRkxVaXhOUVVGTUxFZEJRV05WTEV0QlFXUTdRVUZEUVN4VFFVRkxZaXhUUVVGTUxFZEJRV3RDTEV0QlFVdEhMRTFCUVV3c1IwRkJZeXhEUVVGb1F6dEJRVU5CTEZOQlFVdEVMRTlCUVV3c1IwRkJaVlVzVFVGQlpqdEJRVU5CTEZOQlFVdGlMRmRCUVV3c1IwRkJiMElzUzBGQlMwY3NUMEZCVEN4TFFVRnBRbGtzUjBGQlIwTXNTMEZCU0N4RFFVRlRReXhqUVVFNVF6dEJRVU5CTEZkQlFVOHNTVUZCVUR0QlFVTklMRU5CWWtRN1FVRmpRVHM3TzBGQlIwRlVMRTFCUVUxVkxGZEJRVTRzUjBGQmIwSXNXVUZCVlR0QlFVRkRMRmRCUVU4c1MwRkJTMklzVTBGQldqdEJRVUYxUWl4RFFVRjBSRHRCUVVOQk96czdRVUZIUVVjc1RVRkJUVmNzVjBGQlRpeEhRVUZ2UWl4VlFVRlRReXhSUVVGVUxFVkJRV3RDTzBGQlFVTXNVMEZCUzJZc1UwRkJUQ3hIUVVGcFFtVXNVVUZCYWtJN1FVRkJNa0lzUTBGQmJFVTdPMEZCUlVFN096czdRVUZKUVZvc1RVRkJUV0VzVFVGQlRpeEhRVUZsTEZWQlFWVkRMRVZCUVZZc1JVRkJZenRCUVVONlFpeFJRVUZKTEV0QlFVdDJRaXhSUVVGTUxFdEJRV3RDTEVOQlFVTXNRMEZCZGtJc1JVRkJNRUk3UVVGRGRFSXNZVUZCUzBFc1VVRkJUQ3hIUVVGblFpeERRVUZvUWp0QlFVTkJMR0ZCUVV0SExHTkJRVXdzUjBGQmMwSXNRMEZCZEVJN1FVRkRTQ3hMUVVoRUxFMUJSMDg3UVVGRFNDeGhRVUZMU0N4UlFVRk1MRWxCUVdsQ2RVSXNSVUZCYWtJN1FVRkRRU3haUVVGSkxFdEJRVXQwUWl4WFFVRk1MRWxCUVc5Q0xFTkJRVU1zUzBGQlMwTXNVMEZCT1VJc1JVRkJlVU03UVVGQlF6dEJRVU4wUXl4blFrRkJTU3hMUVVGTFJpeFJRVUZNTEVsQlFXbENMRXRCUVV0TkxGTkJRVEZDTEVWQlFYRkRPMEZCUTJwRExIRkNRVUZMYTBJc1QwRkJURHRCUVVOQkxIRkNRVUZMZUVJc1VVRkJUQ3hIUVVGblFpeERRVUZvUWp0QlFVTklPMEZCUTBvc1UwRk1SQ3hOUVV0UE8wRkJRVU03UVVGRFNpeG5Ra0ZCU1N4TFFVRkxSU3hUUVVGVUxFVkJRVzlDTzBGQlEyaENMRzlDUVVGSkxFdEJRVXRHTEZGQlFVd3NTVUZCYVVJc1MwRkJTMHNzVFVGQk1VSXNSVUZCYTBNN1FVRkRPVUlzZVVKQlFVdHRRaXhQUVVGTU96dEJRVVZCTEhsQ1FVRkxlRUlzVVVGQlRDeEpRVUZwUWl4TFFVRkxTeXhOUVVGMFFqdEJRVU5CTEhsQ1FVRkxSaXhqUVVGTUxFbEJRWFZDTEVOQlFYWkNPMEZCUTBFc2VVSkJRVXRFTEZOQlFVd3NSMEZCYVVJc1MwRkJha0k3UVVGRFNEdEJRVU5LTEdGQlVrUXNUVUZSVHp0QlFVTklMRzlDUVVGSkxFdEJRVXRHTEZGQlFVd3NTVUZCYVVJc1MwRkJTMDBzVTBGQk1VSXNSVUZCY1VNN1FVRkRha01zZVVKQlFVdHJRaXhQUVVGTU96dEJRVVZCTEhsQ1FVRkxlRUlzVVVGQlRDeEhRVUZuUWl4RFFVRm9RanRCUVVOQkxIbENRVUZMUnl4alFVRk1MRWxCUVhWQ0xFTkJRWFpDTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3huUWtGQlNTeExRVUZMU3l4VFFVRk1MRWxCUVd0Q0xFTkJRVU1zUzBGQlMxQXNWMEZCZUVJc1NVRkJkVU1zUzBGQlMwVXNZMEZCVEN4SFFVRnpRaXhMUVVGTFF5eFBRVUYwUlN4RlFVTkpMRXRCUVV0eFFpeE5RVUZNTzBGQlExQTdRVUZEU2p0QlFVTktMRU5CYWtORU96dEJRVzFEUVdoQ0xFMUJRVTFwUWl4WFFVRk9MRWRCUVc5Q0xGbEJRVlU3UVVGRE1VSXNWMEZCVHl4TFFVRkxiRUlzVTBGQldqdEJRVU5JTEVOQlJrUTdPMEZCU1VGRExFMUJRVTFsTEU5QlFVNHNSMEZCWjBJc1dVRkJXVHRCUVVONFFpeFJRVUZKTEV0QlFVdHFRaXhQUVVGTUxFbEJRV2RDTEV0QlFVdERMRk5CUVhwQ0xFVkJRVzlETzBGQlEyaERMR0ZCUVV0V0xFdEJRVXdzUjBGQllTeEpRVUZpTzBGQlEwRXNZVUZCUzFVc1UwRkJUQ3hEUVVGbGJVSXNTVUZCWml4RFFVRnZRaXhMUVVGTGNFSXNUMEZCZWtJc1JVRkJhME1zUzBGQlMxQXNVVUZCZGtNN1FVRkRRU3hoUVVGTFJpeExRVUZNTEVkQlFXRXNTMEZCWWp0QlFVTklPMEZCUTBvc1EwRk9SRHM3UVVGUlFWY3NUVUZCVFdkQ0xFMUJRVTRzUjBGQlpTeFpRVUZaTzBGQlEzWkNPMEZCUTBFc1UwRkJTekZDTEZWQlFVd3NRMEZCWjBJMlFpeFZRVUZvUWl4RFFVRXlRaXhMUVVGTGNFSXNVMEZCYUVNc1JVRkJNa01zUzBGQlMwUXNUMEZCYUVRN1FVRkRTQ3hEUVVoRU96dEJRVXRCTEVsQlFVbHpRaXhWUVVGVkxFVkJRV1E3UVVGRFFXaERMR05CUVdOc1FpeEhRVUZrTEVkQlFXOUNMRmxCUVZrN1FVRkROVUlzVjBGQlQydEVMRkZCUVZGb1JDeEhRVUZTTEUxQlFXbENMRWxCUVVsblFpeGhRVUZLTEVWQlFYaENPMEZCUTBnc1EwRkdSRHRCUVVkQlFTeGpRVUZqWml4SFFVRmtMRWRCUVc5Q0xGVkJRVlZuUkN4TFFVRldMRVZCUVdsQ08wRkJRMnBETEZGQlFVbEVMRkZCUVZFM1F5eE5RVUZTTEVkQlFXbENZaXhoUVVGcVFpeEpRVUZyUXl4RFFVRkRNa1FzVFVGQlRXaERMRXRCUVRkRExFVkJRVzlFTzBGQlEyaEVaME1zWTBGQlRTOUNMRlZCUVU0c1IwRkJiVUlyUWl4TlFVRk5ka0lzVDBGQlRpeEhRVUZuUW5WQ0xFMUJRVTEwUWl4VFFVRk9MRWRCUVd0Q0xFbEJRWEpFTzBGQlEwRnhRaXhuUWtGQlVUVkRMRWxCUVZJc1EwRkJZVFpETEV0QlFXSTdRVUZEU0R0QlFVTktMRU5CVEVRN08wRkJUMEU3T3pzN096czdPenM3T3pzN096czdPenM3T3p0QlFYRkNRV1FzUjBGQlIyVXNVMEZCU0N4SFFVRmxMRmxCUVZrN1FVRkRka0lzVTBGQlMwTXNWVUZCVEN4SFFVRnJRaXhIUVVGc1FqdEJRVU5CTEZOQlFVdERMR1ZCUVV3c1IwRkJkVUlzUlVGQmRrSXNRMEZHZFVJc1EwRkZTenRCUVVNMVFpeFRRVUZMUXl4aFFVRk1MRWRCUVhGQ0xFVkJRWEpDTEVOQlNIVkNMRU5CUjBzN1FVRkROVUlzVTBGQlMwTXNaVUZCVEN4SFFVRjFRaXhGUVVGMlFpeERRVXAxUWl4RFFVbExPMEZCUXpWQ0xGTkJRVXRETEdWQlFVd3NSMEZCZFVKd1JTeEhRVUZIY1VVc1UwRkJTQ3hEUVVGaExFbEJRV0lzUTBGQmRrSXNRMEZNZFVJc1EwRkxjVUk3UVVGRE5VTXNVMEZCUzBNc1kwRkJUQ3hIUVVGelFuUkZMRWRCUVVkeFJTeFRRVUZJTEVOQlFXRXNTVUZCWWl4RFFVRjBRaXhEUVU1MVFpeERRVTF4UWp0QlFVTTFReXhUUVVGTFJTeGpRVUZNTEVkQlFYTkNMRWxCUVhSQ08wRkJRMEVzVTBGQlMwTXNjMEpCUVV3c1IwRkJPRUlzUzBGQk9VSTdRVUZEUVN4VFFVRkxReXhwUWtGQlRDeEhRVUY1UWl4TFFVRjZRaXhEUVZSMVFpeERRVk5UT3p0QlFVVm9ReXhUUVVGTFF5eGxRVUZNTEVkQlFYVkNMRVZCUVhaQ0xFTkJXSFZDTEVOQlYwczdRVUZETlVJN1FVRkRTQ3hEUVdKRU96dEJRV1ZCTVVJc1IwRkJSMlVzVTBGQlNDeERRVUZoY2tJc1UwRkJZaXhIUVVGNVFqdEJRVU55UW1sRExHbENRVUZoTTBJc1IwRkJSMlVzVTBGRVN6dEJRVVZ5UWpzN1FVRkZRV0VzZDBKQlFXOUNMRFJDUVVGVlF5eFBRVUZXTEVWQlFXMUNPMEZCUTI1RExHVkJRVThzUzBGQlMxQXNZMEZCVEN4RFFVRnZRazhzVVVGQlVYWkZMRTFCUVZJc1EwRkJaWGRGTEVkQlFXNURMRU5CUVZBN1FVRkRRU3haUVVGSlF5eE5RVUZOTEV0QlFVdE1MR1ZCUVdZN1FVRkRRU3hoUVVGTExFbEJRVWxOTEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSlJpeEpRVUZKTDBRc1RVRkJlRUlzUlVGQlowTm5SU3hKUVVGSlF5eERRVUZ3UXl4RlFVRjFRMFFzUjBGQmRrTXNSVUZCTkVNN1FVRkRlRU1zWjBKQlFVbEVMRWxCUVVsRExFTkJRVW9zVFVGQlYwZ3NUMEZCWml4RlFVRjNRanRCUVVOd1FrVXNiMEpCUVVsSExFMUJRVW9zUTBGQlYwWXNRMEZCV0N4RlFVRmpMRU5CUVdRN1FVRkRRVHRCUVVOSU8wRkJRMG83UVVGRFJERkVMSFZDUVVGbFVpeEhRVUZtTEVOQlFXMUNLMFFzVDBGQmJrSTdRVUZEU0N4TFFXUnZRanM3UVVGblFuSkNUU3d5UWtGQmRVSXNLMEpCUVZWd1JTeExRVUZXTEVWQlFXbENPMEZCUTNCRExGbEJRVWx4UlN4WFFVRlhja1VzVFVGQlRWUXNUVUZCVGl4RFFVRmhkMFVzUjBGQk5VSTdRVUZEUVN4WlFVRkpUeXhQUVVGUExFbEJRVmc3UVVGQlFTeFpRVUZwUWxJc1ZVRkJWVkVzUzBGQlMycENMR1ZCUVV3c1EwRkJjVUpuUWl4UlFVRnlRaXhEUVVFelFqdEJRVU5CTEZsQlFVbFFMRTlCUVVvc1JVRkJZVHRCUVVOVU8wRkJRMEVzWjBKQlFVa3hSQ3hQUVVGUE1FUXNVVUZCVVRGRUxFbEJRVzVDTzBGQlFVRXNaMEpCUVhsQ2JVVXNXVUZCV1ZRc1VVRkJVVGxFTEV0QlFUZERPMEZCUTBFc2FVSkJRVXNzU1VGQlNXbEZMRWxCUVVrc1EwRkJVaXhGUVVGWFF5eEpRVUZKT1VRc1MwRkJTMGdzVFVGQmVrSXNSVUZCYVVOblJTeEpRVUZKUXl4RFFVRnlReXhGUVVGM1EwUXNSMEZCZUVNc1JVRkJOa003UVVGRGVrTXNiMEpCUVVrM1JDeExRVUZMTmtRc1EwRkJUQ3hOUVVGWlRTeFRRVUZvUWl4RlFVRXlRanRCUVVOMlFtNUZMSGxDUVVGTEswUXNUVUZCVEN4RFFVRlpSaXhEUVVGYUxFVkJRV1VzUTBGQlpqdEJRVU5CTzBGQlEwZzdRVUZEU2pzN1FVRkZSQ3h0UWtGQlQwc3NTMEZCUzJwQ0xHVkJRVXdzUTBGQmNVSm5RaXhSUVVGeVFpeERRVUZRTzBGQlEwRXZSU3h6UWtGQlZWTXNSMEZCVml4RFFVRmpkMFVzVTBGQlpEdEJRVU5CY0VVc05FSkJRV2RDU2l4SFFVRm9RaXhEUVVGdlFpdEVMRTlCUVhCQ08wRkJRMGc3UVVGRFNpeExRV3BEYjBJN08wRkJiVU55UWxVc2FVSkJRV0VzY1VKQlFWVkRMRTFCUVZZc1JVRkJhMEpETEZkQlFXeENMRVZCUVN0Q2JFWXNVVUZCTDBJc1JVRkJlVU03UVVGRGJFUXNZVUZCU3l4SlFVRkplVVVzU1VGQlNTeERRVUZpTEVWQlFXZENRU3hKUVVGSlVTeFBRVUZQZUVVc1RVRkJNMElzUlVGQmJVTm5SU3hIUVVGdVF5eEZRVUYxUXp0QlFVTnVReXhuUWtGQlNYcEZMRmRCUVZkcFJpeFBRVUZQVWl4RFFVRlFMRVZCUVZWNlJTeFJRVUY2UWl4RlFVRnRRenRCUVVNdlFtbEdMSFZDUVVGUFRpeE5RVUZRTEVOQlFXTkdMRU5CUVdRc1JVRkJhVUlzUTBGQmFrSXNSVUZCYjBKVExGZEJRWEJDTzBGQlEwRTdRVUZEU0R0QlFVTktPMEZCUTBSRUxHVkJRVTkyUlN4SlFVRlFMRU5CUVZsM1JTeFhRVUZhTzBGQlEwZ3NTMEV6UTI5Q096dEJRVFpEY2tKRExHVkJRVmNzYlVKQlFWVkdMRTFCUVZZc1JVRkJhMEpETEZkQlFXeENMRVZCUVN0Q08wRkJRM1JEUkN4bFFVRlBka1VzU1VGQlVDeERRVUZaZDBVc1YwRkJXanRCUVVOSUxFdEJMME52UWpzN1FVRnBSSEpDTzBGQlEwRTdPenM3T3pzN08wRkJVVUZGTEhGQ1FVRnBRaXg1UWtGQlZYSkdMRTFCUVZZc1JVRkJhMEk3UVVGREwwSXNXVUZCU1N4RFFVRkRRU3hQUVVGUGQwVXNSMEZCV2l4RlFVRnBRanRCUVVOaUxHZENRVUZKZUVVc1QwRkJUM05HTEZsQlFWZ3NSVUZCZVVJN1FVRkRja0kxUXl4dFFrRkJSelpETEUxQlFVZ3NRMEZCVlN4SlFVRldPMEZCUTBnc1lVRkdSQ3hOUVVkTE8wRkJRMFIyUml4MVFrRkJUM2RGTEVkQlFWQXNSMEZCWVRGRkxGbEJRVmt3Uml4UlFVRmFMRVZCUVdJN1FVRkRTRHRCUVVOS08wRkJRMG9zUzBGdVJXOUNPenRCUVhGRmNrSTdPenM3T3pzN096czdPenM3T3pzN1FVRm5Ra0ZETEd0Q1FVRmpMSE5DUVVGVlF5eFRRVUZXTEVWQlFYRkNPMEZCUXk5Q0xHRkJRVXRvUXl4VlFVRk1MRWRCUVd0Q1owTXNVMEZCYkVJN1FVRkRTQ3hMUVhaR2IwSTdPMEZCZVVaeVFqczdPenM3TzBGQlRVRkRMR3RDUVVGakxIZENRVUZaTzBGQlEzUkNMR1ZCUVU4c1MwRkJTMnBETEZWQlFWbzdRVUZEU0N4TFFXcEhiMEk3TzBGQmJVZHlRanM3T3pzN08wRkJUVUZXTEZsQlFWRXNaMEpCUVZWRExFVkJRVllzUlVGQll6dEJRVU5zUWl4aFFVRkxhMElzYVVKQlFVd3NSMEZCZVVJc1NVRkJla0k3UVVGRFFTeFpRVUZITEV0QlFVdFVMRlZCUVV3c1MwRkJiMElzUTBGQmRrSXNSVUZEU1ZRc1RVRkJUU3hMUVVGTFV5eFZRVUZZT3p0QlFVVktMRmxCUVVsblFpeERRVUZLTEVWQlFVODNSQ3hKUVVGUUxFVkJRV0VyUlN4SFFVRmlMRVZCUVd0Q2JrWXNTMEZCYkVJN08wRkJSVUVzWVVGQlNXbEZMRWxCUVVVc1EwRkJSaXhGUVVGSk4wUXNUMEZCU3l4TFFVRkxPRU1zWlVGQlpDeEZRVUVyUW1sRExFMUJRVTB2UlN4TFFVRkxTQ3hOUVVFNVF5eEZRVUZ6UkdkRkxFbEJRVVZyUWl4SFFVRjRSQ3hGUVVFMlJHeENMRWRCUVRkRUxFVkJRV2xGTzBGQlF6ZEVha1VzYjBKQlFWRkpMRXRCUVVzMlJDeERRVUZNTEVOQlFWSTdRVUZEUVN4blFrRkJTU3hEUVVGRGFrVXNUVUZCVFZBc1RVRkJVQ3hKUVVGcFFpeERRVUZEVHl4TlFVRk5UaXhwUWtGQk5VSXNSVUZEU1Uwc1RVRkJUVlFzVFVGQlRpeERRVUZoWjBRc1RVRkJZaXhEUVVGdlFrTXNSVUZCY0VJN1FVRkRVRHM3UVVGRlJDeGhRVUZKZVVJc1NVRkJSU3hEUVVGR0xFVkJRVXMzUkN4UFFVRkxMRXRCUVVzclF5eGhRVUZtTEVWQlFUaENaME1zVFVGQlNTOUZMRXRCUVV0SUxFMUJRVE5ETEVWQlFXMUVaMFVzU1VGQlJXdENMRWRCUVhKRUxFVkJRVEJFYkVJc1IwRkJNVVFzUlVGQk9FUTdRVUZETVVScVJTeHZRa0ZCVVVrc1MwRkJTelpFTEVOQlFVd3NRMEZCVWp0QlFVTkJMR2RDUVVGSkxFTkJRVU5xUlN4TlFVRk5VQ3hOUVVGUUxFbEJRV2xDTEVOQlFVTlBMRTFCUVUxT0xHbENRVUUxUWl4RlFVTkpUU3hOUVVGTlZDeE5RVUZPTEVOQlFXRm5SQ3hOUVVGaUxFTkJRVzlDUXl4RlFVRndRanRCUVVOUU96dEJRVVZFTEdGQlFVbDVRaXhKUVVGRkxFTkJRVVlzUlVGQlN6ZEVMRTlCUVVzc1MwRkJTMmRFTEdWQlFXWXNSVUZCWjBNclFpeE5RVUZKTDBVc1MwRkJTMGdzVFVGQk4wTXNSVUZCY1VSblJTeEpRVUZGYTBJc1IwRkJka1FzUlVGQk5FUnNRaXhIUVVFMVJDeEZRVUZuUlR0QlFVTTFSR3BGTEc5Q1FVRlJTU3hMUVVGTE5rUXNRMEZCVEN4RFFVRlNPMEZCUTBFc1owSkJRVWtzUTBGQlEycEZMRTFCUVUxUUxFMUJRVkFzU1VGQmFVSXNRMEZCUTA4c1RVRkJUVTRzYVVKQlFUVkNMRVZCUTBsTkxFMUJRVTFVTEUxQlFVNHNRMEZCWVdkRUxFMUJRV0lzUTBGQmIwSkRMRVZCUVhCQ08wRkJRMUE3TzBGQlJVUTdRVUZEUVN4WlFVRkpORU1zUjBGQlNqdEJRVUZCTEZsQlFWTndRaXhOUVVGTkxFdEJRVXRNTEdWQlFYQkNPMEZCUTBFc1lVRkJTVTBzU1VGQlJTeERRVUZPTEVWQlFWTkJMRWxCUVVWRUxFbEJRVWt2UkN4TlFVRm1MRVZCUVhWQ1owVXNSMEZCZGtJc1JVRkJNa0k3UVVGRGRrSnRRaXhyUWtGQlRYQkNMRWxCUVVsRExFTkJRVW9zUTBGQlRqdEJRVU5CTEdsQ1FVRkxWQ3hqUVVGTUxFZEJRWE5DTkVJc1IwRkJkRUk3UVVGRFFTeHBRa0ZCU3pOQ0xITkNRVUZNTEVkQlFUaENMRXRCUVRsQ096dEJRVVZCTEdkQ1FVRkpMRU5CUVVNeVFpeEpRVUZKTTBZc1RVRkJWQ3hGUVVGblFqdEJRVU5hTzBGQlEwRXNjVUpCUVVzeVJpeEpRVUZKTTBVc1ZVRkJTaXhIUVVGcFFpeERRVUYwUWl4RlFVRjVRakpGTEVsQlFVa3pSU3hWUVVGS0xFZEJRV2xDTWtVc1NVRkJTVFZGTEUxQlFVb3NRMEZCVjFBc1RVRkJja1FzUlVGQk5rUXNSVUZCUjIxR0xFbEJRVWt6UlN4VlFVRndSU3hGUVVGblJqdEJRVU0xUlRKRkxIZENRVUZKTVVVc1dVRkJTaXhIUVVGdFFqQkZMRWxCUVVrMVJTeE5RVUZLTEVOQlFWYzBSU3hKUVVGSk0wVXNWVUZCWml4RFFVRnVRanRCUVVOQk1rVXNkMEpCUVVsNlJTeHZRa0ZCU2l4SFFVRXlRaXhMUVVFelFqczdRVUZGUVhsRkxIZENRVUZKTVVVc1dVRkJTaXhEUVVGcFFqWkNMRTFCUVdwQ0xFTkJRWGRDUXl4RlFVRjRRanRCUVVOQk5FTXNkMEpCUVVreFJTeFpRVUZLTEVkQlFXMUNMRWxCUVc1Q08wRkJRMGc3UVVGRFNqczdRVUZGUkR0QlFVTkJMR2RDUVVGSkxFdEJRVXNyUXl4elFrRkJUQ3hKUVVFclFpeExRVUZMUkN4alFVRk1MRU5CUVc5Q2FFUXNUVUZCY0VJc1EwRkJNa0pRTEUxQlFUTkNMRXRCUVhORExFTkJRWHBGTEVWQlFUUkZPMEZCUTNoRkxIRkNRVUZMTkVRc2EwSkJRVXdzUTBGQmQwSXNTMEZCUzB3c1kwRkJOMEk3UVVGRFFTeHJRa0ZCUlZNc1EwRkJSanRCUVVOSU8wRkJRMG83TzBGQlJVUTdRVUZEUVR0QlFVTkJMR0ZCUVVsQkxFbEJRVVVzUTBGQlJpeEZRVUZKTjBRc1QwRkJTeXhMUVVGTE9FTXNaVUZCYkVJc1JVRkJiVU5sTEVsQlFVVTNSQ3hMUVVGTFNDeE5RVUV4UXl4SFFVRnRSRHRCUVVNdlEwUXNiMEpCUVZGSkxFdEJRVXMyUkN4RFFVRk1MRU5CUVZJN1FVRkRRU3huUWtGQlIycEZMRTFCUVUxT0xHbENRVUZVTEVWQlEwa3NTMEZCU3pCRkxIRkNRVUZNTEVOQlFUSkNjRVVzUzBGQk0wSXNSVUZFU2l4TFFVZEphVVU3UVVGRFVEczdRVUZGUkN4aFFVRkpRU3hKUVVGRkxFTkJRVVlzUlVGQlN6ZEVMRTlCUVVzc1MwRkJTeXRETEdGQlFXNUNMRVZCUVd0RFl5eEpRVUZGTjBRc1MwRkJTMGdzVFVGQmVrTXNSMEZCYTBRN1FVRkRPVU5FTEc5Q1FVRlJTU3hMUVVGTE5rUXNRMEZCVEN4RFFVRlNPMEZCUTBFc1owSkJRVWxxUlN4TlFVRk5UaXhwUWtGQlZpeEZRVU5KTEV0QlFVc3dSU3h4UWtGQlRDeERRVUV5UW5CRkxFdEJRVE5DTEVWQlJFb3NTMEZIU1dsRk8wRkJRMUE3TzBGQlJVUXNZVUZCU1VFc1NVRkJSU3hEUVVGR0xFVkJRVXMzUkN4UFFVRkxMRXRCUVV0blJDeGxRVUZ1UWl4RlFVRnZRMkVzU1VGQlJUZEVMRXRCUVV0SUxFMUJRVE5ETEVkQlFXOUVPMEZCUTJoRVJDeHZRa0ZCVVVrc1MwRkJTelpFTEVOQlFVd3NRMEZCVWp0QlFVTkJMR2RDUVVGSmFrVXNUVUZCVFU0c2FVSkJRVllzUlVGRFNTeExRVUZMTUVVc2NVSkJRVXdzUTBGQk1rSndSU3hMUVVFelFpeEZRVVJLTEV0QlIwbHBSVHRCUVVOUU96dEJRVVZFTEdGQlFVdFFMR2xDUVVGTUxFZEJRWGxDTEV0QlFYcENPMEZCUTBFc1lVRkJTMFlzWTBGQlRDeEhRVUZ6UWl4SlFVRjBRanRCUVVOSUxFdEJka3h2UWpzN1FVRjVUSEpDT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096dEJRV2REUVRaQ0xHTkJRVlVzYTBKQlFWVm9SaXhSUVVGV0xFVkJRVzlDWkN4TlFVRndRaXhGUVVFMFFpdERMRkZCUVRWQ0xFVkJRWE5EVUN4TlFVRjBReXhGUVVFNFEwTXNTMEZCT1VNc1JVRkJjVVIyUXl4TlFVRnlSQ3hGUVVFMlJEdEJRVU51UlRzN1FVRkRRU3haUVVGSkxFOUJRVTlaTEZGQlFWQXNTMEZCYjBJc1ZVRkJlRUlzUlVGQmIwTTdRVUZEYUVNc1owSkJRVWxwUml4TlFVRk5ha1lzVVVGQlZqdEJRVU5CUVN4MVFrRkJWMlFzVFVGQldEdEJRVU5CUVN4eFFrRkJVeXRHTEVkQlFWUTdRVUZEU0R0QlFVTkVPMEZCUTBFN1FVRkRRU3haUVVGSlF5eFZRVUZWZEVZc1RVRkJWaXhMUVVGeFFpeERRVUZ5UWl4SlFVRXdRbk5HTEZWQlFWVjBSaXhOUVVGV0xFdEJRWEZDTEVOQlFXNUVMRVZCUVhORU8wRkJRMnhFVWl4eFFrRkJVeXhEUVVGRExFTkJRVU56UXl4TlFVRllPMEZCUTBGQkxIRkNRVUZUUlN4SFFVRkhReXhMUVVGSUxFTkJRVk5ETEdOQlFXeENPMEZCUTBGSUxHOUNRVUZSTEVOQlFWSTdRVUZEU0RzN1FVRkZSRU1zVjBGQlIzVkVMRkZCUVVnc1EwRkJXV3BITEUxQlFWb3NSVUZCYjBJc1NVRkJjRUk3TzBGQlJVRXNXVUZCU1RoRkxGZEJRVmM1UlN4UFFVRlBkMFVzUjBGQmRFSTdRVUZEUVN4WlFVRkpMRU5CUVVOTkxGRkJRVXdzUlVGQlpUdEJRVU5ZTEdkQ1FVRkpPVVVzVDBGQlQzTkdMRmxCUVZnc1JVRkJlVUk3UVVGRGNrSTFReXh0UWtGQlJ6WkRMRTFCUVVnc1EwRkJWU3hKUVVGV08wRkJRMEZVTERKQ1FVRlhPVVVzVDBGQlQzZEZMRWRCUVZBc1IwRkJZWGhGTEU5QlFVOXpSaXhaUVVFdlFqdEJRVU5JTEdGQlNFUXNUVUZKU3p0QlFVTkVOVU1zYlVKQlFVZDNSQ3hQUVVGSUxFTkJRVmNzU1VGQldEdEJRVU5JTzBGQlEwbzdRVUZEUkN4WlFVRkpNMElzVlVGQlZTeExRVUZMVUN4alFVRk1MRU5CUVc5Q1l5eFJRVUZ3UWl4RFFVRmtPMEZCUTBFc1dVRkJTU3hEUVVGRFVDeFBRVUZNTEVWQlFXTTdRVUZEVmp0QlFVTkJRU3h6UWtGQlZYWkVMR1ZCUVdWWUxFZEJRV1lzUTBGQmJVSXNTVUZCYmtJc1JVRkJlVUpNTEUxQlFYcENMRVZCUVdsRExFTkJRV3BETEVWQlFXOURMRWxCUVhCRExFVkJRVEJETEVsQlFURkRMRVZCUVdkRVJTeE5RVUZvUkN4RFFVRldPMEZCUTBFc2FVSkJRVXRyUlN4bFFVRk1MRU5CUVhGQ2VrUXNTVUZCY2tJc1EwRkJNRUkwUkN4UFFVRXhRanRCUVVOQkxHbENRVUZMVUN4alFVRk1MRU5CUVc5Q1l5eFJRVUZ3UWl4SlFVRm5RMUFzVDBGQmFFTTdRVUZEU0N4VFFVeEVMRTFCUzA4c1NVRkJTVUVzVVVGQlVYSkZMRTFCUVZJc1MwRkJiVUpCTEUxQlFYWkNMRVZCUVN0Q08wRkJRMnhEZDBNc1pVRkJSelpETEUxQlFVZ3NRMEZCVlN4SlFVRldPMEZCUTBnN08wRkJSVVFzV1VGQlNTOUNMRXRCUVVvc1JVRkJWMnRDTEVOQlFWZzdRVUZEUVN4WlFVRkpTQ3hSUVVGUmRFUXNUVUZCVWl4SlFVRnJRaXhKUVVGMFFpeEZRVUUwUWp0QlFVTjRRbk5FTEc5Q1FVRlJkRVFzVFVGQlVpeEhRVUZwUWl4RlFVRnFRanRCUVVOSUxGTkJSa1FzVFVGSFN6dEJRVU5FTEdsQ1FVRkxlVVFzU1VGQlNTeERRVUZVTEVWQlFWbEJMRWxCUVVsSUxGRkJRVkYwUkN4TlFVRlNMRU5CUVdWUUxFMUJRUzlDTEVWQlFYVkRMRVZCUVVWblJTeERRVUY2UXl4RlFVRTBRenRCUVVONFEyeENMSGRDUVVGUlpTeFJRVUZSZEVRc1RVRkJVaXhEUVVGbGVVUXNRMEZCWml4RFFVRlNPMEZCUTBFc2IwSkJRVWxzUWl4VFFVRlRNVU1zWVVGQllUQkRMRTFCUVUxMFFpeFRRVUZvUXl4RlFVRXlRenRCUVVOMlExRXNkVUpCUVVkNVJDeExRVUZJTEVOQlFWTXNTVUZCVkN4RlFVRmxNME1zVFVGQlRWZ3NWMEZCVGl4RlFVRm1MRVZCUVc5RFJTeFJRVUZ3UXp0QlFVTkJVeXd3UWtGQlRYaENMRk5CUVU0c1IwRkJhMEpsTEZGQlFXeENPMEZCUTBFN1FVRkRTRHRCUVVOS08wRkJRMG83TzBGQlJVUlRMR2RDUVVGUmFrTXNZMEZCWTJ4Q0xFZEJRV1FzUlVGQlVqdEJRVU5CYlVRc1kwRkJUVzVDTEdkQ1FVRk9MRU5CUVhWQ0xFbEJRWFpDTEVWQlFUWkNka0lzVVVGQk4wSXNSVUZCZFVOa0xFMUJRWFpETEVWQlFTdERLME1zVVVGQkwwTXNSVUZCZVVSUUxFMUJRWHBFTEVWQlFXbEZReXhMUVVGcVJUdEJRVU5CT0VJc1owSkJRVkYwUkN4TlFVRlNMRU5CUVdWT0xFbEJRV1lzUTBGQmIwSTJReXhMUVVGd1FqczdRVUZGUVN4WlFVRkpMRXRCUVV0VExHTkJRVXdzUzBGQmQwSk5MRTlCUVhoQ0xFbEJRVzFETEV0QlFVdE1MSE5DUVVFMVF5eEZRVUZ2UlR0QlFVTm9SU3hwUWtGQlMwRXNjMEpCUVV3c1IwRkJPRUlzUzBGQk9VSTdRVUZEU0R0QlFVTktMRXRCY0ZKdlFqczdRVUZ6VW5KQ096czdPenM3T3pzN096czdPMEZCWVVGclF5eHZRa0ZCWjBJc2QwSkJRVk53Unl4TlFVRlVMRVZCUVdsQ1F5eFJRVUZxUWl4RlFVRXlRa01zVFVGQk0wSXNSVUZCYlVNN1FVRkRMME1zV1VGQlNUUkZMRmRCUVZjNVJTeFBRVUZQZDBVc1IwRkJkRUk3UVVGRFFTeFpRVUZKTEVOQlFVTk5MRkZCUVV3c1JVRkJaVHRCUVVOWUxHZENRVUZKT1VVc1QwRkJUM05HTEZsQlFWZ3NSVUZCZVVJN1FVRkRja0kxUXl4dFFrRkJSelpETEUxQlFVZ3NRMEZCVlN4SlFVRldPMEZCUTBGVUxESkNRVUZYT1VVc1QwRkJUM2RGTEVkQlFWQXNSMEZCWVhoRkxFOUJRVTl6Uml4WlFVRXZRanRCUVVOSUxHRkJTRVFzVFVGSlN6dEJRVU5FTlVNc2JVSkJRVWQzUkN4UFFVRklMRU5CUVZjc1NVRkJXRHRCUVVOSU8wRkJRMG83UVVGRFJDeFpRVUZKUnl4alFVRmpMRXRCUVV0MlF5eGxRVUZNTEVOQlFYRkNaMElzVVVGQmNrSXNRMEZCYkVJN1FVRkRRU3haUVVGSmRVSXNaVUZCWlVFc1dVRkJXVFZHTEV0QlFTOUNMRVZCUVhGRE8wRkJRMnBETzBGQlEwRXNaMEpCUVVrMFJpeFpRVUZaTlVZc1MwRkJXaXhEUVVGclFsSXNVVUZCYkVJc1MwRkJLMEpCTEZGQlFXNURMRVZCUVRSRE8wRkJRM2hETEc5Q1FVRkpMRXRCUVV0clJTeHBRa0ZCVkN4RlFVRXlRanRCUVVOMlFucENMSFZDUVVGSGVVUXNTMEZCU0N4RFFVRlRMRWxCUVZRN1FVRkRRVVVzWjBOQlFWazFSaXhMUVVGYUxFTkJRV3RDVGl4cFFrRkJiRUlzUjBGQmMwTXNTMEZCZEVNN1FVRkRRV3RITEdkRFFVRlpOVVlzUzBGQldpeERRVUZyUWxBc1RVRkJiRUlzUjBGQk1rSkJMRTFCUVROQ08wRkJRMEU3UVVGRFNDeHBRa0ZNUkN4TlFVdExPMEZCUTBRN1FVRkRRU3g1UWtGQlMyOUhMR2RDUVVGTUxFTkJRWE5DZEVjc1RVRkJkRUk3UVVGRFNEdEJRVU5LTEdGQlZrUXNUVUZWU3p0QlFVTkVjVWNzTkVKQlFWazFSaXhMUVVGYUxFTkJRV3RDVGl4cFFrRkJiRUlzUjBGQmMwTXNTMEZCZEVNN1FVRkRRV3RITERSQ1FVRlpOVVlzUzBGQldpeERRVUZyUWxBc1RVRkJiRUlzUjBGQk1rSkJMRTFCUVROQ08wRkJRMEU3UVVGRFNEdEJRVU5LT3p0QlFVVkVMRmxCUVVscFJpeGpRVUZqY0VZc1ZVRkJWVTBzUjBGQlZpeERRVUZqVEN4TlFVRmtMRVZCUVhOQ1F5eFJRVUYwUWl4RlFVRm5RME1zVFVGQmFFTXNSVUZCZDBNc1MwRkJlRU1zUTBGQmJFSTdRVUZEUVN4WlFVRkpaMFlzVFVGQlNqczdRVUZGUVR0QlFVTkJPMEZCUTBFc1dVRkJTV3BHTEdGQlFXRXNRMEZCYWtJc1JVRkJiMEk3UVVGRGFFSnBSaXh4UWtGQlV5eExRVUZMZEVJc1lVRkJaRHRCUVVOQkxHbENRVUZMZDBJc1UwRkJUQ3hEUVVGbFJpeE5RVUZtTEVWQlFYVkNReXhYUVVGMlFqdEJRVU5JTEZOQlNFUXNUVUZKU3p0QlFVTkVSQ3h4UWtGQlUycEdMRmRCUVZjc1EwRkJXQ3hIUVVGbExFdEJRVXN3UkN4bFFVRndRaXhIUVVGelF5eExRVUZMUlN4bFFVRndSRHRCUVVOQkxHbENRVUZMYjBJc1YwRkJUQ3hEUVVGcFFrTXNUVUZCYWtJc1JVRkJlVUpETEZkQlFYcENMRVZCUVhORGJFWXNVVUZCZEVNN1FVRkRTRHM3UVVGRlJEdEJRVU5CTEdGQlFVczJSQ3hsUVVGTUxFTkJRWEZDWjBJc1VVRkJja0lzU1VGQmFVTnNSU3huUWtGQlowSlFMRWRCUVdoQ0xFTkJRVzlDTmtVc1RVRkJjRUlzUlVGQk5FSkRMRmRCUVRWQ0xFVkJRWGxEYmtZc1RVRkJla01zUlVGQmFVUXNTVUZCYWtRc1EwRkJha003UVVGRFNDeExRV3hXYjBJN08wRkJiMVp5UWpzN096czdPenM3T3pzN1FVRlhRWE5FTEdkQ1FVRlpMRzlDUVVGVmVFTXNVVUZCVml4RlFVRnZRbVFzVFVGQmNFSXNSVUZCTkVJN1FVRkRjRU03TzBGQlJVRTdRVUZEUVN4WlFVRkpMRU5CUVVOQkxFMUJRVVFzU1VGQlZ5eERRVUZEWXl4UlFVRm9RaXhGUVVOSk8wRkJRMG9zV1VGQlNXZEZMRmRCUVZjNVJTeFBRVUZQZDBVc1IwRkJkRUk3UVVGRFFTeFpRVUZKTEVOQlFVTk5MRkZCUVV3c1JVRkJaVHRCUVVOWUxHZENRVUZKT1VVc1QwRkJUM05HTEZsQlFWZ3NSVUZCZVVJN1FVRkRja0kxUXl4dFFrRkJSelpETEUxQlFVZ3NRMEZCVlN4SlFVRldPMEZCUTBGVUxESkNRVUZYT1VVc1QwRkJUM2RGTEVkQlFWQXNSMEZCWVhoRkxFOUJRVTl6Uml4WlFVRXZRanRCUVVOSUxHRkJTRVFzVFVGSlN6dEJRVU5FTlVNc2JVSkJRVWQzUkN4UFFVRklMRU5CUVZjc1NVRkJXRHRCUVVOSU8wRkJRMG83TzBGQlJVUXNXVUZCU1c1Q0xFOUJRVThzU1VGQldEdEJRVUZCTEZsQlFXbENVaXhWUVVGVlVTeExRVUZMWml4alFVRk1MRU5CUVc5Q1l5eFJRVUZ3UWl4RFFVRXpRanRCUVVOQkxGbEJRVWxRTEU5QlFVb3NSVUZCWVR0QlFVTlVMR2RDUVVGSmRFUXNVMEZCVTNORUxGRkJRVkYwUkN4TlFVRnlRanRCUVVOQkxHbENRVUZKTEVsQlFVbDVSQ3hKUVVGSkxFTkJRVklzUlVGQlZ6WkNMRXRCUVV0MFJpeFBRVUZQVUN4TlFVRXpRaXhGUVVGdFEyZEZMRWxCUVVrMlFpeEZRVUYyUXl4RlFVRXlRemRDTEVkQlFUTkRMRVZCUVN0RE8wRkJRek5ETEc5Q1FVRkpiRUlzVVVGQlVYWkRMRTlCUVU5NVJDeERRVUZRTEVOQlFWbzdRVUZEUVN4dlFrRkJTVFZFTEdGQlFXRXdReXhOUVVGTmRFSXNVMEZCZGtJc1JVRkJhME03UVVGRE9VSXNkMEpCUVV0elFpeFZRVUZWWlN4UlFVRlJjRVFzV1VGQmJrSXNTVUZCY1VNc1EwRkJRMjlFTEZGQlFWRnVSQ3h2UWtGQmJFUXNSVUZCZVVVN1FVRkRja1Z0UkN4blEwRkJVVzVFTEc5Q1FVRlNMRWRCUVN0Q0xFbEJRUzlDTzBGQlEwZzdRVUZEUkVnc01rSkJRVTh5UkN4TlFVRlFMRU5CUVdOR0xFTkJRV1FzUlVGQmFVSXNRMEZCYWtJN1FVRkRRVzVFTEd0RFFVRmpaaXhIUVVGa0xFTkJRV3RDWjBRc1MwRkJiRUk3UVVGRFFUdEJRVU5CTEhkQ1FVRkpaU3hSUVVGUmNrUXNWVUZCVWl4SlFVRnpRbmRFTEVOQlFURkNMRVZCUVRaQ08wRkJRM3BDU0N4blEwRkJVWEpFTEZWQlFWSTdRVUZEU0RzN1FVRkZSQ3gzUWtGQlNVUXNUMEZCVDFBc1RVRkJVQ3hMUVVGclFpeERRVUYwUWl4RlFVRjVRanRCUVVOeVFpdzBRa0ZCU1hGRkxFdEJRVXRrTEdOQlFVd3NTMEZCZDBKTkxFOUJRVFZDTEVWQlFYRkRPMEZCUTJwRFVTeHBRMEZCUzJJc2MwSkJRVXdzUjBGQk9FSXNTVUZCT1VJN1FVRkRTQ3g1UWtGR1JDeE5RVVZQTzBGQlEwaGhMR2xEUVVGTFZDeHJRa0ZCVEN4RFFVRjNRa01zVDBGQmVFSTdRVUZEU0R0QlFVTktPMEZCUTBRN1FVRkRTRHRCUVVOS08wRkJRMG83UVVGRFNpeExRVE5aYjBJN08wRkJObGx5UWpzN096czdPMEZCVFVFclFpeHpRa0ZCYTBJc01FSkJRVlYwUnl4TlFVRldMRVZCUVd0Q08wRkJRMmhETEZsQlFVa3NRMEZCUTBFc1RVRkJUQ3hGUVVOSk8wRkJRMG9zV1VGQlNUaEZMRmRCUVZjNVJTeFBRVUZQZDBVc1IwRkJkRUk3UVVGRFFTeFpRVUZKTEVOQlFVTk5MRkZCUVV3c1JVRkJaVHRCUVVOWUxHZENRVUZKT1VVc1QwRkJUM05HTEZsQlFWZ3NSVUZCZVVJN1FVRkRja0kxUXl4dFFrRkJSelpETEUxQlFVZ3NRMEZCVlN4SlFVRldPMEZCUTBGVUxESkNRVUZYT1VVc1QwRkJUM2RGTEVkQlFWQXNSMEZCWVhoRkxFOUJRVTl6Uml4WlFVRXZRanRCUVVOSUxHRkJTRVFzVFVGSlN6dEJRVU5FTlVNc2JVSkJRVWQzUkN4UFFVRklMRU5CUVZjc1NVRkJXRHRCUVVOSU8wRkJRMG83TzBGQlJVUXNXVUZCU1ROQ0xGVkJRVlVzUzBGQlMxUXNaVUZCVEN4RFFVRnhRbWRDTEZGQlFYSkNMRU5CUVdRN1FVRkRRU3haUVVGSlVDeFBRVUZLTEVWQlFXRTdRVUZEVkN4blFrRkJTU3hMUVVGTFNpeHBRa0ZCVkN4RlFVRTBRanRCUVVONFFra3NkMEpCUVZFNVJDeExRVUZTTEVOQlFXTk9MR2xDUVVGa0xFZEJRV3RETEVsQlFXeERPMEZCUTBnc1lVRkdSQ3hOUVVWUE8wRkJRMGdzY1VKQlFVc3dSU3h4UWtGQlRDeERRVUV5UWs0c1VVRkJVVGxFTEV0QlFXNURPMEZCUTBnN1FVRkRTanRCUVVOS0xFdEJlbUZ2UWpzN1FVRXlZWEpDT3pzN096czdPenRCUVZGQkswWXNORUpCUVhkQ0xHZERRVUZWZUVjc1RVRkJWaXhGUVVGclFqdEJRVU4wUXp0QlFVTkJMRmxCUVVrc1EwRkJRMEVzVFVGQlRDeEZRVUZaTzBGQlExSTdRVUZEU0R0QlFVTkVMRmxCUVVrNFJTeFhRVUZYT1VVc1QwRkJUM2RGTEVkQlFYUkNPMEZCUTBFc1dVRkJTU3hEUVVGRFRTeFJRVUZNTEVWQlFXVTdRVUZEV0N4blFrRkJTVGxGTEU5QlFVOXpSaXhaUVVGWUxFVkJRWGxDTzBGQlEzSkNOVU1zYlVKQlFVYzJReXhOUVVGSUxFTkJRVlVzU1VGQlZqdEJRVU5CVkN3eVFrRkJWemxGTEU5QlFVOTNSU3hIUVVGUUxFZEJRV0Y0UlN4UFFVRlBjMFlzV1VGQkwwSTdRVUZEU0N4aFFVaEVMRTFCU1VzN1FVRkRSRFZETEcxQ1FVRkhkMFFzVDBGQlNDeERRVUZYTEVsQlFWZzdRVUZEU0R0QlFVTktPenRCUVVWRU8wRkJRMEVzV1VGQlNUTkNMRlZCUVZVc1MwRkJTMUFzWTBGQlRDeERRVUZ2UW1Nc1VVRkJjRUlzUTBGQlpEdEJRVU5CTEZsQlFVbFFMRTlCUVVvc1JVRkJZVHRCUVVOVUxHZENRVUZKZEVRc1UwRkJVM05FTEZGQlFWRjBSQ3hOUVVGeVFqdEJRVU5CTEdkQ1FVRkpRU3hQUVVGUGQwWXNUMEZCVUN4RFFVRmxiRU1zVVVGQlVYQkVMRmxCUVhaQ0xFbEJRWFZETEVOQlFVTXNRMEZCZUVNc1NVRkRReXhEUVVGRGIwUXNVVUZCVVc1RUxHOUNRVVJrTEVWQlEzRkRPMEZCUTJwRGJVUXNkMEpCUVZGdVJDeHZRa0ZCVWl4SFFVRXJRaXhKUVVFdlFqdEJRVU5JTzBGQlEwUXNhVUpCUVVzc1NVRkJTWE5FTEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSk1VUXNUMEZCVDFBc1RVRkJNMElzUlVGQmJVTm5SU3hKUVVGSlF5eERRVUYyUXl4RlFVRXdRMFFzUjBGQk1VTXNSVUZCSzBNN1FVRkRNME51UkN3NFFrRkJZMllzUjBGQlpDeERRVUZyUWxNc1QwRkJUM2xFTEVOQlFWQXNRMEZCYkVJN1FVRkRTRHRCUVVORWVrUXNiVUpCUVU5UUxFMUJRVkFzUjBGQlowSXNRMEZCYUVJN08wRkJSVUVzWjBKQlFVa3NTMEZCUzNWRUxHTkJRVXdzUzBGQmQwSk5MRTlCUVRWQ0xFVkJRVzlETzBGQlEyaERMSEZDUVVGTFRDeHpRa0ZCVEN4SFFVRTRRaXhKUVVFNVFqdEJRVU5JTEdGQlJrUXNUVUZGU3p0QlFVTkVMSEZDUVVGTFNTeHJRa0ZCVEN4RFFVRjNRa01zVDBGQmVFSTdRVUZEU0R0QlFVTktPenRCUVVWRU8wRkJRMEVzWVVGQlN5dENMR2RDUVVGTUxFTkJRWE5DZEVjc1RVRkJkRUk3UVVGRFNDeExRWHBrYjBJN08wRkJNbVJ5UWpzN096czdPenM3TzBGQlUwRXdSeXh0UWtGQlpTeDVRa0ZCVlR0QlFVTnlRaXhoUVVGTFF5dzBRa0ZCVEN4RFFVRnJRMnBGTEVkQlFVZGxMRk5CUVVnc1EwRkJZVzFFTEdWQlFTOURPMEZCUTBnc1MwRjBaVzlDT3p0QlFYZGxja0k3T3pzN096czdPenM3TzBGQlYwRkVMR3REUVVFNFFpeHpRMEZCVTBVc1YwRkJWQ3hGUVVGeFFqdEJRVU12UXp0QlFVTkJMRmxCUVVsdVF5eERRVUZLTzBGQlFVRXNXVUZCVDBnc1QwRkJVRHRCUVVGQkxGbEJRV2RDUlN4TlFVRk5MRXRCUVV0TUxHVkJRVE5DTzBGQlEwRXNZVUZCU1Uwc1NVRkJSVVFzU1VGQlNTOUVMRTFCUVVvc1IwRkJWeXhEUVVGcVFpeEZRVUZ2UW1kRkxFdEJRVWNzUTBGQmRrSXNSVUZCTUVKQkxFZEJRVEZDTEVWQlFUaENPMEZCUXpGQ1NDeHpRa0ZCVlVVc1NVRkJTVU1zUTBGQlNpeERRVUZXTzBGQlEwRXNhVUpCUVVzNFFpeHpRa0ZCVEN4RFFVRTBRbXBETEZGQlFWRjJSU3hOUVVGd1F6dEJRVU5JT3p0QlFVVkVPMEZCUTBFc1dVRkJTVk1zUzBGQlNqdEJRVU5CTEZsQlFVbHhSeXhqUVVGakxFTkJRV3hDTzBGQlEwRXNXVUZCUjBRc1kwRkJZeXhEUVVGcVFpeEZRVUZ0UWp0QlFVTm1MR2xDUVVGSmJrTXNTVUZCUlN4RFFVRk9MRVZCUVZOQkxFbEJRVVVzUzBGQlMyWXNaVUZCVEN4RFFVRnhRbXBFTEUxQlFXaERMRWRCUVhsRE8wRkJRM0pEYjBjc09FSkJRV01zUzBGQlMyNUVMR1ZCUVV3c1EwRkJjVUpxUkN4TlFVRnVRenRCUVVOQlJDeDNRa0ZCVVN4TFFVRkxhMFFzWlVGQlRDeERRVUZ4UW1Vc1EwRkJja0lzUTBGQlVqdEJRVU5CTEc5Q1FVRkhha1VzVTBGQlUwRXNUVUZCVFZJc1VVRkJUaXhKUVVGclFqUkhMRmRCUVRsQ0xFVkJRMGtzUzBGQlMxQXNaMEpCUVV3c1EwRkJjMEkzUml4TlFVRk5WQ3hOUVVFMVFqdEJRVU5LTEc5Q1FVRkpPRWNzWlVGQlpTeExRVUZMYmtRc1pVRkJUQ3hEUVVGeFFtcEVMRTFCUVhoRExFVkJRMGxuUlR0QlFVTlFPMEZCUTBvN08wRkJSVVFzV1VGQlIyMURMR1ZCUVdVc1EwRkJiRUlzUlVGQmIwSTdRVUZEYUVJc2FVSkJRVWx1UXl4SlFVRkZMRU5CUVU0c1JVRkJVMEVzU1VGQlJTeExRVUZMWkN4aFFVRk1MRU5CUVcxQ2JFUXNUVUZCT1VJc1IwRkJkVU03UVVGRGJrTnZSeXc0UWtGQll5eExRVUZMYkVRc1lVRkJUQ3hEUVVGdFFteEVMRTFCUVdwRE8wRkJRMEZFTEhkQ1FVRlJMRXRCUVV0dFJDeGhRVUZNTEVOQlFXMUNZeXhEUVVGdVFpeERRVUZTTzBGQlEwRXNiMEpCUVVscVJTeExRVUZLTEVWQlEwa3NTMEZCU3paR0xHZENRVUZNTEVOQlFYTkNOMFlzVFVGQlRWUXNUVUZCTlVJN1FVRkRTaXh2UWtGQlNUaEhMR1ZCUVdVc1MwRkJTMnhFTEdGQlFVd3NRMEZCYlVKc1JDeE5RVUYwUXl4RlFVTkpaMFU3UVVGRFVEdEJRVU5LT3p0QlFVVkVMR0ZCUVVsQkxFbEJRVVVzUTBGQlRpeEZRVUZUUVN4SlFVRkZMRXRCUVV0aUxHVkJRVXdzUTBGQmNVSnVSQ3hOUVVGb1F5eEhRVUY1UXp0QlFVTnlRMjlITERCQ1FVRmpMRXRCUVV0cVJDeGxRVUZNTEVOQlFYRkNia1FzVFVGQmJrTTdRVUZEUVVRc2IwSkJRVkVzUzBGQlMyOUVMR1ZCUVV3c1EwRkJjVUpoTEVOQlFYSkNMRU5CUVZJN1FVRkRRU3huUWtGQlIycEZMRk5CUVZOQkxFMUJRVTFTTEZGQlFVNHNTVUZCYTBJMFJ5eFhRVUU1UWl4RlFVTkpMRXRCUVV0UUxHZENRVUZNTEVOQlFYTkNOMFlzVFVGQlRWUXNUVUZCTlVJN1FVRkRTaXhuUWtGQlNUaEhMR1ZCUVdVc1MwRkJTMnBFTEdWQlFVd3NRMEZCY1VKdVJDeE5RVUY0UXl4RlFVTkpaMFU3UVVGRFVEdEJRVU5LTEV0Qk5XaENiMEk3TzBGQk9HaENja0k3T3pzN096czdPMEZCVVVGeFF5eHBRa0ZCWVN4eFFrRkJVMnBITEZGQlFWUXNSVUZCYlVKa0xFMUJRVzVDTEVWQlFUQkNPMEZCUTI1RE8wRkJRMEU3UVVGRFFUQkRMRmRCUVVkMVJDeFJRVUZJTEVOQlFWbHVSaXhSUVVGYUxFVkJRWE5DTEVsQlFYUkNPMEZCUTBFMFFpeFhRVUZIZFVRc1VVRkJTQ3hEUVVGWmFrY3NUVUZCV2l4RlFVRnZRaXhKUVVGd1FqdEJRVU5CTEZsQlFVazRSU3hYUVVGWE9VVXNUMEZCVDNkRkxFZEJRWFJDTzBGQlEwRXNXVUZCU1N4RFFVRkRUU3hSUVVGTUxFVkJRV1U3UVVGRFdDeG5Ra0ZCU1RsRkxFOUJRVTl6Uml4WlFVRllMRVZCUVhsQ08wRkJRM0pDTlVNc2JVSkJRVWMyUXl4TlFVRklMRU5CUVZVc1NVRkJWanRCUVVOQlZDd3lRa0ZCVnpsRkxFOUJRVTkzUlN4SFFVRlFMRWRCUVdGNFJTeFBRVUZQYzBZc1dVRkJMMEk3UVVGRFNDeGhRVWhFTEUxQlNVczdRVUZEUkRWRExHMUNRVUZIZDBRc1QwRkJTQ3hEUVVGWExFbEJRVmc3UVVGRFNEdEJRVU5LT3p0QlFVVkVMRmxCUVVrelFpeFZRVUZWTEV0QlFVdFFMR05CUVV3c1EwRkJiMEpqTEZGQlFYQkNMRU5CUVdRN08wRkJSVUVzV1VGQlNTeERRVUZEVUN4UFFVRk1MRVZCUVdNN1FVRkRWaXh0UWtGQlR5eExRVUZRTzBGQlEwZzdPMEZCUlVRc1dVRkJTVUVzVVVGQlVYUkVMRTFCUVZJc1NVRkJhMElzU1VGQmRFSXNSVUZCTWtJN1FVRkRka0lzYlVKQlFVOHNTMEZCVUR0QlFVTklMRk5CUmtRc1RVRkhTenRCUVVORUxHZENRVUZKUVN4VFFVRlRjMFFzVVVGQlVYUkVMRTFCUVhKQ08wRkJRMEVzYVVKQlFVc3NTVUZCU1hsRUxFbEJRVWtzUTBGQllpeEZRVUZuUWtFc1NVRkJTWHBFTEU5QlFVOVFMRTFCUVROQ0xFVkJRVzFETEVWQlFVVm5SU3hEUVVGeVF5eEZRVUYzUXp0QlFVTndReXh2UWtGQlNXeENMRkZCUVZOMlF5eFBRVUZQZVVRc1EwRkJVQ3hEUVVGaU96dEJRVVZCTEc5Q1FVRkpOVVFzWVVGQllUQkRMRTFCUVUxMFFpeFRRVUYyUWl4RlFVRnBRenRCUVVNM1Fpd3lRa0ZCVHl4SlFVRlFPMEZCUTBnN1FVRkRTanRCUVVORUxHMUNRVUZQTEV0QlFWQTdRVUZEU0R0QlFVTktMRXRCTVd0Q2IwSTdPMEZCTkd0Q2NrSTdPenM3T3pzN096dEJRVk5CT0VVc2NVSkJRV2xDTERKQ1FVRlpPMEZCUTNwQ0xHVkJRVThzUzBGQlMwTXNPRUpCUVV3c1EwRkJiME4yUlN4SFFVRkhaU3hUUVVGSUxFTkJRV0Z0UkN4bFFVRnFSQ3hEUVVGUU8wRkJRMGdzUzBGMmJFSnZRanM3UVVGNWJFSnlRanM3T3pzN096czdPenRCUVZWQlN5eHZRMEZCWjBNc2QwTkJRVlZLTEZkQlFWWXNSVUZCZFVJN1FVRkRia1FzV1VGQlNVc3NiVUpCUVcxQ0xFVkJRWFpDT3p0QlFVVkJMRmxCUVVsdVF5eFBRVUZQTEVsQlFWZzdRVUZCUVN4WlFVRnBRbElzVDBGQmFrSTdRVUZCUVN4WlFVRXdRalJETEc5Q1FVRnZRbkJETEV0QlFVdFlMR1ZCUVc1RU8wRkJRMEVzV1VGQlNVMHNRMEZCU2l4RlFVRlBOa0lzUlVGQlVEdEJRVU5CTzBGQlEwRXNZVUZCU1RkQ0xFbEJRVWtzUTBGQlNpeEZRVUZQTmtJc1MwRkJTMWtzYTBKQlFXdENla2NzVFVGQmJFTXNSVUZCTUVOblJTeEpRVUZKTmtJc1JVRkJPVU1zUlVGQmEwUTNRaXhIUVVGc1JDeEZRVUZ6UkR0QlFVTnNSRWdzYzBKQlFWVTBReXhyUWtGQmEwSjZReXhEUVVGc1FpeERRVUZXTzBGQlEwRXNaMEpCUVVsSUxFOUJRVW9zUlVGQllUdEJRVU5VUVN4M1FrRkJVWEpGTEUxQlFWSXNSMEZCYVVJc1NVRkJha0k3UVVGRFFXZElMR2xEUVVGcFFuWkhMRWxCUVdwQ0xFTkJRWE5DTkVRc1VVRkJVWFpGTEUxQlFUbENPMEZCUTBnN1FVRkRTanM3UVVGRlJDeFpRVUZKVXl4TFFVRktPMEZCUTBFc1dVRkJSMjlITEdOQlFXTXNRMEZCYWtJc1JVRkJiVUk3UVVGRFppeHBRa0ZCU1c1RExFbEJRVVVzUTBGQlRpeEZRVUZUUVN4SlFVRkZMRXRCUVV0bUxHVkJRVXdzUTBGQmNVSnFSQ3hOUVVGb1F5eEZRVUYzUTJkRkxFZEJRWGhETEVWQlFUUkRPMEZCUTNoRGFrVXNkMEpCUVZFc1MwRkJTMnRFTEdWQlFVd3NRMEZCY1VKbExFTkJRWEpDTEVOQlFWSTdRVUZEUVN4dlFrRkJTV3BGTEV0QlFVb3NSVUZCVnp0QlFVTlFMSGRDUVVGSFFTeE5RVUZOVWl4UlFVRk9MRWxCUVd0Q05FY3NWMEZCY2tJc1JVRkJhVU03UVVGRE4wSndSeXc0UWtGQlRWQXNUVUZCVGl4SFFVRmxMRWxCUVdZN1FVRkRRV2RJTEhsRFFVRnBRblpITEVsQlFXcENMRU5CUVhOQ1JpeE5RVUZOVkN4TlFVRTFRanRCUVVOSU8wRkJRMG83UVVGRFNqdEJRVU5LT3p0QlFVVkVMRmxCUVVjMlJ5eGxRVUZsTEVOQlFXeENMRVZCUVc5Q08wRkJRMmhDTEdsQ1FVRkpia01zU1VGQlJTeERRVUZPTEVWQlFWTkJMRWxCUVVVc1MwRkJTMlFzWVVGQlRDeERRVUZ0UW14RUxFMUJRVGxDTEVWQlFYTkRaMFVzUjBGQmRFTXNSVUZCTUVNN1FVRkRkRU5xUlN4M1FrRkJVU3hMUVVGTGJVUXNZVUZCVEN4RFFVRnRRbU1zUTBGQmJrSXNRMEZCVWp0QlFVTkJMRzlDUVVGSmFrVXNTMEZCU2l4RlFVRlhPMEZCUTFCQkxEQkNRVUZOVUN4TlFVRk9MRWRCUVdVc1NVRkJaanRCUVVOQlowZ3NjVU5CUVdsQ2RrY3NTVUZCYWtJc1EwRkJjMEpHTEUxQlFVMVVMRTFCUVRWQ08wRkJRMGc3UVVGRFNqdEJRVU5LT3p0QlFVVkVMR0ZCUVVrd1JTeEpRVUZGTEVOQlFVNHNSVUZCVTBFc1NVRkJSU3hMUVVGTFlpeGxRVUZNTEVOQlFYRkNia1FzVFVGQmFFTXNSVUZCZDBOblJTeEhRVUY0UXl4RlFVRTBRenRCUVVONFEycEZMRzlDUVVGUkxFdEJRVXR2UkN4bFFVRk1MRU5CUVhGQ1lTeERRVUZ5UWl4RFFVRlNPMEZCUTBFc1owSkJRVWxxUlN4TFFVRktMRVZCUVZjN1FVRkRVQ3h2UWtGQlIwRXNUVUZCVFZJc1VVRkJUaXhKUVVGclFqUkhMRmRCUVhKQ0xFVkJRV2xETzBGQlF6ZENjRWNzTUVKQlFVMVFMRTFCUVU0c1IwRkJaU3hKUVVGbU8wRkJRMEZuU0N4eFEwRkJhVUoyUnl4SlFVRnFRaXhEUVVGelFrWXNUVUZCVFZRc1RVRkJOVUk3UVVGRFNEdEJRVU5LTzBGQlEwbzdPMEZCUlVRc1pVRkJUMnRJTEdkQ1FVRlFPMEZCUTBnc1MwRnVjRUp2UWpzN1FVRnhjRUp5UWpzN096czdPenM3T3p0QlFWVkJSU3h0UWtGQlpTeDFRa0ZCVlVNc1pVRkJWaXhGUVVFeVFqdEJRVU4wUXl4WlFVRkpMRU5CUVVOQkxHVkJRVXdzUlVGRFNUczdRVUZGU2l4aFFVRkxMRWxCUVVrelF5eEpRVUZKTEVOQlFXSXNSVUZCWjBKQkxFbEJRVWt5UXl4blFrRkJaMEl6Unl4TlFVRndReXhGUVVFMFEyZEZMRWRCUVRWRExFVkJRV2xFTzBGQlF6ZERMR2xDUVVGTE5FTXNXVUZCVEN4RFFVRnJRa1FzWjBKQlFXZENNME1zUTBGQmFFSXNRMEZCYkVJN1FVRkRTRHRCUVVOS0xFdEJkSEZDYjBJN08wRkJkM0ZDY2tJN096czdPenM3T3pzN096dEJRVmxCTmtNc2FVSkJRV0VzY1VKQlFWVjJTQ3hOUVVGV0xFVkJRV3RDTzBGQlF6TkNNRU1zVjBGQlIzVkVMRkZCUVVnc1EwRkJXV3BITEUxQlFWb3NSVUZCYjBJc1NVRkJjRUk3UVVGRFFTeFpRVUZKT0VVc1YwRkJWemxGTEU5QlFVOTNSU3hIUVVGMFFqdEJRVU5CTEZsQlFVa3NRMEZCUTAwc1VVRkJUQ3hGUVVGbE8wRkJRMWdzWjBKQlFVazVSU3hQUVVGUGMwWXNXVUZCV0N4RlFVRjVRanRCUVVOeVFqVkRMRzFDUVVGSE5rTXNUVUZCU0N4RFFVRlZMRWxCUVZZN1FVRkRRVlFzTWtKQlFWYzVSU3hQUVVGUGQwVXNSMEZCVUN4SFFVRmhlRVVzVDBGQlQzTkdMRmxCUVM5Q08wRkJRMGdzWVVGSVJDeE5RVWxMTzBGQlEwUTFReXh0UWtGQlIzZEVMRTlCUVVnc1EwRkJWeXhKUVVGWU8wRkJRMGc3UVVGRFNqczdRVUZGUkR0QlFVTkJMRmxCUVVsdVFpeFBRVUZQTEVsQlFWZzdRVUZCUVN4WlFVTkpVaXhWUVVGVlVTeExRVUZMWml4alFVRk1MRU5CUVc5Q1l5eFJRVUZ3UWl4RFFVUmtPMEZCUlVFc1dVRkJTVkFzVDBGQlNpeEZRVUZoTzBGQlExUkJMRzlDUVVGUmNrVXNUVUZCVWl4SFFVRnBRaXhKUVVGcVFqdEJRVU5JT3p0QlFVVkVPMEZCUTBFc1dVRkJTWE5JTEdkQ1FVRm5RbnBETEV0QlFVdHFRaXhsUVVGTUxFTkJRWEZDWjBJc1VVRkJja0lzUTBGQmNFSTdRVUZEUVN4WlFVRkpNRU1zWVVGQlNpeEZRVUZ0UWp0QlFVTm1RU3d3UWtGQll5OUhMRXRCUVdRc1EwRkJiMEpRTEUxQlFYQkNMRWRCUVRaQ0xFbEJRVGRDTzBGQlEwZzdRVUZEU2l4TFFUZHpRbTlDT3p0QlFTdHpRbkpDT3pzN096czdPenM3T3pzN1FVRlpRVzlJTEd0Q1FVRmpMSE5DUVVGVmRFZ3NUVUZCVml4RlFVRnJRanRCUVVNMVFqQkRMRmRCUVVkMVJDeFJRVUZJTEVOQlFWbHFSeXhOUVVGYUxFVkJRVzlDTEVsQlFYQkNPMEZCUTBFc1dVRkJTVGhGTEZkQlFWYzVSU3hQUVVGUGQwVXNSMEZCZEVJN1FVRkRRU3haUVVGSkxFTkJRVU5OTEZGQlFVd3NSVUZCWlR0QlFVTllMR2RDUVVGSk9VVXNUMEZCVDNOR0xGbEJRVmdzUlVGQmVVSTdRVUZEY2tJMVF5eHRRa0ZCUnpaRExFMUJRVWdzUTBGQlZTeEpRVUZXTzBGQlEwRlVMREpDUVVGWE9VVXNUMEZCVDNkRkxFZEJRVkFzUjBGQllYaEZMRTlCUVU5elJpeFpRVUV2UWp0QlFVTklMR0ZCU0VRc1RVRkpTenRCUVVORU5VTXNiVUpCUVVkM1JDeFBRVUZJTEVOQlFWY3NTVUZCV0R0QlFVTklPMEZCUTBvN08wRkJSVVE3UVVGRFFTeFpRVUZKYmtJc1QwRkJUeXhKUVVGWU8wRkJRVUVzV1VGRFNWSXNWVUZCVlZFc1MwRkJTMllzWTBGQlRDeERRVUZ2UW1Nc1VVRkJjRUlzUTBGRVpEdEJRVVZCTEZsQlFVbFFMRTlCUVVvc1JVRkJZVHRCUVVOVVFTeHZRa0ZCVVhKRkxFMUJRVklzUjBGQmFVSXNTMEZCYWtJN1FVRkRTRHM3UVVGRlJEdEJRVU5CTEZsQlFVbHpTQ3huUWtGQlowSjZReXhMUVVGTGFrSXNaVUZCVEN4RFFVRnhRbWRDTEZGQlFYSkNMRU5CUVhCQ08wRkJRMEVzV1VGQlNUQkRMR0ZCUVVvc1JVRkJiVUk3UVVGRFprRXNNRUpCUVdNdlJ5eExRVUZrTEVOQlFXOUNVQ3hOUVVGd1FpeEhRVUUyUWl4TFFVRTNRanRCUVVOSU8wRkJRMG9zUzBGd2RrSnZRanM3UVVGemRrSnlRanM3T3pzN096dEJRVTlCZFVnc2IwSkJRV2RDTEhkQ1FVRlZla2dzVFVGQlZpeEZRVUZyUWp0QlFVTTVRakJETEZkQlFVZDFSQ3hSUVVGSUxFTkJRVmxxUnl4TlFVRmFMRVZCUVc5Q0xFbEJRWEJDTzBGQlEwRXNXVUZCU1RoRkxGZEJRVmM1UlN4UFFVRlBkMFVzUjBGQmRFSTdRVUZEUVN4WlFVRkpMRU5CUVVOTkxGRkJRVXdzUlVGQlpUdEJRVU5ZTEdkQ1FVRkpPVVVzVDBGQlQzTkdMRmxCUVZnc1JVRkJlVUk3UVVGRGNrSTFReXh0UWtGQlJ6WkRMRTFCUVVnc1EwRkJWU3hKUVVGV08wRkJRMEZVTERKQ1FVRlhPVVVzVDBGQlQzZEZMRWRCUVZBc1IwRkJZWGhGTEU5QlFVOXpSaXhaUVVFdlFqdEJRVU5JTEdGQlNFUXNUVUZKU3p0QlFVTkVOVU1zYlVKQlFVZDNSQ3hQUVVGSUxFTkJRVmNzU1VGQldEdEJRVU5JTzBGQlEwbzdPMEZCUlVRN1FVRkRRU3haUVVGSk0wSXNWVUZCVlN4TFFVRkxVQ3hqUVVGTUxFTkJRVzlDWXl4UlFVRndRaXhEUVVGa08wRkJRMEVzV1VGQlNWQXNUMEZCU2l4RlFVRmhPMEZCUTFRc2JVSkJRVTlCTEZGQlFWRnlSU3hOUVVGbU8wRkJRMGc3UVVGRFJDeFpRVUZKYzBnc1owSkJRV2RDTEV0QlFVc3hSQ3hsUVVGTUxFTkJRWEZDWjBJc1VVRkJja0lzUTBGQmNFSTdRVUZEUVN4WlFVRkpNRU1zWVVGQlNpeEZRVUZ0UWp0QlFVTm1MRzFDUVVGUFFTeGpRVUZqTDBjc1MwRkJaQ3hEUVVGdlFsQXNUVUZCTTBJN1FVRkRTRHRCUVVORUxHVkJRVThzUzBGQlVEdEJRVU5JTzBGQmNIaENiMElzUTBGQmVrSTdPMEZCZFhoQ1FUczdPenM3T3p0QlFVOUJkME1zUjBGQlIyVXNVMEZCU0N4RFFVRmhiVVFzWlVGQllpeEhRVUVyUWl4TFFVRkxMRVZCUVhCRE96dEJRVVZCT3pzN096czdPMEZCVDBGc1JTeEhRVUZIWlN4VFFVRklMRU5CUVdGcFJTeHRRa0ZCWWl4SFFVRnRRMmhHTEVkQlFVZGxMRk5CUVVnc1EwRkJZVzFFTEdWQlFXSXNSMEZCSzBJc1EwRkJiRVU3TzBGQlJVRmxMRTlCUVU5RExFOUJRVkFzUjBGQmFVSnNSaXhIUVVGSFpTeFRRVUZ3UWlJc0ltWnBiR1VpT2lKRFExTmphR1ZrZFd4bGNpNXFjeUlzSW5OdmRYSmpaWE5EYjI1MFpXNTBJanBiSWk4cUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FYSEpjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRNdE1qQXhOaUJEYUhWcmIyNW5JRlJsWTJodWIyeHZaMmxsY3lCSmJtTXVYSEpjYmlCRGIzQjVjbWxuYUhRZ0tHTXBJREl3TVRjdE1qQXhPQ0JZYVdGdFpXNGdXV0ZxYVNCVGIyWjBkMkZ5WlNCRGJ5NHNJRXgwWkM1Y2NseHVYSEpjYmlCb2RIUndjem92TDNkM2R5NWpiMk52Y3k1amIyMHZYSEpjYmx4eVhHNGdVR1Z5YldsemMybHZiaUJwY3lCb1pYSmxZbmtnWjNKaGJuUmxaQ3dnWm5KbFpTQnZaaUJqYUdGeVoyVXNJSFJ2SUdGdWVTQndaWEp6YjI0Z2IySjBZV2x1YVc1bklHRWdZMjl3ZVZ4eVhHNGdiMllnZEdocGN5QnpiMlowZDJGeVpTQmhibVFnWVhOemIyTnBZWFJsWkNCbGJtZHBibVVnYzI5MWNtTmxJR052WkdVZ0tIUm9aU0JjSWxOdlpuUjNZWEpsWENJcExDQmhJR3hwYldsMFpXUXNYSEpjYmlBZ2QyOXliR1IzYVdSbExDQnliM2xoYkhSNUxXWnlaV1VzSUc1dmJpMWhjM05wWjI1aFlteGxMQ0J5WlhadlkyRmliR1VnWVc1a0lHNXZiaTFsZUdOc2RYTnBkbVVnYkdsalpXNXpaVnh5WEc0Z2RHOGdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjlzWld4NUlIUnZJR1JsZG1Wc2IzQWdaMkZ0WlhNZ2IyNGdlVzkxY2lCMFlYSm5aWFFnY0d4aGRHWnZjbTF6TGlCWmIzVWdjMmhoYkd4Y2NseHVJQ0J1YjNRZ2RYTmxJRU52WTI5eklFTnlaV0YwYjNJZ2MyOW1kSGRoY21VZ1ptOXlJR1JsZG1Wc2IzQnBibWNnYjNSb1pYSWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdkR2hoZENkelhISmNiaUFnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh5WEc0Z0lITjFZbXhwWTJWdWMyVXNJR0Z1WkM5dmNpQnpaV3hzSUdOdmNHbGxjeUJ2WmlCRGIyTnZjeUJEY21WaGRHOXlMbHh5WEc1Y2NseHVJRlJvWlNCemIyWjBkMkZ5WlNCdmNpQjBiMjlzY3lCcGJpQjBhR2x6SUV4cFkyVnVjMlVnUVdkeVpXVnRaVzUwSUdGeVpTQnNhV05sYm5ObFpDd2dibTkwSUhOdmJHUXVYSEpjYmlCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNGdjbVZ6WlhKMlpYTWdZV3hzSUhKcFoyaDBjeUJ1YjNRZ1pYaHdjbVZ6YzJ4NUlHZHlZVzUwWldRZ2RHOGdlVzkxTGx4eVhHNWNjbHh1SUZSSVJTQlRUMFpVVjBGU1JTQkpVeUJRVWs5V1NVUkZSQ0JjSWtGVElFbFRYQ0lzSUZkSlZFaFBWVlFnVjBGU1VrRk9WRmtnVDBZZ1FVNVpJRXRKVGtRc0lFVllVRkpGVTFNZ1QxSmNjbHh1SUVsTlVFeEpSVVFzSUVsT1EweFZSRWxPUnlCQ1ZWUWdUazlVSUV4SlRVbFVSVVFnVkU4Z1ZFaEZJRmRCVWxKQlRsUkpSVk1nVDBZZ1RVVlNRMGhCVGxSQlFrbE1TVlJaTEZ4eVhHNGdSa2xVVGtWVFV5QkdUMUlnUVNCUVFWSlVTVU5WVEVGU0lGQlZVbEJQVTBVZ1FVNUVJRTVQVGtsT1JsSkpUa2RGVFVWT1ZDNGdTVTRnVGs4Z1JWWkZUbFFnVTBoQlRFd2dWRWhGWEhKY2JpQkJWVlJJVDFKVElFOVNJRU5QVUZsU1NVZElWQ0JJVDB4RVJWSlRJRUpGSUV4SlFVSk1SU0JHVDFJZ1FVNVpJRU5NUVVsTkxDQkVRVTFCUjBWVElFOVNJRTlVU0VWU1hISmNiaUJNU1VGQ1NVeEpWRmtzSUZkSVJWUklSVklnU1U0Z1FVNGdRVU5VU1U5T0lFOUdJRU5QVGxSU1FVTlVMQ0JVVDFKVUlFOVNJRTlVU0VWU1YwbFRSU3dnUVZKSlUwbE9SeUJHVWs5TkxGeHlYRzRnVDFWVUlFOUdJRTlTSUVsT0lFTlBUazVGUTFSSlQwNGdWMGxVU0NCVVNFVWdVMDlHVkZkQlVrVWdUMUlnVkVoRklGVlRSU0JQVWlCUFZFaEZVaUJFUlVGTVNVNUhVeUJKVGx4eVhHNGdWRWhGSUZOUFJsUlhRVkpGTGx4eVhHNGdLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2k5Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lCQWJXOWtkV3hsSUdOalhISmNiaUFxTDF4eVhHNWpiMjV6ZENCcWN5QTlJSEpsY1hWcGNtVW9KeTR2Y0d4aGRHWnZjbTB2YW5NbktUdGNjbHh1WTI5dWMzUWdTV1JIWlc1bGNtRjBaWElnUFNCeVpYRjFhWEpsS0NjdUwzQnNZWFJtYjNKdEwybGtMV2RsYm1WeVlYUmxjaWNwTzF4eVhHNWpiMjV6ZENCTlFWaGZVRTlQVEY5VFNWcEZJRDBnTWpBN1hISmNibHh5WEc1MllYSWdhV1JIWlc1bGNtRjBaWElnUFNCdVpYY2dTV1JIWlc1bGNtRjBaWElvSjFOamFHVmtkV3hsY2ljcE8xeHlYRzVjY2x4dUx5OWtZWFJoSUhOMGNuVmpkSFZ5WlhOY2NseHVMeXBjY2x4dUlDb2dRU0JzYVhOMElHUnZkV0pzWlMxc2FXNXJaV1FnYkdsemRDQjFjMlZrSUdadmNpQmNJblZ3WkdGMFpYTWdkMmwwYUNCd2NtbHZjbWwwZVZ3aVhISmNiaUFxSUVCamJHRnpjeUJNYVhOMFJXNTBjbmxjY2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIUmhjbWRsZENCdWIzUWdjbVYwWVdsdVpXUWdLSEpsZEdGcGJtVmtJR0o1SUdoaGMyaFZjR1JoZEdWRmJuUnllU2xjY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlIQnlhVzl5YVhSNVhISmNiaUFxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnY0dGMWMyVmtYSEpjYmlBcUlFQndZWEpoYlNCN1FtOXZiR1ZoYm4wZ2JXRnlhMlZrUm05eVJHVnNaWFJwYjI0Z2MyVnNaV04wYjNJZ2QybHNiQ0J1YnlCc2IyNW5aWElnWW1VZ1kyRnNiR1ZrSUdGdVpDQmxiblJ5ZVNCM2FXeHNJR0psSUhKbGJXOTJaV1FnWVhRZ1pXNWtJRzltSUhSb1pTQnVaWGgwSUhScFkydGNjbHh1SUNvdlhISmNiblpoY2lCTWFYTjBSVzUwY25rZ1BTQm1kVzVqZEdsdmJpQW9kR0Z5WjJWMExDQndjbWx2Y21sMGVTd2djR0YxYzJWa0xDQnRZWEpyWldSR2IzSkVaV3hsZEdsdmJpa2dlMXh5WEc0Z0lDQWdkR2hwY3k1MFlYSm5aWFFnUFNCMFlYSm5aWFE3WEhKY2JpQWdJQ0IwYUdsekxuQnlhVzl5YVhSNUlEMGdjSEpwYjNKcGRIazdYSEpjYmlBZ0lDQjBhR2x6TG5CaGRYTmxaQ0E5SUhCaGRYTmxaRHRjY2x4dUlDQWdJSFJvYVhNdWJXRnlhMlZrUm05eVJHVnNaWFJwYjI0Z1BTQnRZWEpyWldSR2IzSkVaV3hsZEdsdmJqdGNjbHh1ZlR0Y2NseHVYSEpjYm5aaGNpQmZiR2x6ZEVWdWRISnBaWE1nUFNCYlhUdGNjbHh1VEdsemRFVnVkSEo1TG1kbGRDQTlJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXNJSEJ5YVc5eWFYUjVMQ0J3WVhWelpXUXNJRzFoY210bFpFWnZja1JsYkdWMGFXOXVLU0I3WEhKY2JpQWdJQ0IyWVhJZ2NtVnpkV3gwSUQwZ1gyeHBjM1JGYm5SeWFXVnpMbkJ2Y0NncE8xeHlYRzRnSUNBZ2FXWWdLSEpsYzNWc2RDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQzUwWVhKblpYUWdQU0IwWVhKblpYUTdYSEpjYmlBZ0lDQWdJQ0FnY21WemRXeDBMbkJ5YVc5eWFYUjVJRDBnY0hKcGIzSnBkSGs3WEhKY2JpQWdJQ0FnSUNBZ2NtVnpkV3gwTG5CaGRYTmxaQ0E5SUhCaGRYTmxaRHRjY2x4dUlDQWdJQ0FnSUNCeVpYTjFiSFF1YldGeWEyVmtSbTl5UkdWc1pYUnBiMjRnUFNCdFlYSnJaV1JHYjNKRVpXeGxkR2x2Ymp0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUdWc2MyVWdlMXh5WEc0Z0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUc1bGR5Qk1hWE4wUlc1MGNua29kR0Z5WjJWMExDQndjbWx2Y21sMGVTd2djR0YxYzJWa0xDQnRZWEpyWldSR2IzSkVaV3hsZEdsdmJpazdYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnlaWFIxY200Z2NtVnpkV3gwTzF4eVhHNTlPMXh5WEc1TWFYTjBSVzUwY25rdWNIVjBJRDBnWm5WdVkzUnBiMjRnS0dWdWRISjVLU0I3WEhKY2JpQWdJQ0JwWmlBb1gyeHBjM1JGYm5SeWFXVnpMbXhsYm1kMGFDQThJRTFCV0Y5UVQwOU1YMU5KV2tVcElIdGNjbHh1SUNBZ0lDQWdJQ0JsYm5SeWVTNTBZWEpuWlhRZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnSUNBZ0lGOXNhWE4wUlc1MGNtbGxjeTV3ZFhOb0tHVnVkSEo1S1R0Y2NseHVJQ0FnSUgxY2NseHVmVHRjY2x4dVhISmNiaThxWEhKY2JpQXFJRUVnZFhCa1lYUmxJR1Z1ZEhKNUlHeHBjM1JjY2x4dUlDb2dRR05zWVhOeklFaGhjMmhWY0dSaGRHVkZiblJ5ZVZ4eVhHNGdLaUJBY0dGeVlXMGdlMEZ5Y21GNWZTQnNhWE4wSUZkb2FXTm9JR3hwYzNRZ1pHOWxjeUJwZENCaVpXeHZibWNnZEc4Z1AxeHlYRzRnS2lCQWNHRnlZVzBnZTB4cGMzUkZiblJ5ZVgwZ1pXNTBjbmtnWlc1MGNua2dhVzRnZEdobElHeHBjM1JjY2x4dUlDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIUmhjbWRsZENCb1lYTm9JR3RsZVNBb2NtVjBZV2x1WldRcFhISmNiaUFxSUVCd1lYSmhiU0I3Wm5WdVkzUnBiMjU5SUdOaGJHeGlZV05yWEhKY2JpQXFMMXh5WEc1MllYSWdTR0Z6YUZWd1pHRjBaVVZ1ZEhKNUlEMGdablZ1WTNScGIyNGdLR3hwYzNRc0lHVnVkSEo1TENCMFlYSm5aWFFzSUdOaGJHeGlZV05yS1NCN1hISmNiaUFnSUNCMGFHbHpMbXhwYzNRZ1BTQnNhWE4wTzF4eVhHNGdJQ0FnZEdocGN5NWxiblJ5ZVNBOUlHVnVkSEo1TzF4eVhHNGdJQ0FnZEdocGN5NTBZWEpuWlhRZ1BTQjBZWEpuWlhRN1hISmNiaUFnSUNCMGFHbHpMbU5oYkd4aVlXTnJJRDBnWTJGc2JHSmhZMnM3WEhKY2JuMDdYSEpjYm5aaGNpQmZhR0Z6YUZWd1pHRjBaVVZ1ZEhKcFpYTWdQU0JiWFR0Y2NseHVTR0Z6YUZWd1pHRjBaVVZ1ZEhKNUxtZGxkQ0E5SUdaMWJtTjBhVzl1SUNoc2FYTjBMQ0JsYm5SeWVTd2dkR0Z5WjJWMExDQmpZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdkbUZ5SUhKbGMzVnNkQ0E5SUY5b1lYTm9WWEJrWVhSbFJXNTBjbWxsY3k1d2IzQW9LVHRjY2x4dUlDQWdJR2xtSUNoeVpYTjFiSFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRdWJHbHpkQ0E5SUd4cGMzUTdYSEpjYmlBZ0lDQWdJQ0FnY21WemRXeDBMbVZ1ZEhKNUlEMGdaVzUwY25rN1hISmNiaUFnSUNBZ0lDQWdjbVZ6ZFd4MExuUmhjbWRsZENBOUlIUmhjbWRsZER0Y2NseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRdVkyRnNiR0poWTJzZ1BTQmpZV3hzWW1GamF6dGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lISmxjM1ZzZENBOUlHNWxkeUJJWVhOb1ZYQmtZWFJsUlc1MGNua29iR2x6ZEN3Z1pXNTBjbmtzSUhSaGNtZGxkQ3dnWTJGc2JHSmhZMnNwTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnY21WMGRYSnVJSEpsYzNWc2REdGNjbHh1ZlR0Y2NseHVTR0Z6YUZWd1pHRjBaVVZ1ZEhKNUxuQjFkQ0E5SUdaMWJtTjBhVzl1SUNobGJuUnllU2tnZTF4eVhHNGdJQ0FnYVdZZ0tGOW9ZWE5vVlhCa1lYUmxSVzUwY21sbGN5NXNaVzVuZEdnZ1BDQk5RVmhmVUU5UFRGOVRTVnBGS1NCN1hISmNiaUFnSUNBZ0lDQWdaVzUwY25rdWJHbHpkQ0E5SUdWdWRISjVMbVZ1ZEhKNUlEMGdaVzUwY25rdWRHRnlaMlYwSUQwZ1pXNTBjbmt1WTJGc2JHSmhZMnNnUFNCdWRXeHNPMXh5WEc0Z0lDQWdJQ0FnSUY5b1lYTm9WWEJrWVhSbFJXNTBjbWxsY3k1d2RYTm9LR1Z1ZEhKNUtUdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVYSEpjYmk4dlhISmNiaThxWEhKY2JpQXFJRWhoYzJnZ1JXeGxiV1Z1ZENCMWMyVmtJR1p2Y2lCY0luTmxiR1ZqZEc5eWN5QjNhWFJvSUdsdWRHVnlkbUZzWENKY2NseHVJQ29nUUdOc1lYTnpJRWhoYzJoVWFXMWxja1Z1ZEhKNVhISmNiaUFxSUVCd1lYSmhiU0I3UVhKeVlYbDlJSFJwYldWeWMxeHlYRzRnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZEdGeVoyVjBJQ0JvWVhOb0lHdGxlU0FvY21WMFlXbHVaV1FwWEhKY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjBhVzFsY2tsdVpHVjRYSEpjYmlBcUlFQndZWEpoYlNCN1ZHbHRaWEo5SUdOMWNuSmxiblJVYVcxbGNseHlYRzRnS2lCQWNHRnlZVzBnZTBKdmIyeGxZVzU5SUdOMWNuSmxiblJVYVcxbGNsTmhiSFpoWjJWa1hISmNiaUFxSUVCd1lYSmhiU0I3UW05dmJHVmhibjBnY0dGMWMyVmtYSEpjYmlBcUwxeHlYRzUyWVhJZ1NHRnphRlJwYldWeVJXNTBjbmtnUFNCbWRXNWpkR2x2YmlBb2RHbHRaWEp6TENCMFlYSm5aWFFzSUhScGJXVnlTVzVrWlhnc0lHTjFjbkpsYm5SVWFXMWxjaXdnWTNWeWNtVnVkRlJwYldWeVUyRnNkbUZuWldRc0lIQmhkWE5sWkNrZ2UxeHlYRzRnSUNBZ2RtRnlJRjkwSUQwZ2RHaHBjenRjY2x4dUlDQWdJRjkwTG5ScGJXVnljeUE5SUhScGJXVnljenRjY2x4dUlDQWdJRjkwTG5SaGNtZGxkQ0E5SUhSaGNtZGxkRHRjY2x4dUlDQWdJRjkwTG5ScGJXVnlTVzVrWlhnZ1BTQjBhVzFsY2tsdVpHVjRPMXh5WEc0Z0lDQWdYM1F1WTNWeWNtVnVkRlJwYldWeUlEMGdZM1Z5Y21WdWRGUnBiV1Z5TzF4eVhHNGdJQ0FnWDNRdVkzVnljbVZ1ZEZScGJXVnlVMkZzZG1GblpXUWdQU0JqZFhKeVpXNTBWR2x0WlhKVFlXeDJZV2RsWkR0Y2NseHVJQ0FnSUY5MExuQmhkWE5sWkNBOUlIQmhkWE5sWkR0Y2NseHVmVHRjY2x4dWRtRnlJRjlvWVhOb1ZHbHRaWEpGYm5SeWFXVnpJRDBnVzEwN1hISmNia2hoYzJoVWFXMWxja1Z1ZEhKNUxtZGxkQ0E5SUdaMWJtTjBhVzl1SUNoMGFXMWxjbk1zSUhSaGNtZGxkQ3dnZEdsdFpYSkpibVJsZUN3Z1kzVnljbVZ1ZEZScGJXVnlMQ0JqZFhKeVpXNTBWR2x0WlhKVFlXeDJZV2RsWkN3Z2NHRjFjMlZrS1NCN1hISmNiaUFnSUNCMllYSWdjbVZ6ZFd4MElEMGdYMmhoYzJoVWFXMWxja1Z1ZEhKcFpYTXVjRzl3S0NrN1hISmNiaUFnSUNCcFppQW9jbVZ6ZFd4MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WemRXeDBMblJwYldWeWN5QTlJSFJwYldWeWN6dGNjbHh1SUNBZ0lDQWdJQ0J5WlhOMWJIUXVkR0Z5WjJWMElEMGdkR0Z5WjJWME8xeHlYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDNTBhVzFsY2tsdVpHVjRJRDBnZEdsdFpYSkpibVJsZUR0Y2NseHVJQ0FnSUNBZ0lDQnlaWE4xYkhRdVkzVnljbVZ1ZEZScGJXVnlJRDBnWTNWeWNtVnVkRlJwYldWeU8xeHlYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDNWpkWEp5Wlc1MFZHbHRaWEpUWVd4MllXZGxaQ0E5SUdOMWNuSmxiblJVYVcxbGNsTmhiSFpoWjJWa08xeHlYRzRnSUNBZ0lDQWdJSEpsYzNWc2RDNXdZWFZ6WldRZ1BTQndZWFZ6WldRN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYTjFiSFFnUFNCdVpYY2dTR0Z6YUZScGJXVnlSVzUwY25rb2RHbHRaWEp6TENCMFlYSm5aWFFzSUhScGJXVnlTVzVrWlhnc0lHTjFjbkpsYm5SVWFXMWxjaXdnWTNWeWNtVnVkRlJwYldWeVUyRnNkbUZuWldRc0lIQmhkWE5sWkNrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCeVpYUjFjbTRnY21WemRXeDBPMXh5WEc1OU8xeHlYRzVJWVhOb1ZHbHRaWEpGYm5SeWVTNXdkWFFnUFNCbWRXNWpkR2x2YmlBb1pXNTBjbmtwSUh0Y2NseHVJQ0FnSUdsbUlDaGZhR0Z6YUZScGJXVnlSVzUwY21sbGN5NXNaVzVuZEdnZ1BDQk5RVmhmVUU5UFRGOVRTVnBGS1NCN1hISmNiaUFnSUNBZ0lDQWdaVzUwY25rdWRHbHRaWEp6SUQwZ1pXNTBjbmt1ZEdGeVoyVjBJRDBnWlc1MGNua3VZM1Z5Y21WdWRGUnBiV1Z5SUQwZ2JuVnNiRHRjY2x4dUlDQWdJQ0FnSUNCZmFHRnphRlJwYldWeVJXNTBjbWxsY3k1d2RYTm9LR1Z1ZEhKNUtUdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVYSEpjYmk4cVhISmNiaUFxSUV4cFoyaDBJSGRsYVdkb2RDQjBhVzFsY2x4eVhHNGdLaUJBWlhoMFpXNWtjeUJqWXk1RGJHRnpjMXh5WEc0Z0tpOWNjbHh1Wm5WdVkzUnBiMjRnUTJGc2JHSmhZMnRVYVcxbGNpQW9LU0I3WEhKY2JpQWdJQ0IwYUdsekxsOXNiMk5ySUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0IwYUdsekxsOXpZMmhsWkhWc1pYSWdQU0J1ZFd4c08xeHlYRzRnSUNBZ2RHaHBjeTVmWld4aGNITmxaQ0E5SUMweE8xeHlYRzRnSUNBZ2RHaHBjeTVmY25WdVJtOXlaWFpsY2lBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnZEdocGN5NWZkWE5sUkdWc1lYa2dQU0JtWVd4elpUdGNjbHh1SUNBZ0lIUm9hWE11WDNScGJXVnpSWGhsWTNWMFpXUWdQU0F3TzF4eVhHNGdJQ0FnZEdocGN5NWZjbVZ3WldGMElEMGdNRHRjY2x4dUlDQWdJSFJvYVhNdVgyUmxiR0Y1SUQwZ01EdGNjbHh1SUNBZ0lIUm9hWE11WDJsdWRHVnlkbUZzSUQwZ01EdGNjbHh1WEhKY2JpQWdJQ0IwYUdsekxsOTBZWEpuWlhRZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnZEdocGN5NWZZMkZzYkdKaFkyc2dQU0J1ZFd4c08xeHlYRzU5WEhKY2JseHlYRzUyWVhJZ2NISnZkRzhnUFNCRFlXeHNZbUZqYTFScGJXVnlMbkJ5YjNSdmRIbHdaVHRjY2x4dVhISmNibkJ5YjNSdkxtbHVhWFJYYVhSb1EyRnNiR0poWTJzZ1BTQm1kVzVqZEdsdmJpQW9jMk5vWldSMWJHVnlMQ0JqWVd4c1ltRmpheXdnZEdGeVoyVjBMQ0J6WldOdmJtUnpMQ0J5WlhCbFlYUXNJR1JsYkdGNUtTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5c2IyTnJJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQjBhR2x6TGw5elkyaGxaSFZzWlhJZ1BTQnpZMmhsWkhWc1pYSTdYSEpjYmlBZ0lDQjBhR2x6TGw5MFlYSm5aWFFnUFNCMFlYSm5aWFE3WEhKY2JpQWdJQ0IwYUdsekxsOWpZV3hzWW1GamF5QTlJR05oYkd4aVlXTnJPMXh5WEc1Y2NseHVJQ0FnSUhSb2FYTXVYMlZzWVhCelpXUWdQU0F0TVR0Y2NseHVJQ0FnSUhSb2FYTXVYMmx1ZEdWeWRtRnNJRDBnYzJWamIyNWtjenRjY2x4dUlDQWdJSFJvYVhNdVgyUmxiR0Y1SUQwZ1pHVnNZWGs3WEhKY2JpQWdJQ0IwYUdsekxsOTFjMlZFWld4aGVTQTlJQ2gwYUdsekxsOWtaV3hoZVNBK0lEQXBPMXh5WEc0Z0lDQWdkR2hwY3k1ZmNtVndaV0YwSUQwZ2NtVndaV0YwTzF4eVhHNGdJQ0FnZEdocGN5NWZjblZ1Um05eVpYWmxjaUE5SUNoMGFHbHpMbDl5WlhCbFlYUWdQVDA5SUdOakxtMWhZM0p2TGxKRlVFVkJWRjlHVDFKRlZrVlNLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQjBjblZsTzF4eVhHNTlPMXh5WEc0dktpcGNjbHh1SUNvZ1FISmxkSFZ5YmlCN1RuVnRZbVZ5ZlNCeVpYUjFjbTV6SUdsdWRHVnlkbUZzSUc5bUlIUnBiV1Z5WEhKY2JpQXFMMXh5WEc1d2NtOTBieTVuWlhSSmJuUmxjblpoYkNBOUlHWjFibU4wYVc5dUtDbDdjbVYwZFhKdUlIUm9hWE11WDJsdWRHVnlkbUZzTzMwN1hISmNiaThxS2x4eVhHNGdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdhVzUwWlhKMllXd2djMlYwSUdsdWRHVnlkbUZzSUdsdUlITmxZMjl1WkhOY2NseHVJQ292WEhKY2JuQnliM1J2TG5ObGRFbHVkR1Z5ZG1Gc0lEMGdablZ1WTNScGIyNG9hVzUwWlhKMllXd3BlM1JvYVhNdVgybHVkR1Z5ZG1Gc0lEMGdhVzUwWlhKMllXdzdmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUIwY21sbloyVnljeUIwYUdVZ2RHbHRaWEpjY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUjBJR1JsYkhSaElIUnBiV1ZjY2x4dUlDb3ZYSEpjYm5CeWIzUnZMblZ3WkdGMFpTQTlJR1oxYm1OMGFXOXVJQ2hrZENrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgyVnNZWEJ6WldRZ1BUMDlJQzB4S1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlpXeGhjSE5sWkNBOUlEQTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkR2x0WlhORmVHVmpkWFJsWkNBOUlEQTdYSEpjYmlBZ0lDQjlJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyVnNZWEJ6WldRZ0t6MGdaSFE3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzSjFia1p2Y21WMlpYSWdKaVlnSVhSb2FYTXVYM1Z6WlVSbGJHRjVLU0I3THk5emRHRnVaR0Z5WkNCMGFXMWxjaUIxYzJGblpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlpXeGhjSE5sWkNBK1BTQjBhR2x6TGw5cGJuUmxjblpoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MGNtbG5aMlZ5S0NrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bGJHRndjMlZrSUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSDBnWld4elpTQjdMeTloWkhaaGJtTmxaQ0IxYzJGblpWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZmRYTmxSR1ZzWVhrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlsYkdGd2MyVmtJRDQ5SUhSb2FYTXVYMlJsYkdGNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTUwY21sbloyVnlLQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMlZzWVhCelpXUWdMVDBnZEdocGN5NWZaR1ZzWVhrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZkR2x0WlhORmVHVmpkWFJsWkNBclBTQXhPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDNWelpVUmxiR0Y1SUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR2hwY3k1ZlpXeGhjSE5sWkNBK1BTQjBhR2x6TGw5cGJuUmxjblpoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkSEpwWjJkbGNpZ3BPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxsOWxiR0Z3YzJWa0lEMGdNRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5MGFXMWxjMFY0WldOMWRHVmtJQ3M5SURFN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlqWVd4c1ltRmpheUFtSmlBaGRHaHBjeTVmY25WdVJtOXlaWFpsY2lBbUppQjBhR2x6TGw5MGFXMWxjMFY0WldOMWRHVmtJRDRnZEdocGN5NWZjbVZ3WldGMEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1allXNWpaV3dvS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibHh5WEc1d2NtOTBieTVuWlhSRFlXeHNZbUZqYXlBOUlHWjFibU4wYVc5dUtDbDdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTJGc2JHSmhZMnM3WEhKY2JuMDdYSEpjYmx4eVhHNXdjbTkwYnk1MGNtbG5aMlZ5SUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM1JoY21kbGRDQW1KaUIwYUdsekxsOWpZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMnh2WTJzZ1BTQjBjblZsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOaGJHeGlZV05yTG1OaGJHd29kR2hwY3k1ZmRHRnlaMlYwTENCMGFHbHpMbDlsYkdGd2MyVmtLVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDlzYjJOcklEMGdabUZzYzJVN1hISmNiaUFnSUNCOVhISmNibjA3WEhKY2JseHlYRzV3Y205MGJ5NWpZVzVqWld3Z1BTQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0F2TDI5MlpYSnlhV1JsWEhKY2JpQWdJQ0IwYUdsekxsOXpZMmhsWkhWc1pYSXVkVzV6WTJobFpIVnNaU2gwYUdsekxsOWpZV3hzWW1GamF5d2dkR2hwY3k1ZmRHRnlaMlYwS1R0Y2NseHVmVHRjY2x4dVhISmNiblpoY2lCZmRHbHRaWEp6SUQwZ1cxMDdYSEpjYmtOaGJHeGlZV05yVkdsdFpYSXVaMlYwSUQwZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdjbVYwZFhKdUlGOTBhVzFsY25NdWNHOXdLQ2tnZkh3Z2JtVjNJRU5oYkd4aVlXTnJWR2x0WlhJb0tUdGNjbHh1ZlR0Y2NseHVRMkZzYkdKaFkydFVhVzFsY2k1d2RYUWdQU0JtZFc1amRHbHZiaUFvZEdsdFpYSXBJSHRjY2x4dUlDQWdJR2xtSUNoZmRHbHRaWEp6TG14bGJtZDBhQ0E4SUUxQldGOVFUMDlNWDFOSldrVWdKaVlnSVhScGJXVnlMbDlzYjJOcktTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdsdFpYSXVYM05qYUdWa2RXeGxjaUE5SUhScGJXVnlMbDkwWVhKblpYUWdQU0IwYVcxbGNpNWZZMkZzYkdKaFkyc2dQU0J1ZFd4c08xeHlYRzRnSUNBZ0lDQWdJRjkwYVcxbGNuTXVjSFZ6YUNoMGFXMWxjaWs3WEhKY2JpQWdJQ0I5WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmx4eVhHNGdLaUJUWTJobFpIVnNaWElnYVhNZ2NtVnpjRzl1YzJsaWJHVWdiMllnZEhKcFoyZGxjbWx1WnlCMGFHVWdjMk5vWldSMWJHVmtJR05oYkd4aVlXTnJjeTQ4WW5JdlBseHlYRzRnS2lCWmIzVWdjMmh2ZFd4a0lHNXZkQ0IxYzJVZ1RsTlVhVzFsY2k0Z1NXNXpkR1ZoWkNCMWMyVWdkR2hwY3lCamJHRnpjeTQ4WW5JdlBseHlYRzRnS2lBOFluSXZQbHh5WEc0Z0tpQlVhR1Z5WlNCaGNtVWdNaUJrYVdabVpYSmxiblFnZEhsd1pYTWdiMllnWTJGc2JHSmhZMnR6SUNoelpXeGxZM1J2Y25NcE9qeGljaTgrWEhKY2JpQXFJQ0FnSUNBdElIVndaR0YwWlNCallXeHNZbUZqYXpvZ2RHaGxJQ2QxY0dSaGRHVW5JR05oYkd4aVlXTnJJSGRwYkd3Z1ltVWdZMkZzYkdWa0lHVjJaWEo1SUdaeVlXMWxMaUJaYjNVZ1kyRnVJR04xYzNSdmJXbDZaU0IwYUdVZ2NISnBiM0pwZEhrdVBHSnlMejVjY2x4dUlDb2dJQ0FnSUMwZ1kzVnpkRzl0SUdOaGJHeGlZV05yT2lCQklHTjFjM1J2YlNCallXeHNZbUZqYXlCM2FXeHNJR0psSUdOaGJHeGxaQ0JsZG1WeWVTQm1jbUZ0WlN3Z2IzSWdkMmwwYUNCaElHTjFjM1J2YlNCcGJuUmxjblpoYkNCdlppQjBhVzFsUEdKeUx6NWNjbHh1SUNvZ1BHSnlMejVjY2x4dUlDb2dWR2hsSUNkamRYTjBiMjBnYzJWc1pXTjBiM0p6SnlCemFHOTFiR1FnWW1VZ1lYWnZhV1JsWkNCM2FHVnVJSEJ2YzNOcFlteGxMaUJKZENCcGN5Qm1ZWE4wWlhJc1hISmNiaUFxSUdGdVpDQmpiMjV6ZFcxbGN5QnNaWE56SUcxbGJXOXllU0IwYnlCMWMyVWdkR2hsSUNkMWNHUmhkR1VnWTJGc2JHSmhZMnNuTGlBcVhISmNiaUFxSUNFamVtaGNjbHh1SUNvZ1UyTm9aV1IxYkdWeUlPYVlyK2kwbitpMG8raW5wdVdQa2VXYm51aXdnK1dIdmVhVnNPZWFoT2V4dStPQWdqeGljaTgrWEhKY2JpQXFJT21BbXVXNHVPYURoZVdHdGVTNGkrKzhqT1c3dXVpdXJ1Uzl2K2VVcUNCall5NWthWEpsWTNSdmNpNW5aWFJUWTJobFpIVnNaWElvS1NEbW5hWG9qcmZsajVibnM3dm51NS9scnBybWw3YmxtYWpqZ0lJOFluSXZQbHh5WEc0Z0tpRG1uSW5rdUtUbnA0M2t1STNsa0l6bnNidmxub3ZubW9UbHJwcm1sN2JsbWFqdnZKbzhZbkl2UGx4eVhHNGdLaUFnSUNBZ0xTQjFjR1JoZEdVZzVhNmE1cGUyNVptbzc3eWE1cStQNUxpQTViaW42WU85NUx5YTZLZW01WStSNDRDQzVvS281WSt2NUx1bDZJZXE1YTZhNUxtSjVMeVk1WVdJNTdxbjQ0Q0NQR0p5THo1Y2NseHVJQ29nSUNBZ0lDMGc2SWVxNWE2YTVMbUo1YTZhNXBlMjVabW83N3lhNkllcTVhNmE1TG1KNWE2YTVwZTI1Wm1vNVkrdjVMdWw1cStQNUxpQTViaW41b2lXNklDRjZJZXE1YTZhNUxtSjU1cUU1cGUyNlplMDZaZTA2WnFVNktlbTVZK1I0NENDUEdKeUx6NWNjbHh1SUNvZzVhYUM1cDZjNWJpTTVweWI1cStQNWJpbjZZTzk2S2VtNVkrUjc3eU01YnFVNksrbDVMMi81NVNvSUhWd1pHRjBaU0RscnBybWw3YmxtYWp2dkl6a3ZiL25sS2dnZFhCa1lYUmxJT1d1bXVhWHR1V1pxT2FidE9XL3ErKzhqT2lBak9TNGxPYTJpT2lBbCthYnRPV3drZWVhaE9XR2hlV3RtT09BZ2x4eVhHNGdLbHh5WEc0Z0tpQkFZMnhoYzNNZ1UyTm9aV1IxYkdWeVhISmNiaUFxTDF4eVhHNWpZeTVUWTJobFpIVnNaWElnUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQjBhR2x6TGw5MGFXMWxVMk5oYkdVZ1BTQXhMakE3WEhKY2JpQWdJQ0IwYUdsekxsOTFjR1JoZEdWelRtVm5UR2x6ZENBOUlGdGRPeUFnTHk4Z2JHbHpkQ0J2WmlCd2NtbHZjbWwwZVNBOElEQmNjbHh1SUNBZ0lIUm9hWE11WDNWd1pHRjBaWE13VEdsemRDQTlJRnRkT3lBZ0lDQXZMeUJzYVhOMElHOW1JSEJ5YVc5eWFYUjVJRDA5SURCY2NseHVJQ0FnSUhSb2FYTXVYM1Z3WkdGMFpYTlFiM05NYVhOMElEMGdXMTA3SUNBdkx5QnNhWE4wSUc5bUlIQnlhVzl5YVhSNUlENGdNRnh5WEc0Z0lDQWdkR2hwY3k1ZmFHRnphRVp2Y2xWd1pHRjBaWE1nUFNCcWN5NWpjbVZoZEdWTllYQW9kSEoxWlNrN0lDQXZMeUJvWVhOb0lIVnpaV1FnZEc4Z1ptVjBZMmdnY1hWcFkydHNlU0IwYUdVZ2JHbHpkQ0JsYm5SeWFXVnpJR1p2Y2lCd1lYVnpaU3dnWkdWc1pYUmxMQ0JsZEdOY2NseHVJQ0FnSUhSb2FYTXVYMmhoYzJoR2IzSlVhVzFsY25NZ1BTQnFjeTVqY21WaGRHVk5ZWEFvZEhKMVpTazdJQ0FnTHk4Z1ZYTmxaQ0JtYjNJZ1hDSnpaV3hsWTNSdmNuTWdkMmwwYUNCcGJuUmxjblpoYkZ3aVhISmNiaUFnSUNCMGFHbHpMbDlqZFhKeVpXNTBWR0Z5WjJWMElEMGdiblZzYkR0Y2NseHVJQ0FnSUhSb2FYTXVYMk4xY25KbGJuUlVZWEpuWlhSVFlXeDJZV2RsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnZEdocGN5NWZkWEJrWVhSbFNHRnphRXh2WTJ0bFpDQTlJR1poYkhObE95QXZMeUJKWmlCMGNuVmxJSFZ1YzJOb1pXUjFiR1VnZDJsc2JDQnViM1FnY21WdGIzWmxJR0Z1ZVhSb2FXNW5JR1p5YjIwZ1lTQm9ZWE5vTGlCRmJHVnRaVzUwY3lCM2FXeHNJRzl1YkhrZ1ltVWdiV0Z5YTJWa0lHWnZjaUJrWld4bGRHbHZiaTVjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDloY25KaGVVWnZjbFJwYldWeWN5QTlJRnRkT3lBZ0x5OGdVM0JsWldRZ2RYQWdhVzVrWlhocGJtZGNjbHh1SUNBZ0lDOHZkR2hwY3k1ZllYSnlZWGxHYjNKVmNHUmhkR1Z6SUQwZ1cxMDdJQ0FnTHk4Z1UzQmxaV1FnZFhBZ2FXNWtaWGhwYm1kY2NseHVmVHRjY2x4dVhISmNibU5qTGxOamFHVmtkV3hsY2k1d2NtOTBiM1I1Y0dVZ1BTQjdYSEpjYmlBZ0lDQmpiMjV6ZEhKMVkzUnZjam9nWTJNdVUyTm9aV1IxYkdWeUxGeHlYRzRnSUNBZ0x5OHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFhCeWFYWmhkR1VnYldWMGFHOWtMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4eVhHNWNjbHh1SUNBZ0lGOXlaVzF2ZG1WSVlYTm9SV3hsYldWdWREb2dablZ1WTNScGIyNGdLR1ZzWlcxbGJuUXBJSHRjY2x4dUlDQWdJQ0FnSUNCa1pXeGxkR1VnZEdocGN5NWZhR0Z6YUVadmNsUnBiV1Z5YzF0bGJHVnRaVzUwTG5SaGNtZGxkQzVmYVdSZE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCaGNuSWdQU0IwYUdsekxsOWhjbkpoZVVadmNsUnBiV1Z5Y3p0Y2NseHVJQ0FnSUNBZ0lDQm1iM0lnS0haaGNpQnBJRDBnTUN3Z2JDQTlJR0Z5Y2k1c1pXNW5kR2c3SUdrZ1BDQnNPeUJwS3lzcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR0Z5Y2x0cFhTQTlQVDBnWld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1lYSnlMbk53YkdsalpTaHBMQ0F4S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJRWhoYzJoVWFXMWxja1Z1ZEhKNUxuQjFkQ2hsYkdWdFpXNTBLVHRjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ1gzSmxiVzkyWlZWd1pHRjBaVVp5YjIxSVlYTm9PaUJtZFc1amRHbHZiaUFvWlc1MGNua3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdkR0Z5WjJWMFNXUWdQU0JsYm5SeWVTNTBZWEpuWlhRdVgybGtPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnpaV3htSUQwZ2RHaHBjeXdnWld4bGJXVnVkQ0E5SUhObGJHWXVYMmhoYzJoR2IzSlZjR1JoZEdWelczUmhjbWRsZEVsa1hUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZENrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBdkx5QlNaVzF2ZG1VZ2JHbHpkQ0JsYm5SeWVTQm1jbTl0SUd4cGMzUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RtRnlJR3hwYzNRZ1BTQmxiR1Z0Wlc1MExteHBjM1FzSUd4cGMzUkZiblJ5ZVNBOUlHVnNaVzFsYm5RdVpXNTBjbms3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd0xDQnNJRDBnYkdsemRDNXNaVzVuZEdnN0lHa2dQQ0JzT3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDaHNhWE4wVzJsZElEMDlQU0JzYVhOMFJXNTBjbmtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JzYVhOMExuTndiR2xqWlNocExDQXhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmljbVZoYXp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR1ZzWlhSbElITmxiR1l1WDJoaGMyaEdiM0pWY0dSaGRHVnpXM1JoY21kbGRFbGtYVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdUR2x6ZEVWdWRISjVMbkIxZENoc2FYTjBSVzUwY25rcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCSVlYTm9WWEJrWVhSbFJXNTBjbmt1Y0hWMEtHVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJSDBzWEhKY2JseHlYRzRnSUNBZ1gzQnlhVzl5YVhSNVNXNDZJR1oxYm1OMGFXOXVJQ2h3Y0V4cGMzUXNJR3hwYzNSRmJHVnRaVzUwTENCd2NtbHZjbWwwZVNrZ2UxeHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnY0hCTWFYTjBMbXhsYm1kMGFEc2dhU3NyS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIQnlhVzl5YVhSNUlEd2djSEJNYVhOMFcybGRMbkJ5YVc5eWFYUjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCd2NFeHBjM1F1YzNCc2FXTmxLR2tzSURBc0lHeHBjM1JGYkdWdFpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQndjRXhwYzNRdWNIVnphQ2hzYVhOMFJXeGxiV1Z1ZENrN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJRjloY0hCbGJtUkpiam9nWm5WdVkzUnBiMjRnS0hCd1RHbHpkQ3dnYkdsemRFVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0J3Y0V4cGMzUXVjSFZ6YUNoc2FYTjBSV3hsYldWdWRDazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4dkxTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzF3ZFdKc2FXTWdiV1YwYUc5a0xTMHRMUzB0TFMwdExTMHRMUzB0TFMwdExTMHRMUzB0TFZ4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhaVzRnVkdocGN5QnRaWFJvYjJRZ2MyaHZkV3hrSUdKbElHTmhiR3hsWkNCbWIzSWdZVzU1SUhSaGNtZGxkQ0IzYUdsamFDQnVaV1ZrY3lCMGJ5QnpZMmhsWkhWc1pTQjBZWE5yY3l3Z1lXNWtJSFJvYVhNZ2JXVjBhRzlrSUhOb2IzVnNaQ0JpWlNCallXeHNaV1FnWW1WbWIzSmxJR0Z1ZVNCelkyaGxaSFZzWlhJZ1FWQkpJSFZ6WVdkbExseHlYRzRnSUNBZ0lDb2dWR2hwY3lCdFpYUm9iMlFnZDJsc2JDQmhaR1FnWVNCZ1gybGtZQ0J3Y205d1pYSjBlU0JwWmlCcGRDQmtiMlZ6YmlkMElHVjRhWE4wTGx4eVhHNGdJQ0FnSUNvZ0lYcG9JT1M3dStTOWxlbWNnT2ltZ2VlVXFDQlRZMmhsWkhWc1pYSWc1NjZoNTVDRzVMdTc1WXFoNTVxRTVhKzU2TEdoNUxpNzVMMlQ2WU85NWJxVTZLK2w2TENENTVTbzZMK1o1TGlxNXBhNTVyT1Y3N3lNNWJtMjVMaVU1YnFVNksrbDVaeW82TENENTVTbzVMdTc1TDJWSUZOamFHVmtkV3hsY2lCQlVFa2c1TG1MNVltTjZMQ0Q1NVNvNkwrWjVMaXE1cGE1NXJPVjQ0Q0NYSEpjYmlBZ0lDQWdLaURvdjVua3VLcm1scm5tczVYa3ZKcm51NW5scjdub3NhSG10N3ZsaXFEa3VJRGt1S29nWUY5cFpHQWc1YkdlNW9Dbjc3eU01YWFDNXA2YzZMK1o1TGlxNWJHZTVvQ241TGlONWEyWTVaeW81NXFFNksrZDQ0Q0NYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR1Z1WVdKc1pVWnZjbFJoY21kbGRGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdFBZbXBsWTNSOUlIUmhjbWRsZEZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCbGJtRmliR1ZHYjNKVVlYSm5aWFE2SUdaMWJtTjBhVzl1SUNoMFlYSm5aWFFwSUh0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVhSaGNtZGxkQzVmYVdRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRDNWZYMmx1YzNSaGJtTmxTV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZ3hOVEV6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRDNWZhV1FnUFNCcFpFZGxibVZ5WVhSbGNpNW5aWFJPWlhkSlpDZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQXZLaXBjY2x4dUlDQWdJQ0FxSUNFalpXNWNjbHh1SUNBZ0lDQXFJRTF2WkdsbWFXVnpJSFJvWlNCMGFXMWxJRzltSUdGc2JDQnpZMmhsWkhWc1pXUWdZMkZzYkdKaFkydHpManhpY2k4K1hISmNiaUFnSUNBZ0tpQlpiM1VnWTJGdUlIVnpaU0IwYUdseklIQnliM0JsY25SNUlIUnZJR055WldGMFpTQmhJQ2R6Ykc5M0lHMXZkR2x2YmljZ2IzSWdKMlpoYzNRZ1ptOXlkMkZ5WkNjZ1pXWm1aV04wTGp4aWNpOCtYSEpjYmlBZ0lDQWdLaUJFWldaaGRXeDBJR2x6SURFdU1DNGdWRzhnWTNKbFlYUmxJR0VnSjNOc2IzY2diVzkwYVc5dUp5QmxabVpsWTNRc0lIVnpaU0IyWVd4MVpYTWdZbVZzYjNjZ01TNHdManhpY2k4K1hISmNiaUFnSUNBZ0tpQlVieUJqY21WaGRHVWdZU0FuWm1GemRDQm1iM0ozWVhKa0p5QmxabVpsWTNRc0lIVnpaU0IyWVd4MVpYTWdhR2xuYUdWeUlIUm9ZVzRnTVM0d0xqeGljaTgrWEhKY2JpQWdJQ0FnS2lCT2IzUmw3N3lhU1hRZ2QybHNiQ0JoWm1abFkzUWdSVlpGVWxrZ2MyTm9aV1IxYkdWa0lITmxiR1ZqZEc5eUlDOGdZV04wYVc5dUxseHlYRzRnSUNBZ0lDb2dJU042YUZ4eVhHNGdJQ0FnSUNvZzZLNis1NzJ1NXBlMjZaZTA2WmUwNlpxVTU1cUU1N3lwNXBTKzVxK1U1TDZMNDRDQ1BHSnlMejVjY2x4dUlDQWdJQ0FxSU9hQ3FPV1ByK1M3cGVTOXYrZVVxT2kvbWVTNHF1YVd1ZWF6bGVhZHBlV0ltK1c3dXVTNGdPUzRxaURpZ0p4emJHOTNJRzF2ZEdsdmJ1KzhpT2FGb3VXS3FPUzluTys4aWVLQW5TRG1pSllnNG9DY1ptRnpkQ0JtYjNKM1lYSms3N3lJNWIrcjZMK2I3N3lKNG9DZElPZWFoT2FWaU9hZW5PT0FnanhpY2k4K1hISmNiaUFnSUNBZ0tpRHB1NWpvcnFUbW1LOGdNUzR3NDRDQzZLYUI1WWliNWJ1NjVMaUE1TGlxSU9LQW5ITnNiM2NnYlc5MGFXOXU3N3lJNW9XaTVZcW81TDJjNzd5SjRvQ2RJT2FWaU9hZW5Demt2Yi9ubEtqbGdMemt2WTdrdW80Z01TNHc0NENDUEdKeUx6NWNjbHh1SUNBZ0lDQXFJT2ltZ2VTOXYrZVVxQ0RpZ0p4bVlYTjBJR1p2Y25kaGNtVHZ2SWpsdjZ2b3Y1dnZ2SW5pZ0owZzVwV0k1cDZjNzd5TTVMMi81NVNvNVlDODVhU241THFPSURFdU1PT0FnanhpY2k4K1hISmNiaUFnSUNBZ0tpRG1zNmptaEkvdnZKcmxyb1BsdmJIbGs0M29yNlVnVTJOb1pXUjFiR1Z5SU9TNGkrZXVvZWVRaHVlYWhPYUpnT2FjaWVXdW11YVh0dVdacU9PQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpaWFJVYVcxbFUyTmhiR1ZjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0IwYVcxbFUyTmhiR1ZjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYzJWMFZHbHRaVk5qWVd4bE9pQm1kVzVqZEdsdmJpQW9kR2x0WlZOallXeGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdsdFpWTmpZV3hsSUQwZ2RHbHRaVk5qWVd4bE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVW1WMGRYSnVjeUIwYVcxbElITmpZV3hsSUc5bUlITmphR1ZrZFd4bGNpNWNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZJNjM1WStXNXBlMjZaZTA2WmUwNlpxVTU1cUU1N3lwNXBTKzVxK1U1TDZMNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lHZGxkRlJwYldWVFkyRnNaVnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnliaUI3VG5WdFltVnlmVnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0JuWlhSVWFXMWxVMk5oYkdVNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZEdocGN5NWZkR2x0WlZOallXeGxPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJQ0VqWlc0Z0ozVndaR0YwWlNjZ2RHaGxJSE5qYUdWa2RXeGxjaTRnS0ZsdmRTQnphRzkxYkdRZ1RrVldSVklnWTJGc2JDQjBhR2x6SUcxbGRHaHZaQ3dnZFc1c1pYTnpJSGx2ZFNCcmJtOTNJSGRvWVhRZ2VXOTFJR0Z5WlNCa2IybHVaeTRwWEhKY2JpQWdJQ0FnS2lBaEkzcG9JSFZ3WkdGMFpTRG9zSVBsdXFibGg3M21sYkRqZ0lJbzVMaU41YnFVNksrbDU1dTA1bzZsNkxDRDU1U282TCtaNUxpcTVwYTU1ck9WNzd5TTZabWs2WjJlNWE2TTVZV281THFHNktlajZMK1o1TG1JNVlHYTU1cUU1N3VUNXA2Y0tWeHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQjFjR1JoZEdWY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCa2RDQmtaV3gwWVNCMGFXMWxYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSFZ3WkdGMFpUb2dablZ1WTNScGIyNGdLR1IwS1NCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsU0dGemFFeHZZMnRsWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2FXWW9kR2hwY3k1ZmRHbHRaVk5qWVd4bElDRTlQU0F4S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrZENBcVBTQjBhR2x6TGw5MGFXMWxVMk5oYkdVN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBMQ0JzYVhOMExDQnNaVzRzSUdWdWRISjVPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm1iM0lvYVQwd0xHeHBjM1E5ZEdocGN5NWZkWEJrWVhSbGMwNWxaMHhwYzNRc0lHeGxiaUE5SUd4cGMzUXViR1Z1WjNSb095QnBQR3hsYmpzZ2FTc3JLWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaVzUwY25rZ1BTQnNhWE4wVzJsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9JV1Z1ZEhKNUxuQmhkWE5sWkNBbUppQWhaVzUwY25rdWJXRnlhMlZrUm05eVJHVnNaWFJwYjI0cFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiblJ5ZVM1MFlYSm5aWFF1ZFhCa1lYUmxLR1IwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHWnZjaWhwUFRBc0lHeHBjM1E5ZEdocGN5NWZkWEJrWVhSbGN6Qk1hWE4wTENCc1pXNDliR2x6ZEM1c1pXNW5kR2c3SUdrOGJHVnVPeUJwS3lzcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJuUnllU0E5SUd4cGMzUmJhVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtSUNnaFpXNTBjbmt1Y0dGMWMyVmtJQ1ltSUNGbGJuUnllUzV0WVhKclpXUkdiM0pFWld4bGRHbHZiaWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdWdWRISjVMblJoY21kbGRDNTFjR1JoZEdVb1pIUXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUtHazlNQ3dnYkdsemREMTBhR2x6TGw5MWNHUmhkR1Z6VUc5elRHbHpkQ3dnYkdWdVBXeHBjM1F1YkdWdVozUm9PeUJwUEd4bGJqc2dhU3NyS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWlc1MGNua2dQU0JzYVhOMFcybGRPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVdWdWRISjVMbkJoZFhObFpDQW1KaUFoWlc1MGNua3ViV0Z5YTJWa1JtOXlSR1ZzWlhScGIyNHBYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWVTNTBZWEpuWlhRdWRYQmtZWFJsS0dSMEtUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVsMFpYSmhkR1VnYjNabGNpQmhiR3dnZEdobElHTjFjM1J2YlNCelpXeGxZM1J2Y25OY2NseHVJQ0FnSUNBZ0lDQjJZWElnWld4MExDQmhjbklnUFNCMGFHbHpMbDloY25KaGVVWnZjbFJwYldWeWN6dGNjbHh1SUNBZ0lDQWdJQ0JtYjNJb2FUMHdPeUJwUEdGeWNpNXNaVzVuZEdnN0lHa3JLeWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzZENBOUlHRnljbHRwWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGUmhjbWRsZENBOUlHVnNkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEZSaGNtZGxkRk5oYkhaaFoyVmtJRDBnWm1Gc2MyVTdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb0lXVnNkQzV3WVhWelpXUXBlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1ZHaGxJQ2QwYVcxbGNuTW5JR0Z5Y21GNUlHMWhlU0JqYUdGdVoyVWdkMmhwYkdVZ2FXNXphV1JsSUhSb2FYTWdiRzl2Y0Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1ptOXlJQ2hsYkhRdWRHbHRaWEpKYm1SbGVDQTlJREE3SUdWc2RDNTBhVzFsY2tsdVpHVjRJRHdnWld4MExuUnBiV1Z5Y3k1c1pXNW5kR2c3SUNzcktHVnNkQzUwYVcxbGNrbHVaR1Y0S1NsN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWld4MExtTjFjbkpsYm5SVWFXMWxjaUE5SUdWc2RDNTBhVzFsY25OYlpXeDBMblJwYldWeVNXNWtaWGhkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzZEM1amRYSnlaVzUwVkdsdFpYSlRZV3gyWVdkbFpDQTlJR1poYkhObE8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiSFF1WTNWeWNtVnVkRlJwYldWeUxuVndaR0YwWlNoa2RDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeDBMbU4xY25KbGJuUlVhVzFsY2lBOUlHNTFiR3c3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDOHZJRzl1YkhrZ1pHVnNaWFJsSUdOMWNuSmxiblJVWVhKblpYUWdhV1lnYm04Z1lXTjBhVzl1Y3lCM1pYSmxJSE5qYUdWa2RXeGxaQ0JrZFhKcGJtY2dkR2hsSUdONVkyeGxJQ2hwYzNOMVpTQWpORGd4S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWTNWeWNtVnVkRlJoY21kbGRGTmhiSFpoWjJWa0lDWW1JSFJvYVhNdVgyTjFjbkpsYm5SVVlYSm5aWFF1ZEdsdFpYSnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNtVnRiM1psU0dGemFFVnNaVzFsYm5Rb2RHaHBjeTVmWTNWeWNtVnVkRlJoY21kbGRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0F0TFdrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lDOHZJR1JsYkdWMFpTQmhiR3dnZFhCa1lYUmxjeUIwYUdGMElHRnlaU0J0WVhKclpXUWdabTl5SUdSbGJHVjBhVzl1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkWEJrWVhSbGN5QjNhWFJvSUhCeWFXOXlhWFI1SUR3Z01GeHlYRzRnSUNBZ0lDQWdJR1p2Y2locFBUQXNiR2x6ZEQxMGFHbHpMbDkxY0dSaGRHVnpUbVZuVEdsemREc2dhVHhzYVhOMExteGxibWQwYURzZ0tYdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXNTBjbmtnUFNCc2FYTjBXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlobGJuUnllUzV0WVhKclpXUkdiM0pFWld4bGRHbHZiaWxjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYM0psYlc5MlpWVndaR0YwWlVaeWIyMUlZWE5vS0dWdWRISjVLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FTc3JPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnWm05eUtHazlNQ3dnYkdsemREMTBhR2x6TGw5MWNHUmhkR1Z6TUV4cGMzUTdJR2s4YkdsemRDNXNaVzVuZEdnN0lDbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVkSEo1SUQwZ2JHbHpkRnRwWFR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHVnVkSEo1TG0xaGNtdGxaRVp2Y2tSbGJHVjBhVzl1S1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdGIzWmxWWEJrWVhSbFJuSnZiVWhoYzJnb1pXNTBjbmtwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBLeXM3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCbWIzSW9hVDB3TENCc2FYTjBQWFJvYVhNdVgzVndaR0YwWlhOUWIzTk1hWE4wT3lCcFBHeHBjM1F1YkdWdVozUm9PeUFwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWVTQTlJR3hwYzNSYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsYm5SeWVTNXRZWEpyWldSR2IzSkVaV3hsZEdsdmJpbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzSmxiVzkyWlZWd1pHRjBaVVp5YjIxSVlYTm9LR1Z1ZEhKNUtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNzck8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRYQmtZWFJsU0dGemFFeHZZMnRsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJOMWNuSmxiblJVWVhKblpYUWdQU0J1ZFd4c08xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzVjY2x4dUlDQWdJQ0FxSUR4d1BseHlYRzRnSUNBZ0lDb2dJQ0JVYUdVZ2MyTm9aV1IxYkdWa0lHMWxkR2h2WkNCM2FXeHNJR0psSUdOaGJHeGxaQ0JsZG1WeWVTQW5hVzUwWlhKMllXd25JSE5sWTI5dVpITXVQR0p5THo1Y2NseHVJQ0FnSUNBcUlDQWdTV1lnY0dGMWMyVmtJR2x6SUZsRlV5d2dkR2hsYmlCcGRDQjNiMjRuZENCaVpTQmpZV3hzWldRZ2RXNTBhV3dnYVhRZ2FYTWdjbVZ6ZFcxbFpDNDhZbkl2UGx4eVhHNGdJQ0FnSUNvZ0lDQkpaaUFuYVc1MFpYSjJZV3duSUdseklEQXNJR2wwSUhkcGJHd2dZbVVnWTJGc2JHVmtJR1YyWlhKNUlHWnlZVzFsTENCaWRYUWdhV1lnYzI4c0lHbDBJSEpsWTI5dGJXVnVaR1ZrSUhSdklIVnpaU0FuYzJOb1pXUjFiR1ZWY0dSaGRHVkdiM0pVWVhKblpYUTZKeUJwYm5OMFpXRmtManhpY2k4K1hISmNiaUFnSUNBZ0tpQWdJRWxtSUhSb1pTQmpZV3hzWW1GamF5Qm1kVzVqZEdsdmJpQnBjeUJoYkhKbFlXUjVJSE5qYUdWa2RXeGxaQ3dnZEdobGJpQnZibXg1SUhSb1pTQnBiblJsY25aaGJDQndZWEpoYldWMFpYSWdkMmxzYkNCaVpTQjFjR1JoZEdWa0lIZHBkR2h2ZFhRZ2NtVXRjMk5vWldSMWJHbHVaeUJwZENCaFoyRnBiaTQ4WW5JdlBseHlYRzRnSUNBZ0lDb2dJQ0J5WlhCbFlYUWdiR1YwSUhSb1pTQmhZM1JwYjI0Z1ltVWdjbVZ3WldGMFpXUWdjbVZ3WldGMElDc2dNU0IwYVcxbGN5d2dkWE5sSUdOakxtMWhZM0p2TGxKRlVFVkJWRjlHVDFKRlZrVlNJSFJ2SUd4bGRDQjBhR1VnWVdOMGFXOXVJSEoxYmlCamIyNTBhVzUxYjNWemJIazhZbkl2UGx4eVhHNGdJQ0FnSUNvZ0lDQmtaV3hoZVNCcGN5QjBhR1VnWVcxdmRXNTBJRzltSUhScGJXVWdkR2hsSUdGamRHbHZiaUIzYVd4c0lIZGhhWFFnWW1WbWIzSmxJR2wwSjJ4c0lITjBZWEowUEdKeUx6NWNjbHh1SUNBZ0lDQXFJRHd2Y0Q1Y2NseHVJQ0FnSUNBcUlDRWplbWhjY2x4dUlDQWdJQ0FxSU9hTWgrV3VtdVdibnVpd2crV0h2ZWFWc08rOGpPaXdnK2VVcU9XdnVlaXhvZWV0aWVTL29lYUJyK2FkcGVhM3UrV0tvT1M0Z09TNHF1YVdzT2VhaE9XdW11YVh0dVdacU9PQWdqeGljaTgrWEhKY2JpQWdJQ0FnS2lEbHBvTG1ucHdnY0dGMWMyVmtJT1dBdk9TNHVpQjBjblZsNzd5TTZZS2o1TG1JNTV1MDVZaXdJSEpsYzNWdFpTRG9vcXZvc0lQbmxLam1pWTNsdklEbHA0dm9ycUhtbDdiamdJSThZbkl2UGx4eVhHNGdJQ0FnSUNvZzViMlQ1cGUyNlplMDZaZTA2WnFVNkw2KzVZaXc1b3lINWE2YTVZQzg1cGUyNzd5TTZLNis1NzJ1NTVxRTVadWU2TENENVllOTVwV3c1YkNHNUx5YTZLS3I2TENENTVTbzQ0Q0NQR0p5THo1Y2NseHVJQ0FnSUNBcUlPV21ndWFlbkNCcGJuUmxjblpoYkNEbGdMemt1TG9nTU8rOGpPbUNvK1M1aU9XYm51aXdnK1dIdmVhVnNPYXZqK1M0Z09XNHArbUR2ZVM4bXVpaXEraXdnK2VVcU8rOGpPUzlodVdtZ3VhZW5PYVlyK2kvbWVhZ3QrKzhqRnh5WEc0Z0lDQWdJQ29nNWJ1NjZLNnU1TDIvNTVTb0lITmphR1ZrZFd4bFZYQmtZWFJsUm05eVZHRnlaMlYwSU9TN28rYWJ2K09BZ2p4aWNpOCtYSEpjYmlBZ0lDQWdLaURscG9MbW5wemxtNTdvc0lQbGg3M21sYkRsdDdMbnU0L29vcXZscnBybWw3YmxtYWprdmIvbmxLanZ2SXpwZ3FQa3VZamxqNnJrdkpybW03VG1sckRrdVl2bGlZM2xycHJtbDdibG1ham5tb1RtbDdicGw3VHBsN1RwbXBUbGo0TG1sYkR2dkl6a3VJM2t2SnJvcnI3bnZhN21sckRubW9UbHJwcm1sN2JsbWFqamdJSThZbkl2UGx4eVhHNGdJQ0FnSUNvZ2NtVndaV0YwSU9XQXZPV1ByK1M3cGVpdXFlV3VtdWFYdHVXWnFPaW5wdVdQa1NCeVpYQmxZWFFnS3lBeElPYXNvZSs4ak9TOXYrZVVxQ0JqWXk1dFlXTnlieTVTUlZCRlFWUmZSazlTUlZaRlVseHlYRzRnSUNBZ0lDb2c1WSt2NUx1bDZLNnA1YTZhNXBlMjVabW81TGlBNTV1MDViNnE1NDZ2NktlbTVZK1I0NENDUEdKeUx6NWNjbHh1SUNBZ0lDQXFJR1JsYkdGNUlPV0F2T2FNaCtXdW11Vzd0dWkvbithWHR1bVh0Tys4ak9XdW11YVh0dVdacU9TOG11V2NxT1c3dHVpL24rYU1oK1d1bXVlYWhPYVh0dW1YdE9TNWkrV1FqdVc4Z09XbmkraXVvZWFYdHVPQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnpZMmhsWkhWc1pWeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdEdkVzVqZEdsdmJuMGdZMkZzYkdKaFkydGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjBZWEpuWlhSY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCcGJuUmxjblpoYkZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUZ0eVpYQmxZWFE5WTJNdWJXRmpjbTh1VWtWUVJVRlVYMFpQVWtWV1JWSmRYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDUxYldKbGNuMGdXMlJsYkdGNVBUQmRYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMEp2YjJ4bFlXNTlJSEJoZFhObFpGeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVWdlMEJzYVc1cklHTnZZMjl6TW1RdlkyOXlaUzlEUTFOamFHVmtkV3hsY2k5elkyaGxaSFZzWlM1cWMzMWNjbHh1SUNBZ0lDQXFJRUIwZVhCbGMyTnlhWEIwWEhKY2JpQWdJQ0FnS2lCelkyaGxaSFZzWlNoallXeHNZbUZqYXpvZ1JuVnVZM1JwYjI0c0lIUmhjbWRsZERvZ1lXNTVMQ0JwYm5SbGNuWmhiRG9nYm5WdFltVnlMQ0J5WlhCbFlYUTZJRzUxYldKbGNpd2daR1ZzWVhrNklHNTFiV0psY2l3Z2NHRjFjMlZrUHpvZ1ltOXZiR1ZoYmlrNklIWnZhV1JjY2x4dUlDQWdJQ0FxSUhOamFHVmtkV3hsS0dOaGJHeGlZV05yT2lCR2RXNWpkR2x2Yml3Z2RHRnlaMlYwT2lCaGJua3NJR2x1ZEdWeWRtRnNPaUJ1ZFcxaVpYSXNJSEJoZFhObFpEODZJR0p2YjJ4bFlXNHBPaUIyYjJsa1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lITmphR1ZrZFd4bE9pQm1kVzVqZEdsdmJpQW9ZMkZzYkdKaFkyc3NJSFJoY21kbGRDd2dhVzUwWlhKMllXd3NJSEpsY0dWaGRDd2daR1ZzWVhrc0lIQmhkWE5sWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ2QxYzJVZ2MzUnlhV04wSnp0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEhsd1pXOW1JR05oYkd4aVlXTnJJQ0U5UFNBblpuVnVZM1JwYjI0bktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIWmhjaUIwYlhBZ1BTQmpZV3hzWW1GamF6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1kyRnNiR0poWTJzZ1BTQjBZWEpuWlhRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkQ0E5SUhSdGNEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0x5OXpaV3hsWTNSdmNpd2dkR0Z5WjJWMExDQnBiblJsY25aaGJDd2djbVZ3WldGMExDQmtaV3hoZVN3Z2NHRjFjMlZrWEhKY2JpQWdJQ0FnSUNBZ0x5OXpaV3hsWTNSdmNpd2dkR0Z5WjJWMExDQnBiblJsY25aaGJDd2djR0YxYzJWa1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dGeVozVnRaVzUwY3k1c1pXNW5kR2dnUFQwOUlEUWdmSHdnWVhKbmRXMWxiblJ6TG14bGJtZDBhQ0E5UFQwZ05Ta2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFZ6WldRZ1BTQWhJWEpsY0dWaGREdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVndaV0YwSUQwZ1kyTXViV0ZqY204dVVrVlFSVUZVWDBaUFVrVldSVkk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JsYkdGNUlEMGdNRHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdOakxtRnpjMlZ5ZEVsRUtIUmhjbWRsZEN3Z01UVXdNaWs3WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCMFlYSm5aWFJKWkNBOUlIUmhjbWRsZEM1ZmFXUTdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tDRjBZWEpuWlhSSlpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdGeVoyVjBMbDlmYVc1emRHRnVZMlZKWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdZMk11ZDJGeWJrbEVLREUxTVRNcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR0Z5WjJWMFNXUWdQU0IwWVhKblpYUXVYMmxrSUQwZ2RHRnlaMlYwTGw5ZmFXNXpkR0Z1WTJWSlpEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxtVnljbTl5U1VRb01UVXhNQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUdWc1pXMWxiblFnUFNCMGFHbHpMbDlvWVhOb1JtOXlWR2x0WlhKelczUmhjbWRsZEVsa1hUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lXVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdTWE1nZEdocGN5QjBhR1VnTVhOMElHVnNaVzFsYm5RZ1B5QlVhR1Z1SUhObGRDQjBhR1VnY0dGMWMyVWdiR1YyWld3Z2RHOGdZV3hzSUhSb1pTQmpZV3hzWW1GamExOW1ibk1nYjJZZ2RHaHBjeUIwWVhKblpYUmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZENBOUlFaGhjMmhVYVcxbGNrVnVkSEo1TG1kbGRDaHVkV3hzTENCMFlYSm5aWFFzSURBc0lHNTFiR3dzSUc1MWJHd3NJSEJoZFhObFpDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11WDJGeWNtRjVSbTl5VkdsdFpYSnpMbkIxYzJnb1pXeGxiV1Z1ZENrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMmhoYzJoR2IzSlVhVzFsY25OYmRHRnlaMlYwU1dSZElEMGdaV3hsYldWdWREdGNjbHh1SUNBZ0lDQWdJQ0I5SUdWc2MyVWdhV1lnS0dWc1pXMWxiblF1Y0dGMWMyVmtJQ0U5UFNCd1lYVnpaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RFMU1URXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlIUnBiV1Z5TENCcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwTG5ScGJXVnljeUE5UFNCdWRXeHNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUXVkR2x0WlhKeklEMGdXMTA3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLR2tnUFNBd095QnBJRHdnWld4bGJXVnVkQzUwYVcxbGNuTXViR1Z1WjNSb095QXJLMmtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1Z5SUQwZ1pXeGxiV1Z1ZEM1MGFXMWxjbk5iYVYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdsdFpYSWdKaVlnWTJGc2JHSmhZMnNnUFQwOUlIUnBiV1Z5TGw5allXeHNZbUZqYXlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxteHZaMGxFS0RFMU1EY3NJSFJwYldWeUxtZGxkRWx1ZEdWeWRtRnNLQ2tzSUdsdWRHVnlkbUZzS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0IwYVcxbGNpNWZhVzUwWlhKMllXd2dQU0JwYm5SbGNuWmhiRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200N1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFJwYldWeUlEMGdRMkZzYkdKaFkydFVhVzFsY2k1blpYUW9LVHRjY2x4dUlDQWdJQ0FnSUNCMGFXMWxjaTVwYm1sMFYybDBhRU5oYkd4aVlXTnJLSFJvYVhNc0lHTmhiR3hpWVdOckxDQjBZWEpuWlhRc0lHbHVkR1Z5ZG1Gc0xDQnlaWEJsWVhRc0lHUmxiR0Y1S1R0Y2NseHVJQ0FnSUNBZ0lDQmxiR1Z0Wlc1MExuUnBiV1Z5Y3k1d2RYTm9LSFJwYldWeUtUdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgyTjFjbkpsYm5SVVlYSm5aWFFnUFQwOUlHVnNaVzFsYm5RZ0ppWWdkR2hwY3k1ZlkzVnljbVZ1ZEZSaGNtZGxkRk5oYkhaaFoyVmtLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgyTjFjbkpsYm5SVVlYSm5aWFJUWVd4MllXZGxaQ0E5SUdaaGJITmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVYSEpjYmlBZ0lDQWdLaUJUWTJobFpIVnNaWE1nZEdobElIVndaR0YwWlNCallXeHNZbUZqYXlCbWIzSWdZU0JuYVhabGJpQjBZWEpuWlhRc1hISmNiaUFnSUNBZ0tpQkVkWEpwYm1jZ1pYWmxjbmtnWm5KaGJXVWdZV1owWlhJZ2MyTm9aV1IxYkdVZ2MzUmhjblJsWkN3Z2RHaGxJRndpZFhCa1lYUmxYQ0lnWm5WdVkzUnBiMjRnYjJZZ2RHRnlaMlYwSUhkcGJHd2dZbVVnYVc1MmIydGxaQzVjY2x4dUlDQWdJQ0FxSUNFamVtaGNjbHh1SUNBZ0lDQXFJT1M5ditlVXFPYU1oK1d1bXVlYWhPUzhtT1dGaU9lNnArUzR1dWFNaCtXdW11ZWFoT1d2dWVpeG9laXV2dWU5cmlCMWNHUmhkR1VnNWE2YTVwZTI1Wm1vNDRDQ1hISmNiaUFnSUNBZ0tpQjFjR1JoZEdVZzVhNmE1cGUyNVptbzVxK1A1TGlBNWJpbjZZTzk1THlhNktLcjZLZW01WStSNzd5TTZLZW01WStSNXBlMjZJZXE1WXFvNkxDRDU1U281b3lINWE2YTVhKzU2TEdoNTVxRUlGd2lkWEJrWVhSbFhDSWc1WWU5NXBXdzQ0Q0NYSEpjYmlBZ0lDQWdLaURrdkpqbGhZam51cWZubW9UbGdMem90b3Jrdlk3dnZJemxycHJtbDdibG1ham9vcXZvcDZibGo1SG5tb1RvdG9ybWw2bmpnSUpjY2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnYzJOb1pXUjFiR1ZWY0dSaGRHVmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjBZWEpuWlhSY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1RuVnRZbVZ5ZlNCd2NtbHZjbWwwZVZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0Q2IyOXNaV0Z1ZlNCd1lYVnpaV1JjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYzJOb1pXUjFiR1ZWY0dSaGRHVTZJR1oxYm1OMGFXOXVLSFJoY21kbGRDd2djSEpwYjNKcGRIa3NJSEJoZFhObFpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjBZWEpuWlhSSlpDQTlJSFJoY21kbGRDNWZhV1E3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0YwWVhKblpYUkpaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHRnlaMlYwTGw5ZmFXNXpkR0Z1WTJWSlpDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnWTJNdWQyRnlia2xFS0RFMU1UTXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdGeVoyVjBTV1FnUFNCMFlYSm5aWFF1WDJsa0lEMGdkR0Z5WjJWMExsOWZhVzV6ZEdGdVkyVkpaRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbVZ5Y205eVNVUW9NVFV4TUNrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHaGhjMmhGYkdWdFpXNTBJRDBnZEdocGN5NWZhR0Z6YUVadmNsVndaR0YwWlhOYmRHRnlaMlYwU1dSZE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNob1lYTm9SV3hsYldWdWRDQW1KaUJvWVhOb1JXeGxiV1Z1ZEM1bGJuUnllU2w3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQzh2SUdOb1pXTnJJR2xtSUhCeWFXOXlhWFI1SUdoaGN5QmphR0Z1WjJWa1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaG9ZWE5vUld4bGJXVnVkQzVsYm5SeWVTNXdjbWx2Y21sMGVTQWhQVDBnY0hKcGIzSnBkSGtwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJvYVhNdVgzVndaR0YwWlVoaGMyaE1iMk5yWldRcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxteHZaMGxFS0RFMU1EWXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHaGhjMmhGYkdWdFpXNTBMbVZ1ZEhKNUxtMWhjbXRsWkVadmNrUmxiR1YwYVc5dUlEMGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYUdGemFFVnNaVzFsYm5RdVpXNTBjbmt1Y0dGMWMyVmtJRDBnY0dGMWMyVmtPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5Ymp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWxiSE5sZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQzh2SUhkcGJHd2dZbVVnWVdSa1pXUWdZV2RoYVc0Z2IzVjBjMmxrWlNCcFppQW9hR0Z6YUVWc1pXMWxiblFwTGx4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWRXNXpZMmhsWkhWc1pWVndaR0YwWlNoMFlYSm5aWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVpXeHpaWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdoaGMyaEZiR1Z0Wlc1MExtVnVkSEo1TG0xaGNtdGxaRVp2Y2tSbGJHVjBhVzl1SUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCb1lYTm9SV3hsYldWdWRDNWxiblJ5ZVM1d1lYVnpaV1FnUFNCd1lYVnpaV1E3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnNhWE4wUld4bGJXVnVkQ0E5SUV4cGMzUkZiblJ5ZVM1blpYUW9kR0Z5WjJWMExDQndjbWx2Y21sMGVTd2djR0YxYzJWa0xDQm1ZV3h6WlNrN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhCd1RHbHpkRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdMeThnYlc5emRDQnZaaUIwYUdVZ2RYQmtZWFJsY3lCaGNtVWdaMjlwYm1jZ2RHOGdZbVVnTUN3Z2RHaGhkQ2R6SUhkaGVTQjBhR1Z5WlZ4eVhHNGdJQ0FnSUNBZ0lDOHZJR2x6SUdGdUlITndaV05wWVd3Z2JHbHpkQ0JtYjNJZ2RYQmtZWFJsY3lCM2FYUm9JSEJ5YVc5eWFYUjVJREJjY2x4dUlDQWdJQ0FnSUNCcFppQW9jSEpwYjNKcGRIa2dQVDA5SURBcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NIQk1hWE4wSUQwZ2RHaHBjeTVmZFhCa1lYUmxjekJNYVhOME8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDloY0hCbGJtUkpiaWh3Y0V4cGMzUXNJR3hwYzNSRmJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIQndUR2x6ZENBOUlIQnlhVzl5YVhSNUlEd2dNQ0EvSUhSb2FYTXVYM1Z3WkdGMFpYTk9aV2RNYVhOMElEb2dkR2hwY3k1ZmRYQmtZWFJsYzFCdmMweHBjM1E3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgzQnlhVzl5YVhSNVNXNG9jSEJNYVhOMExDQnNhWE4wUld4bGJXVnVkQ3dnY0hKcGIzSnBkSGtwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OTFjR1JoZEdVZ2FHRnphQ0JsYm5SeWVTQm1iM0lnY1hWcFkyc2dZV05qWlhOelhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmFHRnphRVp2Y2xWd1pHRjBaWE5iZEdGeVoyVjBTV1JkSUQwZ1NHRnphRlZ3WkdGMFpVVnVkSEo1TG1kbGRDaHdjRXhwYzNRc0lHeHBjM1JGYkdWdFpXNTBMQ0IwWVhKblpYUXNJRzUxYkd3cE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzVjY2x4dUlDQWdJQ0FxSUZWdWMyTm9aV1IxYkdWeklHRWdZMkZzYkdKaFkyc2dabTl5SUdFZ1kyRnNiR0poWTJzZ1lXNWtJR0VnWjJsMlpXNGdkR0Z5WjJWMExseHlYRzRnSUNBZ0lDb2dTV1lnZVc5MUlIZGhiblFnZEc4Z2RXNXpZMmhsWkhWc1pTQjBhR1VnWENKMWNHUmhkR1ZjSWl3Z2RYTmxJR0IxYm5OamFHVmtkV3hsVlhCa1lYUmxLQ2xnWEhKY2JpQWdJQ0FnS2lBaEkzcG9YSEpjYmlBZ0lDQWdLaURsajVibXRvam1qSWZscnBybHI3bm9zYUhscnBybWw3YmxtYWpqZ0lKY2NseHVJQ0FnSUNBcUlPV21ndWFlbk9tY2dPaW1nZVdQbHVhMmlDQjFjR1JoZEdVZzVhNmE1cGUyNVptbzc3eU02SyszNUwyLzU1U29JSFZ1YzJOb1pXUjFiR1ZWY0dSaGRHVW9LZU9BZ2x4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCMWJuTmphR1ZrZFd4bFhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwWjFibU4wYVc5dWZTQmpZV3hzWW1GamF5QlVhR1VnWTJGc2JHSmhZMnNnZEc4Z1ltVWdkVzV6WTJobFpIVnNaV1JjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IwWVhKblpYUWdWR2hsSUhSaGNtZGxkQ0JpYjNWdVpDQjBieUIwYUdVZ1kyRnNiR0poWTJzdVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIVnVjMk5vWldSMWJHVTZJR1oxYm1OMGFXOXVJQ2hqWVd4c1ltRmpheXdnZEdGeVoyVjBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0x5OWpZV3hzWW1GamF5d2dkR0Z5WjJWMFhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dklHVjRjR3hwWTJsMGVTQm9ZVzVrYkdVZ2JtbHNJR0Z5WjNWdFpXNTBjeUIzYUdWdUlISmxiVzkyYVc1bklHRnVJRzlpYW1WamRGeHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHRnlaMlYwSUh4OElDRmpZV3hzWW1GamF5bGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWVhKblpYUkpaQ0E5SUhSaGNtZGxkQzVmYVdRN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFJKWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR0Z5WjJWMExsOWZhVzV6ZEdGdVkyVkpaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtERTFNVE1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwU1dRZ1BTQjBZWEpuWlhRdVgybGtJRDBnZEdGeVoyVjBMbDlmYVc1emRHRnVZMlZKWkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTVRVeE1DazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSFpoY2lCelpXeG1JRDBnZEdocGN5d2daV3hsYldWdWRDQTlJSE5sYkdZdVgyaGhjMmhHYjNKVWFXMWxjbk5iZEdGeVoyVjBTV1JkTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdFpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFXMWxjbk1nUFNCbGJHVnRaVzUwTG5ScGJXVnljenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5S0haaGNpQnBJRDBnTUN3Z2JHa2dQU0IwYVcxbGNuTXViR1Z1WjNSb095QnBJRHdnYkdrN0lHa3JLeWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMllYSWdkR2x0WlhJZ1BTQjBhVzFsY25OYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1kyRnNiR0poWTJzZ1BUMDlJSFJwYldWeUxsOWpZV3hzWW1GamF5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2dvZEdsdFpYSWdQVDA5SUdWc1pXMWxiblF1WTNWeWNtVnVkRlJwYldWeUtTQW1KaUFvSVdWc1pXMWxiblF1WTNWeWNtVnVkRlJwYldWeVUyRnNkbUZuWldRcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1ZzWlcxbGJuUXVZM1Z5Y21WdWRGUnBiV1Z5VTJGc2RtRm5aV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCMGFXMWxjbk11YzNCc2FXTmxLR2tzSURFcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUVOaGJHeGlZV05yVkdsdFpYSXVjSFYwS0hScGJXVnlLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQXZMM1Z3WkdGMFpTQjBhVzFsY2tsdVpHVjRJR2x1SUdOaGMyVWdkMlVnWVhKbElHbHVJSFJwWTJzN0xDQnNiMjl3YVc1bklHOTJaWElnZEdobElHRmpkR2x2Ym5OY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb1pXeGxiV1Z1ZEM1MGFXMWxja2x1WkdWNElENDlJR2twSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1MGFXMWxja2x1WkdWNExTMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvZEdsdFpYSnpMbXhsYm1kMGFDQTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnBaaUFvYzJWc1ppNWZZM1Z5Y21WdWRGUmhjbWRsZENBOVBUMGdaV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2MyVnNaaTVmWTNWeWNtVnVkRlJoY21kbGRGTmhiSFpoWjJWa0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZTQmxiSE5sSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSE5sYkdZdVgzSmxiVzkyWlVoaGMyaEZiR1Z0Wlc1MEtHVnNaVzFsYm5RcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcUlGeHlYRzRnSUNBZ0lDb2dJU05sYmlCVmJuTmphR1ZrZFd4bGN5QjBhR1VnZFhCa1lYUmxJR05oYkd4aVlXTnJJR1p2Y2lCaElHZHBkbVZ1SUhSaGNtZGxkQzVjY2x4dUlDQWdJQ0FxSUNFamVtZ2c1WStXNXJhSTVveUg1YTZhNWErNTZMR2g1NXFFSUhWd1pHRjBaU0RscnBybWw3YmxtYWpqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2RXNXpZMmhsWkhWc1pWVndaR0YwWlZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0UFltcGxZM1I5SUhSaGNtZGxkQ0JVYUdVZ2RHRnlaMlYwSUhSdklHSmxJSFZ1YzJOb1pXUjFiR1ZrTGx4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCMWJuTmphR1ZrZFd4bFZYQmtZWFJsT2lCbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFFwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJqdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RHRnlaMlYwU1dRZ1BTQjBZWEpuWlhRdVgybGtPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR0Z5WjJWMFNXUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQzVmWDJsdWMzUmhibU5sU1dRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNUpSQ2d4TlRFektUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRFbGtJRDBnZEdGeVoyVjBMbDlwWkNBOUlIUmhjbWRsZEM1ZlgybHVjM1JoYm1ObFNXUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NWxjbkp2Y2tsRUtERTFNVEFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdaV3hsYldWdWRDQTlJSFJvYVhNdVgyaGhjMmhHYjNKVmNHUmhkR1Z6VzNSaGNtZGxkRWxrWFR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmZFhCa1lYUmxTR0Z6YUV4dlkydGxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1bGJuUnllUzV0WVhKclpXUkdiM0pFWld4bGRHbHZiaUE5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMGdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXMXZkbVZWY0dSaGRHVkdjbTl0U0dGemFDaGxiR1Z0Wlc1MExtVnVkSEo1S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcUlGeHlYRzRnSUNBZ0lDb2dJU05sYmx4eVhHNGdJQ0FnSUNvZ1ZXNXpZMmhsWkhWc1pYTWdZV3hzSUhOamFHVmtkV3hsWkNCallXeHNZbUZqYTNNZ1ptOXlJR0VnWjJsMlpXNGdkR0Z5WjJWMExseHlYRzRnSUNBZ0lDb2dWR2hwY3lCaGJITnZJR2x1WTJ4MVpHVnpJSFJvWlNCY0luVndaR0YwWlZ3aUlHTmhiR3hpWVdOckxseHlYRzRnSUNBZ0lDb2dJU042YUNEbGo1Ym10b2ptaklmbHJwcmxyN25vc2FIbm1vVG1pWURtbklubHJwcm1sN2JsbWFqdnZJemxqSVhtaTZ3Z2RYQmtZWFJsSU9XdW11YVh0dVdacU9PQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQjFibk5qYUdWa2RXeGxRV3hzUm05eVZHRnlaMlYwWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTA5aWFtVmpkSDBnZEdGeVoyVjBJRlJvWlNCMFlYSm5aWFFnZEc4Z1ltVWdkVzV6WTJobFpIVnNaV1F1WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhWdWMyTm9aV1IxYkdWQmJHeEdiM0pVWVhKblpYUTZJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjY2x4dUlDQWdJQ0FnSUNBdkx5QmxlSEJzYVdOcGRDQnVkV3hzY0hSeUlHaGhibVJzYVc1blhISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFFwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWVhKblpYUkpaQ0E5SUhSaGNtZGxkQzVmYVdRN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFJKWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR0Z5WjJWMExsOWZhVzV6ZEdGdVkyVkpaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtERTFNVE1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwU1dRZ1BTQjBZWEpuWlhRdVgybGtJRDBnZEdGeVoyVjBMbDlmYVc1emRHRnVZMlZKWkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTVRVeE1DazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUVOMWMzUnZiU0JUWld4bFkzUnZjbk5jY2x4dUlDQWdJQ0FnSUNCMllYSWdaV3hsYldWdWRDQTlJSFJvYVhNdVgyaGhjMmhHYjNKVWFXMWxjbk5iZEdGeVoyVjBTV1JkTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdFpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFXMWxjbk1nUFNCbGJHVnRaVzUwTG5ScGJXVnljenRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hScGJXVnljeTVwYm1SbGVFOW1LR1ZzWlcxbGJuUXVZM1Z5Y21WdWRGUnBiV1Z5S1NBK0lDMHhJQ1ltSUZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0tDRmxiR1Z0Wlc1MExtTjFjbkpsYm5SVWFXMWxjbE5oYkhaaFoyVmtLU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1amRYSnlaVzUwVkdsdFpYSlRZV3gyWVdkbFpDQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQXNJR3dnUFNCMGFXMWxjbk11YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQkRZV3hzWW1GamExUnBiV1Z5TG5CMWRDaDBhVzFsY25OYmFWMHBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUnBiV1Z5Y3k1c1pXNW5kR2dnUFNBd08xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSb2FYTXVYMk4xY25KbGJuUlVZWEpuWlhRZ1BUMDlJR1ZzWlcxbGJuUXBlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZZM1Z5Y21WdWRGUmhjbWRsZEZOaGJIWmhaMlZrSUQwZ2RISjFaVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdmV1ZzYzJWN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5eVpXMXZkbVZJWVhOb1JXeGxiV1Z1ZENobGJHVnRaVzUwS1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ0x5OGdkWEJrWVhSbElITmxiR1ZqZEc5eVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1MWJuTmphR1ZrZFd4bFZYQmtZWFJsS0hSaGNtZGxkQ2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJseHlYRzRnSUNBZ0lDb2dWVzV6WTJobFpIVnNaWE1nWVd4c0lITmphR1ZrZFd4bFpDQmpZV3hzWW1GamEzTWdabkp2YlNCaGJHd2dkR0Z5WjJWMGN5QnBibU5zZFdScGJtY2dkR2hsSUhONWMzUmxiU0JqWVd4c1ltRmphM011UEdKeUx6NWNjbHh1SUNBZ0lDQXFJRmx2ZFNCemFHOTFiR1FnVGtWV1JWSWdZMkZzYkNCMGFHbHpJRzFsZEdodlpDd2dkVzVzWlhOeklIbHZkU0JyYm05M0lIZG9ZWFFnZVc5MUlHRnlaU0JrYjJsdVp5NWNjbHh1SUNBZ0lDQXFJQ0VqZW1oY2NseHVJQ0FnSUNBcUlPV1BsdWEyaU9hSmdPYWNpZVd2dWVpeG9lZWFoT2FKZ09hY2llV3VtdWFYdHVXWnFPKzhqT1dNaGVhTHJPZXp1K2U3bitXdW11YVh0dVdacU9PQWdqeGljaTgrWEhKY2JpQWdJQ0FnS2lEa3VJM25sS2pvc0lQbmxLam1yYVRsaDczbWxiRHZ2SXpwbWFUcG5aN2t2YURub2E3bHJwcmt2YURsbktqbGdacmt1NERrdVlqamdJSmNjbHh1SUNBZ0lDQXFJRUJ0WlhSb2IyUWdkVzV6WTJobFpIVnNaVUZzYkZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCMWJuTmphR1ZrZFd4bFFXeHNPaUJtZFc1amRHbHZiaWdwZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11ZFc1elkyaGxaSFZzWlVGc2JGZHBkR2hOYVc1UWNtbHZjbWwwZVNoall5NVRZMmhsWkhWc1pYSXVVRkpKVDFKSlZGbGZVMWxUVkVWTktUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1WEhKY2JpQWdJQ0FnS2lCVmJuTmphR1ZrZFd4bGN5QmhiR3dnWTJGc2JHSmhZMnR6SUdaeWIyMGdZV3hzSUhSaGNtZGxkSE1nZDJsMGFDQmhJRzFwYm1sdGRXMGdjSEpwYjNKcGRIa3VQR0p5THo1Y2NseHVJQ0FnSUNBcUlGbHZkU0J6YUc5MWJHUWdiMjVzZVNCallXeHNJSFJvYVhNZ2QybDBhQ0JnVUZKSlQxSkpWRmxmVGs5T1gxTlpVMVJGVFY5TlNVNWdJRzl5SUdocFoyaGxjaTVjY2x4dUlDQWdJQ0FxSUNFamVtaGNjbHh1SUNBZ0lDQXFJT1dQbHVhMmlPYUpnT2FjaWVTOG1PV0ZpT2U2cCtlYWhPV0F2T1drcCtTNmp1YU1oK1d1bXVTOG1PV0ZpT2U2cCtlYWhPV3VtdWFYdHVXWnFPT0FnanhpY2k4K1hISmNiaUFnSUNBZ0tpRGt2YURsdXBUb3I2WGxqNnJsajVibXRvamt2SmpsaFlqbnVxZm5tb1RsZ0x6bHBLZmt1bzRnVUZKSlQxSkpWRmxmVGs5T1gxTlpVMVJGVFY5TlNVNGc1NXFFNWE2YTVwZTI1Wm1vNDRDQ1hISmNiaUFnSUNBZ0tpQkFiV1YwYUc5a0lIVnVjMk5vWldSMWJHVkJiR3hYYVhSb1RXbHVVSEpwYjNKcGRIbGNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQnRhVzVRY21sdmNtbDBlU0JVYUdVZ2JXbHVhVzExYlNCd2NtbHZjbWwwZVNCdlppQnpaV3hsWTNSdmNpQjBieUJpWlNCMWJuTmphR1ZrZFd4bFpDNGdWMmhwWTJnZ2JXVmhibk1zSUdGc2JDQnpaV3hsWTNSdmNuTWdkMmhwWTJoY2NseHVJQ0FnSUNBcUlDQWdJQ0FnSUNCd2NtbHZjbWwwZVNCcGN5Qm9hV2RvWlhJZ2RHaGhiaUJ0YVc1UWNtbHZjbWwwZVNCM2FXeHNJR0psSUhWdWMyTm9aV1IxYkdWa0xseHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQjFibk5qYUdWa2RXeGxRV3hzVjJsMGFFMXBibEJ5YVc5eWFYUjVPaUJtZFc1amRHbHZiaWh0YVc1UWNtbHZjbWwwZVNsN1hISmNiaUFnSUNBZ0lDQWdMeThnUTNWemRHOXRJRk5sYkdWamRHOXljMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBMQ0JsYkdWdFpXNTBMQ0JoY25JZ1BTQjBhR2x6TGw5aGNuSmhlVVp2Y2xScGJXVnljenRjY2x4dUlDQWdJQ0FnSUNCbWIzSW9hVDFoY25JdWJHVnVaM1JvTFRFN0lHaytQVEE3SUdrdExTbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnNaVzFsYm5RZ1BTQmhjbkpiYVYwN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkVzV6WTJobFpIVnNaVUZzYkVadmNsUmhjbWRsZENobGJHVnRaVzUwTG5SaGNtZGxkQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QlZjR1JoZEdWeklITmxiR1ZqZEc5eWMxeHlYRzRnSUNBZ0lDQWdJSFpoY2lCbGJuUnllVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdkR1Z0Y0Y5c1pXNW5kR2dnUFNBd08xeHlYRzRnSUNBZ0lDQWdJR2xtS0cxcGJsQnlhVzl5YVhSNUlEd2dNQ2w3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1p2Y2locFBUQTdJR2s4ZEdocGN5NWZkWEJrWVhSbGMwNWxaMHhwYzNRdWJHVnVaM1JvT3lBcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR1Z0Y0Y5c1pXNW5kR2dnUFNCMGFHbHpMbDkxY0dSaGRHVnpUbVZuVEdsemRDNXNaVzVuZEdnN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiblJ5ZVNBOUlIUm9hWE11WDNWd1pHRjBaWE5PWldkTWFYTjBXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWW9aVzUwY25rZ0ppWWdaVzUwY25rdWNISnBiM0pwZEhrZ1BqMGdiV2x1VUhKcGIzSnBkSGtwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWJuTmphR1ZrZFd4bFZYQmtZWFJsS0dWdWRISjVMblJoY21kbGRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb2RHVnRjRjlzWlc1bmRHZ2dQVDBnZEdocGN5NWZkWEJrWVhSbGMwNWxaMHhwYzNRdWJHVnVaM1JvS1Z4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2tyS3p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2FXWW9iV2x1VUhKcGIzSnBkSGtnUEQwZ01DbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHWnZjaWhwUFRBN0lHazhkR2hwY3k1ZmRYQmtZWFJsY3pCTWFYTjBMbXhsYm1kMGFEc2dLWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSbGJYQmZiR1Z1WjNSb0lEMGdkR2hwY3k1ZmRYQmtZWFJsY3pCTWFYTjBMbXhsYm1kMGFEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNUlEMGdkR2hwY3k1ZmRYQmtZWFJsY3pCTWFYTjBXMmxkTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLR1Z1ZEhKNUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVkVzV6WTJobFpIVnNaVlZ3WkdGMFpTaGxiblJ5ZVM1MFlYSm5aWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJsYlhCZmJHVnVaM1JvSUQwOUlIUm9hWE11WDNWd1pHRjBaWE13VEdsemRDNXNaVzVuZEdncFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVNzck8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQm1iM0lvYVQwd095QnBQSFJvYVhNdVgzVndaR0YwWlhOUWIzTk1hWE4wTG14bGJtZDBhRHNnS1h0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWdGNGOXNaVzVuZEdnZ1BTQjBhR2x6TGw5MWNHUmhkR1Z6VUc5elRHbHpkQzVzWlc1bmRHZzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHVnVkSEo1SUQwZ2RHaHBjeTVmZFhCa1lYUmxjMUJ2YzB4cGMzUmJhVjA3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2xtS0dWdWRISjVJQ1ltSUdWdWRISjVMbkJ5YVc5eWFYUjVJRDQ5SUcxcGJsQnlhVzl5YVhSNUtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1MWJuTmphR1ZrZFd4bFZYQmtZWFJsS0dWdWRISjVMblJoY21kbGRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2gwWlcxd1gyeGxibWQwYUNBOVBTQjBhR2x6TGw5MWNHUmhkR1Z6VUc5elRHbHpkQzVzWlc1bmRHZ3BYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwS3lzN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpb2dYSEpjYmlBZ0lDQWdLaUFoSTJWdUlFTm9aV05yY3lCM2FHVjBhR1Z5SUdFZ1kyRnNiR0poWTJzZ1ptOXlJR0VnWjJsMlpXNGdkR0Z5WjJWMElHbHpJSE5qYUdWa2RXeGxaQzVjY2x4dUlDQWdJQ0FxSUNFamVtZ2c1cU9BNXArbDVveUg1YTZhNTVxRTVadWU2TENENVllOTVwV3c1WktNNVp1ZTZMQ0Q1YSs1NkxHaDU3dUU1WkNJNXBpdjVaQ201YTJZNVp5bzVhNmE1cGUyNVptbzQ0Q0NYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR2x6VTJOb1pXUjFiR1ZrWEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCallXeHNZbUZqYXlCVWFHVWdZMkZzYkdKaFkyc2dkRzhnWTJobFkyc3VYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMDlpYW1WamRIMGdkR0Z5WjJWMElGUm9aU0IwWVhKblpYUWdiMllnZEdobElHTmhiR3hpWVdOckxseHlYRzRnSUNBZ0lDb2dRSEpsZEhWeWJpQjdRbTl2YkdWaGJuMGdWSEoxWlNCcFppQjBhR1VnYzNCbFkybG1hV1ZrSUdOaGJHeGlZV05ySUdseklHbHVkbTlyWldRc0lHWmhiSE5sSUdsbUlHNXZkQzVjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYVhOVFkyaGxaSFZzWldRNklHWjFibU4wYVc5dUtHTmhiR3hpWVdOckxDQjBZWEpuWlhRcGUxeHlYRzRnSUNBZ0lDQWdJQzh2YTJWNUxDQjBZWEpuWlhSY2NseHVJQ0FnSUNBZ0lDQXZMM05sYkdWamRHOXlMQ0IwWVhKblpYUmNjbHh1SUNBZ0lDQWdJQ0JqWXk1aGMzTmxjblJKUkNoallXeHNZbUZqYXl3Z01UVXdPQ2s3WEhKY2JpQWdJQ0FnSUNBZ1kyTXVZWE56WlhKMFNVUW9kR0Z5WjJWMExDQXhOVEE1S1R0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnZEdGeVoyVjBTV1FnUFNCMFlYSm5aWFF1WDJsa08xeHlYRzRnSUNBZ0lDQWdJR2xtSUNnaGRHRnlaMlYwU1dRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2FXWWdLSFJoY21kbGRDNWZYMmx1YzNSaGJtTmxTV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lHTmpMbmRoY201SlJDZ3hOVEV6S1R0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lIUmhjbWRsZEVsa0lEMGdkR0Z5WjJWMExsOXBaQ0E5SUhSaGNtZGxkQzVmWDJsdWMzUmhibU5sU1dRN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JqWXk1bGNuSnZja2xFS0RFMU1UQXBPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwSUQwZ2RHaHBjeTVmYUdGemFFWnZjbFJwYldWeWMxdDBZWEpuWlhSSlpGMDdYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doWld4bGJXVnVkQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdabUZzYzJVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWld4bGJXVnVkQzUwYVcxbGNuTWdQVDBnYm5Wc2JDbDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQjBhVzFsY25NZ1BTQmxiR1Z0Wlc1MExuUnBiV1Z5Y3p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnYVNBOUlEQTdJR2tnUENCMGFXMWxjbk11YkdWdVozUm9PeUFySzJrcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFpoY2lCMGFXMWxjaUE5SUNCMGFXMWxjbk5iYVYwN1hISmNibHh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tHTmhiR3hpWVdOcklEMDlQU0IwYVcxbGNpNWZZMkZzYkdKaFkyc3BlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmx4eVhHNGdJQ0FnSUNvZ1VHRjFjMlVnWVd4c0lITmxiR1ZqZEc5eWN5Qm1jbTl0SUdGc2JDQjBZWEpuWlhSekxqeGljaTgrWEhKY2JpQWdJQ0FnS2lCWmIzVWdjMmh2ZFd4a0lFNUZWa1ZTSUdOaGJHd2dkR2hwY3lCdFpYUm9iMlFzSUhWdWJHVnpjeUI1YjNVZ2EyNXZkeUIzYUdGMElIbHZkU0JoY21VZ1pHOXBibWN1WEhKY2JpQWdJQ0FnS2lBaEkzcG9YSEpjYmlBZ0lDQWdLaURtbW9MbGdaem1pWURtbklubHI3bm9zYUhubW9UbWlZRG1uSW5scnBybWw3YmxtYWpqZ0lJOFluSXZQbHh5WEc0Z0lDQWdJQ29nNUxpTjZLYUI2TENENTVTbzZMK1o1TGlxNXBhNTVyT1Y3N3lNNlptazZaMmU1TDJnNTUrbDZZR1Q1TDJnNXEyajVaeW81WUdhNUx1QTVMbUk0NENDWEhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUhCaGRYTmxRV3hzVkdGeVoyVjBjMXh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0J3WVhWelpVRnNiRlJoY21kbGRITTZJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHaHBjeTV3WVhWelpVRnNiRlJoY21kbGRITlhhWFJvVFdsdVVISnBiM0pwZEhrb1kyTXVVMk5vWldSMWJHVnlMbEJTU1U5U1NWUlpYMU5aVTFSRlRTazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmx4eVhHNGdJQ0FnSUNvZ1VHRjFjMlVnWVd4c0lITmxiR1ZqZEc5eWN5Qm1jbTl0SUdGc2JDQjBZWEpuWlhSeklIZHBkR2dnWVNCdGFXNXBiWFZ0SUhCeWFXOXlhWFI1TGlBOFluSXZQbHh5WEc0Z0lDQWdJQ29nV1c5MUlITm9iM1ZzWkNCdmJteDVJR05oYkd3Z2RHaHBjeUIzYVhSb0lHdERRMUJ5YVc5eWFYUjVUbTl1VTNsemRHVnRUV2x1SUc5eUlHaHBaMmhsY2k1Y2NseHVJQ0FnSUNBcUlDRWplbWhjY2x4dUlDQWdJQ0FxSU9hYWd1V0JuT2FKZ09hY2llUzhtT1dGaU9lNnArZWFoT1dBdk9Xa3ArUzZqdWFNaCtXdW11UzhtT1dGaU9lNnArZWFoT1d1bXVhWHR1V1pxT09BZ2p4aWNpOCtYSEpjYmlBZ0lDQWdLaURrdmFEbHVwVG9yNlhsajZybW1vTGxnWnprdkpqbGhZam51cWZubW9UbGdMemxwS2ZrdW80Z1VGSkpUMUpKVkZsZlRrOU9YMU5aVTFSRlRWOU5TVTRnNTVxRTVhNmE1cGUyNVptbzQ0Q0NYSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJSEJoZFhObFFXeHNWR0Z5WjJWMGMxZHBkR2hOYVc1UWNtbHZjbWwwZVZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUcxcGJsQnlhVzl5YVhSNVhISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lIQmhkWE5sUVd4c1ZHRnlaMlYwYzFkcGRHaE5hVzVRY21sdmNtbDBlVG9nWm5WdVkzUnBiMjRnS0cxcGJsQnlhVzl5YVhSNUtTQjdYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHbGtjMWRwZEdoVFpXeGxZM1J2Y25NZ1BTQmJYVHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsekxDQmxiR1Z0Wlc1MExDQnNiMk5CY25KaGVVWnZjbFJwYldWeWN5QTlJSE5sYkdZdVgyRnljbUY1Um05eVZHbHRaWEp6TzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJwTENCc2FUdGNjbHh1SUNBZ0lDQWdJQ0F2THlCRGRYTjBiMjBnVTJWc1pXTjBiM0p6WEhKY2JpQWdJQ0FnSUNBZ1ptOXlLR2tnUFNBd0xDQnNhU0E5SUd4dlkwRnljbUY1Um05eVZHbHRaWEp6TG14bGJtZDBhRHNnYVNBOElHeHBPeUJwS3lzcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwSUQwZ2JHOWpRWEp5WVhsR2IzSlVhVzFsY25OYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHbG1JQ2hsYkdWdFpXNTBLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwTG5CaGRYTmxaQ0E5SUhSeWRXVTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkhOWGFYUm9VMlZzWldOMGIzSnpMbkIxYzJnb1pXeGxiV1Z1ZEM1MFlYSm5aWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdaVzUwY25rN1hISmNiaUFnSUNBZ0lDQWdhV1lvYldsdVVISnBiM0pwZEhrZ1BDQXdLWHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdabTl5S0drOU1Ec2dhVHgwYUdsekxsOTFjR1JoZEdWelRtVm5UR2x6ZEM1c1pXNW5kR2c3SUdrckt5bDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWVTQTlJSFJvYVhNdVgzVndaR0YwWlhOT1pXZE1hWE4wVzJsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0dWdWRISjVLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lvWlc1MGNua3VjSEpwYjNKcGRIa2dQajBnYldsdVVISnBiM0pwZEhrcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmxiblJ5ZVM1d1lYVnpaV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0JwWkhOWGFYUm9VMlZzWldOMGIzSnpMbkIxYzJnb1pXNTBjbmt1ZEdGeVoyVjBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdsbUtHMXBibEJ5YVc5eWFYUjVJRHc5SURBcGUxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbWIzSW9hVDB3T3lCcFBIUm9hWE11WDNWd1pHRjBaWE13VEdsemRDNXNaVzVuZEdnN0lHa3JLeWw3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJuUnllU0E5SUhSb2FYTXVYM1Z3WkdGMFpYTXdUR2x6ZEZ0cFhUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtSUNobGJuUnllU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR1Z1ZEhKNUxuQmhkWE5sWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1J6VjJsMGFGTmxiR1ZqZEc5eWN5NXdkWE5vS0dWdWRISjVMblJoY21kbGRDazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUdadmNpaHBQVEE3SUdrOGRHaHBjeTVmZFhCa1lYUmxjMUJ2YzB4cGMzUXViR1Z1WjNSb095QnBLeXNwZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYm5SeWVTQTlJSFJvYVhNdVgzVndaR0YwWlhOUWIzTk1hWE4wVzJsZE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9aVzUwY25rcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR2xtS0dWdWRISjVMbkJ5YVc5eWFYUjVJRDQ5SUcxcGJsQnlhVzl5YVhSNUtYdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJuUnllUzV3WVhWelpXUWdQU0IwY25WbE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsa2MxZHBkR2hUWld4bFkzUnZjbk11Y0hWemFDaGxiblJ5ZVM1MFlYSm5aWFFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2FXUnpWMmwwYUZObGJHVmpkRzl5Y3p0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVYSEpjYmlBZ0lDQWdLaUJTWlhOMWJXVWdjMlZzWldOMGIzSnpJRzl1SUdFZ2MyVjBJRzltSUhSaGNtZGxkSE11UEdKeUx6NWNjbHh1SUNBZ0lDQXFJRlJvYVhNZ1kyRnVJR0psSUhWelpXWjFiQ0JtYjNJZ2RXNWtiMmx1WnlCaElHTmhiR3dnZEc4Z2NHRjFjMlZCYkd4RFlXeHNZbUZqYTNNdVhISmNiaUFnSUNBZ0tpQWhJM3BvWEhKY2JpQWdJQ0FnS2lEbWdhTGxwSTNtaklmbHJwcm1sYkRudTRUa3VLM21pWURtbklubHI3bm9zYUhubW9UbHJwcm1sN2JsbWFqamdJSThZbkl2UGx4eVhHNGdJQ0FnSUNvZzZMK1o1TGlxNVllOTVwV3c1cGl2SUhCaGRYTmxRV3hzUTJGc2JHSmhZMnR6SU9lYWhPbUFodWFUamVTOW5PT0FnbHh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J5WlhOMWJXVlVZWEpuWlhSelhISmNiaUFnSUNBZ0tpQkFjR0Z5WVcwZ2UwRnljbUY1ZlNCMFlYSm5aWFJ6Vkc5U1pYTjFiV1ZjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnY21WemRXMWxWR0Z5WjJWMGN6b2dablZ1WTNScGIyNGdLSFJoY21kbGRITlViMUpsYzNWdFpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR0Z5WjJWMGMxUnZVbVZ6ZFcxbEtWeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1p2Y2lBb2RtRnlJR2tnUFNBd095QnBJRHdnZEdGeVoyVjBjMVJ2VW1WemRXMWxMbXhsYm1kMGFEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVjbVZ6ZFcxbFZHRnlaMlYwS0hSaGNtZGxkSE5VYjFKbGMzVnRaVnRwWFNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJQ0VqWlc1Y2NseHVJQ0FnSUNBcUlGQmhkWE5sY3lCMGFHVWdkR0Z5WjJWMExqeGljaTgrWEhKY2JpQWdJQ0FnS2lCQmJHd2djMk5vWldSMWJHVmtJSE5sYkdWamRHOXljeTkxY0dSaGRHVWdabTl5SUdFZ1oybDJaVzRnZEdGeVoyVjBJSGR2YmlkMElHSmxJQ2QwYVdOclpXUW5JSFZ1ZEdsc0lIUm9aU0IwWVhKblpYUWdhWE1nY21WemRXMWxaQzQ4WW5JdlBseHlYRzRnSUNBZ0lDb2dTV1lnZEdobElIUmhjbWRsZENCcGN5QnViM1FnY0hKbGMyVnVkQ3dnYm05MGFHbHVaeUJvWVhCd1pXNXpMbHh5WEc0Z0lDQWdJQ29nSVNONmFGeHlYRzRnSUNBZ0lDb2c1cHFDNVlHYzVveUg1YTZhNWErNTZMR2g1NXFFNWE2YTVwZTI1Wm1vNDRDQ1BHSnlMejVjY2x4dUlDQWdJQ0FxSU9hTWgrV3VtdVd2dWVpeG9lZWFoT2FKZ09hY2llV3VtdWFYdHVXWnFPbUR2ZVM4bXVpaXErYWFndVdCbk9PQWdqeGljaTgrWEhKY2JpQWdJQ0FnS2lEbHBvTG1ucHptaklmbHJwcm5tb1Rscjdub3NhSG1zcUhtbklubHJwcm1sN2JsbWFqdnZJemt1NERrdVlqa3VaL2t1STNrdkpybGo1SG5sSi9qZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2NHRjFjMlZVWVhKblpYUmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdUMkpxWldOMGZTQjBZWEpuWlhSY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2NHRjFjMlZVWVhKblpYUTZJR1oxYm1OMGFXOXVJQ2gwWVhKblpYUXBJSHRjY2x4dUlDQWdJQ0FnSUNCall5NWhjM05sY25SSlJDaDBZWEpuWlhRc0lERTFNRE1wTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWVhKblpYUkpaQ0E5SUhSaGNtZGxkQzVmYVdRN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0NGMFlYSm5aWFJKWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCcFppQW9kR0Z5WjJWMExsOWZhVzV6ZEdGdVkyVkpaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1kyTXVkMkZ5YmtsRUtERTFNVE1wTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHRnlaMlYwU1dRZ1BTQjBZWEpuWlhRdVgybGtJRDBnZEdGeVoyVjBMbDlmYVc1emRHRnVZMlZKWkR0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JsYkhObElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG1WeWNtOXlTVVFvTVRVeE1DazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2WTNWemRHOXRaWElnYzJWc1pXTjBiM0p6WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE5sYkdZZ1BTQjBhR2x6TENCY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkQ0E5SUhObGJHWXVYMmhoYzJoR2IzSlVhVzFsY25OYmRHRnlaMlYwU1dSZE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdWc1pXMWxiblF1Y0dGMWMyVmtJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2ZFhCa1lYUmxJR05oYkd4aVlXTnJYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHVnNaVzFsYm5SVmNHUmhkR1VnUFNCelpXeG1MbDlvWVhOb1JtOXlWWEJrWVhSbGMxdDBZWEpuWlhSSlpGMDdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnNaVzFsYm5SVmNHUmhkR1VwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4bGJXVnVkRlZ3WkdGMFpTNWxiblJ5ZVM1d1lYVnpaV1FnUFNCMGNuVmxPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVYSEpjYmlBZ0lDQWdLaUJTWlhOMWJXVnpJSFJvWlNCMFlYSm5aWFF1UEdKeUx6NWNjbHh1SUNBZ0lDQXFJRlJvWlNBbmRHRnlaMlYwSnlCM2FXeHNJR0psSUhWdWNHRjFjMlZrTENCemJ5QmhiR3dnYzJOb1pXUjFiR1VnYzJWc1pXTjBiM0p6TDNWd1pHRjBaU0IzYVd4c0lHSmxJQ2QwYVdOclpXUW5JR0ZuWVdsdUxqeGljaTgrWEhKY2JpQWdJQ0FnS2lCSlppQjBhR1VnZEdGeVoyVjBJR2x6SUc1dmRDQndjbVZ6Wlc1MExDQnViM1JvYVc1bklHaGhjSEJsYm5NdVhISmNiaUFnSUNBZ0tpQWhJM3BvWEhKY2JpQWdJQ0FnS2lEbWdhTGxwSTNtaklmbHJwcmxyN25vc2FIbm1vVG1pWURtbklubHJwcm1sN2JsbWFqamdJSThZbkl2UGx4eVhHNGdJQ0FnSUNvZzVveUg1YTZhNWErNTZMR2g1NXFFNW9tQTVweUo1YTZhNXBlMjVabW81YkNHNTd1bjU3dXQ1YmVsNUwyYzQ0Q0NQR0p5THo1Y2NseHVJQ0FnSUNBcUlPV21ndWFlbk9hTWgrV3VtdWVhaE9XdnVlaXhvZWF5b2VhY2llV3VtdWFYdHVXWnFPKzhqT1M3Z09TNWlPUzVuK1M0amVTOG11V1BrZWVVbitPQWdseHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnlaWE4xYldWVVlYSm5aWFJjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IwWVhKblpYUmNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdjbVZ6ZFcxbFZHRnlaMlYwT2lCbWRXNWpkR2x2YmlBb2RHRnlaMlYwS1NCN1hISmNiaUFnSUNBZ0lDQWdZMk11WVhOelpYSjBTVVFvZEdGeVoyVjBMQ0F4TlRBMEtUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RHRnlaMlYwU1dRZ1BTQjBZWEpuWlhRdVgybGtPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ2hkR0Z5WjJWMFNXUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0hSaGNtZGxkQzVmWDJsdWMzUmhibU5sU1dRcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJR05qTG5kaGNtNUpSQ2d4TlRFektUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJSFJoY21kbGRFbGtJRDBnZEdGeVoyVjBMbDlwWkNBOUlIUmhjbWRsZEM1ZlgybHVjM1JoYm1ObFNXUTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCall5NWxjbkp2Y2tsRUtERTFNVEFwTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QmpkWE4wYjIwZ2MyVnNaV04wYjNKelhISmNiaUFnSUNBZ0lDQWdkbUZ5SUhObGJHWWdQU0IwYUdsekxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCbGJHVnRaVzUwSUQwZ2MyVnNaaTVmYUdGemFFWnZjbFJwYldWeWMxdDBZWEpuWlhSSlpGMDdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHVnNaVzFsYm5RcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEM1d1lYVnpaV1FnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNibHh5WEc0Z0lDQWdJQ0FnSUM4dmRYQmtZWFJsSUdOaGJHeGlZV05yWEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1ZzWlcxbGJuUlZjR1JoZEdVZ1BTQnpaV3htTGw5b1lYTm9SbTl5VlhCa1lYUmxjMXQwWVhKblpYUkpaRjA3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1ZzWlcxbGJuUlZjR1JoZEdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pXeGxiV1Z1ZEZWd1pHRjBaUzVsYm5SeWVTNXdZWFZ6WldRZ1BTQm1ZV3h6WlR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCU1pYUjFjbTV6SUhkb1pYUm9aWElnYjNJZ2JtOTBJSFJvWlNCMFlYSm5aWFFnYVhNZ2NHRjFjMlZrTGx4eVhHNGdJQ0FnSUNvZ0lTTjZhQ0RvdjVUbG01N21qSWZscnBybHI3bm9zYUhubW9UbHJwcm1sN2JsbWFqbW1LL2xrS2JtbW9MbGdaemt1b2JqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ2FYTlVZWEpuWlhSUVlYVnpaV1JjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VDJKcVpXTjBmU0IwWVhKblpYUmNjbHh1SUNBZ0lDQXFJRUJ5WlhSMWNtNGdlMEp2YjJ4bFlXNTlYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJR2x6VkdGeVoyVjBVR0YxYzJWa09pQm1kVzVqZEdsdmJpQW9kR0Z5WjJWMEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTJNdVlYTnpaWEowU1VRb2RHRnlaMlYwTENBeE5UQTFLVHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdkR0Z5WjJWMFNXUWdQU0IwWVhKblpYUXVYMmxrTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdGeVoyVjBTV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYVdZZ0tIUmhjbWRsZEM1ZlgybHVjM1JoYm1ObFNXUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdOakxuZGhjbTVKUkNneE5URXpLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhSaGNtZGxkRWxrSUQwZ2RHRnlaMlYwTGw5cFpDQTlJSFJoY21kbGRDNWZYMmx1YzNSaGJtTmxTV1E3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQmpZeTVsY25KdmNrbEVLREUxTVRBcE8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQXZMeUJEZFhOMGIyMGdjMlZzWldOMGIzSnpYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHVnNaVzFsYm5RZ1BTQjBhR2x6TGw5b1lYTm9SbTl5VkdsdFpYSnpXM1JoY21kbGRFbGtYVHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aV3hsYldWdWRDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z1pXeGxiV1Z1ZEM1d1lYVnpaV1E3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSFpoY2lCbGJHVnRaVzUwVlhCa1lYUmxJRDBnZEdocGN5NWZhR0Z6YUVadmNsVndaR0YwWlhOYmRHRnlaMlYwU1dSZE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNobGJHVnRaVzUwVlhCa1lYUmxLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQmxiR1Z0Wlc1MFZYQmtZWFJsTG1WdWRISjVMbkJoZFhObFpEdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdaaGJITmxPMXh5WEc0Z0lDQWdmU3hjY2x4dWZUdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQWhJMlZ1SUZCeWFXOXlhWFI1SUd4bGRtVnNJSEpsYzJWeWRtVmtJR1p2Y2lCemVYTjBaVzBnYzJWeWRtbGpaWE11WEhKY2JpQXFJQ0VqZW1nZzU3Tzc1N3VmNXB5TjVZcWg1NXFFNUx5WTVZV0k1N3FuNDRDQ1hISmNiaUFxSUVCd2NtOXdaWEowZVNCUVVrbFBVa2xVV1Y5VFdWTlVSVTFjY2x4dUlDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2NseHVJQ29nUUhOMFlYUnBZMXh5WEc0Z0tpOWNjbHh1WTJNdVUyTm9aV1IxYkdWeUxsQlNTVTlTU1ZSWlgxTlpVMVJGVFNBOUlERWdQRHdnTXpFN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxiaUJOYVc1cGJYVnRJSEJ5YVc5eWFYUjVJR3hsZG1Wc0lHWnZjaUIxYzJWeUlITmphR1ZrZFd4cGJtY3VYSEpjYmlBcUlDRWplbWdnNTVTbzVvaTM2TENENWJxbTVweUE1TDJPNUx5WTVZV0k1N3FuNDRDQ1hISmNiaUFxSUVCd2NtOXdaWEowZVNCUVVrbFBVa2xVV1Y5T1QwNWZVMWxUVkVWTlhISmNiaUFxSUVCMGVYQmxJSHRPZFcxaVpYSjlYSEpjYmlBcUlFQnpkR0YwYVdOY2NseHVJQ292WEhKY2JtTmpMbE5qYUdWa2RXeGxjaTVRVWtsUFVrbFVXVjlPVDA1ZlUxbFRWRVZOSUQwZ1kyTXVVMk5vWldSMWJHVnlMbEJTU1U5U1NWUlpYMU5aVTFSRlRTQXJJREU3WEhKY2JseHlYRzV0YjJSMWJHVXVaWGh3YjNKMGN5QTlJR05qTGxOamFHVmtkV3hsY2pzaVhYMD0iXX0=