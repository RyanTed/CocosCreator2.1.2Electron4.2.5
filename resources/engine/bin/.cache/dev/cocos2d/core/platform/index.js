(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./js');
        require('./CCClass');
        require('./CCClassDecorator');
        require('./CCEnum');
        require('./CCObject');
        require('./callbacks-invoker');
        require('./url');
        require('./deserialize');
        require('./instantiate');
        require('./instantiate-jit');
        require('./requiring-frame');
        require('./CCSys');
        require('./CCMacro');
        if (!(CC_EDITOR && Editor.isMainProcess)) {
            require('./CCAssetLibrary');
            require('./CCVisibleRect');
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,