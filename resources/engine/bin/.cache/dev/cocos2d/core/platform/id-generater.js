(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/id-generater.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var NonUuidMark = '.';
        function IdGenerater(category) {
            this.id = 0 | Math.random() * 998;
            this.prefix = category ? category + NonUuidMark : '';
        }
        IdGenerater.prototype.getNewId = function () {
            return this.prefix + ++this.id;
        };
        IdGenerater.global = new IdGenerater('global');
        module.exports = IdGenerater;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,