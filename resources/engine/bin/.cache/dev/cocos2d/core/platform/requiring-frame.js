(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/requiring-frame.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var requiringFrames = [];
        cc._RF = {
            push: function push(module, uuid, script) {
                if (script === undefined) {
                    script = uuid;
                    uuid = '';
                }
                requiringFrames.push({
                    uuid: uuid,
                    script: script,
                    module: module,
                    exports: module.exports,
                    beh: null
                });
            },
            pop: function pop() {
                var frameInfo = requiringFrames.pop();
                var module = frameInfo.module;
                var exports = module.exports;
                if (exports === frameInfo.exports) {
                    for (var anyKey in exports) {
                        return;
                    }
                    module.exports = exports = frameInfo.cls;
                }
            },
            peek: function peek() {
                return requiringFrames[requiringFrames.length - 1];
            }
        };
        if (CC_EDITOR) {
            cc._RF.reset = function () {
                requiringFrames = [];
            };
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInJlcXVpcmluZy1mcmFtZS5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvY29yZS9wbGF0Zm9ybS9yZXF1aXJpbmctZnJhbWUuanMiXSwibmFtZXMiOlsicmVxdWlyaW5nRnJhbWVzIiwiY2MiLCJfUkYiLCJwdXNoIiwibW9kdWxlIiwidXVpZCIsInNjcmlwdCIsInVuZGVmaW5lZCIsImV4cG9ydHMiLCJiZWgiLCJwb3AiLCJmcmFtZUluZm8iLCJhbnlLZXkiLCJjbHMiLCJwZWVrIiwibGVuZ3RoIiwiQ0NfRURJVE9SIiwicmVzZXQiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTBCQSxJQUFJQSxlQUFBQSxHQUFrQixFQUF0QjtRQUVBQyxFQUFBQSxDQUFHQyxHQUFIRCxHQUFTO0FBQUEsWUFDTEUsSUFBQUEsRUFBTSxTQUFBLElBQUEsQ0FBVUMsTUFBVixFQUFrQkMsSUFBbEIsRUFBd0JDLE1BQXhCLEVBQWdDO0FBQUEsZ0JBQ2xDLElBQUlBLE1BQUFBLEtBQVdDLFNBQWYsRUFBMEI7QUFBQSxvQkFDdEJELE1BQUFBLEdBQVNELElBQVRDLENBRHNCO0FBQUEsb0JBRXRCRCxJQUFBQSxHQUFPLEVBQVBBLENBRnNCO0FBQUEsaUJBRFE7QUFBQSxnQkFLbENMLGVBQUFBLENBQWdCRyxJQUFoQkgsQ0FBcUI7QUFBQSxvQkFDakJLLElBQUFBLEVBQU1BLElBRFc7QUFBQSxvQkFFakJDLE1BQUFBLEVBQVFBLE1BRlM7QUFBQSxvQkFHakJGLE1BQUFBLEVBQVFBLE1BSFM7QUFBQSxvQkFJakJJLE9BQUFBLEVBQVNKLE1BQUFBLENBQU9JLE9BSkM7QUFBQSxvQkFLakJDLEdBQUFBLEVBQUssSUFMWTtBQUFBLGlCQUFyQlQsRUFMa0M7QUFBQSxhQURqQztBQUFBLFlBY0xVLEdBQUFBLEVBQUssU0FBQSxHQUFBLEdBQVk7QUFBQSxnQkFDYixJQUFJQyxTQUFBQSxHQUFZWCxlQUFBQSxDQUFnQlUsR0FBaEJWLEVBQWhCLENBRGE7QUFBQSxnQkFHYixJQUFJSSxNQUFBQSxHQUFTTyxTQUFBQSxDQUFVUCxNQUF2QixDQUhhO0FBQUEsZ0JBSWIsSUFBSUksT0FBQUEsR0FBVUosTUFBQUEsQ0FBT0ksT0FBckIsQ0FKYTtBQUFBLGdCQUtiLElBQUlBLE9BQUFBLEtBQVlHLFNBQUFBLENBQVVILE9BQTFCLEVBQW1DO0FBQUEsb0JBQy9CLFNBQVNJLE1BQVQsSUFBbUJKLE9BQW5CLEVBQTRCO0FBQUEsd0JBRXhCLE9BRndCO0FBQUEscUJBREc7QUFBQSxvQkFNL0JKLE1BQUFBLENBQU9JLE9BQVBKLEdBQWlCSSxPQUFBQSxHQUFVRyxTQUFBQSxDQUFVRSxHQUFyQ1QsQ0FOK0I7QUFBQSxpQkFMdEI7QUFBQSxhQWRaO0FBQUEsWUE0QkxVLElBQUFBLEVBQU0sU0FBQSxJQUFBLEdBQVk7QUFBQSxnQkFDZCxPQUFPZCxlQUFBQSxDQUFnQkEsZUFBQUEsQ0FBZ0JlLE1BQWhCZixHQUF5QixDQUF6Q0EsQ0FBUCxDQURjO0FBQUEsYUE1QmI7QUFBQSxTQUFUQztRQWlDQSxJQUFJZSxTQUFKLEVBQWU7QUFBQSxZQUNYZixFQUFBQSxDQUFHQyxHQUFIRCxDQUFPZ0IsS0FBUGhCLEdBQWUsWUFBWTtBQUFBLGdCQUN2QkQsZUFBQUEsR0FBa0IsRUFBbEJBLENBRHVCO0FBQUEsYUFBM0JDLENBRFc7QUFBQSIsImZpbGUiOiJyZXF1aXJpbmctZnJhbWUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG52YXIgcmVxdWlyaW5nRnJhbWVzID0gW107ICAvLyB0aGUgcmVxdWlyaW5nIGZyYW1lIGluZm9zXHJcblxyXG5jYy5fUkYgPSB7XHJcbiAgICBwdXNoOiBmdW5jdGlvbiAobW9kdWxlLCB1dWlkLCBzY3JpcHQpIHtcclxuICAgICAgICBpZiAoc2NyaXB0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgc2NyaXB0ID0gdXVpZDtcclxuICAgICAgICAgICAgdXVpZCA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXF1aXJpbmdGcmFtZXMucHVzaCh7XHJcbiAgICAgICAgICAgIHV1aWQ6IHV1aWQsXHJcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0LFxyXG4gICAgICAgICAgICBtb2R1bGU6IG1vZHVsZSxcclxuICAgICAgICAgICAgZXhwb3J0czogbW9kdWxlLmV4cG9ydHMsICAgIC8vIG9yaWdpbmFsIGV4cG9ydHNcclxuICAgICAgICAgICAgYmVoOiBudWxsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgcG9wOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGZyYW1lSW5mbyA9IHJlcXVpcmluZ0ZyYW1lcy5wb3AoKTtcclxuICAgICAgICAvLyBjaGVjayBleHBvcnRzXHJcbiAgICAgICAgdmFyIG1vZHVsZSA9IGZyYW1lSW5mby5tb2R1bGU7XHJcbiAgICAgICAgdmFyIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cztcclxuICAgICAgICBpZiAoZXhwb3J0cyA9PT0gZnJhbWVJbmZvLmV4cG9ydHMpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgYW55S2V5IGluIGV4cG9ydHMpIHtcclxuICAgICAgICAgICAgICAgIC8vIGV4cG9ydGVkXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gYXV0byBleHBvcnQgY29tcG9uZW50XHJcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZyYW1lSW5mby5jbHM7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIHBlZWs6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gcmVxdWlyaW5nRnJhbWVzW3JlcXVpcmluZ0ZyYW1lcy5sZW5ndGggLSAxXTtcclxuICAgIH1cclxufTtcclxuXHJcbmlmIChDQ19FRElUT1IpIHtcclxuICAgIGNjLl9SRi5yZXNldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXF1aXJpbmdGcmFtZXMgPSBbXTtcclxuICAgIH07XHJcbn1cclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnZhciByZXF1aXJpbmdGcmFtZXMgPSBbXTsgLy8gdGhlIHJlcXVpcmluZyBmcmFtZSBpbmZvc1xuXG5jYy5fUkYgPSB7XG4gICAgcHVzaDogZnVuY3Rpb24gcHVzaChtb2R1bGUsIHV1aWQsIHNjcmlwdCkge1xuICAgICAgICBpZiAoc2NyaXB0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNjcmlwdCA9IHV1aWQ7XG4gICAgICAgICAgICB1dWlkID0gJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmVxdWlyaW5nRnJhbWVzLnB1c2goe1xuICAgICAgICAgICAgdXVpZDogdXVpZCxcbiAgICAgICAgICAgIHNjcmlwdDogc2NyaXB0LFxuICAgICAgICAgICAgbW9kdWxlOiBtb2R1bGUsXG4gICAgICAgICAgICBleHBvcnRzOiBtb2R1bGUuZXhwb3J0cywgLy8gb3JpZ2luYWwgZXhwb3J0c1xuICAgICAgICAgICAgYmVoOiBudWxsXG4gICAgICAgIH0pO1xuICAgIH0sXG4gICAgcG9wOiBmdW5jdGlvbiBwb3AoKSB7XG4gICAgICAgIHZhciBmcmFtZUluZm8gPSByZXF1aXJpbmdGcmFtZXMucG9wKCk7XG4gICAgICAgIC8vIGNoZWNrIGV4cG9ydHNcbiAgICAgICAgdmFyIG1vZHVsZSA9IGZyYW1lSW5mby5tb2R1bGU7XG4gICAgICAgIHZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHM7XG4gICAgICAgIGlmIChleHBvcnRzID09PSBmcmFtZUluZm8uZXhwb3J0cykge1xuICAgICAgICAgICAgZm9yICh2YXIgYW55S2V5IGluIGV4cG9ydHMpIHtcbiAgICAgICAgICAgICAgICAvLyBleHBvcnRlZFxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGF1dG8gZXhwb3J0IGNvbXBvbmVudFxuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSBleHBvcnRzID0gZnJhbWVJbmZvLmNscztcbiAgICAgICAgfVxuICAgIH0sXG4gICAgcGVlazogZnVuY3Rpb24gcGVlaygpIHtcbiAgICAgICAgcmV0dXJuIHJlcXVpcmluZ0ZyYW1lc1tyZXF1aXJpbmdGcmFtZXMubGVuZ3RoIC0gMV07XG4gICAgfVxufTtcblxuaWYgKENDX0VESVRPUikge1xuICAgIGNjLl9SRi5yZXNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVxdWlyaW5nRnJhbWVzID0gW107XG4gICAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkluSmxjWFZwY21sdVp5MW1jbUZ0WlM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSnBibWRHY21GdFpYTWlMQ0pqWXlJc0lsOVNSaUlzSW5CMWMyZ2lMQ0p0YjJSMWJHVWlMQ0oxZFdsa0lpd2ljMk55YVhCMElpd2lkVzVrWldacGJtVmtJaXdpWlhod2IzSjBjeUlzSW1KbGFDSXNJbkJ2Y0NJc0ltWnlZVzFsU1c1bWJ5SXNJbUZ1ZVV0bGVTSXNJbU5zY3lJc0luQmxaV3NpTENKc1pXNW5kR2dpTENKRFExOUZSRWxVVDFJaUxDSnlaWE5sZENKZExDSnRZWEJ3YVc1bmN5STZJanM3UVVGQlFUczdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN1FVRXdRa0VzU1VGQlNVRXNhMEpCUVd0Q0xFVkJRWFJDTEVNc1EwRkJNa0k3TzBGQlJUTkNReXhIUVVGSFF5eEhRVUZJTEVkQlFWTTdRVUZEVEVNc1ZVRkJUU3hqUVVGVlF5eE5RVUZXTEVWQlFXdENReXhKUVVGc1FpeEZRVUYzUWtNc1RVRkJlRUlzUlVGQlowTTdRVUZEYkVNc1dVRkJTVUVzVjBGQlYwTXNVMEZCWml4RlFVRXdRanRCUVVOMFFrUXNjVUpCUVZORUxFbEJRVlE3UVVGRFFVRXNiVUpCUVU4c1JVRkJVRHRCUVVOSU8wRkJRMFJNTEhkQ1FVRm5Ra2NzU1VGQmFFSXNRMEZCY1VJN1FVRkRha0pGTEd0Q1FVRk5RU3hKUVVSWE8wRkJSV3BDUXl4dlFrRkJVVUVzVFVGR1V6dEJRVWRxUWtZc2IwSkJRVkZCTEUxQlNGTTdRVUZKYWtKSkxIRkNRVUZUU2l4UFFVRlBTU3hQUVVwRExFVkJTVmM3UVVGRE5VSkRMR2xDUVVGTE8wRkJURmtzVTBGQmNrSTdRVUZQU0N4TFFXSkpPMEZCWTB4RExGTkJRVXNzWlVGQldUdEJRVU5pTEZsQlFVbERMRmxCUVZsWUxHZENRVUZuUWxVc1IwRkJhRUlzUlVGQmFFSTdRVUZEUVR0QlFVTkJMRmxCUVVsT0xGTkJRVk5QTEZWQlFWVlFMRTFCUVhaQ08wRkJRMEVzV1VGQlNVa3NWVUZCVlVvc1QwRkJUMGtzVDBGQmNrSTdRVUZEUVN4WlFVRkpRU3haUVVGWlJ5eFZRVUZWU0N4UFFVRXhRaXhGUVVGdFF6dEJRVU12UWl4cFFrRkJTeXhKUVVGSlNTeE5RVUZVTEVsQlFXMUNTaXhQUVVGdVFpeEZRVUUwUWp0QlFVTjRRanRCUVVOQk8wRkJRMGc3UVVGRFJEdEJRVU5CU2l4dFFrRkJUMGtzVDBGQlVDeEhRVUZwUWtFc1ZVRkJWVWNzVlVGQlZVVXNSMEZCY2tNN1FVRkRTRHRCUVVOS0xFdEJNMEpKTzBGQk5FSk1ReXhWUVVGTkxHZENRVUZaTzBGQlEyUXNaVUZCVDJRc1owSkJRV2RDUVN4blFrRkJaMEpsTEUxQlFXaENMRWRCUVhsQ0xFTkJRWHBETEVOQlFWQTdRVUZEU0R0QlFUbENTU3hEUVVGVU96dEJRV2xEUVN4SlFVRkpReXhUUVVGS0xFVkJRV1U3UVVGRFdHWXNUMEZCUjBNc1IwRkJTQ3hEUVVGUFpTeExRVUZRTEVkQlFXVXNXVUZCV1R0QlFVTjJRbXBDTERCQ1FVRnJRaXhGUVVGc1FqdEJRVU5JTEV0QlJrUTdRVUZIU0NJc0ltWnBiR1VpT2lKeVpYRjFhWEpwYm1jdFpuSmhiV1V1YW5NaUxDSnpiM1Z5WTJWelEyOXVkR1Z1ZENJNld5SXZLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2x4eVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERXpMVEl3TVRZZ1EyaDFhMjl1WnlCVVpXTm9ibTlzYjJkcFpYTWdTVzVqTGx4eVhHNGdRMjl3ZVhKcFoyaDBJQ2hqS1NBeU1ERTNMVEl3TVRnZ1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVYSEpjYmx4eVhHNGdhSFIwY0hNNkx5OTNkM2N1WTI5amIzTXVZMjl0TDF4eVhHNWNjbHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNjbHh1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaVzVuYVc1bElITnZkWEpqWlNCamIyUmxJQ2gwYUdVZ1hDSlRiMlowZDJGeVpWd2lLU3dnWVNCc2FXMXBkR1ZrTEZ4eVhHNGdJSGR2Y214a2QybGtaU3dnY205NVlXeDBlUzFtY21WbExDQnViMjR0WVhOemFXZHVZV0pzWlN3Z2NtVjJiMk5oWW14bElHRnVaQ0J1YjI0dFpYaGpiSFZ6YVhabElHeHBZMlZ1YzJWY2NseHVJSFJ2SUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdmJHVnNlU0IwYnlCa1pYWmxiRzl3SUdkaGJXVnpJRzl1SUhsdmRYSWdkR0Z5WjJWMElIQnNZWFJtYjNKdGN5NGdXVzkxSUhOb1lXeHNYSEpjYmlBZ2JtOTBJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52Wm5SM1lYSmxJR1p2Y2lCa1pYWmxiRzl3YVc1bklHOTBhR1Z5SUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUhSb1lYUW5jMXh5WEc0Z0lIVnpaV1FnWm05eUlHUmxkbVZzYjNCcGJtY2daMkZ0WlhNdUlGbHZkU0JoY21VZ2JtOTBJR2R5WVc1MFpXUWdkRzhnY0hWaWJHbHphQ3dnWkdsemRISnBZblYwWlN4Y2NseHVJQ0J6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2NseHVYSEpjYmlCVWFHVWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdhVzRnZEdocGN5Qk1hV05sYm5ObElFRm5jbVZsYldWdWRDQmhjbVVnYkdsalpXNXpaV1FzSUc1dmRDQnpiMnhrTGx4eVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNjbHh1WEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEhKY2JpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTeGNjbHh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHlYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh5WEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjY2x4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNjbHh1SUZSSVJTQlRUMFpVVjBGU1JTNWNjbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYSEpjYmx4eVhHNTJZWElnY21WeGRXbHlhVzVuUm5KaGJXVnpJRDBnVzEwN0lDQXZMeUIwYUdVZ2NtVnhkV2x5YVc1bklHWnlZVzFsSUdsdVptOXpYSEpjYmx4eVhHNWpZeTVmVWtZZ1BTQjdYSEpjYmlBZ0lDQndkWE5vT2lCbWRXNWpkR2x2YmlBb2JXOWtkV3hsTENCMWRXbGtMQ0J6WTNKcGNIUXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9jMk55YVhCMElEMDlQU0IxYm1SbFptbHVaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYzJOeWFYQjBJRDBnZFhWcFpEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RYVnBaQ0E5SUNjbk8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCeVpYRjFhWEpwYm1kR2NtRnRaWE11Y0hWemFDaDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIVjFhV1E2SUhWMWFXUXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lITmpjbWx3ZERvZ2MyTnlhWEIwTEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J0YjJSMWJHVTZJRzF2WkhWc1pTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pYaHdiM0owY3pvZ2JXOWtkV3hsTG1WNGNHOXlkSE1zSUNBZ0lDOHZJRzl5YVdkcGJtRnNJR1Y0Y0c5eWRITmNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1ltVm9PaUJ1ZFd4c1hISmNiaUFnSUNBZ0lDQWdmU2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNGdJQ0FnY0c5d09pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR1p5WVcxbFNXNW1ieUE5SUhKbGNYVnBjbWx1WjBaeVlXMWxjeTV3YjNBb0tUdGNjbHh1SUNBZ0lDQWdJQ0F2THlCamFHVmpheUJsZUhCdmNuUnpYSEpjYmlBZ0lDQWdJQ0FnZG1GeUlHMXZaSFZzWlNBOUlHWnlZVzFsU1c1bWJ5NXRiMlIxYkdVN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdWNGNHOXlkSE1nUFNCdGIyUjFiR1V1Wlhod2IzSjBjenRjY2x4dUlDQWdJQ0FnSUNCcFppQW9aWGh3YjNKMGN5QTlQVDBnWm5KaGJXVkpibVp2TG1WNGNHOXlkSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWm05eUlDaDJZWElnWVc1NVMyVjVJR2x1SUdWNGNHOXlkSE1wSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDOHZJR1Y0Y0c5eWRHVmtYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNDdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ0x5OGdZWFYwYnlCbGVIQnZjblFnWTI5dGNHOXVaVzUwWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRzF2WkhWc1pTNWxlSEJ2Y25SeklEMGdaWGh3YjNKMGN5QTlJR1p5WVcxbFNXNW1ieTVqYkhNN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJSEJsWldzNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY21WeGRXbHlhVzVuUm5KaGJXVnpXM0psY1hWcGNtbHVaMFp5WVcxbGN5NXNaVzVuZEdnZ0xTQXhYVHRjY2x4dUlDQWdJSDFjY2x4dWZUdGNjbHh1WEhKY2JtbG1JQ2hEUTE5RlJFbFVUMUlwSUh0Y2NseHVJQ0FnSUdOakxsOVNSaTV5WlhObGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQnlaWEYxYVhKcGJtZEdjbUZ0WlhNZ1BTQmJYVHRjY2x4dUlDQWdJSDA3WEhKY2JuMWNjbHh1SWwxOSJdfQ==