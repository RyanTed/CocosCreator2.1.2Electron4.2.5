(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCSys.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var settingPlatform = void 0;
        if (!CC_EDITOR) {
            settingPlatform = window._CCSettings ? _CCSettings.platform : undefined;
        }
        var isBaiduGame = settingPlatform === 'baidugame' || settingPlatform === 'baidugame-subcontext';
        var isVivoGame = settingPlatform === 'qgame';
        var isOppoGame = settingPlatform === 'quickgame';
        var isHuaweiGame = settingPlatform === 'huawei';
        var isJKWGame = settingPlatform === 'jkw-game';
        var _global = typeof window === 'undefined' ? global : window;
        function initSys() {
            cc.sys = {};
            var sys = cc.sys;
            sys.LANGUAGE_ENGLISH = 'en';
            sys.LANGUAGE_CHINESE = 'zh';
            sys.LANGUAGE_FRENCH = 'fr';
            sys.LANGUAGE_ITALIAN = 'it';
            sys.LANGUAGE_GERMAN = 'de';
            sys.LANGUAGE_SPANISH = 'es';
            sys.LANGUAGE_DUTCH = 'du';
            sys.LANGUAGE_RUSSIAN = 'ru';
            sys.LANGUAGE_KOREAN = 'ko';
            sys.LANGUAGE_JAPANESE = 'ja';
            sys.LANGUAGE_HUNGARIAN = 'hu';
            sys.LANGUAGE_PORTUGUESE = 'pt';
            sys.LANGUAGE_ARABIC = 'ar';
            sys.LANGUAGE_NORWEGIAN = 'no';
            sys.LANGUAGE_POLISH = 'pl';
            sys.LANGUAGE_TURKISH = 'tr';
            sys.LANGUAGE_UKRAINIAN = 'uk';
            sys.LANGUAGE_ROMANIAN = 'ro';
            sys.LANGUAGE_BULGARIAN = 'bg';
            sys.LANGUAGE_UNKNOWN = 'unknown';
            sys.OS_IOS = 'iOS';
            sys.OS_ANDROID = 'Android';
            sys.OS_WINDOWS = 'Windows';
            sys.OS_MARMALADE = 'Marmalade';
            sys.OS_LINUX = 'Linux';
            sys.OS_BADA = 'Bada';
            sys.OS_BLACKBERRY = 'Blackberry';
            sys.OS_OSX = 'OS X';
            sys.OS_WP8 = 'WP8';
            sys.OS_WINRT = 'WINRT';
            sys.OS_UNKNOWN = 'Unknown';
            sys.UNKNOWN = -1;
            sys.WIN32 = 0;
            sys.LINUX = 1;
            sys.MACOS = 2;
            sys.ANDROID = 3;
            sys.IPHONE = 4;
            sys.IPAD = 5;
            sys.BLACKBERRY = 6;
            sys.NACL = 7;
            sys.EMSCRIPTEN = 8;
            sys.TIZEN = 9;
            sys.WINRT = 10;
            sys.WP8 = 11;
            sys.MOBILE_BROWSER = 100;
            sys.DESKTOP_BROWSER = 101;
            sys.EDITOR_PAGE = 102;
            sys.EDITOR_CORE = 103;
            sys.WECHAT_GAME = 104;
            sys.QQ_PLAY = 105;
            sys.FB_PLAYABLE_ADS = 106;
            sys.BAIDU_GAME = 107;
            sys.VIVO_GAME = 108;
            sys.OPPO_GAME = 109;
            sys.HUAWEI_GAME = 110;
            sys.XIAOMI_GAME = 111;
            sys.JKW_GAME = 112;
            sys.BROWSER_TYPE_WECHAT = 'wechat';
            sys.BROWSER_TYPE_WECHAT_GAME = 'wechatgame';
            sys.BROWSER_TYPE_WECHAT_GAME_SUB = 'wechatgamesub';
            sys.BROWSER_TYPE_BAIDU_GAME = 'baidugame';
            sys.BROWSER_TYPE_BAIDU_GAME_SUB = 'baidugamesub';
            sys.BROWSER_TYPE_XIAOMI_GAME = 'xiaomigame';
            sys.BROWSER_TYPE_QQ_PLAY = 'qqplay';
            sys.BROWSER_TYPE_ANDROID = 'androidbrowser';
            sys.BROWSER_TYPE_IE = 'ie';
            sys.BROWSER_TYPE_QQ = 'qqbrowser';
            sys.BROWSER_TYPE_MOBILE_QQ = 'mqqbrowser';
            sys.BROWSER_TYPE_UC = 'ucbrowser';
            sys.BROWSER_TYPE_UCBS = 'ucbs';
            sys.BROWSER_TYPE_360 = '360browser';
            sys.BROWSER_TYPE_BAIDU_APP = 'baiduboxapp';
            sys.BROWSER_TYPE_BAIDU = 'baidubrowser';
            sys.BROWSER_TYPE_MAXTHON = 'maxthon';
            sys.BROWSER_TYPE_OPERA = 'opera';
            sys.BROWSER_TYPE_OUPENG = 'oupeng';
            sys.BROWSER_TYPE_MIUI = 'miuibrowser';
            sys.BROWSER_TYPE_FIREFOX = 'firefox';
            sys.BROWSER_TYPE_SAFARI = 'safari';
            sys.BROWSER_TYPE_CHROME = 'chrome';
            sys.BROWSER_TYPE_LIEBAO = 'liebao';
            sys.BROWSER_TYPE_QZONE = 'qzone';
            sys.BROWSER_TYPE_SOUGOU = 'sogou';
            sys.BROWSER_TYPE_UNKNOWN = 'unknown';
            sys.isNative = CC_JSB || CC_RUNTIME;
            sys.isBrowser = (typeof window === 'undefined' ? 'undefined' : _typeof(window)) === 'object' && (typeof document === 'undefined' ? 'undefined' : _typeof(document)) === 'object' && !CC_WECHATGAME && !CC_QQPLAY && !CC_JSB && !CC_RUNTIME && !isBaiduGame;
            sys.glExtension = function (name) {
                if ((CC_WECHATGAME || isBaiduGame) && name === 'OES_texture_float') {
                    return false;
                }
                return !!cc.renderer.device.ext(name);
            };
            sys.getMaxJointMatrixSize = function () {
                if (!sys._maxJointMatrixSize) {
                    var JOINT_MATRICES_SIZE = 50;
                    var LEFT_UNIFORM_SIZE = 10;
                    var gl = cc.game._renderContext;
                    var maxUniforms = Math.floor(gl.getParameter(gl.MAX_VERTEX_UNIFORM_VECTORS) / 4) - LEFT_UNIFORM_SIZE;
                    if (maxUniforms < JOINT_MATRICES_SIZE) {
                        sys._maxJointMatrixSize = 0;
                    } else {
                        sys._maxJointMatrixSize = JOINT_MATRICES_SIZE;
                    }
                }
                return sys._maxJointMatrixSize;
            };
            if (_global.__platform && _global.__platform.getSystemInfo) {
                var _env = _global.__platform.getSystemInfo();
                sys.isNative = _env.isNative;
                sys.isBrowser = _env.isBrowser;
                sys.platform = _env.platform;
                sys.browserType = _env.browserType;
                sys.isMobile = _env.isMobile;
                sys.language = _env.language;
                sys.languageCode = _env.language.toLowerCase();
                sys.os = _env.os;
                sys.osVersion = _env.osVersion;
                sys.osMainVersion = _env.osMainVersion;
                sys.browserVersion = _env.browserVersion;
                sys.windowPixelResolution = _env.windowPixelResolution;
                sys.localStorage = _env.localStorage;
                sys.capabilities = _env.capabilities;
                sys.__audioSupport = _env.audioSupport;
                _global.__platform = undefined;
            } else if (CC_EDITOR && Editor.isMainProcess) {
                sys.isMobile = false;
                sys.platform = sys.EDITOR_CORE;
                sys.language = sys.LANGUAGE_UNKNOWN;
                sys.languageCode = undefined;
                sys.os = {
                    darwin: sys.OS_OSX,
                    win32: sys.OS_WINDOWS,
                    linux: sys.OS_LINUX
                }[process.platform] || sys.OS_UNKNOWN;
                sys.browserType = null;
                sys.browserVersion = null;
                sys.windowPixelResolution = {
                    width: 0,
                    height: 0
                };
                sys.__audioSupport = {};
            } else if (CC_JSB || CC_RUNTIME) {
                var platform = void 0;
                if (isVivoGame) {
                    platform = sys.VIVO_GAME;
                } else if (isOppoGame) {
                    platform = sys.OPPO_GAME;
                } else if (isHuaweiGame) {
                    platform = sys.HUAWEI_GAME;
                } else if (isJKWGame) {
                    platform = sys.JKW_GAME;
                } else {
                    platform = __getPlatform();
                }
                sys.platform = platform;
                sys.isMobile = platform === sys.ANDROID || platform === sys.IPAD || platform === sys.IPHONE || platform === sys.WP8 || platform === sys.TIZEN || platform === sys.BLACKBERRY || platform === sys.XIAOMI_GAME || isVivoGame || isOppoGame || isHuaweiGame || isJKWGame;
                sys.os = __getOS();
                sys.language = __getCurrentLanguage();
                var languageCode;
                if (CC_JSB) {
                    languageCode = __getCurrentLanguageCode();
                }
                sys.languageCode = languageCode ? languageCode.toLowerCase() : undefined;
                sys.osVersion = __getOSVersion();
                sys.osMainVersion = parseInt(sys.osVersion);
                sys.browserType = null;
                sys.browserVersion = null;
                var w = window.innerWidth;
                var h = window.innerHeight;
                var ratio = window.devicePixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys.localStorage = window.localStorage;
                var capabilities;
                capabilities = sys.capabilities = {
                    'canvas': false,
                    'opengl': true,
                    'webp': true
                };
                if (sys.isMobile) {
                    capabilities['accelerometer'] = true;
                    capabilities['touches'] = true;
                } else {
                    capabilities['keyboard'] = true;
                    capabilities['mouse'] = true;
                    capabilities['touches'] = false;
                }
                sys.__audioSupport = {
                    ONLY_ONE: false,
                    WEB_AUDIO: false,
                    DELAY_CREATE_CTX: false,
                    format: ['.mp3']
                };
            } else if (CC_WECHATGAME) {
                var env = wx.getSystemInfoSync();
                sys.isMobile = true;
                sys.platform = sys.WECHAT_GAME;
                sys.language = env.language.substr(0, 2);
                sys.languageCode = env.language.toLowerCase();
                var system = env.system.toLowerCase();
                if (env.platform === 'android') {
                    sys.os = sys.OS_ANDROID;
                } else if (env.platform === 'ios') {
                    sys.os = sys.OS_IOS;
                } else if (env.platform === 'devtools') {
                    sys.isMobile = false;
                    if (system.indexOf('android') > -1) {
                        sys.os = sys.OS_ANDROID;
                    } else if (system.indexOf('ios') > -1) {
                        sys.os = sys.OS_IOS;
                    }
                }
                if (system === 'android p') {
                    system = 'android p 9.0';
                }
                var version = /[\d\.]+/.exec(system);
                sys.osVersion = version ? version[0] : system;
                sys.osMainVersion = parseInt(sys.osVersion);
                if (CC_WECHATGAMESUB) {
                    sys.browserType = sys.BROWSER_TYPE_WECHAT_GAME_SUB;
                } else {
                    sys.browserType = sys.BROWSER_TYPE_WECHAT_GAME;
                }
                sys.browserVersion = env.version;
                var w = env.windowWidth;
                var h = env.windowHeight;
                var ratio = env.pixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys.localStorage = window.localStorage;
                var _supportWebGL = _supportWebp = false;
                try {
                    var _canvas = document.createElement('canvas');
                    _supportWebGL = _canvas.getContext('webgl');
                    _supportWebp = _canvas.toDataURL('image/webp').startsWith('data:image/webp');
                } catch (err) {
                }
                sys.capabilities = {
                    'canvas': true,
                    'opengl': !!_supportWebGL,
                    'webp': _supportWebp
                };
                sys.__audioSupport = {
                    ONLY_ONE: false,
                    WEB_AUDIO: false,
                    DELAY_CREATE_CTX: false,
                    format: ['.mp3']
                };
            } else if (CC_QQPLAY) {
                var env = window['BK']['Director']['queryDeviceInfo']();
                sys.isMobile = true;
                sys.platform = sys.QQ_PLAY;
                sys.language = sys.LANGUAGE_UNKNOWN;
                sys.languageCode = undefined;
                if (env.platform === 'android') {
                    sys.os = sys.OS_ANDROID;
                } else if (env.platform === 'ios') {
                    sys.os = sys.OS_IOS;
                } else {
                    sys.os = sys.OS_UNKNOWN;
                }
                sys.osVersion = env.version;
                sys.osMainVersion = parseInt(sys.osVersion.split('.')[0]);
                sys.browserType = sys.BROWSER_TYPE_QQ_PLAY;
                sys.browserVersion = 0;
                var w = env.screenWidth;
                var h = env.screenHeight;
                var ratio = env.pixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys.localStorage = window.localStorage;
                sys.capabilities = {
                    'canvas': false,
                    'opengl': true,
                    'webp': false
                };
                sys.__audioSupport = {
                    ONLY_ONE: false,
                    WEB_AUDIO: false,
                    DELAY_CREATE_CTX: false,
                    format: ['.mp3']
                };
            } else if (isBaiduGame) {
                var _env2 = __device.getSystemInfo();
                sys.platform = _env2.platform;
                sys.browserType = _env2.browserType;
                sys.isMobile = _env2.isMobile;
                sys.language = _env2.language;
                sys.languageCode = _env2.language.toLowerCase();
                sys.os = _env2.os;
                sys.osVersion = _env2.osVersion;
                sys.osMainVersion = _env2.osMainVersion;
                sys.browserVersion = _env2.browserVersion;
                sys.windowPixelResolution = _env2.windowPixelResolution;
                sys.localStorage = _env2.localStorage;
                sys.capabilities = _env2.capabilities;
                sys.__audioSupport = _env2.audioSupport;
            } else {
                var win = window, nav = win.navigator, doc = document, docEle = doc.documentElement;
                var ua = nav.userAgent.toLowerCase();
                if (CC_EDITOR) {
                    sys.isMobile = false;
                    sys.platform = sys.EDITOR_PAGE;
                } else {
                    sys.isMobile = /mobile|android|iphone|ipad/.test(ua);
                    if (typeof FbPlayableAd !== 'undefined') {
                        sys.platform = sys.FB_PLAYABLE_ADS;
                    } else {
                        sys.platform = sys.isMobile ? sys.MOBILE_BROWSER : sys.DESKTOP_BROWSER;
                    }
                }
                var currLanguage = nav.language;
                currLanguage = currLanguage ? currLanguage : nav.browserLanguage;
                sys.languageCode = currLanguage.toLowerCase();
                currLanguage = currLanguage ? currLanguage.split('-')[0] : sys.LANGUAGE_ENGLISH;
                sys.language = currLanguage;
                var isAndroid = false, iOS = false, osVersion = '', osMainVersion = 0;
                var uaResult = /android (\d+(?:\.\d+)*)/i.exec(ua) || /android (\d+(?:\.\d+)*)/i.exec(nav.platform);
                if (uaResult) {
                    isAndroid = true;
                    osVersion = uaResult[1] || '';
                    osMainVersion = parseInt(osVersion) || 0;
                }
                uaResult = /(iPad|iPhone|iPod).*OS ((\d+_?){2,3})/i.exec(ua);
                if (uaResult) {
                    iOS = true;
                    osVersion = uaResult[2] || '';
                    osMainVersion = parseInt(osVersion) || 0;
                } else if (/(iPhone|iPad|iPod)/.exec(nav.platform)) {
                    iOS = true;
                    osVersion = '';
                    osMainVersion = 0;
                }
                var osName = sys.OS_UNKNOWN;
                if (nav.appVersion.indexOf('Win') !== -1)
                    osName = sys.OS_WINDOWS;
                else if (iOS)
                    osName = sys.OS_IOS;
                else if (nav.appVersion.indexOf('Mac') !== -1)
                    osName = sys.OS_OSX;
                else if (nav.appVersion.indexOf('X11') !== -1 && nav.appVersion.indexOf('Linux') === -1)
                    osName = sys.OS_UNIX;
                else if (isAndroid)
                    osName = sys.OS_ANDROID;
                else if (nav.appVersion.indexOf('Linux') !== -1 || ua.indexOf('ubuntu') !== -1)
                    osName = sys.OS_LINUX;
                sys.os = osName;
                sys.osVersion = osVersion;
                sys.osMainVersion = osMainVersion;
                sys.browserType = sys.BROWSER_TYPE_UNKNOWN;
                (function () {
                    var typeReg1 = /mqqbrowser|micromessenger|qq|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i;
                    var typeReg2 = /qqbrowser|ucbrowser/i;
                    var typeReg3 = /chrome|safari|firefox|trident|opera|opr\/|oupeng/i;
                    var browserTypes = typeReg1.exec(ua);
                    if (!browserTypes)
                        browserTypes = typeReg2.exec(ua);
                    if (!browserTypes)
                        browserTypes = typeReg3.exec(ua);
                    var browserType = browserTypes ? browserTypes[0].toLowerCase() : sys.BROWSER_TYPE_UNKNOWN;
                    if (CC_WECHATGAME)
                        browserType = sys.BROWSER_TYPE_WECHAT_GAME;
                    else if (CC_QQPLAY)
                        browserType = sys.BROWSER_TYPE_QQ_PLAY;
                    else if (browserType === 'micromessenger')
                        browserType = sys.BROWSER_TYPE_WECHAT;
                    else if (browserType === 'safari' && isAndroid)
                        browserType = sys.BROWSER_TYPE_ANDROID;
                    else if (browserType === 'qq' && ua.match(/android.*applewebkit/i))
                        browserType = sys.BROWSER_TYPE_ANDROID;
                    else if (browserType === 'trident')
                        browserType = sys.BROWSER_TYPE_IE;
                    else if (browserType === '360 aphone')
                        browserType = sys.BROWSER_TYPE_360;
                    else if (browserType === 'mxbrowser')
                        browserType = sys.BROWSER_TYPE_MAXTHON;
                    else if (browserType === 'opr/')
                        browserType = sys.BROWSER_TYPE_OPERA;
                    sys.browserType = browserType;
                }());
                sys.browserVersion = '';
                (function () {
                    var versionReg1 = /(mqqbrowser|micromessenger|qq|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i;
                    var versionReg2 = /(qqbrowser|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i;
                    var tmp = ua.match(versionReg1);
                    if (!tmp)
                        tmp = ua.match(versionReg2);
                    sys.browserVersion = tmp ? tmp[4] : '';
                }());
                var w = window.innerWidth || document.documentElement.clientWidth;
                var h = window.innerHeight || document.documentElement.clientHeight;
                var ratio = window.devicePixelRatio || 1;
                sys.windowPixelResolution = {
                    width: ratio * w,
                    height: ratio * h
                };
                sys._checkWebGLRenderMode = function () {
                    if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL)
                        throw new Error('This feature supports WebGL render mode only.');
                };
                var _tmpCanvas1 = document.createElement('canvas');
                var create3DContext = function create3DContext(canvas, opt_attribs, opt_contextType) {
                    if (opt_contextType) {
                        try {
                            return canvas.getContext(opt_contextType, opt_attribs);
                        } catch (e) {
                            return null;
                        }
                    } else {
                        return create3DContext(canvas, opt_attribs, 'webgl') || create3DContext(canvas, opt_attribs, 'experimental-webgl') || create3DContext(canvas, opt_attribs, 'webkit-3d') || create3DContext(canvas, opt_attribs, 'moz-webgl') || null;
                    }
                };
                try {
                    var localStorage = sys.localStorage = win.localStorage;
                    localStorage.setItem('storage', '');
                    localStorage.removeItem('storage');
                    localStorage = null;
                } catch (e) {
                    var warn = function warn() {
                        cc.warnID(5200);
                    };
                    sys.localStorage = {
                        getItem: warn,
                        setItem: warn,
                        removeItem: warn,
                        clear: warn
                    };
                }
                var _supportWebp = _tmpCanvas1.toDataURL('image/webp').startsWith('data:image/webp');
                var _supportCanvas = !!_tmpCanvas1.getContext('2d');
                var _supportWebGL = false;
                if (CC_TEST) {
                    _supportWebGL = false;
                } else if (sys.browserType === sys.BROWSER_TYPE_WECHAT_GAME) {
                    _supportWebGL = true;
                } else if (win.WebGLRenderingContext) {
                    _supportWebGL = true;
                }
                var capabilities = sys.capabilities = {
                    'canvas': _supportCanvas,
                    'opengl': _supportWebGL,
                    'webp': _supportWebp
                };
                if (docEle['ontouchstart'] !== undefined || doc['ontouchstart'] !== undefined || nav.msPointerEnabled)
                    capabilities['touches'] = true;
                if (docEle['onmouseup'] !== undefined)
                    capabilities['mouse'] = true;
                if (docEle['onkeyup'] !== undefined)
                    capabilities['keyboard'] = true;
                if (win.DeviceMotionEvent || win.DeviceOrientationEvent)
                    capabilities['accelerometer'] = true;
                var __audioSupport;
                (function () {
                    var DEBUG = false;
                    var version = sys.browserVersion;
                    var supportWebAudio = sys.browserType !== sys.BROWSER_TYPE_WECHAT_GAME && !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext);
                    __audioSupport = {
                        ONLY_ONE: false,
                        WEB_AUDIO: supportWebAudio,
                        DELAY_CREATE_CTX: false
                    };
                    if (sys.os === sys.OS_IOS) {
                        __audioSupport.USE_LOADER_EVENT = 'loadedmetadata';
                    }
                    if (sys.browserType === sys.BROWSER_TYPE_FIREFOX) {
                        __audioSupport.DELAY_CREATE_CTX = true;
                        __audioSupport.USE_LOADER_EVENT = 'canplay';
                    }
                    if (sys.os === sys.OS_ANDROID) {
                        if (sys.browserType === sys.BROWSER_TYPE_UC) {
                            __audioSupport.ONE_SOURCE = true;
                        }
                    }
                    if (DEBUG) {
                        setTimeout(function () {
                            cc.log('browse type: ' + sys.browserType);
                            cc.log('browse version: ' + version);
                            cc.log('MULTI_CHANNEL: ' + __audioSupport.MULTI_CHANNEL);
                            cc.log('WEB_AUDIO: ' + __audioSupport.WEB_AUDIO);
                            cc.log('AUTOPLAY: ' + __audioSupport.AUTOPLAY);
                        }, 0);
                    }
                }());
                try {
                    if (__audioSupport.WEB_AUDIO) {
                        __audioSupport.context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
                        if (__audioSupport.DELAY_CREATE_CTX) {
                            setTimeout(function () {
                                __audioSupport.context = new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
                            }, 0);
                        }
                    }
                } catch (error) {
                    __audioSupport.WEB_AUDIO = false;
                    cc.logID(5201);
                }
                var formatSupport = [];
                (function () {
                    var audio = document.createElement('audio');
                    if (audio.canPlayType) {
                        var ogg = audio.canPlayType('audio/ogg; codecs="vorbis"');
                        if (ogg)
                            formatSupport.push('.ogg');
                        var mp3 = audio.canPlayType('audio/mpeg');
                        if (mp3)
                            formatSupport.push('.mp3');
                        var wav = audio.canPlayType('audio/wav; codecs="1"');
                        if (wav)
                            formatSupport.push('.wav');
                        var mp4 = audio.canPlayType('audio/mp4');
                        if (mp4)
                            formatSupport.push('.mp4');
                        var m4a = audio.canPlayType('audio/x-m4a');
                        if (m4a)
                            formatSupport.push('.m4a');
                    }
                }());
                __audioSupport.format = formatSupport;
                sys.__audioSupport = __audioSupport;
            }
            sys.NetworkType = {
                NONE: 0,
                LAN: 1,
                WWAN: 2
            };
            sys.getNetworkType = function () {
                return sys.NetworkType.LAN;
            };
            sys.getBatteryLevel = function () {
                return 1;
            };
            sys.garbageCollect = function () {
            };
            sys.restartVM = function () {
            };
            sys.getSafeAreaRect = function () {
                var visibleSize = cc.view.getVisibleSize();
                return cc.rect(0, 0, visibleSize.width, visibleSize.height);
            };
            sys.isObjectValid = function (obj) {
                if (obj) {
                    return true;
                }
                return false;
            };
            sys.dump = function () {
                var self = this;
                var str = '';
                str += 'isMobile : ' + self.isMobile + '\r\n';
                str += 'language : ' + self.language + '\r\n';
                str += 'browserType : ' + self.browserType + '\r\n';
                str += 'browserVersion : ' + self.browserVersion + '\r\n';
                str += 'capabilities : ' + JSON.stringify(self.capabilities) + '\r\n';
                str += 'os : ' + self.os + '\r\n';
                str += 'osVersion : ' + self.osVersion + '\r\n';
                str += 'platform : ' + self.platform + '\r\n';
                str += 'Using ' + (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? 'WEBGL' : 'CANVAS') + ' renderer.' + '\r\n';
                cc.log(str);
            };
            sys.openURL = function (url) {
                if (CC_JSB || CC_RUNTIME) {
                    jsb.openURL(url);
                } else {
                    window.open(url);
                }
            };
            sys.now = function () {
                if (Date.now) {
                    return Date.now();
                } else {
                    return +new Date();
                }
            };
            return sys;
        }
        var sys = cc && cc.sys ? cc.sys : initSys();
        module.exports = sys;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,