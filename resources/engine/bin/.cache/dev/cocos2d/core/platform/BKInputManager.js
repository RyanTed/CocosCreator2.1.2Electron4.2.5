(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/BKInputManager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        if (CC_QQPLAY) {
            var js = require('../platform/js');
            var macro = require('./CCMacro');
            var sys = require('./CCSys');
            var eventManager = require('../event-manager');
            var TOUCH_TIMEOUT = macro.TOUCH_TIMEOUT;
            var bkInputManager = {
                _isRegisterEvent: false,
                _preTouchPoint: cc.v2(0, 0),
                _preTouchPool: [],
                _preTouchPoolPointer: 0,
                _touches: [],
                _touchesIntegerDict: {},
                _indexBitsUsed: 0,
                _maxTouches: 5,
                _getUnUsedIndex: function _getUnUsedIndex() {
                    var temp = this._indexBitsUsed;
                    var now = cc.sys.now();
                    for (var i = 0; i < this._maxTouches; i++) {
                        if (!(temp & 1)) {
                            this._indexBitsUsed |= 1 << i;
                            return i;
                        } else {
                            var touch = this._touches[i];
                            if (now - touch._lastModified > TOUCH_TIMEOUT) {
                                this._removeUsedIndexBit(i);
                                delete this._touchesIntegerDict[touch.getID()];
                                return i;
                            }
                        }
                        temp >>= 1;
                    }
                    return -1;
                },
                _removeUsedIndexBit: function _removeUsedIndexBit(index) {
                    if (index < 0 || index >= this._maxTouches)
                        return;
                    var temp = 1 << index;
                    temp = ~temp;
                    this._indexBitsUsed &= temp;
                },
                _glView: null,
                handleTouchesBegin: function handleTouchesBegin(touches) {
                    var selTouch, index, curTouch, touchID, handleTouches = [], locTouchIntDict = this._touchesIntegerDict, now = sys.now();
                    for (var i = 0, len = touches.length; i < len; i++) {
                        selTouch = touches[i];
                        touchID = selTouch.getID();
                        index = locTouchIntDict[touchID];
                        if (index == null) {
                            var unusedIndex = this._getUnUsedIndex();
                            if (unusedIndex === -1) {
                                cc.logID(2300, unusedIndex);
                                continue;
                            }
                            curTouch = this._touches[unusedIndex] = new cc.Touch(selTouch._point.x, selTouch._point.y, selTouch.getID());
                            curTouch._lastModified = now;
                            curTouch._setPrevPoint(selTouch._prevPoint);
                            locTouchIntDict[touchID] = unusedIndex;
                            handleTouches.push(curTouch);
                        }
                    }
                    if (handleTouches.length > 0) {
                        this._glView._convertTouchesWithScale(handleTouches);
                        var touchEvent = new cc.Event.EventTouch(handleTouches);
                        touchEvent._eventCode = cc.Event.EventTouch.BEGAN;
                        eventManager.dispatchEvent(touchEvent);
                    }
                },
                handleTouchesMove: function handleTouchesMove(touches) {
                    var selTouch, index, touchID, handleTouches = [], locTouches = this._touches, now = sys.now();
                    for (var i = 0, len = touches.length; i < len; i++) {
                        selTouch = touches[i];
                        touchID = selTouch.getID();
                        index = this._touchesIntegerDict[touchID];
                        if (index == null) {
                            continue;
                        }
                        if (locTouches[index]) {
                            locTouches[index]._setPoint(selTouch._point);
                            locTouches[index]._setPrevPoint(selTouch._prevPoint);
                            locTouches[index]._lastModified = now;
                            handleTouches.push(locTouches[index]);
                        }
                    }
                    if (handleTouches.length > 0) {
                        this._glView._convertTouchesWithScale(handleTouches);
                        var touchEvent = new cc.Event.EventTouch(handleTouches);
                        touchEvent._eventCode = cc.Event.EventTouch.MOVED;
                        eventManager.dispatchEvent(touchEvent);
                    }
                },
                handleTouchesEnd: function handleTouchesEnd(touches) {
                    var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
                    if (handleTouches.length > 0) {
                        this._glView._convertTouchesWithScale(handleTouches);
                        var touchEvent = new cc.Event.EventTouch(handleTouches);
                        touchEvent._eventCode = cc.Event.EventTouch.ENDED;
                        eventManager.dispatchEvent(touchEvent);
                    }
                },
                handleTouchesCancel: function handleTouchesCancel(touches) {
                    var handleTouches = this.getSetOfTouchesEndOrCancel(touches);
                    if (handleTouches.length > 0) {
                        this._glView._convertTouchesWithScale(handleTouches);
                        var touchEvent = new cc.Event.EventTouch(handleTouches);
                        touchEvent._eventCode = cc.Event.EventTouch.CANCELLED;
                        eventManager.dispatchEvent(touchEvent);
                    }
                },
                getSetOfTouchesEndOrCancel: function getSetOfTouchesEndOrCancel(touches) {
                    var selTouch, index, touchID, handleTouches = [], locTouches = this._touches, locTouchesIntDict = this._touchesIntegerDict;
                    for (var i = 0, len = touches.length; i < len; i++) {
                        selTouch = touches[i];
                        touchID = selTouch.getID();
                        index = locTouchesIntDict[touchID];
                        if (index == null) {
                            continue;
                        }
                        if (locTouches[index]) {
                            locTouches[index]._setPoint(selTouch._point);
                            locTouches[index]._setPrevPoint(selTouch._prevPoint);
                            handleTouches.push(locTouches[index]);
                            this._removeUsedIndexBit(index);
                            delete locTouchesIntDict[touchID];
                        }
                    }
                    return handleTouches;
                },
                getHTMLElementPosition: function getHTMLElementPosition(element) {
                    var docElem = document.documentElement;
                    var leftOffset = window.pageXOffset - docElem.clientLeft;
                    var topOffset = window.pageYOffset - docElem.clientTop;
                    if (typeof element.getBoundingClientRect === 'function') {
                        var box = element.getBoundingClientRect();
                        return {
                            left: box.left + leftOffset,
                            top: box.top + topOffset,
                            width: box.width,
                            height: box.height
                        };
                    } else {
                        if (element instanceof HTMLCanvasElement) {
                            return {
                                left: leftOffset,
                                top: topOffset,
                                width: element.width,
                                height: element.height
                            };
                        } else {
                            return {
                                left: leftOffset,
                                top: topOffset,
                                width: parseInt(element.style.width),
                                height: parseInt(element.style.height)
                            };
                        }
                    }
                },
                getPreTouch: function getPreTouch(touch) {
                    var preTouch = null;
                    var locPreTouchPool = this._preTouchPool;
                    var id = touch.getID();
                    for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
                        if (locPreTouchPool[i].getID() === id) {
                            preTouch = locPreTouchPool[i];
                            break;
                        }
                    }
                    if (!preTouch)
                        preTouch = touch;
                    return preTouch;
                },
                setPreTouch: function setPreTouch(touch) {
                    var find = false;
                    var locPreTouchPool = this._preTouchPool;
                    var id = touch.getID();
                    for (var i = locPreTouchPool.length - 1; i >= 0; i--) {
                        if (locPreTouchPool[i].getID() === id) {
                            locPreTouchPool[i] = touch;
                            find = true;
                            break;
                        }
                    }
                    if (!find) {
                        if (locPreTouchPool.length <= 50) {
                            locPreTouchPool.push(touch);
                        } else {
                            locPreTouchPool[this._preTouchPoolPointer] = touch;
                            this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
                        }
                    }
                },
                getTouchByXY: function getTouchByXY(tx, ty, pos) {
                    var locPreTouch = this._preTouchPoint;
                    var location = this._glView.convertToLocationInView(tx, ty, pos);
                    var touch = new cc.Touch(location.x, location.y);
                    touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
                    locPreTouch.x = location.x;
                    locPreTouch.y = location.y;
                    return touch;
                },
                getPointByEvent: function getPointByEvent(event, pos) {
                    if (event.pageX != null)
                        return {
                            x: event.pageX,
                            y: event.pageY
                        };
                    pos.left -= document.body.scrollLeft;
                    pos.top -= document.body.scrollTop;
                    return {
                        x: event.clientX,
                        y: event.clientY
                    };
                },
                getTouchesByEvent: function getTouchesByEvent(event) {
                    var touchArr = [], locView = this._glView;
                    var touch_event, touch, preLocation;
                    var locPreTouch = this._preTouchPoint;
                    var length = event.length;
                    for (var i = 0; i < length; i++) {
                        touch_event = event[i];
                        if (touch_event) {
                            var location = locView.convertToLocationInView(touch_event.x, touch_event.y, this._relatedPos);
                            location.y = cc.game.canvas.height - location.y;
                            if (touch_event.id != null) {
                                touch = new cc.Touch(location.x, location.y, touch_event.id);
                                preLocation = this.getPreTouch(touch).getLocation();
                                touch._setPrevPoint(preLocation.x, preLocation.y);
                                this.setPreTouch(touch);
                            } else {
                                touch = new cc.Touch(location.x, location.y);
                                touch._setPrevPoint(locPreTouch.x, locPreTouch.y);
                            }
                            locPreTouch.x = location.x;
                            locPreTouch.y = location.y;
                            touchArr.push(touch);
                        }
                    }
                    return touchArr;
                },
                detectGesture: function detectGesture() {
                    var allTouchArr = BK.TouchEvent.getAllTouchEvent();
                    if (!allTouchArr) {
                        return;
                    }
                    var _touchBeginEvents = [];
                    var _touchMoveEvents = [];
                    var _touchEndEvents = [];
                    var touchArr = allTouchArr;
                    for (var i = 0; i < touchArr.length; i++) {
                        _touchBeginEvents.length = 0;
                        _touchMoveEvents.length = 0;
                        _touchEndEvents.length = 0;
                        for (var j = 0; j < touchArr[i].length; ++j) {
                            var touch_event = touchArr[i][j];
                            if (touch_event.status === 2) {
                                _touchBeginEvents.push(touch_event);
                            } else if (touch_event.status === 3) {
                                _touchMoveEvents.push(touch_event);
                            } else if (touch_event.status === 1) {
                                _touchEndEvents.push(touch_event);
                            }
                        }
                        if (_touchBeginEvents.length > 0) {
                            this.handleTouchesBegin(this.getTouchesByEvent(_touchBeginEvents));
                        }
                        if (_touchMoveEvents.length > 0) {
                            this.handleTouchesMove(this.getTouchesByEvent(_touchMoveEvents));
                        }
                        if (_touchEndEvents.length > 0) {
                            this.handleTouchesEnd(this.getTouchesByEvent(_touchEndEvents));
                        }
                    }
                },
                registerSystemEvent: function registerSystemEvent(element) {
                    this._glView = cc.view;
                    this._relatedPos = {
                        left: 0,
                        top: 0,
                        width: element.width,
                        height: element.height
                    };
                    BK.Script.getTouchModeAll = 1;
                },
                _registerKeyboardEvent: function _registerKeyboardEvent() {
                },
                _registerAccelerometerEvent: function _registerAccelerometerEvent() {
                }
            };
            module.exports = BK.inputManager = bkInputManager;
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,