(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCClass.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('./js');
        var Enum = require('./CCEnum');
        var utils = require('./utils');
        var _isPlainEmptyObj_DEV = utils.isPlainEmptyObj_DEV;
        var _cloneable_DEV = utils.cloneable_DEV;
        var Attr = require('./attribute');
        var DELIMETER = Attr.DELIMETER;
        var getTypeChecker = Attr.getTypeChecker;
        var preprocess = require('./preprocess-class');
        require('./requiring-frame');
        var BUILTIN_ENTRIES = [
            'name',
            'extends',
            'mixins',
            'ctor',
            '__ctor__',
            'properties',
            'statics',
            'editor',
            '__ES6__'
        ];
        var INVALID_STATICS_DEV = CC_DEV && [
            'name',
            '__ctors__',
            '__props__',
            'arguments',
            'call',
            'apply',
            'caller',
            'length',
            'prototype'
        ];
        function pushUnique(array, item) {
            if (array.indexOf(item) < 0) {
                array.push(item);
            }
        }
        var deferredInitializer = {
            datas: null,
            push: function push(data) {
                if (this.datas) {
                    this.datas.push(data);
                } else {
                    this.datas = [data];
                    var self = this;
                    setTimeout(function () {
                        self.init();
                    }, 0);
                }
            },
            init: function init() {
                var datas = this.datas;
                if (datas) {
                    for (var i = 0; i < datas.length; ++i) {
                        var data = datas[i];
                        var cls = data.cls;
                        var properties = data.props;
                        if (typeof properties === 'function') {
                            properties = properties();
                        }
                        var name = js.getClassName(cls);
                        if (properties) {
                            declareProperties(cls, name, properties, cls.$super, data.mixins);
                        } else {
                            cc.errorID(3633, name);
                        }
                    }
                    this.datas = null;
                }
            }
        };
        function appendProp(cls, name) {
            if (CC_DEV) {
                if (name.indexOf('.') !== -1) {
                    cc.errorID(3634);
                    return;
                }
            }
            pushUnique(cls.__props__, name);
        }
        var tmpArray = [];
        function defineProp(cls, className, propName, val, es6) {
            var defaultValue = val.default;
            if (CC_DEV) {
                if (!es6) {
                    if ((typeof defaultValue === 'undefined' ? 'undefined' : _typeof(defaultValue)) === 'object' && defaultValue) {
                        if (Array.isArray(defaultValue)) {
                            if (defaultValue.length > 0) {
                                cc.errorID(3635, className, propName, propName);
                                return;
                            }
                        } else if (!_isPlainEmptyObj_DEV(defaultValue)) {
                            if (!_cloneable_DEV(defaultValue)) {
                                cc.errorID(3636, className, propName, propName);
                                return;
                            }
                        }
                    }
                }
                if (CCClass.getInheritanceChain(cls).some(function (x) {
                        return x.prototype.hasOwnProperty(propName);
                    })) {
                    cc.errorID(3637, className, propName, className);
                    return;
                }
            }
            Attr.setClassAttr(cls, propName, 'default', defaultValue);
            appendProp(cls, propName);
            var attrs = parseAttributes(cls, val, className, propName, false);
            if (attrs) {
                var onAfterProp = tmpArray;
                for (var i = 0; i < attrs.length; i++) {
                    var attr = attrs[i];
                    Attr.attr(cls, propName, attr);
                    if (attr._onAfterProp) {
                        onAfterProp.push(attr._onAfterProp);
                    }
                }
                for (var c = 0; c < onAfterProp.length; c++) {
                    onAfterProp[c](cls, propName);
                }
                tmpArray.length = 0;
                attrs.length = 0;
            }
        }
        function defineGetSet(cls, name, propName, val, es6) {
            var getter = val.get;
            var setter = val.set;
            var proto = cls.prototype;
            var d = Object.getOwnPropertyDescriptor(proto, propName);
            var setterUndefined = !d;
            if (getter) {
                if (CC_DEV && !es6 && d && d.get) {
                    cc.errorID(3638, name, propName);
                    return;
                }
                var attrs = parseAttributes(cls, val, name, propName, true);
                for (var i = 0; i < attrs.length; i++) {
                    Attr.attr(cls, propName, attrs[i]);
                }
                attrs.length = 0;
                Attr.setClassAttr(cls, propName, 'serializable', false);
                if (CC_DEV) {
                    appendProp(cls, propName);
                }
                if (!es6) {
                    js.get(proto, propName, getter, setterUndefined, setterUndefined);
                }
                if (CC_EDITOR || CC_DEV) {
                    Attr.setClassAttr(cls, propName, 'hasGetter', true);
                }
            }
            if (setter) {
                if (!es6) {
                    if (CC_DEV && d && d.set) {
                        return cc.errorID(3640, name, propName);
                    }
                    js.set(proto, propName, setter, setterUndefined, setterUndefined);
                }
                if (CC_EDITOR || CC_DEV) {
                    Attr.setClassAttr(cls, propName, 'hasSetter', true);
                }
            }
        }
        function getDefault(defaultVal) {
            if (typeof defaultVal === 'function') {
                if (CC_EDITOR) {
                    try {
                        return defaultVal();
                    } catch (e) {
                        cc._throw(e);
                        return undefined;
                    }
                } else {
                    return defaultVal();
                }
            }
            return defaultVal;
        }
        function mixinWithInherited(dest, src, filter) {
            for (var prop in src) {
                if (!dest.hasOwnProperty(prop) && (!filter || filter(prop))) {
                    Object.defineProperty(dest, prop, js.getPropertyDescriptor(src, prop));
                }
            }
        }
        function doDefine(className, baseClass, mixins, options) {
            var shouldAddProtoCtor;
            var __ctor__ = options.__ctor__;
            var ctor = options.ctor;
            var __es6__ = options.__ES6__;
            if (CC_DEV) {
                var ctorToUse = __ctor__ || ctor;
                if (ctorToUse) {
                    if (CCClass._isCCClass(ctorToUse)) {
                        cc.errorID(3618, className);
                    } else if (typeof ctorToUse !== 'function') {
                        cc.errorID(3619, className);
                    } else {
                        if (baseClass && /\bprototype.ctor\b/.test(ctorToUse)) {
                            if (__es6__) {
                                cc.errorID(3651, className || '');
                            } else {
                                cc.warnID(3600, className || '');
                                shouldAddProtoCtor = true;
                            }
                        }
                    }
                    if (ctor) {
                        if (__ctor__) {
                            cc.errorID(3649, className);
                        } else {
                            ctor = options.ctor = _validateCtor_DEV(ctor, baseClass, className, options);
                        }
                    }
                }
            }
            var ctors;
            var fireClass;
            if (__es6__) {
                ctors = [ctor];
                fireClass = ctor;
            } else {
                ctors = __ctor__ ? [__ctor__] : _getAllCtors(baseClass, mixins, options);
                fireClass = _createCtor(ctors, baseClass, className, options);
                js.value(fireClass, 'extend', function (options) {
                    options.extends = this;
                    return CCClass(options);
                }, true);
            }
            js.value(fireClass, '__ctors__', ctors.length > 0 ? ctors : null, true);
            var prototype = fireClass.prototype;
            if (baseClass) {
                if (!__es6__) {
                    js.extend(fireClass, baseClass);
                    prototype = fireClass.prototype;
                }
                fireClass.$super = baseClass;
                if (CC_DEV && shouldAddProtoCtor) {
                    prototype.ctor = function () {
                    };
                }
            }
            if (mixins) {
                for (var m = mixins.length - 1; m >= 0; m--) {
                    var mixin = mixins[m];
                    mixinWithInherited(prototype, mixin.prototype);
                    mixinWithInherited(fireClass, mixin, function (prop) {
                        return mixin.hasOwnProperty(prop) && (!CC_DEV || INVALID_STATICS_DEV.indexOf(prop) < 0);
                    });
                    if (CCClass._isCCClass(mixin)) {
                        mixinWithInherited(Attr.getClassAttrs(fireClass).constructor.prototype, Attr.getClassAttrs(mixin).constructor.prototype);
                    }
                }
                prototype.constructor = fireClass;
            }
            if (!__es6__) {
                prototype.__initProps__ = compileProps;
            }
            js.setClassName(className, fireClass);
            return fireClass;
        }
        function define(className, baseClass, mixins, options) {
            var Component = cc.Component;
            var frame = cc._RF.peek();
            if (frame && js.isChildClassOf(baseClass, Component)) {
                if (js.isChildClassOf(frame.cls, Component)) {
                    cc.errorID(3615);
                    return null;
                }
                if (CC_DEV && frame.uuid && className) {
                    cc.warnID(3616, className);
                }
                className = className || frame.script;
            }
            var cls = doDefine(className, baseClass, mixins, options);
            if (frame) {
                if (js.isChildClassOf(baseClass, Component)) {
                    var uuid = frame.uuid;
                    if (uuid) {
                        js._setClassId(uuid, cls);
                        if (CC_EDITOR) {
                            Component._addMenuItem(cls, 'i18n:MAIN_MENU.component.scripts/' + className, -1);
                            cls.prototype.__scriptUuid = Editor.Utils.UuidUtils.decompressUuid(uuid);
                        }
                    }
                    frame.cls = cls;
                } else if (!js.isChildClassOf(frame.cls, Component)) {
                    frame.cls = cls;
                }
            }
            return cls;
        }
        function normalizeClassName_DEV(className) {
            var DefaultName = 'CCClass';
            if (className) {
                className = className.replace(/^[^$A-Za-z_]/, '_').replace(/[^0-9A-Za-z_$]/g, '_');
                try {
                    Function('function ' + className + '(){}')();
                    return className;
                } catch (e) {
                    ;
                }
            }
            return DefaultName;
        }
        function getNewValueTypeCodeJit(value) {
            var clsName = js.getClassName(value);
            var type = value.constructor;
            var res = 'new ' + clsName + '(';
            for (var i = 0; i < type.__props__.length; i++) {
                var prop = type.__props__[i];
                var propVal = value[prop];
                if (CC_DEV && (typeof propVal === 'undefined' ? 'undefined' : _typeof(propVal)) === 'object') {
                    cc.errorID(3641, clsName);
                    return 'new ' + clsName + '()';
                }
                res += propVal;
                if (i < type.__props__.length - 1) {
                    res += ',';
                }
            }
            return res + ')';
        }
        function escapeForJS(s) {
            return JSON.stringify(s).replace(/\u2028/g, '\\u2028').replace(/\u2029/g, '\\u2029');
        }
        function getInitPropsJit(attrs, propList) {
            var F = [];
            var func = '';
            for (var i = 0; i < propList.length; i++) {
                var prop = propList[i];
                var attrKey = prop + DELIMETER + 'default';
                if (attrKey in attrs) {
                    var statement;
                    if (IDENTIFIER_RE.test(prop)) {
                        statement = 'this.' + prop + '=';
                    } else {
                        statement = 'this[' + escapeForJS(prop) + ']=';
                    }
                    var expression;
                    var def = attrs[attrKey];
                    if ((typeof def === 'undefined' ? 'undefined' : _typeof(def)) === 'object' && def) {
                        if (def instanceof cc.ValueType) {
                            expression = getNewValueTypeCodeJit(def);
                        } else if (Array.isArray(def)) {
                            expression = '[]';
                        } else {
                            expression = '{}';
                        }
                    } else if (typeof def === 'function') {
                        var index = F.length;
                        F.push(def);
                        expression = 'F[' + index + ']()';
                        if (CC_EDITOR) {
                            func += 'try {\n' + statement + expression + ';\n}\ncatch(e) {\ncc._throw(e);\n' + statement + 'undefined;\n}\n';
                            continue;
                        }
                    } else if (typeof def === 'string') {
                        expression = escapeForJS(def);
                    } else {
                        expression = def;
                    }
                    statement = statement + expression + ';\n';
                    func += statement;
                }
            }
            var initProps;
            if (F.length === 0) {
                initProps = Function(func);
            } else {
                initProps = Function('F', 'return (function(){\n' + func + '})')(F);
            }
            return initProps;
        }
        function getInitProps(attrs, propList) {
            var advancedProps = [];
            var advancedValues = [];
            var simpleProps = [];
            var simpleValues = [];
            for (var i = 0; i < propList.length; ++i) {
                var prop = propList[i];
                var attrKey = prop + DELIMETER + 'default';
                if (attrKey in attrs) {
                    var def = attrs[attrKey];
                    if ((typeof def === 'undefined' ? 'undefined' : _typeof(def)) === 'object' && def || typeof def === 'function') {
                        advancedProps.push(prop);
                        advancedValues.push(def);
                    } else {
                        simpleProps.push(prop);
                        simpleValues.push(def);
                    }
                }
            }
            return function () {
                for (var _i = 0; _i < simpleProps.length; ++_i) {
                    this[simpleProps[_i]] = simpleValues[_i];
                }
                for (var _i2 = 0; _i2 < advancedProps.length; _i2++) {
                    var _prop = advancedProps[_i2];
                    var expression;
                    var def = advancedValues[_i2];
                    if ((typeof def === 'undefined' ? 'undefined' : _typeof(def)) === 'object') {
                        if (def instanceof cc.ValueType) {
                            expression = def.clone();
                        } else if (Array.isArray(def)) {
                            expression = [];
                        } else {
                            expression = {};
                        }
                    } else {
                        if (CC_EDITOR) {
                            try {
                                expression = def();
                            } catch (err) {
                                cc._throw(e);
                                continue;
                            }
                        } else {
                            expression = def();
                        }
                    }
                    this[_prop] = expression;
                }
            };
        }
        var IDENTIFIER_RE = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
        function compileProps(actualClass) {
            var attrs = Attr.getClassAttrs(actualClass);
            var propList = actualClass.__props__;
            if (propList === null) {
                deferredInitializer.init();
                propList = actualClass.__props__;
            }
            var initProps = CC_SUPPORT_JIT ? getInitPropsJit(attrs, propList) : getInitProps(attrs, propList);
            actualClass.prototype.__initProps__ = initProps;
            initProps.call(this);
        }
        var _createCtor = CC_SUPPORT_JIT ? function (ctors, baseClass, className, options) {
            var superCallBounded = baseClass && boundSuperCalls(baseClass, options, className);
            var ctorName = CC_DEV ? normalizeClassName_DEV(className) : 'CCClass';
            var body = 'return function ' + ctorName + '(){\n';
            if (superCallBounded) {
                body += 'this._super=null;\n';
            }
            body += 'this.__initProps__(' + ctorName + ');\n';
            var ctorLen = ctors.length;
            if (ctorLen > 0) {
                var useTryCatch = CC_DEV && !(className && className.startsWith('cc.'));
                if (useTryCatch) {
                    body += 'try{\n';
                }
                var SNIPPET = '].apply(this,arguments);\n';
                if (ctorLen === 1) {
                    body += ctorName + '.__ctors__[0' + SNIPPET;
                } else {
                    body += 'var cs=' + ctorName + '.__ctors__;\n';
                    for (var i = 0; i < ctorLen; i++) {
                        body += 'cs[' + i + SNIPPET;
                    }
                }
                if (useTryCatch) {
                    body += '}catch(e){\n' + 'cc._throw(e);\n' + '}\n';
                }
            }
            body += '}';
            return Function(body)();
        } : function (ctors, baseClass, className, options) {
            var superCallBounded = baseClass && boundSuperCalls(baseClass, options, className);
            var ctorLen = ctors.length;
            var _Class5;
            if (ctorLen > 0) {
                if (superCallBounded) {
                    if (ctorLen === 2) {
                        _Class5 = function Class() {
                            this._super = null;
                            this.__initProps__(_Class5);
                            ctors[0].apply(this, arguments);
                            ctors[1].apply(this, arguments);
                        };
                    } else {
                        _Class5 = function _Class() {
                            this._super = null;
                            this.__initProps__(_Class5);
                            for (var i = 0; i < ctors.length; ++i) {
                                ctors[i].apply(this, arguments);
                            }
                        };
                    }
                } else {
                    if (ctorLen === 3) {
                        _Class5 = function _Class2() {
                            this.__initProps__(_Class5);
                            ctors[0].apply(this, arguments);
                            ctors[1].apply(this, arguments);
                            ctors[2].apply(this, arguments);
                        };
                    } else {
                        _Class5 = function _Class3() {
                            this.__initProps__(_Class5);
                            var ctors = _Class5.__ctors__;
                            for (var i = 0; i < ctors.length; ++i) {
                                ctors[i].apply(this, arguments);
                            }
                        };
                    }
                }
            } else {
                _Class5 = function _Class4() {
                    if (superCallBounded) {
                        this._super = null;
                    }
                    this.__initProps__(_Class5);
                };
            }
            return _Class5;
        };
        function _validateCtor_DEV(ctor, baseClass, className, options) {
            if (CC_EDITOR && baseClass) {
                var originCtor = ctor;
                if (SuperCallReg.test(ctor)) {
                    if (options.__ES6__) {
                        cc.errorID(3651, className);
                    } else {
                        cc.warnID(3600, className);
                        ctor = function ctor() {
                            this._super = function () {
                            };
                            var ret = originCtor.apply(this, arguments);
                            this._super = null;
                            return ret;
                        };
                    }
                }
            }
            if (ctor.length > 0 && (!className || !className.startsWith('cc.'))) {
                cc.warnID(3617, className);
            }
            return ctor;
        }
        function _getAllCtors(baseClass, mixins, options) {
            function getCtors(cls) {
                if (CCClass._isCCClass(cls)) {
                    return cls.__ctors__ || [];
                } else {
                    return [cls];
                }
            }
            var ctors = [];
            var baseOrMixins = [baseClass].concat(mixins);
            for (var b = 0; b < baseOrMixins.length; b++) {
                var baseOrMixin = baseOrMixins[b];
                if (baseOrMixin) {
                    var baseCtors = getCtors(baseOrMixin);
                    for (var c = 0; c < baseCtors.length; c++) {
                        pushUnique(ctors, baseCtors[c]);
                    }
                }
            }
            var ctor = options.ctor;
            if (ctor) {
                ctors.push(ctor);
            }
            return ctors;
        }
        var SuperCallReg = /xyz/.test(function () {
            xyz;
        }) ? /\b\._super\b/ : /.*/;
        var SuperCallRegStrict = /xyz/.test(function () {
            xyz;
        }) ? /this\._super\s*\(/ : /(NONE){99}/;
        function boundSuperCalls(baseClass, options, className) {
            var hasSuperCall = false;
            for (var funcName in options) {
                if (BUILTIN_ENTRIES.indexOf(funcName) >= 0) {
                    continue;
                }
                var func = options[funcName];
                if (typeof func !== 'function') {
                    continue;
                }
                var pd = js.getPropertyDescriptor(baseClass.prototype, funcName);
                if (pd) {
                    var superFunc = pd.value;
                    if (typeof superFunc === 'function') {
                        if (SuperCallReg.test(func)) {
                            hasSuperCall = true;
                            options[funcName] = function (superFunc, func) {
                                return function () {
                                    var tmp = this._super;
                                    this._super = superFunc;
                                    var ret = func.apply(this, arguments);
                                    this._super = tmp;
                                    return ret;
                                };
                            }(superFunc, func);
                        }
                        continue;
                    }
                }
                if (CC_DEV && SuperCallRegStrict.test(func)) {
                    cc.warnID(3620, className, funcName);
                }
            }
            return hasSuperCall;
        }
        function declareProperties(cls, className, properties, baseClass, mixins, es6) {
            cls.__props__ = [];
            if (baseClass && baseClass.__props__) {
                cls.__props__ = baseClass.__props__.slice();
            }
            if (mixins) {
                for (var m = 0; m < mixins.length; ++m) {
                    var mixin = mixins[m];
                    if (mixin.__props__) {
                        cls.__props__ = cls.__props__.concat(mixin.__props__.filter(function (x) {
                            return cls.__props__.indexOf(x) < 0;
                        }));
                    }
                }
            }
            if (properties) {
                preprocess.preprocessAttrs(properties, className, cls, es6);
                for (var propName in properties) {
                    var val = properties[propName];
                    if ('default' in val) {
                        defineProp(cls, className, propName, val, es6);
                    } else {
                        defineGetSet(cls, className, propName, val, es6);
                    }
                }
            }
            var attrs = Attr.getClassAttrs(cls);
            cls.__values__ = cls.__props__.filter(function (prop) {
                return attrs[prop + DELIMETER + 'serializable'] !== false;
            });
        }
        function CCClass(options) {
            options = options || {};
            var name = options.name;
            var base = options.extends;
            var mixins = options.mixins;
            var cls = define(name, base, mixins, options);
            if (!name) {
                name = cc.js.getClassName(cls);
            }
            cls._sealed = true;
            if (base) {
                base._sealed = false;
            }
            var properties = options.properties;
            if (typeof properties === 'function' || base && base.__props__ === null || mixins && mixins.some(function (x) {
                    return x.__props__ === null;
                })) {
                if (CC_DEV && options.__ES6__) {
                    cc.error('not yet implement deferred properties for ES6 Classes');
                } else {
                    deferredInitializer.push({
                        cls: cls,
                        props: properties,
                        mixins: mixins
                    });
                    cls.__props__ = cls.__values__ = null;
                }
            } else {
                declareProperties(cls, name, properties, base, options.mixins, options.__ES6__);
            }
            var statics = options.statics;
            if (statics) {
                var staticPropName;
                if (CC_DEV) {
                    for (staticPropName in statics) {
                        if (INVALID_STATICS_DEV.indexOf(staticPropName) !== -1) {
                            cc.errorID(3642, name, staticPropName, staticPropName);
                        }
                    }
                }
                for (staticPropName in statics) {
                    cls[staticPropName] = statics[staticPropName];
                }
            }
            for (var funcName in options) {
                if (BUILTIN_ENTRIES.indexOf(funcName) >= 0) {
                    continue;
                }
                var func = options[funcName];
                if (!preprocess.validateMethodWithProps(func, funcName, name, cls, base)) {
                    continue;
                }
                js.value(cls.prototype, funcName, func, true, true);
            }
            var editor = options.editor;
            if (editor) {
                if (js.isChildClassOf(base, cc.Component)) {
                    cc.Component._registerEditorProps(cls, editor);
                } else if (CC_DEV) {
                    cc.warnID(3623, name);
                }
            }
            return cls;
        }
        CCClass._isCCClass = function (constructor) {
            return constructor && constructor.hasOwnProperty('__ctors__');
        };
        CCClass._fastDefine = function (className, constructor, serializableFields) {
            js.setClassName(className, constructor);
            var props = constructor.__props__ = constructor.__values__ = Object.keys(serializableFields);
            var attrProtos = Attr.getClassAttrsProto(constructor);
            for (var i = 0; i < props.length; i++) {
                var key = props[i];
                attrProtos[key + DELIMETER + 'visible'] = false;
                attrProtos[key + DELIMETER + 'default'] = serializableFields[key];
            }
        };
        CCClass.Attr = Attr;
        CCClass.attr = Attr.attr;
        CCClass.getInheritanceChain = function (klass) {
            var chain = [];
            for (;;) {
                klass = js.getSuper(klass);
                if (!klass) {
                    break;
                }
                if (klass !== Object) {
                    chain.push(klass);
                }
            }
            return chain;
        };
        var PrimitiveTypes = {
            Integer: 'Number',
            Float: 'Number',
            Boolean: 'Boolean',
            String: 'String'
        };
        var tmpAttrs = [];
        function parseAttributes(cls, attrs, className, propName, usedInGetter) {
            var ERR_Type = CC_DEV ? 'The %s of %s must be type %s' : '';
            var attrsProto = null;
            var attrsProtoKey = '';
            function getAttrsProto() {
                attrsProtoKey = propName + DELIMETER;
                return attrsProto = Attr.getClassAttrsProto(cls);
            }
            tmpAttrs.length = 0;
            var result = tmpAttrs;
            var type = attrs.type;
            if (type) {
                var primitiveType = PrimitiveTypes[type];
                if (primitiveType) {
                    result.push({
                        type: type,
                        _onAfterProp: getTypeChecker(primitiveType, 'cc.' + type)
                    });
                } else if (type === 'Object') {
                    if (CC_DEV) {
                        cc.errorID(3644, className, propName);
                    }
                } else {
                    if (type === Attr.ScriptUuid) {
                        var attr = Attr.ObjectType(cc.ScriptAsset);
                        attr.type = 'Script';
                        result.push(attr);
                    } else {
                        if ((typeof type === 'undefined' ? 'undefined' : _typeof(type)) === 'object') {
                            if (Enum.isEnum(type)) {
                                result.push({
                                    type: 'Enum',
                                    enumList: Enum.getList(type)
                                });
                            } else if (CC_DEV) {
                                cc.errorID(3645, className, propName, type);
                            }
                        } else if (typeof type === 'function') {
                            if (attrs.url) {
                                result.push({
                                    type: 'Object',
                                    ctor: type,
                                    _onAfterProp: getTypeChecker('String', 'cc.String')
                                });
                            } else {
                                result.push(attrs._short ? {
                                    type: 'Object',
                                    ctor: type
                                } : Attr.ObjectType(type));
                            }
                        } else if (CC_DEV) {
                            cc.errorID(3646, className, propName, type);
                        }
                    }
                }
            }
            function parseSimpleAttr(attrName, expectType) {
                if (attrName in attrs) {
                    var val = attrs[attrName];
                    if ((typeof val === 'undefined' ? 'undefined' : _typeof(val)) === expectType) {
                        (attrsProto || getAttrsProto())[attrsProtoKey + attrName] = val;
                    } else if (CC_DEV) {
                        cc.error(ERR_Type, attrName, className, propName, expectType);
                    }
                }
            }
            if (attrs.editorOnly) {
                if (CC_DEV && usedInGetter) {
                    cc.errorID(3613, 'editorOnly', name, propName);
                } else {
                    (attrsProto || getAttrsProto())[attrsProtoKey + 'editorOnly'] = true;
                }
            }
            if (CC_DEV) {
                parseSimpleAttr('displayName', 'string');
                parseSimpleAttr('multiline', 'boolean');
                if (attrs.readonly) {
                    (attrsProto || getAttrsProto())[attrsProtoKey + 'readonly'] = true;
                }
                parseSimpleAttr('tooltip', 'string');
                parseSimpleAttr('slide', 'boolean');
            }
            if (attrs.url) {
                (attrsProto || getAttrsProto())[attrsProtoKey + 'saveUrlAsAsset'] = true;
            }
            if (attrs.serializable === false) {
                if (CC_DEV && usedInGetter) {
                    cc.errorID(3613, 'serializable', name, propName);
                } else {
                    (attrsProto || getAttrsProto())[attrsProtoKey + 'serializable'] = false;
                }
            }
            parseSimpleAttr('formerlySerializedAs', 'string');
            if (CC_EDITOR) {
                parseSimpleAttr('notifyFor', 'string');
                if ('animatable' in attrs) {
                    (attrsProto || getAttrsProto())[attrsProtoKey + 'animatable'] = !!attrs.animatable;
                }
            }
            if (CC_DEV) {
                var visible = attrs.visible;
                if (typeof visible !== 'undefined') {
                    if (!visible) {
                        (attrsProto || getAttrsProto())[attrsProtoKey + 'visible'] = false;
                    } else if (typeof visible === 'function') {
                        (attrsProto || getAttrsProto())[attrsProtoKey + 'visible'] = visible;
                    }
                } else {
                    var startsWithUS = propName.charCodeAt(0) === 95;
                    if (startsWithUS) {
                        (attrsProto || getAttrsProto())[attrsProtoKey + 'visible'] = false;
                    }
                }
            }
            var range = attrs.range;
            if (range) {
                if (Array.isArray(range)) {
                    if (range.length >= 2) {
                        (attrsProto || getAttrsProto())[attrsProtoKey + 'min'] = range[0];
                        attrsProto[attrsProtoKey + 'max'] = range[1];
                        if (range.length > 2) {
                            attrsProto[attrsProtoKey + 'step'] = range[2];
                        }
                    } else if (CC_DEV) {
                        cc.errorID(3647);
                    }
                } else if (CC_DEV) {
                    cc.error(ERR_Type, 'range', className, propName, 'array');
                }
            }
            parseSimpleAttr('min', 'number');
            parseSimpleAttr('max', 'number');
            parseSimpleAttr('step', 'number');
            return result;
        }
        cc.Class = CCClass;
        module.exports = {
            isArray: function isArray(defaultVal) {
                defaultVal = getDefault(defaultVal);
                return Array.isArray(defaultVal);
            },
            fastDefine: CCClass._fastDefine,
            getNewValueTypeCode: CC_SUPPORT_JIT && getNewValueTypeCodeJit,
            IDENTIFIER_RE: IDENTIFIER_RE,
            escapeForJS: escapeForJS,
            getDefault: getDefault
        };
        if (CC_TEST) {
            js.mixin(CCClass, module.exports);
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,