(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/url.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.url = {
            _rawAssets: '',
            normalize: function normalize(url) {
                if (url) {
                    if (url.charCodeAt(0) === 46 && url.charCodeAt(1) === 47) {
                        url = url.slice(2);
                    } else if (url.charCodeAt(0) === 47) {
                        url = url.slice(1);
                    }
                }
                return url;
            },
            raw: function raw(url) {
                if (CC_EDITOR && !this._rawAssets) {
                    cc.errorID(7000);
                    return '';
                }
                url = this.normalize(url);
                if (!url.startsWith('resources/')) {
                    cc.errorID(CC_EDITOR ? 7001 : 7002, url);
                } else {
                    var uuid = cc.loader._getResUuid(url.slice(10), cc.Asset, null, true);
                    if (uuid) {
                        return cc.AssetLibrary.getLibUrlNoExt(uuid, true) + cc.path.extname(url);
                    }
                }
                return this._rawAssets + url;
            },
            _init: function _init(assets) {
                this._rawAssets = cc.path.stripSep(assets) + '/';
            }
        };
        module.exports = cc.url;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,