(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/callbacks-invoker.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./js');
        var fastRemoveAt = js.array.fastRemoveAt;
        function CallbackList() {
            this.callbacks = [];
            this.targets = [];
            this.isInvoking = false;
            this.containCanceled = false;
        }
        var proto = CallbackList.prototype;
        proto.removeBy = function (array, value) {
            var callbacks = this.callbacks;
            var targets = this.targets;
            for (var i = 0; i < array.length; ++i) {
                if (array[i] === value) {
                    fastRemoveAt(callbacks, i);
                    fastRemoveAt(targets, i);
                    --i;
                }
            }
        };
        proto.cancel = function (index) {
            this.callbacks[index] = this.targets[index] = null;
            this.containCanceled = true;
        };
        proto.cancelAll = function () {
            var callbacks = this.callbacks;
            var targets = this.targets;
            for (var i = 0; i < callbacks.length; i++) {
                callbacks[i] = targets[i] = null;
            }
            this.containCanceled = true;
        };
        proto.purgeCanceled = function () {
            this.removeBy(this.callbacks, null);
            this.containCanceled = false;
        };
        var MAX_SIZE = 16;
        var callbackListPool = new js.Pool(function (list) {
            list.callbacks.length = 0;
            list.targets.length = 0;
            list.isInvoking = false;
            list.containCanceled = false;
        }, MAX_SIZE);
        callbackListPool.get = function () {
            return this._get() || new CallbackList();
        };
        function CallbacksHandler() {
            this._callbackTable = js.createMap(true);
        }
        proto = CallbacksHandler.prototype;
        proto.add = function (key, callback, target) {
            var list = this._callbackTable[key];
            if (!list) {
                list = this._callbackTable[key] = callbackListPool.get();
            }
            list.callbacks.push(callback);
            list.targets.push(target || null);
        };
        proto.hasEventListener = function (key, callback, target) {
            var list = this._callbackTable[key];
            if (!list) {
                return false;
            }
            var callbacks = list.callbacks;
            if (!callback) {
                if (list.isInvoking) {
                    for (var i = 0; i < callbacks.length; i++) {
                        if (callbacks[i]) {
                            return true;
                        }
                    }
                    return false;
                } else {
                    return callbacks.length > 0;
                }
            }
            target = target || null;
            var targets = list.targets;
            for (var _i = 0; _i < callbacks.length; ++_i) {
                if (callbacks[_i] === callback && targets[_i] === target) {
                    return true;
                }
            }
            return false;
        };
        proto.removeAll = function (keyOrTarget) {
            if (typeof keyOrTarget === 'string') {
                var list = this._callbackTable[keyOrTarget];
                if (list) {
                    if (list.isInvoking) {
                        list.cancelAll();
                    } else {
                        callbackListPool.put(list);
                        delete this._callbackTable[keyOrTarget];
                    }
                }
            } else if (keyOrTarget) {
                for (var key in this._callbackTable) {
                    var _list = this._callbackTable[key];
                    if (_list.isInvoking) {
                        var targets = _list.targets;
                        for (var i = 0; i < targets.length; ++i) {
                            if (targets[i] === keyOrTarget) {
                                _list.cancel(i);
                            }
                        }
                    } else {
                        _list.removeBy(_list.targets, keyOrTarget);
                    }
                }
            }
        };
        proto.remove = function (key, callback, target) {
            var list = this._callbackTable[key];
            if (list) {
                target = target || null;
                var callbacks = list.callbacks;
                var targets = list.targets;
                for (var i = 0; i < callbacks.length; ++i) {
                    if (callbacks[i] === callback && targets[i] === target) {
                        if (list.isInvoking) {
                            list.cancel(i);
                        } else {
                            fastRemoveAt(callbacks, i);
                            fastRemoveAt(targets, i);
                        }
                        break;
                    }
                }
            }
        };
        var CallbacksInvoker = function CallbacksInvoker() {
            CallbacksHandler.call(this);
        };
        js.extend(CallbacksInvoker, CallbacksHandler);
        if (CC_TEST) {
            cc._Test.CallbacksInvoker = CallbacksInvoker;
        }
        CallbacksInvoker.prototype.invoke = function (key, p1, p2, p3, p4, p5) {
            var list = this._callbackTable[key];
            if (list) {
                var rootInvoker = !list.isInvoking;
                list.isInvoking = true;
                var callbacks = list.callbacks;
                var targets = list.targets;
                for (var i = 0, len = callbacks.length; i < len; ++i) {
                    var callback = callbacks[i];
                    if (callback) {
                        var target = targets[i];
                        if (target) {
                            callback.call(target, p1, p2, p3, p4, p5);
                        } else {
                            callback(p1, p2, p3, p4, p5);
                        }
                    }
                }
                if (rootInvoker) {
                    list.isInvoking = false;
                    if (list.containCanceled) {
                        list.purgeCanceled();
                    }
                }
            }
        };
        CallbacksInvoker.CallbacksHandler = CallbacksHandler;
        module.exports = CallbacksInvoker;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,