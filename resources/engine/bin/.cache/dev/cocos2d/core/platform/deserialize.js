(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/deserialize.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _typeof = typeof Symbol === 'function' && typeof Symbol.iterator === 'symbol' ? function (obj) {
            return typeof obj;
        } : function (obj) {
            return obj && typeof Symbol === 'function' && obj.constructor === Symbol && obj !== Symbol.prototype ? 'symbol' : typeof obj;
        };
        var js = require('./js');
        var Attr = require('./attribute');
        var CCClass = require('./CCClass');
        var misc = require('../utils/misc');
        var Details = function Details() {
            this.uuidList = [];
            this.uuidObjList = [];
            this.uuidPropList = [];
            this._stillUseUrl = js.createMap(true);
        };
        Details.prototype.reset = function () {
            this.uuidList.length = 0;
            this.uuidObjList.length = 0;
            this.uuidPropList.length = 0;
            js.clear(this._stillUseUrl);
        };
        if (CC_EDITOR || CC_TEST) {
            Details.prototype.assignAssetsBy = function (getter) {
                for (var i = 0, len = this.uuidList.length; i < len; i++) {
                    var uuid = this.uuidList[i];
                    var obj = this.uuidObjList[i];
                    var prop = this.uuidPropList[i];
                    obj[prop] = getter(uuid);
                }
            };
        }
        Details.prototype.push = function (obj, propName, uuid, _stillUseUrl) {
            if (_stillUseUrl) {
                this._stillUseUrl[this.uuidList.length] = true;
            }
            this.uuidList.push(uuid);
            this.uuidObjList.push(obj);
            this.uuidPropList.push(propName);
        };
        Details.pool = new js.Pool(function (obj) {
            obj.reset();
        }, 10);
        Details.pool.get = function () {
            return this._get() || new Details();
        };
        var _Deserializer = function () {
            function _Deserializer(result, target, classFinder, customEnv, ignoreEditorOnly) {
                this.result = result;
                this.customEnv = customEnv;
                this.deserializedList = [];
                this.deserializedData = null;
                this._classFinder = classFinder;
                if (CC_DEV) {
                    this._target = target;
                    this._ignoreEditorOnly = ignoreEditorOnly;
                }
                this._idList = [];
                this._idObjList = [];
                this._idPropList = [];
            }
            function _dereference(self) {
                var deserializedList = self.deserializedList;
                var idPropList = self._idPropList;
                var idList = self._idList;
                var idObjList = self._idObjList;
                var onDereferenced = self._classFinder && self._classFinder.onDereferenced;
                var i, propName, id;
                if (CC_EDITOR && onDereferenced) {
                    for (i = 0; i < idList.length; i++) {
                        propName = idPropList[i];
                        id = idList[i];
                        idObjList[i][propName] = deserializedList[id];
                        onDereferenced(deserializedList, id, idObjList[i], propName);
                    }
                } else {
                    for (i = 0; i < idList.length; i++) {
                        propName = idPropList[i];
                        id = idList[i];
                        idObjList[i][propName] = deserializedList[id];
                    }
                }
            }
            var prototype = _Deserializer.prototype;
            prototype.deserialize = function (jsonObj) {
                if (Array.isArray(jsonObj)) {
                    var jsonArray = jsonObj;
                    var refCount = jsonArray.length;
                    this.deserializedList.length = refCount;
                    for (var i = 0; i < refCount; i++) {
                        if (jsonArray[i]) {
                            if (CC_EDITOR || CC_TEST) {
                                var mainTarget = i === 0 && this._target;
                                this.deserializedList[i] = this._deserializeObject(jsonArray[i], false, mainTarget, this.deserializedList, '' + i);
                            } else {
                                this.deserializedList[i] = this._deserializeObject(jsonArray[i], false);
                            }
                        }
                    }
                    this.deserializedData = refCount > 0 ? this.deserializedList[0] : [];
                } else {
                    this.deserializedList.length = 1;
                    if (CC_EDITOR || CC_TEST) {
                        this.deserializedData = jsonObj ? this._deserializeObject(jsonObj, false, this._target, this.deserializedList, '0') : null;
                    } else {
                        this.deserializedData = jsonObj ? this._deserializeObject(jsonObj, false) : null;
                    }
                    this.deserializedList[0] = this.deserializedData;
                }
                _dereference(this);
                return this.deserializedData;
            };
            prototype._deserializeObject = function (serialized, _stillUseUrl, target, owner, propName) {
                var prop;
                var obj = null;
                var klass = null;
                var type = serialized.__type__;
                if (type) {
                    klass = this._classFinder(type, serialized, owner, propName);
                    if (!klass) {
                        var notReported = this._classFinder === js._getClassById;
                        if (notReported) {
                            cc.deserialize.reportMissingClass(type);
                        }
                        return null;
                    }
                    if ((CC_EDITOR || CC_TEST) && target) {
                        if (!(target instanceof klass)) {
                            cc.warnID(5300, js.getClassName(target), klass);
                        }
                        obj = target;
                    } else {
                        obj = new klass();
                    }
                    if (obj._deserialize) {
                        obj._deserialize(serialized.content, this);
                        return obj;
                    }
                    if (cc.Class._isCCClass(klass)) {
                        _deserializeFireClass(this, obj, serialized, klass, target);
                    } else {
                        this._deserializeTypedObject(obj, serialized, klass);
                    }
                } else if (!Array.isArray(serialized)) {
                    obj = (CC_EDITOR || CC_TEST) && target || {};
                    this._deserializePrimitiveObject(obj, serialized);
                } else {
                    if ((CC_EDITOR || CC_TEST) && target) {
                        target.length = serialized.length;
                        obj = target;
                    } else {
                        obj = new Array(serialized.length);
                    }
                    for (var i = 0; i < serialized.length; i++) {
                        prop = serialized[i];
                        if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) === 'object' && prop) {
                            if (CC_EDITOR || CC_TEST) {
                                this._deserializeObjField(obj, prop, '' + i, target && obj, _stillUseUrl);
                            } else {
                                this._deserializeObjField(obj, prop, '' + i, null, _stillUseUrl);
                            }
                        } else {
                            obj[i] = prop;
                        }
                    }
                }
                return obj;
            };
            prototype._deserializeObjField = function (obj, jsonObj, propName, target, _stillUseUrl) {
                var id = jsonObj.__id__;
                if (id === undefined) {
                    var uuid = jsonObj.__uuid__;
                    if (uuid) {
                        this.result.push(obj, propName, uuid, _stillUseUrl);
                    } else {
                        if (CC_EDITOR || CC_TEST) {
                            obj[propName] = this._deserializeObject(jsonObj, _stillUseUrl, target && target[propName], obj, propName);
                        } else {
                            obj[propName] = this._deserializeObject(jsonObj, _stillUseUrl);
                        }
                    }
                } else {
                    var dObj = this.deserializedList[id];
                    if (dObj) {
                        obj[propName] = dObj;
                    } else {
                        this._idList.push(id);
                        this._idObjList.push(obj);
                        this._idPropList.push(propName);
                    }
                }
            };
            prototype._deserializePrimitiveObject = function (instance, serialized) {
                var self = this;
                for (var propName in serialized) {
                    if (serialized.hasOwnProperty(propName)) {
                        var prop = serialized[propName];
                        if ((typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) !== 'object') {
                            if (propName !== '__type__') {
                                instance[propName] = prop;
                            }
                        } else {
                            if (prop) {
                                if (CC_EDITOR || CC_TEST) {
                                    self._deserializeObjField(instance, prop, propName, self._target && instance);
                                } else {
                                    self._deserializeObjField(instance, prop, propName);
                                }
                            } else {
                                instance[propName] = null;
                            }
                        }
                    }
                }
            };
            prototype._deserializeTypedObject = function (instance, serialized, klass) {
                if (klass === cc.Vec2) {
                    instance.x = serialized.x || 0;
                    instance.y = serialized.y || 0;
                    return;
                } else if (klass === cc.Vec3) {
                    instance.x = serialized.x || 0;
                    instance.y = serialized.y || 0;
                    instance.z = serialized.z || 0;
                    return;
                } else if (klass === cc.Color) {
                    instance.r = serialized.r || 0;
                    instance.g = serialized.g || 0;
                    instance.b = serialized.b || 0;
                    var a = serialized.a;
                    instance.a = a === undefined ? 255 : a;
                    return;
                } else if (klass === cc.Size) {
                    instance.width = serialized.width || 0;
                    instance.height = serialized.height || 0;
                    return;
                }
                var DEFAULT = Attr.DELIMETER + 'default';
                var attrs = Attr.getClassAttrs(klass);
                var fastDefinedProps = klass.__props__ || Object.keys(instance);
                for (var i = 0; i < fastDefinedProps.length; i++) {
                    var propName = fastDefinedProps[i];
                    var value = serialized[propName];
                    if (value === undefined || !serialized.hasOwnProperty(propName)) {
                        value = CCClass.getDefault(attrs[propName + DEFAULT]);
                    }
                    if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) !== 'object') {
                        instance[propName] = value;
                    } else if (value) {
                        if (CC_EDITOR || CC_TEST) {
                            this._deserializeObjField(instance, value, propName, this._target && instance);
                        } else {
                            this._deserializeObjField(instance, value, propName);
                        }
                    } else {
                        instance[propName] = null;
                    }
                }
            };
            function compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, assumeHavePropIfIsValue, stillUseUrl) {
                if (defaultValue instanceof cc.ValueType) {
                    if (!assumeHavePropIfIsValue) {
                        sources.push('if(prop){');
                    }
                    var ctorCode = js.getClassName(defaultValue);
                    sources.push('s._deserializeTypedObject(o' + accessorToSet + ',prop,' + ctorCode + ');');
                    if (!assumeHavePropIfIsValue) {
                        sources.push('}else o' + accessorToSet + '=null;');
                    }
                } else {
                    sources.push('if(prop){');
                    sources.push('s._deserializeObjField(o,prop,' + propNameLiteralToSet + (CC_EDITOR || CC_TEST ? ',t&&o,' : ',null,') + !!stillUseUrl + ');');
                    sources.push('}else o' + accessorToSet + '=null;');
                }
            }
            var compileDeserialize = CC_SUPPORT_JIT ? function (self, klass) {
                var TYPE = Attr.DELIMETER + 'type';
                var EDITOR_ONLY = Attr.DELIMETER + 'editorOnly';
                var DEFAULT = Attr.DELIMETER + 'default';
                var SAVE_URL_AS_ASSET = Attr.DELIMETER + 'saveUrlAsAsset';
                var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + 'formerlySerializedAs';
                var attrs = Attr.getClassAttrs(klass);
                var props = klass.__values__;
                var sources = ['var prop;'];
                var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass));
                for (var p = 0; p < props.length; p++) {
                    var propName = props[p];
                    if ((CC_PREVIEW || CC_EDITOR && self._ignoreEditorOnly) && attrs[propName + EDITOR_ONLY]) {
                        continue;
                    }
                    var accessorToSet, propNameLiteralToSet;
                    if (CCClass.IDENTIFIER_RE.test(propName)) {
                        propNameLiteralToSet = '"' + propName + '"';
                        accessorToSet = '.' + propName;
                    } else {
                        propNameLiteralToSet = CCClass.escapeForJS(propName);
                        accessorToSet = '[' + propNameLiteralToSet + ']';
                    }
                    var accessorToGet = accessorToSet;
                    if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
                        var propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];
                        if (CCClass.IDENTIFIER_RE.test(propNameToRead)) {
                            accessorToGet = '.' + propNameToRead;
                        } else {
                            accessorToGet = '[' + CCClass.escapeForJS(propNameToRead) + ']';
                        }
                    }
                    sources.push('prop=d' + accessorToGet + ';');
                    sources.push('if(typeof ' + (CC_JSB || CC_RUNTIME ? '(prop)' : 'prop') + '!=="undefined"){');
                    var stillUseUrl = attrs[propName + SAVE_URL_AS_ASSET];
                    var defaultValue = CCClass.getDefault(attrs[propName + DEFAULT]);
                    if (fastMode) {
                        var isPrimitiveType;
                        var userType = attrs[propName + TYPE];
                        if (defaultValue === undefined && userType) {
                            isPrimitiveType = userType === cc.String || userType === cc.Integer || userType === cc.Float || userType === cc.Boolean;
                        } else {
                            var defaultType = typeof defaultValue === 'undefined' ? 'undefined' : _typeof(defaultValue);
                            isPrimitiveType = defaultType === 'string' && !stillUseUrl || defaultType === 'number' || defaultType === 'boolean';
                        }
                        if (isPrimitiveType) {
                            sources.push('o' + accessorToSet + '=prop;');
                        } else {
                            compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, true, stillUseUrl);
                        }
                    } else {
                        sources.push('if(typeof ' + (CC_JSB || CC_RUNTIME ? '(prop)' : 'prop') + '!=="object"){' + 'o' + accessorToSet + '=prop;' + '}else{');
                        compileObjectTypeJit(sources, defaultValue, accessorToSet, propNameLiteralToSet, false, stillUseUrl);
                        sources.push('}');
                    }
                    sources.push('}');
                }
                if (cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component)) {
                    if (CC_PREVIEW || CC_EDITOR && self._ignoreEditorOnly) {
                        var mayUsedInPersistRoot = js.isChildClassOf(klass, cc.Node);
                        if (mayUsedInPersistRoot) {
                            sources.push('d._id&&(o._id=d._id);');
                        }
                    } else {
                        sources.push('d._id&&(o._id=d._id);');
                    }
                }
                if (props[props.length - 1] === '_$erialized') {
                    sources.push('o._$erialized=JSON.parse(JSON.stringify(d));');
                    sources.push('s._deserializePrimitiveObject(o._$erialized,d);');
                }
                return Function('s', 'o', 'd', 'k', 't', sources.join(''));
            } : function (self, klass) {
                var fastMode = misc.BUILTIN_CLASSID_RE.test(js._getClassId(klass));
                var shouldCopyId = cc.js.isChildClassOf(klass, cc._BaseNode) || cc.js.isChildClassOf(klass, cc.Component);
                var shouldCopyRawData;
                var simpleProps = [];
                var simplePropsToRead = simpleProps;
                var advancedProps = [];
                var advancedPropsToRead = advancedProps;
                var advancedPropsUseUrl = [];
                var advancedPropsValueType = [];
                (function () {
                    var props = klass.__values__;
                    shouldCopyRawData = props[props.length - 1] === '_$erialized';
                    var attrs = Attr.getClassAttrs(klass);
                    var TYPE = Attr.DELIMETER + 'type';
                    var DEFAULT = Attr.DELIMETER + 'default';
                    var SAVE_URL_AS_ASSET = Attr.DELIMETER + 'saveUrlAsAsset';
                    var FORMERLY_SERIALIZED_AS = Attr.DELIMETER + 'formerlySerializedAs';
                    for (var p = 0; p < props.length; p++) {
                        var propName = props[p];
                        var propNameToRead = propName;
                        if (attrs[propName + FORMERLY_SERIALIZED_AS]) {
                            propNameToRead = attrs[propName + FORMERLY_SERIALIZED_AS];
                        }
                        var stillUseUrl = attrs[propName + SAVE_URL_AS_ASSET];
                        var defaultValue = CCClass.getDefault(attrs[propName + DEFAULT]);
                        var isPrimitiveType = false;
                        if (fastMode) {
                            var userType = attrs[propName + TYPE];
                            if (defaultValue === undefined && userType) {
                                isPrimitiveType = userType === cc.String || userType === cc.Integer || userType === cc.Float || userType === cc.Boolean;
                            } else {
                                var defaultType = typeof defaultValue === 'undefined' ? 'undefined' : _typeof(defaultValue);
                                isPrimitiveType = defaultType === 'string' && !stillUseUrl || defaultType === 'number' || defaultType === 'boolean';
                            }
                        }
                        if (fastMode && isPrimitiveType) {
                            if (propNameToRead !== propName && simplePropsToRead === simpleProps) {
                                simplePropsToRead = simpleProps.slice();
                            }
                            simpleProps.push(propName);
                            if (simplePropsToRead !== simpleProps) {
                                simplePropsToRead.push(propNameToRead);
                            }
                        } else {
                            if (propNameToRead !== propName && advancedPropsToRead === advancedProps) {
                                advancedPropsToRead = advancedProps.slice();
                            }
                            advancedProps.push(propName);
                            if (advancedPropsToRead !== advancedProps) {
                                advancedPropsToRead.push(propNameToRead);
                            }
                            advancedPropsUseUrl.push(stillUseUrl);
                            advancedPropsValueType.push(defaultValue instanceof cc.ValueType && defaultValue.constructor);
                        }
                    }
                }());
                return function (s, o, d, k, t) {
                    for (var i = 0; i < simpleProps.length; ++i) {
                        var _prop = d[simplePropsToRead[i]];
                        if (_prop !== undefined) {
                            o[simpleProps[i]] = _prop;
                        }
                    }
                    for (var _i = 0; _i < advancedProps.length; ++_i) {
                        var propName = advancedProps[_i];
                        var prop = d[advancedPropsToRead[_i]];
                        if (prop === undefined) {
                            continue;
                        }
                        if (!fastMode && (typeof prop === 'undefined' ? 'undefined' : _typeof(prop)) !== 'object') {
                            o[propName] = prop;
                        } else {
                            var valueTypeCtor = advancedPropsValueType[_i];
                            if (valueTypeCtor) {
                                if (fastMode || prop) {
                                    s._deserializeTypedObject(o[propName], prop, valueTypeCtor);
                                } else {
                                    o[propName] = null;
                                }
                            } else {
                                if (prop) {
                                    s._deserializeObjField(o, prop, propName, CC_EDITOR || CC_TEST ? t && o : null, advancedPropsUseUrl[_i]);
                                } else {
                                    o[propName] = null;
                                }
                            }
                        }
                    }
                    if (shouldCopyId && d._id) {
                        o._id = d._id;
                    }
                    if (shouldCopyRawData) {
                        o._$erialized = JSON.parse(JSON.stringify(d));
                        s._deserializePrimitiveObject(o._$erialized, d);
                    }
                };
            };
            function unlinkUnusedPrefab(self, serialized, obj) {
                var uuid = serialized['asset'] && serialized['asset'].__uuid__;
                if (uuid) {
                    var last = self.result.uuidList.length - 1;
                    if (self.result.uuidList[last] === uuid && self.result.uuidObjList[last] === obj && self.result.uuidPropList[last] === 'asset') {
                        self.result.uuidList.pop();
                        self.result.uuidObjList.pop();
                        self.result.uuidPropList.pop();
                    } else {
                        var debugEnvOnlyInfo = 'Failed to skip prefab asset while deserializing PrefabInfo';
                        cc.warn(debugEnvOnlyInfo);
                    }
                }
            }
            function _deserializeFireClass(self, obj, serialized, klass, target) {
                var deserialize;
                if (klass.hasOwnProperty('__deserialize__')) {
                    deserialize = klass.__deserialize__;
                } else {
                    deserialize = compileDeserialize(self, klass);
                    js.value(klass, '__deserialize__', deserialize, true);
                }
                deserialize(self, obj, serialized, klass, target);
                if (CC_PREVIEW || CC_EDITOR && self._ignoreEditorOnly) {
                    if (klass === cc._PrefabInfo && !obj.sync) {
                        unlinkUnusedPrefab(self, serialized, obj);
                    }
                }
            }
            _Deserializer.pool = new js.Pool(function (obj) {
                obj.result = null;
                obj.customEnv = null;
                obj.deserializedList.length = 0;
                obj.deserializedData = null;
                obj._classFinder = null;
                if (CC_DEV) {
                    obj._target = null;
                }
                obj._idList.length = 0;
                obj._idObjList.length = 0;
                obj._idPropList.length = 0;
            }, 1);
            _Deserializer.pool.get = function (result, target, classFinder, customEnv, ignoreEditorOnly) {
                var cache = this._get();
                if (cache) {
                    cache.result = result;
                    cache.customEnv = customEnv;
                    cache._classFinder = classFinder;
                    if (CC_DEV) {
                        cache._target = target;
                        cache._ignoreEditorOnly = ignoreEditorOnly;
                    }
                    return cache;
                } else {
                    return new _Deserializer(result, target, classFinder, customEnv, ignoreEditorOnly);
                }
            };
            return _Deserializer;
        }();
        cc.deserialize = function (data, details, options) {
            options = options || {};
            var classFinder = options.classFinder || js._getClassById;
            var createAssetRefs = options.createAssetRefs || cc.sys.platform === cc.sys.EDITOR_CORE;
            var target = (CC_EDITOR || CC_TEST) && options.target;
            var customEnv = options.customEnv;
            var ignoreEditorOnly = options.ignoreEditorOnly;
            if (CC_EDITOR && Buffer.isBuffer(data)) {
                data = data.toString();
            }
            if (typeof data === 'string') {
                data = JSON.parse(data);
            }
            var tempDetails = !details;
            details = details || Details.pool.get();
            var deserializer = _Deserializer.pool.get(details, target, classFinder, customEnv, ignoreEditorOnly);
            cc.game._isCloning = true;
            var res = deserializer.deserialize(data);
            cc.game._isCloning = false;
            _Deserializer.pool.put(deserializer);
            if (createAssetRefs) {
                details.assignAssetsBy(Editor.serialize.asAsset);
            }
            if (tempDetails) {
                Details.pool.put(details);
            }
            return res;
        };
        cc.deserialize.Details = Details;
        cc.deserialize.reportMissingClass = function (id) {
            if (CC_EDITOR && Editor.Utils.UuidUtils.isUuid(id)) {
                id = Editor.Utils.UuidUtils.decompressUuid(id);
                cc.warnID(5301, id);
            } else {
                cc.warnID(5302, id);
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,