(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCEnum.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('./js');
        function Enum(obj) {
            if ('__enums__' in obj) {
                return obj;
            }
            js.value(obj, '__enums__', null, true);
            var lastIndex = -1;
            var keys = Object.keys(obj);
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                var val = obj[key];
                if (val === -1) {
                    val = ++lastIndex;
                    obj[key] = val;
                } else {
                    if (typeof val === 'number') {
                        lastIndex = val;
                    } else if (typeof val === 'string' && Number.isInteger(parseFloat(key))) {
                        continue;
                    }
                }
                var reverseKey = '' + val;
                if (key !== reverseKey) {
                    if ((CC_EDITOR || CC_TEST) && reverseKey in obj && obj[reverseKey] !== key) {
                        cc.errorID(7100, reverseKey);
                        continue;
                    }
                    js.value(obj, reverseKey, key);
                }
            }
            return obj;
        }
        Enum.isEnum = function (enumType) {
            return enumType && enumType.hasOwnProperty('__enums__');
        };
        Enum.getList = function (enumDef) {
            if (enumDef.__enums__)
                return enumDef.__enums__;
            var enums = enumDef.__enums__ = [];
            for (var name in enumDef) {
                var value = enumDef[name];
                if (Number.isInteger(value)) {
                    enums.push({
                        name: name,
                        value: value
                    });
                }
            }
            enums.sort(function (a, b) {
                return a.value - b.value;
            });
            return enums;
        };
        if (CC_DEV) {
            var _TestEnum = Enum({
                ZERO: -1,
                ONE: -1,
                TWO: -1,
                THREE: -1
            });
            if (_TestEnum.ZERO !== 0 || _TestEnum.ONE !== 1 || _TestEnum.THREE !== 3) {
                cc.errorID(7101);
            }
        }
        module.exports = cc.Enum = Enum;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,