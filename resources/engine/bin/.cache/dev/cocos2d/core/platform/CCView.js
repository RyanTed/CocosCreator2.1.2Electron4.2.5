(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/platform/CCView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var EventTarget = require('../event/event-target');
        var js = require('../platform/js');
        var renderer = require('../renderer');
        require('../platform/CCClass');
        var isXiaomiGame = cc.sys.platform === cc.sys.XIAOMI_GAME;
        var isBaiduGame = cc.sys.platform === cc.sys.BAIDU_GAME;
        var __BrowserGetter = {
            init: function init() {
                if (!CC_WECHATGAME && !CC_QQPLAY && !isBaiduGame && !isXiaomiGame) {
                    this.html = document.getElementsByTagName('html')[0];
                }
            },
            availWidth: function availWidth(frame) {
                if (!frame || frame === this.html)
                    return window.innerWidth;
                else
                    return frame.clientWidth;
            },
            availHeight: function availHeight(frame) {
                if (!frame || frame === this.html)
                    return window.innerHeight;
                else
                    return frame.clientHeight;
            },
            meta: { 'width': 'device-width' },
            adaptationType: cc.sys.browserType
        };
        if (cc.sys.os === cc.sys.OS_IOS)
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_SAFARI;
        if (isBaiduGame) {
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB) {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_BAIDU_GAME_SUB;
            } else {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_BAIDU_GAME;
            }
        }
        if (isXiaomiGame) {
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_XIAOMI_GAME;
        }
        if (CC_WECHATGAME) {
            if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB;
            } else {
                __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_WECHAT_GAME;
            }
        }
        if (CC_QQPLAY) {
            __BrowserGetter.adaptationType = cc.sys.BROWSER_TYPE_QQ_PLAY;
        }
        switch (__BrowserGetter.adaptationType) {
        case cc.sys.BROWSER_TYPE_SAFARI:
            __BrowserGetter.meta['minimal-ui'] = 'true';
        case cc.sys.BROWSER_TYPE_SOUGOU:
        case cc.sys.BROWSER_TYPE_UC:
            __BrowserGetter.availWidth = function (frame) {
                return frame.clientWidth;
            };
            __BrowserGetter.availHeight = function (frame) {
                return frame.clientHeight;
            };
            break;
        case cc.sys.BROWSER_TYPE_WECHAT_GAME:
            __BrowserGetter.availWidth = function () {
                return window.innerWidth;
            };
            __BrowserGetter.availHeight = function () {
                return window.innerHeight;
            };
            break;
        case cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB:
            var sharedCanvas = window.sharedCanvas || wx.getSharedCanvas();
            __BrowserGetter.availWidth = function () {
                return sharedCanvas.width;
            };
            __BrowserGetter.availHeight = function () {
                return sharedCanvas.height;
            };
            break;
        }
        var _scissorRect = null;
        var View = function View() {
            EventTarget.call(this);
            var _t = this, _strategyer = cc.ContainerStrategy, _strategy = cc.ContentStrategy;
            __BrowserGetter.init(this);
            _t._frameSize = cc.size(0, 0);
            _t._designResolutionSize = cc.size(0, 0);
            _t._originalDesignResolutionSize = cc.size(0, 0);
            _t._scaleX = 1;
            _t._scaleY = 1;
            _t._viewportRect = cc.rect(0, 0, 0, 0);
            _t._visibleRect = cc.rect(0, 0, 0, 0);
            _t._autoFullScreen = false;
            _t._devicePixelRatio = 1;
            _t._maxPixelRatio = 2;
            _t._retinaEnabled = false;
            _t._resizeCallback = null;
            _t._resizing = false;
            _t._resizeWithBrowserSize = false;
            _t._orientationChanging = true;
            _t._isRotated = false;
            _t._orientation = cc.macro.ORIENTATION_AUTO;
            _t._isAdjustViewport = true;
            _t._antiAliasEnabled = false;
            _t._resolutionPolicy = null;
            _t._rpExactFit = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.EXACT_FIT);
            _t._rpShowAll = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.SHOW_ALL);
            _t._rpNoBorder = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.NO_BORDER);
            _t._rpFixedHeight = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_HEIGHT);
            _t._rpFixedWidth = new cc.ResolutionPolicy(_strategyer.EQUAL_TO_FRAME, _strategy.FIXED_WIDTH);
            cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
        };
        cc.js.extend(View, EventTarget);
        cc.js.mixin(View.prototype, {
            init: function init() {
                this._initFrameSize();
                this.enableAntiAlias(true);
                var w = cc.game.canvas.width, h = cc.game.canvas.height;
                this._designResolutionSize.width = w;
                this._designResolutionSize.height = h;
                this._originalDesignResolutionSize.width = w;
                this._originalDesignResolutionSize.height = h;
                this._viewportRect.width = w;
                this._viewportRect.height = h;
                this._visibleRect.width = w;
                this._visibleRect.height = h;
                cc.winSize.width = this._visibleRect.width;
                cc.winSize.height = this._visibleRect.height;
                cc.visibleRect && cc.visibleRect.init(this._visibleRect);
            },
            _resizeEvent: function _resizeEvent(forceOrEvent) {
                var view;
                if (this.setDesignResolutionSize) {
                    view = this;
                } else {
                    view = cc.view;
                }
                var prevFrameW = view._frameSize.width, prevFrameH = view._frameSize.height, prevRotated = view._isRotated;
                if (cc.sys.isMobile) {
                    var containerStyle = cc.game.container.style, margin = containerStyle.margin;
                    containerStyle.margin = '0';
                    containerStyle.display = 'none';
                    view._initFrameSize();
                    containerStyle.margin = margin;
                    containerStyle.display = 'block';
                } else {
                    view._initFrameSize();
                }
                if (forceOrEvent !== true && view._isRotated === prevRotated && view._frameSize.width === prevFrameW && view._frameSize.height === prevFrameH)
                    return;
                var width = view._originalDesignResolutionSize.width;
                var height = view._originalDesignResolutionSize.height;
                view._resizing = true;
                if (width > 0)
                    view.setDesignResolutionSize(width, height, view._resolutionPolicy);
                view._resizing = false;
                view.emit('canvas-resize');
                if (view._resizeCallback) {
                    view._resizeCallback.call();
                }
            },
            _orientationChange: function _orientationChange() {
                cc.view._orientationChanging = true;
                cc.view._resizeEvent();
            },
            resizeWithBrowserSize: function resizeWithBrowserSize(enabled) {
                if (enabled) {
                    if (!this._resizeWithBrowserSize) {
                        this._resizeWithBrowserSize = true;
                        window.addEventListener('resize', this._resizeEvent);
                        window.addEventListener('orientationchange', this._orientationChange);
                    }
                } else {
                    if (this._resizeWithBrowserSize) {
                        this._resizeWithBrowserSize = false;
                        window.removeEventListener('resize', this._resizeEvent);
                        window.removeEventListener('orientationchange', this._orientationChange);
                    }
                }
            },
            setResizeCallback: function setResizeCallback(callback) {
                if (CC_EDITOR)
                    return;
                if (typeof callback === 'function' || callback == null) {
                    this._resizeCallback = callback;
                }
            },
            setOrientation: function setOrientation(orientation) {
                orientation = orientation & cc.macro.ORIENTATION_AUTO;
                if (orientation && this._orientation !== orientation) {
                    this._orientation = orientation;
                    var designWidth = this._originalDesignResolutionSize.width;
                    var designHeight = this._originalDesignResolutionSize.height;
                    this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
                }
            },
            _initFrameSize: function _initFrameSize() {
                var locFrameSize = this._frameSize;
                var w = __BrowserGetter.availWidth(cc.game.frame);
                var h = __BrowserGetter.availHeight(cc.game.frame);
                var isLandscape = w >= h;
                if (CC_EDITOR || !cc.sys.isMobile || isLandscape && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !isLandscape && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
                    locFrameSize.width = w;
                    locFrameSize.height = h;
                    cc.game.container.style['-webkit-transform'] = 'rotate(0deg)';
                    cc.game.container.style.transform = 'rotate(0deg)';
                    this._isRotated = false;
                } else {
                    locFrameSize.width = h;
                    locFrameSize.height = w;
                    cc.game.container.style['-webkit-transform'] = 'rotate(90deg)';
                    cc.game.container.style.transform = 'rotate(90deg)';
                    cc.game.container.style['-webkit-transform-origin'] = '0px 0px 0px';
                    cc.game.container.style.transformOrigin = '0px 0px 0px';
                    this._isRotated = true;
                }
                if (this._orientationChanging) {
                    setTimeout(function () {
                        cc.view._orientationChanging = false;
                    }, 1000);
                }
            },
            _adjustSizeKeepCanvasSize: function _adjustSizeKeepCanvasSize() {
                var designWidth = this._originalDesignResolutionSize.width;
                var designHeight = this._originalDesignResolutionSize.height;
                if (designWidth > 0)
                    this.setDesignResolutionSize(designWidth, designHeight, this._resolutionPolicy);
            },
            _setViewportMeta: function _setViewportMeta(metas, overwrite) {
                var vp = document.getElementById('cocosMetaElement');
                if (vp && overwrite) {
                    document.head.removeChild(vp);
                }
                var elems = document.getElementsByName('viewport'), currentVP = elems ? elems[0] : null, content, key, pattern;
                content = currentVP ? currentVP.content : '';
                vp = vp || document.createElement('meta');
                vp.id = 'cocosMetaElement';
                vp.name = 'viewport';
                vp.content = '';
                for (key in metas) {
                    if (content.indexOf(key) == -1) {
                        content += ',' + key + '=' + metas[key];
                    } else if (overwrite) {
                        pattern = new RegExp(key + 's*=s*[^,]+');
                        content.replace(pattern, key + '=' + metas[key]);
                    }
                }
                if (/^,/.test(content))
                    content = content.substr(1);
                vp.content = content;
                if (currentVP)
                    currentVP.content = content;
                document.head.appendChild(vp);
            },
            _adjustViewportMeta: function _adjustViewportMeta() {
                if (this._isAdjustViewport && !CC_JSB && !CC_RUNTIME && !CC_WECHATGAME && !CC_QQPLAY && !isBaiduGame && !isXiaomiGame) {
                    this._setViewportMeta(__BrowserGetter.meta, false);
                    this._isAdjustViewport = false;
                }
            },
            adjustViewportMeta: function adjustViewportMeta(enabled) {
                this._isAdjustViewport = enabled;
            },
            enableRetina: function enableRetina(enabled) {
                this._retinaEnabled = !!enabled;
            },
            isRetinaEnabled: function isRetinaEnabled() {
                return this._retinaEnabled;
            },
            enableAntiAlias: function enableAntiAlias(enabled) {
                if (this._antiAliasEnabled === enabled) {
                    return;
                }
                this._antiAliasEnabled = enabled;
                if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
                    var cache = cc.loader._cache;
                    for (var key in cache) {
                        var item = cache[key];
                        var tex = item && item.content instanceof cc.Texture2D ? item.content : null;
                        if (tex) {
                            var Filter = cc.Texture2D.Filter;
                            if (enabled) {
                                tex.setFilters(Filter.LINEAR, Filter.LINEAR);
                            } else {
                                tex.setFilters(Filter.NEAREST, Filter.NEAREST);
                            }
                        }
                    }
                } else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                    var ctx = cc.game.canvas.getContext('2d');
                    ctx.imageSmoothingEnabled = enabled;
                    ctx.mozImageSmoothingEnabled = enabled;
                }
            },
            isAntiAliasEnabled: function isAntiAliasEnabled() {
                return this._antiAliasEnabled;
            },
            enableAutoFullScreen: function enableAutoFullScreen(enabled) {
                if (enabled && enabled !== this._autoFullScreen && cc.sys.isMobile && cc.sys.browserType !== cc.sys.BROWSER_TYPE_WECHAT) {
                    this._autoFullScreen = true;
                    cc.screen.autoFullScreen(cc.game.frame);
                } else {
                    this._autoFullScreen = false;
                    cc.screen.disableAutoFullScreen(cc.game.frame);
                }
            },
            isAutoFullScreenEnabled: function isAutoFullScreenEnabled() {
                return this._autoFullScreen;
            },
            setCanvasSize: function setCanvasSize(width, height) {
                var canvas = cc.game.canvas;
                var container = cc.game.container;
                canvas.width = width * this._devicePixelRatio;
                canvas.height = height * this._devicePixelRatio;
                canvas.style.width = width + 'px';
                canvas.style.height = height + 'px';
                container.style.width = width + 'px';
                container.style.height = height + 'px';
                this._resizeEvent();
            },
            getCanvasSize: function getCanvasSize() {
                return cc.size(cc.game.canvas.width, cc.game.canvas.height);
            },
            getFrameSize: function getFrameSize() {
                return cc.size(this._frameSize.width, this._frameSize.height);
            },
            setFrameSize: function setFrameSize(width, height) {
                this._frameSize.width = width;
                this._frameSize.height = height;
                cc.game.frame.style.width = width + 'px';
                cc.game.frame.style.height = height + 'px';
                this._resizeEvent(true);
            },
            getVisibleSize: function getVisibleSize() {
                return cc.size(this._visibleRect.width, this._visibleRect.height);
            },
            getVisibleSizeInPixel: function getVisibleSizeInPixel() {
                return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
            },
            getVisibleOrigin: function getVisibleOrigin() {
                return cc.v2(this._visibleRect.x, this._visibleRect.y);
            },
            getVisibleOriginInPixel: function getVisibleOriginInPixel() {
                return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
            },
            getResolutionPolicy: function getResolutionPolicy() {
                return this._resolutionPolicy;
            },
            setResolutionPolicy: function setResolutionPolicy(resolutionPolicy) {
                var _t = this;
                if (resolutionPolicy instanceof cc.ResolutionPolicy) {
                    _t._resolutionPolicy = resolutionPolicy;
                } else {
                    var _locPolicy = cc.ResolutionPolicy;
                    if (resolutionPolicy === _locPolicy.EXACT_FIT)
                        _t._resolutionPolicy = _t._rpExactFit;
                    if (resolutionPolicy === _locPolicy.SHOW_ALL)
                        _t._resolutionPolicy = _t._rpShowAll;
                    if (resolutionPolicy === _locPolicy.NO_BORDER)
                        _t._resolutionPolicy = _t._rpNoBorder;
                    if (resolutionPolicy === _locPolicy.FIXED_HEIGHT)
                        _t._resolutionPolicy = _t._rpFixedHeight;
                    if (resolutionPolicy === _locPolicy.FIXED_WIDTH)
                        _t._resolutionPolicy = _t._rpFixedWidth;
                }
            },
            setDesignResolutionSize: function setDesignResolutionSize(width, height, resolutionPolicy) {
                if (!(width > 0 || height > 0)) {
                    cc.logID(2200);
                    return;
                }
                this.setResolutionPolicy(resolutionPolicy);
                var policy = this._resolutionPolicy;
                if (policy) {
                    policy.preApply(this);
                }
                if (cc.sys.isMobile)
                    this._adjustViewportMeta();
                this._orientationChanging = true;
                if (!this._resizing)
                    this._initFrameSize();
                if (!policy) {
                    cc.logID(2201);
                    return;
                }
                this._originalDesignResolutionSize.width = this._designResolutionSize.width = width;
                this._originalDesignResolutionSize.height = this._designResolutionSize.height = height;
                var result = policy.apply(this, this._designResolutionSize);
                if (result.scale && result.scale.length === 2) {
                    this._scaleX = result.scale[0];
                    this._scaleY = result.scale[1];
                }
                if (result.viewport) {
                    var vp = this._viewportRect, vb = this._visibleRect, rv = result.viewport;
                    vp.x = rv.x;
                    vp.y = rv.y;
                    vp.width = rv.width;
                    vp.height = rv.height;
                    vb.x = 0;
                    vb.y = 0;
                    vb.width = rv.width / this._scaleX;
                    vb.height = rv.height / this._scaleY;
                }
                policy.postApply(this);
                cc.winSize.width = this._visibleRect.width;
                cc.winSize.height = this._visibleRect.height;
                cc.visibleRect && cc.visibleRect.init(this._visibleRect);
                renderer.updateCameraViewport();
                this.emit('design-resolution-changed');
            },
            getDesignResolutionSize: function getDesignResolutionSize() {
                return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
            },
            setRealPixelResolution: function setRealPixelResolution(width, height, resolutionPolicy) {
                if (!CC_JSB && !CC_RUNTIME && !CC_WECHATGAME && !CC_QQPLAY && !isBaiduGame && !isXiaomiGame) {
                    this._setViewportMeta({ 'width': width }, true);
                    document.documentElement.style.width = width + 'px';
                    document.body.style.width = width + 'px';
                    document.body.style.left = '0px';
                    document.body.style.top = '0px';
                }
                this.setDesignResolutionSize(width, height, resolutionPolicy);
            },
            setViewportInPoints: function setViewportInPoints(x, y, w, h) {
                var locScaleX = this._scaleX, locScaleY = this._scaleY;
                cc.game._renderContext.viewport(x * locScaleX + this._viewportRect.x, y * locScaleY + this._viewportRect.y, w * locScaleX, h * locScaleY);
            },
            setScissorInPoints: function setScissorInPoints(x, y, w, h) {
                var scaleX = this._scaleX, scaleY = this._scaleY;
                var sx = Math.ceil(x * scaleX + this._viewportRect.x);
                var sy = Math.ceil(y * scaleY + this._viewportRect.y);
                var sw = Math.ceil(w * scaleX);
                var sh = Math.ceil(h * scaleY);
                var gl = cc.game._renderContext;
                if (!_scissorRect) {
                    var boxArr = gl.getParameter(gl.SCISSOR_BOX);
                    _scissorRect = cc.rect(boxArr[0], boxArr[1], boxArr[2], boxArr[3]);
                }
                if (_scissorRect.x !== sx || _scissorRect.y !== sy || _scissorRect.width !== sw || _scissorRect.height !== sh) {
                    _scissorRect.x = sx;
                    _scissorRect.y = sy;
                    _scissorRect.width = sw;
                    _scissorRect.height = sh;
                    gl.scissor(sx, sy, sw, sh);
                }
            },
            isScissorEnabled: function isScissorEnabled() {
                return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
            },
            getScissorRect: function getScissorRect() {
                if (!_scissorRect) {
                    var boxArr = gl.getParameter(gl.SCISSOR_BOX);
                    _scissorRect = cc.rect(boxArr[0], boxArr[1], boxArr[2], boxArr[3]);
                }
                var scaleXFactor = 1 / this._scaleX;
                var scaleYFactor = 1 / this._scaleY;
                return cc.rect((_scissorRect.x - this._viewportRect.x) * scaleXFactor, (_scissorRect.y - this._viewportRect.y) * scaleYFactor, _scissorRect.width * scaleXFactor, _scissorRect.height * scaleYFactor);
            },
            getViewportRect: function getViewportRect() {
                return this._viewportRect;
            },
            getScaleX: function getScaleX() {
                return this._scaleX;
            },
            getScaleY: function getScaleY() {
                return this._scaleY;
            },
            getDevicePixelRatio: function getDevicePixelRatio() {
                return this._devicePixelRatio;
            },
            convertToLocationInView: function convertToLocationInView(tx, ty, relatedPos, out) {
                var result = out || cc.v2();
                var x = this._devicePixelRatio * (tx - relatedPos.left);
                var y = this._devicePixelRatio * (relatedPos.top + relatedPos.height - ty);
                if (this._isRotated) {
                    result.x = cc.game.canvas.width - y;
                    result.y = x;
                } else {
                    result.x = x;
                    result.y = y;
                }
                return result;
            },
            _convertMouseToLocationInView: function _convertMouseToLocationInView(in_out_point, relatedPos) {
                var viewport = this._viewportRect, _t = this;
                in_out_point.x = (_t._devicePixelRatio * (in_out_point.x - relatedPos.left) - viewport.x) / _t._scaleX;
                in_out_point.y = (_t._devicePixelRatio * (relatedPos.top + relatedPos.height - in_out_point.y) - viewport.y) / _t._scaleY;
            },
            _convertPointWithScale: function _convertPointWithScale(point) {
                var viewport = this._viewportRect;
                point.x = (point.x - viewport.x) / this._scaleX;
                point.y = (point.y - viewport.y) / this._scaleY;
            },
            _convertTouchesWithScale: function _convertTouchesWithScale(touches) {
                var viewport = this._viewportRect, scaleX = this._scaleX, scaleY = this._scaleY, selTouch, selPoint, selPrePoint;
                for (var i = 0; i < touches.length; i++) {
                    selTouch = touches[i];
                    selPoint = selTouch._point;
                    selPrePoint = selTouch._prevPoint;
                    selPoint.x = (selPoint.x - viewport.x) / scaleX;
                    selPoint.y = (selPoint.y - viewport.y) / scaleY;
                    selPrePoint.x = (selPrePoint.x - viewport.x) / scaleX;
                    selPrePoint.y = (selPrePoint.y - viewport.y) / scaleY;
                }
            }
        });
        cc.ContainerStrategy = cc.Class({
            name: 'ContainerStrategy',
            preApply: function preApply(view) {
            },
            apply: function apply(view, designedResolution) {
            },
            postApply: function postApply(view) {
            },
            _setupContainer: function _setupContainer(view, w, h) {
                var locCanvas = cc.game.canvas, locContainer = cc.game.container;
                if (!CC_WECHATGAME && !isBaiduGame && !isXiaomiGame) {
                    if (cc.sys.os === cc.sys.OS_ANDROID) {
                        document.body.style.width = (view._isRotated ? h : w) + 'px';
                        document.body.style.height = (view._isRotated ? w : h) + 'px';
                    }
                    locContainer.style.width = locCanvas.style.width = w + 'px';
                    locContainer.style.height = locCanvas.style.height = h + 'px';
                }
                var devicePixelRatio = view._devicePixelRatio = 1;
                if (view.isRetinaEnabled())
                    devicePixelRatio = view._devicePixelRatio = Math.min(view._maxPixelRatio, window.devicePixelRatio || 1);
                locCanvas.width = w * devicePixelRatio;
                locCanvas.height = h * devicePixelRatio;
            },
            _fixContainer: function _fixContainer() {
                document.body.insertBefore(cc.game.container, document.body.firstChild);
                var bs = document.body.style;
                bs.width = window.innerWidth + 'px';
                bs.height = window.innerHeight + 'px';
                bs.overflow = 'hidden';
                var contStyle = cc.game.container.style;
                contStyle.position = 'fixed';
                contStyle.left = contStyle.top = '0px';
                document.body.scrollTop = 0;
            }
        });
        cc.ContentStrategy = cc.Class({
            name: 'ContentStrategy',
            ctor: function ctor() {
                this._result = {
                    scale: [
                        1,
                        1
                    ],
                    viewport: null
                };
            },
            _buildResult: function _buildResult(containerW, containerH, contentW, contentH, scaleX, scaleY) {
                Math.abs(containerW - contentW) < 2 && (contentW = containerW);
                Math.abs(containerH - contentH) < 2 && (contentH = containerH);
                var viewport = cc.rect((containerW - contentW) / 2, (containerH - contentH) / 2, contentW, contentH);
                if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
                }
                this._result.scale = [
                    scaleX,
                    scaleY
                ];
                this._result.viewport = viewport;
                return this._result;
            },
            preApply: function preApply(view) {
            },
            apply: function apply(view, designedResolution) {
                return {
                    'scale': [
                        1,
                        1
                    ]
                };
            },
            postApply: function postApply(view) {
            }
        });
        (function () {
            var EqualToFrame = cc.Class({
                name: 'EqualToFrame',
                extends: cc.ContainerStrategy,
                apply: function apply(view) {
                    var frameH = view._frameSize.height, containerStyle = cc.game.container.style;
                    this._setupContainer(view, view._frameSize.width, view._frameSize.height);
                    if (view._isRotated) {
                        containerStyle.margin = '0 0 0 ' + frameH + 'px';
                    } else {
                        containerStyle.margin = '0px';
                    }
                    containerStyle.padding = '0px';
                }
            });
            var ProportionalToFrame = cc.Class({
                name: 'ProportionalToFrame',
                extends: cc.ContainerStrategy,
                apply: function apply(view, designedResolution) {
                    var frameW = view._frameSize.width, frameH = view._frameSize.height, containerStyle = cc.game.container.style, designW = designedResolution.width, designH = designedResolution.height, scaleX = frameW / designW, scaleY = frameH / designH, containerW, containerH;
                    scaleX < scaleY ? (containerW = frameW, containerH = designH * scaleX) : (containerW = designW * scaleY, containerH = frameH);
                    var offx = Math.round((frameW - containerW) / 2);
                    var offy = Math.round((frameH - containerH) / 2);
                    containerW = frameW - 2 * offx;
                    containerH = frameH - 2 * offy;
                    this._setupContainer(view, containerW, containerH);
                    if (!CC_EDITOR) {
                        if (view._isRotated) {
                            containerStyle.margin = '0 0 0 ' + frameH + 'px';
                        } else {
                            containerStyle.margin = '0px';
                        }
                        containerStyle.paddingLeft = offx + 'px';
                        containerStyle.paddingRight = offx + 'px';
                        containerStyle.paddingTop = offy + 'px';
                        containerStyle.paddingBottom = offy + 'px';
                    }
                }
            });
            var EqualToWindow = cc.Class({
                name: 'EqualToWindow',
                extends: EqualToFrame,
                preApply: function preApply(view) {
                    this._super(view);
                    cc.game.frame = document.documentElement;
                },
                apply: function apply(view) {
                    this._super(view);
                    this._fixContainer();
                }
            });
            var ProportionalToWindow = cc.Class({
                name: 'ProportionalToWindow',
                extends: ProportionalToFrame,
                preApply: function preApply(view) {
                    this._super(view);
                    cc.game.frame = document.documentElement;
                },
                apply: function apply(view, designedResolution) {
                    this._super(view, designedResolution);
                    this._fixContainer();
                }
            });
            var OriginalContainer = cc.Class({
                name: 'OriginalContainer',
                extends: cc.ContainerStrategy,
                apply: function apply(view) {
                    this._setupContainer(view, cc.game.canvas.width, cc.game.canvas.height);
                }
            });
            cc.ContainerStrategy.EQUAL_TO_FRAME = new EqualToFrame();
            cc.ContainerStrategy.PROPORTION_TO_FRAME = new ProportionalToFrame();
            cc.ContainerStrategy.ORIGINAL_CONTAINER = new OriginalContainer();
            var ExactFit = cc.Class({
                name: 'ExactFit',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, scaleX = containerW / designedResolution.width, scaleY = containerH / designedResolution.height;
                    return this._buildResult(containerW, containerH, containerW, containerH, scaleX, scaleY);
                }
            });
            var ShowAll = cc.Class({
                name: 'ShowAll',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, designH = designedResolution.height, scaleX = containerW / designW, scaleY = containerH / designH, scale = 0, contentW, contentH;
                    scaleX < scaleY ? (scale = scaleX, contentW = containerW, contentH = designH * scale) : (scale = scaleY, contentW = designW * scale, contentH = containerH);
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            var NoBorder = cc.Class({
                name: 'NoBorder',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, designH = designedResolution.height, scaleX = containerW / designW, scaleY = containerH / designH, scale, contentW, contentH;
                    scaleX < scaleY ? (scale = scaleY, contentW = designW * scale, contentH = containerH) : (scale = scaleX, contentW = containerW, contentH = designH * scale);
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            var FixedHeight = cc.Class({
                name: 'FixedHeight',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designH = designedResolution.height, scale = containerH / designH, contentW = containerW, contentH = containerH;
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            var FixedWidth = cc.Class({
                name: 'FixedWidth',
                extends: cc.ContentStrategy,
                apply: function apply(view, designedResolution) {
                    var containerW = cc.game.canvas.width, containerH = cc.game.canvas.height, designW = designedResolution.width, scale = containerW / designW, contentW = containerW, contentH = containerH;
                    return this._buildResult(containerW, containerH, contentW, contentH, scale, scale);
                }
            });
            cc.ContentStrategy.EXACT_FIT = new ExactFit();
            cc.ContentStrategy.SHOW_ALL = new ShowAll();
            cc.ContentStrategy.NO_BORDER = new NoBorder();
            cc.ContentStrategy.FIXED_HEIGHT = new FixedHeight();
            cc.ContentStrategy.FIXED_WIDTH = new FixedWidth();
        }());
        cc.ResolutionPolicy = cc.Class({
            name: 'cc.ResolutionPolicy',
            ctor: function ctor(containerStg, contentStg) {
                this._containerStrategy = null;
                this._contentStrategy = null;
                this.setContainerStrategy(containerStg);
                this.setContentStrategy(contentStg);
            },
            preApply: function preApply(view) {
                this._containerStrategy.preApply(view);
                this._contentStrategy.preApply(view);
            },
            apply: function apply(view, designedResolution) {
                this._containerStrategy.apply(view, designedResolution);
                return this._contentStrategy.apply(view, designedResolution);
            },
            postApply: function postApply(view) {
                this._containerStrategy.postApply(view);
                this._contentStrategy.postApply(view);
            },
            setContainerStrategy: function setContainerStrategy(containerStg) {
                if (containerStg instanceof cc.ContainerStrategy)
                    this._containerStrategy = containerStg;
            },
            setContentStrategy: function setContentStrategy(contentStg) {
                if (contentStg instanceof cc.ContentStrategy)
                    this._contentStrategy = contentStg;
            }
        });
        js.get(cc.ResolutionPolicy.prototype, 'canvasSize', function () {
            return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
        });
        cc.ResolutionPolicy.EXACT_FIT = 0;
        cc.ResolutionPolicy.NO_BORDER = 1;
        cc.ResolutionPolicy.SHOW_ALL = 2;
        cc.ResolutionPolicy.FIXED_HEIGHT = 3;
        cc.ResolutionPolicy.FIXED_WIDTH = 4;
        cc.ResolutionPolicy.UNKNOWN = 5;
        cc.view = new View();
        cc.winSize = cc.v2();
        module.exports = cc.view;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,