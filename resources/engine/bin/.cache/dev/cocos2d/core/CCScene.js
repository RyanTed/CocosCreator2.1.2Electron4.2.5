(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/CCScene.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var NIL = function NIL() {
        };
        cc.Scene = cc.Class({
            name: 'cc.Scene',
            extends: require('./CCNode'),
            properties: {
                _is3DNode: {
                    default: true,
                    override: true
                },
                autoReleaseAssets: {
                    default: undefined,
                    type: cc.Boolean
                }
            },
            ctor: function ctor() {
                this._anchorPoint.x = 0;
                this._anchorPoint.y = 0;
                this._activeInHierarchy = false;
                this._inited = !cc.game._isCloning;
                if (CC_EDITOR) {
                    this._prefabSyncedInLiveReload = false;
                }
                this.dependAssets = null;
            },
            destroy: function destroy() {
                if (cc.Object.prototype.destroy.call(this)) {
                    var children = this._children;
                    for (var i = 0; i < children.length; ++i) {
                        children[i].active = false;
                    }
                }
                this._active = false;
                this._activeInHierarchy = false;
            },
            _onHierarchyChanged: NIL,
            _instantiate: null,
            _load: function _load() {
                if (!this._inited) {
                    if (CC_TEST) {
                        cc.assert(!this._activeInHierarchy, 'Should deactivate ActionManager and EventManager by default');
                    }
                    if (CC_EDITOR && this._prefabSyncedInLiveReload) {
                        this._onBatchRestored();
                    } else {
                        this._onBatchCreated();
                    }
                    this._inited = true;
                }
            },
            _activate: function _activate(active) {
                active = active !== false;
                if (CC_EDITOR || CC_TEST) {
                    this._registerIfAttached(active);
                }
                cc.director._nodeActivator.activateNode(this, active);
            }
        });
        module.exports = cc.Scene;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,