(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/dynamic-atlas/atlas.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var RenderTexture = require('../../../assets/CCRenderTexture');
        var space = 2;
        function Atlas(width, height) {
            var texture = new RenderTexture();
            texture.initWithSize(width, height);
            texture.update();
            this._texture = texture;
            this._x = space;
            this._y = space;
            this._nexty = space;
            this._width = width;
            this._height = height;
            this._innerTextureInfos = {};
            this._innerSpriteFrames = [];
        }
        Atlas.DEFAULT_HASH = new RenderTexture()._getHash();
        cc.js.mixin(Atlas.prototype, {
            insertSpriteFrame: function insertSpriteFrame(spriteFrame) {
                var rect = spriteFrame._rect, texture = spriteFrame._texture, info = this._innerTextureInfos[texture._id];
                var sx = rect.x, sy = rect.y;
                if (info) {
                    sx += info.x;
                    sy += info.y;
                } else {
                    var width = texture.width, height = texture.height;
                    if (this._x + width + space > this._width) {
                        this._x = space;
                        this._y = this._nexty;
                    }
                    if (this._y + height > this._nexty) {
                        this._nexty = this._y + height + space;
                    }
                    if (this._nexty > this._height) {
                        return null;
                    }
                    this._texture.drawTextureAt(texture, this._x - 1, this._y);
                    this._texture.drawTextureAt(texture, this._x + 1, this._y);
                    this._texture.drawTextureAt(texture, this._x, this._y - 1);
                    this._texture.drawTextureAt(texture, this._x, this._y + 1);
                    this._texture.drawTextureAt(texture, this._x, this._y);
                    this._innerTextureInfos[texture._id] = {
                        x: this._x,
                        y: this._y,
                        texture: texture
                    };
                    sx += this._x;
                    sy += this._y;
                    this._x += width + space;
                    this._dirty = true;
                }
                var frame = {
                    x: sx,
                    y: sy,
                    texture: this._texture
                };
                this._innerSpriteFrames.push(spriteFrame);
                return frame;
            },
            update: function update() {
                if (!this._dirty)
                    return;
                this._texture.update();
                this._dirty = false;
            },
            deleteInnerTexture: function deleteInnerTexture(texture) {
                if (texture) {
                    delete this._innerTextureInfos[texture._id];
                }
            },
            reset: function reset() {
                this._x = space;
                this._y = space;
                this._nexty = space;
                var frames = this._innerSpriteFrames;
                for (var i = 0, l = frames.length; i < l; i++) {
                    var frame = frames[i];
                    if (!frame.isValid) {
                        continue;
                    }
                    frame._resetDynamicAtlasFrame();
                }
                this._innerSpriteFrames.length = 0;
                this._innerTextureInfos = {};
            },
            destroy: function destroy() {
                this.reset();
                this._texture.destroy();
            }
        });
        module.exports = Atlas;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,