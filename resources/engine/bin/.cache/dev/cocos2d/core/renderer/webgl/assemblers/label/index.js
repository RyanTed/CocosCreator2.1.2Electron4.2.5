(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Label = require('../../../../components/CCLabel');
        var ttfAssembler = require('./2d/ttf');
        var bmfontAssembler = require('./2d/bmfont');
        var letterAssembler = require('./2d/letter');
        var ttfAssembler3D = require('./3d/ttf');
        var bmfontAssembler3D = require('./3d/bmfont');
        var letterAssembler3D = require('./3d/letter');
        var canvasPool = {
            pool: [],
            get: function get() {
                var data = this.pool.pop();
                if (!data) {
                    var canvas = document.createElement('canvas');
                    var context = canvas.getContext('2d');
                    data = {
                        canvas: canvas,
                        context: context
                    };
                }
                return data;
            },
            put: function put(canvas) {
                if (this.pool.length >= 32) {
                    return;
                }
                this.pool.push(canvas);
            }
        };
        var labelAssembler = {
            getAssembler: function getAssembler(comp) {
                var is3DNode = comp.node.is3DNode;
                var assembler = is3DNode ? ttfAssembler3D : ttfAssembler;
                if (comp.font instanceof cc.BitmapFont) {
                    assembler = is3DNode ? bmfontAssembler3D : bmfontAssembler;
                } else if (comp.cacheMode === Label.CacheMode.CHAR) {
                    if (cc.sys.browserType === cc.sys.BROWSER_TYPE_WECHAT_GAME_SUB) {
                        cc.warn('sorry, subdomain does not support CHAR mode currently!');
                    } else {
                        assembler = is3DNode ? letterAssembler3D : letterAssembler;
                    }
                }
                return assembler;
            },
            updateRenderData: function updateRenderData(label) {
                return label.__allocedDatas;
            }
        };
        Label._assembler = labelAssembler;
        Label._canvasPool = canvasPool;
        module.exports = labelAssembler;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,