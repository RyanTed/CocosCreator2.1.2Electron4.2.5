(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/sliced.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var assembler = require('../2d/sliced');
        var vec3 = cc.vmath.vec3;
        var vec3_temp = vec3.create();
        module.exports = js.addon({
            fillBuffers: function fillBuffers(sprite, renderer) {
                if (renderer.worldMatDirty) {
                    this.updateWorldVerts(sprite);
                }
                var renderData = sprite._renderData, node = sprite.node, color = node._color._val, data = renderData._data;
                var buffer = renderer._meshBuffer3D, vertexCount = renderData.vertexCount;
                var uvSliced = sprite.spriteFrame.uvSliced;
                var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
                var vertexOffset = offsetInfo.byteOffset >> 2, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
                for (var i = 4; i < 20; ++i) {
                    var vert = data[i];
                    var uvs = uvSliced[i - 4];
                    vbuf[vertexOffset++] = vert.x;
                    vbuf[vertexOffset++] = vert.y;
                    vbuf[vertexOffset++] = vert.z;
                    vbuf[vertexOffset++] = uvs.u;
                    vbuf[vertexOffset++] = uvs.v;
                    uintbuf[vertexOffset++] = color;
                }
                for (var r = 0; r < 3; ++r) {
                    for (var c = 0; c < 3; ++c) {
                        var start = vertexId + r * 4 + c;
                        ibuf[indiceOffset++] = start;
                        ibuf[indiceOffset++] = start + 1;
                        ibuf[indiceOffset++] = start + 4;
                        ibuf[indiceOffset++] = start + 1;
                        ibuf[indiceOffset++] = start + 5;
                        ibuf[indiceOffset++] = start + 4;
                    }
                }
            },
            updateWorldVerts: function updateWorldVerts(sprite) {
                var node = sprite.node, data = sprite._renderData._data;
                var matrix = node._worldMatrix;
                for (var row = 0; row < 4; ++row) {
                    var rowD = data[row];
                    for (var col = 0; col < 4; ++col) {
                        var colD = data[col];
                        var world = data[4 + row * 4 + col];
                        vec3.set(vec3_temp, colD.x, rowD.y, 0);
                        vec3.transformMat4(world, vec3_temp, matrix);
                    }
                }
            }
        }, assembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,