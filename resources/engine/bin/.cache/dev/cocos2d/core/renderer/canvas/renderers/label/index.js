(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/label/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Label = require('../../../../components/CCLabel');
        var ttf = require('./ttf');
        var bmfont = require('./bmfont');
        var canvasPool = {
            pool: [],
            get: function get() {
                var data = this.pool.pop();
                if (!data) {
                    var canvas = document.createElement('canvas');
                    var context = canvas.getContext('2d');
                    data = {
                        canvas: canvas,
                        context: context
                    };
                }
                return data;
            },
            put: function put(canvas) {
                if (this.pool.length >= 32) {
                    return;
                }
                this.pool.push(canvas);
            }
        };
        Label._canvasPool = canvasPool;
        module.exports = {
            getAssembler: function getAssembler(comp) {
                var assembler = ttf;
                if (comp.font instanceof cc.BitmapFont) {
                    assembler = bmfont;
                }
                return assembler;
            },
            createData: function createData(comp) {
                return comp._assembler.createData(comp);
            },
            draw: function draw(ctx, comp) {
                if (!comp._texture) {
                    return 0;
                }
                var assembler = comp._assembler;
                if (!assembler)
                    return 0;
                assembler.updateRenderData(comp);
                return assembler.draw(ctx, comp);
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,