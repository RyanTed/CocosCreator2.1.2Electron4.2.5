(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../../../platform/CCMacro');
        var Label = require('../../../components/CCLabel');
        var Overflow = Label.Overflow;
        var textUtils = require('../../../utils/text-utils');
        var FontLetterDefinition = function FontLetterDefinition() {
            this._u = 0;
            this._v = 0;
            this._width = 0;
            this._height = 0;
            this._offsetX = 0;
            this._offsetY = 0;
            this._textureID = 0;
            this._validDefinition = false;
            this._xAdvance = 0;
        };
        cc.FontAtlas = function (texture) {
            this._letterDefinitions = {};
            this._texture = texture;
        };
        cc.FontAtlas.prototype = {
            constructor: cc.FontAtlas,
            addLetterDefinitions: function addLetterDefinitions(letter, letterDefinition) {
                this._letterDefinitions[letter] = letterDefinition;
            },
            cloneLetterDefinition: function cloneLetterDefinition() {
                var copyLetterDefinitions = {};
                for (var key in this._letterDefinitions) {
                    var value = new FontLetterDefinition();
                    cc.js.mixin(value, this._letterDefinitions[key]);
                    copyLetterDefinitions[key] = value;
                }
                return copyLetterDefinitions;
            },
            assignLetterDefinitions: function assignLetterDefinitions(letterDefinition) {
                for (var key in this._letterDefinitions) {
                    var newValue = letterDefinition[key];
                    var oldValue = this._letterDefinitions[key];
                    cc.js.mixin(oldValue, newValue);
                }
            },
            scaleFontLetterDefinition: function scaleFontLetterDefinition(scaleFactor) {
                for (var fontDefinition in this._letterDefinitions) {
                    var letterDefinitions = this._letterDefinitions[fontDefinition];
                    letterDefinitions._width *= scaleFactor;
                    letterDefinitions._height *= scaleFactor;
                    letterDefinitions._offsetX *= scaleFactor;
                    letterDefinitions._offsetY *= scaleFactor;
                    letterDefinitions._xAdvance *= scaleFactor;
                }
            },
            getLetterDefinitionForChar: function getLetterDefinitionForChar(char) {
                var hasKey = this._letterDefinitions.hasOwnProperty(char.charCodeAt(0));
                var letterDefinition = void 0;
                if (hasKey) {
                    letterDefinition = this._letterDefinitions[char.charCodeAt(0)];
                } else {
                    letterDefinition = null;
                }
                return letterDefinition;
            }
        };
        var FontAtlasManager = function FontAtlasManager() {
            this._fontAtlas = {};
            this._references = {};
            cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.clear, this);
        };
        FontAtlasManager.prototype.getFontAtlas = function (comp) {
            var fontAsset = comp.font;
            var fntConfig = fontAsset._fntConfig;
            var name = fntConfig.atlasName;
            var atlas = this._fontAtlas[name];
            if (!atlas) {
                atlas = this.createFontAtlas(fontAsset);
                this._fontAtlas[name] = atlas;
            }
            if (!this._references[name]) {
                this._references[name] = [];
            }
            if (this._references[name].indexOf(comp.node._id) === -1) {
                this._references[name].push(comp.node._id);
            }
            return this._fontAtlas[name];
        };
        FontAtlasManager.prototype.releaseFontAtlas = function (font, id) {
            if (!font)
                return;
            if (!(font instanceof cc.BitmapFont))
                return;
            if (!font._fntConfig)
                return;
            var fntConfig = font._fntConfig;
            var name = fntConfig.atlasName;
            var reference = this._references[name];
            if (reference) {
                for (var i = reference.length - 1; i >= 0; i--) {
                    if (reference[i] === id) {
                        reference.splice(i, 1);
                        break;
                    }
                }
            }
            if (!reference || reference.length === 0) {
                delete this._fontAtlas[name];
            }
        };
        FontAtlasManager.prototype.createFontAtlas = function (fontAsset) {
            var spriteFrame = fontAsset.spriteFrame;
            var fntConfig = fontAsset._fntConfig;
            var atlas = new cc.FontAtlas(spriteFrame.texture);
            var fontDict = fntConfig.fontDefDictionary;
            for (var fontDef in fontDict) {
                var letterDefinition = new FontLetterDefinition();
                var rect = fontDict[fontDef].rect;
                letterDefinition._offsetX = fontDict[fontDef].xOffset;
                letterDefinition._offsetY = fontDict[fontDef].yOffset;
                letterDefinition._width = rect.width;
                letterDefinition._height = rect.height;
                letterDefinition._u = rect.x;
                letterDefinition._v = rect.y;
                letterDefinition._textureID = 0;
                letterDefinition._validDefinition = true;
                letterDefinition._xAdvance = fontDict[fontDef].xAdvance;
                atlas.addLetterDefinitions(fontDef, letterDefinition);
            }
            return atlas;
        };
        FontAtlasManager.prototype.clear = function () {
            this._fontAtlas = {};
            this._references = {};
        };
        cc.Label.FontAtlasManager = new FontAtlasManager();
        var LetterInfo = function LetterInfo() {
            this._char = '';
            this._valid = true;
            this._positionX = 0;
            this._positionY = 0;
            this._lineIndex = 0;
        };
        var _tmpRect = cc.rect();
        var _comp = null;
        var _horizontalKernings = [];
        var _lettersInfo = [];
        var _linesWidth = [];
        var _linesOffsetX = [];
        var _labelDimensions = cc.size();
        var _fontAtlas = null;
        var _fntConfig = null;
        var _numberOfLines = 0;
        var _textDesiredHeight = 0;
        var _letterOffsetY = 0;
        var _tailoredTopY = 0;
        var _tailoredBottomY = 0;
        var _bmfontScale = 1;
        var _lineBreakWithoutSpaces = false;
        var _spriteFrame = null;
        var _lineSpacing = 0;
        var _string = '';
        var _fontSize = 0;
        var _originFontSize = 0;
        var _contentSize = cc.size();
        var _hAlign = 0;
        var _vAlign = 0;
        var _spacingX = 0;
        var _lineHeight = 0;
        var _overflow = 0;
        var _isWrapText = false;
        var _labelWidth = 0;
        var _labelHeight = 0;
        var _maxLineWidth = 0;
        module.exports = {
            updateRenderData: function updateRenderData(comp) {
                if (!comp._renderData.vertDirty)
                    return;
                if (_comp === comp)
                    return;
                _comp = comp;
                this._updateProperties();
                this._updateContent();
                _comp._actualFontSize = _fontSize;
                _comp.node.setContentSize(_contentSize);
                _comp._renderData.vertDirty = _comp._renderData.uvDirty = false;
                _comp = null;
                this._resetProperties();
            },
            _updateFontScale: function _updateFontScale() {
                _bmfontScale = _fontSize / _originFontSize;
            },
            _updateProperties: function _updateProperties() {
                var fontAsset = _comp.font;
                _spriteFrame = fontAsset.spriteFrame;
                _fntConfig = fontAsset._fntConfig;
                _fontAtlas = cc.Label.FontAtlasManager.getFontAtlas(_comp);
                _string = _comp.string.toString();
                _fontSize = _comp.fontSize;
                _originFontSize = _fntConfig.fontSize;
                _contentSize.width = _comp.node._contentSize.width;
                _contentSize.height = _comp.node._contentSize.height;
                _hAlign = _comp.horizontalAlign;
                _vAlign = _comp.verticalAlign;
                _spacingX = _comp.spacingX;
                _overflow = _comp.overflow;
                _lineHeight = _comp._lineHeight;
                if (_overflow === Overflow.NONE) {
                    _isWrapText = false;
                } else if (_overflow === Overflow.RESIZE_HEIGHT) {
                    _isWrapText = true;
                } else {
                    _isWrapText = _comp.enableWrapText;
                }
                this._setupBMFontOverflowMetrics();
            },
            _resetProperties: function _resetProperties() {
                _fontAtlas = null;
                _fntConfig = null;
                _spriteFrame = null;
            },
            _updateContent: function _updateContent() {
                this._updateFontScale();
                this._computeHorizontalKerningForText();
                this._alignText();
            },
            _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {
                var string = _string;
                var stringLen = string.length;
                var kerningDict = _fntConfig.kerningDict;
                var horizontalKernings = _horizontalKernings;
                var prev = -1;
                for (var i = 0; i < stringLen; ++i) {
                    var key = string.charCodeAt(i);
                    var kerningAmount = kerningDict[prev << 16 | key & 65535] || 0;
                    if (i < stringLen - 1) {
                        horizontalKernings[i] = kerningAmount;
                    } else {
                        horizontalKernings[i] = 0;
                    }
                    prev = key;
                }
            },
            _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
                var textLen = _string.length;
                var lineIndex = 0;
                var nextTokenX = 0;
                var nextTokenY = 0;
                var longestLine = 0;
                var letterRight = 0;
                var highestY = 0;
                var lowestY = 0;
                var letterDef = null;
                var letterPosition = cc.v2(0, 0);
                this._updateFontScale();
                var letterDefinitions = _fontAtlas._letterDefinitions;
                for (var index = 0; index < textLen;) {
                    var character = _string.charAt(index);
                    if (character === '\n') {
                        _linesWidth.push(letterRight);
                        letterRight = 0;
                        lineIndex++;
                        nextTokenX = 0;
                        nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                        this._recordPlaceholderInfo(index, character);
                        index++;
                        continue;
                    }
                    var tokenLen = nextTokenFunc(_string, index, textLen);
                    var tokenHighestY = highestY;
                    var tokenLowestY = lowestY;
                    var tokenRight = letterRight;
                    var nextLetterX = nextTokenX;
                    var newLine = false;
                    for (var tmp = 0; tmp < tokenLen; ++tmp) {
                        var letterIndex = index + tmp;
                        character = _string.charAt(letterIndex);
                        if (character === '\r') {
                            this._recordPlaceholderInfo(letterIndex, character);
                            continue;
                        }
                        letterDef = _fontAtlas.getLetterDefinitionForChar(character);
                        if (!letterDef) {
                            this._recordPlaceholderInfo(letterIndex, character);
                            console.log('Can\'t find letter definition in texture atlas ' + _fntConfig.atlasName + ' for letter:' + character);
                            continue;
                        }
                        var letterX = nextLetterX + letterDef._offsetX * _bmfontScale;
                        if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef._width * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character)) {
                            _linesWidth.push(letterRight);
                            letterRight = 0;
                            lineIndex++;
                            nextTokenX = 0;
                            nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                            newLine = true;
                            break;
                        } else {
                            letterPosition.x = letterX;
                        }
                        letterPosition.y = nextTokenY - letterDef._offsetY * _bmfontScale;
                        this._recordLetterInfo(letterDefinitions, letterPosition, character, letterIndex, lineIndex);
                        if (letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1) {
                            nextLetterX += _horizontalKernings[letterIndex + 1];
                        }
                        nextLetterX += letterDef._xAdvance * _bmfontScale + _spacingX;
                        tokenRight = letterPosition.x + letterDef._width * _bmfontScale;
                        if (tokenHighestY < letterPosition.y) {
                            tokenHighestY = letterPosition.y;
                        }
                        if (tokenLowestY > letterPosition.y - letterDef._height * _bmfontScale) {
                            tokenLowestY = letterPosition.y - letterDef._height * _bmfontScale;
                        }
                    }
                    if (newLine)
                        continue;
                    nextTokenX = nextLetterX;
                    letterRight = tokenRight;
                    if (highestY < tokenHighestY) {
                        highestY = tokenHighestY;
                    }
                    if (lowestY > tokenLowestY) {
                        lowestY = tokenLowestY;
                    }
                    if (longestLine < letterRight) {
                        longestLine = letterRight;
                    }
                    index += tokenLen;
                }
                _linesWidth.push(letterRight);
                _numberOfLines = lineIndex + 1;
                _textDesiredHeight = _numberOfLines * _lineHeight * _bmfontScale;
                if (_numberOfLines > 1) {
                    _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
                }
                _contentSize.width = _labelWidth;
                _contentSize.height = _labelHeight;
                if (_labelWidth <= 0) {
                    _contentSize.width = parseFloat(longestLine.toFixed(2));
                }
                if (_labelHeight <= 0) {
                    _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2));
                }
                _tailoredTopY = _contentSize.height;
                _tailoredBottomY = 0;
                if (highestY > 0) {
                    _tailoredTopY = _contentSize.height + highestY;
                }
                if (lowestY < -_textDesiredHeight) {
                    _tailoredBottomY = _textDesiredHeight + lowestY;
                }
                return true;
            },
            _getFirstCharLen: function _getFirstCharLen() {
                return 1;
            },
            _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
                var character = text.charAt(startIndex);
                if (textUtils.isUnicodeCJK(character) || character === '\n' || textUtils.isUnicodeSpace(character)) {
                    return 1;
                }
                var len = 1;
                var letterDef = _fontAtlas.getLetterDefinitionForChar(character);
                if (!letterDef) {
                    return len;
                }
                var nextLetterX = letterDef._xAdvance * _bmfontScale + _spacingX;
                var letterX = void 0;
                for (var index = startIndex + 1; index < textLen; ++index) {
                    character = text.charAt(index);
                    letterDef = _fontAtlas.getLetterDefinitionForChar(character);
                    if (!letterDef) {
                        break;
                    }
                    letterX = nextLetterX + letterDef._offsetX * _bmfontScale;
                    if (letterX + letterDef._width * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character) && _maxLineWidth > 0) {
                        return len;
                    }
                    nextLetterX += letterDef._xAdvance * _bmfontScale + _spacingX;
                    if (character === '\n' || textUtils.isUnicodeSpace(character) || textUtils.isUnicodeCJK(character)) {
                        break;
                    }
                    len++;
                }
                return len;
            },
            _multilineTextWrapByWord: function _multilineTextWrapByWord() {
                return this._multilineTextWrap(this._getFirstWordLen);
            },
            _multilineTextWrapByChar: function _multilineTextWrapByChar() {
                return this._multilineTextWrap(this._getFirstCharLen);
            },
            _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, char) {
                if (letterIndex >= _lettersInfo.length) {
                    var tmpInfo = new LetterInfo();
                    _lettersInfo.push(tmpInfo);
                }
                _lettersInfo[letterIndex]._char = char;
                _lettersInfo[letterIndex]._valid = false;
            },
            _recordLetterInfo: function _recordLetterInfo(letterDefinitions, letterPosition, character, letterIndex, lineIndex) {
                if (letterIndex >= _lettersInfo.length) {
                    var tmpInfo = new LetterInfo();
                    _lettersInfo.push(tmpInfo);
                }
                character = character.charCodeAt(0);
                _lettersInfo[letterIndex]._lineIndex = lineIndex;
                _lettersInfo[letterIndex]._char = character;
                _lettersInfo[letterIndex]._valid = letterDefinitions[character]._validDefinition;
                _lettersInfo[letterIndex]._positionX = letterPosition.x;
                _lettersInfo[letterIndex]._positionY = letterPosition.y;
            },
            _alignText: function _alignText() {
                _textDesiredHeight = 0;
                _linesWidth.length = 0;
                if (!_lineBreakWithoutSpaces) {
                    this._multilineTextWrapByWord();
                } else {
                    this._multilineTextWrapByChar();
                }
                this._computeAlignmentOffset();
                if (_overflow === Overflow.SHRINK) {
                    if (_fontSize > 0 && this._isVerticalClamp()) {
                        this._shrinkLabelToContentSize(this._isVerticalClamp);
                    }
                }
                if (!this._updateQuads()) {
                    if (_overflow === Overflow.SHRINK) {
                        this._shrinkLabelToContentSize(this._isHorizontalClamp);
                    }
                }
            },
            _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
                var shouldUpdateContent = true;
                if (!fontSize) {
                    fontSize = 0.1;
                    shouldUpdateContent = false;
                }
                _fontSize = fontSize;
                if (shouldUpdateContent) {
                    this._updateContent();
                }
            },
            _shrinkLabelToContentSize: function _shrinkLabelToContentSize(lambda) {
                var fontSize = _fontSize;
                var originalLineHeight = _lineHeight;
                var fontAtlas = _fontAtlas;
                var i = 0;
                var tempLetterDefinition = fontAtlas.cloneLetterDefinition();
                var flag = true;
                while (lambda()) {
                    ++i;
                    var newFontSize = fontSize - i;
                    flag = false;
                    if (newFontSize <= 0) {
                        break;
                    }
                    var scale = newFontSize / fontSize;
                    fontAtlas.assignLetterDefinitions(tempLetterDefinition);
                    fontAtlas.scaleFontLetterDefinition(scale);
                    _lineHeight = originalLineHeight * scale;
                    if (!_lineBreakWithoutSpaces) {
                        this._multilineTextWrapByWord();
                    } else {
                        this._multilineTextWrapByChar();
                    }
                    this._computeAlignmentOffset();
                }
                _lineHeight = originalLineHeight;
                fontAtlas.assignLetterDefinitions(tempLetterDefinition);
                if (!flag) {
                    if (fontSize - i >= 0) {
                        this._scaleFontSizeDown(fontSize - i);
                    }
                }
            },
            _isVerticalClamp: function _isVerticalClamp() {
                if (_textDesiredHeight > _contentSize.height) {
                    return true;
                } else {
                    return false;
                }
            },
            _isHorizontalClamp: function _isHorizontalClamp() {
                var letterDefinitions = _fontAtlas._letterDefinitions;
                var letterClamp = false;
                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                    var letterInfo = _lettersInfo[ctr];
                    if (letterInfo._valid) {
                        var letterDef = letterDefinitions[letterInfo._char];
                        var px = letterInfo._positionX + letterDef._width * _bmfontScale;
                        var lineIndex = letterInfo._lineIndex;
                        if (_labelWidth > 0) {
                            if (!_isWrapText) {
                                if (px > _contentSize.width) {
                                    letterClamp = true;
                                    break;
                                }
                            } else {
                                var wordWidth = _linesWidth[lineIndex];
                                if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                                    letterClamp = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                return letterClamp;
            },
            _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
                var wordWidth = _linesWidth[lineIndex];
                var letterOverClamp = px > _contentSize.width || px < 0;
                if (!_isWrapText) {
                    return letterOverClamp;
                } else {
                    return wordWidth > _contentSize.width && letterOverClamp;
                }
            },
            _updateQuads: function _updateQuads() {
                var letterDefinitions = _fontAtlas._letterDefinitions;
                var texture = _spriteFrame._texture;
                var node = _comp.node;
                var renderData = _comp._renderData;
                renderData.dataLength = renderData.vertexCount = renderData.indiceCount = 0;
                var contentSize = _contentSize, appx = node._anchorPoint.x * contentSize.width, appy = node._anchorPoint.y * contentSize.height;
                var ret = true;
                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                    var letterInfo = _lettersInfo[ctr];
                    if (!letterInfo._valid)
                        continue;
                    var letterDef = letterDefinitions[letterInfo._char];
                    _tmpRect.height = letterDef._height;
                    _tmpRect.width = letterDef._width;
                    _tmpRect.x = letterDef._u;
                    _tmpRect.y = letterDef._v;
                    var py = letterInfo._positionY + _letterOffsetY;
                    if (_labelHeight > 0) {
                        if (py > _tailoredTopY) {
                            var clipTop = py - _tailoredTopY;
                            _tmpRect.y += clipTop;
                            _tmpRect.height -= clipTop;
                            py = py - clipTop;
                        }
                        if (py - letterDef._height * _bmfontScale < _tailoredBottomY) {
                            _tmpRect.height = py < _tailoredBottomY ? 0 : py - _tailoredBottomY;
                        }
                    }
                    var lineIndex = letterInfo._lineIndex;
                    var px = letterInfo._positionX + letterDef._width / 2 * _bmfontScale + _linesOffsetX[lineIndex];
                    if (_labelWidth > 0) {
                        if (this._isHorizontalClamped(px, lineIndex)) {
                            if (_overflow === Overflow.CLAMP) {
                                _tmpRect.width = 0;
                            } else if (_overflow === Overflow.SHRINK) {
                                if (_contentSize.width > letterDef._width) {
                                    ret = false;
                                    break;
                                } else {
                                    _tmpRect.width = 0;
                                }
                            }
                        }
                    }
                    if (_tmpRect.height > 0 && _tmpRect.width > 0) {
                        var isRotated = _spriteFrame.isRotated();
                        var originalSize = _spriteFrame._originalSize;
                        var rect = _spriteFrame._rect;
                        var offset = _spriteFrame._offset;
                        var trimmedLeft = offset.x + (originalSize.width - rect.width) / 2;
                        var trimmedTop = offset.y - (originalSize.height - rect.height) / 2;
                        if (!isRotated) {
                            _tmpRect.x += rect.x - trimmedLeft;
                            _tmpRect.y += rect.y + trimmedTop;
                        } else {
                            var originalX = _tmpRect.x;
                            _tmpRect.x = rect.x + rect.height - _tmpRect.y - _tmpRect.height - trimmedTop;
                            _tmpRect.y = originalX + rect.y - trimmedLeft;
                            if (_tmpRect.y < 0) {
                                _tmpRect.height = _tmpRect.height + trimmedTop;
                            }
                        }
                        var letterPositionX = letterInfo._positionX + _linesOffsetX[letterInfo._lineIndex];
                        this.appendQuad(renderData, texture, _tmpRect, isRotated, letterPositionX - appx, py - appy, _bmfontScale);
                    }
                }
                return ret;
            },
            appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {
            },
            _computeAlignmentOffset: function _computeAlignmentOffset() {
                _linesOffsetX.length = 0;
                switch (_hAlign) {
                case macro.TextAlignment.LEFT:
                    for (var i = 0; i < _numberOfLines; ++i) {
                        _linesOffsetX.push(0);
                    }
                    break;
                case macro.TextAlignment.CENTER:
                    for (var _i = 0, l = _linesWidth.length; _i < l; _i++) {
                        _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
                    }
                    break;
                case macro.TextAlignment.RIGHT:
                    for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) {
                        _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
                    }
                    break;
                default:
                    break;
                }
                switch (_vAlign) {
                case macro.VerticalTextAlignment.TOP:
                    _letterOffsetY = _contentSize.height;
                    break;
                case macro.VerticalTextAlignment.CENTER:
                    _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2;
                    break;
                case macro.VerticalTextAlignment.BOTTOM:
                    _letterOffsetY = _textDesiredHeight;
                    break;
                default:
                    break;
                }
            },
            _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
                var newWidth = _contentSize.width, newHeight = _contentSize.height;
                if (_overflow === Overflow.RESIZE_HEIGHT) {
                    newHeight = 0;
                }
                if (_overflow === Overflow.NONE) {
                    newWidth = 0;
                    newHeight = 0;
                }
                _labelWidth = newWidth;
                _labelHeight = newHeight;
                _labelDimensions.width = newWidth;
                _labelDimensions.height = newHeight;
                _maxLineWidth = newWidth;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,