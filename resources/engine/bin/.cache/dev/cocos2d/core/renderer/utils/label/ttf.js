(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/ttf.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../../../platform/CCMacro');
        var textUtils = require('../../../utils/text-utils');
        var Component = require('../../../components/CCComponent');
        var Label = require('../../../components/CCLabel');
        var LabelOutline = require('../../../components/CCLabelOutline');
        var LabelShadow = require('../../../components/CCLabelShadow');
        var Overflow = Label.Overflow;
        var packToDynamicAtlas = require('../utils').packToDynamicAtlas;
        var deleteFromDynamicAtlas = require('../utils').deleteFromDynamicAtlas;
        var MAX_SIZE = 2048;
        var _invisibleAlpha = (1 / 255).toFixed(3);
        var _context = null;
        var _canvas = null;
        var _texture = null;
        var _fontDesc = '';
        var _string = '';
        var _fontSize = 0;
        var _drawFontSize = 0;
        var _splitedStrings = [];
        var _canvasSize = cc.Size.ZERO;
        var _lineHeight = 0;
        var _hAlign = 0;
        var _vAlign = 0;
        var _color = null;
        var _fontFamily = '';
        var _overflow = Overflow.NONE;
        var _isWrapText = false;
        var _outlineComp = null;
        var _outlineColor = cc.Color.WHITE;
        var _shadowComp = null;
        var _shadowColor = cc.Color.BLACK;
        var _canvasPadding = cc.rect();
        var _contentSizeExtend = cc.Size.ZERO;
        var _nodeContentSize = cc.Size.ZERO;
        var _enableBold = false;
        var _enableItalic = false;
        var _enableUnderline = false;
        var _underlineThickness = 0;
        var _drawUnderlinePos = cc.Vec2.ZERO;
        var _drawUnderlineWidth = 0;
        var _sharedLabelData = void 0;
        module.exports = {
            _getAssemblerData: function _getAssemblerData() {
                _sharedLabelData = Label._canvasPool.get();
                _sharedLabelData.canvas.width = _sharedLabelData.canvas.height = 1;
                return _sharedLabelData;
            },
            _resetAssemblerData: function _resetAssemblerData(assemblerData) {
                if (assemblerData) {
                    Label._canvasPool.put(assemblerData);
                }
            },
            updateRenderData: function updateRenderData(comp) {
                if (!comp._renderData.vertDirty)
                    return;
                this._updateFontFamily(comp);
                this._updateProperties(comp);
                this._calculateLabelFont();
                this._calculateSplitedStrings();
                this._updateLabelDimensions();
                this._calculateTextBaseline();
                this._updateTexture(comp);
                this._calDynamicAtlas(comp);
                comp._actualFontSize = _fontSize;
                comp.node.setContentSize(_nodeContentSize);
                this._updateVerts(comp);
                comp._renderData.vertDirty = comp._renderData.uvDirty = false;
                _context = null;
                _canvas = null;
                _texture = null;
            },
            _updateVerts: function _updateVerts() {
            },
            _updateFontFamily: function _updateFontFamily(comp) {
                if (!comp.useSystemFont) {
                    if (comp.font) {
                        if (comp.font._nativeAsset) {
                            _fontFamily = comp.font._nativeAsset;
                        } else {
                            _fontFamily = cc.loader.getRes(comp.font.nativeUrl);
                            if (!_fontFamily) {
                                cc.loader.load(comp.font.nativeUrl, function (err, fontFamily) {
                                    _fontFamily = fontFamily || 'Arial';
                                    comp.font._nativeAsset = fontFamily;
                                    comp._updateRenderData(true);
                                });
                            }
                        }
                    } else {
                        _fontFamily = 'Arial';
                    }
                } else {
                    _fontFamily = comp.fontFamily;
                }
            },
            _updatePaddingRect: function _updatePaddingRect() {
                var top = 0, bottom = 0, left = 0, right = 0;
                var outlineWidth = 0;
                _contentSizeExtend.width = _contentSizeExtend.height = 0;
                if (_outlineComp) {
                    outlineWidth = _outlineComp.width;
                    top = bottom = left = right = outlineWidth;
                    _contentSizeExtend.width = _contentSizeExtend.height = outlineWidth * 2;
                }
                if (_shadowComp) {
                    var shadowWidth = _shadowComp.blur + outlineWidth;
                    left = Math.max(left, -_shadowComp._offset.x + shadowWidth);
                    right = Math.max(right, _shadowComp._offset.x + shadowWidth);
                    top = Math.max(top, _shadowComp._offset.y + shadowWidth);
                    bottom = Math.max(bottom, -_shadowComp._offset.y + shadowWidth);
                }
                if (_enableItalic) {
                    var offset = _drawFontSize * Math.tan(12 * 0.0174532925);
                    right += offset;
                    _contentSizeExtend.width += offset;
                }
                _canvasPadding.x = left;
                _canvasPadding.y = top;
                _canvasPadding.width = left + right;
                _canvasPadding.height = top + bottom;
            },
            _updateProperties: function _updateProperties(comp) {
                var assemblerData = comp._assemblerData;
                _context = assemblerData.context;
                _canvas = assemblerData.canvas;
                _texture = comp._frame._original ? comp._frame._original._texture : comp._frame._texture;
                _string = comp.string.toString();
                _fontSize = comp._fontSize;
                _drawFontSize = _fontSize;
                _underlineThickness = _drawFontSize / 8;
                _overflow = comp.overflow;
                _canvasSize.width = comp.node.width;
                _canvasSize.height = comp.node.height;
                _nodeContentSize = comp.node.getContentSize();
                _lineHeight = comp._lineHeight;
                _hAlign = comp.horizontalAlign;
                _vAlign = comp.verticalAlign;
                _color = comp.node.color;
                _enableBold = comp._isBold;
                _enableItalic = comp._isItalic;
                _enableUnderline = comp._isUnderline;
                if (_overflow === Overflow.NONE) {
                    _isWrapText = false;
                } else if (_overflow === Overflow.RESIZE_HEIGHT) {
                    _isWrapText = true;
                } else {
                    _isWrapText = comp.enableWrapText;
                }
                _outlineComp = LabelOutline && comp.getComponent(LabelOutline);
                _outlineComp = _outlineComp && _outlineComp.enabled && _outlineComp.width > 0 ? _outlineComp : null;
                if (_outlineComp) {
                    _outlineColor.set(_outlineComp.color);
                }
                _shadowComp = LabelShadow && comp.getComponent(LabelShadow);
                _shadowComp = _shadowComp && _shadowComp.enabled ? _shadowComp : null;
                if (_shadowComp) {
                    _shadowColor.set(_shadowComp.color);
                    _shadowColor.a = _shadowColor.a * comp.node.color.a / 255;
                }
                this._updatePaddingRect();
            },
            _calculateFillTextStartPosition: function _calculateFillTextStartPosition() {
                var labelX = 0;
                if (_hAlign === macro.TextAlignment.RIGHT) {
                    labelX = _canvasSize.width - _canvasPadding.width;
                } else if (_hAlign === macro.TextAlignment.CENTER) {
                    labelX = (_canvasSize.width - _canvasPadding.width) / 2;
                }
                var firstLinelabelY = 0;
                var lineHeight = this._getLineHeight();
                var drawStartY = lineHeight * (_splitedStrings.length - 1);
                if (_vAlign === macro.VerticalTextAlignment.TOP) {
                    firstLinelabelY = _fontSize;
                } else if (_vAlign === macro.VerticalTextAlignment.CENTER) {
                    firstLinelabelY = (_canvasSize.height - drawStartY) * 0.5 + _fontSize * textUtils.MIDDLE_RATIO - _canvasPadding.height / 2;
                } else {
                    firstLinelabelY = _canvasSize.height - drawStartY - _fontSize * textUtils.BASELINE_RATIO - _canvasPadding.height;
                }
                return cc.v2(labelX + _canvasPadding.x, firstLinelabelY + _canvasPadding.y);
            },
            _setupOutline: function _setupOutline() {
                _context.strokeStyle = 'rgba(' + _outlineColor.r + ', ' + _outlineColor.g + ', ' + _outlineColor.b + ', ' + _outlineColor.a / 255 + ')';
                _context.lineWidth = _outlineComp.width * 2;
            },
            _setupShadow: function _setupShadow() {
                _context.shadowColor = 'rgba(' + _shadowColor.r + ', ' + _shadowColor.g + ', ' + _shadowColor.b + ', ' + _shadowColor.a / 255 + ')';
                _context.shadowBlur = _shadowComp.blur;
                _context.shadowOffsetX = _shadowComp.offset.x;
                _context.shadowOffsetY = -_shadowComp.offset.y;
            },
            _drawUnderline: function _drawUnderline(underlinewidth) {
                if (_outlineComp) {
                    this._setupOutline();
                    _context.strokeRect(_drawUnderlinePos.x, _drawUnderlinePos.y, underlinewidth, _underlineThickness);
                }
                _context.lineWidth = _underlineThickness;
                _context.fillStyle = 'rgba(' + _color.r + ', ' + _color.g + ', ' + _color.b + ', ' + _color.a / 255 + ')';
                _context.fillRect(_drawUnderlinePos.x, _drawUnderlinePos.y, underlinewidth, _underlineThickness);
            },
            _updateTexture: function _updateTexture() {
                _context.clearRect(0, 0, _canvas.width, _canvas.height);
                var _fillColor = _outlineComp ? _outlineColor : _color;
                _context.fillStyle = 'rgba(' + _fillColor.r + ', ' + _fillColor.g + ', ' + _fillColor.b + ', ' + _invisibleAlpha + ')';
                _context.fillRect(0, 0, _canvas.width, _canvas.height);
                _context.font = _fontDesc;
                var startPosition = this._calculateFillTextStartPosition();
                var lineHeight = this._getLineHeight();
                _context.lineJoin = 'round';
                _context.fillStyle = 'rgba(' + _color.r + ', ' + _color.g + ', ' + _color.b + ', 1)';
                var isMultiple = _splitedStrings.length > 1;
                var measureText = this._measureText(_context);
                var drawTextPosX = 0, drawTextPosY = 0;
                if (_shadowComp) {
                    this._setupShadow();
                }
                if (_outlineComp) {
                    this._setupOutline();
                }
                for (var i = 0; i < _splitedStrings.length; ++i) {
                    drawTextPosX = startPosition.x;
                    drawTextPosY = startPosition.y + i * lineHeight;
                    if (_shadowComp) {
                        if (isMultiple) {
                            if (_outlineComp) {
                                _context.strokeText(_splitedStrings[i], drawTextPosX, drawTextPosY);
                            }
                            _context.fillText(_splitedStrings[i], drawTextPosX, drawTextPosY);
                        }
                    }
                    if (_enableUnderline) {
                        _drawUnderlineWidth = measureText(_splitedStrings[i]);
                        if (_hAlign === macro.TextAlignment.RIGHT) {
                            _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth;
                        } else if (_hAlign === macro.TextAlignment.CENTER) {
                            _drawUnderlinePos.x = startPosition.x - _drawUnderlineWidth / 2;
                        } else {
                            _drawUnderlinePos.x = startPosition.x;
                        }
                        _drawUnderlinePos.y = drawTextPosY;
                        this._drawUnderline(_drawUnderlineWidth);
                    }
                }
                if (_shadowComp && isMultiple) {
                    _context.shadowColor = 'transparent';
                }
                for (var _i = 0; _i < _splitedStrings.length; ++_i) {
                    drawTextPosX = startPosition.x;
                    drawTextPosY = startPosition.y + _i * lineHeight;
                    if (_outlineComp) {
                        _context.strokeText(_splitedStrings[_i], drawTextPosX, drawTextPosY);
                    }
                    _context.fillText(_splitedStrings[_i], drawTextPosX, drawTextPosY);
                }
                if (_shadowComp) {
                    _context.shadowColor = 'transparent';
                }
                _texture.handleLoadedTexture();
            },
            _calDynamicAtlas: function _calDynamicAtlas(comp) {
                if (comp.cacheMode !== Label.CacheMode.BITMAP)
                    return;
                var frame = comp._frame;
                deleteFromDynamicAtlas(comp, frame);
                if (!frame._original) {
                    frame.setRect(cc.rect(0, 0, _canvas.width, _canvas.height));
                }
                packToDynamicAtlas(comp, frame);
            },
            _updateLabelDimensions: function _updateLabelDimensions() {
                var paragraphedStrings = _string.split('\n');
                if (_overflow === Overflow.RESIZE_HEIGHT) {
                    var rawHeight = (_splitedStrings.length + textUtils.BASELINE_RATIO) * this._getLineHeight();
                    _canvasSize.height = rawHeight + _canvasPadding.height;
                    _nodeContentSize.height = rawHeight + _contentSizeExtend.height;
                } else if (_overflow === Overflow.NONE) {
                    _splitedStrings = paragraphedStrings;
                    var canvasSizeX = 0;
                    var canvasSizeY = 0;
                    for (var i = 0; i < paragraphedStrings.length; ++i) {
                        var paraLength = textUtils.safeMeasureText(_context, paragraphedStrings[i]);
                        canvasSizeX = canvasSizeX > paraLength ? canvasSizeX : paraLength;
                    }
                    canvasSizeY = (_splitedStrings.length + textUtils.BASELINE_RATIO) * this._getLineHeight();
                    var rawWidth = parseFloat(canvasSizeX.toFixed(2));
                    var _rawHeight = parseFloat(canvasSizeY.toFixed(2));
                    _canvasSize.width = rawWidth + _canvasPadding.width;
                    _canvasSize.height = _rawHeight + _canvasPadding.height;
                    _nodeContentSize.width = rawWidth + _contentSizeExtend.width;
                    _nodeContentSize.height = _rawHeight + _contentSizeExtend.height;
                }
                _canvasSize.width = Math.min(_canvasSize.width, MAX_SIZE);
                _canvasSize.height = Math.min(_canvasSize.height, MAX_SIZE);
                if (_canvas.width !== _canvasSize.width || CC_QQPLAY) {
                    _canvas.width = _canvasSize.width;
                }
                if (_canvas.height !== _canvasSize.height) {
                    _canvas.height = _canvasSize.height;
                }
            },
            _calculateTextBaseline: function _calculateTextBaseline() {
                var node = this._node;
                var hAlign = void 0;
                if (_hAlign === macro.TextAlignment.RIGHT) {
                    hAlign = 'right';
                } else if (_hAlign === macro.TextAlignment.CENTER) {
                    hAlign = 'center';
                } else {
                    hAlign = 'left';
                }
                _context.textAlign = hAlign;
                _context.textBaseline = 'alphabetic';
            },
            _calculateSplitedStrings: function _calculateSplitedStrings() {
                var paragraphedStrings = _string.split('\n');
                if (_isWrapText) {
                    _splitedStrings = [];
                    var canvasWidthNoMargin = _nodeContentSize.width;
                    for (var i = 0; i < paragraphedStrings.length; ++i) {
                        var allWidth = textUtils.safeMeasureText(_context, paragraphedStrings[i]);
                        var textFragment = textUtils.fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context));
                        _splitedStrings = _splitedStrings.concat(textFragment);
                    }
                } else {
                    _splitedStrings = paragraphedStrings;
                }
            },
            _getFontDesc: function _getFontDesc() {
                var fontDesc = _fontSize.toString() + 'px ';
                fontDesc = fontDesc + _fontFamily;
                if (_enableBold) {
                    fontDesc = 'bold ' + fontDesc;
                }
                if (_enableItalic) {
                    fontDesc = 'italic ' + fontDesc;
                }
                return fontDesc;
            },
            _getLineHeight: function _getLineHeight() {
                var nodeSpacingY = _lineHeight;
                if (nodeSpacingY === 0) {
                    nodeSpacingY = _fontSize;
                } else {
                    nodeSpacingY = nodeSpacingY * _fontSize / _drawFontSize;
                }
                return nodeSpacingY | 0;
            },
            _calculateParagraphLength: function _calculateParagraphLength(paragraphedStrings, ctx) {
                var paragraphLength = [];
                for (var i = 0; i < paragraphedStrings.length; ++i) {
                    var width = textUtils.safeMeasureText(ctx, paragraphedStrings[i]);
                    paragraphLength.push(width);
                }
                return paragraphLength;
            },
            _measureText: function _measureText(ctx) {
                return function (string) {
                    return textUtils.safeMeasureText(ctx, string);
                };
            },
            _calculateLabelFont: function _calculateLabelFont() {
                _fontDesc = this._getFontDesc();
                _context.font = _fontDesc;
                if (_overflow === Overflow.SHRINK) {
                    var paragraphedStrings = _string.split('\n');
                    var paragraphLength = this._calculateParagraphLength(paragraphedStrings, _context);
                    var i = 0;
                    var totalHeight = 0;
                    var maxLength = 0;
                    if (_isWrapText) {
                        var canvasWidthNoMargin = _nodeContentSize.width;
                        var canvasHeightNoMargin = _nodeContentSize.height;
                        if (canvasWidthNoMargin < 0 || canvasHeightNoMargin < 0) {
                            _fontDesc = this._getFontDesc();
                            _context.font = _fontDesc;
                            return;
                        }
                        totalHeight = canvasHeightNoMargin + 1;
                        maxLength = canvasWidthNoMargin + 1;
                        var actualFontSize = _fontSize + 1;
                        var textFragment = '';
                        var tryDivideByTwo = true;
                        var startShrinkFontSize = actualFontSize | 0;
                        while (totalHeight > canvasHeightNoMargin || maxLength > canvasWidthNoMargin) {
                            if (tryDivideByTwo) {
                                actualFontSize = startShrinkFontSize / 2 | 0;
                            } else {
                                actualFontSize = startShrinkFontSize - 1;
                                startShrinkFontSize = actualFontSize;
                            }
                            if (actualFontSize <= 0) {
                                cc.logID(4003);
                                break;
                            }
                            _fontSize = actualFontSize;
                            _fontDesc = this._getFontDesc();
                            _context.font = _fontDesc;
                            totalHeight = 0;
                            for (i = 0; i < paragraphedStrings.length; ++i) {
                                var j = 0;
                                var allWidth = textUtils.safeMeasureText(_context, paragraphedStrings[i]);
                                textFragment = textUtils.fragmentText(paragraphedStrings[i], allWidth, canvasWidthNoMargin, this._measureText(_context));
                                while (j < textFragment.length) {
                                    maxLength = textUtils.safeMeasureText(_context, textFragment[j]);
                                    totalHeight += this._getLineHeight();
                                    ++j;
                                }
                            }
                            if (tryDivideByTwo) {
                                if (totalHeight > canvasHeightNoMargin) {
                                    startShrinkFontSize = actualFontSize | 0;
                                } else {
                                    tryDivideByTwo = false;
                                    totalHeight = canvasHeightNoMargin + 1;
                                }
                            }
                        }
                    } else {
                        totalHeight = paragraphedStrings.length * this._getLineHeight();
                        for (i = 0; i < paragraphedStrings.length; ++i) {
                            if (maxLength < paragraphLength[i]) {
                                maxLength = paragraphLength[i];
                            }
                        }
                        var scaleX = (_canvasSize.width - _canvasPadding.width) / maxLength;
                        var scaleY = _canvasSize.height / totalHeight;
                        _fontSize = _drawFontSize * Math.min(1, scaleX, scaleY) | 0;
                        _fontDesc = this._getFontDesc();
                        _context.font = _fontDesc;
                    }
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,