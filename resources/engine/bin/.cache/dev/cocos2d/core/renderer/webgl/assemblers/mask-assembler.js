(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/mask-assembler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Mask = require('../../../components/CCMask');
        var RenderFlow = require('../../render-flow');
        var spriteAssembler = require('./sprite/2d/simple');
        var graphicsAssembler = require('./graphics');
        var gfx = require('../../../../renderer/gfx');
        var vfmtPos = require('../vertex-format').vfmtPos;
        var _maxLevel = 8;
        var _maskStack = [];
        function getWriteMask() {
            return 1 << _maskStack.length - 1;
        }
        function getStencilRef() {
            var result = 0;
            for (var i = 0; i < _maskStack.length; ++i) {
                result += 1 << i;
            }
            return result;
        }
        function applyStencil(material, func, failOp, ref, stencilMask, writeMask) {
            var effect = material.effect;
            var technique = effect.getDefaultTechnique();
            var passes = technique.passes;
            var zFailOp = gfx.STENCIL_OP_KEEP, zPassOp = gfx.STENCIL_OP_KEEP;
            for (var i = 0; i < passes.length; ++i) {
                var pass = passes[i];
                pass.setStencilFront(gfx.STENCIL_ENABLE, func, ref, stencilMask, failOp, zFailOp, zPassOp, writeMask);
                pass.setStencilBack(gfx.STENCIL_ENABLE, func, ref, stencilMask, failOp, zFailOp, zPassOp, writeMask);
            }
        }
        function pushMask(mask) {
            if (_maskStack.length + 1 > _maxLevel) {
                cc.errorID(9000, _maxLevel);
            }
            _maskStack.push(mask);
        }
        function exitMask(mask, renderer) {
            if (_maskStack.length === 0) {
                cc.errorID(9001);
            }
            _maskStack.pop();
            if (_maskStack.length === 0) {
                renderer._flushMaterial(mask._exitMaterial);
            } else {
                enableMask(renderer);
            }
        }
        function applyClearMask(mask, renderer) {
            var func = gfx.DS_FUNC_NEVER;
            var ref = getWriteMask();
            var stencilMask = ref;
            var writeMask = ref;
            var failOp = mask.inverted ? gfx.STENCIL_OP_REPLACE : gfx.STENCIL_OP_ZERO;
            applyStencil(mask._clearMaterial, func, failOp, ref, stencilMask, writeMask);
            var buffer = renderer.getBuffer('mesh', vfmtPos);
            var offsetInfo = buffer.request(4, 6);
            var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, ibuf = buffer._iData;
            vbuf[vertexOffset++] = -1;
            vbuf[vertexOffset++] = -1;
            vbuf[vertexOffset++] = -1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = 1;
            vbuf[vertexOffset++] = -1;
            ibuf[indiceOffset++] = vertexId;
            ibuf[indiceOffset++] = vertexId + 3;
            ibuf[indiceOffset++] = vertexId + 1;
            ibuf[indiceOffset++] = vertexId + 1;
            ibuf[indiceOffset++] = vertexId + 3;
            ibuf[indiceOffset++] = vertexId + 2;
            renderer.node = renderer._dummyNode;
            renderer.material = mask._clearMaterial;
            renderer._flush();
        }
        function applyAreaMask(mask, renderer) {
            var func = gfx.DS_FUNC_NEVER;
            var ref = getWriteMask();
            var stencilMask = ref;
            var writeMask = ref;
            var failOp = mask.inverted ? gfx.STENCIL_OP_ZERO : gfx.STENCIL_OP_REPLACE;
            applyStencil(mask.sharedMaterials[0], func, failOp, ref, stencilMask, writeMask);
            renderer.node = mask.node;
            renderer.material = mask.sharedMaterials[0];
            if (mask._type === Mask.Type.IMAGE_STENCIL) {
                spriteAssembler.fillBuffers(mask, renderer);
                renderer._flush();
            } else {
                graphicsAssembler.fillBuffers(mask._graphics, renderer);
            }
        }
        function enableMask(renderer) {
            var func = gfx.DS_FUNC_EQUAL;
            var failOp = gfx.STENCIL_OP_KEEP;
            var ref = getStencilRef();
            var stencilMask = ref;
            var writeMask = getWriteMask();
            var mask = _maskStack[_maskStack.length - 1];
            applyStencil(mask._enableMaterial, func, failOp, ref, stencilMask, writeMask);
            renderer._flushMaterial(mask._enableMaterial);
        }
        var maskFrontAssembler = {
            updateRenderData: function updateRenderData(mask) {
                if (!mask._renderData) {
                    if (mask._type === Mask.Type.IMAGE_STENCIL) {
                        mask._renderData = spriteAssembler.createData(mask);
                    } else {
                        mask._renderData = mask.requestRenderData();
                    }
                }
                var renderData = mask._renderData;
                if (mask._type === Mask.Type.IMAGE_STENCIL) {
                    if (mask.spriteFrame) {
                        var size = mask.node._contentSize;
                        var anchor = mask.node._anchorPoint;
                        renderData.updateSizeNPivot(size.width, size.height, anchor.x, anchor.y);
                        renderData.dataLength = 4;
                        spriteAssembler.updateRenderData(mask);
                        renderData.material = mask.sharedMaterials[0];
                    } else {
                        mask.setMaterial(0, null);
                    }
                } else {
                    mask._graphics.setMaterial(0, mask.sharedMaterials[0]);
                    graphicsAssembler.updateRenderData(mask._graphics);
                }
            },
            fillBuffers: function fillBuffers(mask, renderer) {
                if (mask._type !== Mask.Type.IMAGE_STENCIL || mask.spriteFrame) {
                    pushMask(mask);
                    applyClearMask(mask, renderer);
                    applyAreaMask(mask, renderer);
                    enableMask(renderer);
                }
                mask.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
            }
        };
        var maskEndAssembler = {
            fillBuffers: function fillBuffers(mask, renderer) {
                if (mask._type !== Mask.Type.IMAGE_STENCIL || mask.spriteFrame) {
                    exitMask(mask, renderer);
                }
                mask.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
            }
        };
        Mask._assembler = maskFrontAssembler;
        Mask._postAssembler = maskEndAssembler;
        module.exports = {
            front: maskFrontAssembler,
            end: maskEndAssembler
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,