(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/tiled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        module.exports = {
            vertexOffset: 5,
            uvOffset: 2,
            colorOffset: 4,
            createData: function createData(sprite) {
                return sprite.requestRenderData();
            },
            updateRenderData: function updateRenderData(sprite) {
                packToDynamicAtlas(sprite, sprite._spriteFrame);
                var renderData = sprite._renderData;
                var frame = sprite.spriteFrame;
                if (!frame || !renderData || !(renderData.uvDirty || renderData.vertDirty))
                    return;
                var node = sprite.node, contentWidth = Math.abs(node.width), contentHeight = Math.abs(node.height), appx = node.anchorX * contentWidth, appy = node.anchorY * contentHeight;
                var rect = frame._rect, rectWidth = rect.width, rectHeight = rect.height, hRepeat = contentWidth / rectWidth, vRepeat = contentHeight / rectHeight, row = Math.ceil(vRepeat), col = Math.ceil(hRepeat);
                var data = renderData._data;
                renderData.dataLength = Math.max(8, row + 1, col + 1);
                for (var i = 0; i <= col; ++i) {
                    data[i].x = Math.min(rectWidth * i, contentWidth) - appx;
                }
                for (var _i = 0; _i <= row; ++_i) {
                    data[_i].y = Math.min(rectHeight * _i, contentHeight) - appy;
                }
                renderData.vertexCount = row * col * 4;
                renderData.indiceCount = row * col * 6;
                renderData.uvDirty = false;
                renderData.vertDirty = false;
            },
            fillVertices: function fillVertices(vbuf, vertexOffset, matrix, row, col, data) {
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                var x = void 0, x1 = void 0, y = void 0, y1 = void 0;
                for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
                    y = data[yindex].y;
                    y1 = data[yindex + 1].y;
                    for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
                        x = data[xindex].x;
                        x1 = data[xindex + 1].x;
                        vbuf[vertexOffset] = x * a + y * c + tx;
                        vbuf[vertexOffset + 1] = x * b + y * d + ty;
                        vbuf[vertexOffset + 5] = x1 * a + y * c + tx;
                        vbuf[vertexOffset + 6] = x1 * b + y * d + ty;
                        vbuf[vertexOffset + 10] = x * a + y1 * c + tx;
                        vbuf[vertexOffset + 11] = x * b + y1 * d + ty;
                        vbuf[vertexOffset + 15] = x1 * a + y1 * c + tx;
                        vbuf[vertexOffset + 16] = x1 * b + y1 * d + ty;
                        vertexOffset += 20;
                    }
                }
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                var node = sprite.node, is3DNode = node.is3DNode, color = node._color._val, renderData = sprite._renderData, data = renderData._data;
                var buffer = is3DNode ? renderer._meshBuffer3D : renderer._meshBuffer;
                var offsetInfo = buffer.request(renderData.vertexCount, renderData.indiceCount);
                var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
                var rotated = sprite.spriteFrame._rotated;
                var uv = sprite.spriteFrame.uv;
                var rect = sprite.spriteFrame._rect;
                var contentWidth = Math.abs(node.width);
                var contentHeight = Math.abs(node.height);
                var hRepeat = contentWidth / rect.width;
                var vRepeat = contentHeight / rect.height;
                var row = Math.ceil(vRepeat), col = Math.ceil(hRepeat);
                var matrix = node._worldMatrix;
                this.fillVertices(vbuf, vertexOffset, matrix, row, col, data);
                var offset = this.vertexOffset, uvOffset = this.uvOffset, colorOffset = this.colorOffset;
                var offset1 = offset, offset2 = offset * 2, offset3 = offset * 3, offset4 = offset * 4;
                var coefu = void 0, coefv = void 0;
                for (var yindex = 0, ylength = row; yindex < ylength; ++yindex) {
                    coefv = Math.min(1, vRepeat - yindex);
                    for (var xindex = 0, xlength = col; xindex < xlength; ++xindex) {
                        coefu = Math.min(1, hRepeat - xindex);
                        var vertexOffsetU = vertexOffset + uvOffset;
                        var vertexOffsetV = vertexOffsetU + 1;
                        if (rotated) {
                            vbuf[vertexOffsetU] = uv[0];
                            vbuf[vertexOffsetV] = uv[1];
                            vbuf[vertexOffsetU + offset1] = uv[0];
                            vbuf[vertexOffsetV + offset1] = uv[1] + (uv[7] - uv[1]) * coefu;
                            vbuf[vertexOffsetU + offset2] = uv[0] + (uv[6] - uv[0]) * coefv;
                            vbuf[vertexOffsetV + offset2] = uv[1];
                            vbuf[vertexOffsetU + offset3] = vbuf[vertexOffsetU + offset2];
                            vbuf[vertexOffsetV + offset3] = vbuf[vertexOffsetV + offset1];
                        } else {
                            vbuf[vertexOffsetU] = uv[0];
                            vbuf[vertexOffsetV] = uv[1];
                            vbuf[vertexOffsetU + offset1] = uv[0] + (uv[6] - uv[0]) * coefu;
                            vbuf[vertexOffsetV + offset1] = uv[1];
                            vbuf[vertexOffsetU + offset2] = uv[0];
                            vbuf[vertexOffsetV + offset2] = uv[1] + (uv[7] - uv[1]) * coefv;
                            vbuf[vertexOffsetU + offset3] = vbuf[vertexOffsetU + offset1];
                            vbuf[vertexOffsetV + offset3] = vbuf[vertexOffsetV + offset2];
                        }
                        uintbuf[vertexOffset + colorOffset] = color;
                        uintbuf[vertexOffset + colorOffset + offset1] = color;
                        uintbuf[vertexOffset + colorOffset + offset2] = color;
                        uintbuf[vertexOffset + colorOffset + offset3] = color;
                        vertexOffset += offset4;
                    }
                }
                var length = renderData.indiceCount;
                for (var i = 0; i < length; i += 6) {
                    ibuf[indiceOffset++] = vertexId;
                    ibuf[indiceOffset++] = vertexId + 1;
                    ibuf[indiceOffset++] = vertexId + 2;
                    ibuf[indiceOffset++] = vertexId + 1;
                    ibuf[indiceOffset++] = vertexId + 3;
                    ibuf[indiceOffset++] = vertexId + 2;
                    vertexId += 4;
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,