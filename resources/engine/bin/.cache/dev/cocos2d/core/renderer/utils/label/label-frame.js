(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/label-frame.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function LabelFrame() {
            this._rect = null;
            this.uv = [];
            this._texture = null;
            this._original = null;
        }
        LabelFrame.prototype = {
            constructor: LabelFrame,
            getRect: function getRect() {
                return cc.rect(this._rect);
            },
            setRect: function setRect(rect) {
                this._rect = rect;
                if (this._texture)
                    this._calculateUV();
            },
            _setDynamicAtlasFrame: function _setDynamicAtlasFrame(frame) {
                if (!frame)
                    return;
                this._original = {
                    _texture: this._texture,
                    _x: this._rect.x,
                    _y: this._rect.y
                };
                this._texture = frame.texture;
                this._rect.x = frame.x;
                this._rect.y = frame.y;
                this._calculateUV();
            },
            _resetDynamicAtlasFrame: function _resetDynamicAtlasFrame() {
                if (!this._original)
                    return;
                this._rect.x = this._original._x;
                this._rect.y = this._original._y;
                this._texture = this._original._texture;
                this._original = null;
                this._calculateUV();
            },
            _refreshTexture: function _refreshTexture(texture) {
                this._texture = texture;
                this._rect = cc.rect(0, 0, texture.width, texture.height);
                this._calculateUV();
            },
            _calculateUV: function _calculateUV() {
                var rect = this._rect, texture = this._texture, uv = this.uv, texw = texture.width, texh = texture.height;
                var l = texw === 0 ? 0 : rect.x / texw;
                var r = texw === 0 ? 0 : (rect.x + rect.width) / texw;
                var b = texh === 0 ? 0 : (rect.y + rect.height) / texh;
                var t = texh === 0 ? 0 : rect.y / texh;
                uv[0] = l;
                uv[1] = b;
                uv[2] = r;
                uv[3] = b;
                uv[4] = l;
                uv[5] = t;
                uv[6] = r;
                uv[7] = t;
            }
        };
        module.exports = LabelFrame;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhYmVsLWZyYW1lLmpzIiwiQzovVXNlcnMvbmFudGFzL2ZpcmViYWxsLXgvZmJfMjEtcmVsZWFzZS9lbmdpbmUvY29jb3MyZC9jb3JlL3JlbmRlcmVyL3V0aWxzL2xhYmVsL2xhYmVsLWZyYW1lLmpzIl0sIm5hbWVzIjpbIkxhYmVsRnJhbWUiLCJfcmVjdCIsInV2IiwiX3RleHR1cmUiLCJfb3JpZ2luYWwiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsImdldFJlY3QiLCJjYyIsInJlY3QiLCJzZXRSZWN0IiwiX2NhbGN1bGF0ZVVWIiwiX3NldER5bmFtaWNBdGxhc0ZyYW1lIiwiZnJhbWUiLCJfeCIsIngiLCJfeSIsInkiLCJ0ZXh0dXJlIiwiX3Jlc2V0RHluYW1pY0F0bGFzRnJhbWUiLCJfcmVmcmVzaFRleHR1cmUiLCJ3aWR0aCIsImhlaWdodCIsInRleHciLCJ0ZXhoIiwibCIsInIiLCJiIiwidCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTZCQSxTQUFTQSxVQUFULEdBQXVCO0FBQUEsWUFFbkIsS0FBS0MsS0FBTCxHQUFhLElBQWIsQ0FGbUI7QUFBQSxZQUluQixLQUFLQyxFQUFMLEdBQVUsRUFBVixDQUptQjtBQUFBLFlBTW5CLEtBQUtDLFFBQUwsR0FBZ0IsSUFBaEIsQ0FObUI7QUFBQSxZQVFuQixLQUFLQyxTQUFMLEdBQWlCLElBQWpCLENBUm1CO0FBQUE7UUFXdkJKLFVBQUFBLENBQVdLLFNBQVhMLEdBQXVCO0FBQUEsWUFDbkJNLFdBQUFBLEVBQWFOLFVBRE07QUFBQSxZQVNuQk8sT0FBQUEsRUFBUyxTQUFBLE9BQUEsR0FBWTtBQUFBLGdCQUNqQixPQUFPQyxFQUFBQSxDQUFHQyxJQUFIRCxDQUFRLEtBQUtQLEtBQWJPLENBQVAsQ0FEaUI7QUFBQSxhQVRGO0FBQUEsWUFtQm5CRSxPQUFBQSxFQUFTLFNBQUEsT0FBQSxDQUFVRCxJQUFWLEVBQWdCO0FBQUEsZ0JBQ3JCLEtBQUtSLEtBQUwsR0FBYVEsSUFBYixDQURxQjtBQUFBLGdCQUVyQixJQUFJLEtBQUtOLFFBQVQ7QUFBQSxvQkFDSSxLQUFLUSxZQUFMLEdBSGlCO0FBQUEsYUFuQk47QUFBQSxZQXlCbkJDLHFCQUFBQSxFQXpCbUIsU0FBQSxxQkFBQSxDQXlCSUMsS0F6QkosRUF5Qlc7QUFBQSxnQkFDMUIsSUFBSSxDQUFDQSxLQUFMO0FBQUEsb0JBQVksT0FEYztBQUFBLGdCQUcxQixLQUFLVCxTQUFMLEdBQWlCO0FBQUEsb0JBQ2JELFFBQUFBLEVBQVcsS0FBS0EsUUFESDtBQUFBLG9CQUViVyxFQUFBQSxFQUFLLEtBQUtiLEtBQUwsQ0FBV2MsQ0FGSDtBQUFBLG9CQUdiQyxFQUFBQSxFQUFLLEtBQUtmLEtBQUwsQ0FBV2dCLENBSEg7QUFBQSxpQkFBakIsQ0FIMEI7QUFBQSxnQkFTMUIsS0FBS2QsUUFBTCxHQUFnQlUsS0FBQUEsQ0FBTUssT0FBdEIsQ0FUMEI7QUFBQSxnQkFVMUIsS0FBS2pCLEtBQUwsQ0FBV2MsQ0FBWCxHQUFlRixLQUFBQSxDQUFNRSxDQUFyQixDQVYwQjtBQUFBLGdCQVcxQixLQUFLZCxLQUFMLENBQVdnQixDQUFYLEdBQWVKLEtBQUFBLENBQU1JLENBQXJCLENBWDBCO0FBQUEsZ0JBWTFCLEtBQUtOLFlBQUwsR0FaMEI7QUFBQSxhQXpCWDtBQUFBLFlBdUNuQlEsdUJBQUFBLEVBdkNtQixTQUFBLHVCQUFBLEdBdUNRO0FBQUEsZ0JBQ3ZCLElBQUksQ0FBQyxLQUFLZixTQUFWO0FBQUEsb0JBQXFCLE9BREU7QUFBQSxnQkFFdkIsS0FBS0gsS0FBTCxDQUFXYyxDQUFYLEdBQWUsS0FBS1gsU0FBTCxDQUFlVSxFQUE5QixDQUZ1QjtBQUFBLGdCQUd2QixLQUFLYixLQUFMLENBQVdnQixDQUFYLEdBQWUsS0FBS2IsU0FBTCxDQUFlWSxFQUE5QixDQUh1QjtBQUFBLGdCQUl2QixLQUFLYixRQUFMLEdBQWdCLEtBQUtDLFNBQUwsQ0FBZUQsUUFBL0IsQ0FKdUI7QUFBQSxnQkFLdkIsS0FBS0MsU0FBTCxHQUFpQixJQUFqQixDQUx1QjtBQUFBLGdCQU12QixLQUFLTyxZQUFMLEdBTnVCO0FBQUEsYUF2Q1I7QUFBQSxZQWdEbkJTLGVBQUFBLEVBQWlCLFNBQUEsZUFBQSxDQUFVRixPQUFWLEVBQW1CO0FBQUEsZ0JBQ2hDLEtBQUtmLFFBQUwsR0FBZ0JlLE9BQWhCLENBRGdDO0FBQUEsZ0JBRWhDLEtBQUtqQixLQUFMLEdBQWFPLEVBQUFBLENBQUdDLElBQUhELENBQVEsQ0FBUkEsRUFBVyxDQUFYQSxFQUFjVSxPQUFBQSxDQUFRRyxLQUF0QmIsRUFBNkJVLE9BQUFBLENBQVFJLE1BQXJDZCxDQUFiLENBRmdDO0FBQUEsZ0JBR2hDLEtBQUtHLFlBQUwsR0FIZ0M7QUFBQSxhQWhEakI7QUFBQSxZQXNEbkJBLFlBQUFBLEVBdERtQixTQUFBLFlBQUEsR0FzREo7QUFBQSxnQkFDWCxJQUFJRixJQUFBQSxHQUFPLEtBQUtSLEtBQWhCLEVBQ0lpQixPQUFBQSxHQUFVLEtBQUtmLFFBRG5CLEVBRUlELEVBQUFBLEdBQUssS0FBS0EsRUFGZCxFQUdJcUIsSUFBQUEsR0FBT0wsT0FBQUEsQ0FBUUcsS0FIbkIsRUFJSUcsSUFBQUEsR0FBT04sT0FBQUEsQ0FBUUksTUFKbkIsQ0FEVztBQUFBLGdCQU9YLElBQUlHLENBQUFBLEdBQUlGLElBQUFBLEtBQVMsQ0FBVEEsR0FBYSxDQUFiQSxHQUFpQmQsSUFBQUEsQ0FBS00sQ0FBTE4sR0FBU2MsSUFBbEMsQ0FQVztBQUFBLGdCQVFYLElBQUlHLENBQUFBLEdBQUlILElBQUFBLEtBQVMsQ0FBVEEsR0FBYSxDQUFiQSxHQUFrQmQsQ0FBQUEsSUFBQUEsQ0FBS00sQ0FBTE4sR0FBU0EsSUFBQUEsQ0FBS1ksS0FBZFosQ0FBRCxHQUF3QmMsSUFBakQsQ0FSVztBQUFBLGdCQVNYLElBQUlJLENBQUFBLEdBQUlILElBQUFBLEtBQVMsQ0FBVEEsR0FBYSxDQUFiQSxHQUFrQmYsQ0FBQUEsSUFBQUEsQ0FBS1EsQ0FBTFIsR0FBU0EsSUFBQUEsQ0FBS2EsTUFBZGIsQ0FBRCxHQUF5QmUsSUFBbEQsQ0FUVztBQUFBLGdCQVVYLElBQUlJLENBQUFBLEdBQUlKLElBQUFBLEtBQVMsQ0FBVEEsR0FBYSxDQUFiQSxHQUFpQmYsSUFBQUEsQ0FBS1EsQ0FBTFIsR0FBU2UsSUFBbEMsQ0FWVztBQUFBLGdCQVlYdEIsRUFBQUEsQ0FBRyxDQUFIQSxJQUFRdUIsQ0FBUnZCLENBWlc7QUFBQSxnQkFhWEEsRUFBQUEsQ0FBRyxDQUFIQSxJQUFReUIsQ0FBUnpCLENBYlc7QUFBQSxnQkFjWEEsRUFBQUEsQ0FBRyxDQUFIQSxJQUFRd0IsQ0FBUnhCLENBZFc7QUFBQSxnQkFlWEEsRUFBQUEsQ0FBRyxDQUFIQSxJQUFReUIsQ0FBUnpCLENBZlc7QUFBQSxnQkFnQlhBLEVBQUFBLENBQUcsQ0FBSEEsSUFBUXVCLENBQVJ2QixDQWhCVztBQUFBLGdCQWlCWEEsRUFBQUEsQ0FBRyxDQUFIQSxJQUFRMEIsQ0FBUjFCLENBakJXO0FBQUEsZ0JBa0JYQSxFQUFBQSxDQUFHLENBQUhBLElBQVF3QixDQUFSeEIsQ0FsQlc7QUFBQSxnQkFtQlhBLEVBQUFBLENBQUcsQ0FBSEEsSUFBUTBCLENBQVIxQixDQW5CVztBQUFBLGFBdERJO0FBQUEsU0FBdkJGO1FBNkVBNkIsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUI3QixVQUFqQjZCIiwiZmlsZSI6ImxhYmVsLWZyYW1lLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiAhI2VuIENsYXNzIGZvciBMYWJlbCBGcmFtZS5cclxuICogISN6aCBMYWJlbEZyYW1lXHJcbiAqL1xyXG5mdW5jdGlvbiBMYWJlbEZyYW1lICgpIHtcclxuICAgIC8vIHRoZSBsb2NhdGlvbiBvZiB0aGUgbGFiZWwgb24gcmVuZGVyaW5nIHRleHR1cmVcclxuICAgIHRoaXMuX3JlY3QgPSBudWxsO1xyXG4gICAgLy8gdXYgZGF0YSBvZiBmcmFtZVxyXG4gICAgdGhpcy51diA9IFtdO1xyXG4gICAgLy8gdGV4dHVyZSBvZiBmcmFtZVxyXG4gICAgdGhpcy5fdGV4dHVyZSA9IG51bGw7XHJcbiAgICAvLyBzdG9yZSBvcmlnaW5hbCBpbmZvIGJlZm9yZSBwYWNrZWQgdG8gZHluYW1pYyBhdGxhc1xyXG4gICAgdGhpcy5fb3JpZ2luYWwgPSBudWxsO1xyXG59XHJcblxyXG5MYWJlbEZyYW1lLnByb3RvdHlwZSA9IHtcclxuICAgIGNvbnN0cnVjdG9yOiBMYWJlbEZyYW1lLFxyXG5cclxuICAgICAvKipcclxuICAgICAqICEjZW4gUmV0dXJucyB0aGUgcmVjdCBvZiB0aGUgbGFiZWwgZnJhbWUgaW4gdGhlIHRleHR1cmUuXHJcbiAgICAgKiAhI3poIOiOt+WPliBMYWJlbEZyYW1lIOeahOe6ueeQhuefqeW9ouWMuuWfn1xyXG4gICAgICogQG1ldGhvZCBnZXRSZWN0XHJcbiAgICAgKiBAcmV0dXJuIHtSZWN0fVxyXG4gICAgICovXHJcbiAgICBnZXRSZWN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIGNjLnJlY3QodGhpcy5fcmVjdCk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0cyB0aGUgcmVjdCBvZiB0aGUgbGFiZWwgZnJhbWUgaW4gdGhlIHRleHR1cmUuXHJcbiAgICAgKiAhI3poIOiuvue9riBMYWJlbEZyYW1lIOeahOe6ueeQhuefqeW9ouWMuuWfn1xyXG4gICAgICogQG1ldGhvZCBzZXRSZWN0XHJcbiAgICAgKiBAcGFyYW0ge1JlY3R9IHJlY3RcclxuICAgICAqL1xyXG4gICAgc2V0UmVjdDogZnVuY3Rpb24gKHJlY3QpIHtcclxuICAgICAgICB0aGlzLl9yZWN0ID0gcmVjdDtcclxuICAgICAgICBpZiAodGhpcy5fdGV4dHVyZSlcclxuICAgICAgICAgICAgdGhpcy5fY2FsY3VsYXRlVVYoKTtcclxuICAgIH0sXHJcblxyXG4gICAgX3NldER5bmFtaWNBdGxhc0ZyYW1lIChmcmFtZSkge1xyXG4gICAgICAgIGlmICghZnJhbWUpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5fb3JpZ2luYWwgPSB7XHJcbiAgICAgICAgICAgIF90ZXh0dXJlIDogdGhpcy5fdGV4dHVyZSxcclxuICAgICAgICAgICAgX3ggOiB0aGlzLl9yZWN0LngsXHJcbiAgICAgICAgICAgIF95IDogdGhpcy5fcmVjdC55XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3RleHR1cmUgPSBmcmFtZS50ZXh0dXJlO1xyXG4gICAgICAgIHRoaXMuX3JlY3QueCA9IGZyYW1lLng7XHJcbiAgICAgICAgdGhpcy5fcmVjdC55ID0gZnJhbWUueTtcclxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVVVigpO1xyXG4gICAgfSxcclxuICAgIF9yZXNldER5bmFtaWNBdGxhc0ZyYW1lICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX29yaWdpbmFsKSByZXR1cm47XHJcbiAgICAgICAgdGhpcy5fcmVjdC54ID0gdGhpcy5fb3JpZ2luYWwuX3g7XHJcbiAgICAgICAgdGhpcy5fcmVjdC55ID0gdGhpcy5fb3JpZ2luYWwuX3k7XHJcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHRoaXMuX29yaWdpbmFsLl90ZXh0dXJlO1xyXG4gICAgICAgIHRoaXMuX29yaWdpbmFsID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9jYWxjdWxhdGVVVigpO1xyXG4gICAgfSxcclxuXHJcbiAgICBfcmVmcmVzaFRleHR1cmU6IGZ1bmN0aW9uICh0ZXh0dXJlKSB7XHJcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHRleHR1cmU7XHJcbiAgICAgICAgdGhpcy5fcmVjdCA9IGNjLnJlY3QoMCwgMCwgdGV4dHVyZS53aWR0aCwgdGV4dHVyZS5oZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuX2NhbGN1bGF0ZVVWKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIF9jYWxjdWxhdGVVVigpIHtcclxuICAgICAgICBsZXQgcmVjdCA9IHRoaXMuX3JlY3QsXHJcbiAgICAgICAgICAgIHRleHR1cmUgPSB0aGlzLl90ZXh0dXJlLFxyXG4gICAgICAgICAgICB1diA9IHRoaXMudXYsXHJcbiAgICAgICAgICAgIHRleHcgPSB0ZXh0dXJlLndpZHRoLFxyXG4gICAgICAgICAgICB0ZXhoID0gdGV4dHVyZS5oZWlnaHQ7XHJcblxyXG4gICAgICAgIGxldCBsID0gdGV4dyA9PT0gMCA/IDAgOiByZWN0LnggLyB0ZXh3O1xyXG4gICAgICAgIGxldCByID0gdGV4dyA9PT0gMCA/IDAgOiAocmVjdC54ICsgcmVjdC53aWR0aCkgLyB0ZXh3O1xyXG4gICAgICAgIGxldCBiID0gdGV4aCA9PT0gMCA/IDAgOiAocmVjdC55ICsgcmVjdC5oZWlnaHQpIC8gdGV4aDtcclxuICAgICAgICBsZXQgdCA9IHRleGggPT09IDAgPyAwIDogcmVjdC55IC8gdGV4aDtcclxuXHJcbiAgICAgICAgdXZbMF0gPSBsO1xyXG4gICAgICAgIHV2WzFdID0gYjtcclxuICAgICAgICB1dlsyXSA9IHI7XHJcbiAgICAgICAgdXZbM10gPSBiO1xyXG4gICAgICAgIHV2WzRdID0gbDtcclxuICAgICAgICB1dls1XSA9IHQ7XHJcbiAgICAgICAgdXZbNl0gPSByO1xyXG4gICAgICAgIHV2WzddID0gdDtcclxuICAgIH1cclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBMYWJlbEZyYW1lO1xyXG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiAgd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuICBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiAgdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLyoqXHJcbiAqICEjZW4gQ2xhc3MgZm9yIExhYmVsIEZyYW1lLlxyXG4gKiAhI3poIExhYmVsRnJhbWVcclxuICovXG5mdW5jdGlvbiBMYWJlbEZyYW1lKCkge1xuICAgIC8vIHRoZSBsb2NhdGlvbiBvZiB0aGUgbGFiZWwgb24gcmVuZGVyaW5nIHRleHR1cmVcbiAgICB0aGlzLl9yZWN0ID0gbnVsbDtcbiAgICAvLyB1diBkYXRhIG9mIGZyYW1lXG4gICAgdGhpcy51diA9IFtdO1xuICAgIC8vIHRleHR1cmUgb2YgZnJhbWVcbiAgICB0aGlzLl90ZXh0dXJlID0gbnVsbDtcbiAgICAvLyBzdG9yZSBvcmlnaW5hbCBpbmZvIGJlZm9yZSBwYWNrZWQgdG8gZHluYW1pYyBhdGxhc1xuICAgIHRoaXMuX29yaWdpbmFsID0gbnVsbDtcbn1cblxuTGFiZWxGcmFtZS5wcm90b3R5cGUgPSB7XG4gICAgY29uc3RydWN0b3I6IExhYmVsRnJhbWUsXG5cbiAgICAvKipcclxuICAgICogISNlbiBSZXR1cm5zIHRoZSByZWN0IG9mIHRoZSBsYWJlbCBmcmFtZSBpbiB0aGUgdGV4dHVyZS5cclxuICAgICogISN6aCDojrflj5YgTGFiZWxGcmFtZSDnmoTnurnnkIbnn6nlvaLljLrln59cclxuICAgICogQG1ldGhvZCBnZXRSZWN0XHJcbiAgICAqIEByZXR1cm4ge1JlY3R9XHJcbiAgICAqL1xuICAgIGdldFJlY3Q6IGZ1bmN0aW9uIGdldFJlY3QoKSB7XG4gICAgICAgIHJldHVybiBjYy5yZWN0KHRoaXMuX3JlY3QpO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0cyB0aGUgcmVjdCBvZiB0aGUgbGFiZWwgZnJhbWUgaW4gdGhlIHRleHR1cmUuXHJcbiAgICAgKiAhI3poIOiuvue9riBMYWJlbEZyYW1lIOeahOe6ueeQhuefqeW9ouWMuuWfn1xyXG4gICAgICogQG1ldGhvZCBzZXRSZWN0XHJcbiAgICAgKiBAcGFyYW0ge1JlY3R9IHJlY3RcclxuICAgICAqL1xuICAgIHNldFJlY3Q6IGZ1bmN0aW9uIHNldFJlY3QocmVjdCkge1xuICAgICAgICB0aGlzLl9yZWN0ID0gcmVjdDtcbiAgICAgICAgaWYgKHRoaXMuX3RleHR1cmUpIHRoaXMuX2NhbGN1bGF0ZVVWKCk7XG4gICAgfSxcblxuICAgIF9zZXREeW5hbWljQXRsYXNGcmFtZTogZnVuY3Rpb24gX3NldER5bmFtaWNBdGxhc0ZyYW1lKGZyYW1lKSB7XG4gICAgICAgIGlmICghZnJhbWUpIHJldHVybjtcblxuICAgICAgICB0aGlzLl9vcmlnaW5hbCA9IHtcbiAgICAgICAgICAgIF90ZXh0dXJlOiB0aGlzLl90ZXh0dXJlLFxuICAgICAgICAgICAgX3g6IHRoaXMuX3JlY3QueCxcbiAgICAgICAgICAgIF95OiB0aGlzLl9yZWN0LnlcbiAgICAgICAgfTtcblxuICAgICAgICB0aGlzLl90ZXh0dXJlID0gZnJhbWUudGV4dHVyZTtcbiAgICAgICAgdGhpcy5fcmVjdC54ID0gZnJhbWUueDtcbiAgICAgICAgdGhpcy5fcmVjdC55ID0gZnJhbWUueTtcbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlVVYoKTtcbiAgICB9LFxuICAgIF9yZXNldER5bmFtaWNBdGxhc0ZyYW1lOiBmdW5jdGlvbiBfcmVzZXREeW5hbWljQXRsYXNGcmFtZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9vcmlnaW5hbCkgcmV0dXJuO1xuICAgICAgICB0aGlzLl9yZWN0LnggPSB0aGlzLl9vcmlnaW5hbC5feDtcbiAgICAgICAgdGhpcy5fcmVjdC55ID0gdGhpcy5fb3JpZ2luYWwuX3k7XG4gICAgICAgIHRoaXMuX3RleHR1cmUgPSB0aGlzLl9vcmlnaW5hbC5fdGV4dHVyZTtcbiAgICAgICAgdGhpcy5fb3JpZ2luYWwgPSBudWxsO1xuICAgICAgICB0aGlzLl9jYWxjdWxhdGVVVigpO1xuICAgIH0sXG5cblxuICAgIF9yZWZyZXNoVGV4dHVyZTogZnVuY3Rpb24gX3JlZnJlc2hUZXh0dXJlKHRleHR1cmUpIHtcbiAgICAgICAgdGhpcy5fdGV4dHVyZSA9IHRleHR1cmU7XG4gICAgICAgIHRoaXMuX3JlY3QgPSBjYy5yZWN0KDAsIDAsIHRleHR1cmUud2lkdGgsIHRleHR1cmUuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy5fY2FsY3VsYXRlVVYoKTtcbiAgICB9LFxuXG4gICAgX2NhbGN1bGF0ZVVWOiBmdW5jdGlvbiBfY2FsY3VsYXRlVVYoKSB7XG4gICAgICAgIHZhciByZWN0ID0gdGhpcy5fcmVjdCxcbiAgICAgICAgICAgIHRleHR1cmUgPSB0aGlzLl90ZXh0dXJlLFxuICAgICAgICAgICAgdXYgPSB0aGlzLnV2LFxuICAgICAgICAgICAgdGV4dyA9IHRleHR1cmUud2lkdGgsXG4gICAgICAgICAgICB0ZXhoID0gdGV4dHVyZS5oZWlnaHQ7XG5cbiAgICAgICAgdmFyIGwgPSB0ZXh3ID09PSAwID8gMCA6IHJlY3QueCAvIHRleHc7XG4gICAgICAgIHZhciByID0gdGV4dyA9PT0gMCA/IDAgOiAocmVjdC54ICsgcmVjdC53aWR0aCkgLyB0ZXh3O1xuICAgICAgICB2YXIgYiA9IHRleGggPT09IDAgPyAwIDogKHJlY3QueSArIHJlY3QuaGVpZ2h0KSAvIHRleGg7XG4gICAgICAgIHZhciB0ID0gdGV4aCA9PT0gMCA/IDAgOiByZWN0LnkgLyB0ZXhoO1xuXG4gICAgICAgIHV2WzBdID0gbDtcbiAgICAgICAgdXZbMV0gPSBiO1xuICAgICAgICB1dlsyXSA9IHI7XG4gICAgICAgIHV2WzNdID0gYjtcbiAgICAgICAgdXZbNF0gPSBsO1xuICAgICAgICB1dls1XSA9IHQ7XG4gICAgICAgIHV2WzZdID0gcjtcbiAgICAgICAgdXZbN10gPSB0O1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gTGFiZWxGcmFtZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklteGhZbVZzTFdaeVlXMWxMbXB6SWwwc0ltNWhiV1Z6SWpwYklreGhZbVZzUm5KaGJXVWlMQ0pmY21WamRDSXNJblYySWl3aVgzUmxlSFIxY21VaUxDSmZiM0pwWjJsdVlXd2lMQ0p3Y205MGIzUjVjR1VpTENKamIyNXpkSEoxWTNSdmNpSXNJbWRsZEZKbFkzUWlMQ0pqWXlJc0luSmxZM1FpTENKelpYUlNaV04wSWl3aVgyTmhiR04xYkdGMFpWVldJaXdpWDNObGRFUjVibUZ0YVdOQmRHeGhjMFp5WVcxbElpd2labkpoYldVaUxDSmZlQ0lzSW5naUxDSmZlU0lzSW5raUxDSjBaWGgwZFhKbElpd2lYM0psYzJWMFJIbHVZVzFwWTBGMGJHRnpSbkpoYldVaUxDSmZjbVZtY21WemFGUmxlSFIxY21VaUxDSjNhV1IwYUNJc0ltaGxhV2RvZENJc0luUmxlSGNpTENKMFpYaG9JaXdpYkNJc0luSWlMQ0ppSWl3aWRDSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdRVUY1UWtFN096czdRVUZKUVN4VFFVRlRRU3hWUVVGVUxFZEJRWFZDTzBGQlEyNUNPMEZCUTBFc1UwRkJTME1zUzBGQlRDeEhRVUZoTEVsQlFXSTdRVUZEUVR0QlFVTkJMRk5CUVV0RExFVkJRVXdzUjBGQlZTeEZRVUZXTzBGQlEwRTdRVUZEUVN4VFFVRkxReXhSUVVGTUxFZEJRV2RDTEVsQlFXaENPMEZCUTBFN1FVRkRRU3hUUVVGTFF5eFRRVUZNTEVkQlFXbENMRWxCUVdwQ08wRkJRMGc3TzBGQlJVUktMRmRCUVZkTExGTkJRVmdzUjBGQmRVSTdRVUZEYmtKRExHbENRVUZoVGl4VlFVUk5PenRCUVVkc1FqczdPenM3TzBGQlRVUlBMR0ZCUVZNc2JVSkJRVms3UVVGRGFrSXNaVUZCVDBNc1IwRkJSME1zU1VGQlNDeERRVUZSTEV0QlFVdFNMRXRCUVdJc1EwRkJVRHRCUVVOSUxFdEJXR3RDT3p0QlFXRnVRanM3T3pzN08wRkJUVUZUTEdGQlFWTXNhVUpCUVZWRUxFbEJRVllzUlVGQlowSTdRVUZEY2tJc1lVRkJTMUlzUzBGQlRDeEhRVUZoVVN4SlFVRmlPMEZCUTBFc1dVRkJTU3hMUVVGTFRpeFJRVUZVTEVWQlEwa3NTMEZCUzFFc1dVRkJURHRCUVVOUUxFdEJka0pyUWpzN1FVRjVRbTVDUXl4NVFrRjZRbTFDTEdsRFFYbENTVU1zUzBGNlFrb3NSVUY1UWxjN1FVRkRNVUlzV1VGQlNTeERRVUZEUVN4TFFVRk1MRVZCUVZrN08wRkJSVm9zWVVGQlMxUXNVMEZCVEN4SFFVRnBRanRCUVVOaVJDeHpRa0ZCVnl4TFFVRkxRU3hSUVVSSU8wRkJSV0pYTEdkQ1FVRkxMRXRCUVV0aUxFdEJRVXdzUTBGQlYyTXNRMEZHU0R0QlFVZGlReXhuUWtGQlN5eExRVUZMWml4TFFVRk1MRU5CUVZkblFqdEJRVWhJTEZOQlFXcENPenRCUVUxQkxHRkJRVXRrTEZGQlFVd3NSMEZCWjBKVkxFMUJRVTFMTEU5QlFYUkNPMEZCUTBFc1lVRkJTMnBDTEV0QlFVd3NRMEZCVjJNc1EwRkJXQ3hIUVVGbFJpeE5RVUZOUlN4RFFVRnlRanRCUVVOQkxHRkJRVXRrTEV0QlFVd3NRMEZCVjJkQ0xFTkJRVmdzUjBGQlpVb3NUVUZCVFVrc1EwRkJja0k3UVVGRFFTeGhRVUZMVGl4WlFVRk1PMEZCUTBnc1MwRjBRMnRDTzBGQmRVTnVRbEVzTWtKQmRrTnRRaXh4UTBGMVExRTdRVUZEZGtJc1dVRkJTU3hEUVVGRExFdEJRVXRtTEZOQlFWWXNSVUZCY1VJN1FVRkRja0lzWVVGQlMwZ3NTMEZCVEN4RFFVRlhZeXhEUVVGWUxFZEJRV1VzUzBGQlMxZ3NVMEZCVEN4RFFVRmxWU3hGUVVFNVFqdEJRVU5CTEdGQlFVdGlMRXRCUVV3c1EwRkJWMmRDTEVOQlFWZ3NSMEZCWlN4TFFVRkxZaXhUUVVGTUxFTkJRV1ZaTEVWQlFUbENPMEZCUTBFc1lVRkJTMklzVVVGQlRDeEhRVUZuUWl4TFFVRkxReXhUUVVGTUxFTkJRV1ZFTEZGQlFTOUNPMEZCUTBFc1lVRkJTME1zVTBGQlRDeEhRVUZwUWl4SlFVRnFRanRCUVVOQkxHRkJRVXRQTEZsQlFVdzdRVUZEU0N4TFFUbERhMEk3T3p0QlFXZEVia0pUTEhGQ1FVRnBRaXg1UWtGQlZVWXNUMEZCVml4RlFVRnRRanRCUVVOb1F5eGhRVUZMWml4UlFVRk1MRWRCUVdkQ1pTeFBRVUZvUWp0QlFVTkJMR0ZCUVV0cVFpeExRVUZNTEVkQlFXRlBMRWRCUVVkRExFbEJRVWdzUTBGQlVTeERRVUZTTEVWQlFWY3NRMEZCV0N4RlFVRmpVeXhSUVVGUlJ5eExRVUYwUWl4RlFVRTJRa2dzVVVGQlVVa3NUVUZCY2tNc1EwRkJZanRCUVVOQkxHRkJRVXRZTEZsQlFVdzdRVUZEU0N4TFFYQkVhMEk3TzBGQmMwUnVRa0VzWjBKQmRFUnRRaXd3UWtGelJFbzdRVUZEV0N4WlFVRkpSaXhQUVVGUExFdEJRVXRTTEV0QlFXaENPMEZCUVVFc1dVRkRTV2xDTEZWQlFWVXNTMEZCUzJZc1VVRkVia0k3UVVGQlFTeFpRVVZKUkN4TFFVRkxMRXRCUVV0QkxFVkJSbVE3UVVGQlFTeFpRVWRKY1VJc1QwRkJUMHdzVVVGQlVVY3NTMEZJYmtJN1FVRkJRU3haUVVsSlJ5eFBRVUZQVGl4UlFVRlJTU3hOUVVwdVFqczdRVUZOUVN4WlFVRkpSeXhKUVVGSlJpeFRRVUZUTEVOQlFWUXNSMEZCWVN4RFFVRmlMRWRCUVdsQ1pDeExRVUZMVFN4RFFVRk1MRWRCUVZOUkxFbEJRV3hETzBGQlEwRXNXVUZCU1Vjc1NVRkJTVWdzVTBGQlV5eERRVUZVTEVkQlFXRXNRMEZCWWl4SFFVRnBRaXhEUVVGRFpDeExRVUZMVFN4RFFVRk1MRWRCUVZOT0xFdEJRVXRaTEV0QlFXWXNTVUZCZDBKRkxFbEJRV3BFTzBGQlEwRXNXVUZCU1Vrc1NVRkJTVWdzVTBGQlV5eERRVUZVTEVkQlFXRXNRMEZCWWl4SFFVRnBRaXhEUVVGRFppeExRVUZMVVN4RFFVRk1MRWRCUVZOU0xFdEJRVXRoTEUxQlFXWXNTVUZCZVVKRkxFbEJRV3hFTzBGQlEwRXNXVUZCU1Vrc1NVRkJTVW9zVTBGQlV5eERRVUZVTEVkQlFXRXNRMEZCWWl4SFFVRnBRbVlzUzBGQlMxRXNRMEZCVEN4SFFVRlRUeXhKUVVGc1F6czdRVUZGUVhSQ0xGZEJRVWNzUTBGQlNDeEpRVUZSZFVJc1EwRkJVanRCUVVOQmRrSXNWMEZCUnl4RFFVRklMRWxCUVZGNVFpeERRVUZTTzBGQlEwRjZRaXhYUVVGSExFTkJRVWdzU1VGQlVYZENMRU5CUVZJN1FVRkRRWGhDTEZkQlFVY3NRMEZCU0N4SlFVRlJlVUlzUTBGQlVqdEJRVU5CZWtJc1YwRkJSeXhEUVVGSUxFbEJRVkYxUWl4RFFVRlNPMEZCUTBGMlFpeFhRVUZITEVOQlFVZ3NTVUZCVVRCQ0xFTkJRVkk3UVVGRFFURkNMRmRCUVVjc1EwRkJTQ3hKUVVGUmQwSXNRMEZCVWp0QlFVTkJlRUlzVjBGQlJ5eERRVUZJTEVsQlFWRXdRaXhEUVVGU08wRkJRMGc3UVVFeFJXdENMRU5CUVhaQ096dEJRVFpGUVVNc1QwRkJUME1zVDBGQlVDeEhRVUZwUWpsQ0xGVkJRV3BDSWl3aVptbHNaU0k2SW14aFltVnNMV1p5WVcxbExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNjbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNjbHh1WEhKY2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEhKY2JseHlYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHlYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEhKY2JpQWdkMjl5YkdSM2FXUmxMQ0J5YjNsaGJIUjVMV1p5WldVc0lHNXZiaTFoYzNOcFoyNWhZbXhsTENCeVpYWnZZMkZpYkdVZ1lXNWtJRzV2YmkxbGVHTnNkWE5wZG1VZ2JHbGpaVzV6WlZ4eVhHNGdkRzhnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5c1pXeDVJSFJ2SUdSbGRtVnNiM0FnWjJGdFpYTWdiMjRnZVc5MWNpQjBZWEpuWlhRZ2NHeGhkR1p2Y20xekxpQlpiM1VnYzJoaGJHeGNjbHh1SUNCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYSEpjYmlBZ2RYTmxaQ0JtYjNJZ1pHVjJaV3h2Y0dsdVp5Qm5ZVzFsY3k0Z1dXOTFJR0Z5WlNCdWIzUWdaM0poYm5SbFpDQjBieUJ3ZFdKc2FYTm9MQ0JrYVhOMGNtbGlkWFJsTEZ4eVhHNGdJSE4xWW14cFkyVnVjMlVzSUdGdVpDOXZjaUJ6Wld4c0lHTnZjR2xsY3lCdlppQkRiMk52Y3lCRGNtVmhkRzl5TGx4eVhHNWNjbHh1SUZSb1pTQnpiMlowZDJGeVpTQnZjaUIwYjI5c2N5QnBiaUIwYUdseklFeHBZMlZ1YzJVZ1FXZHlaV1Z0Wlc1MElHRnlaU0JzYVdObGJuTmxaQ3dnYm05MElITnZiR1F1WEhKY2JpQllhV0Z0Wlc0Z1dXRnFhU0JUYjJaMGQyRnlaU0JEYnk0c0lFeDBaQzRnY21WelpYSjJaWE1nWVd4c0lISnBaMmgwY3lCdWIzUWdaWGh3Y21WemMyeDVJR2R5WVc1MFpXUWdkRzhnZVc5MUxseHlYRzVjY2x4dUlGUklSU0JUVDBaVVYwRlNSU0JKVXlCUVVrOVdTVVJGUkNCY0lrRlRJRWxUWENJc0lGZEpWRWhQVlZRZ1YwRlNVa0ZPVkZrZ1QwWWdRVTVaSUV0SlRrUXNJRVZZVUZKRlUxTWdUMUpjY2x4dUlFbE5VRXhKUlVRc0lFbE9RMHhWUkVsT1J5QkNWVlFnVGs5VUlFeEpUVWxVUlVRZ1ZFOGdWRWhGSUZkQlVsSkJUbFJKUlZNZ1QwWWdUVVZTUTBoQlRsUkJRa2xNU1ZSWkxGeHlYRzRnUmtsVVRrVlRVeUJHVDFJZ1FTQlFRVkpVU1VOVlRFRlNJRkJWVWxCUFUwVWdRVTVFSUU1UFRrbE9SbEpKVGtkRlRVVk9WQzRnU1U0Z1RrOGdSVlpGVGxRZ1UwaEJURXdnVkVoRlhISmNiaUJCVlZSSVQxSlRJRTlTSUVOUFVGbFNTVWRJVkNCSVQweEVSVkpUSUVKRklFeEpRVUpNUlNCR1QxSWdRVTVaSUVOTVFVbE5MQ0JFUVUxQlIwVlRJRTlTSUU5VVNFVlNYSEpjYmlCTVNVRkNTVXhKVkZrc0lGZElSVlJJUlZJZ1NVNGdRVTRnUVVOVVNVOU9JRTlHSUVOUFRsUlNRVU5VTENCVVQxSlVJRTlTSUU5VVNFVlNWMGxUUlN3Z1FWSkpVMGxPUnlCR1VrOU5MRnh5WEc0Z1QxVlVJRTlHSUU5U0lFbE9JRU5QVGs1RlExUkpUMDRnVjBsVVNDQlVTRVVnVTA5R1ZGZEJVa1VnVDFJZ1ZFaEZJRlZUUlNCUFVpQlBWRWhGVWlCRVJVRk1TVTVIVXlCSlRseHlYRzRnVkVoRklGTlBSbFJYUVZKRkxseHlYRzRnS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpOWNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQWhJMlZ1SUVOc1lYTnpJR1p2Y2lCTVlXSmxiQ0JHY21GdFpTNWNjbHh1SUNvZ0lTTjZhQ0JNWVdKbGJFWnlZVzFsWEhKY2JpQXFMMXh5WEc1bWRXNWpkR2x2YmlCTVlXSmxiRVp5WVcxbElDZ3BJSHRjY2x4dUlDQWdJQzh2SUhSb1pTQnNiMk5oZEdsdmJpQnZaaUIwYUdVZ2JHRmlaV3dnYjI0Z2NtVnVaR1Z5YVc1bklIUmxlSFIxY21WY2NseHVJQ0FnSUhSb2FYTXVYM0psWTNRZ1BTQnVkV3hzTzF4eVhHNGdJQ0FnTHk4Z2RYWWdaR0YwWVNCdlppQm1jbUZ0WlZ4eVhHNGdJQ0FnZEdocGN5NTFkaUE5SUZ0ZE8xeHlYRzRnSUNBZ0x5OGdkR1Y0ZEhWeVpTQnZaaUJtY21GdFpWeHlYRzRnSUNBZ2RHaHBjeTVmZEdWNGRIVnlaU0E5SUc1MWJHdzdYSEpjYmlBZ0lDQXZMeUJ6ZEc5eVpTQnZjbWxuYVc1aGJDQnBibVp2SUdKbFptOXlaU0J3WVdOclpXUWdkRzhnWkhsdVlXMXBZeUJoZEd4aGMxeHlYRzRnSUNBZ2RHaHBjeTVmYjNKcFoybHVZV3dnUFNCdWRXeHNPMXh5WEc1OVhISmNibHh5WEc1TVlXSmxiRVp5WVcxbExuQnliM1J2ZEhsd1pTQTlJSHRjY2x4dUlDQWdJR052Ym5OMGNuVmpkRzl5T2lCTVlXSmxiRVp5WVcxbExGeHlYRzVjY2x4dUlDQWdJQ0F2S2lwY2NseHVJQ0FnSUNBcUlDRWpaVzRnVW1WMGRYSnVjeUIwYUdVZ2NtVmpkQ0J2WmlCMGFHVWdiR0ZpWld3Z1puSmhiV1VnYVc0Z2RHaGxJSFJsZUhSMWNtVXVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPaU90K1dQbGlCTVlXSmxiRVp5WVcxbElPZWFoT2U2dWVlUWh1ZWZxZVc5b3VXTXV1V2ZuMXh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0JuWlhSU1pXTjBYSEpjYmlBZ0lDQWdLaUJBY21WMGRYSnVJSHRTWldOMGZWeHlYRzRnSUNBZ0lDb3ZYSEpjYmlBZ0lDQm5aWFJTWldOME9pQm1kVzVqZEdsdmJpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUdOakxuSmxZM1FvZEdocGN5NWZjbVZqZENrN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ1hISmNiaUFnSUNBdktpcGNjbHh1SUNBZ0lDQXFJQ0VqWlc0Z1UyVjBjeUIwYUdVZ2NtVmpkQ0J2WmlCMGFHVWdiR0ZpWld3Z1puSmhiV1VnYVc0Z2RHaGxJSFJsZUhSMWNtVXVYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPaXV2dWU5cmlCTVlXSmxiRVp5WVcxbElPZWFoT2U2dWVlUWh1ZWZxZVc5b3VXTXV1V2ZuMXh5WEc0Z0lDQWdJQ29nUUcxbGRHaHZaQ0J6WlhSU1pXTjBYSEpjYmlBZ0lDQWdLaUJBY0dGeVlXMGdlMUpsWTNSOUlISmxZM1JjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnYzJWMFVtVmpkRG9nWm5WdVkzUnBiMjRnS0hKbFkzUXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5WldOMElEMGdjbVZqZER0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvZEdocGN5NWZkR1Y0ZEhWeVpTbGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWTJGc1kzVnNZWFJsVlZZb0tUdGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnWDNObGRFUjVibUZ0YVdOQmRHeGhjMFp5WVcxbElDaG1jbUZ0WlNrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNnaFpuSmhiV1VwSUhKbGRIVnlianRjY2x4dVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmIzSnBaMmx1WVd3Z1BTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lGOTBaWGgwZFhKbElEb2dkR2hwY3k1ZmRHVjRkSFZ5WlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWDNnZ09pQjBhR2x6TGw5eVpXTjBMbmdzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJRjk1SURvZ2RHaHBjeTVmY21WamRDNTVYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lGeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzUmxlSFIxY21VZ1BTQm1jbUZ0WlM1MFpYaDBkWEpsTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNKbFkzUXVlQ0E5SUdaeVlXMWxMbmc3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WamRDNTVJRDBnWm5KaGJXVXVlVHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDlqWVd4amRXeGhkR1ZWVmlncE8xeHlYRzRnSUNBZ2ZTeGNjbHh1SUNBZ0lGOXlaWE5sZEVSNWJtRnRhV05CZEd4aGMwWnlZVzFsSUNncElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb0lYUm9hWE11WDI5eWFXZHBibUZzS1NCeVpYUjFjbTQ3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WamRDNTRJRDBnZEdocGN5NWZiM0pwWjJsdVlXd3VYM2c3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WamRDNTVJRDBnZEdocGN5NWZiM0pwWjJsdVlXd3VYM2s3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmZEdWNGRIVnlaU0E5SUhSb2FYTXVYMjl5YVdkcGJtRnNMbDkwWlhoMGRYSmxPMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMjl5YVdkcGJtRnNJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWpZV3hqZFd4aGRHVlZWaWdwTzF4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQmZjbVZtY21WemFGUmxlSFIxY21VNklHWjFibU4wYVc5dUlDaDBaWGgwZFhKbEtTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZkR1Y0ZEhWeVpTQTlJSFJsZUhSMWNtVTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZjbVZqZENBOUlHTmpMbkpsWTNRb01Dd2dNQ3dnZEdWNGRIVnlaUzUzYVdSMGFDd2dkR1Y0ZEhWeVpTNW9aV2xuYUhRcE8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyTmhiR04xYkdGMFpWVldLQ2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lGOWpZV3hqZFd4aGRHVlZWaWdwSUh0Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnY21WamRDQTlJSFJvYVhNdVgzSmxZM1FzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJsZUhSMWNtVWdQU0IwYUdsekxsOTBaWGgwZFhKbExGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMWRpQTlJSFJvYVhNdWRYWXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUmxlSGNnUFNCMFpYaDBkWEpsTG5kcFpIUm9MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBaWGhvSUQwZ2RHVjRkSFZ5WlM1b1pXbG5hSFE3WEhKY2JseHlYRzRnSUNBZ0lDQWdJR3hsZENCc0lEMGdkR1Y0ZHlBOVBUMGdNQ0EvSURBZ09pQnlaV04wTG5nZ0x5QjBaWGgzTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0J5SUQwZ2RHVjRkeUE5UFQwZ01DQS9JREFnT2lBb2NtVmpkQzU0SUNzZ2NtVmpkQzUzYVdSMGFDa2dMeUIwWlhoM08xeHlYRzRnSUNBZ0lDQWdJR3hsZENCaUlEMGdkR1Y0YUNBOVBUMGdNQ0EvSURBZ09pQW9jbVZqZEM1NUlDc2djbVZqZEM1b1pXbG5hSFFwSUM4Z2RHVjRhRHRjY2x4dUlDQWdJQ0FnSUNCc1pYUWdkQ0E5SUhSbGVHZ2dQVDA5SURBZ1B5QXdJRG9nY21WamRDNTVJQzhnZEdWNGFEdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2RYWmJNRjBnUFNCc08xeHlYRzRnSUNBZ0lDQWdJSFYyV3pGZElEMGdZanRjY2x4dUlDQWdJQ0FnSUNCMWRsc3lYU0E5SUhJN1hISmNiaUFnSUNBZ0lDQWdkWFpiTTEwZ1BTQmlPMXh5WEc0Z0lDQWdJQ0FnSUhWMld6UmRJRDBnYkR0Y2NseHVJQ0FnSUNBZ0lDQjFkbHMxWFNBOUlIUTdYSEpjYmlBZ0lDQWdJQ0FnZFhaYk5sMGdQU0J5TzF4eVhHNGdJQ0FnSUNBZ0lIVjJXemRkSUQwZ2REdGNjbHh1SUNBZ0lIMWNjbHh1ZlZ4eVhHNWNjbHh1Ylc5a2RXeGxMbVY0Y0c5eWRITWdQU0JNWVdKbGJFWnlZVzFsTzF4eVhHNGlYWDA9Il19