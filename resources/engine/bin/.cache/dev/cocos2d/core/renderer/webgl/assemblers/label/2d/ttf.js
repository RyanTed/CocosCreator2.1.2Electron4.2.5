(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/ttf.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var ttfUtls = require('../../../../utils/label/ttf');
        var LabelShadow = require('../../../../../components/CCLabelShadow');
        var fillMeshVertices = require('../../utils').fillMeshVertices;
        var WHITE = cc.color(255, 255, 255, 255);
        module.exports = js.addon({
            createData: function createData(comp) {
                var renderData = comp.requestRenderData();
                renderData.dataLength = 4;
                renderData.vertexCount = 4;
                renderData.indiceCount = 6;
                return renderData;
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                WHITE._fastSetA(node.color.a);
                fillMeshVertices(node, renderer._meshBuffer, comp._renderData, WHITE._val);
            },
            _updateVerts: function _updateVerts(comp) {
                var renderData = comp._renderData;
                var uv = comp._frame.uv;
                var node = comp.node, canvasWidth = comp._ttfTexture.width, canvasHeight = comp._ttfTexture.height, appx = node.anchorX * node.width, appy = node.anchorY * node.height;
                var shadow = LabelShadow && comp.getComponent(LabelShadow);
                if (shadow && shadow._enabled) {
                    var offsetX = (canvasWidth - node.width) / 2;
                    var offsetY = (canvasHeight - node.height) / 2;
                    var shadowOffset = shadow.offset;
                    if (-shadowOffset.x > offsetX) {
                        appx += canvasWidth - node.width;
                    } else if (offsetX > shadowOffset.x) {
                        appx += offsetX - shadowOffset.x;
                    } else {
                    }
                    if (-shadowOffset.y > offsetY) {
                        appy += canvasHeight - node.height;
                    } else if (offsetY > shadowOffset.y) {
                        appy += offsetY - shadowOffset.y;
                    } else {
                    }
                }
                var data = renderData._data;
                data[0].x = -appx;
                data[0].y = -appy;
                data[1].x = canvasWidth - appx;
                data[1].y = -appy;
                data[2].x = -appx;
                data[2].y = canvasHeight - appy;
                data[3].x = canvasWidth - appx;
                data[3].y = canvasHeight - appy;
                data[0].u = uv[0];
                data[0].v = uv[1];
                data[1].u = uv[2];
                data[1].v = uv[3];
                data[2].u = uv[4];
                data[2].v = uv[5];
                data[3].u = uv[6];
                data[3].v = uv[7];
            }
        }, ttfUtls);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,