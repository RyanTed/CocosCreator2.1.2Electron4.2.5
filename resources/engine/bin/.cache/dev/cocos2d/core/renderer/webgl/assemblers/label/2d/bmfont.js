(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/2d/bmfont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var bmfontUtls = require('../../../../utils/label/bmfont');
        var fillMeshVertices = require('../../utils').fillMeshVertices;
        module.exports = js.addon({
            createData: function createData(comp) {
                return comp.requestRenderData();
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                fillMeshVertices(node, renderer._meshBuffer, comp._renderData, node._color._val);
            },
            appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {
                var dataOffset = renderData.dataLength;
                renderData.dataLength += 4;
                renderData.vertexCount = renderData.dataLength;
                renderData.indiceCount = renderData.dataLength / 2 * 3;
                var data = renderData._data;
                var texw = texture.width, texh = texture.height;
                var rectWidth = rect.width, rectHeight = rect.height;
                var l = void 0, b = void 0, r = void 0, t = void 0;
                if (!rotated) {
                    l = rect.x / texw;
                    r = (rect.x + rectWidth) / texw;
                    b = (rect.y + rectHeight) / texh;
                    t = rect.y / texh;
                    data[dataOffset].u = l;
                    data[dataOffset].v = b;
                    data[dataOffset + 1].u = r;
                    data[dataOffset + 1].v = b;
                    data[dataOffset + 2].u = l;
                    data[dataOffset + 2].v = t;
                    data[dataOffset + 3].u = r;
                    data[dataOffset + 3].v = t;
                } else {
                    l = rect.x / texw;
                    r = (rect.x + rectHeight) / texw;
                    b = (rect.y + rectWidth) / texh;
                    t = rect.y / texh;
                    data[dataOffset].u = l;
                    data[dataOffset].v = t;
                    data[dataOffset + 1].u = l;
                    data[dataOffset + 1].v = b;
                    data[dataOffset + 2].u = r;
                    data[dataOffset + 2].v = t;
                    data[dataOffset + 3].u = r;
                    data[dataOffset + 3].v = b;
                }
                data[dataOffset].x = x;
                data[dataOffset].y = y - rectHeight * scale;
                data[dataOffset + 1].x = x + rectWidth * scale;
                data[dataOffset + 1].y = y - rectHeight * scale;
                data[dataOffset + 2].x = x;
                data[dataOffset + 2].y = y;
                data[dataOffset + 3].x = x + rectWidth * scale;
                data[dataOffset + 3].y = y;
            }
        }, bmfontUtls);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJtZm9udC5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvY29yZS9yZW5kZXJlci93ZWJnbC9hc3NlbWJsZXJzL2xhYmVsLzJkL2JtZm9udC5qcyJdLCJuYW1lcyI6WyJqcyIsInJlcXVpcmUiLCJibWZvbnRVdGxzIiwiZmlsbE1lc2hWZXJ0aWNlcyIsIm1vZHVsZSIsImV4cG9ydHMiLCJhZGRvbiIsImNyZWF0ZURhdGEiLCJjb21wIiwicmVxdWVzdFJlbmRlckRhdGEiLCJmaWxsQnVmZmVycyIsInJlbmRlcmVyIiwibm9kZSIsIl9tZXNoQnVmZmVyIiwiX3JlbmRlckRhdGEiLCJfY29sb3IiLCJfdmFsIiwiYXBwZW5kUXVhZCIsInJlbmRlckRhdGEiLCJ0ZXh0dXJlIiwicmVjdCIsInJvdGF0ZWQiLCJ4IiwieSIsInNjYWxlIiwiZGF0YU9mZnNldCIsImRhdGFMZW5ndGgiLCJ2ZXJ0ZXhDb3VudCIsImluZGljZUNvdW50IiwiZGF0YSIsIl9kYXRhIiwidGV4dyIsIndpZHRoIiwidGV4aCIsImhlaWdodCIsInJlY3RXaWR0aCIsInJlY3RIZWlnaHQiLCJsIiwiYiIsInIiLCJ0IiwidSIsInYiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQXlCQSxJQUFNQSxFQUFBQSxHQUFLQyxPQUFBQSxDQUFRLDRCQUFSQSxDQUFYO1FBQ0EsSUFBTUMsVUFBQUEsR0FBYUQsT0FBQUEsQ0FBUSxnQ0FBUkEsQ0FBbkI7UUFDQSxJQUFNRSxnQkFBQUEsR0FBbUJGLE9BQUFBLENBQVEsYUFBUkEsRUFBdUJFLGdCQUFoRDtRQUVBQyxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQkosRUFBQUEsQ0FBR00sS0FBSE4sQ0FBUztBQUFBLFlBQ3RCTyxVQUFBQSxFQURzQixTQUFBLFVBQUEsQ0FDVkMsSUFE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LFVBaEVjRixDQUFqQkkiLCJmaWxlIjoiYm1mb250LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5jb25zdCBqcyA9IHJlcXVpcmUoJy4uLy4uLy4uLy4uLy4uL3BsYXRmb3JtL2pzJyk7XHJcbmNvbnN0IGJtZm9udFV0bHMgPSByZXF1aXJlKCcuLi8uLi8uLi8uLi91dGlscy9sYWJlbC9ibWZvbnQnKTtcclxuY29uc3QgZmlsbE1lc2hWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJykuZmlsbE1lc2hWZXJ0aWNlcztcclxuXHJcbm1vZHVsZS5leHBvcnRzID0ganMuYWRkb24oe1xyXG4gICAgY3JlYXRlRGF0YSAoY29tcCkge1xyXG4gICAgICAgIHJldHVybiBjb21wLnJlcXVlc3RSZW5kZXJEYXRhKCk7XHJcbiAgICB9LFxyXG5cclxuICAgIGZpbGxCdWZmZXJzIChjb21wLCByZW5kZXJlcikge1xyXG4gICAgICAgIGxldCBub2RlID0gY29tcC5ub2RlO1xyXG4gICAgICAgIGZpbGxNZXNoVmVydGljZXMobm9kZSwgcmVuZGVyZXIuX21lc2hCdWZmZXIsIGNvbXAuX3JlbmRlckRhdGEsIG5vZGUuX2NvbG9yLl92YWwpO1xyXG4gICAgfSxcclxuXHJcbiAgICBhcHBlbmRRdWFkIChyZW5kZXJEYXRhLCB0ZXh0dXJlLCByZWN0LCByb3RhdGVkLCB4LCB5LCBzY2FsZSkge1xyXG4gICAgICAgIGxldCBkYXRhT2Zmc2V0ID0gcmVuZGVyRGF0YS5kYXRhTGVuZ3RoO1xyXG5cclxuICAgICAgICByZW5kZXJEYXRhLmRhdGFMZW5ndGggKz0gNDtcclxuICAgICAgICByZW5kZXJEYXRhLnZlcnRleENvdW50ID0gcmVuZGVyRGF0YS5kYXRhTGVuZ3RoO1xyXG4gICAgICAgIHJlbmRlckRhdGEuaW5kaWNlQ291bnQgPSByZW5kZXJEYXRhLmRhdGFMZW5ndGggLyAyICogMztcclxuXHJcbiAgICAgICAgbGV0IGRhdGEgPSByZW5kZXJEYXRhLl9kYXRhO1xyXG4gICAgICAgIGxldCB0ZXh3ID0gdGV4dHVyZS53aWR0aCxcclxuICAgICAgICAgICAgdGV4aCA9IHRleHR1cmUuaGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgcmVjdFdpZHRoID0gcmVjdC53aWR0aCxcclxuICAgICAgICAgICAgcmVjdEhlaWdodCA9IHJlY3QuaGVpZ2h0O1xyXG5cclxuICAgICAgICBsZXQgbCwgYiwgciwgdDtcclxuICAgICAgICBpZiAoIXJvdGF0ZWQpIHtcclxuICAgICAgICAgICAgbCA9IChyZWN0LngpIC8gdGV4dztcclxuICAgICAgICAgICAgciA9IChyZWN0LnggKyByZWN0V2lkdGgpIC8gdGV4dztcclxuICAgICAgICAgICAgYiA9IChyZWN0LnkgKyByZWN0SGVpZ2h0KSAvIHRleGg7XHJcbiAgICAgICAgICAgIHQgPSAocmVjdC55KSAvIHRleGg7XHJcblxyXG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXRdLnUgPSBsO1xyXG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXRdLnYgPSBiO1xyXG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAxXS51ID0gcjtcclxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMV0udiA9IGI7XHJcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDJdLnUgPSBsO1xyXG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAyXS52ID0gdDtcclxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgM10udSA9IHI7XHJcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDNdLnYgPSB0O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGwgPSAocmVjdC54KSAvIHRleHc7XHJcbiAgICAgICAgICAgIHIgPSAocmVjdC54ICsgcmVjdEhlaWdodCkgLyB0ZXh3O1xyXG4gICAgICAgICAgICBiID0gKHJlY3QueSArIHJlY3RXaWR0aCkgLyB0ZXhoO1xyXG4gICAgICAgICAgICB0ID0gKHJlY3QueSkgLyB0ZXhoO1xyXG5cclxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0XS51ID0gbDtcclxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0XS52ID0gdDtcclxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMV0udSA9IGw7XHJcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDFdLnYgPSBiO1xyXG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAyXS51ID0gcjtcclxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMl0udiA9IHQ7XHJcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDNdLnUgPSByO1xyXG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAzXS52ID0gYjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGRhdGFbZGF0YU9mZnNldF0ueCA9IHg7XHJcbiAgICAgICAgZGF0YVtkYXRhT2Zmc2V0XS55ID0geSAtIHJlY3RIZWlnaHQgKiBzY2FsZTtcclxuICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAxXS54ID0geCArIHJlY3RXaWR0aCAqIHNjYWxlO1xyXG4gICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDFdLnkgPSB5IC0gcmVjdEhlaWdodCAqIHNjYWxlO1xyXG4gICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDJdLnggPSB4O1xyXG4gICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDJdLnkgPSB5O1xyXG4gICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDNdLnggPSB4ICsgcmVjdFdpZHRoICogc2NhbGU7XHJcbiAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgM10ueSA9IHk7XHJcbiAgICB9LFxyXG59LCBibWZvbnRVdGxzKTtcclxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIGpzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vLi4vcGxhdGZvcm0vanMnKTtcbnZhciBibWZvbnRVdGxzID0gcmVxdWlyZSgnLi4vLi4vLi4vLi4vdXRpbHMvbGFiZWwvYm1mb250Jyk7XG52YXIgZmlsbE1lc2hWZXJ0aWNlcyA9IHJlcXVpcmUoJy4uLy4uL3V0aWxzJykuZmlsbE1lc2hWZXJ0aWNlcztcblxubW9kdWxlLmV4cG9ydHMgPSBqcy5hZGRvbih7XG4gICAgY3JlYXRlRGF0YTogZnVuY3Rpb24gY3JlYXRlRGF0YShjb21wKSB7XG4gICAgICAgIHJldHVybiBjb21wLnJlcXVlc3RSZW5kZXJEYXRhKCk7XG4gICAgfSxcbiAgICBmaWxsQnVmZmVyczogZnVuY3Rpb24gZmlsbEJ1ZmZlcnMoY29tcCwgcmVuZGVyZXIpIHtcbiAgICAgICAgdmFyIG5vZGUgPSBjb21wLm5vZGU7XG4gICAgICAgIGZpbGxNZXNoVmVydGljZXMobm9kZSwgcmVuZGVyZXIuX21lc2hCdWZmZXIsIGNvbXAuX3JlbmRlckRhdGEsIG5vZGUuX2NvbG9yLl92YWwpO1xuICAgIH0sXG4gICAgYXBwZW5kUXVhZDogZnVuY3Rpb24gYXBwZW5kUXVhZChyZW5kZXJEYXRhLCB0ZXh0dXJlLCByZWN0LCByb3RhdGVkLCB4LCB5LCBzY2FsZSkge1xuICAgICAgICB2YXIgZGF0YU9mZnNldCA9IHJlbmRlckRhdGEuZGF0YUxlbmd0aDtcblxuICAgICAgICByZW5kZXJEYXRhLmRhdGFMZW5ndGggKz0gNDtcbiAgICAgICAgcmVuZGVyRGF0YS52ZXJ0ZXhDb3VudCA9IHJlbmRlckRhdGEuZGF0YUxlbmd0aDtcbiAgICAgICAgcmVuZGVyRGF0YS5pbmRpY2VDb3VudCA9IHJlbmRlckRhdGEuZGF0YUxlbmd0aCAvIDIgKiAzO1xuXG4gICAgICAgIHZhciBkYXRhID0gcmVuZGVyRGF0YS5fZGF0YTtcbiAgICAgICAgdmFyIHRleHcgPSB0ZXh0dXJlLndpZHRoLFxuICAgICAgICAgICAgdGV4aCA9IHRleHR1cmUuaGVpZ2h0O1xuXG4gICAgICAgIHZhciByZWN0V2lkdGggPSByZWN0LndpZHRoLFxuICAgICAgICAgICAgcmVjdEhlaWdodCA9IHJlY3QuaGVpZ2h0O1xuXG4gICAgICAgIHZhciBsID0gdm9pZCAwLFxuICAgICAgICAgICAgYiA9IHZvaWQgMCxcbiAgICAgICAgICAgIHIgPSB2b2lkIDAsXG4gICAgICAgICAgICB0ID0gdm9pZCAwO1xuICAgICAgICBpZiAoIXJvdGF0ZWQpIHtcbiAgICAgICAgICAgIGwgPSByZWN0LnggLyB0ZXh3O1xuICAgICAgICAgICAgciA9IChyZWN0LnggKyByZWN0V2lkdGgpIC8gdGV4dztcbiAgICAgICAgICAgIGIgPSAocmVjdC55ICsgcmVjdEhlaWdodCkgLyB0ZXhoO1xuICAgICAgICAgICAgdCA9IHJlY3QueSAvIHRleGg7XG5cbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldF0udSA9IGw7XG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXRdLnYgPSBiO1xuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMV0udSA9IHI7XG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAxXS52ID0gYjtcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDJdLnUgPSBsO1xuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMl0udiA9IHQ7XG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAzXS51ID0gcjtcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDNdLnYgPSB0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbCA9IHJlY3QueCAvIHRleHc7XG4gICAgICAgICAgICByID0gKHJlY3QueCArIHJlY3RIZWlnaHQpIC8gdGV4dztcbiAgICAgICAgICAgIGIgPSAocmVjdC55ICsgcmVjdFdpZHRoKSAvIHRleGg7XG4gICAgICAgICAgICB0ID0gcmVjdC55IC8gdGV4aDtcblxuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0XS51ID0gbDtcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldF0udiA9IHQ7XG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAxXS51ID0gbDtcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDFdLnYgPSBiO1xuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMl0udSA9IHI7XG4gICAgICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAyXS52ID0gdDtcbiAgICAgICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDNdLnUgPSByO1xuICAgICAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgM10udiA9IGI7XG4gICAgICAgIH1cblxuICAgICAgICBkYXRhW2RhdGFPZmZzZXRdLnggPSB4O1xuICAgICAgICBkYXRhW2RhdGFPZmZzZXRdLnkgPSB5IC0gcmVjdEhlaWdodCAqIHNjYWxlO1xuICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAxXS54ID0geCArIHJlY3RXaWR0aCAqIHNjYWxlO1xuICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAxXS55ID0geSAtIHJlY3RIZWlnaHQgKiBzY2FsZTtcbiAgICAgICAgZGF0YVtkYXRhT2Zmc2V0ICsgMl0ueCA9IHg7XG4gICAgICAgIGRhdGFbZGF0YU9mZnNldCArIDJdLnkgPSB5O1xuICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAzXS54ID0geCArIHJlY3RXaWR0aCAqIHNjYWxlO1xuICAgICAgICBkYXRhW2RhdGFPZmZzZXQgKyAzXS55ID0geTtcbiAgICB9XG59LCBibWZvbnRVdGxzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYkltSnRabTl1ZEM1cWN5SmRMQ0p1WVcxbGN5STZXeUpxY3lJc0luSmxjWFZwY21VaUxDSmliV1p2Ym5SVmRHeHpJaXdpWm1sc2JFMWxjMmhXWlhKMGFXTmxjeUlzSW0xdlpIVnNaU0lzSW1WNGNHOXlkSE1pTENKaFpHUnZiaUlzSW1OeVpXRjBaVVJoZEdFaUxDSmpiMjF3SWl3aWNtVnhkV1Z6ZEZKbGJtUmxja1JoZEdFaUxDSm1hV3hzUW5WbVptVnljeUlzSW5KbGJtUmxjbVZ5SWl3aWJtOWtaU0lzSWw5dFpYTm9RblZtWm1WeUlpd2lYM0psYm1SbGNrUmhkR0VpTENKZlkyOXNiM0lpTENKZmRtRnNJaXdpWVhCd1pXNWtVWFZoWkNJc0luSmxibVJsY2tSaGRHRWlMQ0owWlhoMGRYSmxJaXdpY21WamRDSXNJbkp2ZEdGMFpXUWlMQ0o0SWl3aWVTSXNJbk5qWVd4bElpd2laR0YwWVU5bVpuTmxkQ0lzSW1SaGRHRk1aVzVuZEdnaUxDSjJaWEowWlhoRGIzVnVkQ0lzSW1sdVpHbGpaVU52ZFc1MElpd2laR0YwWVNJc0lsOWtZWFJoSWl3aWRHVjRkeUlzSW5kcFpIUm9JaXdpZEdWNGFDSXNJbWhsYVdkb2RDSXNJbkpsWTNSWGFXUjBhQ0lzSW5KbFkzUklaV2xuYUhRaUxDSnNJaXdpWWlJc0luSWlMQ0owSWl3aWRTSXNJbllpWFN3aWJXRndjR2x1WjNNaU9pSTdPMEZCUVVFN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVGNVFrRXNTVUZCVFVFc1MwRkJTME1zVVVGQlVTdzBRa0ZCVWl4RFFVRllPMEZCUTBFc1NVRkJUVU1zWVVGQllVUXNVVUZCVVN4blEwRkJVaXhEUVVGdVFqdEJRVU5CTEVsQlFVMUZMRzFDUVVGdFFrWXNVVUZCVVN4aFFVRlNMRVZCUVhWQ1JTeG5Ra0ZCYUVRN08wRkJSVUZETEU5QlFVOURMRTlCUVZBc1IwRkJhVUpNTEVkQlFVZE5MRXRCUVVnc1EwRkJVenRCUVVOMFFrTXNZMEZFYzBJc2MwSkJRMVpETEVsQlJGVXNSVUZEU2p0QlFVTmtMR1ZCUVU5QkxFdEJRVXRETEdsQ1FVRk1MRVZCUVZBN1FVRkRTQ3hMUVVoeFFqdEJRVXQwUWtNc1pVRk1jMElzZFVKQlMxUkdMRWxCVEZNc1JVRkxTRWNzVVVGTVJ5eEZRVXRQTzBGQlEzcENMRmxCUVVsRExFOUJRVTlLTEV0QlFVdEpMRWxCUVdoQ08wRkJRMEZVTEhsQ1FVRnBRbE1zU1VGQmFrSXNSVUZCZFVKRUxGTkJRVk5GTEZkQlFXaERMRVZCUVRaRFRDeExRVUZMVFN4WFFVRnNSQ3hGUVVFclJFWXNTMEZCUzBjc1RVRkJUQ3hEUVVGWlF5eEpRVUV6UlR0QlFVTklMRXRCVW5GQ08wRkJWWFJDUXl4alFWWnpRaXh6UWtGVlZrTXNWVUZXVlN4RlFWVkZReXhQUVZaR0xFVkJWVmRETEVsQlZsZ3NSVUZWYVVKRExFOUJWbXBDTEVWQlZUQkNReXhEUVZZeFFpeEZRVlUyUWtNc1EwRldOMElzUlVGVlowTkRMRXRCVm1oRExFVkJWWFZETzBGQlEzcEVMRmxCUVVsRExHRkJRV0ZRTEZkQlFWZFJMRlZCUVRWQ096dEJRVVZCVWl4dFFrRkJWMUVzVlVGQldDeEpRVUY1UWl4RFFVRjZRanRCUVVOQlVpeHRRa0ZCVjFNc1YwRkJXQ3hIUVVGNVFsUXNWMEZCVjFFc1ZVRkJjRU03UVVGRFFWSXNiVUpCUVZkVkxGZEJRVmdzUjBGQmVVSldMRmRCUVZkUkxGVkJRVmdzUjBGQmQwSXNRMEZCZUVJc1IwRkJORUlzUTBGQmNrUTdPMEZCUlVFc1dVRkJTVWNzVDBGQlQxZ3NWMEZCVjFrc1MwRkJkRUk3UVVGRFFTeFpRVUZKUXl4UFFVRlBXaXhSUVVGUllTeExRVUZ1UWp0QlFVRkJMRmxCUTBsRExFOUJRVTlrTEZGQlFWRmxMRTFCUkc1Q096dEJRVWRCTEZsQlFVbERMRmxCUVZsbUxFdEJRVXRaTEV0QlFYSkNPMEZCUVVFc1dVRkRTVWtzWVVGQllXaENMRXRCUVV0akxFMUJSSFJDT3p0QlFVZEJMRmxCUVVsSExGVkJRVW83UVVGQlFTeFpRVUZQUXl4VlFVRlFPMEZCUVVFc1dVRkJWVU1zVlVGQlZqdEJRVUZCTEZsQlFXRkRMRlZCUVdJN1FVRkRRU3haUVVGSkxFTkJRVU51UWl4UFFVRk1MRVZCUVdNN1FVRkRWbWRDTEdkQ1FVRkxha0lzUzBGQlMwVXNRMEZCVGl4SFFVRlhVeXhKUVVGbU8wRkJRMEZSTEdkQ1FVRkpMRU5CUVVOdVFpeExRVUZMUlN4RFFVRk1MRWRCUVZOaExGTkJRVllzU1VGQmRVSktMRWxCUVROQ08wRkJRMEZQTEdkQ1FVRkpMRU5CUVVOc1FpeExRVUZMUnl4RFFVRk1MRWRCUVZOaExGVkJRVllzU1VGQmQwSklMRWxCUVRWQ08wRkJRMEZQTEdkQ1FVRkxjRUlzUzBGQlMwY3NRMEZCVGl4SFFVRlhWU3hKUVVGbU96dEJRVVZCU2l4cFFrRkJTMG9zVlVGQlRDeEZRVUZwUW1kQ0xFTkJRV3BDTEVkQlFYRkNTaXhEUVVGeVFqdEJRVU5CVWl4cFFrRkJTMG9zVlVGQlRDeEZRVUZwUW1sQ0xFTkJRV3BDTEVkQlFYRkNTaXhEUVVGeVFqdEJRVU5CVkN4cFFrRkJTMG9zWVVGQllTeERRVUZzUWl4RlFVRnhRbWRDTEVOQlFYSkNMRWRCUVhsQ1JpeERRVUY2UWp0QlFVTkJWaXhwUWtGQlMwb3NZVUZCWVN4RFFVRnNRaXhGUVVGeFFtbENMRU5CUVhKQ0xFZEJRWGxDU2l4RFFVRjZRanRCUVVOQlZDeHBRa0ZCUzBvc1lVRkJZU3hEUVVGc1FpeEZRVUZ4UW1kQ0xFTkJRWEpDTEVkQlFYbENTaXhEUVVGNlFqdEJRVU5CVWl4cFFrRkJTMG9zWVVGQllTeERRVUZzUWl4RlFVRnhRbWxDTEVOQlFYSkNMRWRCUVhsQ1JpeERRVUY2UWp0QlFVTkJXQ3hwUWtGQlMwb3NZVUZCWVN4RFFVRnNRaXhGUVVGeFFtZENMRU5CUVhKQ0xFZEJRWGxDUml4RFFVRjZRanRCUVVOQlZpeHBRa0ZCUzBvc1lVRkJZU3hEUVVGc1FpeEZRVUZ4UW1sQ0xFTkJRWEpDTEVkQlFYbENSaXhEUVVGNlFqdEJRVU5JTEZOQlpFUXNUVUZqVHp0QlFVTklTQ3huUWtGQlMycENMRXRCUVV0RkxFTkJRVTRzUjBGQlYxTXNTVUZCWmp0QlFVTkJVU3huUWtGQlNTeERRVUZEYmtJc1MwRkJTMFVzUTBGQlRDeEhRVUZUWXl4VlFVRldMRWxCUVhkQ1RDeEpRVUUxUWp0QlFVTkJUeXhuUWtGQlNTeERRVUZEYkVJc1MwRkJTMGNzUTBGQlRDeEhRVUZUV1N4VFFVRldMRWxCUVhWQ1JpeEpRVUV6UWp0QlFVTkJUeXhuUWtGQlMzQkNMRXRCUVV0SExFTkJRVTRzUjBGQlYxVXNTVUZCWmpzN1FVRkZRVW9zYVVKQlFVdEtMRlZCUVV3c1JVRkJhVUpuUWl4RFFVRnFRaXhIUVVGeFFrb3NRMEZCY2tJN1FVRkRRVklzYVVKQlFVdEtMRlZCUVV3c1JVRkJhVUpwUWl4RFFVRnFRaXhIUVVGeFFrWXNRMEZCY2tJN1FVRkRRVmdzYVVKQlFVdEtMR0ZCUVdFc1EwRkJiRUlzUlVGQmNVSm5RaXhEUVVGeVFpeEhRVUY1UWtvc1EwRkJla0k3UVVGRFFWSXNhVUpCUVV0S0xHRkJRV0VzUTBGQmJFSXNSVUZCY1VKcFFpeERRVUZ5UWl4SFFVRjVRa29zUTBGQmVrSTdRVUZEUVZRc2FVSkJRVXRLTEdGQlFXRXNRMEZCYkVJc1JVRkJjVUpuUWl4RFFVRnlRaXhIUVVGNVFrWXNRMEZCZWtJN1FVRkRRVllzYVVKQlFVdEtMR0ZCUVdFc1EwRkJiRUlzUlVGQmNVSnBRaXhEUVVGeVFpeEhRVUY1UWtZc1EwRkJla0k3UVVGRFFWZ3NhVUpCUVV0S0xHRkJRV0VzUTBGQmJFSXNSVUZCY1VKblFpeERRVUZ5UWl4SFFVRjVRa1lzUTBGQmVrSTdRVUZEUVZZc2FVSkJRVXRLTEdGQlFXRXNRMEZCYkVJc1JVRkJjVUpwUWl4RFFVRnlRaXhIUVVGNVFrb3NRMEZCZWtJN1FVRkRTRHM3UVVGRlJGUXNZVUZCUzBvc1ZVRkJUQ3hGUVVGcFFrZ3NRMEZCYWtJc1IwRkJjVUpCTEVOQlFYSkNPMEZCUTBGUExHRkJRVXRLTEZWQlFVd3NSVUZCYVVKR0xFTkJRV3BDTEVkQlFYRkNRU3hKUVVGSllTeGhRVUZoV2l4TFFVRjBRenRCUVVOQlN5eGhRVUZMU2l4aFFVRmhMRU5CUVd4Q0xFVkJRWEZDU0N4RFFVRnlRaXhIUVVGNVFrRXNTVUZCU1dFc1dVRkJXVmdzUzBGQmVrTTdRVUZEUVVzc1lVRkJTMG9zWVVGQllTeERRVUZzUWl4RlFVRnhRa1lzUTBGQmNrSXNSMEZCZVVKQkxFbEJRVWxoTEdGQlFXRmFMRXRCUVRGRE8wRkJRMEZMTEdGQlFVdEtMR0ZCUVdFc1EwRkJiRUlzUlVGQmNVSklMRU5CUVhKQ0xFZEJRWGxDUVN4RFFVRjZRanRCUVVOQlR5eGhRVUZMU2l4aFFVRmhMRU5CUVd4Q0xFVkJRWEZDUml4RFFVRnlRaXhIUVVGNVFrRXNRMEZCZWtJN1FVRkRRVTBzWVVGQlMwb3NZVUZCWVN4RFFVRnNRaXhGUVVGeFFrZ3NRMEZCY2tJc1IwRkJlVUpCTEVsQlFVbGhMRmxCUVZsWUxFdEJRWHBETzBGQlEwRkxMR0ZCUVV0S0xHRkJRV0VzUTBGQmJFSXNSVUZCY1VKR0xFTkJRWEpDTEVkQlFYbENRU3hEUVVGNlFqdEJRVU5JTzBGQkwwUnhRaXhEUVVGVUxFVkJaMFZrY2tJc1ZVRm9SV01zUTBGQmFrSWlMQ0ptYVd4bElqb2lZbTFtYjI1MExtcHpJaXdpYzI5MWNtTmxjME52Ym5SbGJuUWlPbHNpTHlvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpcGNjbHh1SUVOdmNIbHlhV2RvZENBb1l5a2dNakF4TnkweU1ERTRJRmhwWVcxbGJpQlpZV3BwSUZOdlpuUjNZWEpsSUVOdkxpd2dUSFJrTGx4eVhHNWNjbHh1SUdoMGRIQnpPaTh2ZDNkM0xtTnZZMjl6TG1OdmJTOWNjbHh1WEhKY2JpQlFaWEp0YVhOemFXOXVJR2x6SUdobGNtVmllU0JuY21GdWRHVmtMQ0JtY21WbElHOW1JR05vWVhKblpTd2dkRzhnWVc1NUlIQmxjbk52YmlCdlluUmhhVzVwYm1jZ1lTQmpiM0I1WEhKY2JpQnZaaUIwYUdseklITnZablIzWVhKbElHRnVaQ0JoYzNOdlkybGhkR1ZrSUdWdVoybHVaU0J6YjNWeVkyVWdZMjlrWlNBb2RHaGxJRndpVTI5bWRIZGhjbVZjSWlrc0lHRWdiR2x0YVhSbFpDeGNjbHh1SUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNjbHh1SUhSdklIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZiR1ZzZVNCMGJ5QmtaWFpsYkc5d0lHZGhiV1Z6SUc5dUlIbHZkWElnZEdGeVoyVjBJSEJzWVhSbWIzSnRjeTRnV1c5MUlITm9ZV3hzWEhKY2JpQnViM1FnZFhObElFTnZZMjl6SUVOeVpXRjBiM0lnYzI5bWRIZGhjbVVnWm05eUlHUmxkbVZzYjNCcGJtY2diM1JvWlhJZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2RHaGhkQ2R6WEhKY2JpQjFjMlZrSUdadmNpQmtaWFpsYkc5d2FXNW5JR2RoYldWekxpQlpiM1VnWVhKbElHNXZkQ0JuY21GdWRHVmtJSFJ2SUhCMVlteHBjMmdzSUdScGMzUnlhV0oxZEdVc1hISmNiaUJ6ZFdKc2FXTmxibk5sTENCaGJtUXZiM0lnYzJWc2JDQmpiM0JwWlhNZ2IyWWdRMjlqYjNNZ1EzSmxZWFJ2Y2k1Y2NseHVYSEpjYmlCVWFHVWdjMjltZEhkaGNtVWdiM0lnZEc5dmJITWdhVzRnZEdocGN5Qk1hV05sYm5ObElFRm5jbVZsYldWdWRDQmhjbVVnYkdsalpXNXpaV1FzSUc1dmRDQnpiMnhrTGx4eVhHNGdXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1SUhKbGMyVnlkbVZ6SUdGc2JDQnlhV2RvZEhNZ2JtOTBJR1Y0Y0hKbGMzTnNlU0JuY21GdWRHVmtJSFJ2SUhsdmRTNWNjbHh1WEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1VnU1ZNZ1VGSlBWa2xFUlVRZ1hDSkJVeUJKVTF3aUxDQlhTVlJJVDFWVUlGZEJVbEpCVGxSWklFOUdJRUZPV1NCTFNVNUVMQ0JGV0ZCU1JWTlRJRTlTWEhKY2JpQkpUVkJNU1VWRUxDQkpUa05NVlVSSlRrY2dRbFZVSUU1UFZDQk1TVTFKVkVWRUlGUlBJRlJJUlNCWFFWSlNRVTVVU1VWVElFOUdJRTFGVWtOSVFVNVVRVUpKVEVsVVdTeGNjbHh1SUVaSlZFNUZVMU1nUms5U0lFRWdVRUZTVkVsRFZVeEJVaUJRVlZKUVQxTkZJRUZPUkNCT1QwNUpUa1pTU1U1SFJVMUZUbFF1SUVsT0lFNVBJRVZXUlU1VUlGTklRVXhNSUZSSVJWeHlYRzRnUVZWVVNFOVNVeUJQVWlCRFQxQlpVa2xIU0ZRZ1NFOU1SRVZTVXlCQ1JTQk1TVUZDVEVVZ1JrOVNJRUZPV1NCRFRFRkpUU3dnUkVGTlFVZEZVeUJQVWlCUFZFaEZVbHh5WEc0Z1RFbEJRa2xNU1ZSWkxDQlhTRVZVU0VWU0lFbE9JRUZPSUVGRFZFbFBUaUJQUmlCRFQwNVVVa0ZEVkN3Z1ZFOVNWQ0JQVWlCUFZFaEZVbGRKVTBVc0lFRlNTVk5KVGtjZ1JsSlBUU3hjY2x4dUlFOVZWQ0JQUmlCUFVpQkpUaUJEVDA1T1JVTlVTVTlPSUZkSlZFZ2dWRWhGSUZOUFJsUlhRVkpGSUU5U0lGUklSU0JWVTBVZ1QxSWdUMVJJUlZJZ1JFVkJURWxPUjFNZ1NVNWNjbHh1SUZSSVJTQlRUMFpVVjBGU1JTNWNjbHh1SUNvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3ZYSEpjYmx4eVhHNWpiMjV6ZENCcWN5QTlJSEpsY1hWcGNtVW9KeTR1THk0dUx5NHVMeTR1THk0dUwzQnNZWFJtYjNKdEwycHpKeWs3WEhKY2JtTnZibk4wSUdKdFptOXVkRlYwYkhNZ1BTQnlaWEYxYVhKbEtDY3VMaTh1TGk4dUxpOHVMaTkxZEdsc2N5OXNZV0psYkM5aWJXWnZiblFuS1R0Y2NseHVZMjl1YzNRZ1ptbHNiRTFsYzJoV1pYSjBhV05sY3lBOUlISmxjWFZwY21Vb0p5NHVMeTR1TDNWMGFXeHpKeWt1Wm1sc2JFMWxjMmhXWlhKMGFXTmxjenRjY2x4dVhISmNibTF2WkhWc1pTNWxlSEJ2Y25SeklEMGdhbk11WVdSa2IyNG9lMXh5WEc0Z0lDQWdZM0psWVhSbFJHRjBZU0FvWTI5dGNDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJqYjIxd0xuSmxjWFZsYzNSU1pXNWtaWEpFWVhSaEtDazdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUdacGJHeENkV1ptWlhKeklDaGpiMjF3TENCeVpXNWtaWEpsY2lrZ2UxeHlYRzRnSUNBZ0lDQWdJR3hsZENCdWIyUmxJRDBnWTI5dGNDNXViMlJsTzF4eVhHNGdJQ0FnSUNBZ0lHWnBiR3hOWlhOb1ZtVnlkR2xqWlhNb2JtOWtaU3dnY21WdVpHVnlaWEl1WDIxbGMyaENkV1ptWlhJc0lHTnZiWEF1WDNKbGJtUmxja1JoZEdFc0lHNXZaR1V1WDJOdmJHOXlMbDkyWVd3cE8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0JoY0hCbGJtUlJkV0ZrSUNoeVpXNWtaWEpFWVhSaExDQjBaWGgwZFhKbExDQnlaV04wTENCeWIzUmhkR1ZrTENCNExDQjVMQ0J6WTJGc1pTa2dlMXh5WEc0Z0lDQWdJQ0FnSUd4bGRDQmtZWFJoVDJabWMyVjBJRDBnY21WdVpHVnlSR0YwWVM1a1lYUmhUR1Z1WjNSb08xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCeVpXNWtaWEpFWVhSaExtUmhkR0ZNWlc1bmRHZ2dLejBnTkR0Y2NseHVJQ0FnSUNBZ0lDQnlaVzVrWlhKRVlYUmhMblpsY25SbGVFTnZkVzUwSUQwZ2NtVnVaR1Z5UkdGMFlTNWtZWFJoVEdWdVozUm9PMXh5WEc0Z0lDQWdJQ0FnSUhKbGJtUmxja1JoZEdFdWFXNWthV05sUTI5MWJuUWdQU0J5Wlc1a1pYSkVZWFJoTG1SaGRHRk1aVzVuZEdnZ0x5QXlJQ29nTXp0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCeVpXNWtaWEpFWVhSaExsOWtZWFJoTzF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0IwWlhoM0lEMGdkR1Y0ZEhWeVpTNTNhV1IwYUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdWNGFDQTlJSFJsZUhSMWNtVXVhR1ZwWjJoME8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCc1pYUWdjbVZqZEZkcFpIUm9JRDBnY21WamRDNTNhV1IwYUN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY21WamRFaGxhV2RvZENBOUlISmxZM1F1YUdWcFoyaDBPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnNaWFFnYkN3Z1lpd2djaXdnZER0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvSVhKdmRHRjBaV1FwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnYkNBOUlDaHlaV04wTG5ncElDOGdkR1Y0ZHp0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnY2lBOUlDaHlaV04wTG5nZ0t5QnlaV04wVjJsa2RHZ3BJQzhnZEdWNGR6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1lpQTlJQ2h5WldOMExua2dLeUJ5WldOMFNHVnBaMmgwS1NBdklIUmxlR2c3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFFnUFNBb2NtVmpkQzU1S1NBdklIUmxlR2c3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXMlJoZEdGUFptWnpaWFJkTG5VZ1BTQnNPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVzJSaGRHRlBabVp6WlhSZExuWWdQU0JpTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JrWVhSaFcyUmhkR0ZQWm1aelpYUWdLeUF4WFM1MUlEMGdjanRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ0a1lYUmhUMlptYzJWMElDc2dNVjB1ZGlBOUlHSTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZiWkdGMFlVOW1abk5sZENBcklESmRMblVnUFNCc08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXMlJoZEdGUFptWnpaWFFnS3lBeVhTNTJJRDBnZER0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdGtZWFJoVDJabWMyVjBJQ3NnTTEwdWRTQTlJSEk3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGYlpHRjBZVTltWm5ObGRDQXJJRE5kTG5ZZ1BTQjBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3dnUFNBb2NtVmpkQzU0S1NBdklIUmxlSGM3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSElnUFNBb2NtVmpkQzU0SUNzZ2NtVmpkRWhsYVdkb2RDa2dMeUIwWlhoM08xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCaUlEMGdLSEpsWTNRdWVTQXJJSEpsWTNSWGFXUjBhQ2tnTHlCMFpYaG9PMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBJRDBnS0hKbFkzUXVlU2tnTHlCMFpYaG9PMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdGtZWFJoVDJabWMyVjBYUzUxSUQwZ2JEdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1pHRjBZVnRrWVhSaFQyWm1jMlYwWFM1MklEMGdkRHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaR0YwWVZ0a1lYUmhUMlptYzJWMElDc2dNVjB1ZFNBOUlHdzdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHUmhkR0ZiWkdGMFlVOW1abk5sZENBcklERmRMbllnUFNCaU8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCa1lYUmhXMlJoZEdGUFptWnpaWFFnS3lBeVhTNTFJRDBnY2p0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdGMFlWdGtZWFJoVDJabWMyVjBJQ3NnTWwwdWRpQTlJSFE3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR1JoZEdGYlpHRjBZVTltWm5ObGRDQXJJRE5kTG5VZ1BTQnlPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQmtZWFJoVzJSaGRHRlBabVp6WlhRZ0t5QXpYUzUySUQwZ1lqdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJR1JoZEdGYlpHRjBZVTltWm5ObGRGMHVlQ0E5SUhnN1hISmNiaUFnSUNBZ0lDQWdaR0YwWVZ0a1lYUmhUMlptYzJWMFhTNTVJRDBnZVNBdElISmxZM1JJWldsbmFIUWdLaUJ6WTJGc1pUdGNjbHh1SUNBZ0lDQWdJQ0JrWVhSaFcyUmhkR0ZQWm1aelpYUWdLeUF4WFM1NElEMGdlQ0FySUhKbFkzUlhhV1IwYUNBcUlITmpZV3hsTzF4eVhHNGdJQ0FnSUNBZ0lHUmhkR0ZiWkdGMFlVOW1abk5sZENBcklERmRMbmtnUFNCNUlDMGdjbVZqZEVobGFXZG9kQ0FxSUhOallXeGxPMXh5WEc0Z0lDQWdJQ0FnSUdSaGRHRmJaR0YwWVU5bVpuTmxkQ0FySURKZExuZ2dQU0I0TzF4eVhHNGdJQ0FnSUNBZ0lHUmhkR0ZiWkdGMFlVOW1abk5sZENBcklESmRMbmtnUFNCNU8xeHlYRzRnSUNBZ0lDQWdJR1JoZEdGYlpHRjBZVTltWm5ObGRDQXJJRE5kTG5nZ1BTQjRJQ3NnY21WamRGZHBaSFJvSUNvZ2MyTmhiR1U3WEhKY2JpQWdJQ0FnSUNBZ1pHRjBZVnRrWVhSaFQyWm1jMlYwSUNzZ00xMHVlU0E5SUhrN1hISmNiaUFnSUNCOUxGeHlYRzU5TENCaWJXWnZiblJWZEd4ektUdGNjbHh1SWwxOSJdfQ==