(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/render-component-handle.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./renderers');
        var utils = require('./renderers/utils');
        var RenderComponentHandle = function RenderComponentHandle(device, defaultCamera) {
            this._device = device;
            this._camera = defaultCamera;
            this.parentOpacity = 1;
            this.parentOpacityDirty = 0;
            this.worldMatDirty = 0;
            this.walking = false;
        };
        RenderComponentHandle.prototype = {
            constructor: RenderComponentHandle,
            reset: function reset() {
                var ctx = this._device._ctx;
                var canvas = this._device._canvas;
                var color = cc.Camera.main ? cc.Camera.main.backgroundColor : cc.color();
                var rgba = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + color.a / 255 + ')';
                ctx.fillStyle = rgba;
                ctx.setTransform(1, 0, 0, 1, 0, 0);
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillRect(0, 0, canvas.width, canvas.height);
                this._device._stats.drawcalls = 0;
                utils.context.reset();
            },
            terminate: function terminate() {
            },
            _commitComp: function _commitComp(comp, assembler) {
                var ctx = this._device._ctx;
                var cam = this._camera;
                ctx.setTransform(cam.a, cam.b, cam.c, cam.d, cam.tx, cam.ty);
                ctx.scale(1, -1);
                assembler.draw(ctx, comp);
            }
        };
        module.exports = RenderComponentHandle;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,