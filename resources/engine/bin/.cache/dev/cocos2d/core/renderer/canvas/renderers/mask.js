(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/mask.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Mask = require('../../../components/CCMask');
        var graphicsHandler = require('./graphics');
        var beforeHandler = {
            updateRenderData: function updateRenderData(comp) {
            },
            draw: function draw(ctx, mask) {
                ctx.save();
                graphicsHandler.draw(ctx, mask._graphics);
                ctx.clip();
            }
        };
        var afterHandler = {
            updateRenderData: function updateRenderData(comp) {
            },
            draw: function draw(ctx, mask) {
                ctx.restore();
            }
        };
        module.exports = {
            beforeHandler: beforeHandler,
            afterHandler: afterHandler
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,