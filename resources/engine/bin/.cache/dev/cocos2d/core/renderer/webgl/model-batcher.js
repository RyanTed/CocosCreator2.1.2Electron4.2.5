(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/model-batcher.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _inputAssembler = require('../../../renderer/core/input-assembler');
        var _inputAssembler2 = _interopRequireDefault(_inputAssembler);
        var _recyclePool = require('../../../renderer/memop/recycle-pool');
        var _recyclePool2 = _interopRequireDefault(_recyclePool);
        var _model = require('../../../renderer/scene/model');
        var _model2 = _interopRequireDefault(_model);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var vertexFormat = require('./vertex-format');
        var defaultVertexFormat = vertexFormat.vfmtPosUvColor;
        var vfmt3D = vertexFormat.vfmt3D;
        var QuadBuffer = require('./quad-buffer');
        var MeshBuffer = require('./mesh-buffer');
        var SpineBuffer = require('./spine-buffer');
        var Material = require('../../assets/material/CCMaterial');
        var idGenerater = new (require('../../platform/id-generater'))('VertextFormat');
        var _buffers = {};
        var empty_material = new Material();
        var empty_ia = new _inputAssembler2.default();
        empty_ia._count = 0;
        var ModelBatcher = function ModelBatcher(device, renderScene) {
            this._renderScene = renderScene;
            this._device = device;
            this.walking = false;
            this.material = empty_material;
            this.cullingMask = 1;
            this._iaPool = new _recyclePool2.default(function () {
                return new _inputAssembler2.default();
            }, 16);
            this._modelPool = new _recyclePool2.default(function () {
                return new _model2.default();
            }, 16);
            this._quadBuffer = this.getBuffer('quad', defaultVertexFormat);
            this._meshBuffer = this.getBuffer('mesh', defaultVertexFormat);
            this._quadBuffer3D = this.getBuffer('quad', vfmt3D);
            this._meshBuffer3D = this.getBuffer('mesh', vfmt3D);
            this._buffer = this._quadBuffer;
            this._batchedModels = [];
            this._dummyNode = new cc.Node();
            this._sortKey = 0;
            this.node = this._dummyNode;
            this.parentOpacity = 1;
            this.parentOpacityDirty = 0;
            this.worldMatDirty = 0;
            this.customProperties = null;
        };
        ModelBatcher.prototype = {
            constructor: ModelBatcher,
            reset: function reset() {
                this._iaPool.reset();
                var scene = this._renderScene;
                var models = this._batchedModels;
                for (var i = 0; i < models.length; ++i) {
                    models[i].setInputAssembler(null);
                    models[i].setEffect(null);
                    scene.removeModel(models[i]);
                }
                this._modelPool.reset();
                models.length = 0;
                this._sortKey = 0;
                for (var key in _buffers) {
                    _buffers[key].reset();
                }
                this._buffer = this._quadBuffer;
                this.node = this._dummyNode;
                this.material = empty_material;
                this.cullingMask = 1;
                this.parentOpacity = 1;
                this.parentOpacityDirty = 0;
                this.worldMatDirty = 0;
                this.customProperties = null;
            },
            _flushMaterial: function _flushMaterial(material) {
                this.material = material;
                var effect = material.effect;
                if (!effect)
                    return;
                var model = this._modelPool.add();
                this._batchedModels.push(model);
                model.sortKey = this._sortKey++;
                model._cullingMask = this.cullingMask;
                model.setNode(this.node);
                model.setEffect(effect, null);
                model.setInputAssembler(empty_ia);
                this._renderScene.addModel(model);
            },
            _flush: function _flush() {
                var material = this.material, buffer = this._buffer, indiceStart = buffer.indiceStart, indiceOffset = buffer.indiceOffset, indiceCount = indiceOffset - indiceStart;
                if (!this.walking || !material || indiceCount <= 0) {
                    return;
                }
                var effect = material.effect;
                if (!effect)
                    return;
                var ia = this._iaPool.add();
                ia._vertexBuffer = buffer._vb;
                ia._indexBuffer = buffer._ib;
                ia._start = indiceStart;
                ia._count = indiceCount;
                var model = this._modelPool.add();
                this._batchedModels.push(model);
                model.sortKey = this._sortKey++;
                model._cullingMask = this.cullingMask;
                model.setNode(this.node);
                model.setEffect(effect, this.customProperties);
                model.setInputAssembler(ia);
                this._renderScene.addModel(model);
                buffer.byteStart = buffer.byteOffset;
                buffer.indiceStart = buffer.indiceOffset;
                buffer.vertexStart = buffer.vertexOffset;
            },
            _flushIA: function _flushIA(iaRenderData) {
                var material = iaRenderData.material;
                if (!iaRenderData.ia || !material) {
                    return;
                }
                this.material = material;
                var effect = material.effect;
                if (!effect)
                    return;
                var model = this._modelPool.add();
                this._batchedModels.push(model);
                model.sortKey = this._sortKey++;
                model._cullingMask = this.cullingMask;
                model.setNode(this.node);
                model.setEffect(effect, this.customProperties);
                model.setInputAssembler(iaRenderData.ia);
                this._renderScene.addModel(model);
            },
            _commitComp: function _commitComp(comp, assembler, cullingMask) {
                var material = comp.sharedMaterials[0];
                if (material && material.getHash() !== this.material.getHash() || this.cullingMask !== cullingMask) {
                    this._flush();
                    this.node = material.getDefine('_USE_MODEL') ? comp.node : this._dummyNode;
                    this.material = material;
                    this.cullingMask = cullingMask;
                }
                assembler.fillBuffers(comp, this);
            },
            _commitIA: function _commitIA(comp, assembler, cullingMask) {
                this._flush();
                this.cullingMask = cullingMask;
                this.material = comp.sharedMaterials[0] || empty_material;
                this.node = this.material.getDefine('_USE_MODEL') ? comp.node : this._dummyNode;
                assembler.renderIA(comp, this);
            },
            terminate: function terminate() {
                if (cc.dynamicAtlasManager && cc.dynamicAtlasManager.enabled) {
                    cc.dynamicAtlasManager.update();
                }
                this._flush();
                for (var key in _buffers) {
                    _buffers[key].uploadData();
                }
            },
            getBuffer: function getBuffer(type, vertextFormat) {
                if (!vertextFormat.name) {
                    vertextFormat.name = idGenerater.getNewId();
                }
                var key = type + vertextFormat.name;
                var buffer = _buffers[key];
                if (!buffer) {
                    if (type === 'mesh') {
                        buffer = new MeshBuffer(this, vertextFormat);
                    } else if (type === 'quad') {
                        buffer = new QuadBuffer(this, vertextFormat);
                    } else if (type === 'spine') {
                        buffer = new SpineBuffer(this, vertextFormat);
                    } else {
                        cc.error('Not support buffer type [' + type + ']');
                        return null;
                    }
                    _buffers[key] = buffer;
                }
                return buffer;
            }
        };
        module.exports = ModelBatcher;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,