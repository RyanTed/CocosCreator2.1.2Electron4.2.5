(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/bar-filled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Sprite = require('../../../../../components/CCSprite');
        var FillType = Sprite.FillType;
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        var fillVerticesWithoutCalc = require('../../utils').fillVerticesWithoutCalc;
        module.exports = {
            updateRenderData: function updateRenderData(sprite) {
                packToDynamicAtlas(sprite, sprite._spriteFrame);
                var renderData = sprite._renderData;
                if (!renderData || !sprite.spriteFrame)
                    return;
                var uvDirty = renderData.uvDirty, vertDirty = renderData.vertDirty;
                if (!uvDirty && !vertDirty) {
                    return sprite.__allocedDatas;
                }
                var fillStart = sprite._fillStart;
                var fillRange = sprite._fillRange;
                if (fillRange < 0) {
                    fillStart += fillRange;
                    fillRange = -fillRange;
                }
                fillRange = fillStart + fillRange;
                fillStart = fillStart > 1 ? 1 : fillStart;
                fillStart = fillStart < 0 ? 0 : fillStart;
                fillRange = fillRange > 1 ? 1 : fillRange;
                fillRange = fillRange < 0 ? 0 : fillRange;
                fillRange = fillRange - fillStart;
                fillRange = fillRange < 0 ? 0 : fillRange;
                var fillEnd = fillStart + fillRange;
                fillEnd = fillEnd > 1 ? 1 : fillEnd;
                if (uvDirty) {
                    this.updateUVs(sprite, fillStart, fillEnd);
                }
                if (vertDirty) {
                    this.updateVerts(sprite, fillStart, fillEnd);
                    this.updateWorldVerts(sprite);
                }
            },
            updateUVs: function updateUVs(sprite, fillStart, fillEnd) {
                var spriteFrame = sprite._spriteFrame, renderData = sprite._renderData, data = renderData._data;
                var atlasWidth = spriteFrame._texture.width;
                var atlasHeight = spriteFrame._texture.height;
                var textureRect = spriteFrame._rect;
                var ul = void 0, vb = void 0, ur = void 0, vt = void 0;
                var quadUV0 = void 0, quadUV1 = void 0, quadUV2 = void 0, quadUV3 = void 0, quadUV4 = void 0, quadUV5 = void 0, quadUV6 = void 0, quadUV7 = void 0;
                if (spriteFrame._rotated) {
                    ul = textureRect.x / atlasWidth;
                    vb = (textureRect.y + textureRect.width) / atlasHeight;
                    ur = (textureRect.x + textureRect.height) / atlasWidth;
                    vt = textureRect.y / atlasHeight;
                    quadUV0 = quadUV2 = ul;
                    quadUV4 = quadUV6 = ur;
                    quadUV3 = quadUV7 = vb;
                    quadUV1 = quadUV5 = vt;
                } else {
                    ul = textureRect.x / atlasWidth;
                    vb = (textureRect.y + textureRect.height) / atlasHeight;
                    ur = (textureRect.x + textureRect.width) / atlasWidth;
                    vt = textureRect.y / atlasHeight;
                    quadUV0 = quadUV4 = ul;
                    quadUV2 = quadUV6 = ur;
                    quadUV1 = quadUV3 = vb;
                    quadUV5 = quadUV7 = vt;
                }
                switch (sprite._fillType) {
                case FillType.HORIZONTAL:
                    data[0].u = quadUV0 + (quadUV2 - quadUV0) * fillStart;
                    data[0].v = quadUV1 + (quadUV3 - quadUV1) * fillStart;
                    data[1].u = quadUV0 + (quadUV2 - quadUV0) * fillEnd;
                    data[1].v = quadUV1 + (quadUV3 - quadUV1) * fillEnd;
                    data[2].u = quadUV4 + (quadUV6 - quadUV4) * fillStart;
                    data[2].v = quadUV5 + (quadUV7 - quadUV5) * fillStart;
                    data[3].u = quadUV4 + (quadUV6 - quadUV4) * fillEnd;
                    data[3].v = quadUV5 + (quadUV7 - quadUV5) * fillEnd;
                    break;
                case FillType.VERTICAL:
                    data[0].u = quadUV0 + (quadUV4 - quadUV0) * fillStart;
                    data[0].v = quadUV1 + (quadUV5 - quadUV1) * fillStart;
                    data[1].u = quadUV2 + (quadUV6 - quadUV2) * fillStart;
                    data[1].v = quadUV3 + (quadUV7 - quadUV3) * fillStart;
                    data[2].u = quadUV0 + (quadUV4 - quadUV0) * fillEnd;
                    data[2].v = quadUV1 + (quadUV5 - quadUV1) * fillEnd;
                    data[3].u = quadUV2 + (quadUV6 - quadUV2) * fillEnd;
                    data[3].v = quadUV3 + (quadUV7 - quadUV3) * fillEnd;
                    break;
                default:
                    cc.errorID(2626);
                    break;
                }
                renderData.uvDirty = false;
            },
            updateVerts: function updateVerts(sprite, fillStart, fillEnd) {
                var renderData = sprite._renderData, data = renderData._data, node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                var l = -appx, b = -appy, r = width - appx, t = height - appy;
                var progressStart = void 0, progressEnd = void 0;
                switch (sprite._fillType) {
                case FillType.HORIZONTAL:
                    progressStart = l + (r - l) * fillStart;
                    progressEnd = l + (r - l) * fillEnd;
                    l = progressStart;
                    r = progressEnd;
                    break;
                case FillType.VERTICAL:
                    progressStart = b + (t - b) * fillStart;
                    progressEnd = b + (t - b) * fillEnd;
                    b = progressStart;
                    t = progressEnd;
                    break;
                default:
                    cc.errorID(2626);
                    break;
                }
                data[4].x = l;
                data[4].y = b;
                data[5].x = r;
                data[5].y = b;
                data[6].x = l;
                data[6].y = t;
                data[7].x = r;
                data[7].y = t;
                renderData.vertDirty = false;
            },
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 8;
                renderData.vertexCount = 4;
                renderData.indiceCount = 6;
                var data = renderData._data;
                for (var i = 0; i < data.length; i++) {
                    data[i].z = 0;
                }
                return renderData;
            },
            updateWorldVerts: function updateWorldVerts(sprite) {
                var node = sprite.node, data = sprite._renderData._data;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                for (var i = 0; i < 4; i++) {
                    var local = data[i + 4];
                    var world = data[i];
                    world.x = local.x * a + local.y * c + tx;
                    world.y = local.x * b + local.y * d + ty;
                }
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                if (renderer.worldMatDirty) {
                    this.updateWorldVerts(sprite);
                }
                var buffer = renderer._meshBuffer;
                var node = sprite.node;
                var offsetInfo = fillVerticesWithoutCalc(node, buffer, sprite._renderData, node._color._val);
                var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                ibuf[indiceOffset++] = vertexId;
                ibuf[indiceOffset++] = vertexId + 1;
                ibuf[indiceOffset++] = vertexId + 2;
                ibuf[indiceOffset++] = vertexId + 1;
                ibuf[indiceOffset++] = vertexId + 3;
                ibuf[indiceOffset++] = vertexId + 2;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,