(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/sliced.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        module.exports = {
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                renderData.dataLength = 20;
                renderData.vertexCount = 16;
                renderData.indiceCount = 54;
                return renderData;
            },
            updateRenderData: function updateRenderData(sprite) {
                packToDynamicAtlas(sprite, sprite._spriteFrame);
                var renderData = sprite._renderData;
                if (!renderData || !sprite.spriteFrame)
                    return;
                var vertDirty = renderData.vertDirty;
                if (vertDirty) {
                    this.updateVerts(sprite);
                    this.updateWorldVerts(sprite);
                }
            },
            updateVerts: function updateVerts(sprite) {
                var renderData = sprite._renderData, data = renderData._data, node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
                var frame = sprite.spriteFrame;
                var leftWidth = frame.insetLeft;
                var rightWidth = frame.insetRight;
                var topHeight = frame.insetTop;
                var bottomHeight = frame.insetBottom;
                var sizableWidth = width - leftWidth - rightWidth;
                var sizableHeight = height - topHeight - bottomHeight;
                var xScale = width / (leftWidth + rightWidth);
                var yScale = height / (topHeight + bottomHeight);
                xScale = isNaN(xScale) || xScale > 1 ? 1 : xScale;
                yScale = isNaN(yScale) || yScale > 1 ? 1 : yScale;
                sizableWidth = sizableWidth < 0 ? 0 : sizableWidth;
                sizableHeight = sizableHeight < 0 ? 0 : sizableHeight;
                data[0].x = -appx;
                data[0].y = -appy;
                data[1].x = leftWidth * xScale - appx;
                data[1].y = bottomHeight * yScale - appy;
                data[2].x = data[1].x + sizableWidth;
                data[2].y = data[1].y + sizableHeight;
                data[3].x = width - appx;
                data[3].y = height - appy;
                renderData.vertDirty = false;
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                if (renderer.worldMatDirty) {
                    this.updateWorldVerts(sprite);
                }
                var renderData = sprite._renderData, node = sprite.node, color = node._color._val, data = renderData._data;
                var buffer = renderer._meshBuffer, vertexCount = renderData.vertexCount;
                var uvSliced = sprite.spriteFrame.uvSliced;
                var offsetInfo = buffer.request(vertexCount, renderData.indiceCount);
                var indiceOffset = offsetInfo.indiceOffset, vertexOffset = offsetInfo.byteOffset >> 2, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
                for (var i = 4; i < 20; ++i) {
                    var vert = data[i];
                    var uvs = uvSliced[i - 4];
                    vbuf[vertexOffset++] = vert.x;
                    vbuf[vertexOffset++] = vert.y;
                    vbuf[vertexOffset++] = uvs.u;
                    vbuf[vertexOffset++] = uvs.v;
                    uintbuf[vertexOffset++] = color;
                }
                for (var r = 0; r < 3; ++r) {
                    for (var c = 0; c < 3; ++c) {
                        var start = vertexId + r * 4 + c;
                        ibuf[indiceOffset++] = start;
                        ibuf[indiceOffset++] = start + 1;
                        ibuf[indiceOffset++] = start + 4;
                        ibuf[indiceOffset++] = start + 1;
                        ibuf[indiceOffset++] = start + 5;
                        ibuf[indiceOffset++] = start + 4;
                    }
                }
            },
            updateWorldVerts: function updateWorldVerts(sprite) {
                var node = sprite.node, data = sprite._renderData._data;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                for (var row = 0; row < 4; ++row) {
                    var rowD = data[row];
                    for (var col = 0; col < 4; ++col) {
                        var colD = data[col];
                        var world = data[4 + row * 4 + col];
                        world.x = colD.x * a + rowD.y * c + tx;
                        world.y = colD.x * b + rowD.y * d + ty;
                    }
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,