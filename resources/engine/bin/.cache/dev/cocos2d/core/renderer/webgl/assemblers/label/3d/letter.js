(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/label/3d/letter.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var assembler = require('../2d/letter');
        var fillMeshVertices3D = require('../../utils').fillMeshVertices3D;
        var WHITE = cc.color(255, 255, 255, 255);
        module.exports = js.addon({
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node;
                WHITE._fastSetA(node.color.a);
                fillMeshVertices3D(comp.node, renderer._meshBuffer3D, comp._renderData, WHITE._val);
            }
        }, assembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,