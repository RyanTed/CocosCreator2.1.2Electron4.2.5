(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/graphics/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Impl = require('./impl');
        module.exports = {
            createImpl: function createImpl() {
                return new Impl();
            },
            draw: function draw(ctx, comp) {
                var node = comp.node;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                ctx.transform(a, b, c, d, tx, ty);
                ctx.save();
                ctx.globalAlpha = node.opacity / 255;
                var style = comp._impl.style;
                ctx.strokeStyle = style.strokeStyle;
                ctx.fillStyle = style.fillStyle;
                ctx.lineWidth = style.lineWidth;
                ctx.lineJoin = style.lineJoin;
                ctx.miterLimit = style.miterLimit;
                var endPath = true;
                var cmds = comp._impl.cmds;
                for (var i = 0, l = cmds.length; i < l; i++) {
                    var cmd = cmds[i];
                    var ctxCmd = cmd[0], args = cmd[1];
                    if (ctxCmd === 'moveTo' && endPath) {
                        ctx.beginPath();
                        endPath = false;
                    } else if (ctxCmd === 'fill' || ctxCmd === 'stroke' || ctxCmd === 'fillRect') {
                        endPath = true;
                    }
                    if (typeof ctx[ctxCmd] === 'function') {
                        ctx[ctxCmd].apply(ctx, args);
                    } else {
                        ctx[ctxCmd] = args;
                    }
                }
                ctx.restore();
                return 1;
            },
            stroke: function stroke(comp) {
                comp._impl.stroke();
            },
            fill: function fill(comp) {
                comp._impl.fill();
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,