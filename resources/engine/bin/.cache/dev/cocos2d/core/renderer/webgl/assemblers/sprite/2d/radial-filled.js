(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/radial-filled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var fillVertices = require('../../utils').fillVertices;
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        var PI_2 = Math.PI * 2;
        var _vertPos = [
            cc.v2(0, 0),
            cc.v2(0, 0),
            cc.v2(0, 0),
            cc.v2(0, 0)
        ];
        var _vertices = [
            0,
            0,
            0,
            0
        ];
        var _uvs = [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0
        ];
        var _intersectPoint_1 = [
            cc.v2(0, 0),
            cc.v2(0, 0),
            cc.v2(0, 0),
            cc.v2(0, 0)
        ];
        var _intersectPoint_2 = [
            cc.v2(0, 0),
            cc.v2(0, 0),
            cc.v2(0, 0),
            cc.v2(0, 0)
        ];
        var _center = cc.v2(0, 0);
        var _triangles = [];
        function _calcInsectedPoints(left, right, bottom, top, center, angle, intersectPoints) {
            var sinAngle = Math.sin(angle);
            var cosAngle = Math.cos(angle);
            var tanAngle = void 0, cotAngle = void 0;
            if (Math.cos(angle) !== 0) {
                tanAngle = sinAngle / cosAngle;
                if ((left - center.x) * cosAngle > 0) {
                    var yleft = center.y + tanAngle * (left - center.x);
                    intersectPoints[0].x = left;
                    intersectPoints[0].y = yleft;
                }
                if ((right - center.x) * cosAngle > 0) {
                    var yright = center.y + tanAngle * (right - center.x);
                    intersectPoints[2].x = right;
                    intersectPoints[2].y = yright;
                }
            }
            if (Math.sin(angle) !== 0) {
                cotAngle = cosAngle / sinAngle;
                if ((top - center.y) * sinAngle > 0) {
                    var xtop = center.x + cotAngle * (top - center.y);
                    intersectPoints[3].x = xtop;
                    intersectPoints[3].y = top;
                }
                if ((bottom - center.y) * sinAngle > 0) {
                    var xbottom = center.x + cotAngle * (bottom - center.y);
                    intersectPoints[1].x = xbottom;
                    intersectPoints[1].y = bottom;
                }
            }
        }
        function _calculateVertices(sprite) {
            var node = sprite.node, width = node.width, height = node.height, appx = node.anchorX * width, appy = node.anchorY * height;
            var l = -appx, b = -appy, r = width - appx, t = height - appy;
            var vertices = _vertices;
            vertices[0] = l;
            vertices[1] = b;
            vertices[2] = r;
            vertices[3] = t;
            var fillCenter = sprite._fillCenter, cx = _center.x = Math.min(Math.max(0, fillCenter.x), 1) * (r - l) + l, cy = _center.y = Math.min(Math.max(0, fillCenter.y), 1) * (t - b) + b;
            _vertPos[0].x = _vertPos[3].x = l;
            _vertPos[1].x = _vertPos[2].x = r;
            _vertPos[0].y = _vertPos[1].y = b;
            _vertPos[2].y = _vertPos[3].y = t;
            _triangles.length = 0;
            if (cx !== vertices[0]) {
                _triangles[0] = [
                    3,
                    0
                ];
            }
            if (cx !== vertices[2]) {
                _triangles[2] = [
                    1,
                    2
                ];
            }
            if (cy !== vertices[1]) {
                _triangles[1] = [
                    0,
                    1
                ];
            }
            if (cy !== vertices[3]) {
                _triangles[3] = [
                    2,
                    3
                ];
            }
        }
        function _calculateUVs(spriteFrame) {
            var atlasWidth = spriteFrame._texture.width;
            var atlasHeight = spriteFrame._texture.height;
            var textureRect = spriteFrame._rect;
            var u0 = void 0, u1 = void 0, v0 = void 0, v1 = void 0;
            var uvs = _uvs;
            if (spriteFrame._rotated) {
                u0 = textureRect.x / atlasWidth;
                u1 = (textureRect.x + textureRect.height) / atlasWidth;
                v0 = textureRect.y / atlasHeight;
                v1 = (textureRect.y + textureRect.width) / atlasHeight;
                uvs[0] = uvs[2] = u0;
                uvs[4] = uvs[6] = u1;
                uvs[3] = uvs[7] = v1;
                uvs[1] = uvs[5] = v0;
            } else {
                u0 = textureRect.x / atlasWidth;
                u1 = (textureRect.x + textureRect.width) / atlasWidth;
                v0 = textureRect.y / atlasHeight;
                v1 = (textureRect.y + textureRect.height) / atlasHeight;
                uvs[0] = uvs[4] = u0;
                uvs[2] = uvs[6] = u1;
                uvs[1] = uvs[3] = v1;
                uvs[5] = uvs[7] = v0;
            }
        }
        function _getVertAngle(start, end) {
            var placementX = void 0, placementY = void 0;
            placementX = end.x - start.x;
            placementY = end.y - start.y;
            if (placementX === 0 && placementY === 0) {
                return undefined;
            } else if (placementX === 0) {
                if (placementY > 0) {
                    return Math.PI * 0.5;
                } else {
                    return Math.PI * 1.5;
                }
            } else {
                var angle = Math.atan(placementY / placementX);
                if (placementX < 0) {
                    angle += Math.PI;
                }
                return angle;
            }
        }
        function _generateTriangle(data, offset, vert0, vert1, vert2) {
            var vertices = _vertices;
            var v0x = vertices[0];
            var v0y = vertices[1];
            var v1x = vertices[2];
            var v1y = vertices[3];
            data[offset].x = vert0.x;
            data[offset].y = vert0.y;
            data[offset + 1].x = vert1.x;
            data[offset + 1].y = vert1.y;
            data[offset + 2].x = vert2.x;
            data[offset + 2].y = vert2.y;
            var progressX = void 0, progressY = void 0;
            progressX = (vert0.x - v0x) / (v1x - v0x);
            progressY = (vert0.y - v0y) / (v1y - v0y);
            _generateUV(progressX, progressY, data, offset);
            progressX = (vert1.x - v0x) / (v1x - v0x);
            progressY = (vert1.y - v0y) / (v1y - v0y);
            _generateUV(progressX, progressY, data, offset + 1);
            progressX = (vert2.x - v0x) / (v1x - v0x);
            progressY = (vert2.y - v0y) / (v1y - v0y);
            _generateUV(progressX, progressY, data, offset + 2);
        }
        function _generateUV(progressX, progressY, data, offset) {
            var uvs = _uvs;
            var px1 = uvs[0] + (uvs[2] - uvs[0]) * progressX;
            var px2 = uvs[4] + (uvs[6] - uvs[4]) * progressX;
            var py1 = uvs[1] + (uvs[3] - uvs[1]) * progressX;
            var py2 = uvs[5] + (uvs[7] - uvs[5]) * progressX;
            var uv = data[offset];
            uv.u = px1 + (px2 - px1) * progressY;
            uv.v = py1 + (py2 - py1) * progressY;
        }
        module.exports = {
            createData: function createData(sprite) {
                return sprite.requestRenderData();
            },
            updateRenderData: function updateRenderData(sprite) {
                var renderData = sprite._renderData;
                var frame = sprite.spriteFrame;
                if (!renderData || !frame)
                    return;
                if (!renderData.vertDirty && !renderData.uvDirty)
                    return;
                var data = renderData._data;
                packToDynamicAtlas(sprite, frame);
                var fillStart = sprite._fillStart;
                var fillRange = sprite._fillRange;
                if (fillRange < 0) {
                    fillStart += fillRange;
                    fillRange = -fillRange;
                }
                while (fillStart >= 1) {
                    fillStart -= 1;
                }
                while (fillStart < 0) {
                    fillStart += 1;
                }
                fillStart *= PI_2;
                fillRange *= PI_2;
                var fillEnd = fillStart + fillRange;
                _calculateVertices(sprite);
                _calculateUVs(frame);
                _calcInsectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart, _intersectPoint_1);
                _calcInsectedPoints(_vertices[0], _vertices[2], _vertices[1], _vertices[3], _center, fillStart + fillRange, _intersectPoint_2);
                var offset = 0;
                for (var triangleIndex = 0; triangleIndex < 4; ++triangleIndex) {
                    var triangle = _triangles[triangleIndex];
                    if (!triangle) {
                        continue;
                    }
                    if (fillRange >= PI_2) {
                        renderData.dataLength = offset + 3;
                        _generateTriangle(data, offset, _center, _vertPos[triangle[0]], _vertPos[triangle[1]]);
                        offset += 3;
                        continue;
                    }
                    var startAngle = _getVertAngle(_center, _vertPos[triangle[0]]);
                    var endAngle = _getVertAngle(_center, _vertPos[triangle[1]]);
                    if (endAngle < startAngle)
                        endAngle += PI_2;
                    startAngle -= PI_2;
                    endAngle -= PI_2;
                    for (var testIndex = 0; testIndex < 3; ++testIndex) {
                        if (startAngle >= fillEnd) {
                        } else if (startAngle >= fillStart) {
                            renderData.dataLength = offset + 3;
                            if (endAngle >= fillEnd) {
                                _generateTriangle(data, offset, _center, _vertPos[triangle[0]], _intersectPoint_2[triangleIndex]);
                            } else {
                                _generateTriangle(data, offset, _center, _vertPos[triangle[0]], _vertPos[triangle[1]]);
                            }
                            offset += 3;
                        } else {
                            if (endAngle <= fillStart) {
                            } else if (endAngle <= fillEnd) {
                                renderData.dataLength = offset + 3;
                                _generateTriangle(data, offset, _center, _intersectPoint_1[triangleIndex], _vertPos[triangle[1]]);
                                offset += 3;
                            } else {
                                renderData.dataLength = offset + 3;
                                _generateTriangle(data, offset, _center, _intersectPoint_1[triangleIndex], _intersectPoint_2[triangleIndex]);
                                offset += 3;
                            }
                        }
                        startAngle += PI_2;
                        endAngle += PI_2;
                    }
                }
                renderData.indiceCount = renderData.vertexCount = offset;
                renderData.vertDirty = renderData.uvDirty = false;
            },
            fillBuffers: function fillBuffers(comp, renderer) {
                var node = comp.node, color = node._color._val, buffer = renderer._meshBuffer, renderData = comp._renderData;
                var offsetInfo = fillVertices(node, buffer, renderData, color);
                var indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                var ibuf = buffer._iData;
                for (var i = 0; i < renderData.dataLength; i++) {
                    ibuf[indiceOffset + i] = vertexId + i;
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,