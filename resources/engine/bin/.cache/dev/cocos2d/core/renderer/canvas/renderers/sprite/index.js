(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Sprite = require('../../../../components/CCSprite');
        var SpriteType = Sprite.Type;
        var FillType = Sprite.FillType;
        var simple = require('./simple');
        var sliced = require('./sliced');
        var tiled = require('./tiled');
        if (CC_TEST) {
            cc._Test._spriteWebGLAssembler = require('../../../webgl/assemblers/sprite/index.js');
        }
        module.exports = {
            getAssembler: function getAssembler(sprite) {
                switch (sprite.type) {
                case SpriteType.SIMPLE:
                    return simple;
                case SpriteType.SLICED:
                    return sliced;
                case SpriteType.TILED:
                    return tiled;
                case SpriteType.FILLED:
                    if (sprite._fillType === FillType.RADIAL) {
                        return null;
                    } else {
                        return null;
                    }
                }
            },
            createData: function createData(sprite) {
                return sprite._assembler.createData(sprite);
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,