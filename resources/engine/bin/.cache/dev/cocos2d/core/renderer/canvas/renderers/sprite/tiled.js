(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/sprite/tiled.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var utils = require('../utils');
        var renderer = {
            createData: function createData(sprite) {
                var renderData = sprite.requestRenderData();
                return renderData;
            },
            updateRenderData: function updateRenderData(sprite) {
                if (!sprite._material) {
                    sprite._activateMaterial();
                }
            },
            draw: function draw(ctx, sprite) {
                var node = sprite.node;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                ctx.transform(a, b, c, d, tx, ty);
                ctx.scale(1, -1);
                utils.context.setGlobalAlpha(ctx, node.opacity / 255);
                var frame = sprite.spriteFrame;
                var rect = frame._rect;
                var tex = frame._texture;
                var sx = rect.x;
                var sy = rect.y;
                var sw = frame._rotated ? rect.height : rect.width;
                var sh = frame._rotated ? rect.width : rect.height;
                var image = utils.getFrameCache(tex, node._color, sx, sy, sw, sh);
                var w = node.width, h = node.height, x = -node.anchorX * w, y = -node.anchorY * h;
                y = -y - h;
                ctx.translate(x, y);
                ctx.fillStyle = ctx.createPattern(image, 'repeat');
                ctx.fillRect(0, 0, w, h);
                return 1;
            }
        };
        module.exports = renderer;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,