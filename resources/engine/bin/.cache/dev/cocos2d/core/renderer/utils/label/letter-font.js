(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/utils/label/letter-font.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../../../platform/CCMacro');
        var Label = require('../../../components/CCLabel');
        var LabelOutline = require('../../../components/CCLabelOutline');
        var textUtils = require('../../../utils/text-utils');
        var Component = require('../../../components/CCComponent');
        var RenderTexture = require('../../../assets/CCRenderTexture');
        var OUTLINE_SUPPORTED = cc.js.isChildClassOf(LabelOutline, Component);
        var Overflow = Label.Overflow;
        var WHITE = cc.Color.WHITE;
        var space = 2;
        var LetterInfo = function LetterInfo() {
            this.char = '';
            this.valid = true;
            this.x = 0;
            this.y = 0;
            this.line = 0;
            this.hash = '';
        };
        var FontLetterDefinition = function FontLetterDefinition() {
            this.u = 0;
            this.v = 0;
            this.w = 0;
            this.h = 0;
            this.texture = null;
            this.offsetX = 0;
            this.offsetY = 0;
            this.valid = false;
            this.xAdvance = 0;
        };
        var _invisibleAlpha = (1 / 255).toFixed(3);
        function LetterTexture(char, labelInfo) {
            this._texture = null;
            this._labelInfo = labelInfo;
            this._char = char;
            this._hash = null;
            this._data = null;
            this._canvas = null;
            this._context = null;
            this._width = 0;
            this._height = 0;
            this._hash = char.charCodeAt(0) + labelInfo.hash;
        }
        LetterTexture.prototype = {
            constructor: LetterTexture,
            updateRenderData: function updateRenderData() {
                this._updateProperties();
                this._updateTexture();
            },
            _updateProperties: function _updateProperties() {
                this._texture = new cc.Texture2D();
                this._data = Label._canvasPool.get();
                this._canvas = this._data.canvas;
                this._context = this._data.context;
                this._context.font = this._labelInfo.fontDesc;
                var width = textUtils.safeMeasureText(this._context, this._char);
                this._width = parseFloat(width.toFixed(2)) + this._labelInfo.margin * 2;
                this._height = (1 + textUtils.BASELINE_RATIO) * this._labelInfo.fontSize + this._labelInfo.margin * 2;
                if (this._canvas.width !== this._width || CC_QQPLAY) {
                    this._canvas.width = this._width;
                }
                if (this._canvas.height !== this._height) {
                    this._canvas.height = this._height;
                }
                this._texture.initWithElement(this._canvas);
            },
            _updateTexture: function _updateTexture() {
                var context = this._context;
                var labelInfo = this._labelInfo, width = this._canvas.width, height = this._canvas.height;
                var startX = width / 2;
                var startY = height / 2 + this._labelInfo.fontSize * textUtils.MIDDLE_RATIO;
                var color = labelInfo.color;
                context.textAlign = 'center';
                context.textBaseline = 'alphabetic';
                context.clearRect(0, 0, width, height);
                context.fillStyle = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', ' + _invisibleAlpha + ')';
                context.fillRect(0, 0, width, height);
                context.font = labelInfo.fontDesc;
                context.lineJoin = 'round';
                context.fillStyle = 'rgba(' + color.r + ', ' + color.g + ', ' + color.b + ', 1)';
                if (labelInfo.isOutlined) {
                    var strokeColor = labelInfo.out || WHITE;
                    context.strokeStyle = 'rgba(' + strokeColor.r + ', ' + strokeColor.g + ', ' + strokeColor.b + ', ' + strokeColor.a / 255 + ')';
                    context.lineWidth = labelInfo.margin * 2;
                    context.strokeText(this._char, startX, startY);
                }
                context.fillText(this._char, startX, startY);
                this._texture.handleLoadedTexture();
            },
            destroy: function destroy() {
                this._texture.destroy();
                this._texture = null;
                Label._canvasPool.put(this._data);
            }
        };
        function LetterAtlas(width, height) {
            var texture = new RenderTexture();
            texture.initWithSize(width, height);
            texture.update();
            this._texture = texture;
            this._x = space;
            this._y = space;
            this._nexty = space;
            this._width = width;
            this._height = height;
            this._letterDefinitions = {};
            cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
        }
        cc.js.mixin(LetterAtlas.prototype, {
            insertLetterTexture: function insertLetterTexture(letterTexture) {
                var texture = letterTexture._texture;
                var width = texture.width, height = texture.height;
                if (this._x + width + space > this._width) {
                    this._x = space;
                    this._y = this._nexty;
                }
                if (this._y + height > this._nexty) {
                    this._nexty = this._y + height + space;
                }
                if (this._nexty > this._height) {
                    return null;
                }
                this._texture.drawTextureAt(texture, this._x, this._y);
                this._dirty = true;
                var letterDefinition = new FontLetterDefinition();
                letterDefinition.u = this._x;
                letterDefinition.v = this._y;
                letterDefinition.texture = this._texture;
                letterDefinition.valid = true;
                letterDefinition.w = letterTexture._width;
                letterDefinition.h = letterTexture._height;
                letterDefinition.xAdvance = letterTexture._width;
                this._x += width + space;
                this._letterDefinitions[letterTexture._hash] = letterDefinition;
                return letterDefinition;
            },
            update: function update() {
                if (!this._dirty)
                    return;
                this._texture.update();
                this._dirty = false;
            },
            reset: function reset() {
                this._x = space;
                this._y = space;
                this._nexty = space;
                var chars = this._letterDefinitions;
                for (var i = 0, l = chars.length; i < l; i++) {
                    var char = chars[i];
                    if (!char.isValid) {
                        continue;
                    }
                    char.destroy();
                }
                this._letterDefinitions = {};
            },
            destroy: function destroy() {
                this.reset();
                this._texture.destroy();
            },
            beforeSceneLoad: function beforeSceneLoad() {
                this.destroy();
                var texture = new RenderTexture();
                texture.initWithSize(this._width, this._height);
                texture.update();
                this._texture = texture;
            },
            getLetter: function getLetter(key) {
                return this._letterDefinitions[key];
            },
            addLetterDefinitions: function addLetterDefinitions(key, letterDefinition) {
                this._letterDefinitions[key] = letterDefinition;
            },
            cloneLetterDefinition: function cloneLetterDefinition() {
                var copyLetterDefinitions = {};
                for (var key in this._letterDefinitions) {
                    var value = new FontLetterDefinition();
                    cc.js.mixin(value, this._letterDefinitions[key]);
                    copyLetterDefinitions[key] = value;
                }
                return copyLetterDefinitions;
            },
            assignLetterDefinitions: function assignLetterDefinitions(letterDefinition) {
                for (var key in this._letterDefinitions) {
                    var newValue = letterDefinition[key];
                    var oldValue = this._letterDefinitions[key];
                    cc.js.mixin(oldValue, newValue);
                }
            },
            scaleFontLetterDefinition: function scaleFontLetterDefinition(scaleFactor) {
                for (var fontDefinition in this._letterDefinitions) {
                    var letterDefinitions = this._letterDefinitions[fontDefinition];
                    letterDefinitions.w *= scaleFactor;
                    letterDefinitions.h *= scaleFactor;
                    letterDefinitions.offsetX *= scaleFactor;
                    letterDefinitions.offsetY *= scaleFactor;
                    letterDefinitions.xAdvance *= scaleFactor;
                }
            },
            getLetterDefinitionForChar: function getLetterDefinitionForChar(char, labelInfo) {
                var hash = char.charCodeAt(0) + labelInfo.hash;
                var letterDefinition = this._letterDefinitions[hash];
                if (!letterDefinition) {
                    var temp = new LetterTexture(char, labelInfo);
                    temp.updateRenderData();
                    letterDefinition = this.insertLetterTexture(temp);
                    temp.destroy();
                }
                return letterDefinition;
            }
        });
        var _tmpRect = cc.rect();
        var _comp = null;
        var _horizontalKernings = [];
        var _lettersInfo = [];
        var _linesWidth = [];
        var _linesOffsetX = [];
        var _labelDimensions = cc.size();
        var _fontAtlas = null;
        var _fntConfig = null;
        var _numberOfLines = 0;
        var _textDesiredHeight = 0;
        var _letterOffsetY = 0;
        var _tailoredTopY = 0;
        var _tailoredBottomY = 0;
        var _bmfontScale = 1;
        var _lineBreakWithoutSpaces = false;
        var _lineSpacing = 0;
        var _string = '';
        var _fontSize = 0;
        var _originFontSize = 0;
        var _contentSize = cc.size();
        var _hAlign = 0;
        var _vAlign = 0;
        var _spacingX = 0;
        var _lineHeight = 0;
        var _overflow = 0;
        var _isWrapText = false;
        var _labelWidth = 0;
        var _labelHeight = 0;
        var _maxLineWidth = 0;
        var _atlasWidth = 2048;
        var _atlasHeight = 2048;
        var _fontFamily = '';
        var _isBold = false;
        var _labelInfo = {
            fontSize: 0,
            lineHeight: 0,
            hash: '',
            fontFamily: '',
            fontDesc: 'Arial',
            hAlign: 0,
            vAlign: 0,
            color: WHITE,
            isOutlined: false,
            out: WHITE,
            margin: 0
        };
        module.exports = {
            _getAssemblerData: function _getAssemblerData() {
                if (!_fontAtlas) {
                    _fontAtlas = new LetterAtlas(_atlasWidth, _atlasHeight);
                }
                return _fontAtlas._texture;
            },
            updateRenderData: function updateRenderData(comp) {
                if (!comp._renderData.vertDirty)
                    return;
                if (_comp === comp)
                    return;
                _comp = comp;
                this._updateFontFamily(comp);
                _labelInfo.fontFamily = _fontFamily;
                this._updateProperties();
                _labelInfo.fontDesc = this._getFontDesc();
                this._updateContent();
                _comp._actualFontSize = _fontSize;
                _comp.node.setContentSize(_contentSize);
                _comp._renderData.vertDirty = _comp._renderData.uvDirty = false;
                _comp = null;
                this._resetProperties();
            },
            _updateFontScale: function _updateFontScale() {
                _bmfontScale = _fontSize / _originFontSize;
            },
            _updateProperties: function _updateProperties() {
                _string = _comp.string.toString();
                _fontSize = _comp.fontSize;
                _originFontSize = _fontSize;
                _hAlign = _comp.horizontalAlign;
                _vAlign = _comp.verticalAlign;
                _spacingX = _comp.spacingX;
                _overflow = _comp.overflow;
                _lineHeight = _comp._lineHeight;
                _isBold = _comp._isBold;
                if (_overflow === Overflow.NONE) {
                    _isWrapText = false;
                } else if (_overflow === Overflow.RESIZE_HEIGHT) {
                    _isWrapText = true;
                } else {
                    _isWrapText = _comp.enableWrapText;
                }
                var outline = OUTLINE_SUPPORTED && _comp.getComponent(LabelOutline);
                if (outline && outline.enabled) {
                    _labelInfo.isOutlined = true;
                    _labelInfo.margin = outline.width;
                    _labelInfo.out = outline.color;
                    _labelInfo.out.a = outline.color.a * _comp.node.color.a / 255;
                } else {
                    _labelInfo.isOutlined = false;
                    _labelInfo.margin = 0;
                }
                _contentSize.width = _comp.node._contentSize.width + _labelInfo.margin * 2;
                _contentSize.height = _comp.node._contentSize.height + _labelInfo.margin * 2;
                _labelInfo.lineHeight = _lineHeight;
                _labelInfo.fontSize = _fontSize;
                _labelInfo.fontFamily = _fontFamily;
                _labelInfo.color = _comp.node.color;
                _labelInfo.hash = this._computeHash(_labelInfo);
                this._setupBMFontOverflowMetrics();
            },
            _updateFontFamily: function _updateFontFamily(comp) {
                if (!comp.useSystemFont) {
                    if (comp.font) {
                        if (comp.font._nativeAsset) {
                            _fontFamily = comp.font._nativeAsset;
                        } else {
                            _fontFamily = cc.loader.getRes(comp.font.nativeUrl);
                            if (!_fontFamily) {
                                cc.loader.load(comp.font.nativeUrl, function (err, fontFamily) {
                                    _fontFamily = fontFamily || 'Arial';
                                    comp.font._nativeAsset = fontFamily;
                                    comp._updateRenderData(true);
                                });
                            }
                        }
                    } else {
                        _fontFamily = 'Arial';
                    }
                } else {
                    _fontFamily = comp.fontFamily;
                }
            },
            _computeHash: function _computeHash(labelInfo) {
                var hashData = '';
                var color = labelInfo.color.toHEX('#rrggbb');
                var out = '';
                if (labelInfo.isOutlined) {
                    out = out + labelInfo.margin + labelInfo.out.toHEX('#rrggbb');
                }
                ;
                return hashData + labelInfo.fontSize + labelInfo.fontFamily + color + out;
            },
            _getFontDesc: function _getFontDesc() {
                var fontDesc = _fontSize.toString() + 'px ';
                fontDesc = fontDesc + _fontFamily;
                if (_isBold) {
                    fontDesc = 'bold ' + fontDesc;
                }
                return fontDesc;
            },
            _resetProperties: function _resetProperties() {
            },
            _updateContent: function _updateContent() {
                this._updateFontScale();
                this._alignText();
            },
            _computeHorizontalKerningForText: function _computeHorizontalKerningForText() {
                var string = _string;
                var stringLen = string.length;
                var kerningDict = _fntConfig.kerningDict;
                var horizontalKernings = _horizontalKernings;
                var prev = -1;
                for (var i = 0; i < stringLen; ++i) {
                    var key = string.charCodeAt(i);
                    var kerningAmount = kerningDict[prev << 16 | key & 65535] || 0;
                    if (i < stringLen - 1) {
                        horizontalKernings[i] = kerningAmount;
                    } else {
                        horizontalKernings[i] = 0;
                    }
                    prev = key;
                }
            },
            _multilineTextWrap: function _multilineTextWrap(nextTokenFunc) {
                var textLen = _string.length;
                var lineIndex = 0;
                var nextTokenX = 0;
                var nextTokenY = 0;
                var longestLine = 0;
                var letterRight = 0;
                var highestY = 0;
                var lowestY = 0;
                var letterDef = null;
                var letterPosition = cc.v2(0, 0);
                this._updateFontScale();
                for (var index = 0; index < textLen;) {
                    var character = _string.charAt(index);
                    if (character === '\n') {
                        _linesWidth.push(letterRight);
                        letterRight = 0;
                        lineIndex++;
                        nextTokenX = 0;
                        nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                        this._recordPlaceholderInfo(index, character);
                        index++;
                        continue;
                    }
                    var tokenLen = nextTokenFunc(_string, index, textLen);
                    var tokenHighestY = highestY;
                    var tokenLowestY = lowestY;
                    var tokenRight = letterRight;
                    var nextLetterX = nextTokenX;
                    var newLine = false;
                    for (var tmp = 0; tmp < tokenLen; ++tmp) {
                        var letterIndex = index + tmp;
                        character = _string.charAt(letterIndex);
                        if (character === '\r') {
                            this._recordPlaceholderInfo(letterIndex, character);
                            continue;
                        }
                        letterDef = _fontAtlas.getLetterDefinitionForChar(character, _labelInfo);
                        if (!letterDef) {
                            this._recordPlaceholderInfo(letterIndex, character);
                            continue;
                        }
                        var letterX = nextLetterX + letterDef.offsetX * _bmfontScale - _labelInfo.margin;
                        if (_isWrapText && _maxLineWidth > 0 && nextTokenX > 0 && letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character)) {
                            _linesWidth.push(letterRight);
                            letterRight = 0;
                            lineIndex++;
                            nextTokenX = 0;
                            nextTokenY -= _lineHeight * _bmfontScale + _lineSpacing;
                            newLine = true;
                            break;
                        } else {
                            letterPosition.x = letterX;
                        }
                        letterPosition.y = nextTokenY - letterDef.offsetY * _bmfontScale + _labelInfo.margin + _fontSize * textUtils.MIDDLE_RATIO / 2;
                        this._recordLetterInfo(letterPosition, character, letterIndex, lineIndex);
                        if (letterIndex + 1 < _horizontalKernings.length && letterIndex < textLen - 1) {
                            nextLetterX += _horizontalKernings[letterIndex + 1];
                        }
                        nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX - _labelInfo.margin * 2;
                        tokenRight = letterPosition.x + letterDef.w * _bmfontScale - _labelInfo.margin;
                        if (tokenHighestY < letterPosition.y) {
                            tokenHighestY = letterPosition.y;
                        }
                        if (tokenLowestY > letterPosition.y - letterDef.h * _bmfontScale) {
                            tokenLowestY = letterPosition.y - letterDef.h * _bmfontScale;
                        }
                    }
                    if (newLine)
                        continue;
                    nextTokenX = nextLetterX;
                    letterRight = tokenRight;
                    if (highestY < tokenHighestY) {
                        highestY = tokenHighestY;
                    }
                    if (lowestY > tokenLowestY) {
                        lowestY = tokenLowestY;
                    }
                    if (longestLine < letterRight) {
                        longestLine = letterRight;
                    }
                    index += tokenLen;
                }
                _linesWidth.push(letterRight);
                _numberOfLines = lineIndex + 1;
                _textDesiredHeight = _numberOfLines * _lineHeight * _bmfontScale;
                if (_numberOfLines > 1) {
                    _textDesiredHeight += (_numberOfLines - 1) * _lineSpacing;
                }
                _contentSize.width = _labelWidth;
                _contentSize.height = _labelHeight;
                if (_labelWidth <= 0) {
                    _contentSize.width = parseFloat(longestLine.toFixed(2)) + _labelInfo.margin * 2;
                }
                if (_labelHeight <= 0) {
                    _contentSize.height = parseFloat(_textDesiredHeight.toFixed(2)) + _labelInfo.margin * 2 + _fontSize * textUtils.BASELINE_RATIO;
                }
                _tailoredTopY = _contentSize.height;
                _tailoredBottomY = 0;
                if (highestY > 0) {
                    _tailoredTopY = _contentSize.height + highestY;
                }
                if (lowestY < -_textDesiredHeight) {
                    _tailoredBottomY = _textDesiredHeight + lowestY;
                }
                return true;
            },
            _getFirstCharLen: function _getFirstCharLen() {
                return 1;
            },
            _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
                var character = text.charAt(startIndex);
                if (textUtils.isUnicodeCJK(character) || character === '\n' || textUtils.isUnicodeSpace(character)) {
                    return 1;
                }
                var len = 1;
                var letterDef = _fontAtlas.getLetterDefinitionForChar(character, _labelInfo);
                if (!letterDef) {
                    return len;
                }
                var nextLetterX = letterDef.xAdvance * _bmfontScale + _spacingX;
                var letterX = void 0;
                for (var index = startIndex + 1; index < textLen; ++index) {
                    character = text.charAt(index);
                    letterDef = _fontAtlas.getLetterDefinitionForChar(character, _labelInfo);
                    if (!letterDef) {
                        break;
                    }
                    letterX = nextLetterX + letterDef.offsetX * _bmfontScale;
                    if (letterX + letterDef.w * _bmfontScale > _maxLineWidth && !textUtils.isUnicodeSpace(character) && _maxLineWidth > 0) {
                        return len;
                    }
                    nextLetterX += letterDef.xAdvance * _bmfontScale + _spacingX;
                    if (character === '\n' || textUtils.isUnicodeSpace(character) || textUtils.isUnicodeCJK(character)) {
                        break;
                    }
                    len++;
                }
                return len;
            },
            _multilineTextWrapByWord: function _multilineTextWrapByWord() {
                return this._multilineTextWrap(this._getFirstWordLen);
            },
            _multilineTextWrapByChar: function _multilineTextWrapByChar() {
                return this._multilineTextWrap(this._getFirstCharLen);
            },
            _recordPlaceholderInfo: function _recordPlaceholderInfo(letterIndex, char) {
                if (letterIndex >= _lettersInfo.length) {
                    var tmpInfo = new LetterInfo();
                    _lettersInfo.push(tmpInfo);
                }
                _lettersInfo[letterIndex].char = char;
                _lettersInfo[letterIndex].hash = char.charCodeAt(0) + _labelInfo.hash;
                _lettersInfo[letterIndex].valid = false;
            },
            _recordLetterInfo: function _recordLetterInfo(letterPosition, character, letterIndex, lineIndex) {
                if (letterIndex >= _lettersInfo.length) {
                    var tmpInfo = new LetterInfo();
                    _lettersInfo.push(tmpInfo);
                }
                var char = character.charCodeAt(0);
                var key = char + _labelInfo.hash;
                _lettersInfo[letterIndex].line = lineIndex;
                _lettersInfo[letterIndex].char = character;
                _lettersInfo[letterIndex].hash = key;
                _lettersInfo[letterIndex].valid = _fontAtlas.getLetter(key).valid;
                _lettersInfo[letterIndex].x = letterPosition.x;
                _lettersInfo[letterIndex].y = letterPosition.y;
            },
            _alignText: function _alignText() {
                _textDesiredHeight = 0;
                _linesWidth.length = 0;
                if (!_lineBreakWithoutSpaces) {
                    this._multilineTextWrapByWord();
                } else {
                    this._multilineTextWrapByChar();
                }
                this._computeAlignmentOffset();
                this._updateQuads();
            },
            _scaleFontSizeDown: function _scaleFontSizeDown(fontSize) {
                var shouldUpdateContent = true;
                if (!fontSize) {
                    fontSize = 0.1;
                    shouldUpdateContent = false;
                }
                _fontSize = fontSize;
                if (shouldUpdateContent) {
                    this._updateContent();
                }
            },
            _isVerticalClamp: function _isVerticalClamp() {
                if (_textDesiredHeight > _contentSize.height) {
                    return true;
                } else {
                    return false;
                }
            },
            _isHorizontalClamp: function _isHorizontalClamp() {
                var letterClamp = false;
                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                    var letterInfo = _lettersInfo[ctr];
                    if (letterInfo.valid) {
                        var letterDef = _fontAtlas.getLetter(letterInfo.hash);
                        var px = letterInfo.x + letterDef.w * _bmfontScale;
                        var lineIndex = letterInfo.line;
                        if (_labelWidth > 0) {
                            if (!_isWrapText) {
                                if (px > _contentSize.width) {
                                    letterClamp = true;
                                    break;
                                }
                            } else {
                                var wordWidth = _linesWidth[lineIndex];
                                if (wordWidth > _contentSize.width && (px > _contentSize.width || px < 0)) {
                                    letterClamp = true;
                                    break;
                                }
                            }
                        }
                    }
                }
                return letterClamp;
            },
            _isHorizontalClamped: function _isHorizontalClamped(px, lineIndex) {
                var wordWidth = _linesWidth[lineIndex];
                var letterOverClamp = px > _contentSize.width || px < 0;
                if (!_isWrapText) {
                    return letterOverClamp;
                } else {
                    return wordWidth > _contentSize.width && letterOverClamp;
                }
            },
            _updateQuads: function _updateQuads() {
                var texture = _fontAtlas._texture;
                var node = _comp.node;
                var renderData = _comp._renderData;
                renderData.dataLength = renderData.vertexCount = renderData.indiceCount = 0;
                var contentSize = _contentSize, appx = node._anchorPoint.x * contentSize.width, appy = node._anchorPoint.y * contentSize.height;
                var ret = true;
                for (var ctr = 0, l = _string.length; ctr < l; ++ctr) {
                    var letterInfo = _lettersInfo[ctr];
                    if (!letterInfo.valid)
                        continue;
                    var letterDef = _fontAtlas.getLetter(letterInfo.hash);
                    _tmpRect.height = letterDef.h;
                    _tmpRect.width = letterDef.w;
                    _tmpRect.x = letterDef.u;
                    _tmpRect.y = letterDef.v;
                    var py = letterInfo.y + _letterOffsetY;
                    if (_labelHeight > 0) {
                        if (py > _tailoredTopY) {
                            var clipTop = py - _tailoredTopY;
                            _tmpRect.y += clipTop;
                            _tmpRect.height -= clipTop;
                            py = py - clipTop;
                        }
                        if (py - letterDef.h * _bmfontScale < _tailoredBottomY) {
                            _tmpRect.height = py < _tailoredBottomY ? 0 : py - _tailoredBottomY;
                        }
                    }
                    var lineIndex = letterInfo.line;
                    var px = letterInfo.x + letterDef.w / 2 * _bmfontScale + _linesOffsetX[lineIndex];
                    if (_labelWidth > 0) {
                        if (this._isHorizontalClamped(px, lineIndex)) {
                            if (_overflow === Overflow.CLAMP) {
                                _tmpRect.width = 0;
                            } else if (_overflow === Overflow.SHRINK) {
                                if (_contentSize.width > letterDef.w) {
                                    ret = false;
                                    break;
                                } else {
                                    _tmpRect.width = 0;
                                }
                            }
                        }
                    }
                    if (_tmpRect.height > 0 && _tmpRect.width > 0) {
                        var letterPositionX = letterInfo.x + _linesOffsetX[letterInfo.line];
                        this.appendQuad(renderData, texture, _tmpRect, false, letterPositionX - appx, py - appy, _bmfontScale);
                    }
                }
                return ret;
            },
            appendQuad: function appendQuad(renderData, texture, rect, rotated, x, y, scale) {
            },
            _computeAlignmentOffset: function _computeAlignmentOffset() {
                _linesOffsetX.length = 0;
                switch (_hAlign) {
                case macro.TextAlignment.LEFT:
                    for (var i = 0; i < _numberOfLines; ++i) {
                        _linesOffsetX.push(0);
                    }
                    break;
                case macro.TextAlignment.CENTER:
                    for (var _i = 0, l = _linesWidth.length; _i < l; _i++) {
                        _linesOffsetX.push((_contentSize.width - _linesWidth[_i]) / 2);
                    }
                    break;
                case macro.TextAlignment.RIGHT:
                    for (var _i2 = 0, _l = _linesWidth.length; _i2 < _l; _i2++) {
                        _linesOffsetX.push(_contentSize.width - _linesWidth[_i2]);
                    }
                    break;
                default:
                    break;
                }
                switch (_vAlign) {
                case macro.VerticalTextAlignment.TOP:
                    _letterOffsetY = _contentSize.height;
                    break;
                case macro.VerticalTextAlignment.CENTER:
                    _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2 - (_lineHeight - _fontSize) / 2;
                    break;
                case macro.VerticalTextAlignment.BOTTOM:
                    _letterOffsetY = (_contentSize.height + _textDesiredHeight) / 2 - (_lineHeight - _fontSize);
                    break;
                default:
                    break;
                }
            },
            _setupBMFontOverflowMetrics: function _setupBMFontOverflowMetrics() {
                var newWidth = _contentSize.width, newHeight = _contentSize.height;
                if (_overflow === Overflow.RESIZE_HEIGHT) {
                    newHeight = 0;
                }
                if (_overflow === Overflow.NONE) {
                    newWidth = 0;
                    newHeight = 0;
                }
                _labelWidth = newWidth;
                _labelHeight = newHeight;
                _labelDimensions.width = newWidth;
                _labelDimensions.height = newHeight;
                _maxLineWidth = newWidth;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,