(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/renderers/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../platform/js');
        var Sprite = require('../../../components/CCSprite');
        var Label = require('../../../components/CCLabel');
        var Mask = require('../../../components/CCMask');
        var Graphics = require('../../../graphics/graphics');
        var spriteRenderer = require('./sprite');
        var labelRenderer = require('./label');
        var graphicsRenderer = require('./graphics');
        var maskRenderer = require('./mask');
        var map = {};
        var postMap = {};
        function addRenderer(Component, handler, postHandler) {
            var name = js.getClassName(Component);
            map[name] = handler;
            if (postHandler) {
                postMap[name] = postHandler;
            }
            Component._assembler = handler;
            Component._postAssembler = postHandler;
        }
        addRenderer(Sprite, spriteRenderer);
        addRenderer(Label, labelRenderer);
        if (Mask) {
            addRenderer(Mask, maskRenderer.beforeHandler, maskRenderer.afterHandler);
        }
        if (Graphics) {
            addRenderer(Graphics, graphicsRenderer);
        }
        module.exports = {
            map: map,
            postMap: postMap,
            addRenderer: addRenderer
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,