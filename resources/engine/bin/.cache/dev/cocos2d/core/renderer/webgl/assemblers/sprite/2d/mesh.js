(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/2d/mesh.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var fillVerticesWithoutCalc = require('../../utils').fillVerticesWithoutCalc;
        var packToDynamicAtlas = require('../../../../utils/utils').packToDynamicAtlas;
        module.exports = {
            createData: function createData(sprite) {
                return sprite.requestRenderData();
            },
            updateRenderData: function updateRenderData(sprite) {
                packToDynamicAtlas(sprite, sprite._spriteFrame);
                var renderData = sprite._renderData;
                var frame = sprite.spriteFrame;
                if (!renderData || !frame)
                    return;
                var vertices = frame.vertices;
                if (vertices) {
                    if (renderData.vertexCount !== vertices.x.length) {
                        renderData.vertexCount = vertices.x.length;
                        renderData.indiceCount = vertices.triangles.length;
                        renderData.dataLength = renderData.vertexCount * 2;
                        renderData.uvDirty = renderData.vertDirty = true;
                    }
                    if (renderData.uvDirty) {
                        this.updateUVs(sprite);
                    }
                    var vertDirty = renderData.vertDirty;
                    if (vertDirty) {
                        this.updateVerts(sprite);
                        this.updateWorldVerts(sprite);
                    }
                }
            },
            updateUVs: function updateUVs(sprite) {
                var vertices = sprite.spriteFrame.vertices, u = vertices.nu, v = vertices.nv;
                var renderData = sprite._renderData;
                var data = renderData._data;
                for (var i = 0, l = u.length; i < l; i++) {
                    var vertice = data[i];
                    vertice.u = u[i];
                    vertice.v = v[i];
                }
                renderData.uvDirty = false;
            },
            updateVerts: function updateVerts(sprite) {
                var node = sprite.node, contentWidth = Math.abs(node.width), contentHeight = Math.abs(node.height), appx = node.anchorX * contentWidth, appy = node.anchorY * contentHeight;
                var frame = sprite.spriteFrame, vertices = frame.vertices, x = vertices.x, y = vertices.y, originalWidth = frame._originalSize.width, originalHeight = frame._originalSize.height, rectWidth = frame._rect.width, rectHeight = frame._rect.height, offsetX = frame._offset.x, offsetY = frame._offset.y, trimX = offsetX + (originalWidth - rectWidth) / 2, trimY = offsetY + (originalHeight - rectHeight) / 2;
                var scaleX = contentWidth / (sprite.trim ? rectWidth : originalWidth), scaleY = contentHeight / (sprite.trim ? rectHeight : originalHeight);
                var renderData = sprite._renderData;
                var data = renderData._data;
                if (!sprite.trim) {
                    for (var i = 0, l = x.length; i < l; i++) {
                        var vertice = data[i + l];
                        vertice.x = x[i] * scaleX - appx;
                        vertice.y = (originalHeight - y[i]) * scaleY - appy;
                    }
                } else {
                    for (var _i = 0, _l = x.length; _i < _l; _i++) {
                        var _vertice = data[_i + _l];
                        _vertice.x = (x[_i] - trimX) * scaleX - appx;
                        _vertice.y = (originalHeight - y[_i] - trimY) * scaleY - appy;
                    }
                }
                renderData.vertDirty = false;
            },
            updateWorldVerts: function updateWorldVerts(sprite) {
                var node = sprite.node, renderData = sprite._renderData, data = renderData._data;
                var matrix = node._worldMatrix;
                var a = matrix.m00, b = matrix.m01, c = matrix.m04, d = matrix.m05, tx = matrix.m12, ty = matrix.m13;
                for (var i = 0, l = renderData.vertexCount; i < l; i++) {
                    var local = data[i + l];
                    var world = data[i];
                    world.x = local.x * a + local.y * c + tx;
                    world.y = local.x * b + local.y * d + ty;
                }
            },
            fillBuffers: function fillBuffers(sprite, renderer) {
                var vertices = sprite.spriteFrame.vertices;
                if (!vertices) {
                    return;
                }
                if (renderer.worldMatDirty) {
                    this.updateWorldVerts(sprite);
                }
                var buffer = renderer._meshBuffer;
                var node = sprite.node;
                var offsetInfo = fillVerticesWithoutCalc(node, buffer, sprite._renderData, node._color._val);
                var ibuf = buffer._iData, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset;
                var triangles = vertices.triangles;
                for (var i = 0, l = triangles.length; i < l; i++) {
                    ibuf[indiceOffset++] = vertexId + triangles[i];
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,