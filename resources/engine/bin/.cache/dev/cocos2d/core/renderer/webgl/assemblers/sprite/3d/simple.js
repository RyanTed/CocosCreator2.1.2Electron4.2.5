(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/webgl/assemblers/sprite/3d/simple.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../../../../../platform/js');
        var assembler = require('../2d/simple');
        var vec3 = cc.vmath.vec3;
        module.exports = js.addon({
            fillBuffers: function () {
                var vec3_temps = [];
                for (var i = 0; i < 4; i++) {
                    vec3_temps.push(vec3.create());
                }
                return function (sprite, renderer) {
                    var data = sprite._renderData._data, node = sprite.node, color = node._color._val, matrix = node._worldMatrix;
                    var buffer = renderer._meshBuffer3D;
                    var offsetInfo = buffer.request(4, 6);
                    var vertexOffset = offsetInfo.byteOffset >> 2, indiceOffset = offsetInfo.indiceOffset, vertexId = offsetInfo.vertexOffset, vbuf = buffer._vData, uintbuf = buffer._uintVData, ibuf = buffer._iData;
                    var data0 = data[0], data3 = data[3];
                    vec3.set(vec3_temps[0], data0.x, data0.y, 0);
                    vec3.set(vec3_temps[1], data3.x, data0.y, 0);
                    vec3.set(vec3_temps[2], data0.x, data3.y, 0);
                    vec3.set(vec3_temps[3], data3.x, data3.y, 0);
                    var uv = sprite._spriteFrame.uv;
                    for (var _i = 0; _i < 4; _i++) {
                        var vertex = vec3_temps[_i];
                        vec3.transformMat4(vertex, vertex, matrix);
                        vbuf[vertexOffset++] = vertex.x;
                        vbuf[vertexOffset++] = vertex.y;
                        vbuf[vertexOffset++] = vertex.z;
                        var uvOffset = _i * 2;
                        vbuf[vertexOffset++] = uv[0 + uvOffset];
                        vbuf[vertexOffset++] = uv[1 + uvOffset];
                        uintbuf[vertexOffset++] = color;
                    }
                    ibuf[indiceOffset++] = vertexId;
                    ibuf[indiceOffset++] = vertexId + 1;
                    ibuf[indiceOffset++] = vertexId + 2;
                    ibuf[indiceOffset++] = vertexId + 1;
                    ibuf[indiceOffset++] = vertexId + 3;
                    ibuf[indiceOffset++] = vertexId + 2;
                };
            }()
        }, assembler);
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,