(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/renderer/canvas/Texture2D.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Texture2D = function Texture2D(device, options) {
            this._device = device;
            this._width = 4;
            this._height = 4;
            this._image = null;
            if (options) {
                if (options.width !== undefined) {
                    this._width = options.width;
                }
                if (options.height !== undefined) {
                    this._height = options.height;
                }
                this.updateImage(options);
            }
        };
        Texture2D.prototype.update = function update(options) {
            this.updateImage(options);
        };
        Texture2D.prototype.updateImage = function updateImage(options) {
            if (options.images && options.images[0]) {
                var image = options.images[0];
                if (image && image !== this._image) {
                    this._image = image;
                }
            }
        };
        Texture2D.prototype.destroy = function destroy() {
            this._image = null;
        };
        module.exports = Texture2D;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,