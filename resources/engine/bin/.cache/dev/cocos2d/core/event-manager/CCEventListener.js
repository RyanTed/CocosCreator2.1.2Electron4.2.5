(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/event-manager/CCEventListener.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        cc.EventListener = function (type, listenerID, callback) {
            this._onEvent = callback;
            this._type = type || 0;
            this._listenerID = listenerID || '';
            this._registered = false;
            this._fixedPriority = 0;
            this._node = null;
            this._target = null;
            this._paused = true;
            this._isEnabled = true;
        };
        cc.EventListener.prototype = {
            constructor: cc.EventListener,
            _setPaused: function _setPaused(paused) {
                this._paused = paused;
            },
            _isPaused: function _isPaused() {
                return this._paused;
            },
            _setRegistered: function _setRegistered(registered) {
                this._registered = registered;
            },
            _isRegistered: function _isRegistered() {
                return this._registered;
            },
            _getType: function _getType() {
                return this._type;
            },
            _getListenerID: function _getListenerID() {
                return this._listenerID;
            },
            _setFixedPriority: function _setFixedPriority(fixedPriority) {
                this._fixedPriority = fixedPriority;
            },
            _getFixedPriority: function _getFixedPriority() {
                return this._fixedPriority;
            },
            _setSceneGraphPriority: function _setSceneGraphPriority(node) {
                this._target = node;
                this._node = node;
            },
            _getSceneGraphPriority: function _getSceneGraphPriority() {
                return this._node;
            },
            checkAvailable: function checkAvailable() {
                return this._onEvent !== null;
            },
            clone: function clone() {
                return null;
            },
            setEnabled: function setEnabled(enabled) {
                this._isEnabled = enabled;
            },
            isEnabled: function isEnabled() {
                return this._isEnabled;
            },
            retain: function retain() {
            },
            release: function release() {
            }
        };
        cc.EventListener.UNKNOWN = 0;
        cc.EventListener.TOUCH_ONE_BY_ONE = 1;
        cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
        cc.EventListener.KEYBOARD = 3;
        cc.EventListener.MOUSE = 4;
        cc.EventListener.ACCELERATION = 6;
        cc.EventListener.CUSTOM = 8;
        var ListenerID = cc.EventListener.ListenerID = {
            MOUSE: '__cc_mouse',
            TOUCH_ONE_BY_ONE: '__cc_touch_one_by_one',
            TOUCH_ALL_AT_ONCE: '__cc_touch_all_at_once',
            KEYBOARD: '__cc_keyboard',
            ACCELERATION: '__cc_acceleration'
        };
        var Custom = function Custom(listenerId, callback) {
            this._onCustomEvent = callback;
            cc.EventListener.call(this, cc.EventListener.CUSTOM, listenerId, this._callback);
        };
        js.extend(Custom, cc.EventListener);
        js.mixin(Custom.prototype, {
            _onCustomEvent: null,
            _callback: function _callback(event) {
                if (this._onCustomEvent !== null)
                    this._onCustomEvent(event);
            },
            checkAvailable: function checkAvailable() {
                return cc.EventListener.prototype.checkAvailable.call(this) && this._onCustomEvent !== null;
            },
            clone: function clone() {
                return new Custom(this._listenerID, this._onCustomEvent);
            }
        });
        var Mouse = function Mouse() {
            cc.EventListener.call(this, cc.EventListener.MOUSE, ListenerID.MOUSE, this._callback);
        };
        js.extend(Mouse, cc.EventListener);
        js.mixin(Mouse.prototype, {
            onMouseDown: null,
            onMouseUp: null,
            onMouseMove: null,
            onMouseScroll: null,
            _callback: function _callback(event) {
                var eventType = cc.Event.EventMouse;
                switch (event._eventType) {
                case eventType.DOWN:
                    if (this.onMouseDown)
                        this.onMouseDown(event);
                    break;
                case eventType.UP:
                    if (this.onMouseUp)
                        this.onMouseUp(event);
                    break;
                case eventType.MOVE:
                    if (this.onMouseMove)
                        this.onMouseMove(event);
                    break;
                case eventType.SCROLL:
                    if (this.onMouseScroll)
                        this.onMouseScroll(event);
                    break;
                default:
                    break;
                }
            },
            clone: function clone() {
                var eventListener = new Mouse();
                eventListener.onMouseDown = this.onMouseDown;
                eventListener.onMouseUp = this.onMouseUp;
                eventListener.onMouseMove = this.onMouseMove;
                eventListener.onMouseScroll = this.onMouseScroll;
                return eventListener;
            },
            checkAvailable: function checkAvailable() {
                return true;
            }
        });
        var TouchOneByOne = function TouchOneByOne() {
            cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, ListenerID.TOUCH_ONE_BY_ONE, null);
            this._claimedTouches = [];
        };
        js.extend(TouchOneByOne, cc.EventListener);
        js.mixin(TouchOneByOne.prototype, {
            constructor: TouchOneByOne,
            _claimedTouches: null,
            swallowTouches: false,
            onTouchBegan: null,
            onTouchMoved: null,
            onTouchEnded: null,
            onTouchCancelled: null,
            setSwallowTouches: function setSwallowTouches(needSwallow) {
                this.swallowTouches = needSwallow;
            },
            isSwallowTouches: function isSwallowTouches() {
                return this.swallowTouches;
            },
            clone: function clone() {
                var eventListener = new TouchOneByOne();
                eventListener.onTouchBegan = this.onTouchBegan;
                eventListener.onTouchMoved = this.onTouchMoved;
                eventListener.onTouchEnded = this.onTouchEnded;
                eventListener.onTouchCancelled = this.onTouchCancelled;
                eventListener.swallowTouches = this.swallowTouches;
                return eventListener;
            },
            checkAvailable: function checkAvailable() {
                if (!this.onTouchBegan) {
                    cc.logID(1801);
                    return false;
                }
                return true;
            }
        });
        var TouchAllAtOnce = function TouchAllAtOnce() {
            cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, ListenerID.TOUCH_ALL_AT_ONCE, null);
        };
        js.extend(TouchAllAtOnce, cc.EventListener);
        js.mixin(TouchAllAtOnce.prototype, {
            constructor: TouchAllAtOnce,
            onTouchesBegan: null,
            onTouchesMoved: null,
            onTouchesEnded: null,
            onTouchesCancelled: null,
            clone: function clone() {
                var eventListener = new TouchAllAtOnce();
                eventListener.onTouchesBegan = this.onTouchesBegan;
                eventListener.onTouchesMoved = this.onTouchesMoved;
                eventListener.onTouchesEnded = this.onTouchesEnded;
                eventListener.onTouchesCancelled = this.onTouchesCancelled;
                return eventListener;
            },
            checkAvailable: function checkAvailable() {
                if (this.onTouchesBegan === null && this.onTouchesMoved === null && this.onTouchesEnded === null && this.onTouchesCancelled === null) {
                    cc.logID(1802);
                    return false;
                }
                return true;
            }
        });
        var Acceleration = function Acceleration(callback) {
            this._onAccelerationEvent = callback;
            cc.EventListener.call(this, cc.EventListener.ACCELERATION, ListenerID.ACCELERATION, this._callback);
        };
        js.extend(Acceleration, cc.EventListener);
        js.mixin(Acceleration.prototype, {
            constructor: Acceleration,
            _onAccelerationEvent: null,
            _callback: function _callback(event) {
                this._onAccelerationEvent(event.acc, event);
            },
            checkAvailable: function checkAvailable() {
                cc.assertID(this._onAccelerationEvent, 1803);
                return true;
            },
            clone: function clone() {
                return new Acceleration(this._onAccelerationEvent);
            }
        });
        var Keyboard = function Keyboard() {
            cc.EventListener.call(this, cc.EventListener.KEYBOARD, ListenerID.KEYBOARD, this._callback);
        };
        js.extend(Keyboard, cc.EventListener);
        js.mixin(Keyboard.prototype, {
            constructor: Keyboard,
            onKeyPressed: null,
            onKeyReleased: null,
            _callback: function _callback(event) {
                if (event.isPressed) {
                    if (this.onKeyPressed)
                        this.onKeyPressed(event.keyCode, event);
                } else {
                    if (this.onKeyReleased)
                        this.onKeyReleased(event.keyCode, event);
                }
            },
            clone: function clone() {
                var eventListener = new Keyboard();
                eventListener.onKeyPressed = this.onKeyPressed;
                eventListener.onKeyReleased = this.onKeyReleased;
                return eventListener;
            },
            checkAvailable: function checkAvailable() {
                if (this.onKeyPressed === null && this.onKeyReleased === null) {
                    cc.logID(1800);
                    return false;
                }
                return true;
            }
        });
        cc.EventListener.create = function (argObj) {
            cc.assertID(argObj && argObj.event, 1900);
            var listenerType = argObj.event;
            delete argObj.event;
            var listener = null;
            if (listenerType === cc.EventListener.TOUCH_ONE_BY_ONE)
                listener = new TouchOneByOne();
            else if (listenerType === cc.EventListener.TOUCH_ALL_AT_ONCE)
                listener = new TouchAllAtOnce();
            else if (listenerType === cc.EventListener.MOUSE)
                listener = new Mouse();
            else if (listenerType === cc.EventListener.CUSTOM) {
                listener = new Custom(argObj.eventName, argObj.callback);
                delete argObj.eventName;
                delete argObj.callback;
            } else if (listenerType === cc.EventListener.KEYBOARD)
                listener = new Keyboard();
            else if (listenerType === cc.EventListener.ACCELERATION) {
                listener = new Acceleration(argObj.callback);
                delete argObj.callback;
            }
            for (var key in argObj) {
                listener[key] = argObj[key];
            }
            return listener;
        };
        module.exports = cc.EventListener;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,