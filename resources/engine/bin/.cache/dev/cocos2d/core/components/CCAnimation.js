(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCAnimation.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var AnimationAnimator = require('../../animation/animation-animator');
        var AnimationClip = require('../../animation/animation-clip');
        var EventTarget = require('../event/event-target');
        var js = require('../platform/js');
        function equalClips(clip1, clip2) {
            if (clip1 === clip2) {
                return true;
            }
            return clip1 && clip2 && (clip1.name === clip2.name || clip1._uuid === clip2._uuid);
        }
        var EventType = cc.Enum({
            PLAY: 'play',
            STOP: 'stop',
            PAUSE: 'pause',
            RESUME: 'resume',
            LASTFRAME: 'lastframe',
            FINISHED: 'finished'
        });
        var Animation = cc.Class({
            name: 'cc.Animation',
            extends: require('./CCComponent'),
            mixins: [EventTarget],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.others/Animation',
                help: 'i18n:COMPONENT.help_url.animation',
                executeInEditMode: true
            },
            statics: { EventType: EventType },
            ctor: function ctor() {
                cc.EventTarget.call(this);
                this._animator = null;
                this._nameToState = js.createMap(true);
                this._didInit = false;
                this._currentClip = null;
            },
            properties: {
                _defaultClip: {
                    default: null,
                    type: AnimationClip
                },
                defaultClip: {
                    type: AnimationClip,
                    get: function get() {
                        return this._defaultClip;
                    },
                    set: function set(value) {
                        if (!CC_EDITOR || cc.engine && cc.engine.isPlaying) {
                            return;
                        }
                        this._defaultClip = value;
                        if (!value) {
                            return;
                        }
                        var clips = this._clips;
                        for (var i = 0, l = clips.length; i < l; i++) {
                            if (equalClips(value, clips[i])) {
                                return;
                            }
                        }
                        this.addClip(value);
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.animation.default_clip'
                },
                currentClip: {
                    get: function get() {
                        return this._currentClip;
                    },
                    set: function set(value) {
                        this._currentClip = value;
                    },
                    type: AnimationClip,
                    visible: false
                },
                _writableClips: {
                    get: function get() {
                        return this._clips;
                    },
                    set: function set(val) {
                        this._didInit = false;
                        this._clips = val;
                        this._init();
                    },
                    type: [AnimationClip]
                },
                _clips: {
                    default: [],
                    type: [AnimationClip],
                    tooltip: CC_DEV && 'i18n:COMPONENT.animation.clips',
                    visible: true
                },
                playOnLoad: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.animation.play_on_load'
                }
            },
            start: function start() {
                if (!CC_EDITOR && this.playOnLoad && this._defaultClip) {
                    var isPlaying = this._animator && this._animator.isPlaying;
                    if (!isPlaying) {
                        var state = this.getAnimationState(this._defaultClip.name);
                        this._animator.playState(state);
                    }
                }
            },
            onEnable: function onEnable() {
                if (this._animator) {
                    this._animator.resume();
                }
            },
            onDisable: function onDisable() {
                if (this._animator) {
                    this._animator.pause();
                }
            },
            onDestroy: function onDestroy() {
                this.stop();
            },
            getClips: function getClips() {
                return this._clips;
            },
            play: function play(name, startTime) {
                var state = this.playAdditive(name, startTime);
                this._animator.stopStatesExcept(state);
                return state;
            },
            playAdditive: function playAdditive(name, startTime) {
                this._init();
                var state = this.getAnimationState(name || this._defaultClip && this._defaultClip.name);
                if (state) {
                    this.enabled = true;
                    var animator = this._animator;
                    if (animator.isPlaying && state.isPlaying) {
                        if (state.isPaused) {
                            animator.resumeState(state);
                        } else {
                            animator.stopState(state);
                            animator.playState(state, startTime);
                        }
                    } else {
                        animator.playState(state, startTime);
                    }
                    if (!this.enabledInHierarchy) {
                        animator.pause();
                    }
                    this.currentClip = state.clip;
                }
                return state;
            },
            stop: function stop(name) {
                if (!this._didInit) {
                    return;
                }
                if (name) {
                    var state = this._nameToState[name];
                    if (state) {
                        this._animator.stopState(state);
                    }
                } else {
                    this._animator.stop();
                }
            },
            pause: function pause(name) {
                if (!this._didInit) {
                    return;
                }
                if (name) {
                    var state = this._nameToState[name];
                    if (state) {
                        this._animator.pauseState(state);
                    }
                } else {
                    this.enabled = false;
                }
            },
            resume: function resume(name) {
                if (!this._didInit) {
                    return;
                }
                if (name) {
                    var state = this._nameToState[name];
                    if (state) {
                        this._animator.resumeState(state);
                    }
                } else {
                    this.enabled = true;
                }
            },
            setCurrentTime: function setCurrentTime(time, name) {
                this._init();
                if (name) {
                    var state = this._nameToState[name];
                    if (state) {
                        this._animator.setStateTime(state, time);
                    }
                } else {
                    this._animator.setStateTime(time);
                }
            },
            getAnimationState: function getAnimationState(name) {
                this._init();
                var state = this._nameToState[name];
                if (CC_EDITOR && (!state || !cc.js.array.contains(this._clips, state.clip))) {
                    this._didInit = false;
                    if (this._animator) {
                        this._animator.stop();
                    }
                    this._init();
                    state = this._nameToState[name];
                }
                if (state && !state.curveLoaded) {
                    this._animator._reloadClip(state);
                }
                return state || null;
            },
            addClip: function addClip(clip, newName) {
                if (!clip) {
                    cc.warnID(3900);
                    return;
                }
                this._init();
                if (!cc.js.array.contains(this._clips, clip)) {
                    this._clips.push(clip);
                }
                newName = newName || clip.name;
                var oldState = this._nameToState[newName];
                if (oldState) {
                    if (oldState.clip === clip) {
                        return oldState;
                    } else {
                        var index = this._clips.indexOf(oldState.clip);
                        if (index !== -1) {
                            this._clips.splice(index, 1);
                        }
                    }
                }
                var newState = new cc.AnimationState(clip, newName);
                this._nameToState[newName] = newState;
                return newState;
            },
            removeClip: function removeClip(clip, force) {
                if (!clip) {
                    cc.warnID(3901);
                    return;
                }
                this._init();
                var state = void 0;
                for (var name in this._nameToState) {
                    state = this._nameToState[name];
                    var stateClip = state.clip;
                    if (stateClip === clip) {
                        break;
                    }
                }
                if (clip === this._defaultClip) {
                    if (force)
                        this._defaultClip = null;
                    else {
                        if (!CC_TEST)
                            cc.warnID(3902);
                        return;
                    }
                }
                if (state && state.isPlaying) {
                    if (force)
                        this.stop(state.name);
                    else {
                        if (!CC_TEST)
                            cc.warnID(3903);
                        return;
                    }
                }
                this._clips = this._clips.filter(function (item) {
                    return item !== clip;
                });
                if (state) {
                    delete this._nameToState[state.name];
                }
            },
            sample: function sample(name) {
                this._init();
                if (name) {
                    var state = this._nameToState[name];
                    if (state) {
                        state.sample();
                    }
                } else {
                    this._animator.sample();
                }
            },
            on: function on(type, callback, target, useCapture) {
                this._init();
                var ret = this._EventTargetOn(type, callback, target, useCapture);
                if (type === 'lastframe') {
                    var array = this._animator._anims.array;
                    for (var i = 0; i < array.length; ++i) {
                        var state = array[i];
                        state._lastframeEventOn = true;
                    }
                }
                return ret;
            },
            off: function off(type, callback, target, useCapture) {
                this._init();
                if (type === 'lastframe') {
                    var nameToState = this._nameToState;
                    for (var name in nameToState) {
                        var state = nameToState[name];
                        state._lastframeEventOn = false;
                    }
                }
                this._EventTargetOff(type, callback, target, useCapture);
            },
            _init: function _init() {
                if (this._didInit) {
                    return;
                }
                this._didInit = true;
                this._animator = new AnimationAnimator(this.node, this);
                this._createStates();
            },
            _createStates: function _createStates() {
                this._nameToState = js.createMap(true);
                var state = null;
                var defaultClipState = false;
                for (var i = 0; i < this._clips.length; ++i) {
                    var clip = this._clips[i];
                    if (clip) {
                        state = new cc.AnimationState(clip);
                        if (CC_EDITOR) {
                            this._animator._reloadClip(state);
                        }
                        this._nameToState[state.name] = state;
                        if (equalClips(this._defaultClip, clip)) {
                            defaultClipState = state;
                        }
                    }
                }
                if (this._defaultClip && !defaultClipState) {
                    state = new cc.AnimationState(this._defaultClip);
                    if (CC_EDITOR) {
                        this._animator._reloadClip(state);
                    }
                    this._nameToState[state.name] = state;
                }
            }
        });
        Animation.prototype._EventTargetOn = EventTarget.prototype.on;
        Animation.prototype._EventTargetOff = EventTarget.prototype.off;
        cc.Animation = module.exports = Animation;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,