(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCStudioComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var ComponentType = cc.Enum({
            NONE: 0,
            CHECKBOX: 1,
            TEXT_ATLAS: 2,
            SLIDER_BAR: 3,
            LIST_VIEW: 4,
            PAGE_VIEW: 5
        });
        var ListDirection = cc.Enum({
            VERTICAL: 0,
            HORIZONTAL: 1
        });
        var VerticalAlign = cc.Enum({
            TOP: 0,
            CENTER: 1,
            BOTTOM: 2
        });
        var HorizontalAlign = cc.Enum({
            LEFT: 0,
            CENTER: 1,
            RIGHT: 2
        });
        var StudioComponent = cc.Class({
            name: 'cc.StudioComponent',
            extends: cc.Component,
            editor: CC_EDITOR && { inspector: 'unpack://engine-dev/extensions/cocostudio/editor/studio-component.js' },
            properties: CC_EDITOR && {
                _type: ComponentType.NONE,
                type: {
                    get: function get() {
                        return this._type;
                    },
                    set: function set(value) {
                        this._type = value;
                    },
                    readonly: true,
                    type: ComponentType
                },
                _checkNormalBackFrame: null,
                checkNormalBackFrame: {
                    get: function get() {
                        return this._checkNormalBackFrame;
                    },
                    set: function set(value) {
                        this._checkNormalBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkPressedBackFrame: null,
                checkPressedBackFrame: {
                    get: function get() {
                        return this._checkPressedBackFrame;
                    },
                    set: function set(value) {
                        this._checkPressedBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkDisableBackFrame: null,
                checkDisableBackFrame: {
                    get: function get() {
                        return this._checkDisableBackFrame;
                    },
                    set: function set(value) {
                        this._checkDisableBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkNormalFrame: null,
                checkNormalFrame: {
                    get: function get() {
                        return this._checkNormalFrame;
                    },
                    set: function set(value) {
                        this._checkNormalFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _checkDisableFrame: null,
                checkDisableFrame: {
                    get: function get() {
                        return this._checkDisableFrame;
                    },
                    set: function set(value) {
                        this._checkDisableFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                checkInteractable: {
                    readonly: true,
                    default: true
                },
                isChecked: {
                    readonly: true,
                    default: true
                },
                _atlasFrame: null,
                atlasFrame: {
                    get: function get() {
                        return this._atlasFrame;
                    },
                    set: function set(value) {
                        this._atlasFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                firstChar: {
                    readonly: true,
                    default: '.'
                },
                charWidth: {
                    readonly: true,
                    default: 0
                },
                charHeight: {
                    readonly: true,
                    default: 0
                },
                string: {
                    readonly: true,
                    default: ''
                },
                _sliderBackFrame: null,
                sliderBackFrame: {
                    get: function get() {
                        return this._sliderBackFrame;
                    },
                    set: function set(value) {
                        this._sliderBackFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBarFrame: null,
                sliderBarFrame: {
                    get: function get() {
                        return this._sliderBarFrame;
                    },
                    set: function set(value) {
                        this._sliderBarFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBtnNormalFrame: null,
                sliderBtnNormalFrame: {
                    get: function get() {
                        return this._sliderBtnNormalFrame;
                    },
                    set: function set(value) {
                        this._sliderBtnNormalFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBtnPressedFrame: null,
                sliderBtnPressedFrame: {
                    get: function get() {
                        return this._sliderBtnPressedFrame;
                    },
                    set: function set(value) {
                        this._sliderBtnPressedFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                _sliderBtnDisabledFrame: null,
                sliderBtnDisabledFrame: {
                    get: function get() {
                        return this._sliderBtnDisabledFrame;
                    },
                    set: function set(value) {
                        this._sliderBtnDisabledFrame = value;
                    },
                    readonly: true,
                    type: cc.SpriteFrame
                },
                sliderInteractable: {
                    readonly: true,
                    default: true
                },
                sliderProgress: {
                    default: 0.5,
                    readonly: true,
                    type: 'Float',
                    range: [
                        0,
                        1,
                        0.1
                    ]
                },
                listInertia: {
                    readonly: true,
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollview.inertia'
                },
                listDirection: {
                    readonly: true,
                    default: ListDirection.VERTICAL,
                    type: ListDirection
                },
                listHorizontalAlign: {
                    readonly: true,
                    default: HorizontalAlign.LEFT,
                    type: HorizontalAlign
                },
                listVerticalAlign: {
                    readonly: true,
                    default: VerticalAlign.TOP,
                    type: VerticalAlign
                },
                listPadding: {
                    readonly: true,
                    default: 0
                }
            },
            statics: {
                ComponentType: ComponentType,
                ListDirection: ListDirection,
                VerticalAlign: VerticalAlign,
                HorizontalAlign: HorizontalAlign
            }
        });
        var PrefabHelper = require('../utils/prefab-helper');
        StudioComponent.PlaceHolder = cc.Class({
            name: 'cc.StudioComponent.PlaceHolder',
            extends: cc.Component,
            properties: {
                _baseUrl: '',
                nestedPrefab: cc.Prefab
            },
            onLoad: function onLoad() {
                if (!this.nestedPrefab) {
                    if (CC_DEV) {
                        cc.warn('Unable to find %s resource.', this._baseUrl);
                    }
                    return;
                }
                this._replaceWithNestedPrefab();
            },
            _replaceWithNestedPrefab: function _replaceWithNestedPrefab() {
                var node = this.node;
                var _prefab = node._prefab;
                _prefab.root = node;
                _prefab.asset = this.nestedPrefab;
                PrefabHelper.syncWithPrefab(node);
            }
        });
        cc.StudioComponent = module.exports = StudioComponent;
        var StudioWidget = cc.Class({
            name: 'cc.StudioWidget',
            extends: cc.Widget,
            editor: CC_EDITOR && { inspector: 'packages://inspector/inspectors/comps/ccwidget.js' },
            _validateTargetInDEV: function _validateTargetInDEV() {
            }
        });
        cc.StudioWidget = module.exports = StudioWidget;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,