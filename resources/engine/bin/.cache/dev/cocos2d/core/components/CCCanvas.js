(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCCanvas.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Camera = require('../camera/CCCamera');
        var Component = require('./CCComponent');
        var Canvas = cc.Class({
            name: 'cc.Canvas',
            extends: Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Canvas',
                help: 'i18n:COMPONENT.help_url.canvas',
                executeInEditMode: true,
                disallowMultiple: true
            },
            resetInEditor: CC_EDITOR && function () {
                _Scene._applyCanvasPreferences(this);
            },
            statics: { instance: null },
            properties: {
                _designResolution: cc.size(960, 640),
                designResolution: {
                    get: function get() {
                        return cc.size(this._designResolution);
                    },
                    set: function set(value) {
                        this._designResolution.width = value.width;
                        this._designResolution.height = value.height;
                        this.applySettings();
                        this.alignWithScreen();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.canvas.design_resolution'
                },
                _fitWidth: false,
                _fitHeight: true,
                fitHeight: {
                    get: function get() {
                        return this._fitHeight;
                    },
                    set: function set(value) {
                        if (this._fitHeight !== value) {
                            this._fitHeight = value;
                            this.applySettings();
                            this.alignWithScreen();
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.canvas.fit_height'
                },
                fitWidth: {
                    get: function get() {
                        return this._fitWidth;
                    },
                    set: function set(value) {
                        if (this._fitWidth !== value) {
                            this._fitWidth = value;
                            this.applySettings();
                            this.alignWithScreen();
                        }
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.canvas.fit_width'
                }
            },
            ctor: function ctor() {
                this._thisOnResized = this.alignWithScreen.bind(this);
            },
            __preload: function __preload() {
                if (CC_DEV) {
                    var Flags = cc.Object.Flags;
                    this._objFlags |= Flags.IsPositionLocked | Flags.IsAnchorLocked | Flags.IsSizeLocked;
                }
                if (Canvas.instance) {
                    return cc.errorID(6700, this.node.name, Canvas.instance.node.name);
                }
                Canvas.instance = this;
                if (CC_EDITOR) {
                    cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.alignWithScreen, this);
                    cc.engine.on('design-resolution-changed', this._thisOnResized);
                } else {
                    if (cc.sys.isMobile) {
                        window.addEventListener('resize', this._thisOnResized);
                    } else {
                        cc.view.on('canvas-resize', this._thisOnResized);
                    }
                }
                this.applySettings();
                this.alignWithScreen();
                var cameraNode = cc.find('Main Camera', this.node);
                if (!cameraNode) {
                    cameraNode = new cc.Node('Main Camera');
                    cameraNode.parent = this.node;
                    cameraNode.setSiblingIndex(0);
                }
                var camera = cameraNode.getComponent(Camera);
                if (!camera) {
                    camera = cameraNode.addComponent(Camera);
                    var ClearFlags = Camera.ClearFlags;
                    camera.clearFlags = ClearFlags.COLOR | ClearFlags.DEPTH | ClearFlags.STENCIL;
                    camera.depth = -1;
                }
                Camera.main = camera;
            },
            onDestroy: function onDestroy() {
                if (CC_EDITOR) {
                    cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.alignWithScreen, this);
                    cc.engine.off('design-resolution-changed', this._thisOnResized);
                } else {
                    if (cc.sys.isMobile) {
                        window.removeEventListener('resize', this._thisOnResized);
                    } else {
                        cc.view.off('canvas-resize', this._thisOnResized);
                    }
                }
                if (Canvas.instance === this) {
                    Canvas.instance = null;
                }
            },
            alignWithScreen: function alignWithScreen() {
                var designSize, nodeSize;
                if (CC_EDITOR) {
                    nodeSize = designSize = cc.engine.getDesignResolutionSize();
                    this.node.setPosition(designSize.width * 0.5, designSize.height * 0.5);
                } else {
                    var canvasSize = nodeSize = cc.visibleRect;
                    designSize = cc.view.getDesignResolutionSize();
                    var clipTopRight = !this.fitHeight && !this.fitWidth;
                    var offsetX = 0;
                    var offsetY = 0;
                    if (clipTopRight) {
                        offsetX = (designSize.width - canvasSize.width) * 0.5;
                        offsetY = (designSize.height - canvasSize.height) * 0.5;
                    }
                    this.node.setPosition(canvasSize.width * 0.5 + offsetX, canvasSize.height * 0.5 + offsetY);
                }
                this.node.width = nodeSize.width;
                this.node.height = nodeSize.height;
            },
            applySettings: function applySettings() {
                var ResolutionPolicy = cc.ResolutionPolicy;
                var policy;
                if (this.fitHeight && this.fitWidth) {
                    policy = ResolutionPolicy.SHOW_ALL;
                } else if (!this.fitHeight && !this.fitWidth) {
                    policy = ResolutionPolicy.NO_BORDER;
                } else if (this.fitWidth) {
                    policy = ResolutionPolicy.FIXED_WIDTH;
                } else {
                    policy = ResolutionPolicy.FIXED_HEIGHT;
                }
                var designRes = this._designResolution;
                if (CC_EDITOR) {
                    cc.engine.setDesignResolutionSize(designRes.width, designRes.height);
                } else {
                    cc.view.setDesignResolutionSize(designRes.width, designRes.height, policy);
                }
            }
        });
        cc.Canvas = module.exports = Canvas;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,