(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCRenderComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        var _renderData = require('../../renderer/render-data/render-data');
        var _renderData2 = _interopRequireDefault(_renderData);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var Component = require('./CCComponent');
        var RenderFlow = require('../renderer/render-flow');
        var BlendFactor = require('../platform/CCMacro').BlendFactor;
        var Material = require('../assets/material/CCMaterial');
        var RenderComponent = cc.Class({
            name: 'RenderComponent',
            extends: Component,
            editor: CC_EDITOR && {
                executeInEditMode: true,
                disallowMultiple: true
            },
            properties: {
                _materials: {
                    default: [],
                    type: Material
                },
                sharedMaterials: {
                    get: function get() {
                        return this._materials;
                    },
                    set: function set(val) {
                        this._materials = val;
                        this._activateMaterial(true);
                    },
                    type: [Material],
                    displayName: 'Materials'
                }
            },
            ctor: function ctor() {
                this._renderData = null;
                this.__allocedDatas = [];
                this._vertexFormat = null;
                this._toPostHandle = false;
                this._assembler = this.constructor._assembler;
                this._postAssembler = this.constructor._postAssembler;
            },
            onEnable: function onEnable() {
                if (this.node._renderComponent) {
                    this.node._renderComponent.enabled = false;
                }
                this.node._renderComponent = this;
                this.node._renderFlag |= RenderFlow.FLAG_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA;
            },
            onDisable: function onDisable() {
                this.node._renderComponent = null;
                this.disableRender();
            },
            onDestroy: function onDestroy() {
                for (var i = 0, l = this.__allocedDatas.length; i < l; i++) {
                    _renderData2.default.free(this.__allocedDatas[i]);
                }
                this.__allocedDatas.length = 0;
                this._materials.length = 0;
                this._renderData = null;
                var uniforms = this._uniforms;
                for (var name in uniforms) {
                    _uniformPool.remove(_uniformPool._data.indexOf(uniforms[name]));
                }
                this._uniforms = null;
                this._defines = null;
            },
            _canRender: function _canRender() {
                return this._enabled && this.node._activeInHierarchy;
            },
            markForUpdateRenderData: function markForUpdateRenderData(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_UPDATE_RENDER_DATA;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_UPDATE_RENDER_DATA;
                }
            },
            markForRender: function markForRender(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_RENDER;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_RENDER;
                }
            },
            markForCustomIARender: function markForCustomIARender(enable) {
                if (enable && this._canRender()) {
                    this.node._renderFlag |= RenderFlow.FLAG_CUSTOM_IA_RENDER;
                } else if (!enable) {
                    this.node._renderFlag &= ~RenderFlow.FLAG_CUSTOM_IA_RENDER;
                }
            },
            disableRender: function disableRender() {
                this.node._renderFlag &= ~(RenderFlow.FLAG_RENDER | RenderFlow.FLAG_CUSTOM_IA_RENDER | RenderFlow.FLAG_UPDATE_RENDER_DATA);
            },
            requestRenderData: function requestRenderData() {
                var data = _renderData2.default.alloc();
                this.__allocedDatas.push(data);
                return data;
            },
            destroyRenderData: function destroyRenderData(data) {
                var index = this.__allocedDatas.indexOf(data);
                if (index !== -1) {
                    this.__allocedDatas.splice(index, 1);
                    _renderData2.default.free(data);
                }
            },
            getMaterial: function getMaterial(index) {
                if (index < 0 || index >= this._materials.length) {
                    return null;
                }
                var material = this._materials[index];
                if (!material)
                    return null;
                var instantiated = Material.getInstantiatedMaterial(material, this);
                if (instantiated !== material) {
                    this.setMaterial(index, instantiated);
                }
                return this._materials[index];
            },
            setMaterial: function setMaterial(index, material) {
                this._materials[index] = material;
                if (material) {
                    this.markForUpdateRenderData(true);
                }
            },
            _activateMaterial: function _activateMaterial(force) {
            }
        });
        RenderComponent._assembler = null;
        RenderComponent._postAssembler = null;
        cc.RenderComponent = module.exports = RenderComponent;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUmVuZGVyQ29tcG9uZW50LmpzIiwiQzovVXNlcnMvbmFudGFzL2ZpcmViYWxsLXgvZmJfMjEtcmVsZWFzZS9lbmdpbmUvY29jb3MyZC9jb3JlL2NvbXBvbmVudHMvQ0NSZW5kZXJDb21wb25lbnQuanMiXSwibmFtZXMiOlsiQ29tcG9uZW50IiwicmVxdWlyZSIsIlJlbmRlckZsb3ciLCJCbGVuZEZhY3RvciIsIk1hdGVyaWFsIiwiUmVuZGVyQ29tcG9uZW50IiwiY2MiLCJDbGFzcyIsIm5hbWUiLCJleHRlbmRzIiwiZWRpdG9yIiwiQ0NfRURJVE9SIiwiZXhlY3V0ZUluRWRpdE1vZGUiLCJkaXNhbGxvd011bHRpcGxlIiwicHJvcGVydGllcyIsIl9tYXRlcmlhbHMiLCJkZWZhdWx0IiwidHlwZSIsInNoYXJlZE1hdGVyaWFscyIsImdldCIsInNldCIsInZhbCIsIl9hY3RpdmF0ZU1hdGVyaWFsIiwiZGlzcGxheU5hbWUiLCJjdG9yIiwiX3JlbmRlckRhdGEiLCJfX2FsbG9jZWREYXRhcyIsIl92ZXJ0ZXhGb3JtYXQiLCJfdG9Qb3N0SGFuZGxlIiwiX2Fzc2VtYmxlciIsImNvbnN0cnVjdG9yIiwiX3Bvc3RBc3NlbWJsZXIiLCJvbkVuYWJsZSIsIm5vZGUiLCJfcmVuZGVyQ29tcG9uZW50IiwiZW5hYmxlZCIsIl9yZW5kZXJGbGFnIiwiRkxBR19SRU5ERVIiLCJGTEFHX1VQREFURV9SRU5ERVJfREFUQSIsIm9uRGlzYWJsZSIsImRpc2FibGVSZW5kZXIiLCJvbkRlc3Ryb3kiLCJpIiwibCIsImxlbmd0aCIsImZyZWUiLCJ1bmlmb3JtcyIsIl91bmlmb3JtcyIsIl91bmlmb3JtUG9vbCIsInJlbW92ZSIsIl9kYXRhIiwiaW5kZXhPZiIsIl9kZWZpbmVzIiwiX2NhblJlbmRlciIsIl9lbmFibGVkIiwiX2FjdGl2ZUluSGllcmFyY2h5IiwibWFya0ZvclVwZGF0ZVJlbmRlckRhdGEiLCJlbmFibGUiLCJtYXJrRm9yUmVuZGVyIiwibWFya0ZvckN1c3RvbUlBUmVuZGVyIiwiRkxBR19DVVNUT01fSUFfUkVOREVSIiwicmVxdWVzdFJlbmRlckRhdGEiLCJkYXRhIiwiYWxsb2MiLCJwdXNoIiwiZGVzdHJveVJlbmRlckRhdGEiLCJpbmRleCIsInNwbGljZSIsImdldE1hdGVyaWFsIiwibWF0ZXJpYWwiLCJpbnN0YW50aWF0ZWQiLCJnZXRJbnN0YW50aWF0ZWRNYXRlcmlhbCIsInNldE1hdGVyaWFsIiwiZm9yY2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBeUJBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7O1FBQ0EsT0FBQSxPQUFBLENBQUEsT0FBQSxDQUFBOzs7Ozs7Ozs7UUFEQSxJQUFBLElBQUEsR0FBQSxPQUFBLENBQUEsb0JBQUEsQ0FBQTs7UUFDQSxJQUFBLFdBQUEsR0FBQSxPQUFBLENBQUEsd0NBQUEsQ0FBQTs7Ozs7UUFFQSxJQUFNQSxTQUFBQSxHQUFZQyxPQUFBQSxDQUFRLGVBQVJBLENBQWxCO1FBQ0EsSUFBTUMsVUFBQUEsR0FBYUQsT0FBQUEsQ0FBUSx5QkFBUkEsQ0FBbkI7UUFDQSxJQUFNRSxXQUFBQSxHQUFjRixPQUFBQSxDQUFRLHFCQUFSQSxFQUErQkUsV0FBbkQ7UUFDQSxJQUFNQyxRQUFBQSxHQUFXSCxPQUFBQSxDQUFRLCtCQUFSQSxDQUFqQjtRQVdBLElBQUlJLGVBQUFBLEdBQWtCQyxFQUFBQSxDQUFHQyxLQUFIRCxDQUFTO0FBQUEsWUFDM0JFLElBQUFBLEVBQU0saUJBRHFCO0FBQUEsWUFFM0JDLE9BQUFBLEVBQVNULFNBRmtCO0FBQUEsWUFJM0JVLE1BQUFBLEVBQVFDLFNBQUFBLElBQWE7QUFBQSxnQkFDakJDLGlCQUFBQSxFQUFtQixJQURGO0FBQUEsZ0JBRWpCQyxnQkFBQUEsRUFBa0IsSUFGRDtBQUFBLGFBSk07QUFBQSxZQVMzQkMsVUFBQUEsRUFBWTtBQUFBLGdCQUNSQyxVQUFBQSxFQUFZO0FBQUEsb0JBQ1JDLE9BQUFBLEVB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O0FBQUEsYUE3SkM7QUFBQSxTQUFUbkUsQ0FBdEI7UUFnS0FELGVBQUFBLENBQWdCd0IsVUFBaEJ4QixHQUE2QixJQUE3QkE7UUFDQUEsZUFBQUEsQ0FBZ0IwQixjQUFoQjFCLEdBQWlDLElBQWpDQTtRQUVBQyxFQUFBQSxDQUFHRCxlQUFIQyxHQUFxQm9FLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCckUsZUFBdENDIiwiZmlsZSI6IkNDUmVuZGVyQ29tcG9uZW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5pbXBvcnQgZ2Z4IGZyb20gJy4uLy4uL3JlbmRlcmVyL2dmeCc7XHJcbmltcG9ydCBSZW5kZXJEYXRhIGZyb20gJy4uLy4uL3JlbmRlcmVyL3JlbmRlci1kYXRhL3JlbmRlci1kYXRhJztcclxuXHJcbmNvbnN0IENvbXBvbmVudCA9IHJlcXVpcmUoJy4vQ0NDb21wb25lbnQnKTtcclxuY29uc3QgUmVuZGVyRmxvdyA9IHJlcXVpcmUoJy4uL3JlbmRlcmVyL3JlbmRlci1mbG93Jyk7XHJcbmNvbnN0IEJsZW5kRmFjdG9yID0gcmVxdWlyZSgnLi4vcGxhdGZvcm0vQ0NNYWNybycpLkJsZW5kRmFjdG9yO1xyXG5jb25zdCBNYXRlcmlhbCA9IHJlcXVpcmUoJy4uL2Fzc2V0cy9tYXRlcmlhbC9DQ01hdGVyaWFsJyk7XHJcblxyXG4vKipcclxuICogISNlblxyXG4gKiBCYXNlIGNsYXNzIGZvciBjb21wb25lbnRzIHdoaWNoIHN1cHBvcnRzIHJlbmRlcmluZyBmZWF0dXJlcy5cclxuICogISN6aFxyXG4gKiDmiYDmnInmlK/mjIHmuLLmn5PnmoTnu4Tku7bnmoTln7rnsbtcclxuICpcclxuICogQGNsYXNzIFJlbmRlckNvbXBvbmVudFxyXG4gKiBAZXh0ZW5kcyBDb21wb25lbnRcclxuICovXHJcbmxldCBSZW5kZXJDb21wb25lbnQgPSBjYy5DbGFzcyh7XHJcbiAgICBuYW1lOiAnUmVuZGVyQ29tcG9uZW50JyxcclxuICAgIGV4dGVuZHM6IENvbXBvbmVudCxcclxuXHJcbiAgICBlZGl0b3I6IENDX0VESVRPUiAmJiB7XHJcbiAgICAgICAgZXhlY3V0ZUluRWRpdE1vZGU6IHRydWUsXHJcbiAgICAgICAgZGlzYWxsb3dNdWx0aXBsZTogdHJ1ZVxyXG4gICAgfSxcclxuXHJcbiAgICBwcm9wZXJ0aWVzOiB7XHJcbiAgICAgICAgX21hdGVyaWFsczoge1xyXG4gICAgICAgICAgICBkZWZhdWx0OiBbXSxcclxuICAgICAgICAgICAgdHlwZTogTWF0ZXJpYWwsXHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogISNlbiBUaGUgbWF0ZXJpYWxzIHVzZWQgYnkgdGhpcyByZW5kZXIgY29tcG9uZW50LlxyXG4gICAgICAgICAqICEjemgg5riy5p+T57uE5Lu25L2/55So55qE5p2Q6LSo44CCXHJcbiAgICAgICAgICogQHByb3BlcnR5IHtbTWF0ZXJpYWxdfSBzaGFyZWRNYXRlcmlhbHNcclxuICAgICAgICAgKi9cclxuICAgICAgICBzaGFyZWRNYXRlcmlhbHM6IHtcclxuICAgICAgICAgICAgZ2V0ICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbHM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldCAodmFsKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9tYXRlcmlhbHMgPSB2YWw7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZU1hdGVyaWFsKHRydWUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICB0eXBlOiBbTWF0ZXJpYWxdLFxyXG4gICAgICAgICAgICBkaXNwbGF5TmFtZTogJ01hdGVyaWFscydcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjdG9yICgpIHtcclxuICAgICAgICB0aGlzLl9yZW5kZXJEYXRhID0gbnVsbDtcclxuICAgICAgICB0aGlzLl9fYWxsb2NlZERhdGFzID0gW107XHJcbiAgICAgICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gbnVsbDtcclxuICAgICAgICB0aGlzLl90b1Bvc3RIYW5kbGUgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLl9hc3NlbWJsZXIgPSB0aGlzLmNvbnN0cnVjdG9yLl9hc3NlbWJsZXI7XHJcbiAgICAgICAgdGhpcy5fcG9zdEFzc2VtYmxlciA9IHRoaXMuY29uc3RydWN0b3IuX3Bvc3RBc3NlbWJsZXI7XHJcbiAgICB9LFxyXG5cclxuICAgIG9uRW5hYmxlICgpIHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlLl9yZW5kZXJDb21wb25lbnQpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJDb21wb25lbnQuZW5hYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckNvbXBvbmVudCA9IHRoaXM7XHJcbiAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19SRU5ERVIgfCBSZW5kZXJGbG93LkZMQUdfVVBEQVRFX1JFTkRFUl9EQVRBO1xyXG4gICAgfSxcclxuXHJcbiAgICBvbkRpc2FibGUgKCkge1xyXG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50ID0gbnVsbDtcclxuICAgICAgICB0aGlzLmRpc2FibGVSZW5kZXIoKTtcclxuICAgIH0sXHJcblxyXG4gICAgb25EZXN0cm95ICgpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IHRoaXMuX19hbGxvY2VkRGF0YXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIFJlbmRlckRhdGEuZnJlZSh0aGlzLl9fYWxsb2NlZERhdGFzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fX2FsbG9jZWREYXRhcy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuX21hdGVyaWFscy5sZW5ndGggPSAwO1xyXG4gICAgICAgIHRoaXMuX3JlbmRlckRhdGEgPSBudWxsO1xyXG5cclxuICAgICAgICBsZXQgdW5pZm9ybXMgPSB0aGlzLl91bmlmb3JtcztcclxuICAgICAgICBmb3IgKGxldCBuYW1lIGluIHVuaWZvcm1zKSB7XHJcbiAgICAgICAgICAgIF91bmlmb3JtUG9vbC5yZW1vdmUoX3VuaWZvcm1Qb29sLl9kYXRhLmluZGV4T2YodW5pZm9ybXNbbmFtZV0pKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdW5pZm9ybXMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuX2RlZmluZXMgPSBudWxsO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2NhblJlbmRlciAoKSB7XHJcbiAgICAgICAgLy8gV2hlbiB0aGUgbm9kZSBpcyBhY3RpdmF0ZWQsIGl0IHdpbGwgZXhlY3V0ZSBvbkVuYWJsZSBhbmQgdGhlIHJlbmRlcmZsYWcgd2lsbCBhbHNvIGJlIHJlc2V0LlxyXG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkICYmIHRoaXMubm9kZS5fYWN0aXZlSW5IaWVyYXJjaHk7XHJcbiAgICB9LFxyXG5cclxuICAgIG1hcmtGb3JVcGRhdGVSZW5kZXJEYXRhIChlbmFibGUpIHtcclxuICAgICAgICBpZiAoZW5hYmxlICYmIHRoaXMuX2NhblJlbmRlcigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfVVBEQVRFX1JFTkRFUl9EQVRBO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICghZW5hYmxlKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyAmPSB+UmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIG1hcmtGb3JSZW5kZXIgKGVuYWJsZSkge1xyXG4gICAgICAgIGlmIChlbmFibGUgJiYgdGhpcy5fY2FuUmVuZGVyKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19SRU5ERVI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKCFlbmFibGUpIHtcclxuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnICY9IH5SZW5kZXJGbG93LkZMQUdfUkVOREVSO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgbWFya0ZvckN1c3RvbUlBUmVuZGVyIChlbmFibGUpIHtcclxuICAgICAgICBpZiAoZW5hYmxlICYmIHRoaXMuX2NhblJlbmRlcigpKSB7XHJcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfQ1VTVE9NX0lBX1JFTkRFUjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAoIWVuYWJsZSkge1xyXG4gICAgICAgICAgICB0aGlzLm5vZGUuX3JlbmRlckZsYWcgJj0gflJlbmRlckZsb3cuRkxBR19DVVNUT01fSUFfUkVOREVSO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcblxyXG4gICAgZGlzYWJsZVJlbmRlciAoKSB7XHJcbiAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnICY9IH4oUmVuZGVyRmxvdy5GTEFHX1JFTkRFUiB8IFJlbmRlckZsb3cuRkxBR19DVVNUT01fSUFfUkVOREVSIHwgUmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQSk7XHJcbiAgICB9LFxyXG5cclxuICAgIHJlcXVlc3RSZW5kZXJEYXRhICgpIHtcclxuICAgICAgICBsZXQgZGF0YSA9IFJlbmRlckRhdGEuYWxsb2MoKTtcclxuICAgICAgICB0aGlzLl9fYWxsb2NlZERhdGFzLnB1c2goZGF0YSk7XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9LFxyXG5cclxuICAgIGRlc3Ryb3lSZW5kZXJEYXRhIChkYXRhKSB7XHJcbiAgICAgICAgbGV0IGluZGV4ID0gdGhpcy5fX2FsbG9jZWREYXRhcy5pbmRleE9mKGRhdGEpO1xyXG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgICAgdGhpcy5fX2FsbG9jZWREYXRhcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICBSZW5kZXJEYXRhLmZyZWUoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IHRoZSBtYXRlcmlhbCBieSBpbmRleC5cclxuICAgICAqICEjemgg5qC55o2u5oyH5a6a57Si5byV6I635Y+W5p2Q6LSoXHJcbiAgICAgKiBAbWV0aG9kIGdldE1hdGVyaWFsXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggXHJcbiAgICAgKi9cclxuICAgIGdldE1hdGVyaWFsIChpbmRleCkge1xyXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5fbWF0ZXJpYWxzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxldCBtYXRlcmlhbCA9IHRoaXMuX21hdGVyaWFsc1tpbmRleF07XHJcbiAgICAgICAgaWYgKCFtYXRlcmlhbCkgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbGV0IGluc3RhbnRpYXRlZCA9IE1hdGVyaWFsLmdldEluc3RhbnRpYXRlZE1hdGVyaWFsKG1hdGVyaWFsLCB0aGlzKTtcclxuICAgICAgICBpZiAoaW5zdGFudGlhdGVkICE9PSBtYXRlcmlhbCkge1xyXG4gICAgICAgICAgICB0aGlzLnNldE1hdGVyaWFsKGluZGV4LCBpbnN0YW50aWF0ZWQpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX21hdGVyaWFsc1tpbmRleF07XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gU2V0IHRoZSBtYXRlcmlhbCBieSBpbmRleC5cclxuICAgICAqICEjemgg5qC55o2u5oyH5a6a57Si5byV6K6+572u5p2Q6LSoXHJcbiAgICAgKiBAbWV0aG9kIHNldE1hdGVyaWFsXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggXHJcbiAgICAgKiBAcGFyYW0ge01hdGVyaWFsfSBtYXRlcmlhbCBcclxuICAgICAqL1xyXG4gICAgc2V0TWF0ZXJpYWwgKGluZGV4LCBtYXRlcmlhbCkge1xyXG4gICAgICAgIHRoaXMuX21hdGVyaWFsc1tpbmRleF0gPSBtYXRlcmlhbDtcclxuICAgICAgICBpZiAobWF0ZXJpYWwpIHtcclxuICAgICAgICAgICAgdGhpcy5tYXJrRm9yVXBkYXRlUmVuZGVyRGF0YSh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIF9hY3RpdmF0ZU1hdGVyaWFsIChmb3JjZSkge1xyXG4gICAgfSxcclxufSk7XHJcblJlbmRlckNvbXBvbmVudC5fYXNzZW1ibGVyID0gbnVsbDtcclxuUmVuZGVyQ29tcG9uZW50Ll9wb3N0QXNzZW1ibGVyID0gbnVsbDtcclxuXHJcbmNjLlJlbmRlckNvbXBvbmVudCA9IG1vZHVsZS5leHBvcnRzID0gUmVuZGVyQ29tcG9uZW50OyIsIid1c2Ugc3RyaWN0JztcblxudmFyIF9nZnggPSByZXF1aXJlKCcuLi8uLi9yZW5kZXJlci9nZngnKTtcblxudmFyIF9nZngyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2Z4KTtcblxudmFyIF9yZW5kZXJEYXRhID0gcmVxdWlyZSgnLi4vLi4vcmVuZGVyZXIvcmVuZGVyLWRhdGEvcmVuZGVyLWRhdGEnKTtcblxudmFyIF9yZW5kZXJEYXRhMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3JlbmRlckRhdGEpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxudmFyIENvbXBvbmVudCA9IHJlcXVpcmUoJy4vQ0NDb21wb25lbnQnKTtcbnZhciBSZW5kZXJGbG93ID0gcmVxdWlyZSgnLi4vcmVuZGVyZXIvcmVuZGVyLWZsb3cnKTtcbnZhciBCbGVuZEZhY3RvciA9IHJlcXVpcmUoJy4uL3BsYXRmb3JtL0NDTWFjcm8nKS5CbGVuZEZhY3RvcjtcbnZhciBNYXRlcmlhbCA9IHJlcXVpcmUoJy4uL2Fzc2V0cy9tYXRlcmlhbC9DQ01hdGVyaWFsJyk7XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIEJhc2UgY2xhc3MgZm9yIGNvbXBvbmVudHMgd2hpY2ggc3VwcG9ydHMgcmVuZGVyaW5nIGZlYXR1cmVzLlxyXG4gKiAhI3poXHJcbiAqIOaJgOacieaUr+aMgea4suafk+eahOe7hOS7tueahOWfuuexu1xyXG4gKlxyXG4gKiBAY2xhc3MgUmVuZGVyQ29tcG9uZW50XHJcbiAqIEBleHRlbmRzIENvbXBvbmVudFxyXG4gKi9cbnZhciBSZW5kZXJDb21wb25lbnQgPSBjYy5DbGFzcyh7XG4gICAgbmFtZTogJ1JlbmRlckNvbXBvbmVudCcsXG4gICAgZXh0ZW5kczogQ29tcG9uZW50LFxuXG4gICAgZWRpdG9yOiBDQ19FRElUT1IgJiYge1xuICAgICAgICBleGVjdXRlSW5FZGl0TW9kZTogdHJ1ZSxcbiAgICAgICAgZGlzYWxsb3dNdWx0aXBsZTogdHJ1ZVxuICAgIH0sXG5cbiAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIF9tYXRlcmlhbHM6IHtcbiAgICAgICAgICAgIGRlZmF1bHQ6IFtdLFxuICAgICAgICAgICAgdHlwZTogTWF0ZXJpYWxcbiAgICAgICAgfSxcblxuICAgICAgICAvKipcclxuICAgICAgICAgKiAhI2VuIFRoZSBtYXRlcmlhbHMgdXNlZCBieSB0aGlzIHJlbmRlciBjb21wb25lbnQuXHJcbiAgICAgICAgICogISN6aCDmuLLmn5Pnu4Tku7bkvb/nlKjnmoTmnZDotKjjgIJcclxuICAgICAgICAgKiBAcHJvcGVydHkge1tNYXRlcmlhbF19IHNoYXJlZE1hdGVyaWFsc1xyXG4gICAgICAgICAqL1xuICAgICAgICBzaGFyZWRNYXRlcmlhbHM6IHtcbiAgICAgICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9tYXRlcmlhbHM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWF0ZXJpYWxzID0gdmFsO1xuICAgICAgICAgICAgICAgIHRoaXMuX2FjdGl2YXRlTWF0ZXJpYWwodHJ1ZSk7XG4gICAgICAgICAgICB9LFxuXG4gICAgICAgICAgICB0eXBlOiBbTWF0ZXJpYWxdLFxuICAgICAgICAgICAgZGlzcGxheU5hbWU6ICdNYXRlcmlhbHMnXG4gICAgICAgIH1cbiAgICB9LFxuXG4gICAgY3RvcjogZnVuY3Rpb24gY3RvcigpIHtcbiAgICAgICAgdGhpcy5fcmVuZGVyRGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuX19hbGxvY2VkRGF0YXMgPSBbXTtcbiAgICAgICAgdGhpcy5fdmVydGV4Rm9ybWF0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdG9Qb3N0SGFuZGxlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX2Fzc2VtYmxlciA9IHRoaXMuY29uc3RydWN0b3IuX2Fzc2VtYmxlcjtcbiAgICAgICAgdGhpcy5fcG9zdEFzc2VtYmxlciA9IHRoaXMuY29uc3RydWN0b3IuX3Bvc3RBc3NlbWJsZXI7XG4gICAgfSxcbiAgICBvbkVuYWJsZTogZnVuY3Rpb24gb25FbmFibGUoKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGUuX3JlbmRlckNvbXBvbmVudCkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJDb21wb25lbnQuZW5hYmxlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50ID0gdGhpcztcbiAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19SRU5ERVIgfCBSZW5kZXJGbG93LkZMQUdfVVBEQVRFX1JFTkRFUl9EQVRBO1xuICAgIH0sXG4gICAgb25EaXNhYmxlOiBmdW5jdGlvbiBvbkRpc2FibGUoKSB7XG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyQ29tcG9uZW50ID0gbnVsbDtcbiAgICAgICAgdGhpcy5kaXNhYmxlUmVuZGVyKCk7XG4gICAgfSxcbiAgICBvbkRlc3Ryb3k6IGZ1bmN0aW9uIG9uRGVzdHJveSgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSB0aGlzLl9fYWxsb2NlZERhdGFzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgX3JlbmRlckRhdGEyLmRlZmF1bHQuZnJlZSh0aGlzLl9fYWxsb2NlZERhdGFzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9fYWxsb2NlZERhdGFzLmxlbmd0aCA9IDA7XG4gICAgICAgIHRoaXMuX21hdGVyaWFscy5sZW5ndGggPSAwO1xuICAgICAgICB0aGlzLl9yZW5kZXJEYXRhID0gbnVsbDtcblxuICAgICAgICB2YXIgdW5pZm9ybXMgPSB0aGlzLl91bmlmb3JtcztcbiAgICAgICAgZm9yICh2YXIgbmFtZSBpbiB1bmlmb3Jtcykge1xuICAgICAgICAgICAgX3VuaWZvcm1Qb29sLnJlbW92ZShfdW5pZm9ybVBvb2wuX2RhdGEuaW5kZXhPZih1bmlmb3Jtc1tuYW1lXSkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VuaWZvcm1zID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGVmaW5lcyA9IG51bGw7XG4gICAgfSxcbiAgICBfY2FuUmVuZGVyOiBmdW5jdGlvbiBfY2FuUmVuZGVyKCkge1xuICAgICAgICAvLyBXaGVuIHRoZSBub2RlIGlzIGFjdGl2YXRlZCwgaXQgd2lsbCBleGVjdXRlIG9uRW5hYmxlIGFuZCB0aGUgcmVuZGVyZmxhZyB3aWxsIGFsc28gYmUgcmVzZXQuXG4gICAgICAgIHJldHVybiB0aGlzLl9lbmFibGVkICYmIHRoaXMubm9kZS5fYWN0aXZlSW5IaWVyYXJjaHk7XG4gICAgfSxcbiAgICBtYXJrRm9yVXBkYXRlUmVuZGVyRGF0YTogZnVuY3Rpb24gbWFya0ZvclVwZGF0ZVJlbmRlckRhdGEoZW5hYmxlKSB7XG4gICAgICAgIGlmIChlbmFibGUgJiYgdGhpcy5fY2FuUmVuZGVyKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyB8PSBSZW5kZXJGbG93LkZMQUdfVVBEQVRFX1JFTkRFUl9EQVRBO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyAmPSB+UmVuZGVyRmxvdy5GTEFHX1VQREFURV9SRU5ERVJfREFUQTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgbWFya0ZvclJlbmRlcjogZnVuY3Rpb24gbWFya0ZvclJlbmRlcihlbmFibGUpIHtcbiAgICAgICAgaWYgKGVuYWJsZSAmJiB0aGlzLl9jYW5SZW5kZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19SRU5ERVI7XG4gICAgICAgIH0gZWxzZSBpZiAoIWVuYWJsZSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnICY9IH5SZW5kZXJGbG93LkZMQUdfUkVOREVSO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBtYXJrRm9yQ3VzdG9tSUFSZW5kZXI6IGZ1bmN0aW9uIG1hcmtGb3JDdXN0b21JQVJlbmRlcihlbmFibGUpIHtcbiAgICAgICAgaWYgKGVuYWJsZSAmJiB0aGlzLl9jYW5SZW5kZXIoKSkge1xuICAgICAgICAgICAgdGhpcy5ub2RlLl9yZW5kZXJGbGFnIHw9IFJlbmRlckZsb3cuRkxBR19DVVNUT01fSUFfUkVOREVSO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbmFibGUpIHtcbiAgICAgICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyAmPSB+UmVuZGVyRmxvdy5GTEFHX0NVU1RPTV9JQV9SRU5ERVI7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGRpc2FibGVSZW5kZXI6IGZ1bmN0aW9uIGRpc2FibGVSZW5kZXIoKSB7XG4gICAgICAgIHRoaXMubm9kZS5fcmVuZGVyRmxhZyAmPSB+KFJlbmRlckZsb3cuRkxBR19SRU5ERVIgfCBSZW5kZXJGbG93LkZMQUdfQ1VTVE9NX0lBX1JFTkRFUiB8IFJlbmRlckZsb3cuRkxBR19VUERBVEVfUkVOREVSX0RBVEEpO1xuICAgIH0sXG4gICAgcmVxdWVzdFJlbmRlckRhdGE6IGZ1bmN0aW9uIHJlcXVlc3RSZW5kZXJEYXRhKCkge1xuICAgICAgICB2YXIgZGF0YSA9IF9yZW5kZXJEYXRhMi5kZWZhdWx0LmFsbG9jKCk7XG4gICAgICAgIHRoaXMuX19hbGxvY2VkRGF0YXMucHVzaChkYXRhKTtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcbiAgICBkZXN0cm95UmVuZGVyRGF0YTogZnVuY3Rpb24gZGVzdHJveVJlbmRlckRhdGEoZGF0YSkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLl9fYWxsb2NlZERhdGFzLmluZGV4T2YoZGF0YSk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgIHRoaXMuX19hbGxvY2VkRGF0YXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgIF9yZW5kZXJEYXRhMi5kZWZhdWx0LmZyZWUoZGF0YSk7XG4gICAgICAgIH1cbiAgICB9LFxuXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IHRoZSBtYXRlcmlhbCBieSBpbmRleC5cclxuICAgICAqICEjemgg5qC55o2u5oyH5a6a57Si5byV6I635Y+W5p2Q6LSoXHJcbiAgICAgKiBAbWV0aG9kIGdldE1hdGVyaWFsXHJcbiAgICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggXHJcbiAgICAgKi9cbiAgICBnZXRNYXRlcmlhbDogZnVuY3Rpb24gZ2V0TWF0ZXJpYWwoaW5kZXgpIHtcbiAgICAgICAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+PSB0aGlzLl9tYXRlcmlhbHMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBtYXRlcmlhbCA9IHRoaXMuX21hdGVyaWFsc1tpbmRleF07XG4gICAgICAgIGlmICghbWF0ZXJpYWwpIHJldHVybiBudWxsO1xuXG4gICAgICAgIHZhciBpbnN0YW50aWF0ZWQgPSBNYXRlcmlhbC5nZXRJbnN0YW50aWF0ZWRNYXRlcmlhbChtYXRlcmlhbCwgdGhpcyk7XG4gICAgICAgIGlmIChpbnN0YW50aWF0ZWQgIT09IG1hdGVyaWFsKSB7XG4gICAgICAgICAgICB0aGlzLnNldE1hdGVyaWFsKGluZGV4LCBpbnN0YW50aWF0ZWQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuX21hdGVyaWFsc1tpbmRleF07XG4gICAgfSxcblxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFNldCB0aGUgbWF0ZXJpYWwgYnkgaW5kZXguXHJcbiAgICAgKiAhI3poIOagueaNruaMh+Wumue0ouW8leiuvue9ruadkOi0qFxyXG4gICAgICogQG1ldGhvZCBzZXRNYXRlcmlhbFxyXG4gICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFxyXG4gICAgICogQHBhcmFtIHtNYXRlcmlhbH0gbWF0ZXJpYWwgXHJcbiAgICAgKi9cbiAgICBzZXRNYXRlcmlhbDogZnVuY3Rpb24gc2V0TWF0ZXJpYWwoaW5kZXgsIG1hdGVyaWFsKSB7XG4gICAgICAgIHRoaXMuX21hdGVyaWFsc1tpbmRleF0gPSBtYXRlcmlhbDtcbiAgICAgICAgaWYgKG1hdGVyaWFsKSB7XG4gICAgICAgICAgICB0aGlzLm1hcmtGb3JVcGRhdGVSZW5kZXJEYXRhKHRydWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBfYWN0aXZhdGVNYXRlcmlhbDogZnVuY3Rpb24gX2FjdGl2YXRlTWF0ZXJpYWwoZm9yY2UpIHt9XG59KTtcblJlbmRlckNvbXBvbmVudC5fYXNzZW1ibGVyID0gbnVsbDtcblJlbmRlckNvbXBvbmVudC5fcG9zdEFzc2VtYmxlciA9IG51bGw7XG5cbmNjLlJlbmRlckNvbXBvbmVudCA9IG1vZHVsZS5leHBvcnRzID0gUmVuZGVyQ29tcG9uZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFVtVnVaR1Z5UTI5dGNHOXVaVzUwTG1weklsMHNJbTVoYldWeklqcGJJa052YlhCdmJtVnVkQ0lzSW5KbGNYVnBjbVVpTENKU1pXNWtaWEpHYkc5M0lpd2lRbXhsYm1SR1lXTjBiM0lpTENKTllYUmxjbWxoYkNJc0lsSmxibVJsY2tOdmJYQnZibVZ1ZENJc0ltTmpJaXdpUTJ4aGMzTWlMQ0p1WVcxbElpd2laWGgwWlc1a2N5SXNJbVZrYVhSdmNpSXNJa05EWDBWRVNWUlBVaUlzSW1WNFpXTjFkR1ZKYmtWa2FYUk5iMlJsSWl3aVpHbHpZV3hzYjNkTmRXeDBhWEJzWlNJc0luQnliM0JsY25ScFpYTWlMQ0pmYldGMFpYSnBZV3h6SWl3aVpHVm1ZWFZzZENJc0luUjVjR1VpTENKemFHRnlaV1JOWVhSbGNtbGhiSE1pTENKblpYUWlMQ0p6WlhRaUxDSjJZV3dpTENKZllXTjBhWFpoZEdWTllYUmxjbWxoYkNJc0ltUnBjM0JzWVhsT1lXMWxJaXdpWTNSdmNpSXNJbDl5Wlc1a1pYSkVZWFJoSWl3aVgxOWhiR3h2WTJWa1JHRjBZWE1pTENKZmRtVnlkR1Y0Um05eWJXRjBJaXdpWDNSdlVHOXpkRWhoYm1Sc1pTSXNJbDloYzNObGJXSnNaWElpTENKamIyNXpkSEoxWTNSdmNpSXNJbDl3YjNOMFFYTnpaVzFpYkdWeUlpd2liMjVGYm1GaWJHVWlMQ0p1YjJSbElpd2lYM0psYm1SbGNrTnZiWEJ2Ym1WdWRDSXNJbVZ1WVdKc1pXUWlMQ0pmY21WdVpHVnlSbXhoWnlJc0lrWk1RVWRmVWtWT1JFVlNJaXdpUmt4QlIxOVZVRVJCVkVWZlVrVk9SRVZTWDBSQlZFRWlMQ0p2YmtScGMyRmliR1VpTENKa2FYTmhZbXhsVW1WdVpHVnlJaXdpYjI1RVpYTjBjbTk1SWl3aWFTSXNJbXdpTENKc1pXNW5kR2dpTENKbWNtVmxJaXdpZFc1cFptOXliWE1pTENKZmRXNXBabTl5YlhNaUxDSmZkVzVwWm05eWJWQnZiMndpTENKeVpXMXZkbVVpTENKZlpHRjBZU0lzSW1sdVpHVjRUMllpTENKZlpHVm1hVzVsY3lJc0lsOWpZVzVTWlc1a1pYSWlMQ0pmWlc1aFlteGxaQ0lzSWw5aFkzUnBkbVZKYmtocFpYSmhjbU5vZVNJc0ltMWhjbXRHYjNKVmNHUmhkR1ZTWlc1a1pYSkVZWFJoSWl3aVpXNWhZbXhsSWl3aWJXRnlhMFp2Y2xKbGJtUmxjaUlzSW0xaGNtdEdiM0pEZFhOMGIyMUpRVkpsYm1SbGNpSXNJa1pNUVVkZlExVlRWRTlOWDBsQlgxSkZUa1JGVWlJc0luSmxjWFZsYzNSU1pXNWtaWEpFWVhSaElpd2laR0YwWVNJc0ltRnNiRzlqSWl3aWNIVnphQ0lzSW1SbGMzUnliM2xTWlc1a1pYSkVZWFJoSWl3aWFXNWtaWGdpTENKemNHeHBZMlVpTENKblpYUk5ZWFJsY21saGJDSXNJbTFoZEdWeWFXRnNJaXdpYVc1emRHRnVkR2xoZEdWa0lpd2laMlYwU1c1emRHRnVkR2xoZEdWa1RXRjBaWEpwWVd3aUxDSnpaWFJOWVhSbGNtbGhiQ0lzSW1admNtTmxJaXdpYlc5a2RXeGxJaXdpWlhod2IzSjBjeUpkTENKdFlYQndhVzVuY3lJNklqczdRVUY1UWtFN096czdRVUZEUVRzN096czdPMEZCTVVKQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk5FSkJMRWxCUVUxQkxGbEJRVmxETEZGQlFWRXNaVUZCVWl4RFFVRnNRanRCUVVOQkxFbEJRVTFETEdGQlFXRkVMRkZCUVZFc2VVSkJRVklzUTBGQmJrSTdRVUZEUVN4SlFVRk5SU3hqUVVGalJpeFJRVUZSTEhGQ1FVRlNMRVZCUVN0Q1JTeFhRVUZ1UkR0QlFVTkJMRWxCUVUxRExGZEJRVmRJTEZGQlFWRXNLMEpCUVZJc1EwRkJha0k3TzBGQlJVRTdPenM3T3pzN096dEJRVk5CTEVsQlFVbEpMR3RDUVVGclFrTXNSMEZCUjBNc1MwRkJTQ3hEUVVGVE8wRkJRek5DUXl4VlFVRk5MR2xDUVVSeFFqdEJRVVV6UWtNc1lVRkJVMVFzVTBGR2EwSTdPMEZCU1ROQ1ZTeFpRVUZSUXl4aFFVRmhPMEZCUTJwQ1F5d3lRa0ZCYlVJc1NVRkVSanRCUVVWcVFrTXNNRUpCUVd0Q08wRkJSa1FzUzBGS1RUczdRVUZUTTBKRExHZENRVUZaTzBGQlExSkRMRzlDUVVGWk8wRkJRMUpETEhGQ1FVRlRMRVZCUkVRN1FVRkZVa01zYTBKQlFVMWlPMEZCUmtVc1UwRkVTanM3UVVGTlVqczdPenM3UVVGTFFXTXNlVUpCUVdsQ08wRkJRMkpETEdWQlJHRXNhVUpCUTA0N1FVRkRTQ3gxUWtGQlR5eExRVUZMU2l4VlFVRmFPMEZCUTBnc1lVRklXVHRCUVVsaVN5eGxRVXBoTEdWQlNWSkRMRWRCU2xFc1JVRkpTRHRCUVVOT0xIRkNRVUZMVGl4VlFVRk1MRWRCUVd0Q1RTeEhRVUZzUWp0QlFVTkJMSEZDUVVGTFF5eHBRa0ZCVEN4RFFVRjFRaXhKUVVGMlFqdEJRVU5JTEdGQlVGazdPMEZCVVdKTUxHdENRVUZOTEVOQlFVTmlMRkZCUVVRc1EwRlNUenRCUVZOaWJVSXNlVUpCUVdFN1FVRlVRVHRCUVZoVUxFdEJWR1U3TzBGQmFVTXpRa01zVVVGcVF6SkNMR3RDUVdsRGJrSTdRVUZEU2l4aFFVRkxReXhYUVVGTUxFZEJRVzFDTEVsQlFXNUNPMEZCUTBFc1lVRkJTME1zWTBGQlRDeEhRVUZ6UWl4RlFVRjBRanRCUVVOQkxHRkJRVXRETEdGQlFVd3NSMEZCY1VJc1NVRkJja0k3UVVGRFFTeGhRVUZMUXl4aFFVRk1MRWRCUVhGQ0xFdEJRWEpDTzBGQlEwRXNZVUZCUzBNc1ZVRkJUQ3hIUVVGclFpeExRVUZMUXl4WFFVRk1MRU5CUVdsQ1JDeFZRVUZ1UXp0QlFVTkJMR0ZCUVV0RkxHTkJRVXdzUjBGQmMwSXNTMEZCUzBRc1YwRkJUQ3hEUVVGcFFrTXNZMEZCZGtNN1FVRkRTQ3hMUVhoRE1FSTdRVUV3UXpOQ1F5eFpRVEZETWtJc2MwSkJNRU5tTzBGQlExSXNXVUZCU1N4TFFVRkxReXhKUVVGTUxFTkJRVlZETEdkQ1FVRmtMRVZCUVdkRE8wRkJRelZDTEdsQ1FVRkxSQ3hKUVVGTUxFTkJRVlZETEdkQ1FVRldMRU5CUVRKQ1F5eFBRVUV6UWl4SFFVRnhReXhMUVVGeVF6dEJRVU5JTzBGQlEwUXNZVUZCUzBZc1NVRkJUQ3hEUVVGVlF5eG5Ra0ZCVml4SFFVRTJRaXhKUVVFM1FqdEJRVU5CTEdGQlFVdEVMRWxCUVV3c1EwRkJWVWNzVjBGQlZpeEpRVUY1UW14RExGZEJRVmR0UXl4WFFVRllMRWRCUVhsQ2JrTXNWMEZCVjI5RExIVkNRVUUzUkR0QlFVTklMRXRCYUVRd1FqdEJRV3RFTTBKRExHRkJiRVF5UWl4MVFrRnJSR1E3UVVGRFZDeGhRVUZMVGl4SlFVRk1MRU5CUVZWRExHZENRVUZXTEVkQlFUWkNMRWxCUVRkQ08wRkJRMEVzWVVGQlMwMHNZVUZCVER0QlFVTklMRXRCY2tRd1FqdEJRWFZFTTBKRExHRkJka1F5UWl4MVFrRjFSR1E3UVVGRFZDeGhRVUZMTEVsQlFVbERMRWxCUVVrc1EwRkJVaXhGUVVGWFF5eEpRVUZKTEV0QlFVdHFRaXhqUVVGTUxFTkJRVzlDYTBJc1RVRkJlRU1zUlVGQlowUkdMRWxCUVVsRExFTkJRWEJFTEVWQlFYVkVSQ3hIUVVGMlJDeEZRVUUwUkR0QlFVTjRSQ3hwUTBGQlYwY3NTVUZCV0N4RFFVRm5RaXhMUVVGTGJrSXNZMEZCVEN4RFFVRnZRbWRDTEVOQlFYQkNMRU5CUVdoQ08wRkJRMGc3UVVGRFJDeGhRVUZMYUVJc1kwRkJUQ3hEUVVGdlFtdENMRTFCUVhCQ0xFZEJRVFpDTEVOQlFUZENPMEZCUTBFc1lVRkJTemRDTEZWQlFVd3NRMEZCWjBJMlFpeE5RVUZvUWl4SFFVRjVRaXhEUVVGNlFqdEJRVU5CTEdGQlFVdHVRaXhYUVVGTUxFZEJRVzFDTEVsQlFXNUNPenRCUVVWQkxGbEJRVWx4UWl4WFFVRlhMRXRCUVV0RExGTkJRWEJDTzBGQlEwRXNZVUZCU3l4SlFVRkpka01zU1VGQlZDeEpRVUZwUW5ORExGRkJRV3BDTEVWQlFUSkNPMEZCUTNaQ1JTeDVRa0ZCWVVNc1RVRkJZaXhEUVVGdlFrUXNZVUZCWVVVc1MwRkJZaXhEUVVGdFFrTXNUMEZCYmtJc1EwRkJNa0pNTEZOQlFWTjBReXhKUVVGVUxFTkJRVE5DTEVOQlFYQkNPMEZCUTBnN1FVRkRSQ3hoUVVGTGRVTXNVMEZCVEN4SFFVRnBRaXhKUVVGcVFqdEJRVU5CTEdGQlFVdExMRkZCUVV3c1IwRkJaMElzU1VGQmFFSTdRVUZEU0N4TFFYSkZNRUk3UVVGMVJUTkNReXhqUVhaRk1rSXNkMEpCZFVWaU8wRkJRMVk3UVVGRFFTeGxRVUZQTEV0QlFVdERMRkZCUVV3c1NVRkJhVUlzUzBGQlMzSkNMRWxCUVV3c1EwRkJWWE5DTEd0Q1FVRnNRenRCUVVOSUxFdEJNVVV3UWp0QlFUUkZNMEpETERKQ1FUVkZNa0lzYlVOQk5FVkdReXhOUVRWRlJTeEZRVFJGVFR0QlFVTTNRaXhaUVVGSlFTeFZRVUZWTEV0QlFVdEtMRlZCUVV3c1JVRkJaQ3hGUVVGcFF6dEJRVU0zUWl4cFFrRkJTM0JDTEVsQlFVd3NRMEZCVlVjc1YwRkJWaXhKUVVGNVFteERMRmRCUVZkdlF5eDFRa0ZCY0VNN1FVRkRTQ3hUUVVaRUxFMUJSMHNzU1VGQlNTeERRVUZEYlVJc1RVRkJUQ3hGUVVGaE8wRkJRMlFzYVVKQlFVdDRRaXhKUVVGTUxFTkJRVlZITEZkQlFWWXNTVUZCZVVJc1EwRkJRMnhETEZkQlFWZHZReXgxUWtGQmNrTTdRVUZEU0R0QlFVTktMRXRCYmtZd1FqdEJRWEZHTTBKdlFpeHBRa0Z5UmpKQ0xIbENRWEZHV2tRc1RVRnlSbGtzUlVGeFJrbzdRVUZEYmtJc1dVRkJTVUVzVlVGQlZTeExRVUZMU2l4VlFVRk1MRVZCUVdRc1JVRkJhVU03UVVGRE4wSXNhVUpCUVV0d1FpeEpRVUZNTEVOQlFWVkhMRmRCUVZZc1NVRkJlVUpzUXl4WFFVRlhiVU1zVjBGQmNFTTdRVUZEU0N4VFFVWkVMRTFCUjBzc1NVRkJTU3hEUVVGRGIwSXNUVUZCVEN4RlFVRmhPMEZCUTJRc2FVSkJRVXQ0UWl4SlFVRk1MRU5CUVZWSExGZEJRVllzU1VGQmVVSXNRMEZCUTJ4RExGZEJRVmR0UXl4WFFVRnlRenRCUVVOSU8wRkJRMG9zUzBFMVJqQkNPMEZCT0VZelFuTkNMSGxDUVRsR01rSXNhVU5CT0VaS1JpeE5RVGxHU1N4RlFUaEdTVHRCUVVNelFpeFpRVUZKUVN4VlFVRlZMRXRCUVV0S0xGVkJRVXdzUlVGQlpDeEZRVUZwUXp0QlFVTTNRaXhwUWtGQlMzQkNMRWxCUVV3c1EwRkJWVWNzVjBGQlZpeEpRVUY1UW14RExGZEJRVmN3UkN4eFFrRkJjRU03UVVGRFNDeFRRVVpFTEUxQlIwc3NTVUZCU1N4RFFVRkRTQ3hOUVVGTUxFVkJRV0U3UVVGRFpDeHBRa0ZCUzNoQ0xFbEJRVXdzUTBGQlZVY3NWMEZCVml4SlFVRjVRaXhEUVVGRGJFTXNWMEZCVnpCRUxIRkNRVUZ5UXp0QlFVTklPMEZCUTBvc1MwRnlSekJDTzBGQmRVY3pRbkJDTEdsQ1FYWkhNa0lzTWtKQmRVZFdPMEZCUTJJc1lVRkJTMUFzU1VGQlRDeERRVUZWUnl4WFFVRldMRWxCUVhsQ0xFVkJRVVZzUXl4WFFVRlhiVU1zVjBGQldDeEhRVUY1UW01RExGZEJRVmN3UkN4eFFrRkJjRU1zUjBGQk5FUXhSQ3hYUVVGWGIwTXNkVUpCUVhwRkxFTkJRWHBDTzBGQlEwZ3NTMEY2UnpCQ08wRkJNa2N6UW5WQ0xIRkNRVE5ITWtJc0swSkJNa2RPTzBGQlEycENMRmxCUVVsRExFOUJRVThzY1VKQlFWZERMRXRCUVZnc1JVRkJXRHRCUVVOQkxHRkJRVXR5UXl4alFVRk1MRU5CUVc5Q2MwTXNTVUZCY0VJc1EwRkJlVUpHTEVsQlFYcENPMEZCUTBFc1pVRkJUMEVzU1VGQlVEdEJRVU5JTEV0QkwwY3dRanRCUVdsSU0wSkhMSEZDUVdwSU1rSXNOa0pCYVVoU1NDeEpRV3BJVVN4RlFXbElSanRCUVVOeVFpeFpRVUZKU1N4UlFVRlJMRXRCUVV0NFF5eGpRVUZNTEVOQlFXOUNlVUlzVDBGQmNFSXNRMEZCTkVKWExFbEJRVFZDTEVOQlFWbzdRVUZEUVN4WlFVRkpTU3hWUVVGVkxFTkJRVU1zUTBGQlppeEZRVUZyUWp0QlFVTmtMR2xDUVVGTGVFTXNZMEZCVEN4RFFVRnZRbmxETEUxQlFYQkNMRU5CUVRKQ1JDeExRVUV6UWl4RlFVRnJReXhEUVVGc1F6dEJRVU5CTEdsRFFVRlhja0lzU1VGQldDeERRVUZuUW1sQ0xFbEJRV2hDTzBGQlEwZzdRVUZEU2l4TFFYWklNRUk3T3p0QlFYbElNMEk3T3pzN096dEJRVTFCVFN4bFFTOUlNa0lzZFVKQkswaGtSaXhMUVM5SVl5eEZRU3RJVUR0QlFVTm9RaXhaUVVGSlFTeFJRVUZSTEVOQlFWSXNTVUZCWVVFc1UwRkJVeXhMUVVGTGJrUXNWVUZCVEN4RFFVRm5RalpDTEUxQlFURkRMRVZCUVd0RU8wRkJRemxETEcxQ1FVRlBMRWxCUVZBN1FVRkRTRHM3UVVGRlJDeFpRVUZKZVVJc1YwRkJWeXhMUVVGTGRFUXNWVUZCVEN4RFFVRm5RbTFFTEV0QlFXaENMRU5CUVdZN1FVRkRRU3haUVVGSkxFTkJRVU5ITEZGQlFVd3NSVUZCWlN4UFFVRlBMRWxCUVZBN08wRkJSV1lzV1VGQlNVTXNaVUZCWld4RkxGTkJRVk50UlN4MVFrRkJWQ3hEUVVGcFEwWXNVVUZCYWtNc1JVRkJNa01zU1VGQk0wTXNRMEZCYmtJN1FVRkRRU3haUVVGSlF5eHBRa0ZCYVVKRUxGRkJRWEpDTEVWQlFTdENPMEZCUXpOQ0xHbENRVUZMUnl4WFFVRk1MRU5CUVdsQ1RpeExRVUZxUWl4RlFVRjNRa2tzV1VGQmVFSTdRVUZEU0RzN1FVRkZSQ3hsUVVGUExFdEJRVXQyUkN4VlFVRk1MRU5CUVdkQ2JVUXNTMEZCYUVJc1EwRkJVRHRCUVVOSUxFdEJOMGt3UWpzN08wRkJLMGt6UWpzN096czdPenRCUVU5QlRTeGxRWFJLTWtJc2RVSkJjMHBrVGl4TFFYUktZeXhGUVhOS1VFY3NVVUYwU2s4c1JVRnpTa2M3UVVGRE1VSXNZVUZCUzNSRUxGVkJRVXdzUTBGQlowSnRSQ3hMUVVGb1FpeEpRVUY1UWtjc1VVRkJla0k3UVVGRFFTeFpRVUZKUVN4UlFVRktMRVZCUVdNN1FVRkRWaXhwUWtGQlMySXNkVUpCUVV3c1EwRkJOa0lzU1VGQk4wSTdRVUZEU0R0QlFVTktMRXRCTTBvd1FqdEJRVFpLTTBKc1F5eHhRa0UzU2pKQ0xEWkNRVFpLVW0xRUxFdEJOMHBSTEVWQk5rcEVMRU5CUTNwQ08wRkJPVW93UWl4RFFVRlVMRU5CUVhSQ08wRkJaMHRCY0VVc1owSkJRV2RDZDBJc1ZVRkJhRUlzUjBGQk5rSXNTVUZCTjBJN1FVRkRRWGhDTEdkQ1FVRm5RakJDTEdOQlFXaENMRWRCUVdsRExFbEJRV3BET3p0QlFVVkJla0lzUjBGQlIwUXNaVUZCU0N4SFFVRnhRbkZGTEU5QlFVOURMRTlCUVZBc1IwRkJhVUowUlN4bFFVRjBReUlzSW1acGJHVWlPaUpEUTFKbGJtUmxja052YlhCdmJtVnVkQzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEhKY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNjbHh1WEhKY2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEhKY2JseHlYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHlYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEhKY2JpQjNiM0pzWkhkcFpHVXNJSEp2ZVdGc2RIa3RabkpsWlN3Z2JtOXVMV0Z6YzJsbmJtRmliR1VzSUhKbGRtOWpZV0pzWlNCaGJtUWdibTl1TFdWNFkyeDFjMmwyWlNCc2FXTmxibk5sWEhKY2JpQjBieUIxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJ4bGJIa2dkRzhnWkdWMlpXeHZjQ0JuWVcxbGN5QnZiaUI1YjNWeUlIUmhjbWRsZENCd2JHRjBabTl5YlhNdUlGbHZkU0J6YUdGc2JGeHlYRzRnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHlYRzRnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh5WEc0Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUVOdlkyOXpJRU55WldGMGIzSXVYSEpjYmx4eVhHNGdWR2hsSUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUdsdUlIUm9hWE1nVEdsalpXNXpaU0JCWjNKbFpXMWxiblFnWVhKbElHeHBZMlZ1YzJWa0xDQnViM1FnYzI5c1pDNWNjbHh1SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xpQnlaWE5sY25abGN5QmhiR3dnY21sbmFIUnpJRzV2ZENCbGVIQnlaWE56YkhrZ1ozSmhiblJsWkNCMGJ5QjViM1V1WEhKY2JseHlYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHlYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEhKY2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjY2x4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2NseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hISmNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEhKY2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4eVhHNWNjbHh1YVcxd2IzSjBJR2RtZUNCbWNtOXRJQ2N1TGk4dUxpOXlaVzVrWlhKbGNpOW5abmduTzF4eVhHNXBiWEJ2Y25RZ1VtVnVaR1Z5UkdGMFlTQm1jbTl0SUNjdUxpOHVMaTl5Wlc1a1pYSmxjaTl5Wlc1a1pYSXRaR0YwWVM5eVpXNWtaWEl0WkdGMFlTYzdYSEpjYmx4eVhHNWpiMjV6ZENCRGIyMXdiMjVsYm5RZ1BTQnlaWEYxYVhKbEtDY3VMME5EUTI5dGNHOXVaVzUwSnlrN1hISmNibU52Ym5OMElGSmxibVJsY2tac2IzY2dQU0J5WlhGMWFYSmxLQ2N1TGk5eVpXNWtaWEpsY2k5eVpXNWtaWEl0Wm14dmR5Y3BPMXh5WEc1amIyNXpkQ0JDYkdWdVpFWmhZM1J2Y2lBOUlISmxjWFZwY21Vb0p5NHVMM0JzWVhSbWIzSnRMME5EVFdGamNtOG5LUzVDYkdWdVpFWmhZM1J2Y2p0Y2NseHVZMjl1YzNRZ1RXRjBaWEpwWVd3Z1BTQnlaWEYxYVhKbEtDY3VMaTloYzNObGRITXZiV0YwWlhKcFlXd3ZRME5OWVhSbGNtbGhiQ2NwTzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNWNjbHh1SUNvZ1FtRnpaU0JqYkdGemN5Qm1iM0lnWTI5dGNHOXVaVzUwY3lCM2FHbGphQ0J6ZFhCd2IzSjBjeUJ5Wlc1a1pYSnBibWNnWm1WaGRIVnlaWE11WEhKY2JpQXFJQ0VqZW1oY2NseHVJQ29nNW9tQTVweUo1cFN2NW95QjVyaXk1cCtUNTVxRTU3dUU1THUyNTVxRTVaKzY1N0c3WEhKY2JpQXFYSEpjYmlBcUlFQmpiR0Z6Y3lCU1pXNWtaWEpEYjIxd2IyNWxiblJjY2x4dUlDb2dRR1Y0ZEdWdVpITWdRMjl0Y0c5dVpXNTBYSEpjYmlBcUwxeHlYRzVzWlhRZ1VtVnVaR1Z5UTI5dGNHOXVaVzUwSUQwZ1kyTXVRMnhoYzNNb2UxeHlYRzRnSUNBZ2JtRnRaVG9nSjFKbGJtUmxja052YlhCdmJtVnVkQ2NzWEhKY2JpQWdJQ0JsZUhSbGJtUnpPaUJEYjIxd2IyNWxiblFzWEhKY2JseHlYRzRnSUNBZ1pXUnBkRzl5T2lCRFExOUZSRWxVVDFJZ0ppWWdlMXh5WEc0Z0lDQWdJQ0FnSUdWNFpXTjFkR1ZKYmtWa2FYUk5iMlJsT2lCMGNuVmxMRnh5WEc0Z0lDQWdJQ0FnSUdScGMyRnNiRzkzVFhWc2RHbHdiR1U2SUhSeWRXVmNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnY0hKdmNHVnlkR2xsY3pvZ2UxeHlYRzRnSUNBZ0lDQWdJRjl0WVhSbGNtbGhiSE02SUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdWbVlYVnNkRG9nVzEwc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSNWNHVTZJRTFoZEdWeWFXRnNMRnh5WEc0Z0lDQWdJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDQWdJQ0FxSUNFalpXNGdWR2hsSUcxaGRHVnlhV0ZzY3lCMWMyVmtJR0o1SUhSb2FYTWdjbVZ1WkdWeUlHTnZiWEJ2Ym1WdWRDNWNjbHh1SUNBZ0lDQWdJQ0FnS2lBaEkzcG9JT2E0c3VhZmsrZTdoT1M3dHVTOXYrZVVxT2VhaE9hZGtPaTBxT09BZ2x4eVhHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0I3VzAxaGRHVnlhV0ZzWFgwZ2MyaGhjbVZrVFdGMFpYSnBZV3h6WEhKY2JpQWdJQ0FnSUNBZ0lDb3ZYSEpjYmlBZ0lDQWdJQ0FnYzJoaGNtVmtUV0YwWlhKcFlXeHpPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR2RsZENBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZmJXRjBaWEpwWVd4ek8xeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCOUxGeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCelpYUWdLSFpoYkNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmJXRjBaWEpwWVd4eklEMGdkbUZzTzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTVmWVdOMGFYWmhkR1ZOWVhSbGNtbGhiQ2gwY25WbEtUdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RIbHdaVG9nVzAxaGRHVnlhV0ZzWFN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWkdsemNHeGhlVTVoYldVNklDZE5ZWFJsY21saGJITW5YSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlN4Y2NseHVJQ0FnSUZ4eVhHNGdJQ0FnWTNSdmNpQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmY21WdVpHVnlSR0YwWVNBOUlHNTFiR3c3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVmWDJGc2JHOWpaV1JFWVhSaGN5QTlJRnRkTzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNabGNuUmxlRVp2Y20xaGRDQTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHOVFiM04wU0dGdVpHeGxJRDBnWm1Gc2MyVTdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NWZZWE56WlcxaWJHVnlJRDBnZEdocGN5NWpiMjV6ZEhKMVkzUnZjaTVmWVhOelpXMWliR1Z5TzF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNCdmMzUkJjM05sYldKc1pYSWdQU0IwYUdsekxtTnZibk4wY25WamRHOXlMbDl3YjNOMFFYTnpaVzFpYkdWeU8xeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0J2YmtWdVlXSnNaU0FvS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVibTlrWlM1ZmNtVnVaR1Z5UTI5dGNHOXVaVzUwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1ZmNtVnVaR1Z5UTI5dGNHOXVaVzUwTG1WdVlXSnNaV1FnUFNCbVlXeHpaVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1dWIyUmxMbDl5Wlc1a1pYSkRiMjF3YjI1bGJuUWdQU0IwYUdsek8xeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdWJtOWtaUzVmY21WdVpHVnlSbXhoWnlCOFBTQlNaVzVrWlhKR2JHOTNMa1pNUVVkZlVrVk9SRVZTSUh3Z1VtVnVaR1Z5Um14dmR5NUdURUZIWDFWUVJFRlVSVjlTUlU1RVJWSmZSRUZVUVR0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdiMjVFYVhOaFlteGxJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG01dlpHVXVYM0psYm1SbGNrTnZiWEJ2Ym1WdWRDQTlJRzUxYkd3N1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1a2FYTmhZbXhsVW1WdVpHVnlLQ2s3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lHOXVSR1Z6ZEhKdmVTQW9LU0I3WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2FTQTlJREFzSUd3Z1BTQjBhR2x6TGw5ZllXeHNiMk5sWkVSaGRHRnpMbXhsYm1kMGFEc2dhU0E4SUd3N0lHa3JLeWtnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JTWlc1a1pYSkVZWFJoTG1aeVpXVW9kR2hwY3k1ZlgyRnNiRzlqWldSRVlYUmhjMXRwWFNrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYMTloYkd4dlkyVmtSR0YwWVhNdWJHVnVaM1JvSUQwZ01EdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOXRZWFJsY21saGJITXViR1Z1WjNSb0lEMGdNRHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl5Wlc1a1pYSkVZWFJoSUQwZ2JuVnNiRHRjY2x4dVhISmNiaUFnSUNBZ0lDQWdiR1YwSUhWdWFXWnZjbTF6SUQwZ2RHaHBjeTVmZFc1cFptOXliWE03WEhKY2JpQWdJQ0FnSUNBZ1ptOXlJQ2hzWlhRZ2JtRnRaU0JwYmlCMWJtbG1iM0p0Y3lrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCZmRXNXBabTl5YlZCdmIyd3VjbVZ0YjNabEtGOTFibWxtYjNKdFVHOXZiQzVmWkdGMFlTNXBibVJsZUU5bUtIVnVhV1p2Y20xelcyNWhiV1ZkS1NrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVYM1Z1YVdadmNtMXpJRDBnYm5Wc2JEdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtaV1pwYm1WeklEMGdiblZzYkR0Y2NseHVJQ0FnSUgwc1hISmNiaUFnSUNCY2NseHVJQ0FnSUY5allXNVNaVzVrWlhJZ0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUM4dklGZG9aVzRnZEdobElHNXZaR1VnYVhNZ1lXTjBhWFpoZEdWa0xDQnBkQ0IzYVd4c0lHVjRaV04xZEdVZ2IyNUZibUZpYkdVZ1lXNWtJSFJvWlNCeVpXNWtaWEptYkdGbklIZHBiR3dnWVd4emJ5QmlaU0J5WlhObGRDNWNjbHh1SUNBZ0lDQWdJQ0J5WlhSMWNtNGdkR2hwY3k1ZlpXNWhZbXhsWkNBbUppQjBhR2x6TG01dlpHVXVYMkZqZEdsMlpVbHVTR2xsY21GeVkyaDVPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNCdFlYSnJSbTl5VlhCa1lYUmxVbVZ1WkdWeVJHRjBZU0FvWlc1aFlteGxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR1Z1WVdKc1pTQW1KaUIwYUdsekxsOWpZVzVTWlc1a1pYSW9LU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxtNXZaR1V1WDNKbGJtUmxja1pzWVdjZ2ZEMGdVbVZ1WkdWeVJteHZkeTVHVEVGSFgxVlFSRUZVUlY5U1JVNUVSVkpmUkVGVVFUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0JwWmlBb0lXVnVZV0pzWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTV2WkdVdVgzSmxibVJsY2tac1lXY2dKajBnZmxKbGJtUmxja1pzYjNjdVJreEJSMTlWVUVSQlZFVmZVa1ZPUkVWU1gwUkJWRUU3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ2ZTeGNjbHh1WEhKY2JpQWdJQ0J0WVhKclJtOXlVbVZ1WkdWeUlDaGxibUZpYkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1pXNWhZbXhsSUNZbUlIUm9hWE11WDJOaGJsSmxibVJsY2lncEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNWZjbVZ1WkdWeVJteGhaeUI4UFNCU1pXNWtaWEpHYkc5M0xrWk1RVWRmVWtWT1JFVlNPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQmxiSE5sSUdsbUlDZ2haVzVoWW14bEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIUm9hWE11Ym05a1pTNWZjbVZ1WkdWeVJteGhaeUFtUFNCK1VtVnVaR1Z5Um14dmR5NUdURUZIWDFKRlRrUkZVanRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJRzFoY210R2IzSkRkWE4wYjIxSlFWSmxibVJsY2lBb1pXNWhZbXhsS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dWdVlXSnNaU0FtSmlCMGFHbHpMbDlqWVc1U1pXNWtaWElvS1NrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbTV2WkdVdVgzSmxibVJsY2tac1lXY2dmRDBnVW1WdVpHVnlSbXh2ZHk1R1RFRkhYME5WVTFSUFRWOUpRVjlTUlU1RVJWSTdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnYVdZZ0tDRmxibUZpYkdVcElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV1YjJSbExsOXlaVzVrWlhKR2JHRm5JQ1k5SUg1U1pXNWtaWEpHYkc5M0xrWk1RVWRmUTFWVFZFOU5YMGxCWDFKRlRrUkZVanRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJR1JwYzJGaWJHVlNaVzVrWlhJZ0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVibTlrWlM1ZmNtVnVaR1Z5Um14aFp5QW1QU0IrS0ZKbGJtUmxja1pzYjNjdVJreEJSMTlTUlU1RVJWSWdmQ0JTWlc1a1pYSkdiRzkzTGtaTVFVZGZRMVZUVkU5TlgwbEJYMUpGVGtSRlVpQjhJRkpsYm1SbGNrWnNiM2N1Umt4QlIxOVZVRVJCVkVWZlVrVk9SRVZTWDBSQlZFRXBPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNCeVpYRjFaWE4wVW1WdVpHVnlSR0YwWVNBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnYkdWMElHUmhkR0VnUFNCU1pXNWtaWEpFWVhSaExtRnNiRzlqS0NrN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlgyRnNiRzlqWldSRVlYUmhjeTV3ZFhOb0tHUmhkR0VwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCa1lYUmhPMXh5WEc0Z0lDQWdmU3hjY2x4dVhISmNiaUFnSUNCa1pYTjBjbTk1VW1WdVpHVnlSR0YwWVNBb1pHRjBZU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHeGxkQ0JwYm1SbGVDQTlJSFJvYVhNdVgxOWhiR3h2WTJWa1JHRjBZWE11YVc1a1pYaFBaaWhrWVhSaEtUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FXNWtaWGdnSVQwOUlDMHhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdVgxOWhiR3h2WTJWa1JHRjBZWE11YzNCc2FXTmxLR2x1WkdWNExDQXhLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdVbVZ1WkdWeVJHRjBZUzVtY21WbEtHUmhkR0VwTzF4eVhHNGdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUVkbGRDQjBhR1VnYldGMFpYSnBZV3dnWW5rZ2FXNWtaWGd1WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2FndWVhTnJ1YU1oK1d1bXVlMG91VzhsZWlPdCtXUGx1YWRrT2kwcUZ4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCblpYUk5ZWFJsY21saGJGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHbHVaR1Y0SUZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCblpYUk5ZWFJsY21saGJDQW9hVzVrWlhncElIdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2FXNWtaWGdnUENBd0lIeDhJR2x1WkdWNElENDlJSFJvYVhNdVgyMWhkR1Z5YVdGc2N5NXNaVzVuZEdncElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2NtVjBkWEp1SUc1MWJHdzdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lDQWdJQ0JzWlhRZ2JXRjBaWEpwWVd3Z1BTQjBhR2x6TGw5dFlYUmxjbWxoYkhOYmFXNWtaWGhkTzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doYldGMFpYSnBZV3dwSUhKbGRIVnliaUJ1ZFd4c08xeHlYRzRnSUNBZ0lDQWdJRnh5WEc0Z0lDQWdJQ0FnSUd4bGRDQnBibk4wWVc1MGFXRjBaV1FnUFNCTllYUmxjbWxoYkM1blpYUkpibk4wWVc1MGFXRjBaV1JOWVhSbGNtbGhiQ2h0WVhSbGNtbGhiQ3dnZEdocGN5azdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tHbHVjM1JoYm5ScFlYUmxaQ0FoUFQwZ2JXRjBaWEpwWVd3cElIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2RHaHBjeTV6WlhSTllYUmxjbWxoYkNocGJtUmxlQ3dnYVc1emRHRnVkR2xoZEdWa0tUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjBhR2x6TGw5dFlYUmxjbWxoYkhOYmFXNWtaWGhkTzF4eVhHNGdJQ0FnZlN4Y2NseHVJQ0FnSUZ4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUZObGRDQjBhR1VnYldGMFpYSnBZV3dnWW5rZ2FXNWtaWGd1WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT2FndWVhTnJ1YU1oK1d1bXVlMG91VzhsZWl1dnVlOXJ1YWRrT2kwcUZ4eVhHNGdJQ0FnSUNvZ1FHMWxkR2h2WkNCelpYUk5ZWFJsY21saGJGeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHbHVaR1Y0SUZ4eVhHNGdJQ0FnSUNvZ1FIQmhjbUZ0SUh0TllYUmxjbWxoYkgwZ2JXRjBaWEpwWVd3Z1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lITmxkRTFoZEdWeWFXRnNJQ2hwYm1SbGVDd2diV0YwWlhKcFlXd3BJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDl0WVhSbGNtbGhiSE5iYVc1a1pYaGRJRDBnYldGMFpYSnBZV3c3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLRzFoZEdWeWFXRnNLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFJvYVhNdWJXRnlhMFp2Y2xWd1pHRjBaVkpsYm1SbGNrUmhkR0VvZEhKMVpTazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnZlN4Y2NseHVYSEpjYmlBZ0lDQmZZV04wYVhaaGRHVk5ZWFJsY21saGJDQW9abTl5WTJVcElIdGNjbHh1SUNBZ0lIMHNYSEpjYm4wcE8xeHlYRzVTWlc1a1pYSkRiMjF3YjI1bGJuUXVYMkZ6YzJWdFlteGxjaUE5SUc1MWJHdzdYSEpjYmxKbGJtUmxja052YlhCdmJtVnVkQzVmY0c5emRFRnpjMlZ0WW14bGNpQTlJRzUxYkd3N1hISmNibHh5WEc1all5NVNaVzVrWlhKRGIyMXdiMjVsYm5RZ1BTQnRiMlIxYkdVdVpYaHdiM0owY3lBOUlGSmxibVJsY2tOdmJYQnZibVZ1ZERzaVhYMD0iXX0=