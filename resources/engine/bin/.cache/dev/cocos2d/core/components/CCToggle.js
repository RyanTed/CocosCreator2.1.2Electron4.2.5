(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCToggle.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var GraySpriteState = require('../utils/gray-sprite-state');
        var Toggle = cc.Class({
            name: 'cc.Toggle',
            extends: require('./CCButton'),
            mixins: [GraySpriteState],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Toggle',
                help: 'i18n:COMPONENT.help_url.toggle',
                inspector: 'packages://inspector/inspectors/comps/toggle.js'
            },
            properties: {
                _N$isChecked: true,
                isChecked: {
                    get: function get() {
                        return this._N$isChecked;
                    },
                    set: function set(value) {
                        if (value === this._N$isChecked) {
                            return;
                        }
                        var group = this.toggleGroup || this._toggleContainer;
                        if (group && group.enabled && this._N$isChecked) {
                            if (!group.allowSwitchOff) {
                                return;
                            }
                        }
                        this._N$isChecked = value;
                        this._updateCheckMark();
                        if (group && group.enabled) {
                            group.updateToggles(this);
                        }
                        this._emitToggleEvents();
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.toggle.isChecked'
                },
                toggleGroup: {
                    default: null,
                    tooltip: CC_DEV && 'i18n:COMPONENT.toggle.toggleGroup',
                    type: require('./CCToggleGroup')
                },
                checkMark: {
                    default: null,
                    type: cc.Sprite,
                    tooltip: CC_DEV && 'i18n:COMPONENT.toggle.checkMark'
                },
                checkEvents: {
                    default: [],
                    type: cc.Component.EventHandler
                },
                _resizeToTarget: {
                    animatable: false,
                    set: function set(value) {
                        if (value) {
                            this._resizeNodeToTargetNode();
                        }
                    }
                }
            },
            onEnable: function onEnable() {
                this._super();
                if (!CC_EDITOR) {
                    this._registerToggleEvent();
                }
                if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
                    this.toggleGroup.addToggle(this);
                }
            },
            onDisable: function onDisable() {
                this._super();
                if (!CC_EDITOR) {
                    this._unregisterToggleEvent();
                }
                if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
                    this.toggleGroup.removeToggle(this);
                }
            },
            _hideCheckMark: function _hideCheckMark() {
                this._N$isChecked = false;
                this._updateCheckMark();
            },
            toggle: function toggle(event) {
                this.isChecked = !this.isChecked;
            },
            check: function check() {
                this.isChecked = true;
            },
            uncheck: function uncheck() {
                this.isChecked = false;
            },
            _updateCheckMark: function _updateCheckMark() {
                if (this.checkMark) {
                    this.checkMark.node.active = !!this.isChecked;
                }
            },
            _updateDisabledState: function _updateDisabledState() {
                this._super();
                if (this.enableAutoGrayEffect && this.checkMark) {
                    var useGrayMaterial = !this.interactable;
                    this._switchGrayMaterial(useGrayMaterial, this.checkMark);
                }
            },
            _registerToggleEvent: function _registerToggleEvent() {
                this.node.on('click', this.toggle, this);
            },
            _unregisterToggleEvent: function _unregisterToggleEvent() {
                this.node.off('click', this.toggle, this);
            },
            _emitToggleEvents: function _emitToggleEvents() {
                this.node.emit('toggle', this);
                if (this.checkEvents) {
                    cc.Component.EventHandler.emitEvents(this.checkEvents, this);
                }
            }
        });
        cc.Toggle = module.exports = Toggle;
        var js = require('../platform/js');
        js.get(Toggle.prototype, '_toggleContainer', function () {
            var parent = this.node.parent;
            if (cc.Node.isNode(parent)) {
                return parent.getComponent(cc.ToggleContainer);
            }
            return null;
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,