(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCAudioSource.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var misc = require('../utils/misc');
        var Component = require('./CCComponent');
        var AudioClip = require('../assets/CCAudioClip');
        var AudioSource = cc.Class({
            name: 'cc.AudioSource',
            extends: Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.others/AudioSource',
                help: 'i18n:COMPONENT.help_url.audiosource'
            },
            ctor: function ctor() {
                this.audio = new cc.Audio();
            },
            properties: {
                _clip: {
                    default: null,
                    type: AudioClip
                },
                _volume: 1,
                _mute: false,
                _loop: false,
                _pausedFlag: {
                    default: false,
                    serializable: false
                },
                isPlaying: {
                    get: function get() {
                        var state = this.audio.getState();
                        return state === cc.Audio.State.PLAYING;
                    },
                    visible: false
                },
                clip: {
                    get: function get() {
                        return this._clip;
                    },
                    set: function set(value) {
                        if (typeof value === 'string') {
                            cc.warnID(8401, 'cc.AudioSource', 'cc.AudioClip', 'AudioClip', 'cc.AudioClip', 'audio');
                            var self = this;
                            AudioClip._loadByUrl(value, function (err, clip) {
                                if (clip) {
                                    self.clip = clip;
                                }
                            });
                            return;
                        }
                        if (value === this._clip) {
                            return;
                        }
                        this._clip = value;
                        this.audio.stop();
                        if (this.preload) {
                            this.audio.src = this._clip;
                        }
                    },
                    type: AudioClip,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.clip',
                    animatable: false
                },
                volume: {
                    get: function get() {
                        return this._volume;
                    },
                    set: function set(value) {
                        value = misc.clamp01(value);
                        this._volume = value;
                        if (!this._mute) {
                            this.audio.setVolume(value);
                        }
                        return value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.volume'
                },
                mute: {
                    get: function get() {
                        return this._mute;
                    },
                    set: function set(value) {
                        this._mute = value;
                        this.audio.setVolume(value ? 0 : this._volume);
                        return value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.mute'
                },
                loop: {
                    get: function get() {
                        return this._loop;
                    },
                    set: function set(value) {
                        this._loop = value;
                        this.audio.setLoop(value);
                        return value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.loop'
                },
                playOnLoad: {
                    default: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.audio.play_on_load',
                    animatable: false
                },
                preload: {
                    default: false,
                    animatable: false
                }
            },
            _ensureDataLoaded: function _ensureDataLoaded() {
                if (this.audio.src !== this._clip) {
                    this.audio.src = this._clip;
                }
            },
            _pausedCallback: function _pausedCallback() {
                var state = this.audio.getState();
                if (state === cc.Audio.State.PLAYING) {
                    this.audio.pause();
                    this._pausedFlag = true;
                }
            },
            _restoreCallback: function _restoreCallback() {
                if (this._pausedFlag) {
                    this.audio.resume();
                }
                this._pausedFlag = false;
            },
            onLoad: function onLoad() {
                this.audio.setVolume(this._mute ? 0 : this._volume);
                this.audio.setLoop(this._loop);
            },
            onEnable: function onEnable() {
                if (this.preload) {
                    this.audio.src = this._clip;
                }
                if (this.playOnLoad) {
                    this.play();
                }
                cc.game.on(cc.game.EVENT_HIDE, this._pausedCallback, this);
                cc.game.on(cc.game.EVENT_SHOW, this._restoreCallback, this);
            },
            onDisable: function onDisable() {
                this.stop();
                cc.game.off(cc.game.EVENT_HIDE, this._pausedCallback, this);
                cc.game.off(cc.game.EVENT_SHOW, this._restoreCallback, this);
            },
            onDestroy: function onDestroy() {
                this.stop();
                this.audio.destroy();
                cc.audioEngine.uncache(this._clip);
            },
            play: function play() {
                if (!this._clip)
                    return;
                var audio = this.audio;
                if (this._clip.loaded) {
                    audio.stop();
                }
                this._ensureDataLoaded();
                audio.setCurrentTime(0);
                audio.play();
            },
            stop: function stop() {
                this.audio.stop();
            },
            pause: function pause() {
                this.audio.pause();
            },
            resume: function resume() {
                this._ensureDataLoaded();
                this.audio.resume();
            },
            rewind: function rewind() {
                this.audio.setCurrentTime(0);
            },
            getCurrentTime: function getCurrentTime() {
                return this.audio.getCurrentTime();
            },
            setCurrentTime: function setCurrentTime(time) {
                this.audio.setCurrentTime(time);
                return time;
            },
            getDuration: function getDuration() {
                return this.audio.getDuration();
            }
        });
        cc.AudioSource = module.exports = AudioSource;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,