(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCWidget.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var WidgetManager = require('../base-ui/CCWidgetManager');
        var AlignMode = WidgetManager.AlignMode;
        var AlignFlags = WidgetManager._AlignFlags;
        var TOP = AlignFlags.TOP;
        var MID = AlignFlags.MID;
        var BOT = AlignFlags.BOT;
        var LEFT = AlignFlags.LEFT;
        var CENTER = AlignFlags.CENTER;
        var RIGHT = AlignFlags.RIGHT;
        var TOP_BOT = TOP | BOT;
        var LEFT_RIGHT = LEFT | RIGHT;
        var Widget = cc.Class({
            name: 'cc.Widget',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Widget',
                help: 'i18n:COMPONENT.help_url.widget',
                inspector: 'packages://inspector/inspectors/comps/ccwidget.js',
                executeInEditMode: true,
                disallowMultiple: true
            },
            properties: {
                target: {
                    get: function get() {
                        return this._target;
                    },
                    set: function set(value) {
                        this._target = value;
                        if (CC_EDITOR && !cc.engine._isPlaying && this.node._parent) {
                            WidgetManager.updateOffsetsToStayPut(this);
                        }
                    },
                    type: cc.Node,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.target'
                },
                isAlignTop: {
                    get: function get() {
                        return (this._alignFlags & TOP) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(TOP, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_top'
                },
                isAlignVerticalCenter: {
                    get: function get() {
                        return (this._alignFlags & MID) > 0;
                    },
                    set: function set(value) {
                        if (value) {
                            this.isAlignTop = false;
                            this.isAlignBottom = false;
                            this._alignFlags |= MID;
                        } else {
                            this._alignFlags &= ~MID;
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_v_center'
                },
                isAlignBottom: {
                    get: function get() {
                        return (this._alignFlags & BOT) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(BOT, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_bottom'
                },
                isAlignLeft: {
                    get: function get() {
                        return (this._alignFlags & LEFT) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(LEFT, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_left'
                },
                isAlignHorizontalCenter: {
                    get: function get() {
                        return (this._alignFlags & CENTER) > 0;
                    },
                    set: function set(value) {
                        if (value) {
                            this.isAlignLeft = false;
                            this.isAlignRight = false;
                            this._alignFlags |= CENTER;
                        } else {
                            this._alignFlags &= ~CENTER;
                        }
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_h_center'
                },
                isAlignRight: {
                    get: function get() {
                        return (this._alignFlags & RIGHT) > 0;
                    },
                    set: function set(value) {
                        this._setAlign(RIGHT, value);
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_right'
                },
                isStretchWidth: {
                    get: function get() {
                        return (this._alignFlags & LEFT_RIGHT) === LEFT_RIGHT;
                    },
                    visible: false
                },
                isStretchHeight: {
                    get: function get() {
                        return (this._alignFlags & TOP_BOT) === TOP_BOT;
                    },
                    visible: false
                },
                top: {
                    get: function get() {
                        return this._top;
                    },
                    set: function set(value) {
                        this._top = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.top'
                },
                bottom: {
                    get: function get() {
                        return this._bottom;
                    },
                    set: function set(value) {
                        this._bottom = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.bottom'
                },
                left: {
                    get: function get() {
                        return this._left;
                    },
                    set: function set(value) {
                        this._left = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.left'
                },
                right: {
                    get: function get() {
                        return this._right;
                    },
                    set: function set(value) {
                        this._right = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.right'
                },
                horizontalCenter: {
                    get: function get() {
                        return this._horizontalCenter;
                    },
                    set: function set(value) {
                        this._horizontalCenter = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.horizontal_center'
                },
                verticalCenter: {
                    get: function get() {
                        return this._verticalCenter;
                    },
                    set: function set(value) {
                        this._verticalCenter = value;
                    },
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.vertical_center'
                },
                isAbsoluteHorizontalCenter: {
                    get: function get() {
                        return this._isAbsHorizontalCenter;
                    },
                    set: function set(value) {
                        this._isAbsHorizontalCenter = value;
                    },
                    animatable: false
                },
                isAbsoluteVerticalCenter: {
                    get: function get() {
                        return this._isAbsVerticalCenter;
                    },
                    set: function set(value) {
                        this._isAbsVerticalCenter = value;
                    },
                    animatable: false
                },
                isAbsoluteTop: {
                    get: function get() {
                        return this._isAbsTop;
                    },
                    set: function set(value) {
                        this._isAbsTop = value;
                    },
                    animatable: false
                },
                isAbsoluteBottom: {
                    get: function get() {
                        return this._isAbsBottom;
                    },
                    set: function set(value) {
                        this._isAbsBottom = value;
                    },
                    animatable: false
                },
                isAbsoluteLeft: {
                    get: function get() {
                        return this._isAbsLeft;
                    },
                    set: function set(value) {
                        this._isAbsLeft = value;
                    },
                    animatable: false
                },
                isAbsoluteRight: {
                    get: function get() {
                        return this._isAbsRight;
                    },
                    set: function set(value) {
                        this._isAbsRight = value;
                    },
                    animatable: false
                },
                alignMode: {
                    default: AlignMode.ON_WINDOW_RESIZE,
                    type: AlignMode,
                    tooltip: CC_DEV && 'i18n:COMPONENT.widget.align_mode'
                },
                _wasAlignOnce: {
                    default: undefined,
                    formerlySerializedAs: 'isAlignOnce'
                },
                _target: null,
                _alignFlags: 0,
                _left: 0,
                _right: 0,
                _top: 0,
                _bottom: 0,
                _verticalCenter: 0,
                _horizontalCenter: 0,
                _isAbsLeft: true,
                _isAbsRight: true,
                _isAbsTop: true,
                _isAbsBottom: true,
                _isAbsHorizontalCenter: true,
                _isAbsVerticalCenter: true,
                _originalWidth: 0,
                _originalHeight: 0
            },
            statics: { AlignMode: AlignMode },
            onLoad: function onLoad() {
                if (this._wasAlignOnce !== undefined) {
                    this.alignMode = this._wasAlignOnce ? AlignMode.ONCE : AlignMode.ALWAYS;
                    this._wasAlignOnce = undefined;
                }
            },
            onEnable: function onEnable() {
                WidgetManager.add(this);
            },
            onDisable: function onDisable() {
                WidgetManager.remove(this);
            },
            _validateTargetInDEV: CC_DEV && function () {
                var target = this._target;
                if (target) {
                    var isParent = this.node !== target && this.node.isChildOf(target);
                    if (!isParent) {
                        cc.errorID(6500);
                        this._target = null;
                    }
                }
            },
            _setAlign: function _setAlign(flag, isAlign) {
                var current = (this._alignFlags & flag) > 0;
                if (isAlign === current) {
                    return;
                }
                var isHorizontal = (flag & LEFT_RIGHT) > 0;
                if (isAlign) {
                    this._alignFlags |= flag;
                    if (isHorizontal) {
                        this.isAlignHorizontalCenter = false;
                        if (this.isStretchWidth) {
                            this._originalWidth = this.node.width;
                            if (CC_EDITOR && !cc.engine.isPlaying) {
                                _Scene.DetectConflict.checkConflict_Widget(this);
                            }
                        }
                    } else {
                        this.isAlignVerticalCenter = false;
                        if (this.isStretchHeight) {
                            this._originalHeight = this.node.height;
                            if (CC_EDITOR && !cc.engine.isPlaying) {
                                _Scene.DetectConflict.checkConflict_Widget(this);
                            }
                        }
                    }
                    if (CC_EDITOR && !cc.engine._isPlaying && this.node._parent) {
                        WidgetManager.updateOffsetsToStayPut(this, flag);
                    }
                } else {
                    if (isHorizontal) {
                        if (this.isStretchWidth) {
                            this.node.width = this._originalWidth;
                        }
                    } else {
                        if (this.isStretchHeight) {
                            this.node.height = this._originalHeight;
                        }
                    }
                    this._alignFlags &= ~flag;
                }
            },
            updateAlignment: function updateAlignment() {
                WidgetManager.updateAlignment(this.node);
            }
        });
        Object.defineProperty(Widget.prototype, 'isAlignOnce', {
            get: function get() {
                if (CC_DEBUG) {
                    cc.warn('`widget.isAlignOnce` is deprecated, use `widget.alignMode === cc.Widget.AlignMode.ONCE` instead please.');
                }
                return this.alignMode === AlignMode.ONCE;
            },
            set: function set(value) {
                if (CC_DEBUG) {
                    cc.warn('`widget.isAlignOnce` is deprecated, use `widget.alignMode = cc.Widget.AlignMode.*` instead please.');
                }
                this.alignMode = value ? AlignMode.ONCE : AlignMode.ALWAYS;
            }
        });
        cc.Widget = module.exports = Widget;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,