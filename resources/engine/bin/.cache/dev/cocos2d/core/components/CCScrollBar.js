(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCScrollBar.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var misc = require('../utils/misc');
        var Component = require('./CCComponent');
        var GETTINGSHORTERFACTOR = 20;
        var Direction = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1
        });
        var Scrollbar = cc.Class({
            name: 'cc.Scrollbar',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/ScrollBar',
                help: 'i18n:COMPONENT.help_url.scrollbar'
            },
            properties: {
                _scrollView: null,
                _touching: false,
                _autoHideRemainingTime: {
                    default: 0,
                    serializable: false
                },
                _opacity: 255,
                handle: {
                    default: null,
                    type: cc.Sprite,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollbar.handle',
                    notify: function notify() {
                        this._onScroll(cc.v2(0, 0));
                    },
                    animatable: false
                },
                direction: {
                    default: Direction.HORIZONTAL,
                    type: Direction,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollbar.direction',
                    notify: function notify() {
                        this._onScroll(cc.v2(0, 0));
                    },
                    animatable: false
                },
                enableAutoHide: {
                    default: true,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollbar.auto_hide'
                },
                autoHideTime: {
                    default: 1,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.scrollbar.auto_hide_time'
                }
            },
            statics: { Direction: Direction },
            setTargetScrollView: function setTargetScrollView(scrollView) {
                this._scrollView = scrollView;
            },
            _convertToScrollViewSpace: function _convertToScrollViewSpace(content) {
                var worldSpacePos = content.convertToWorldSpace(cc.v2(0, 0));
                var scrollViewSpacePos = this._scrollView.node.convertToNodeSpace(worldSpacePos);
                return scrollViewSpacePos;
            },
            _setOpacity: function _setOpacity(opacity) {
                if (this.handle) {
                    this.node.opacity = opacity;
                    this.handle.node.opacity = opacity;
                }
            },
            _onScroll: function _onScroll(outOfBoundary) {
                if (this._scrollView) {
                    var content = this._scrollView.content;
                    if (content) {
                        var contentSize = content.getContentSize();
                        var scrollViewSize = this._scrollView.node.getContentSize();
                        var handleNodeSize = this.node.getContentSize();
                        if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
                            return;
                        }
                        if (this.enableAutoHide) {
                            this._autoHideRemainingTime = this.autoHideTime;
                            this._setOpacity(this._opacity);
                        }
                        var contentMeasure = 0;
                        var scrollViewMeasure = 0;
                        var outOfBoundaryValue = 0;
                        var contentPosition = 0;
                        var handleNodeMeasure = 0;
                        if (this.direction === Direction.HORIZONTAL) {
                            contentMeasure = contentSize.width;
                            scrollViewMeasure = scrollViewSize.width;
                            handleNodeMeasure = handleNodeSize.width;
                            outOfBoundaryValue = outOfBoundary.x;
                            contentPosition = -this._convertToScrollViewSpace(content).x;
                        } else if (this.direction === Direction.VERTICAL) {
                            contentMeasure = contentSize.height;
                            scrollViewMeasure = scrollViewSize.height;
                            handleNodeMeasure = handleNodeSize.height;
                            outOfBoundaryValue = outOfBoundary.y;
                            contentPosition = -this._convertToScrollViewSpace(content).y;
                        }
                        var length = this._calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundaryValue);
                        var position = this._calculatePosition(contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundaryValue, length);
                        this._updateLength(length);
                        this._updateHanlderPosition(position);
                    }
                }
            },
            _updateHanlderPosition: function _updateHanlderPosition(position) {
                if (this.handle) {
                    var oldPosition = this._fixupHandlerPosition();
                    this.handle.node.setPosition(position.x + oldPosition.x, position.y + oldPosition.y);
                }
            },
            _fixupHandlerPosition: function _fixupHandlerPosition() {
                var barSize = this.node.getContentSize();
                var barAnchor = this.node.getAnchorPoint();
                var handleSize = this.handle.node.getContentSize();
                var handleParent = this.handle.node.parent;
                var leftBottomWorldPosition = this.node.convertToWorldSpaceAR(cc.v2(-barSize.width * barAnchor.x, -barSize.height * barAnchor.y));
                var fixupPosition = handleParent.convertToNodeSpaceAR(leftBottomWorldPosition);
                if (this.direction === Direction.HORIZONTAL) {
                    fixupPosition = cc.v2(fixupPosition.x, fixupPosition.y + (barSize.height - handleSize.height) / 2);
                } else if (this.direction === Direction.VERTICAL) {
                    fixupPosition = cc.v2(fixupPosition.x + (barSize.width - handleSize.width) / 2, fixupPosition.y);
                }
                this.handle.node.setPosition(fixupPosition);
                return fixupPosition;
            },
            _onTouchBegan: function _onTouchBegan() {
                if (!this.enableAutoHide) {
                    return;
                }
                this._touching = true;
            },
            _conditionalDisableScrollBar: function _conditionalDisableScrollBar(contentSize, scrollViewSize) {
                if (contentSize.width <= scrollViewSize.width && this.direction === Direction.HORIZONTAL) {
                    return true;
                }
                if (contentSize.height <= scrollViewSize.height && this.direction === Direction.VERTICAL) {
                    return true;
                }
                return false;
            },
            _onTouchEnded: function _onTouchEnded() {
                if (!this.enableAutoHide) {
                    return;
                }
                this._touching = false;
                if (this.autoHideTime <= 0) {
                    return;
                }
                if (this._scrollView) {
                    var content = this._scrollView.content;
                    if (content) {
                        var contentSize = content.getContentSize();
                        var scrollViewSize = this._scrollView.node.getContentSize();
                        if (this._conditionalDisableScrollBar(contentSize, scrollViewSize)) {
                            return;
                        }
                    }
                }
                this._autoHideRemainingTime = this.autoHideTime;
            },
            _calculateLength: function _calculateLength(contentMeasure, scrollViewMeasure, handleNodeMeasure, outOfBoundary) {
                var denominatorValue = contentMeasure;
                if (outOfBoundary) {
                    denominatorValue += (outOfBoundary > 0 ? outOfBoundary : -outOfBoundary) * GETTINGSHORTERFACTOR;
                }
                var lengthRation = scrollViewMeasure / denominatorValue;
                return handleNodeMeasure * lengthRation;
            },
            _calculatePosition: function _calculatePosition(contentMeasure, scrollViewMeasure, handleNodeMeasure, contentPosition, outOfBoundary, actualLenth) {
                var denominatorValue = contentMeasure - scrollViewMeasure;
                if (outOfBoundary) {
                    denominatorValue += Math.abs(outOfBoundary);
                }
                var positionRatio = 0;
                if (denominatorValue) {
                    positionRatio = contentPosition / denominatorValue;
                    positionRatio = misc.clamp01(positionRatio);
                }
                var position = (handleNodeMeasure - actualLenth) * positionRatio;
                if (this.direction === Direction.VERTICAL) {
                    return cc.v2(0, position);
                } else {
                    return cc.v2(position, 0);
                }
            },
            _updateLength: function _updateLength(length) {
                if (this.handle) {
                    var handleNode = this.handle.node;
                    var handleNodeSize = handleNode.getContentSize();
                    handleNode.setAnchorPoint(cc.v2(0, 0));
                    if (this.direction === Direction.HORIZONTAL) {
                        handleNode.setContentSize(length, handleNodeSize.height);
                    } else {
                        handleNode.setContentSize(handleNodeSize.width, length);
                    }
                }
            },
            _processAutoHide: function _processAutoHide(deltaTime) {
                if (!this.enableAutoHide || this._autoHideRemainingTime <= 0) {
                    return;
                } else if (this._touching) {
                    return;
                }
                this._autoHideRemainingTime -= deltaTime;
                if (this._autoHideRemainingTime <= this.autoHideTime) {
                    this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
                    var opacity = this._opacity * (this._autoHideRemainingTime / this.autoHideTime);
                    this._setOpacity(opacity);
                }
            },
            start: function start() {
                if (this.enableAutoHide) {
                    this._setOpacity(0);
                }
            },
            hide: function hide() {
                this._autoHideRemainingTime = 0;
                this._setOpacity(0);
            },
            show: function show() {
                this._autoHideRemainingTime = this.autoHideTime;
                this._setOpacity(this._opacity);
            },
            update: function update(dt) {
                this._processAutoHide(dt);
            }
        });
        cc.Scrollbar = module.exports = Scrollbar;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,