(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCRichText.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = require('../platform/js');
        var macro = require('../platform/CCMacro');
        var textUtils = require('../utils/text-utils');
        var HtmlTextParser = require('../utils/html-text-parser');
        var _htmlTextParser = new HtmlTextParser();
        var HorizontalAlign = macro.TextAlignment;
        var VerticalAlign = macro.VerticalTextAlignment;
        var RichTextChildName = 'RICHTEXT_CHILD';
        var RichTextChildImageName = 'RICHTEXT_Image_CHILD';
        function debounce(func, wait, immediate) {
            var timeout = void 0;
            return function () {
                var context = this;
                var later = function later() {
                    timeout = null;
                    if (!immediate)
                        func.apply(context, arguments);
                };
                var callNow = immediate && !timeout;
                clearTimeout(timeout);
                timeout = setTimeout(later, wait);
                if (callNow)
                    func.apply(context, arguments);
            };
        }
        var pool = new js.Pool(function (node) {
            if (CC_EDITOR) {
                return false;
            }
            if (CC_DEV) {
                cc.assert(!node._parent, 'Recycling node\'s parent should be null!');
            }
            if (!cc.isValid(node)) {
                return false;
            } else if (node.getComponent(cc.LabelOutline)) {
                return false;
            }
            return true;
        }, 20);
        pool.get = function (string, richtext) {
            var labelNode = this._get();
            if (!labelNode) {
                labelNode = new cc.PrivateNode(RichTextChildName);
            }
            var labelComponent = labelNode.getComponent(cc.Label);
            if (!labelComponent) {
                labelComponent = labelNode.addComponent(cc.Label);
            }
            labelNode.setPosition(0, 0);
            labelNode.setAnchorPoint(0.5, 0.5);
            labelNode.setContentSize(128, 128);
            labelNode.skewX = 0;
            if (typeof string !== 'string') {
                string = '' + string;
            }
            var isAsset = richtext.font instanceof cc.Font;
            if (isAsset) {
                labelComponent.font = richtext.font;
            } else {
                labelComponent.fontFamily = richtext.fontFamily;
            }
            labelComponent.string = string;
            labelComponent.horizontalAlign = HorizontalAlign.LEFT;
            labelComponent.verticalAlign = VerticalAlign.TOP;
            labelComponent.fontSize = richtext.fontSize || 40;
            labelComponent.overflow = 0;
            labelComponent.enableWrapText = true;
            labelComponent.lineHeight = 40;
            labelComponent._enableBold(false);
            labelComponent._enableItalics(false);
            labelComponent._enableUnderline(false);
            return labelNode;
        };
        var RichText = cc.Class({
            name: 'cc.RichText',
            extends: cc.Component,
            ctor: function ctor() {
                this._textArray = null;
                this._labelSegments = [];
                this._labelSegmentsCache = [];
                this._linesWidth = [];
                if (CC_EDITOR) {
                    this._updateRichTextStatus = debounce(this._updateRichText, 200);
                } else {
                    this._updateRichTextStatus = this._updateRichText;
                }
            },
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/RichText',
                help: 'i18n:COMPONENT.help_url.richtext',
                inspector: 'packages://inspector/inspectors/comps/richtext.js',
                executeInEditMode: true
            },
            properties: {
                string: {
                    default: '<color=#00ff00>Rich</c><color=#0fffff>Text</color>',
                    multiline: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.string',
                    notify: function notify() {
                        this._updateRichTextStatus();
                    }
                },
                horizontalAlign: {
                    default: HorizontalAlign.LEFT,
                    type: HorizontalAlign,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.horizontal_align',
                    animatable: false,
                    notify: function notify(oldValue) {
                        if (this.horizontalAlign === oldValue)
                            return;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    }
                },
                fontSize: {
                    default: 40,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.font_size',
                    notify: function notify(oldValue) {
                        if (this.fontSize === oldValue)
                            return;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    }
                },
                _fontFamily: 'Arial',
                fontFamily: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.font_family',
                    get: function get() {
                        return this._fontFamily;
                    },
                    set: function set(value) {
                        if (this._fontFamily === value)
                            return;
                        this._fontFamily = value;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    },
                    animatable: false
                },
                font: {
                    default: null,
                    type: cc.TTFFont,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.font',
                    notify: function notify(oldValue) {
                        if (this.font === oldValue)
                            return;
                        this._layoutDirty = true;
                        if (this.font) {
                            this.useSystemFont = false;
                            this._onTTFLoaded();
                        } else {
                            this.useSystemFont = true;
                        }
                        this._updateRichTextStatus();
                    }
                },
                _isSystemFontUsed: true,
                useSystemFont: {
                    get: function get() {
                        return this._isSystemFontUsed;
                    },
                    set: function set(value) {
                        if (!value && !this.font || this._isSystemFontUsed === value) {
                            return;
                        }
                        this._isSystemFontUsed = value;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.system_font'
                },
                maxWidth: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.max_width',
                    notify: function notify(oldValue) {
                        if (this.maxWidth === oldValue)
                            return;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    }
                },
                lineHeight: {
                    default: 40,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.line_height',
                    notify: function notify(oldValue) {
                        if (this.lineHeight === oldValue)
                            return;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    }
                },
                imageAtlas: {
                    default: null,
                    type: cc.SpriteAtlas,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.image_atlas',
                    notify: function notify(oldValue) {
                        if (this.imageAtlas === oldValue)
                            return;
                        this._layoutDirty = true;
                        this._updateRichTextStatus();
                    }
                },
                handleTouchEvent: {
                    default: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.richtext.handleTouchEvent',
                    notify: function notify(oldValue) {
                        if (this.handleTouchEvent === oldValue)
                            return;
                        if (this.enabledInHierarchy) {
                            this.handleTouchEvent ? this._addEventListeners() : this._removeEventListeners();
                        }
                    }
                }
            },
            statics: {
                HorizontalAlign: HorizontalAlign,
                VerticalAlign: VerticalAlign
            },
            onEnable: function onEnable() {
                if (this.handleTouchEvent) {
                    this._addEventListeners();
                }
                this._updateRichText();
                this._activateChildren(true);
            },
            onDisable: function onDisable() {
                if (this.handleTouchEvent) {
                    this._removeEventListeners();
                }
                this._activateChildren(false);
            },
            start: function start() {
                this._onTTFLoaded();
            },
            _onColorChanged: function _onColorChanged(parentColor) {
                var children = this.node.children;
                children.forEach(function (childNode) {
                    childNode.color = parentColor;
                });
            },
            _addEventListeners: function _addEventListeners() {
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
            },
            _removeEventListeners: function _removeEventListeners() {
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
            },
            _updateLabelSegmentTextAttributes: function _updateLabelSegmentTextAttributes() {
                this._labelSegments.forEach(function (item) {
                    this._applyTextAttribute(item);
                }.bind(this));
            },
            _createFontLabel: function _createFontLabel(string) {
                return pool.get(string, this);
            },
            _onTTFLoaded: function _onTTFLoaded() {
                if (this.font instanceof cc.TTFFont) {
                    if (this.font._nativeAsset) {
                        this._layoutDirty = true;
                        this._updateRichText();
                    } else {
                        var self = this;
                        cc.loader.load(this.font.nativeUrl, function (err, fontFamily) {
                            self._layoutDirty = true;
                            self._updateRichText();
                        });
                    }
                } else {
                    this._layoutDirty = true;
                    this._updateRichText();
                }
            },
            _measureText: function _measureText(styleIndex, string) {
                var self = this;
                var func = function func(string) {
                    var label = void 0;
                    if (self._labelSegmentsCache.length === 0) {
                        label = self._createFontLabel(string);
                        self._labelSegmentsCache.push(label);
                    } else {
                        label = self._labelSegmentsCache[0];
                        label.getComponent(cc.Label).string = string;
                    }
                    label._styleIndex = styleIndex;
                    self._applyTextAttribute(label);
                    var labelSize = label.getContentSize();
                    return labelSize.width;
                };
                if (string) {
                    return func(string);
                } else {
                    return func;
                }
            },
            _onTouchEnded: function _onTouchEnded(event) {
                var _this = this;
                var components = this.node.getComponents(cc.Component);
                var _loop = function _loop(i) {
                    var labelSegment = _this._labelSegments[i];
                    var clickHandler = labelSegment._clickHandler;
                    var clickParam = labelSegment._clickParam;
                    if (clickHandler && _this._containsTouchLocation(labelSegment, event.touch.getLocation())) {
                        components.forEach(function (component) {
                            if (component.enabledInHierarchy && component[clickHandler]) {
                                component[clickHandler](event, clickParam);
                            }
                        });
                        event.stopPropagation();
                    }
                };
                for (var i = 0; i < this._labelSegments.length; ++i) {
                    _loop(i);
                }
            },
            _containsTouchLocation: function _containsTouchLocation(label, point) {
                var myRect = label.getBoundingBoxToWorld();
                return myRect.contains(point);
            },
            _resetState: function _resetState() {
                var children = this.node.children;
                for (var i = children.length - 1; i >= 0; i--) {
                    var child = children[i];
                    if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
                        if (child.parent === this.node) {
                            child.parent = null;
                        } else {
                            children.splice(i, 1);
                        }
                        if (child.name === RichTextChildName) {
                            pool.put(child);
                        }
                    }
                }
                this._labelSegments.length = 0;
                this._labelSegmentsCache.length = 0;
                this._linesWidth.length = 0;
                this._lineOffsetX = 0;
                this._lineCount = 1;
                this._labelWidth = 0;
                this._labelHeight = 0;
                this._layoutDirty = true;
            },
            onRestore: CC_EDITOR && function () {
                if (this.enabledInHierarchy) {
                    this.onEnable();
                } else {
                    this.onDisable();
                }
            },
            _activateChildren: function _activateChildren(active) {
                for (var i = this.node.children.length - 1; i >= 0; i--) {
                    var child = this.node.children[i];
                    if (child.name === RichTextChildName || child.name === RichTextChildImageName) {
                        child.active = active;
                    }
                }
            },
            _addLabelSegment: function _addLabelSegment(stringToken, styleIndex) {
                var labelSegment = void 0;
                if (this._labelSegmentsCache.length === 0) {
                    labelSegment = this._createFontLabel(stringToken);
                } else {
                    labelSegment = this._labelSegmentsCache.pop();
                    labelSegment.getComponent(cc.Label).string = stringToken;
                }
                labelSegment._styleIndex = styleIndex;
                labelSegment._lineCount = this._lineCount;
                labelSegment.active = this.node.active;
                labelSegment.setAnchorPoint(0, 0);
                this._applyTextAttribute(labelSegment);
                this.node.addChild(labelSegment);
                this._labelSegments.push(labelSegment);
                return labelSegment;
            },
            _updateRichTextWithMaxWidth: function _updateRichTextWithMaxWidth(labelString, labelWidth, styleIndex) {
                var fragmentWidth = labelWidth;
                var labelSegment = void 0;
                if (this._lineOffsetX > 0 && fragmentWidth + this._lineOffsetX > this.maxWidth) {
                    var checkStartIndex = 0;
                    while (this._lineOffsetX <= this.maxWidth) {
                        var checkEndIndex = this._getFirstWordLen(labelString, checkStartIndex, labelString.length);
                        var checkString = labelString.substr(checkStartIndex, checkEndIndex);
                        var checkStringWidth = this._measureText(styleIndex, checkString);
                        if (this._lineOffsetX + checkStringWidth <= this.maxWidth) {
                            this._lineOffsetX += checkStringWidth;
                            checkStartIndex += checkEndIndex;
                        } else {
                            if (checkStartIndex > 0) {
                                var remainingString = labelString.substr(0, checkStartIndex);
                                this._addLabelSegment(remainingString, styleIndex);
                                labelString = labelString.substr(checkStartIndex, labelString.length);
                                fragmentWidth = this._measureText(styleIndex, labelString);
                            }
                            this._updateLineInfo();
                            break;
                        }
                    }
                }
                if (fragmentWidth > this.maxWidth) {
                    var fragments = textUtils.fragmentText(labelString, fragmentWidth, this.maxWidth, this._measureText(styleIndex));
                    for (var k = 0; k < fragments.length; ++k) {
                        var splitString = fragments[k];
                        labelSegment = this._addLabelSegment(splitString, styleIndex);
                        var labelSize = labelSegment.getContentSize();
                        this._lineOffsetX += labelSize.width;
                        if (fragments.length > 1 && k < fragments.length - 1) {
                            this._updateLineInfo();
                        }
                    }
                } else {
                    this._lineOffsetX += fragmentWidth;
                    this._addLabelSegment(labelString, styleIndex);
                }
            },
            _isLastComponentCR: function _isLastComponentCR(stringToken) {
                return stringToken.length - 1 === stringToken.lastIndexOf('\n');
            },
            _updateLineInfo: function _updateLineInfo() {
                this._linesWidth.push(this._lineOffsetX);
                this._lineOffsetX = 0;
                this._lineCount++;
            },
            _needsUpdateTextLayout: function _needsUpdateTextLayout(newTextArray) {
                if (this._layoutDirty || !this._textArray || !newTextArray) {
                    return true;
                }
                if (this._textArray.length !== newTextArray.length) {
                    return true;
                }
                for (var i = 0; i < this._textArray.length; ++i) {
                    var oldItem = this._textArray[i];
                    var newItem = newTextArray[i];
                    if (oldItem.text !== newItem.text) {
                        return true;
                    } else {
                        if (oldItem.style) {
                            if (newItem.style) {
                                if (!!newItem.style.outline !== !!oldItem.style.outline) {
                                    return true;
                                }
                                if (oldItem.style.size !== newItem.style.size || oldItem.style.italic !== newItem.style.italic || oldItem.style.isImage !== newItem.style.isImage) {
                                    return true;
                                }
                                if (oldItem.style.isImage === newItem.style.isImage) {
                                    if (oldItem.style.src !== newItem.style.src) {
                                        return true;
                                    }
                                }
                            } else {
                                if (oldItem.style.size || oldItem.style.italic || oldItem.style.isImage || oldItem.style.outline) {
                                    return true;
                                }
                            }
                        } else {
                            if (newItem.style) {
                                if (newItem.style.size || newItem.style.italic || newItem.style.isImage || newItem.style.outline) {
                                    return true;
                                }
                            }
                        }
                    }
                }
                return false;
            },
            _addRichTextImageElement: function _addRichTextImageElement(richTextElement) {
                var spriteFrameName = richTextElement.style.src;
                var spriteFrame = this.imageAtlas.getSpriteFrame(spriteFrameName);
                if (spriteFrame) {
                    var spriteNode = new cc.PrivateNode(RichTextChildImageName);
                    var spriteComponent = spriteNode.addComponent(cc.Sprite);
                    spriteNode.setAnchorPoint(0, 0);
                    spriteComponent.type = cc.Sprite.Type.SLICED;
                    spriteComponent.sizeMode = cc.Sprite.SizeMode.CUSTOM;
                    this.node.addChild(spriteNode);
                    this._labelSegments.push(spriteNode);
                    var spriteRect = spriteFrame.getRect();
                    var scaleFactor = 1;
                    var spriteWidth = spriteRect.width;
                    var spriteHeight = spriteRect.height;
                    var expectWidth = richTextElement.style.imageWidth;
                    var expectHeight = richTextElement.style.imageHeight;
                    if (expectHeight > 0 && expectHeight < this.lineHeight) {
                        scaleFactor = expectHeight / spriteHeight;
                        spriteWidth = spriteWidth * scaleFactor;
                        spriteHeight = spriteHeight * scaleFactor;
                    } else {
                        scaleFactor = this.lineHeight / spriteHeight;
                        spriteWidth = spriteWidth * scaleFactor;
                        spriteHeight = spriteHeight * scaleFactor;
                    }
                    if (expectWidth > 0)
                        spriteWidth = expectWidth;
                    if (this.maxWidth > 0) {
                        if (this._lineOffsetX + spriteWidth > this.maxWidth) {
                            this._updateLineInfo();
                        }
                        this._lineOffsetX += spriteWidth;
                    } else {
                        this._lineOffsetX += spriteWidth;
                        if (this._lineOffsetX > this._labelWidth) {
                            this._labelWidth = this._lineOffsetX;
                        }
                    }
                    spriteComponent.spriteFrame = spriteFrame;
                    spriteNode.setContentSize(spriteWidth, spriteHeight);
                    spriteNode._lineCount = this._lineCount;
                    if (richTextElement.style.event) {
                        if (richTextElement.style.event.click) {
                            spriteNode._clickHandler = richTextElement.style.event.click;
                        }
                        if (richTextElement.style.event.param) {
                            spriteNode._clickParam = richTextElement.style.event.param;
                        } else {
                            spriteNode._clickParam = '';
                        }
                    } else {
                        spriteNode._clickHandler = null;
                    }
                } else {
                    cc.warnID(4400);
                }
            },
            _updateRichText: function _updateRichText() {
                if (!this.enabled)
                    return;
                var newTextArray = _htmlTextParser.parse(this.string);
                if (!this._needsUpdateTextLayout(newTextArray)) {
                    this._textArray = newTextArray;
                    this._updateLabelSegmentTextAttributes();
                    return;
                }
                this._textArray = newTextArray;
                this._resetState();
                var lastEmptyLine = false;
                var label = void 0;
                var labelSize = void 0;
                for (var i = 0; i < this._textArray.length; ++i) {
                    var richTextElement = this._textArray[i];
                    var text = richTextElement.text;
                    if (text === '') {
                        if (richTextElement.style && richTextElement.style.newline) {
                            this._updateLineInfo();
                            continue;
                        }
                        if (richTextElement.style && richTextElement.style.isImage && this.imageAtlas) {
                            this._addRichTextImageElement(richTextElement);
                            continue;
                        }
                    }
                    var multilineTexts = text.split('\n');
                    for (var j = 0; j < multilineTexts.length; ++j) {
                        var labelString = multilineTexts[j];
                        if (labelString === '') {
                            if (this._isLastComponentCR(text) && j === multilineTexts.length - 1) {
                                continue;
                            }
                            this._updateLineInfo();
                            lastEmptyLine = true;
                            continue;
                        }
                        lastEmptyLine = false;
                        if (this.maxWidth > 0) {
                            var labelWidth = this._measureText(i, labelString);
                            this._updateRichTextWithMaxWidth(labelString, labelWidth, i);
                            if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                                this._updateLineInfo();
                            }
                        } else {
                            label = this._addLabelSegment(labelString, i);
                            labelSize = label.getContentSize();
                            this._lineOffsetX += labelSize.width;
                            if (this._lineOffsetX > this._labelWidth) {
                                this._labelWidth = this._lineOffsetX;
                            }
                            if (multilineTexts.length > 1 && j < multilineTexts.length - 1) {
                                this._updateLineInfo();
                            }
                        }
                    }
                }
                if (!lastEmptyLine) {
                    this._linesWidth.push(this._lineOffsetX);
                }
                if (this.maxWidth > 0) {
                    this._labelWidth = this.maxWidth;
                }
                this._labelHeight = (this._lineCount + textUtils.BASELINE_RATIO) * this.lineHeight;
                this.node.setContentSize(this._labelWidth, this._labelHeight);
                this._updateRichTextPosition();
                this._layoutDirty = false;
            },
            _getFirstWordLen: function _getFirstWordLen(text, startIndex, textLen) {
                var character = text.charAt(startIndex);
                if (textUtils.isUnicodeCJK(character) || textUtils.isUnicodeSpace(character)) {
                    return 1;
                }
                var len = 1;
                for (var index = startIndex + 1; index < textLen; ++index) {
                    character = text.charAt(index);
                    if (textUtils.isUnicodeSpace(character) || textUtils.isUnicodeCJK(character)) {
                        break;
                    }
                    len++;
                }
                return len;
            },
            _updateRichTextPosition: function _updateRichTextPosition() {
                var nextTokenX = 0;
                var nextLineIndex = 1;
                var totalLineCount = this._lineCount;
                for (var i = 0; i < this._labelSegments.length; ++i) {
                    var label = this._labelSegments[i];
                    var lineCount = label._lineCount;
                    if (lineCount > nextLineIndex) {
                        nextTokenX = 0;
                        nextLineIndex = lineCount;
                    }
                    var lineOffsetX = 0;
                    switch (this.horizontalAlign) {
                    case HorizontalAlign.LEFT:
                        lineOffsetX = -this._labelWidth / 2;
                        break;
                    case HorizontalAlign.CENTER:
                        lineOffsetX = -this._linesWidth[lineCount - 1] / 2;
                        break;
                    case HorizontalAlign.RIGHT:
                        lineOffsetX = this._labelWidth / 2 - this._linesWidth[lineCount - 1];
                        break;
                    default:
                        break;
                    }
                    label.x = nextTokenX + lineOffsetX;
                    var labelSize = label.getContentSize();
                    label.y = this.lineHeight * (totalLineCount - lineCount) - this._labelHeight / 2;
                    if (lineCount === nextLineIndex) {
                        nextTokenX += labelSize.width;
                    }
                }
            },
            _convertLiteralColorValue: function _convertLiteralColorValue(color) {
                var colorValue = color.toUpperCase();
                if (cc.Color[colorValue]) {
                    return cc.Color[colorValue];
                } else {
                    var out = cc.color();
                    return out.fromHEX(color);
                }
            },
            _applyTextAttribute: function _applyTextAttribute(labelNode) {
                var labelComponent = labelNode.getComponent(cc.Label);
                if (!labelComponent) {
                    return;
                }
                var index = labelNode._styleIndex;
                if (this._isSystemFontUsed) {
                    labelComponent.fontFamily = this._fontFamily;
                }
                labelComponent.useSystemFont = this._isSystemFontUsed;
                labelComponent.lineHeight = this.lineHeight;
                labelComponent.horizontalAlign = HorizontalAlign.LEFT;
                labelComponent.verticalAlign = VerticalAlign.CENTER;
                var textStyle = null;
                if (this._textArray[index]) {
                    textStyle = this._textArray[index].style;
                }
                if (textStyle && textStyle.color) {
                    labelNode.color = this._convertLiteralColorValue(textStyle.color);
                } else {
                    labelNode.color = this.node.color;
                }
                labelComponent._enableBold(textStyle && textStyle.bold);
                labelComponent._enableItalics(textStyle && textStyle.italic);
                if (textStyle && textStyle.italic) {
                    labelNode.skewX = 12;
                }
                labelComponent._enableUnderline(textStyle && textStyle.underline);
                if (textStyle && textStyle.outline) {
                    var labelOutlineComponent = labelNode.getComponent(cc.LabelOutline);
                    if (!labelOutlineComponent) {
                        labelOutlineComponent = labelNode.addComponent(cc.LabelOutline);
                    }
                    labelOutlineComponent.color = this._convertLiteralColorValue(textStyle.outline.color);
                    labelOutlineComponent.width = textStyle.outline.width;
                }
                if (textStyle && textStyle.size) {
                    labelComponent.fontSize = textStyle.size;
                } else {
                    labelComponent.fontSize = this.fontSize;
                }
                labelComponent._updateRenderData(true);
                if (textStyle && textStyle.event) {
                    if (textStyle.event.click) {
                        labelNode._clickHandler = textStyle.event.click;
                    }
                    if (textStyle.event.param) {
                        labelNode._clickParam = textStyle.event.param;
                    } else {
                        labelNode._clickParam = '';
                    }
                } else {
                    labelNode._clickHandler = null;
                }
            },
            onDestroy: function onDestroy() {
                for (var i = 0; i < this._labelSegments.length; ++i) {
                    this._labelSegments[i].removeFromParent();
                    pool.put(this._labelSegments[i]);
                }
            }
        });
        cc.RichText = module.exports = RichText;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,