(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCLabelOutline.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var LabelOutline = cc.Class({
            name: 'cc.LabelOutline',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/LabelOutline',
                executeInEditMode: true,
                requireComponent: cc.Label
            },
            properties: {
                _color: cc.Color.WHITE,
                _width: 1,
                color: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.outline.color',
                    get: function get() {
                        return this._color;
                    },
                    set: function set(value) {
                        this._color = value;
                        this._updateRenderData();
                    }
                },
                width: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.outline.width',
                    get: function get() {
                        return this._width;
                    },
                    set: function set(value) {
                        this._width = value;
                        this._updateRenderData();
                    },
                    range: [
                        0,
                        512
                    ]
                }
            },
            onEnable: function onEnable() {
                this._updateRenderData();
            },
            onDisable: function onDisable() {
                this._updateRenderData();
            },
            _updateRenderData: function _updateRenderData() {
                var label = this.node.getComponent(cc.Label);
                if (label) {
                    label._updateRenderData();
                }
            }
        });
        cc.LabelOutline = module.exports = LabelOutline;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,