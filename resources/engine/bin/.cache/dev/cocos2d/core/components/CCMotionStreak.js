(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCMotionStreak.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var RenderComponent = require('../components/CCRenderComponent');
        var Material = require('../assets/material/CCMaterial');
        var textureUtil = require('../utils/texture-util');
        var BlendFunc = require('../../core/utils/blend-func');
        var MotionStreak = cc.Class({
            name: 'cc.MotionStreak',
            extends: RenderComponent,
            mixins: [BlendFunc],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.others/MotionStreak',
                help: 'i18n:COMPONENT.help_url.motionStreak',
                playOnFocus: true,
                executeInEditMode: true
            },
            ctor: function ctor() {
                this._points = [];
            },
            properties: {
                preview: {
                    default: false,
                    editorOnly: true,
                    notify: CC_EDITOR && function () {
                        this.reset();
                    },
                    animatable: false
                },
                _fadeTime: 1,
                fadeTime: {
                    get: function get() {
                        return this._fadeTime;
                    },
                    set: function set(value) {
                        this._fadeTime = value;
                        this.reset();
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.motionStreak.fadeTime'
                },
                _minSeg: 1,
                minSeg: {
                    get: function get() {
                        return this._minSeg;
                    },
                    set: function set(value) {
                        this._minSeg = value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.motionStreak.minSeg'
                },
                _stroke: 64,
                stroke: {
                    get: function get() {
                        return this._stroke;
                    },
                    set: function set(value) {
                        this._stroke = value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.motionStreak.stroke'
                },
                _texture: {
                    default: null,
                    type: cc.Texture2D
                },
                texture: {
                    get: function get() {
                        return this._texture;
                    },
                    set: function set(value) {
                        if (this._texture === value)
                            return;
                        this._texture = value;
                        if (!value || !value.loaded) {
                            this.disableRender();
                            this._ensureLoadTexture();
                        } else {
                            this._activateMaterial();
                        }
                    },
                    type: cc.Texture2D,
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.motionStreak.texture'
                },
                _color: cc.Color.WHITE,
                color: {
                    get: function get() {
                        return this._color;
                    },
                    set: function set(value) {
                        this._color = value;
                    },
                    type: cc.Color,
                    tooltip: CC_DEV && 'i18n:COMPONENT.motionStreak.color'
                },
                _fastMode: false,
                fastMode: {
                    get: function get() {
                        return this._fastMode;
                    },
                    set: function set(value) {
                        this._fastMode = value;
                    },
                    animatable: false,
                    tooltip: CC_DEV && 'i18n:COMPONENT.motionStreak.fastMode'
                }
            },
            onEnable: function onEnable() {
                this._super();
                if (!this._texture || !this._texture.loaded) {
                    this.disableRender();
                    this._ensureLoadTexture();
                } else {
                    this._activateMaterial();
                }
                this.reset();
            },
            _ensureLoadTexture: function _ensureLoadTexture() {
                if (this._texture && !this._texture.loaded) {
                    var self = this;
                    textureUtil.postLoadTexture(this._texture, function () {
                        self._activateMaterial();
                    });
                }
            },
            _activateMaterial: function _activateMaterial() {
                if (!this._texture || !this._texture.loaded) {
                    this.disableRender();
                    return;
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.setProperty('texture', this._texture);
                this.setMaterial(0, material);
                this.markForRender(true);
            },
            onFocusInEditor: CC_EDITOR && function () {
                if (this.preview) {
                    this.reset();
                }
            },
            onLostFocusInEditor: CC_EDITOR && function () {
                if (this.preview) {
                    this.reset();
                }
            },
            reset: function reset() {
                this._points.length = 0;
                var renderData = this._renderData;
                if (renderData) {
                    renderData.dataLength = 0;
                    renderData.vertexCount = 0;
                    renderData.indiceCount = 0;
                }
                if (CC_EDITOR) {
                    cc.engine.repaintInEditMode();
                }
            }
        });
        cc.MotionStreak = module.exports = MotionStreak;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,