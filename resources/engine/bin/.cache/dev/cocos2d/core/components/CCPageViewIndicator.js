(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCPageViewIndicator.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Direction = cc.Enum({
            HORIZONTAL: 0,
            VERTICAL: 1
        });
        var PageViewIndicator = cc.Class({
            name: 'cc.PageViewIndicator',
            extends: require('./CCComponent'),
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/PageViewIndicator',
                help: 'i18n:COMPONENT.help_url.pageviewIndicator'
            },
            properties: {
                _layout: null,
                _pageView: null,
                _indicators: [],
                spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview_indicator.spriteFrame'
                },
                direction: {
                    default: Direction.HORIZONTAL,
                    type: Direction,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview_indicator.direction'
                },
                cellSize: {
                    default: cc.size(20, 20),
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview_indicator.cell_size'
                },
                spacing: {
                    default: 0,
                    tooltip: CC_DEV && 'i18n:COMPONENT.pageview_indicator.spacing'
                }
            },
            statics: { Direction: Direction },
            onLoad: function onLoad() {
                this._updateLayout();
            },
            setPageView: function setPageView(target) {
                this._pageView = target;
                this._refresh();
            },
            _updateLayout: function _updateLayout() {
                this._layout = this.getComponent(cc.Layout);
                if (!this._layout) {
                    this._layout = this.addComponent(cc.Layout);
                }
                if (this.direction === Direction.HORIZONTAL) {
                    this._layout.type = cc.Layout.Type.HORIZONTAL;
                    this._layout.spacingX = this.spacing;
                } else if (this.direction === Direction.VERTICAL) {
                    this._layout.type = cc.Layout.Type.VERTICAL;
                    this._layout.spacingY = this.spacing;
                }
                this._layout.resizeMode = cc.Layout.ResizeMode.CONTAINER;
            },
            _createIndicator: function _createIndicator() {
                var node = new cc.Node();
                var sprite = node.addComponent(cc.Sprite);
                sprite.spriteFrame = this.spriteFrame;
                node.parent = this.node;
                node.width = this.cellSize.width;
                node.height = this.cellSize.height;
                return node;
            },
            _changedState: function _changedState() {
                var indicators = this._indicators;
                if (indicators.length === 0)
                    return;
                var idx = this._pageView._curPageIdx;
                if (idx >= indicators.length)
                    return;
                for (var i = 0; i < indicators.length; ++i) {
                    var node = indicators[i];
                    node.opacity = 255 / 2;
                }
                indicators[idx].opacity = 255;
            },
            _refresh: function _refresh() {
                if (!this._pageView) {
                    return;
                }
                var indicators = this._indicators;
                var pages = this._pageView.getPages();
                if (pages.length === indicators.length) {
                    return;
                }
                var i = 0;
                if (pages.length > indicators.length) {
                    for (i = 0; i < pages.length; ++i) {
                        if (!indicators[i]) {
                            indicators[i] = this._createIndicator();
                        }
                    }
                } else {
                    var count = indicators.length - pages.length;
                    for (i = count; i > 0; --i) {
                        var node = indicators[i - 1];
                        this.node.removeChild(node);
                        indicators.splice(i - 1, 1);
                    }
                }
                if (this._layout && this._layout.enabledInHierarchy) {
                    this._layout.updateLayout();
                }
                this._changedState();
            }
        });
        cc.PageViewIndicator = module.exports = PageViewIndicator;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,