(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/missing-script.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        var BUILTIN_CLASSID_RE = require('../utils/misc').BUILTIN_CLASSID_RE;
        var MissingClass = cc.Class({
            name: 'cc.MissingClass',
            properties: {
                _$erialized: {
                    default: null,
                    visible: false,
                    editorOnly: true
                }
            }
        });
        var MissingScript = cc.Class({
            name: 'cc.MissingScript',
            extends: cc.Component,
            editor: { inspector: 'packages://inspector/inspectors/comps/missing-script.js' },
            properties: {
                compiled: {
                    default: false,
                    serializable: false
                },
                _$erialized: {
                    default: null,
                    visible: false,
                    editorOnly: true
                }
            },
            ctor: CC_EDITOR && function () {
                this.compiled = _Scene.Sandbox.compiled;
            },
            statics: {
                safeFindClass: function safeFindClass(id, data) {
                    var cls = js._getClassById(id);
                    if (cls) {
                        return cls;
                    }
                    if (id) {
                        cc.deserialize.reportMissingClass(id);
                        return MissingScript.getMissingWrapper(id, data);
                    }
                    return null;
                },
                getMissingWrapper: function getMissingWrapper(id, data) {
                    if (data.node && (/^[0-9a-zA-Z+/]{23}$/.test(id) || BUILTIN_CLASSID_RE.test(id))) {
                        return MissingScript;
                    } else {
                        return MissingClass;
                    }
                }
            },
            onLoad: function onLoad() {
                cc.warnID(4600, this.node.name);
            }
        });
        cc._MissingScript = module.exports = MissingScript;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,