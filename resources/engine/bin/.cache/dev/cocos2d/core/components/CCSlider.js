(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCSlider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var misc = require('../utils/misc');
        var Component = require('./CCComponent');
        var Direction = cc.Enum({
            Horizontal: 0,
            Vertical: 1
        });
        var Slider = cc.Class({
            name: 'cc.Slider',
            extends: Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/Slider',
                help: 'i18n:COMPONENT.help_url.slider'
            },
            ctor: function ctor() {
                this._offset = cc.v2();
                this._touchHandle = false;
                this._dragging = false;
            },
            properties: {
                handle: {
                    default: null,
                    type: cc.Button,
                    tooltip: CC_DEV && 'i18n:COMPONENT.slider.handle',
                    notify: function notify() {
                        if (CC_EDITOR && this.handle) {
                            this._updateHandlePosition();
                        }
                    }
                },
                direction: {
                    default: Direction.Horizontal,
                    type: Direction,
                    tooltip: CC_DEV && 'i18n:COMPONENT.slider.direction'
                },
                progress: {
                    default: 0.5,
                    type: cc.Float,
                    range: [
                        0,
                        1,
                        0.1
                    ],
                    slide: true,
                    tooltip: CC_DEV && 'i18n:COMPONENT.slider.progress',
                    notify: function notify() {
                        this._updateHandlePosition();
                    }
                },
                slideEvents: {
                    default: [],
                    type: cc.Component.EventHandler,
                    tooltip: CC_DEV && 'i18n:COMPONENT.slider.slideEvents'
                }
            },
            statics: { Direction: Direction },
            __preload: function __preload() {
                this._updateHandlePosition();
            },
            onEnable: function onEnable() {
                this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
                this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
                if (this.handle && this.handle.isValid) {
                    this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
                    this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
                    this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                }
            },
            onDisable: function onDisable() {
                this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
                this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
                this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
                if (this.handle && this.handle.isValid) {
                    this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
                    this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
                    this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
                }
            },
            _onHandleDragStart: function _onHandleDragStart(event) {
                this._dragging = true;
                this._touchHandle = true;
                this._offset = this.handle.node.convertToNodeSpaceAR(event.touch.getLocation());
                event.stopPropagation();
            },
            _onTouchBegan: function _onTouchBegan(event) {
                if (!this.handle) {
                    return;
                }
                this._dragging = true;
                if (!this._touchHandle) {
                    this._handleSliderLogic(event.touch);
                }
                event.stopPropagation();
            },
            _onTouchMoved: function _onTouchMoved(event) {
                if (!this._dragging) {
                    return;
                }
                this._handleSliderLogic(event.touch);
                event.stopPropagation();
            },
            _onTouchEnded: function _onTouchEnded(event) {
                this._dragging = false;
                this._touchHandle = false;
                this._offset = cc.v2();
                event.stopPropagation();
            },
            _onTouchCancelled: function _onTouchCancelled(event) {
                this._dragging = false;
                event.stopPropagation();
            },
            _handleSliderLogic: function _handleSliderLogic(touch) {
                this._updateProgress(touch);
                this._emitSlideEvent();
            },
            _emitSlideEvent: function _emitSlideEvent() {
                cc.Component.EventHandler.emitEvents(this.slideEvents, this);
                this.node.emit('slide', this);
            },
            _updateProgress: function _updateProgress(touch) {
                if (!this.handle) {
                    return;
                }
                var localTouchPos = this.node.convertToNodeSpace(touch.getLocation());
                if (this.direction === Direction.Horizontal) {
                    this.progress = misc.clamp01((localTouchPos.x - this._offset.x) / this.node.width);
                } else {
                    this.progress = misc.clamp01((localTouchPos.y - this._offset.y) / this.node.height);
                }
            },
            _updateHandlePosition: function _updateHandlePosition() {
                if (!this.handle) {
                    return;
                }
                var handlelocalPos;
                if (this.direction === Direction.Horizontal) {
                    handlelocalPos = cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0);
                } else {
                    handlelocalPos = cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
                }
                var worldSpacePos = this.node.convertToWorldSpaceAR(handlelocalPos);
                this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(worldSpacePos);
            }
        });
        cc.Slider = module.exports = Slider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,