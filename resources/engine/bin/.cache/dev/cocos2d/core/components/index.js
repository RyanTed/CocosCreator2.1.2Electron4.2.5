(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/index.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./CCComponent');
        require('./CCComponentEventHandler');
        require('./missing-script');
        var components = [
            require('./CCSprite'),
            require('./CCWidget'),
            require('./CCCanvas'),
            require('./CCAudioSource'),
            require('./CCAnimation'),
            require('./CCButton'),
            require('./CCLabel'),
            require('./CCProgressBar'),
            require('./CCMask'),
            require('./CCScrollBar'),
            require('./CCScrollView'),
            require('./CCPageViewIndicator'),
            require('./CCPageView'),
            require('./CCSlider'),
            require('./CCLayout'),
            require('./editbox/CCEditBox'),
            require('./CCLabelOutline'),
            require('./CCLabelShadow'),
            require('./CCRichText'),
            require('./CCToggleContainer'),
            require('./CCToggleGroup'),
            require('./CCToggle'),
            require('./CCBlockInputEvents'),
            require('./CCMotionStreak'),
            require('./WXSubContextView'),
            require('./SwanSubContextView')
        ];
        module.exports = components;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,