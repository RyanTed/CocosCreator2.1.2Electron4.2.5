(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/CCComponent.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var CCObject = require('../platform/CCObject');
        var js = require('../platform/js');
        var idGenerater = new (require('../platform/id-generater'))('Comp');
        var IsOnEnableCalled = CCObject.Flags.IsOnEnableCalled;
        var IsOnLoadCalled = CCObject.Flags.IsOnLoadCalled;
        var Component = cc.Class({
            name: 'cc.Component',
            extends: CCObject,
            ctor: CC_EDITOR ? function () {
                if (window._Scene && _Scene.AssetsWatcher) {
                    _Scene.AssetsWatcher.initComponent(this);
                }
                this._id = Editor.Utils.UuidUtils.uuid();
                this.__eventTargets = [];
            } : function () {
                this._id = idGenerater.getNewId();
                this.__eventTargets = [];
            },
            properties: {
                node: {
                    default: null,
                    visible: false
                },
                name: {
                    get: function get() {
                        if (this._name) {
                            return this._name;
                        }
                        var className = cc.js.getClassName(this);
                        var trimLeft = className.lastIndexOf('.');
                        if (trimLeft >= 0) {
                            className = className.slice(trimLeft + 1);
                        }
                        return this.node.name + '<' + className + '>';
                    },
                    set: function set(value) {
                        this._name = value;
                    },
                    visible: false
                },
                uuid: {
                    get: function get() {
                        return this._id;
                    },
                    visible: false
                },
                __scriptAsset: CC_EDITOR && {
                    get: function get() {
                    },
                    displayName: 'Script',
                    type: cc._Script,
                    tooltip: CC_DEV && 'i18n:INSPECTOR.component.script'
                },
                _enabled: true,
                enabled: {
                    get: function get() {
                        return this._enabled;
                    },
                    set: function set(value) {
                        if (this._enabled !== value) {
                            this._enabled = value;
                            if (this.node._activeInHierarchy) {
                                var compScheduler = cc.director._compScheduler;
                                if (value) {
                                    compScheduler.enableComp(this);
                                } else {
                                    compScheduler.disableComp(this);
                                }
                            }
                        }
                    },
                    visible: false,
                    animatable: true
                },
                enabledInHierarchy: {
                    get: function get() {
                        return this._enabled && this.node._activeInHierarchy;
                    },
                    visible: false
                },
                _isOnLoadCalled: {
                    get: function get() {
                        return this._objFlags & IsOnLoadCalled;
                    }
                }
            },
            update: null,
            lateUpdate: null,
            __preload: null,
            onLoad: null,
            start: null,
            onEnable: null,
            onDisable: null,
            onDestroy: null,
            onFocusInEditor: null,
            onLostFocusInEditor: null,
            resetInEditor: null,
            addComponent: function addComponent(typeOrClassName) {
                return this.node.addComponent(typeOrClassName);
            },
            getComponent: function getComponent(typeOrClassName) {
                return this.node.getComponent(typeOrClassName);
            },
            getComponents: function getComponents(typeOrClassName) {
                return this.node.getComponents(typeOrClassName);
            },
            getComponentInChildren: function getComponentInChildren(typeOrClassName) {
                return this.node.getComponentInChildren(typeOrClassName);
            },
            getComponentsInChildren: function getComponentsInChildren(typeOrClassName) {
                return this.node.getComponentsInChildren(typeOrClassName);
            },
            _getLocalBounds: null,
            onRestore: null,
            destroy: function destroy() {
                if (CC_EDITOR) {
                    var depend = this.node._getDependComponent(this);
                    if (depend) {
                        return cc.errorID(3626, cc.js.getClassName(this), cc.js.getClassName(depend));
                    }
                }
                if (this._super()) {
                    if (this._enabled && this.node._activeInHierarchy) {
                        cc.director._compScheduler.disableComp(this);
                    }
                }
            },
            _onPreDestroy: function _onPreDestroy() {
                this.unscheduleAllCallbacks();
                var eventTargets = this.__eventTargets;
                for (var i = 0, l = eventTargets.length; i < l; ++i) {
                    var target = eventTargets[i];
                    target && target.targetOff(this);
                }
                eventTargets.length = 0;
                if (CC_EDITOR && !CC_TEST) {
                    _Scene.AssetsWatcher.stop(this);
                }
                cc.director._nodeActivator.destroyComp(this);
                this.node._removeComponent(this);
            },
            _instantiate: function _instantiate(cloned) {
                if (!cloned) {
                    cloned = cc.instantiate._clone(this, this);
                }
                cloned.node = null;
                return cloned;
            },
            schedule: function schedule(callback, interval, repeat, delay) {
                cc.assertID(callback, 1619);
                cc.assertID(interval >= 0, 1620);
                interval = interval || 0;
                repeat = isNaN(repeat) ? cc.macro.REPEAT_FOREVER : repeat;
                delay = delay || 0;
                var scheduler = cc.director.getScheduler();
                var paused = scheduler.isTargetPaused(this);
                scheduler.schedule(callback, this, interval, repeat, delay, paused);
            },
            scheduleOnce: function scheduleOnce(callback, delay) {
                this.schedule(callback, 0, 0, delay);
            },
            unschedule: function unschedule(callback_fn) {
                if (!callback_fn)
                    return;
                cc.director.getScheduler().unschedule(callback_fn, this);
            },
            unscheduleAllCallbacks: function unscheduleAllCallbacks() {
                cc.director.getScheduler().unscheduleAllForTarget(this);
            }
        });
        Component._requireComponent = null;
        Component._executionOrder = 0;
        if (CC_EDITOR || CC_TEST) {
            Component._executeInEditMode = false;
            Component._playOnFocus = false;
            Component._disallowMultiple = null;
            Component._help = '';
            js.value(Component, '_inspector', '', true);
            js.value(Component, '_icon', '', true);
            cc._componentMenuItems = [];
            Component._addMenuItem = function (cls, path, priority) {
                cc._componentMenuItems.push({
                    component: cls,
                    menuPath: path,
                    priority: priority
                });
            };
        }
        js.value(Component, '_registerEditorProps', function (cls, props) {
            var reqComp = props.requireComponent;
            if (reqComp) {
                cls._requireComponent = reqComp;
            }
            var order = props.executionOrder;
            if (order && typeof order === 'number') {
                cls._executionOrder = order;
            }
            if (CC_EDITOR || CC_TEST) {
                var name = cc.js.getClassName(cls);
                for (var key in props) {
                    var val = props[key];
                    switch (key) {
                    case 'executeInEditMode':
                        cls._executeInEditMode = !!val;
                        break;
                    case 'playOnFocus':
                        if (val) {
                            var willExecuteInEditMode = 'executeInEditMode' in props ? props.executeInEditMode : cls._executeInEditMode;
                            if (willExecuteInEditMode) {
                                cls._playOnFocus = true;
                            } else {
                                cc.warnID(3601, name);
                            }
                        }
                        break;
                    case 'inspector':
                        js.value(cls, '_inspector', val, true);
                        break;
                    case 'icon':
                        js.value(cls, '_icon', val, true);
                        break;
                    case 'menu':
                        Component._addMenuItem(cls, val, props.menuPriority);
                        break;
                    case 'disallowMultiple':
                        cls._disallowMultiple = cls;
                        break;
                    case 'requireComponent':
                    case 'executionOrder':
                        break;
                    case 'help':
                        cls._help = val;
                        break;
                    default:
                        cc.warnID(3602, key, name);
                        break;
                    }
                }
            }
        });
        Component.prototype.__scriptUuid = '';
        cc.Component = module.exports = Component;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,