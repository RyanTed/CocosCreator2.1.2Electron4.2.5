(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/components/editbox/tabIndexUtil.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var tabIndexUtil = {
            _tabIndexList: [],
            add: function add(editBoxImpl) {
                var list = this._tabIndexList;
                var index = list.indexOf(editBoxImpl);
                if (index === -1) {
                    list.push(editBoxImpl);
                }
            },
            remove: function remove(editBoxImpl) {
                var list = this._tabIndexList;
                var index = list.indexOf(editBoxImpl);
                if (index !== -1) {
                    list.splice(index, 1);
                }
            },
            resort: function resort() {
                this._tabIndexList.sort(function (a, b) {
                    return a._delegate._tabIndex - b._delegate._tabIndex;
                });
            },
            next: function next(editBoxImpl) {
                var list = this._tabIndexList;
                var index = list.indexOf(editBoxImpl);
                editBoxImpl.setFocus(false);
                if (index !== -1) {
                    var nextImpl = list[index + 1];
                    if (nextImpl && nextImpl._delegate._tabIndex >= 0) {
                        nextImpl.setFocus(true);
                    }
                }
            }
        };
        module.exports = tabIndexUtil;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,