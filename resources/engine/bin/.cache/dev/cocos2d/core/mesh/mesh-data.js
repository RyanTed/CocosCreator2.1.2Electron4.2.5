(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/mesh/mesh-data.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.Primitive = exports.VertexBundle = exports.VertexFormat = exports.BufferRange = undefined;
        var _gfx = require('../../renderer/gfx');
        var _gfx2 = _interopRequireDefault(_gfx);
        function _interopRequireDefault(obj) {
            return obj && obj.__esModule ? obj : { default: obj };
        }
        var BufferRange = exports.BufferRange = cc.Class({
            name: 'cc.BufferRange',
            properties: {
                offset: 0,
                length: 0
            }
        });
        var VertexFormat = exports.VertexFormat = cc.Class({
            name: 'cc.mesh.VertexFormat',
            properties: {
                name: '',
                type: -1,
                num: -1,
                normalize: false
            }
        });
        var VertexBundle = exports.VertexBundle = cc.Class({
            name: 'cc.mesh.VertexBundle',
            properties: {
                data: {
                    default: null,
                    type: BufferRange
                },
                formats: {
                    default: [],
                    type: VertexFormat
                },
                verticesCount: 0
            }
        });
        var Primitive = exports.Primitive = cc.Class({
            name: 'cc.mesh.Primitive',
            properties: {
                vertexBundleIndices: {
                    default: [],
                    type: Number
                },
                data: {
                    default: null,
                    type: BufferRange
                },
                indexUnit: _gfx2.default.INDEX_FMT_UINT16,
                topology: _gfx2.default.PT_TRIANGLES
            }
        });
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,