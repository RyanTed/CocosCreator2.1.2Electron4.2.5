(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/prefab-helper.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var _vmath = require('../vmath');
        cc._PrefabInfo = cc.Class({
            name: 'cc.PrefabInfo',
            properties: {
                root: null,
                asset: null,
                fileId: '',
                sync: false,
                _synced: {
                    default: false,
                    serializable: false
                }
            }
        });
        module.exports = {
            syncWithPrefab: function syncWithPrefab(node) {
                var _prefab = node._prefab;
                _prefab._synced = true;
                if (!_prefab.asset) {
                    if (CC_EDITOR) {
                        var NodeUtils = Editor.require('scene://utils/node');
                        var PrefabUtils = Editor.require('scene://utils/prefab');
                        cc.warn(Editor.T('MESSAGE.prefab.missing_prefab', { node: NodeUtils.getNodePath(node) }));
                        node.name += PrefabUtils.MISSING_PREFAB_SUFFIX;
                    } else {
                        cc.errorID(3701, node.name);
                    }
                    node._prefab = null;
                    return;
                }
                var _objFlags = node._objFlags;
                var _parent = node._parent;
                var _id = node._id;
                var _name = node._name;
                var _active = node._active;
                var x = node._position.x;
                var y = node._position.y;
                var _quat = node._quat;
                var _localZOrder = node._localZOrder;
                var _globalZOrder = node._globalZOrder;
                cc.game._isCloning = true;
                if (CC_SUPPORT_JIT) {
                    _prefab.asset._doInstantiate(node);
                } else {
                    var prefabRoot = _prefab.asset.data;
                    prefabRoot._prefab._synced = true;
                    prefabRoot._iN$t = node;
                    cc.instantiate._clone(prefabRoot, prefabRoot);
                }
                cc.game._isCloning = false;
                node._objFlags = _objFlags;
                node._parent = _parent;
                node._id = _id;
                node._prefab = _prefab;
                node._name = _name;
                node._active = _active;
                node._position.x = x;
                node._position.y = y;
                _vmath.quat.copy(node._quat, _quat);
                node._localZOrder = _localZOrder;
                node._globalZOrder = _globalZOrder;
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,