(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/profiler/counter.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Counter = cc.Class({
            name: 'cc.Counter',
            ctor: function ctor(id, opts, now) {
                this._id = id;
                this._opts = opts || {};
                this._value = 0;
                this._total = 0;
                this._averageValue = 0;
                this._accumValue = 0;
                this._accumSamples = 0;
                this._accumStart = now;
            },
            properties: {
                value: {
                    get: function get() {
                        return this._value;
                    },
                    set: function set(v) {
                        this._value = v;
                    }
                }
            },
            _average: function _average(v, now) {
                if (this._opts.average) {
                    this._accumValue += v;
                    ++this._accumSamples;
                    var t = now;
                    if (t - this._accumStart >= this._opts.average) {
                        this._averageValue = this._accumValue / this._accumSamples;
                        this._accumValue = 0;
                        this._accumStart = t;
                        this._accumSamples = 0;
                    }
                }
            },
            sample: function sample(now) {
                this._average(this._value, now);
            },
            human: function human() {
                var v = this._opts.average ? this._averageValue : this._value;
                return Math.round(v * 100) / 100;
            },
            alarm: function alarm() {
                return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
            }
        });
        module.exports = Counter;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,