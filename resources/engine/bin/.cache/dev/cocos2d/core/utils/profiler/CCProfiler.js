(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/profiler/CCProfiler.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../../platform/CCMacro');
        var PerfCounter = require('./perf-counter');
        var _showFPS = false;
        var _fontSize = 15;
        var _atlas = null;
        var _stats = null;
        var _rootNode = null;
        var _label = null;
        function generateAtlas() {
            if (_atlas)
                return;
            var textureWidth = 256, textureHeight = 256;
            var canvas = document.createElement('canvas');
            canvas.width = textureWidth;
            canvas.height = textureHeight;
            canvas.style.width = textureWidth + 'px';
            canvas.style.height = textureHeight + 'px';
            var ctx = canvas.getContext('2d');
            ctx.font = _fontSize + 'px Arial';
            ctx.textBaseline = 'top';
            ctx.textAlign = 'left';
            ctx.fillStyle = '#fff';
            var space = 2;
            var x = space;
            var y = space;
            var lineHeight = _fontSize;
            _atlas = new cc.LabelAtlas();
            _atlas._fntConfig = {
                atlasName: 'profiler-arial',
                commonHeight: lineHeight,
                fontSize: _fontSize,
                kerningDict: {},
                fontDefDictionary: {}
            };
            _atlas._name = 'profiler-arial';
            _atlas.fontSize = _fontSize;
            var dict = _atlas._fntConfig.fontDefDictionary;
            for (var i = 32; i <= 126; i++) {
                var char = String.fromCharCode(i);
                var width = ctx.measureText(char).width;
                if (x + width >= textureWidth) {
                    x = space;
                    y += lineHeight + space;
                }
                ctx.fillText(char, x, y);
                dict[i] = {
                    xAdvance: width,
                    xOffset: 0,
                    yOffset: 0,
                    rect: {
                        x: x,
                        y: y,
                        width: width,
                        height: lineHeight
                    }
                };
                x += width + space;
            }
            var texture = new cc.Texture2D();
            texture.initWithElement(canvas);
            var spriteFrame = new cc.SpriteFrame();
            spriteFrame.setTexture(texture);
            _atlas.spriteFrame = spriteFrame;
        }
        function generateStats() {
            if (_stats)
                return;
            _stats = {
                frame: {
                    desc: 'Frame time (ms)',
                    min: 0,
                    max: 50,
                    average: 500
                },
                fps: {
                    desc: 'Framerate (FPS)',
                    below: 30,
                    average: 500
                },
                draws: { desc: 'Draw call' },
                logic: {
                    desc: 'Game Logic (ms)',
                    min: 0,
                    max: 50,
                    average: 500,
                    color: '#080'
                },
                render: {
                    desc: 'Renderer (ms)',
                    min: 0,
                    max: 50,
                    average: 500,
                    color: '#f90'
                },
                mode: {
                    desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? 'WebGL' : 'Canvas',
                    min: 1
                }
            };
            var now = performance.now();
            for (var id in _stats) {
                _stats[id]._counter = new PerfCounter(id, _stats[id], now);
            }
        }
        function generateNode() {
            if (_rootNode && _rootNode.isValid)
                return;
            _rootNode = new cc.Node('PROFILER-NODE');
            _rootNode.x = _rootNode.y = 10;
            _rootNode.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
            cc.Camera._setupDebugCamera();
            _rootNode.zIndex = macro.MAX_ZINDEX;
            cc.game.addPersistRootNode(_rootNode);
            var left = new cc.Node('LEFT-PANEL');
            left.anchorX = left.anchorY = 0;
            left.parent = _rootNode;
            var leftLabel = left.addComponent(cc.Label);
            leftLabel.font = _atlas;
            leftLabel.fontSize = _fontSize;
            leftLabel.lineHeight = _fontSize;
            var right = new cc.Node('RIGHT-PANEL');
            right.anchorX = 1;
            right.anchorY = 0;
            right.x = 200;
            right.parent = _rootNode;
            var rightLabel = right.addComponent(cc.Label);
            rightLabel.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
            rightLabel.font = _atlas;
            rightLabel.fontSize = _fontSize;
            rightLabel.lineHeight = _fontSize;
            _label = {
                left: leftLabel,
                right: rightLabel
            };
        }
        function beforeUpdate() {
            generateNode();
            var now = cc.director._lastUpdate;
            _stats['frame']._counter.start(now);
            _stats['logic']._counter.start(now);
        }
        function afterUpdate() {
            var now = performance.now();
            if (cc.director.isPaused()) {
                _stats['frame']._counter.start(now);
            } else {
                _stats['logic']._counter.end(now);
            }
            _stats['render']._counter.start(now);
        }
        function updateLabel(stat) {
            var length = 20;
            var desc = stat.desc;
            var value = stat._counter.human() + '';
            stat.label.string = stat.desc + '  ' + stat._counter.human();
        }
        function afterDraw() {
            var now = performance.now();
            _stats['render']._counter.end(now);
            _stats['draws']._counter.value = cc.renderer.drawCalls;
            _stats['frame']._counter.end(now);
            _stats['fps']._counter.frame(now);
            var left = '';
            var right = '';
            for (var id in _stats) {
                var stat = _stats[id];
                stat._counter.sample(now);
                left += stat.desc + '\n';
                right += stat._counter.human() + '\n';
            }
            _label.left.string = left;
            _label.right.string = right;
        }
        cc.profiler = module.exports = {
            isShowingStats: function isShowingStats() {
                return _showFPS;
            },
            hideStats: function hideStats() {
                if (_showFPS) {
                    if (_rootNode) {
                        _rootNode.active = false;
                    }
                    cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, beforeUpdate);
                    cc.director.off(cc.Director.EVENT_AFTER_UPDATE, afterUpdate);
                    cc.director.off(cc.Director.EVENT_AFTER_DRAW, afterDraw);
                    _showFPS = false;
                }
            },
            showStats: function showStats() {
                if (!_showFPS) {
                    generateAtlas();
                    generateStats();
                    if (_rootNode) {
                        _rootNode.active = true;
                    }
                    cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, beforeUpdate);
                    cc.director.on(cc.Director.EVENT_AFTER_UPDATE, afterUpdate);
                    cc.director.on(cc.Director.EVENT_AFTER_DRAW, afterDraw);
                    _showFPS = true;
                }
            }
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,