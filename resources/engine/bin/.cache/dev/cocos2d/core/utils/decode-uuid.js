(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/decode-uuid.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Base64Values = require('./misc').BASE64_VALUES;
        var HexChars = '0123456789abcdef'.split('');
        var _t = [
            '',
            '',
            '',
            ''
        ];
        var UuidTemplate = _t.concat(_t, '-', _t, '-', _t, '-', _t, '-', _t, _t, _t);
        var Indices = UuidTemplate.map(function (x, i) {
            return x === '-' ? NaN : i;
        }).filter(isFinite);
        module.exports = function (base64) {
            if (base64.length !== 22) {
                return base64;
            }
            UuidTemplate[0] = base64[0];
            UuidTemplate[1] = base64[1];
            for (var i = 2, j = 2; i < 22; i += 2) {
                var lhs = Base64Values[base64.charCodeAt(i)];
                var rhs = Base64Values[base64.charCodeAt(i + 1)];
                UuidTemplate[Indices[j++]] = HexChars[lhs >> 2];
                UuidTemplate[Indices[j++]] = HexChars[(lhs & 3) << 2 | rhs >> 4];
                UuidTemplate[Indices[j++]] = HexChars[rhs & 15];
            }
            return UuidTemplate.join('');
        };
        if (CC_TEST) {
            cc._Test.decodeUuid = module.exports;
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,