(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/texture-util.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Texture2D = require('../assets/CCTexture2D');
        var textureUtil = {
            loadImage: function loadImage(url, cb, target) {
                cc.assertID(url, 3103);
                var tex = cc.loader.getRes(url);
                if (tex) {
                    if (tex.loaded) {
                        cb && cb.call(target, null, tex);
                        return tex;
                    } else {
                        tex.once('load', function () {
                            cb && cb.call(target, null, tex);
                        }, target);
                        return tex;
                    }
                } else {
                    tex = new Texture2D();
                    tex.url = url;
                    cc.loader.load({
                        url: url,
                        texture: tex
                    }, function (err, texture) {
                        if (err) {
                            return cb && cb.call(target, err || new Error('Unknown error'));
                        }
                        texture.handleLoadedTexture();
                        cb && cb.call(target, null, texture);
                    });
                    return tex;
                }
            },
            cacheImage: function cacheImage(url, image) {
                if (url && image) {
                    var tex = new Texture2D();
                    tex.initWithElement(image);
                    var item = {
                        id: url,
                        url: url,
                        error: null,
                        content: tex,
                        complete: false
                    };
                    cc.loader.flowOut(item);
                    return tex;
                }
            },
            postLoadTexture: function postLoadTexture(texture, callback) {
                if (texture.loaded) {
                    callback && callback();
                    return;
                }
                if (!texture.url) {
                    callback && callback();
                    return;
                }
                cc.loader.load({
                    url: texture.url,
                    skips: ['Loader']
                }, function (err, image) {
                    if (image) {
                        if (CC_DEBUG && image instanceof cc.Texture2D) {
                            return cc.error('internal error: loader handle pipe must be skipped');
                        }
                        if (!texture.loaded) {
                            texture._nativeAsset = image;
                        }
                    }
                    callback && callback(err);
                });
            }
        };
        cc.textureUtil = module.exports = textureUtil;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,