(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/affine-transform.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var AffineTransform = function AffineTransform(a, b, c, d, tx, ty) {
            this.a = a;
            this.b = b;
            this.c = c;
            this.d = d;
            this.tx = tx;
            this.ty = ty;
        };
        AffineTransform.create = function (a, b, c, d, tx, ty) {
            return {
                a: a,
                b: b,
                c: c,
                d: d,
                tx: tx,
                ty: ty
            };
        };
        AffineTransform.identity = function () {
            return {
                a: 1,
                b: 0,
                c: 0,
                d: 1,
                tx: 0,
                ty: 0
            };
        };
        AffineTransform.clone = function (t) {
            return {
                a: t.a,
                b: t.b,
                c: t.c,
                d: t.d,
                tx: t.tx,
                ty: t.ty
            };
        };
        AffineTransform.concat = function (out, t1, t2) {
            var a = t1.a, b = t1.b, c = t1.c, d = t1.d, tx = t1.tx, ty = t1.ty;
            out.a = a * t2.a + b * t2.c;
            out.b = a * t2.b + b * t2.d;
            out.c = c * t2.a + d * t2.c;
            out.d = c * t2.b + d * t2.d;
            out.tx = tx * t2.a + ty * t2.c + t2.tx;
            out.ty = tx * t2.b + ty * t2.d + t2.ty;
            return out;
        };
        AffineTransform.invert = function (out, t) {
            var a = t.a, b = t.b, c = t.c, d = t.d;
            var determinant = 1 / (a * d - b * c);
            var tx = t.tx, ty = t.ty;
            out.a = determinant * d;
            out.b = -determinant * b;
            out.c = -determinant * c;
            out.d = determinant * a;
            out.tx = determinant * (c * ty - d * tx);
            out.ty = determinant * (b * tx - a * ty);
            return out;
        };
        AffineTransform.fromMat4 = function (out, mat) {
            out.a = mat.m00;
            out.b = mat.m01;
            out.c = mat.m04;
            out.d = mat.m05;
            out.tx = mat.m12;
            out.ty = mat.m13;
            return out;
        };
        AffineTransform.transformVec2 = function (out, point, transOrY, t) {
            var x, y;
            if (t === undefined) {
                t = transOrY;
                x = point.x;
                y = point.y;
            } else {
                x = point;
                y = transOrY;
            }
            out.x = t.a * x + t.c * y + t.tx;
            out.y = t.b * x + t.d * y + t.ty;
            return out;
        };
        AffineTransform.transformSize = function (out, size, t) {
            out.width = t.a * size.width + t.c * size.height;
            out.height = t.b * size.width + t.d * size.height;
            return out;
        };
        AffineTransform.transformRect = function (out, rect, t) {
            var ol = rect.x;
            var ob = rect.y;
            var or = ol + rect.width;
            var ot = ob + rect.height;
            var lbx = t.a * ol + t.c * ob + t.tx;
            var lby = t.b * ol + t.d * ob + t.ty;
            var rbx = t.a * or + t.c * ob + t.tx;
            var rby = t.b * or + t.d * ob + t.ty;
            var ltx = t.a * ol + t.c * ot + t.tx;
            var lty = t.b * ol + t.d * ot + t.ty;
            var rtx = t.a * or + t.c * ot + t.tx;
            var rty = t.b * or + t.d * ot + t.ty;
            var minX = Math.min(lbx, rbx, ltx, rtx);
            var maxX = Math.max(lbx, rbx, ltx, rtx);
            var minY = Math.min(lby, rby, lty, rty);
            var maxY = Math.max(lby, rby, lty, rty);
            out.x = minX;
            out.y = minY;
            out.width = maxX - minX;
            out.height = maxY - minY;
            return out;
        };
        AffineTransform.transformObb = function (out_bl, out_tl, out_tr, out_br, rect, anAffineTransform) {
            var x = rect.x;
            var y = rect.y;
            var width = rect.width;
            var height = rect.height;
            var tx = anAffineTransform.a * x + anAffineTransform.c * y + anAffineTransform.tx;
            var ty = anAffineTransform.b * x + anAffineTransform.d * y + anAffineTransform.ty;
            var xa = anAffineTransform.a * width;
            var xb = anAffineTransform.b * width;
            var yc = anAffineTransform.c * height;
            var yd = anAffineTransform.d * height;
            out_tl.x = tx;
            out_tl.y = ty;
            out_tr.x = xa + tx;
            out_tr.y = xb + ty;
            out_bl.x = yc + tx;
            out_bl.y = yd + ty;
            out_br.x = xa + yc + tx;
            out_br.y = xb + yd + ty;
        };
        cc.AffineTransform = module.exports = AffineTransform;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFmZmluZS10cmFuc2Zvcm0uanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL2NvcmUvdXRpbHMvYWZmaW5lLXRyYW5zZm9ybS5qcyJdLCJuYW1lcyI6WyJBZmZpbmVUcmFuc2Zvcm0iLCJhIiwiYiIsImMiLCJkIiwidHgiLCJ0eSIsImNyZWF0ZSIsImlkZW50aXR5IiwiY2xvbmUiLCJ0IiwiY29uY2F0Iiwib3V0IiwidDEiLCJ0MiIsImludmVydCIsImRldGVybWluYW50IiwiZnJvbU1hdDQiLCJtYXQiLCJtMDAiLCJtMDEiLCJtMDQiLCJtMDUiLCJtMTIiLCJtMTMiLCJ0cmFuc2Zvcm1WZWMyIiwicG9pbnQiLCJ0cmFuc09yWSIsIngiLCJ5IiwidW5kZWZpbmVkIiwidHJhbnNmb3JtU2l6ZSIsInNpemUiLCJ3aWR0aCIsImhlaWdodCIsInRyYW5zZm9ybVJlY3QiLCJyZWN0Iiwib2wiLCJvYiIsIm9yIiwib3QiLCJsYngiLCJsYnkiLCJyYngiLCJyYnkiLCJsdHgiLCJsdHkiLCJydHgiLCJydHkiLCJtaW5YIiwiTWF0aCIsIm1pbiIsIm1heFgiLCJtYXgiLCJtaW5ZIiwibWF4WSIsInRyYW5zZm9ybU9iYiIsIm91dF9ibCIsIm91dF90bCIsIm91dF90ciIsIm91dF9iciIsImFuQWZmaW5lVHJhbnNmb3JtIiwieGEiLCJ4YiIsInljIiwieWQiLCJjYyIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTBDQSxJQUFJQSxlQUFBQSxHQUFrQixTQUFsQkEsZUFBa0IsQ0FBVUMsQ0FBVixFQUFhQyxDQUFiLEVBQWdCQyxDQUFoQixFQUFtQkMsQ0FBbkIsRUFBc0JDLEVBQXRCLEVBQTBCQyxFQUExQixFQUE4QjtBQUFBLFlBQ2hELEtBQUtMLENBQUws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RUFBQUEsR0FBSzNELEVBQWhCbUQsQ0FsQjhGO0FBQUEsWUFtQjlGRyxNQUFBQSxDQUFPaEMsQ0FBUGdDLEdBQVdFLEVBQUFBLEdBQUtFLEVBQUxGLEdBQVV6RCxFQUFyQnVELENBbkI4RjtBQUFBLFlBb0I5RkEsTUFBQUEsQ0FBTy9CLENBQVArQixHQUFXRyxFQUFBQSxHQUFLRSxFQUFMRixHQUFVekQsRUFBckJzRCxDQXBCOEY7QUFBQSxTQUFsRzVEO1FBdUJBa0UsRUFBQUEsQ0FBR2xFLGVBQUhrRSxHQUFxQkMsTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJuRSxlQUF0Q2tFIiwiZmlsZSI6ImFmZmluZS10cmFuc2Zvcm0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDA4LTIwMTAgUmljYXJkbyBRdWVzYWRhXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTEtMjAxMiBjb2NvczJkLXgub3JnXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNiBDaHVrb25nIFRlY2hub2xvZ2llcyBJbmMuXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwOi8vd3d3LmNvY29zMmQteC5vcmdcclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXHJcbiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXHJcbiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXHJcbiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcclxuIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XHJcblxyXG4gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cclxuIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIEFmZmluZVRyYW5zZm9ybSBjbGFzcyByZXByZXNlbnQgYW4gYWZmaW5lIHRyYW5zZm9ybSBtYXRyaXguIEl0J3MgY29tcG9zZWQgYmFzaWNhbGx5IGJ5IHRyYW5zbGF0aW9uLCByb3RhdGlvbiwgc2NhbGUgdHJhbnNmb3JtYXRpb25zLjxici8+XHJcbiAqICEjemhcclxuICogQWZmaW5lVHJhbnNmb3JtIOexu+S7o+ihqOS4gOS4quS7v+WwhOWPmOaNouefqemYteOAguWug+WfuuacrOS4iuaYr+eUseW5s+enu+aXi+i9rO+8jOe8qeaUvui9rOWPmOaJgOe7hOaIkOOAgjxici8+XHJcbiAqIEBjbGFzcyBBZmZpbmVUcmFuc2Zvcm1cclxuICogQGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdHlcclxuICogQHNlZSBBZmZpbmVUcmFuc2Zvcm0uY3JlYXRlXHJcbiAqL1xyXG52YXIgQWZmaW5lVHJhbnNmb3JtID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQsIHR4LCB0eSkge1xyXG4gICAgdGhpcy5hID0gYTtcclxuICAgIHRoaXMuYiA9IGI7XHJcbiAgICB0aGlzLmMgPSBjO1xyXG4gICAgdGhpcy5kID0gZDtcclxuICAgIHRoaXMudHggPSB0eDtcclxuICAgIHRoaXMudHkgPSB0eTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuIENyZWF0ZSBhIEFmZmluZVRyYW5zZm9ybSBvYmplY3Qgd2l0aCBhbGwgY29udGVudHMgaW4gdGhlIG1hdHJpeC5cclxuICogISN6aCDnlKjlnKjnn6npmLXkuK3nmoTmiYDmnInlhoXlrrnliJvlu7rkuIDkuKogQWZmaW5lVHJhbnNmb3JtIOWvueixoeOAglxyXG4gKiBAbWV0aG9kIGNyZWF0ZVxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBhXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBiXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBjXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSBkXHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdHlcclxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfVxyXG4gKi9cclxuQWZmaW5lVHJhbnNmb3JtLmNyZWF0ZSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB0eCwgdHkpIHtcclxuICAgIHJldHVybiB7YTogYSwgYjogYiwgYzogYywgZDogZCwgdHg6IHR4LCB0eTogdHl9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlIGEgaWRlbnRpdHkgdHJhbnNmb3JtYXRpb24gbWF0cml4OiA8YnIvPlxyXG4gKiBbIDEsIDAsIDAsIDxici8+XHJcbiAqICAgMCwgMSwgMCBdXHJcbiAqICEjemhcclxuICog5Y2V5L2N55+p6Zi177yaPGJyLz5cclxuICogWyAxLCAwLCAwLCA8YnIvPlxyXG4gKiAgIDAsIDEsIDAgXVxyXG4gKlxyXG4gKiBAbWV0aG9kIGlkZW50aXR5XHJcbiAqIEBzdGF0aWNcclxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfVxyXG4gKi9cclxuQWZmaW5lVHJhbnNmb3JtLmlkZW50aXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHthOiAxLjAsIGI6IDAuMCwgYzogMC4wLCBkOiAxLjAsIHR4OiAwLjAsIHR5OiAwLjB9O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW4gQ2xvbmUgYSBBZmZpbmVUcmFuc2Zvcm0gb2JqZWN0IGZyb20gdGhlIHNwZWNpZmllZCB0cmFuc2Zvcm0uXHJcbiAqICEjemgg5YWL6ZqG5oyH5a6a55qEIEFmZmluZVRyYW5zZm9ybSDlr7nosaHjgIJcclxuICogQG1ldGhvZCBjbG9uZVxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSB0XHJcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX1cclxuICovXHJcbkFmZmluZVRyYW5zZm9ybS5jbG9uZSA9IGZ1bmN0aW9uICh0KSB7XHJcbiAgICByZXR1cm4ge2E6IHQuYSwgYjogdC5iLCBjOiB0LmMsIGQ6IHQuZCwgdHg6IHQudHgsIHR5OiB0LnR5fTtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuXHJcbiAqIENvbmNhdGVuYXRlIGEgdHJhbnNmb3JtIG1hdHJpeCB0byBhbm90aGVyXHJcbiAqIFRoZSByZXN1bHRzIGFyZSByZWZsZWN0ZWQgaW4gdGhlIG91dCBhZmZpbmUgdHJhbnNmb3JtXHJcbiAqIG91dCA9IHQxICogdDJcclxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBhZmZpbmUgdHJhbnNmb3JtIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cclxuICogISN6aFxyXG4gKiDmi7zmjqXkuKTkuKrnn6npmLXvvIzlsIbnu5Pmnpzkv53lrZjliLAgb3V0IOefqemYteOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uiBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXHJcbiAqIG91dCA9IHQxICogdDJcclxuICogQG1ldGhvZCBjb25jYXRcclxuICogQHN0YXRpY1xyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gb3V0IE91dCBvYmplY3QgdG8gc3RvcmUgdGhlIGNvbmNhdCByZXN1bHRcclxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHQxIFRoZSBmaXJzdCB0cmFuc2Zvcm0gb2JqZWN0LlxyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdDIgVGhlIHRyYW5zZm9ybSBvYmplY3QgdG8gY29uY2F0ZW5hdGUuXHJcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX0gT3V0IG9iamVjdCB3aXRoIHRoZSByZXN1bHQgb2YgY29uY2F0ZW5hdGlvbi5cclxuICovXHJcbkFmZmluZVRyYW5zZm9ybS5jb25jYXQgPSBmdW5jdGlvbiAob3V0LCB0MSwgdDIpIHtcclxuICAgIHZhciBhID0gdDEuYSwgYiA9IHQxLmIsIGMgPSB0MS5jLCBkID0gdDEuZCwgdHggPSB0MS50eCwgdHkgPSB0MS50eTtcclxuICAgIG91dC5hID0gYSAqIHQyLmEgKyBiICogdDIuYztcclxuICAgIG91dC5iID0gYSAqIHQyLmIgKyBiICogdDIuZDtcclxuICAgIG91dC5jID0gYyAqIHQyLmEgKyBkICogdDIuYztcclxuICAgIG91dC5kID0gYyAqIHQyLmIgKyBkICogdDIuZDtcclxuICAgIG91dC50eCA9IHR4ICogdDIuYSArIHR5ICogdDIuYyArIHQyLnR4O1xyXG4gICAgb3V0LnR5ID0gdHggKiB0Mi5iICsgdHkgKiB0Mi5kICsgdDIudHk7XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW4gR2V0IHRoZSBpbnZlcnQgdHJhbnNmb3JtIG9mIGFuIEFmZmluZVRyYW5zZm9ybSBvYmplY3QuXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgYWZmaW5lIHRyYW5zZm9ybSBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXHJcbiAqICEjemgg5rGC6YCG55+p6Zi144CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu6IEFmZmluZVRyYW5zZm9ybSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcclxuICogQG1ldGhvZCBpbnZlcnRcclxuICogQHN0YXRpY1xyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gb3V0XHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSB0XHJcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX0gT3V0IG9iamVjdCB3aXRoIGludmVydGVkIHJlc3VsdC5cclxuICovXHJcbkFmZmluZVRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbiAob3V0LCB0KSB7XHJcbiAgICB2YXIgYSA9IHQuYSwgYiA9IHQuYiwgYyA9IHQuYywgZCA9IHQuZDtcclxuICAgIHZhciBkZXRlcm1pbmFudCA9IDEgLyAoYSAqIGQgLSBiICogYyk7XHJcbiAgICB2YXIgdHggPSB0LnR4LCB0eSA9IHQudHk7XHJcbiAgICBvdXQuYSA9IGRldGVybWluYW50ICogZDtcclxuICAgIG91dC5iID0gLWRldGVybWluYW50ICogYjtcclxuICAgIG91dC5jID0gLWRldGVybWluYW50ICogYztcclxuICAgIG91dC5kID0gZGV0ZXJtaW5hbnQgKiBhO1xyXG4gICAgb3V0LnR4ID0gZGV0ZXJtaW5hbnQgKiAoYyAqIHR5IC0gZCAqIHR4KTtcclxuICAgIG91dC50eSA9IGRldGVybWluYW50ICogKGIgKiB0eCAtIGEgKiB0eSk7XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW4gR2V0IGFuIEFmZmluZVRyYW5zZm9ybSBvYmplY3QgZnJvbSBhIGdpdmVuIG1hdHJpeCA0eDQuXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgYWZmaW5lIHRyYW5zZm9ybSBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXHJcbiAqICEjemgg5LuO5LiA5LiqIDR4NCBNYXRyaXgg6I635Y+WIEFmZmluZVRyYW5zZm9ybSDlr7nosaHjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7ogQWZmaW5lVHJhbnNmb3JtIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxyXG4gKiBAbWV0aG9kIGludmVydFxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBvdXRcclxuICogQHBhcmFtIHtNYXQ0fSBtYXRcclxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfSBPdXQgb2JqZWN0IHdpdGggaW52ZXJ0ZWQgcmVzdWx0LlxyXG4gKi9cclxuQWZmaW5lVHJhbnNmb3JtLmZyb21NYXQ0ID0gZnVuY3Rpb24gKG91dCwgbWF0KSB7XHJcbiAgICBvdXQuYSA9IG1hdC5tMDA7XHJcbiAgICBvdXQuYiA9IG1hdC5tMDE7XHJcbiAgICBvdXQuYyA9IG1hdC5tMDQ7XHJcbiAgICBvdXQuZCA9IG1hdC5tMDU7XHJcbiAgICBvdXQudHggPSBtYXQubTEyO1xyXG4gICAgb3V0LnR5ID0gbWF0Lm0xMztcclxuICAgIHJldHVybiBvdXQ7XHJcbn07XHJcblxyXG4vKipcclxuICogISNlbiBBcHBseSB0aGUgYWZmaW5lIHRyYW5zZm9ybWF0aW9uIG9uIGEgcG9pbnQuXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgVmVjMiBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXHJcbiAqICEjemgg5a+55LiA5Liq54K55bqU55So55+p6Zi15Y+Y5o2i44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65LiA5LiqIFZlYzIg5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXHJcbiAqIEBtZXRob2QgdHJhbnNmb3JtVmVjMlxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7VmVjMn0gb3V0IFRoZSBvdXRwdXQgcG9pbnQgdG8gc3RvcmUgdGhlIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb2ludCBQb2ludCB0byBhcHBseSB0cmFuc2Zvcm0gb3IgeC5cclxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm18TnVtYmVyfSB0cmFuc09yWSB0cmFuc2Zvcm0gbWF0cml4IG9yIHkuXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBbdF0gdHJhbnNmb3JtIG1hdHJpeC5cclxuICogQHJldHVybiB7VmVjMn1cclxuICovXHJcbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1WZWMyID0gZnVuY3Rpb24gKG91dCwgcG9pbnQsIHRyYW5zT3JZLCB0KSB7XHJcbiAgICB2YXIgeCwgeTtcclxuICAgIGlmICh0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICB0ID0gdHJhbnNPclk7XHJcbiAgICAgICAgeCA9IHBvaW50Lng7XHJcbiAgICAgICAgeSA9IHBvaW50Lnk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHggPSBwb2ludDtcclxuICAgICAgICB5ID0gdHJhbnNPclk7XHJcbiAgICB9XHJcbiAgICBvdXQueCA9IHQuYSAqIHggKyB0LmMgKiB5ICsgdC50eDtcclxuICAgIG91dC55ID0gdC5iICogeCArIHQuZCAqIHkgKyB0LnR5O1xyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuIEFwcGx5IHRoZSBhZmZpbmUgdHJhbnNmb3JtYXRpb24gb24gYSBzaXplLlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IFNpemUgYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxyXG4gKiAhI3poIOW6lOeUqOS7v+WwhOWPmOaNouefqemYteWIsCBTaXplIOS4iuOAgui/meS4quWHveaVsOS4jeWIm+W7uuS7u+S9leWGheWtmO+8jOS9oOmcgOimgeWFiOWIm+W7uuS4gOS4qiBTaXplIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxyXG4gKiBAbWV0aG9kIHRyYW5zZm9ybVNpemVcclxuICogQHN0YXRpY1xyXG4gKiBAcGFyYW0ge1NpemV9IG91dCBUaGUgb3V0cHV0IHBvaW50IHRvIHN0b3JlIHRoZSByZXN1bHRcclxuICogQHBhcmFtIHtTaXplfSBzaXplXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSB0XHJcbiAqIEByZXR1cm4ge1NpemV9XHJcbiAqL1xyXG5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtU2l6ZSA9IGZ1bmN0aW9uIChvdXQsIHNpemUsIHQpIHtcclxuICAgIG91dC53aWR0aCA9IHQuYSAqIHNpemUud2lkdGggKyB0LmMgKiBzaXplLmhlaWdodDtcclxuICAgIG91dC5oZWlnaHQgPSB0LmIgKiBzaXplLndpZHRoICsgdC5kICogc2l6ZS5oZWlnaHQ7XHJcbiAgICByZXR1cm4gb3V0O1xyXG59O1xyXG5cclxuLyoqXHJcbiAqICEjZW4gQXBwbHkgdGhlIGFmZmluZSB0cmFuc2Zvcm1hdGlvbiBvbiBhIHJlY3QuXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgUmVjdCBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXHJcbiAqICEjemgg5bqU55So5Lu/5bCE5Y+Y5o2i55+p6Zi15YiwIFJlY3Qg5LiK44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65LiA5LiqIFJlY3Qg5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXHJcbiAqIEBtZXRob2QgdHJhbnNmb3JtUmVjdFxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7UmVjdH0gb3V0XHJcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gYW5BZmZpbmVUcmFuc2Zvcm1cclxuICogQHJldHVybiB7UmVjdH1cclxuICovXHJcbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1SZWN0ID0gZnVuY3Rpb24ob3V0LCByZWN0LCB0KXtcclxuICAgIHZhciBvbCA9IHJlY3QueDtcclxuICAgIHZhciBvYiA9IHJlY3QueTtcclxuICAgIHZhciBvciA9IG9sICsgcmVjdC53aWR0aDtcclxuICAgIHZhciBvdCA9IG9iICsgcmVjdC5oZWlnaHQ7XHJcbiAgICB2YXIgbGJ4ID0gdC5hICogb2wgKyB0LmMgKiBvYiArIHQudHg7XHJcbiAgICB2YXIgbGJ5ID0gdC5iICogb2wgKyB0LmQgKiBvYiArIHQudHk7XHJcbiAgICB2YXIgcmJ4ID0gdC5hICogb3IgKyB0LmMgKiBvYiArIHQudHg7XHJcbiAgICB2YXIgcmJ5ID0gdC5iICogb3IgKyB0LmQgKiBvYiArIHQudHk7XHJcbiAgICB2YXIgbHR4ID0gdC5hICogb2wgKyB0LmMgKiBvdCArIHQudHg7XHJcbiAgICB2YXIgbHR5ID0gdC5iICogb2wgKyB0LmQgKiBvdCArIHQudHk7XHJcbiAgICB2YXIgcnR4ID0gdC5hICogb3IgKyB0LmMgKiBvdCArIHQudHg7XHJcbiAgICB2YXIgcnR5ID0gdC5iICogb3IgKyB0LmQgKiBvdCArIHQudHk7XHJcblxyXG4gICAgdmFyIG1pblggPSBNYXRoLm1pbihsYngsIHJieCwgbHR4LCBydHgpO1xyXG4gICAgdmFyIG1heFggPSBNYXRoLm1heChsYngsIHJieCwgbHR4LCBydHgpO1xyXG4gICAgdmFyIG1pblkgPSBNYXRoLm1pbihsYnksIHJieSwgbHR5LCBydHkpO1xyXG4gICAgdmFyIG1heFkgPSBNYXRoLm1heChsYnksIHJieSwgbHR5LCBydHkpO1xyXG5cclxuICAgIG91dC54ID0gbWluWDtcclxuICAgIG91dC55ID0gbWluWTtcclxuICAgIG91dC53aWR0aCA9IG1heFggLSBtaW5YO1xyXG4gICAgb3V0LmhlaWdodCA9IG1heFkgLSBtaW5ZO1xyXG4gICAgcmV0dXJuIG91dDtcclxufTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuIEFwcGx5IHRoZSBhZmZpbmUgdHJhbnNmb3JtYXRpb24gb24gYSByZWN0LCBhbmQgdHJ1bnMgdG8gYW4gT3JpZW50ZWQgQm91bmRpbmcgQm94LlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IHZlY3RvcnMgYnkgeW91cnNlbGYgYW5kIG1hbmFnZSB0aGVpciBtZW1vcnkuXHJcbiAqICEjemgg5bqU55So5Lu/5bCE5Y+Y5o2i55+p6Zi15YiwIFJlY3Qg5LiKLCDlubbovazmjaLkuLrmnInlkJHljIXlm7Tnm5LjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7rljIXlm7Tnm5LnmoTlm5vkuKogVmVjdG9yIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuWJjeWbm+S4quWPguaVsOS8oOWFpeWHveaVsOOAglxyXG4gKiBAbWV0aG9kIHRyYW5zZm9ybU9iYlxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7VmVjMn0gb3V0X2JsXHJcbiAqIEBwYXJhbSB7VmVjMn0gb3V0X3RsXHJcbiAqIEBwYXJhbSB7VmVjMn0gb3V0X3RyXHJcbiAqIEBwYXJhbSB7VmVjMn0gb3V0X2JyXHJcbiAqIEBwYXJhbSB7UmVjdH0gcmVjdFxyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gYW5BZmZpbmVUcmFuc2Zvcm1cclxuICovXHJcbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1PYmIgPSBmdW5jdGlvbiAob3V0X2JsLCBvdXRfdGwsIG91dF90ciwgb3V0X2JyLCByZWN0LCBhbkFmZmluZVRyYW5zZm9ybSkge1xyXG4gICAgdmFyIHggPSByZWN0Lng7XHJcbiAgICB2YXIgeSA9IHJlY3QueTtcclxuICAgIHZhciB3aWR0aCA9IHJlY3Qud2lkdGg7XHJcbiAgICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XHJcblxyXG4gICAgdmFyIHR4ID0gYW5BZmZpbmVUcmFuc2Zvcm0uYSAqIHggKyBhbkFmZmluZVRyYW5zZm9ybS5jICogeSArIGFuQWZmaW5lVHJhbnNmb3JtLnR4O1xyXG4gICAgdmFyIHR5ID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHggKyBhbkFmZmluZVRyYW5zZm9ybS5kICogeSArIGFuQWZmaW5lVHJhbnNmb3JtLnR5O1xyXG4gICAgdmFyIHhhID0gYW5BZmZpbmVUcmFuc2Zvcm0uYSAqIHdpZHRoO1xyXG4gICAgdmFyIHhiID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHdpZHRoO1xyXG4gICAgdmFyIHljID0gYW5BZmZpbmVUcmFuc2Zvcm0uYyAqIGhlaWdodDtcclxuICAgIHZhciB5ZCA9IGFuQWZmaW5lVHJhbnNmb3JtLmQgKiBoZWlnaHQ7XHJcblxyXG4gICAgb3V0X3RsLnggPSB0eDtcclxuICAgIG91dF90bC55ID0gdHk7XHJcbiAgICBvdXRfdHIueCA9IHhhICsgdHg7XHJcbiAgICBvdXRfdHIueSA9IHhiICsgdHk7XHJcbiAgICBvdXRfYmwueCA9IHljICsgdHg7XHJcbiAgICBvdXRfYmwueSA9IHlkICsgdHk7XHJcbiAgICBvdXRfYnIueCA9IHhhICsgeWMgKyB0eDtcclxuICAgIG91dF9ici55ID0geGIgKyB5ZCArIHR5O1xyXG59O1xyXG5cclxuY2MuQWZmaW5lVHJhbnNmb3JtID0gbW9kdWxlLmV4cG9ydHMgPSBBZmZpbmVUcmFuc2Zvcm07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMDgtMjAxMCBSaWNhcmRvIFF1ZXNhZGFcclxuIENvcHlyaWdodCAoYykgMjAxMS0yMDEyIGNvY29zMmQteC5vcmdcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHA6Ly93d3cuY29jb3MyZC14Lm9yZ1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcclxuIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcclxuIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcclxuIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xyXG4gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcclxuXHJcbiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxyXG4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG4vKipcclxuICogISNlblxyXG4gKiBBZmZpbmVUcmFuc2Zvcm0gY2xhc3MgcmVwcmVzZW50IGFuIGFmZmluZSB0cmFuc2Zvcm0gbWF0cml4LiBJdCdzIGNvbXBvc2VkIGJhc2ljYWxseSBieSB0cmFuc2xhdGlvbiwgcm90YXRpb24sIHNjYWxlIHRyYW5zZm9ybWF0aW9ucy48YnIvPlxyXG4gKiAhI3poXHJcbiAqIEFmZmluZVRyYW5zZm9ybSDnsbvku6PooajkuIDkuKrku7/lsITlj5jmjaLnn6npmLXjgILlroPln7rmnKzkuIrmmK/nlLHlubPnp7vml4vovazvvIznvKnmlL7ovazlj5jmiYDnu4TmiJDjgII8YnIvPlxyXG4gKiBAY2xhc3MgQWZmaW5lVHJhbnNmb3JtXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKiBAcGFyYW0ge051bWJlcn0gYVxyXG4gKiBAcGFyYW0ge051bWJlcn0gYlxyXG4gKiBAcGFyYW0ge051bWJlcn0gY1xyXG4gKiBAcGFyYW0ge051bWJlcn0gZFxyXG4gKiBAcGFyYW0ge051bWJlcn0gdHhcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR5XHJcbiAqIEBzZWUgQWZmaW5lVHJhbnNmb3JtLmNyZWF0ZVxyXG4gKi9cbnZhciBBZmZpbmVUcmFuc2Zvcm0gPSBmdW5jdGlvbiBBZmZpbmVUcmFuc2Zvcm0oYSwgYiwgYywgZCwgdHgsIHR5KSB7XG4gICAgdGhpcy5hID0gYTtcbiAgICB0aGlzLmIgPSBiO1xuICAgIHRoaXMuYyA9IGM7XG4gICAgdGhpcy5kID0gZDtcbiAgICB0aGlzLnR4ID0gdHg7XG4gICAgdGhpcy50eSA9IHR5O1xufTtcblxuLyoqXHJcbiAqICEjZW4gQ3JlYXRlIGEgQWZmaW5lVHJhbnNmb3JtIG9iamVjdCB3aXRoIGFsbCBjb250ZW50cyBpbiB0aGUgbWF0cml4LlxyXG4gKiAhI3poIOeUqOWcqOefqemYteS4reeahOaJgOacieWGheWuueWIm+W7uuS4gOS4qiBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh44CCXHJcbiAqIEBtZXRob2QgY3JlYXRlXHJcbiAqIEBzdGF0aWNcclxuICogQHBhcmFtIHtOdW1iZXJ9IGFcclxuICogQHBhcmFtIHtOdW1iZXJ9IGJcclxuICogQHBhcmFtIHtOdW1iZXJ9IGNcclxuICogQHBhcmFtIHtOdW1iZXJ9IGRcclxuICogQHBhcmFtIHtOdW1iZXJ9IHR4XHJcbiAqIEBwYXJhbSB7TnVtYmVyfSB0eVxyXG4gKiBAcmV0dXJuIHtBZmZpbmVUcmFuc2Zvcm19XHJcbiAqL1xuQWZmaW5lVHJhbnNmb3JtLmNyZWF0ZSA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkLCB0eCwgdHkpIHtcbiAgICByZXR1cm4geyBhOiBhLCBiOiBiLCBjOiBjLCBkOiBkLCB0eDogdHgsIHR5OiB0eSB9O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ3JlYXRlIGEgaWRlbnRpdHkgdHJhbnNmb3JtYXRpb24gbWF0cml4OiA8YnIvPlxyXG4gKiBbIDEsIDAsIDAsIDxici8+XHJcbiAqICAgMCwgMSwgMCBdXHJcbiAqICEjemhcclxuICog5Y2V5L2N55+p6Zi177yaPGJyLz5cclxuICogWyAxLCAwLCAwLCA8YnIvPlxyXG4gKiAgIDAsIDEsIDAgXVxyXG4gKlxyXG4gKiBAbWV0aG9kIGlkZW50aXR5XHJcbiAqIEBzdGF0aWNcclxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfVxyXG4gKi9cbkFmZmluZVRyYW5zZm9ybS5pZGVudGl0eSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4geyBhOiAxLjAsIGI6IDAuMCwgYzogMC4wLCBkOiAxLjAsIHR4OiAwLjAsIHR5OiAwLjAgfTtcbn07XG5cbi8qKlxyXG4gKiAhI2VuIENsb25lIGEgQWZmaW5lVHJhbnNmb3JtIG9iamVjdCBmcm9tIHRoZSBzcGVjaWZpZWQgdHJhbnNmb3JtLlxyXG4gKiAhI3poIOWFi+mahuaMh+WumueahCBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh44CCXHJcbiAqIEBtZXRob2QgY2xvbmVcclxuICogQHN0YXRpY1xyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdFxyXG4gKiBAcmV0dXJuIHtBZmZpbmVUcmFuc2Zvcm19XHJcbiAqL1xuQWZmaW5lVHJhbnNmb3JtLmNsb25lID0gZnVuY3Rpb24gKHQpIHtcbiAgICByZXR1cm4geyBhOiB0LmEsIGI6IHQuYiwgYzogdC5jLCBkOiB0LmQsIHR4OiB0LnR4LCB0eTogdC50eSB9O1xufTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogQ29uY2F0ZW5hdGUgYSB0cmFuc2Zvcm0gbWF0cml4IHRvIGFub3RoZXJcclxuICogVGhlIHJlc3VsdHMgYXJlIHJlZmxlY3RlZCBpbiB0aGUgb3V0IGFmZmluZSB0cmFuc2Zvcm1cclxuICogb3V0ID0gdDEgKiB0MlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IGFmZmluZSB0cmFuc2Zvcm0gYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxyXG4gKiAhI3poXHJcbiAqIOaLvOaOpeS4pOS4quefqemYte+8jOWwhue7k+aenOS/neWtmOWIsCBvdXQg55+p6Zi144CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu6IEFmZmluZVRyYW5zZm9ybSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcclxuICogb3V0ID0gdDEgKiB0MlxyXG4gKiBAbWV0aG9kIGNvbmNhdFxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBvdXQgT3V0IG9iamVjdCB0byBzdG9yZSB0aGUgY29uY2F0IHJlc3VsdFxyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdDEgVGhlIGZpcnN0IHRyYW5zZm9ybSBvYmplY3QuXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSB0MiBUaGUgdHJhbnNmb3JtIG9iamVjdCB0byBjb25jYXRlbmF0ZS5cclxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfSBPdXQgb2JqZWN0IHdpdGggdGhlIHJlc3VsdCBvZiBjb25jYXRlbmF0aW9uLlxyXG4gKi9cbkFmZmluZVRyYW5zZm9ybS5jb25jYXQgPSBmdW5jdGlvbiAob3V0LCB0MSwgdDIpIHtcbiAgICB2YXIgYSA9IHQxLmEsXG4gICAgICAgIGIgPSB0MS5iLFxuICAgICAgICBjID0gdDEuYyxcbiAgICAgICAgZCA9IHQxLmQsXG4gICAgICAgIHR4ID0gdDEudHgsXG4gICAgICAgIHR5ID0gdDEudHk7XG4gICAgb3V0LmEgPSBhICogdDIuYSArIGIgKiB0Mi5jO1xuICAgIG91dC5iID0gYSAqIHQyLmIgKyBiICogdDIuZDtcbiAgICBvdXQuYyA9IGMgKiB0Mi5hICsgZCAqIHQyLmM7XG4gICAgb3V0LmQgPSBjICogdDIuYiArIGQgKiB0Mi5kO1xuICAgIG91dC50eCA9IHR4ICogdDIuYSArIHR5ICogdDIuYyArIHQyLnR4O1xuICAgIG91dC50eSA9IHR4ICogdDIuYiArIHR5ICogdDIuZCArIHQyLnR5O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcclxuICogISNlbiBHZXQgdGhlIGludmVydCB0cmFuc2Zvcm0gb2YgYW4gQWZmaW5lVHJhbnNmb3JtIG9iamVjdC5cclxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBhZmZpbmUgdHJhbnNmb3JtIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cclxuICogISN6aCDmsYLpgIbnn6npmLXjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7ogQWZmaW5lVHJhbnNmb3JtIOWvueixoeeUqOadpeWtmOWCqOe7k+aenO+8jOW5tuS9nOS4uuesrOS4gOS4quWPguaVsOS8oOWFpeWHveaVsOOAglxyXG4gKiBAbWV0aG9kIGludmVydFxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBvdXRcclxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IHRcclxuICogQHJldHVybiB7QWZmaW5lVHJhbnNmb3JtfSBPdXQgb2JqZWN0IHdpdGggaW52ZXJ0ZWQgcmVzdWx0LlxyXG4gKi9cbkFmZmluZVRyYW5zZm9ybS5pbnZlcnQgPSBmdW5jdGlvbiAob3V0LCB0KSB7XG4gICAgdmFyIGEgPSB0LmEsXG4gICAgICAgIGIgPSB0LmIsXG4gICAgICAgIGMgPSB0LmMsXG4gICAgICAgIGQgPSB0LmQ7XG4gICAgdmFyIGRldGVybWluYW50ID0gMSAvIChhICogZCAtIGIgKiBjKTtcbiAgICB2YXIgdHggPSB0LnR4LFxuICAgICAgICB0eSA9IHQudHk7XG4gICAgb3V0LmEgPSBkZXRlcm1pbmFudCAqIGQ7XG4gICAgb3V0LmIgPSAtZGV0ZXJtaW5hbnQgKiBiO1xuICAgIG91dC5jID0gLWRldGVybWluYW50ICogYztcbiAgICBvdXQuZCA9IGRldGVybWluYW50ICogYTtcbiAgICBvdXQudHggPSBkZXRlcm1pbmFudCAqIChjICogdHkgLSBkICogdHgpO1xuICAgIG91dC50eSA9IGRldGVybWluYW50ICogKGIgKiB0eCAtIGEgKiB0eSk7XG4gICAgcmV0dXJuIG91dDtcbn07XG5cbi8qKlxyXG4gKiAhI2VuIEdldCBhbiBBZmZpbmVUcmFuc2Zvcm0gb2JqZWN0IGZyb20gYSBnaXZlbiBtYXRyaXggNHg0LlxyXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIG1lbW9yeSBmcmVlLCB5b3Ugc2hvdWxkIGNyZWF0ZSB0aGUgb3V0cHV0IGFmZmluZSB0cmFuc2Zvcm0gYnkgeW91cnNlbGYgYW5kIG1hbmFnZSBpdHMgbWVtb3J5LlxyXG4gKiAhI3poIOS7juS4gOS4qiA0eDQgTWF0cml4IOiOt+WPliBBZmZpbmVUcmFuc2Zvcm0g5a+56LGh44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu6IEFmZmluZVRyYW5zZm9ybSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcclxuICogQG1ldGhvZCBpbnZlcnRcclxuICogQHN0YXRpY1xyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gb3V0XHJcbiAqIEBwYXJhbSB7TWF0NH0gbWF0XHJcbiAqIEByZXR1cm4ge0FmZmluZVRyYW5zZm9ybX0gT3V0IG9iamVjdCB3aXRoIGludmVydGVkIHJlc3VsdC5cclxuICovXG5BZmZpbmVUcmFuc2Zvcm0uZnJvbU1hdDQgPSBmdW5jdGlvbiAob3V0LCBtYXQpIHtcbiAgICBvdXQuYSA9IG1hdC5tMDA7XG4gICAgb3V0LmIgPSBtYXQubTAxO1xuICAgIG91dC5jID0gbWF0Lm0wNDtcbiAgICBvdXQuZCA9IG1hdC5tMDU7XG4gICAgb3V0LnR4ID0gbWF0Lm0xMjtcbiAgICBvdXQudHkgPSBtYXQubTEzO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcclxuICogISNlbiBBcHBseSB0aGUgYWZmaW5lIHRyYW5zZm9ybWF0aW9uIG9uIGEgcG9pbnQuXHJcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbWVtb3J5IGZyZWUsIHlvdSBzaG91bGQgY3JlYXRlIHRoZSBvdXRwdXQgVmVjMiBieSB5b3Vyc2VsZiBhbmQgbWFuYWdlIGl0cyBtZW1vcnkuXHJcbiAqICEjemgg5a+55LiA5Liq54K55bqU55So55+p6Zi15Y+Y5o2i44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65LiA5LiqIFZlYzIg5a+56LGh55So5p2l5a2Y5YKo57uT5p6c77yM5bm25L2c5Li656ys5LiA5Liq5Y+C5pWw5Lyg5YWl5Ye95pWw44CCXHJcbiAqIEBtZXRob2QgdHJhbnNmb3JtVmVjMlxyXG4gKiBAc3RhdGljXHJcbiAqIEBwYXJhbSB7VmVjMn0gb3V0IFRoZSBvdXRwdXQgcG9pbnQgdG8gc3RvcmUgdGhlIHJlc3VsdFxyXG4gKiBAcGFyYW0ge1ZlYzJ8TnVtYmVyfSBwb2ludCBQb2ludCB0byBhcHBseSB0cmFuc2Zvcm0gb3IgeC5cclxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm18TnVtYmVyfSB0cmFuc09yWSB0cmFuc2Zvcm0gbWF0cml4IG9yIHkuXHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBbdF0gdHJhbnNmb3JtIG1hdHJpeC5cclxuICogQHJldHVybiB7VmVjMn1cclxuICovXG5BZmZpbmVUcmFuc2Zvcm0udHJhbnNmb3JtVmVjMiA9IGZ1bmN0aW9uIChvdXQsIHBvaW50LCB0cmFuc09yWSwgdCkge1xuICAgIHZhciB4LCB5O1xuICAgIGlmICh0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdCA9IHRyYW5zT3JZO1xuICAgICAgICB4ID0gcG9pbnQueDtcbiAgICAgICAgeSA9IHBvaW50Lnk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgeCA9IHBvaW50O1xuICAgICAgICB5ID0gdHJhbnNPclk7XG4gICAgfVxuICAgIG91dC54ID0gdC5hICogeCArIHQuYyAqIHkgKyB0LnR4O1xuICAgIG91dC55ID0gdC5iICogeCArIHQuZCAqIHkgKyB0LnR5O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcclxuICogISNlbiBBcHBseSB0aGUgYWZmaW5lIHRyYW5zZm9ybWF0aW9uIG9uIGEgc2l6ZS5cclxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBTaXplIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cclxuICogISN6aCDlupTnlKjku7/lsITlj5jmjaLnn6npmLXliLAgU2l6ZSDkuIrjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7rkuIDkuKogU2l6ZSDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcclxuICogQG1ldGhvZCB0cmFuc2Zvcm1TaXplXHJcbiAqIEBzdGF0aWNcclxuICogQHBhcmFtIHtTaXplfSBvdXQgVGhlIG91dHB1dCBwb2ludCB0byBzdG9yZSB0aGUgcmVzdWx0XHJcbiAqIEBwYXJhbSB7U2l6ZX0gc2l6ZVxyXG4gKiBAcGFyYW0ge0FmZmluZVRyYW5zZm9ybX0gdFxyXG4gKiBAcmV0dXJuIHtTaXplfVxyXG4gKi9cbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1TaXplID0gZnVuY3Rpb24gKG91dCwgc2l6ZSwgdCkge1xuICAgIG91dC53aWR0aCA9IHQuYSAqIHNpemUud2lkdGggKyB0LmMgKiBzaXplLmhlaWdodDtcbiAgICBvdXQuaGVpZ2h0ID0gdC5iICogc2l6ZS53aWR0aCArIHQuZCAqIHNpemUuaGVpZ2h0O1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcclxuICogISNlbiBBcHBseSB0aGUgYWZmaW5lIHRyYW5zZm9ybWF0aW9uIG9uIGEgcmVjdC5cclxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCBSZWN0IGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgaXRzIG1lbW9yeS5cclxuICogISN6aCDlupTnlKjku7/lsITlj5jmjaLnn6npmLXliLAgUmVjdCDkuIrjgILov5nkuKrlh73mlbDkuI3liJvlu7rku7vkvZXlhoXlrZjvvIzkvaDpnIDopoHlhYjliJvlu7rkuIDkuKogUmVjdCDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrnrKzkuIDkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcclxuICogQG1ldGhvZCB0cmFuc2Zvcm1SZWN0XHJcbiAqIEBzdGF0aWNcclxuICogQHBhcmFtIHtSZWN0fSBvdXRcclxuICogQHBhcmFtIHtSZWN0fSByZWN0XHJcbiAqIEBwYXJhbSB7QWZmaW5lVHJhbnNmb3JtfSBhbkFmZmluZVRyYW5zZm9ybVxyXG4gKiBAcmV0dXJuIHtSZWN0fVxyXG4gKi9cbkFmZmluZVRyYW5zZm9ybS50cmFuc2Zvcm1SZWN0ID0gZnVuY3Rpb24gKG91dCwgcmVjdCwgdCkge1xuICAgIHZhciBvbCA9IHJlY3QueDtcbiAgICB2YXIgb2IgPSByZWN0Lnk7XG4gICAgdmFyIG9yID0gb2wgKyByZWN0LndpZHRoO1xuICAgIHZhciBvdCA9IG9iICsgcmVjdC5oZWlnaHQ7XG4gICAgdmFyIGxieCA9IHQuYSAqIG9sICsgdC5jICogb2IgKyB0LnR4O1xuICAgIHZhciBsYnkgPSB0LmIgKiBvbCArIHQuZCAqIG9iICsgdC50eTtcbiAgICB2YXIgcmJ4ID0gdC5hICogb3IgKyB0LmMgKiBvYiArIHQudHg7XG4gICAgdmFyIHJieSA9IHQuYiAqIG9yICsgdC5kICogb2IgKyB0LnR5O1xuICAgIHZhciBsdHggPSB0LmEgKiBvbCArIHQuYyAqIG90ICsgdC50eDtcbiAgICB2YXIgbHR5ID0gdC5iICogb2wgKyB0LmQgKiBvdCArIHQudHk7XG4gICAgdmFyIHJ0eCA9IHQuYSAqIG9yICsgdC5jICogb3QgKyB0LnR4O1xuICAgIHZhciBydHkgPSB0LmIgKiBvciArIHQuZCAqIG90ICsgdC50eTtcblxuICAgIHZhciBtaW5YID0gTWF0aC5taW4obGJ4LCByYngsIGx0eCwgcnR4KTtcbiAgICB2YXIgbWF4WCA9IE1hdGgubWF4KGxieCwgcmJ4LCBsdHgsIHJ0eCk7XG4gICAgdmFyIG1pblkgPSBNYXRoLm1pbihsYnksIHJieSwgbHR5LCBydHkpO1xuICAgIHZhciBtYXhZID0gTWF0aC5tYXgobGJ5LCByYnksIGx0eSwgcnR5KTtcblxuICAgIG91dC54ID0gbWluWDtcbiAgICBvdXQueSA9IG1pblk7XG4gICAgb3V0LndpZHRoID0gbWF4WCAtIG1pblg7XG4gICAgb3V0LmhlaWdodCA9IG1heFkgLSBtaW5ZO1xuICAgIHJldHVybiBvdXQ7XG59O1xuXG4vKipcclxuICogISNlbiBBcHBseSB0aGUgYWZmaW5lIHRyYW5zZm9ybWF0aW9uIG9uIGEgcmVjdCwgYW5kIHRydW5zIHRvIGFuIE9yaWVudGVkIEJvdW5kaW5nIEJveC5cclxuICogVGhpcyBmdW5jdGlvbiBpcyBtZW1vcnkgZnJlZSwgeW91IHNob3VsZCBjcmVhdGUgdGhlIG91dHB1dCB2ZWN0b3JzIGJ5IHlvdXJzZWxmIGFuZCBtYW5hZ2UgdGhlaXIgbWVtb3J5LlxyXG4gKiAhI3poIOW6lOeUqOS7v+WwhOWPmOaNouefqemYteWIsCBSZWN0IOS4iiwg5bm26L2s5o2i5Li65pyJ5ZCR5YyF5Zu055uS44CC6L+Z5Liq5Ye95pWw5LiN5Yib5bu65Lu75L2V5YaF5a2Y77yM5L2g6ZyA6KaB5YWI5Yib5bu65YyF5Zu055uS55qE5Zub5LiqIFZlY3RvciDlr7nosaHnlKjmnaXlrZjlgqjnu5PmnpzvvIzlubbkvZzkuLrliY3lm5vkuKrlj4LmlbDkvKDlhaXlh73mlbDjgIJcclxuICogQG1ldGhvZCB0cmFuc2Zvcm1PYmJcclxuICogQHN0YXRpY1xyXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF9ibFxyXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF90bFxyXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF90clxyXG4gKiBAcGFyYW0ge1ZlYzJ9IG91dF9iclxyXG4gKiBAcGFyYW0ge1JlY3R9IHJlY3RcclxuICogQHBhcmFtIHtBZmZpbmVUcmFuc2Zvcm19IGFuQWZmaW5lVHJhbnNmb3JtXHJcbiAqL1xuQWZmaW5lVHJhbnNmb3JtLnRyYW5zZm9ybU9iYiA9IGZ1bmN0aW9uIChvdXRfYmwsIG91dF90bCwgb3V0X3RyLCBvdXRfYnIsIHJlY3QsIGFuQWZmaW5lVHJhbnNmb3JtKSB7XG4gICAgdmFyIHggPSByZWN0Lng7XG4gICAgdmFyIHkgPSByZWN0Lnk7XG4gICAgdmFyIHdpZHRoID0gcmVjdC53aWR0aDtcbiAgICB2YXIgaGVpZ2h0ID0gcmVjdC5oZWlnaHQ7XG5cbiAgICB2YXIgdHggPSBhbkFmZmluZVRyYW5zZm9ybS5hICogeCArIGFuQWZmaW5lVHJhbnNmb3JtLmMgKiB5ICsgYW5BZmZpbmVUcmFuc2Zvcm0udHg7XG4gICAgdmFyIHR5ID0gYW5BZmZpbmVUcmFuc2Zvcm0uYiAqIHggKyBhbkFmZmluZVRyYW5zZm9ybS5kICogeSArIGFuQWZmaW5lVHJhbnNmb3JtLnR5O1xuICAgIHZhciB4YSA9IGFuQWZmaW5lVHJhbnNmb3JtLmEgKiB3aWR0aDtcbiAgICB2YXIgeGIgPSBhbkFmZmluZVRyYW5zZm9ybS5iICogd2lkdGg7XG4gICAgdmFyIHljID0gYW5BZmZpbmVUcmFuc2Zvcm0uYyAqIGhlaWdodDtcbiAgICB2YXIgeWQgPSBhbkFmZmluZVRyYW5zZm9ybS5kICogaGVpZ2h0O1xuXG4gICAgb3V0X3RsLnggPSB0eDtcbiAgICBvdXRfdGwueSA9IHR5O1xuICAgIG91dF90ci54ID0geGEgKyB0eDtcbiAgICBvdXRfdHIueSA9IHhiICsgdHk7XG4gICAgb3V0X2JsLnggPSB5YyArIHR4O1xuICAgIG91dF9ibC55ID0geWQgKyB0eTtcbiAgICBvdXRfYnIueCA9IHhhICsgeWMgKyB0eDtcbiAgICBvdXRfYnIueSA9IHhiICsgeWQgKyB0eTtcbn07XG5cbmNjLkFmZmluZVRyYW5zZm9ybSA9IG1vZHVsZS5leHBvcnRzID0gQWZmaW5lVHJhbnNmb3JtO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GbVptbHVaUzEwY21GdWMyWnZjbTB1YW5NaVhTd2libUZ0WlhNaU9sc2lRV1ptYVc1bFZISmhibk5tYjNKdElpd2lZU0lzSW1JaUxDSmpJaXdpWkNJc0luUjRJaXdpZEhraUxDSmpjbVZoZEdVaUxDSnBaR1Z1ZEdsMGVTSXNJbU5zYjI1bElpd2lkQ0lzSW1OdmJtTmhkQ0lzSW05MWRDSXNJblF4SWl3aWRESWlMQ0pwYm5abGNuUWlMQ0prWlhSbGNtMXBibUZ1ZENJc0ltWnliMjFOWVhRMElpd2liV0YwSWl3aWJUQXdJaXdpYlRBeElpd2liVEEwSWl3aWJUQTFJaXdpYlRFeUlpd2liVEV6SWl3aWRISmhibk5tYjNKdFZtVmpNaUlzSW5CdmFXNTBJaXdpZEhKaGJuTlBjbGtpTENKNElpd2llU0lzSW5WdVpHVm1hVzVsWkNJc0luUnlZVzV6Wm05eWJWTnBlbVVpTENKemFYcGxJaXdpZDJsa2RHZ2lMQ0pvWldsbmFIUWlMQ0owY21GdWMyWnZjbTFTWldOMElpd2ljbVZqZENJc0ltOXNJaXdpYjJJaUxDSnZjaUlzSW05MElpd2liR0o0SWl3aWJHSjVJaXdpY21KNElpd2ljbUo1SWl3aWJIUjRJaXdpYkhSNUlpd2ljblI0SWl3aWNuUjVJaXdpYldsdVdDSXNJazFoZEdnaUxDSnRhVzRpTENKdFlYaFlJaXdpYldGNElpd2liV2x1V1NJc0ltMWhlRmtpTENKMGNtRnVjMlp2Y20xUFltSWlMQ0p2ZFhSZlltd2lMQ0p2ZFhSZmRHd2lMQ0p2ZFhSZmRISWlMQ0p2ZFhSZlluSWlMQ0poYmtGbVptbHVaVlJ5WVc1elptOXliU0lzSW5oaElpd2llR0lpTENKNVl5SXNJbmxrSWl3aVkyTWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3UVVFeVFrRTdPenM3T3pzN096czdPenM3T3p0QlFXVkJMRWxCUVVsQkxHdENRVUZyUWl4VFFVRnNRa0VzWlVGQmEwSXNRMEZCVlVNc1EwRkJWaXhGUVVGaFF5eERRVUZpTEVWQlFXZENReXhEUVVGb1FpeEZRVUZ0UWtNc1EwRkJia0lzUlVGQmMwSkRMRVZCUVhSQ0xFVkJRVEJDUXl4RlFVRXhRaXhGUVVFNFFqdEJRVU5vUkN4VFFVRkxUQ3hEUVVGTUxFZEJRVk5CTEVOQlFWUTdRVUZEUVN4VFFVRkxReXhEUVVGTUxFZEJRVk5CTEVOQlFWUTdRVUZEUVN4VFFVRkxReXhEUVVGTUxFZEJRVk5CTEVOQlFWUTdRVUZEUVN4VFFVRkxReXhEUVVGTUxFZEJRVk5CTEVOQlFWUTdRVUZEUVN4VFFVRkxReXhGUVVGTUxFZEJRVlZCTEVWQlFWWTdRVUZEUVN4VFFVRkxReXhGUVVGTUxFZEJRVlZCTEVWQlFWWTdRVUZEU0N4RFFWQkVPenRCUVZOQk96czdPenM3T3pzN096czdPMEZCWVVGT0xHZENRVUZuUWs4c1RVRkJhRUlzUjBGQmVVSXNWVUZCVlU0c1EwRkJWaXhGUVVGaFF5eERRVUZpTEVWQlFXZENReXhEUVVGb1FpeEZRVUZ0UWtNc1EwRkJia0lzUlVGQmMwSkRMRVZCUVhSQ0xFVkJRVEJDUXl4RlFVRXhRaXhGUVVFNFFqdEJRVU51UkN4WFFVRlBMRVZCUVVOTUxFZEJRVWRCTEVOQlFVb3NSVUZCVDBNc1IwRkJSMEVzUTBGQlZpeEZRVUZoUXl4SFFVRkhRU3hEUVVGb1FpeEZRVUZ0UWtNc1IwRkJSMEVzUTBGQmRFSXNSVUZCZVVKRExFbEJRVWxCTEVWQlFUZENMRVZCUVdsRFF5eEpRVUZKUVN4RlFVRnlReXhGUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096czdPenM3T3pzN096czdRVUZqUVU0c1owSkJRV2RDVVN4UlFVRm9RaXhIUVVFeVFpeFpRVUZaTzBGQlEyNURMRmRCUVU4c1JVRkJRMUFzUjBGQlJ5eEhRVUZLTEVWQlFWTkRMRWRCUVVjc1IwRkJXaXhGUVVGcFFrTXNSMEZCUnl4SFFVRndRaXhGUVVGNVFrTXNSMEZCUnl4SFFVRTFRaXhGUVVGcFEwTXNTVUZCU1N4SFFVRnlReXhGUVVFd1EwTXNTVUZCU1N4SFFVRTVReXhGUVVGUU8wRkJRMGdzUTBGR1JEczdRVUZKUVRzN096czdPenM3UVVGUlFVNHNaMEpCUVdkQ1V5eExRVUZvUWl4SFFVRjNRaXhWUVVGVlF5eERRVUZXTEVWQlFXRTdRVUZEYWtNc1YwRkJUeXhGUVVGRFZDeEhRVUZIVXl4RlFVRkZWQ3hEUVVGT0xFVkJRVk5ETEVkQlFVZFJMRVZCUVVWU0xFTkJRV1FzUlVGQmFVSkRMRWRCUVVkUExFVkJRVVZRTEVOQlFYUkNMRVZCUVhsQ1F5eEhRVUZIVFN4RlFVRkZUaXhEUVVFNVFpeEZRVUZwUTBNc1NVRkJTVXNzUlVGQlJVd3NSVUZCZGtNc1JVRkJNa05ETEVsQlFVbEpMRVZCUVVWS0xFVkJRV3BFTEVWQlFWQTdRVUZEU0N4RFFVWkVPenRCUVVsQk96czdPenM3T3pzN096czdPenM3TzBGQlowSkJUaXhuUWtGQlowSlhMRTFCUVdoQ0xFZEJRWGxDTEZWQlFWVkRMRWRCUVZZc1JVRkJaVU1zUlVGQlppeEZRVUZ0UWtNc1JVRkJia0lzUlVGQmRVSTdRVUZETlVNc1VVRkJTV0lzU1VGQlNWa3NSMEZCUjFvc1EwRkJXRHRCUVVGQkxGRkJRV05ETEVsQlFVbFhMRWRCUVVkWUxFTkJRWEpDTzBGQlFVRXNVVUZCZDBKRExFbEJRVWxWTEVkQlFVZFdMRU5CUVM5Q08wRkJRVUVzVVVGQmEwTkRMRWxCUVVsVExFZEJRVWRVTEVOQlFYcERPMEZCUVVFc1VVRkJORU5ETEV0QlFVdFJMRWRCUVVkU0xFVkJRWEJFTzBGQlFVRXNVVUZCZDBSRExFdEJRVXRQTEVkQlFVZFFMRVZCUVdoRk8wRkJRMEZOTEZGQlFVbFlMRU5CUVVvc1IwRkJVVUVzU1VGQlNXRXNSMEZCUjJJc1EwRkJVQ3hIUVVGWFF5eEpRVUZKV1N4SFFVRkhXQ3hEUVVFeFFqdEJRVU5CVXl4UlFVRkpWaXhEUVVGS0xFZEJRVkZFTEVsQlFVbGhMRWRCUVVkYUxFTkJRVkFzUjBGQlYwRXNTVUZCU1Zrc1IwRkJSMVlzUTBGQk1VSTdRVUZEUVZFc1VVRkJTVlFzUTBGQlNpeEhRVUZSUVN4SlFVRkpWeXhIUVVGSFlpeERRVUZRTEVkQlFWZEhMRWxCUVVsVkxFZEJRVWRZTEVOQlFURkNPMEZCUTBGVExGRkJRVWxTTEVOQlFVb3NSMEZCVVVRc1NVRkJTVmNzUjBGQlIxb3NRMEZCVUN4SFFVRlhSU3hKUVVGSlZTeEhRVUZIVml4RFFVRXhRanRCUVVOQlVTeFJRVUZKVUN4RlFVRktMRWRCUVZOQkxFdEJRVXRUTEVkQlFVZGlMRU5CUVZJc1IwRkJXVXNzUzBGQlMxRXNSMEZCUjFnc1EwRkJjRUlzUjBGQmQwSlhMRWRCUVVkVUxFVkJRWEJETzBGQlEwRlBMRkZCUVVsT0xFVkJRVW9zUjBGQlUwUXNTMEZCUzFNc1IwRkJSMW9zUTBGQlVpeEhRVUZaU1N4TFFVRkxVU3hIUVVGSFZpeERRVUZ3UWl4SFFVRjNRbFVzUjBGQlIxSXNSVUZCY0VNN1FVRkRRU3hYUVVGUFRTeEhRVUZRTzBGQlEwZ3NRMEZVUkRzN1FVRlhRVHM3T3pzN096czdPenRCUVZWQldpeG5Ra0ZCWjBKbExFMUJRV2hDTEVkQlFYbENMRlZCUVZWSUxFZEJRVllzUlVGQlpVWXNRMEZCWml4RlFVRnJRanRCUVVOMlF5eFJRVUZKVkN4SlFVRkpVeXhGUVVGRlZDeERRVUZXTzBGQlFVRXNVVUZCWVVNc1NVRkJTVkVzUlVGQlJWSXNRMEZCYmtJN1FVRkJRU3hSUVVGelFrTXNTVUZCU1U4c1JVRkJSVkFzUTBGQk5VSTdRVUZCUVN4UlFVRXJRa01zU1VGQlNVMHNSVUZCUlU0c1EwRkJja003UVVGRFFTeFJRVUZKV1N4alFVRmpMRXRCUVV0bUxFbEJRVWxITEVOQlFVb3NSMEZCVVVZc1NVRkJTVU1zUTBGQmFrSXNRMEZCYkVJN1FVRkRRU3hSUVVGSlJTeExRVUZMU3l4RlFVRkZUQ3hGUVVGWU8wRkJRVUVzVVVGQlpVTXNTMEZCUzBrc1JVRkJSVW9zUlVGQmRFSTdRVUZEUVUwc1VVRkJTVmdzUTBGQlNpeEhRVUZSWlN4alFVRmpXaXhEUVVGMFFqdEJRVU5CVVN4UlFVRkpWaXhEUVVGS0xFZEJRVkVzUTBGQlEyTXNWMEZCUkN4SFFVRmxaQ3hEUVVGMlFqdEJRVU5CVlN4UlFVRkpWQ3hEUVVGS0xFZEJRVkVzUTBGQlEyRXNWMEZCUkN4SFFVRmxZaXhEUVVGMlFqdEJRVU5CVXl4UlFVRkpVaXhEUVVGS0xFZEJRVkZaTEdOQlFXTm1MRU5CUVhSQ08wRkJRMEZYTEZGQlFVbFFMRVZCUVVvc1IwRkJVMWNzWlVGQlpXSXNTVUZCU1Vjc1JVRkJTaXhIUVVGVFJpeEpRVUZKUXl4RlFVRTFRaXhEUVVGVU8wRkJRMEZQTEZGQlFVbE9MRVZCUVVvc1IwRkJVMVVzWlVGQlpXUXNTVUZCU1Vjc1JVRkJTaXhIUVVGVFNpeEpRVUZKU3l4RlFVRTFRaXhEUVVGVU8wRkJRMEVzVjBGQlQwMHNSMEZCVUR0QlFVTklMRU5CV0VRN08wRkJZVUU3T3pzN096czdPenM3UVVGVlFWb3NaMEpCUVdkQ2FVSXNVVUZCYUVJc1IwRkJNa0lzVlVGQlZVd3NSMEZCVml4RlFVRmxUU3hIUVVGbUxFVkJRVzlDTzBGQlF6TkRUaXhSUVVGSldDeERRVUZLTEVkQlFWRnBRaXhKUVVGSlF5eEhRVUZhTzBGQlEwRlFMRkZCUVVsV0xFTkJRVW9zUjBGQlVXZENMRWxCUVVsRkxFZEJRVm83UVVGRFFWSXNVVUZCU1ZRc1EwRkJTaXhIUVVGUlpTeEpRVUZKUnl4SFFVRmFPMEZCUTBGVUxGRkJRVWxTTEVOQlFVb3NSMEZCVVdNc1NVRkJTVWtzUjBGQldqdEJRVU5CVml4UlFVRkpVQ3hGUVVGS0xFZEJRVk5oTEVsQlFVbExMRWRCUVdJN1FVRkRRVmdzVVVGQlNVNHNSVUZCU2l4SFFVRlRXU3hKUVVGSlRTeEhRVUZpTzBGQlEwRXNWMEZCVDFvc1IwRkJVRHRCUVVOSUxFTkJVa1E3TzBGQlZVRTdPenM3T3pzN096czdPenRCUVZsQldpeG5Ra0ZCWjBKNVFpeGhRVUZvUWl4SFFVRm5ReXhWUVVGVllpeEhRVUZXTEVWQlFXVmpMRXRCUVdZc1JVRkJjMEpETEZGQlFYUkNMRVZCUVdkRGFrSXNRMEZCYUVNc1JVRkJiVU03UVVGREwwUXNVVUZCU1d0Q0xFTkJRVW9zUlVGQlQwTXNRMEZCVUR0QlFVTkJMRkZCUVVsdVFpeE5RVUZOYjBJc1UwRkJWaXhGUVVGeFFqdEJRVU5xUW5CQ0xGbEJRVWxwUWl4UlFVRktPMEZCUTBGRExGbEJRVWxHTEUxQlFVMUZMRU5CUVZZN1FVRkRRVU1zV1VGQlNVZ3NUVUZCVFVjc1EwRkJWanRCUVVOSUxFdEJTa1FzVFVGSlR6dEJRVU5JUkN4WlFVRkpSaXhMUVVGS08wRkJRMEZITEZsQlFVbEdMRkZCUVVvN1FVRkRTRHRCUVVORVppeFJRVUZKWjBJc1EwRkJTaXhIUVVGUmJFSXNSVUZCUlZRc1EwRkJSaXhIUVVGTk1rSXNRMEZCVGl4SFFVRlZiRUlzUlVGQlJWQXNRMEZCUml4SFFVRk5NRUlzUTBGQmFFSXNSMEZCYjBKdVFpeEZRVUZGVEN4RlFVRTVRanRCUVVOQlR5eFJRVUZKYVVJc1EwRkJTaXhIUVVGUmJrSXNSVUZCUlZJc1EwRkJSaXhIUVVGTk1FSXNRMEZCVGl4SFFVRlZiRUlzUlVGQlJVNHNRMEZCUml4SFFVRk5lVUlzUTBGQmFFSXNSMEZCYjBKdVFpeEZRVUZGU2l4RlFVRTVRanRCUVVOQkxGZEJRVTlOTEVkQlFWQTdRVUZEU0N4RFFXSkVPenRCUVdWQk96czdPenM3T3pzN096dEJRVmRCV2l4blFrRkJaMElyUWl4aFFVRm9RaXhIUVVGblF5eFZRVUZWYmtJc1IwRkJWaXhGUVVGbGIwSXNTVUZCWml4RlFVRnhRblJDTEVOQlFYSkNMRVZCUVhkQ08wRkJRM0JFUlN4UlFVRkpjVUlzUzBGQlNpeEhRVUZaZGtJc1JVRkJSVlFzUTBGQlJpeEhRVUZOSzBJc1MwRkJTME1zUzBGQldDeEhRVUZ0UW5aQ0xFVkJRVVZRTEVOQlFVWXNSMEZCVFRaQ0xFdEJRVXRGTEUxQlFURkRPMEZCUTBGMFFpeFJRVUZKYzBJc1RVRkJTaXhIUVVGaGVFSXNSVUZCUlZJc1EwRkJSaXhIUVVGTk9FSXNTMEZCUzBNc1MwRkJXQ3hIUVVGdFFuWkNMRVZCUVVWT0xFTkJRVVlzUjBGQlRUUkNMRXRCUVV0RkxFMUJRVE5ETzBGQlEwRXNWMEZCVDNSQ0xFZEJRVkE3UVVGRFNDeERRVXBFT3p0QlFVMUJPenM3T3pzN096czdPenRCUVZkQldpeG5Ra0ZCWjBKdFF5eGhRVUZvUWl4SFFVRm5ReXhWUVVGVGRrSXNSMEZCVkN4RlFVRmpkMElzU1VGQlpDeEZRVUZ2UWpGQ0xFTkJRWEJDTEVWQlFYTkNPMEZCUTJ4RUxGRkJRVWt5UWl4TFFVRkxSQ3hMUVVGTFVpeERRVUZrTzBGQlEwRXNVVUZCU1ZVc1MwRkJTMFlzUzBGQlMxQXNRMEZCWkR0QlFVTkJMRkZCUVVsVkxFdEJRVXRHTEV0QlFVdEVMRXRCUVV0SUxFdEJRVzVDTzBGQlEwRXNVVUZCU1U4c1MwRkJTMFlzUzBGQlMwWXNTMEZCUzBZc1RVRkJia0k3UVVGRFFTeFJRVUZKVHl4TlFVRk5MMElzUlVGQlJWUXNRMEZCUml4SFFVRk5iME1zUlVGQlRpeEhRVUZYTTBJc1JVRkJSVkFzUTBGQlJpeEhRVUZOYlVNc1JVRkJha0lzUjBGQmMwSTFRaXhGUVVGRlRDeEZRVUZzUXp0QlFVTkJMRkZCUVVseFF5eE5RVUZOYUVNc1JVRkJSVklzUTBGQlJpeEhRVUZOYlVNc1JVRkJUaXhIUVVGWE0wSXNSVUZCUlU0c1EwRkJSaXhIUVVGTmEwTXNSVUZCYWtJc1IwRkJjMEkxUWl4RlFVRkZTaXhGUVVGc1F6dEJRVU5CTEZGQlFVbHhReXhOUVVGTmFrTXNSVUZCUlZRc1EwRkJSaXhIUVVGTmMwTXNSVUZCVGl4SFFVRlhOMElzUlVGQlJWQXNRMEZCUml4SFFVRk5iVU1zUlVGQmFrSXNSMEZCYzBJMVFpeEZRVUZGVEN4RlFVRnNRenRCUVVOQkxGRkJRVWwxUXl4TlFVRk5iRU1zUlVGQlJWSXNRMEZCUml4SFFVRk5jVU1zUlVGQlRpeEhRVUZYTjBJc1JVRkJSVTRzUTBGQlJpeEhRVUZOYTBNc1JVRkJha0lzUjBGQmMwSTFRaXhGUVVGRlNpeEZRVUZzUXp0QlFVTkJMRkZCUVVsMVF5eE5RVUZOYmtNc1JVRkJSVlFzUTBGQlJpeEhRVUZOYjBNc1JVRkJUaXhIUVVGWE0wSXNSVUZCUlZBc1EwRkJSaXhIUVVGTmNVTXNSVUZCYWtJc1IwRkJjMEk1UWl4RlFVRkZUQ3hGUVVGc1F6dEJRVU5CTEZGQlFVbDVReXhOUVVGTmNFTXNSVUZCUlZJc1EwRkJSaXhIUVVGTmJVTXNSVUZCVGl4SFFVRlhNMElzUlVGQlJVNHNRMEZCUml4SFFVRk5iME1zUlVGQmFrSXNSMEZCYzBJNVFpeEZRVUZGU2l4RlFVRnNRenRCUVVOQkxGRkJRVWw1UXl4TlFVRk5ja01zUlVGQlJWUXNRMEZCUml4SFFVRk5jME1zUlVGQlRpeEhRVUZYTjBJc1JVRkJSVkFzUTBGQlJpeEhRVUZOY1VNc1JVRkJha0lzUjBGQmMwSTVRaXhGUVVGRlRDeEZRVUZzUXp0QlFVTkJMRkZCUVVreVF5eE5RVUZOZEVNc1JVRkJSVklzUTBGQlJpeEhRVUZOY1VNc1JVRkJUaXhIUVVGWE4wSXNSVUZCUlU0c1EwRkJSaXhIUVVGTmIwTXNSVUZCYWtJc1IwRkJjMEk1UWl4RlFVRkZTaXhGUVVGc1F6czdRVUZGUVN4UlFVRkpNa01zVDBGQlQwTXNTMEZCUzBNc1IwRkJUQ3hEUVVGVFZpeEhRVUZVTEVWQlFXTkZMRWRCUVdRc1JVRkJiVUpGTEVkQlFXNUNMRVZCUVhkQ1JTeEhRVUY0UWl4RFFVRllPMEZCUTBFc1VVRkJTVXNzVDBGQlQwWXNTMEZCUzBjc1IwRkJUQ3hEUVVGVFdpeEhRVUZVTEVWQlFXTkZMRWRCUVdRc1JVRkJiVUpGTEVkQlFXNUNMRVZCUVhkQ1JTeEhRVUY0UWl4RFFVRllPMEZCUTBFc1VVRkJTVThzVDBGQlQwb3NTMEZCUzBNc1IwRkJUQ3hEUVVGVFZDeEhRVUZVTEVWQlFXTkZMRWRCUVdRc1JVRkJiVUpGTEVkQlFXNUNMRVZCUVhkQ1JTeEhRVUY0UWl4RFFVRllPMEZCUTBFc1VVRkJTVThzVDBGQlQwd3NTMEZCUzBjc1IwRkJUQ3hEUVVGVFdDeEhRVUZVTEVWQlFXTkZMRWRCUVdRc1JVRkJiVUpGTEVkQlFXNUNMRVZCUVhkQ1JTeEhRVUY0UWl4RFFVRllPenRCUVVWQmNFTXNVVUZCU1dkQ0xFTkJRVW9zUjBGQlVYRkNMRWxCUVZJN1FVRkRRWEpETEZGQlFVbHBRaXhEUVVGS0xFZEJRVkY1UWl4SlFVRlNPMEZCUTBFeFF5eFJRVUZKY1VJc1MwRkJTaXhIUVVGWmJVSXNUMEZCVDBnc1NVRkJia0k3UVVGRFFYSkRMRkZCUVVselFpeE5RVUZLTEVkQlFXRnhRaXhQUVVGUFJDeEpRVUZ3UWp0QlFVTkJMRmRCUVU4eFF5eEhRVUZRTzBGQlEwZ3NRMEY0UWtRN08wRkJNRUpCT3pzN096czdPenM3T3pzN08wRkJZVUZhTEdkQ1FVRm5RbmRFTEZsQlFXaENMRWRCUVN0Q0xGVkJRVlZETEUxQlFWWXNSVUZCYTBKRExFMUJRV3hDTEVWQlFUQkNReXhOUVVFeFFpeEZRVUZyUTBNc1RVRkJiRU1zUlVGQk1FTjRRaXhKUVVFeFF5eEZRVUZuUkhsQ0xHbENRVUZvUkN4RlFVRnRSVHRCUVVNNVJpeFJRVUZKYWtNc1NVRkJTVkVzUzBGQlMxSXNRMEZCWWp0QlFVTkJMRkZCUVVsRExFbEJRVWxQTEV0QlFVdFFMRU5CUVdJN1FVRkRRU3hSUVVGSlNTeFJRVUZSUnl4TFFVRkxTQ3hMUVVGcVFqdEJRVU5CTEZGQlFVbERMRk5CUVZORkxFdEJRVXRHTEUxQlFXeENPenRCUVVWQkxGRkJRVWszUWl4TFFVRkxkMFFzYTBKQlFXdENOVVFzUTBGQmJFSXNSMEZCYzBJeVFpeERRVUYwUWl4SFFVRXdRbWxETEd0Q1FVRnJRakZFTEVOQlFXeENMRWRCUVhOQ01FSXNRMEZCYUVRc1IwRkJiMFJuUXl4clFrRkJhMEo0UkN4RlFVRXZSVHRCUVVOQkxGRkJRVWxETEV0QlFVdDFSQ3hyUWtGQmEwSXpSQ3hEUVVGc1FpeEhRVUZ6UWpCQ0xFTkJRWFJDTEVkQlFUQkNhVU1zYTBKQlFXdENla1FzUTBGQmJFSXNSMEZCYzBKNVFpeERRVUZvUkN4SFFVRnZSR2RETEd0Q1FVRnJRblpFTEVWQlFTOUZPMEZCUTBFc1VVRkJTWGRFTEV0QlFVdEVMR3RDUVVGclFqVkVMRU5CUVd4Q0xFZEJRWE5DWjBNc1MwRkJMMEk3UVVGRFFTeFJRVUZKT0VJc1MwRkJTMFlzYTBKQlFXdENNMFFzUTBGQmJFSXNSMEZCYzBJclFpeExRVUV2UWp0QlFVTkJMRkZCUVVrclFpeExRVUZMU0N4clFrRkJhMEl4UkN4RFFVRnNRaXhIUVVGelFpdENMRTFCUVM5Q08wRkJRMEVzVVVGQlNTdENMRXRCUVV0S0xHdENRVUZyUW5wRUxFTkJRV3hDTEVkQlFYTkNPRUlzVFVGQkwwSTdPMEZCUlVGM1FpeFhRVUZQT1VJc1EwRkJVQ3hIUVVGWGRrSXNSVUZCV0R0QlFVTkJjVVFzVjBGQlR6ZENMRU5CUVZBc1IwRkJWM1pDTEVWQlFWZzdRVUZEUVhGRUxGZEJRVTh2UWl4RFFVRlFMRWRCUVZkclF5eExRVUZMZWtRc1JVRkJhRUk3UVVGRFFYTkVMRmRCUVU4NVFpeERRVUZRTEVkQlFWZHJReXhMUVVGTGVrUXNSVUZCYUVJN1FVRkRRVzFFTEZkQlFVODNRaXhEUVVGUUxFZEJRVmR2UXl4TFFVRkxNMFFzUlVGQmFFSTdRVUZEUVc5RUxGZEJRVTgxUWl4RFFVRlFMRWRCUVZkdlF5eExRVUZMTTBRc1JVRkJhRUk3UVVGRFFYTkVMRmRCUVU5b1F5eERRVUZRTEVkQlFWZHJReXhMUVVGTFJTeEZRVUZNTEVkQlFWVXpSQ3hGUVVGeVFqdEJRVU5CZFVRc1YwRkJUeTlDTEVOQlFWQXNSMEZCVjJ0RExFdEJRVXRGTEVWQlFVd3NSMEZCVlRORUxFVkJRWEpDTzBGQlEwZ3NRMEZ5UWtRN08wRkJkVUpCTkVRc1IwRkJSMnhGTEdWQlFVZ3NSMEZCY1VKdFJTeFBRVUZQUXl4UFFVRlFMRWRCUVdsQ2NFVXNaVUZCZEVNaUxDSm1hV3hsSWpvaVlXWm1hVzVsTFhSeVlXNXpabTl5YlM1cWN5SXNJbk52ZFhKalpYTkRiMjUwWlc1MElqcGJJaThxS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcVhISmNiaUJEYjNCNWNtbG5hSFFnS0dNcElESXdNRGd0TWpBeE1DQlNhV05oY21SdklGRjFaWE5oWkdGY2NseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhNUzB5TURFeUlHTnZZMjl6TW1RdGVDNXZjbWRjY2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE15MHlNREUySUVOb2RXdHZibWNnVkdWamFHNXZiRzluYVdWeklFbHVZeTVjY2x4dUlFTnZjSGx5YVdkb2RDQW9ZeWtnTWpBeE55MHlNREU0SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xseHlYRzVjY2x4dUlHaDBkSEE2THk5M2QzY3VZMjlqYjNNeVpDMTRMbTl5WjF4eVhHNWNjbHh1SUZCbGNtMXBjM05wYjI0Z2FYTWdhR1Z5WldKNUlHZHlZVzUwWldRc0lHWnlaV1VnYjJZZ1kyaGhjbWRsTENCMGJ5QmhibmtnY0dWeWMyOXVJRzlpZEdGcGJtbHVaeUJoSUdOdmNIbGNjbHh1SUc5bUlIUm9hWE1nYzI5bWRIZGhjbVVnWVc1a0lHRnpjMjlqYVdGMFpXUWdaRzlqZFcxbGJuUmhkR2x2YmlCbWFXeGxjeUFvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUhSdklHUmxZV3hjY2x4dUlHbHVJSFJvWlNCVGIyWjBkMkZ5WlNCM2FYUm9iM1YwSUhKbGMzUnlhV04wYVc5dUxDQnBibU5zZFdScGJtY2dkMmwwYUc5MWRDQnNhVzFwZEdGMGFXOXVJSFJvWlNCeWFXZG9kSE5jY2x4dUlIUnZJSFZ6WlN3Z1kyOXdlU3dnYlc5a2FXWjVMQ0J0WlhKblpTd2djSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3dnYzNWaWJHbGpaVzV6WlN3Z1lXNWtMMjl5SUhObGJHeGNjbHh1SUdOdmNHbGxjeUJ2WmlCMGFHVWdVMjltZEhkaGNtVXNJR0Z1WkNCMGJ5QndaWEp0YVhRZ2NHVnljMjl1Y3lCMGJ5QjNhRzl0SUhSb1pTQlRiMlowZDJGeVpTQnBjMXh5WEc0Z1puVnlibWx6YUdWa0lIUnZJR1J2SUhOdkxDQnpkV0pxWldOMElIUnZJSFJvWlNCbWIyeHNiM2RwYm1jZ1kyOXVaR2wwYVc5dWN6cGNjbHh1WEhKY2JpQlVhR1VnWVdKdmRtVWdZMjl3ZVhKcFoyaDBJRzV2ZEdsalpTQmhibVFnZEdocGN5QndaWEp0YVhOemFXOXVJRzV2ZEdsalpTQnphR0ZzYkNCaVpTQnBibU5zZFdSbFpDQnBibHh5WEc0Z1lXeHNJR052Y0dsbGN5QnZjaUJ6ZFdKemRHRnVkR2xoYkNCd2IzSjBhVzl1Y3lCdlppQjBhR1VnVTI5bWRIZGhjbVV1WEhKY2JseHlYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHlYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEhKY2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjY2x4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2NseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hISmNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEhKY2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNWNjbHh1SUNvZ1FXWm1hVzVsVkhKaGJuTm1iM0p0SUdOc1lYTnpJSEpsY0hKbGMyVnVkQ0JoYmlCaFptWnBibVVnZEhKaGJuTm1iM0p0SUcxaGRISnBlQzRnU1hRbmN5QmpiMjF3YjNObFpDQmlZWE5wWTJGc2JIa2dZbmtnZEhKaGJuTnNZWFJwYjI0c0lISnZkR0YwYVc5dUxDQnpZMkZzWlNCMGNtRnVjMlp2Y20xaGRHbHZibk11UEdKeUx6NWNjbHh1SUNvZ0lTTjZhRnh5WEc0Z0tpQkJabVpwYm1WVWNtRnVjMlp2Y20wZzU3Rzc1THVqNktHbzVMaUE1TGlxNUx1LzViQ0U1WStZNW8yaTU1K3A2WmkxNDRDQzVhNkQ1Wis2NXB5czVMaUs1cGl2NTVTeDVibXo1NmU3NXBlTDZMMnM3N3lNNTd5cDVwUys2TDJzNVkrWTVvbUE1N3VFNW9pUTQ0Q0NQR0p5THo1Y2NseHVJQ29nUUdOc1lYTnpJRUZtWm1sdVpWUnlZVzV6Wm05eWJWeHlYRzRnS2lCQVkyOXVjM1J5ZFdOMGIzSmNjbHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdGY2NseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR0pjY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHTmNjbHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdSY2NseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJSFI0WEhKY2JpQXFJRUJ3WVhKaGJTQjdUblZ0WW1WeWZTQjBlVnh5WEc0Z0tpQkFjMlZsSUVGbVptbHVaVlJ5WVc1elptOXliUzVqY21WaGRHVmNjbHh1SUNvdlhISmNiblpoY2lCQlptWnBibVZVY21GdWMyWnZjbTBnUFNCbWRXNWpkR2x2YmlBb1lTd2dZaXdnWXl3Z1pDd2dkSGdzSUhSNUtTQjdYSEpjYmlBZ0lDQjBhR2x6TG1FZ1BTQmhPMXh5WEc0Z0lDQWdkR2hwY3k1aUlEMGdZanRjY2x4dUlDQWdJSFJvYVhNdVl5QTlJR003WEhKY2JpQWdJQ0IwYUdsekxtUWdQU0JrTzF4eVhHNGdJQ0FnZEdocGN5NTBlQ0E5SUhSNE8xeHlYRzRnSUNBZ2RHaHBjeTUwZVNBOUlIUjVPMXh5WEc1OU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlDRWpaVzRnUTNKbFlYUmxJR0VnUVdabWFXNWxWSEpoYm5ObWIzSnRJRzlpYW1WamRDQjNhWFJvSUdGc2JDQmpiMjUwWlc1MGN5QnBiaUIwYUdVZ2JXRjBjbWw0TGx4eVhHNGdLaUFoSTNwb0lPZVVxT1djcU9lZnFlbVl0ZVM0cmVlYWhPYUpnT2FjaWVXR2hlV3V1ZVdJbStXN3V1UzRnT1M0cWlCQlptWnBibVZVY21GdWMyWnZjbTBnNWErNTZMR2g0NENDWEhKY2JpQXFJRUJ0WlhSb2IyUWdZM0psWVhSbFhISmNiaUFxSUVCemRHRjBhV05jY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHRmNjbHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUdKY2NseHVJQ29nUUhCaGNtRnRJSHRPZFcxaVpYSjlJR05jY2x4dUlDb2dRSEJoY21GdElIdE9kVzFpWlhKOUlHUmNjbHh1SUNvZ1FIQmhjbUZ0SUh0T2RXMWlaWEo5SUhSNFhISmNiaUFxSUVCd1lYSmhiU0I3VG5WdFltVnlmU0IwZVZ4eVhHNGdLaUJBY21WMGRYSnVJSHRCWm1acGJtVlVjbUZ1YzJadmNtMTlYSEpjYmlBcUwxeHlYRzVCWm1acGJtVlVjbUZ1YzJadmNtMHVZM0psWVhSbElEMGdablZ1WTNScGIyNGdLR0VzSUdJc0lHTXNJR1FzSUhSNExDQjBlU2tnZTF4eVhHNGdJQ0FnY21WMGRYSnVJSHRoT2lCaExDQmlPaUJpTENCak9pQmpMQ0JrT2lCa0xDQjBlRG9nZEhnc0lIUjVPaUIwZVgwN1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJseHlYRzRnS2lCRGNtVmhkR1VnWVNCcFpHVnVkR2wwZVNCMGNtRnVjMlp2Y20xaGRHbHZiaUJ0WVhSeWFYZzZJRHhpY2k4K1hISmNiaUFxSUZzZ01Td2dNQ3dnTUN3Z1BHSnlMejVjY2x4dUlDb2dJQ0F3TENBeExDQXdJRjFjY2x4dUlDb2dJU042YUZ4eVhHNGdLaURsalpYa3ZZM25uNm5wbUxYdnZKbzhZbkl2UGx4eVhHNGdLaUJiSURFc0lEQXNJREFzSUR4aWNpOCtYSEpjYmlBcUlDQWdNQ3dnTVN3Z01DQmRYSEpjYmlBcVhISmNiaUFxSUVCdFpYUm9iMlFnYVdSbGJuUnBkSGxjY2x4dUlDb2dRSE4wWVhScFkxeHlYRzRnS2lCQWNtVjBkWEp1SUh0QlptWnBibVZVY21GdWMyWnZjbTE5WEhKY2JpQXFMMXh5WEc1QlptWnBibVZVY21GdWMyWnZjbTB1YVdSbGJuUnBkSGtnUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2UyRTZJREV1TUN3Z1lqb2dNQzR3TENCak9pQXdMakFzSUdRNklERXVNQ3dnZEhnNklEQXVNQ3dnZEhrNklEQXVNSDA3WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmlCRGJHOXVaU0JoSUVGbVptbHVaVlJ5WVc1elptOXliU0J2WW1wbFkzUWdabkp2YlNCMGFHVWdjM0JsWTJsbWFXVmtJSFJ5WVc1elptOXliUzVjY2x4dUlDb2dJU042YUNEbGhZdnBtb2JtaklmbHJwcm5tb1FnUVdabWFXNWxWSEpoYm5ObWIzSnRJT1d2dWVpeG9lT0FnbHh5WEc0Z0tpQkFiV1YwYUc5a0lHTnNiMjVsWEhKY2JpQXFJRUJ6ZEdGMGFXTmNjbHh1SUNvZ1FIQmhjbUZ0SUh0QlptWnBibVZVY21GdWMyWnZjbTE5SUhSY2NseHVJQ29nUUhKbGRIVnliaUI3UVdabWFXNWxWSEpoYm5ObWIzSnRmVnh5WEc0Z0tpOWNjbHh1UVdabWFXNWxWSEpoYm5ObWIzSnRMbU5zYjI1bElEMGdablZ1WTNScGIyNGdLSFFwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUI3WVRvZ2RDNWhMQ0JpT2lCMExtSXNJR002SUhRdVl5d2daRG9nZEM1a0xDQjBlRG9nZEM1MGVDd2dkSGs2SUhRdWRIbDlPMXh5WEc1OU8xeHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlDRWpaVzVjY2x4dUlDb2dRMjl1WTJGMFpXNWhkR1VnWVNCMGNtRnVjMlp2Y20wZ2JXRjBjbWw0SUhSdklHRnViM1JvWlhKY2NseHVJQ29nVkdobElISmxjM1ZzZEhNZ1lYSmxJSEpsWm14bFkzUmxaQ0JwYmlCMGFHVWdiM1YwSUdGbVptbHVaU0IwY21GdWMyWnZjbTFjY2x4dUlDb2diM1YwSUQwZ2RERWdLaUIwTWx4eVhHNGdLaUJVYUdseklHWjFibU4wYVc5dUlHbHpJRzFsYlc5eWVTQm1jbVZsTENCNWIzVWdjMmh2ZFd4a0lHTnlaV0YwWlNCMGFHVWdiM1YwY0hWMElHRm1abWx1WlNCMGNtRnVjMlp2Y20wZ1lua2dlVzkxY25ObGJHWWdZVzVrSUcxaGJtRm5aU0JwZEhNZ2JXVnRiM0o1TGx4eVhHNGdLaUFoSTNwb1hISmNiaUFxSU9hTHZPYU9wZVM0cE9TNHF1ZWZxZW1ZdGUrOGpPV3dodWU3aythZW5PUy9uZVd0bU9XSXNDQnZkWFFnNTUrcDZaaTE0NENDNkwrWjVMaXE1WWU5NXBXdzVMaU41WWliNWJ1NjVMdTc1TDJWNVlhRjVhMlk3N3lNNUwyZzZaeUE2S2FCNVlXSTVZaWI1YnU2SUVGbVptbHVaVlJ5WVc1elptOXliU0Rscjdub3NhSG5sS2ptbmFYbHJaamxncWpudTVQbW5wenZ2SXpsdWJia3Zaemt1THJuckt6a3VJRGt1S3JsajRMbWxiRGt2S0RsaGFYbGg3M21sYkRqZ0lKY2NseHVJQ29nYjNWMElEMGdkREVnS2lCME1seHlYRzRnS2lCQWJXVjBhRzlrSUdOdmJtTmhkRnh5WEc0Z0tpQkFjM1JoZEdsalhISmNiaUFxSUVCd1lYSmhiU0I3UVdabWFXNWxWSEpoYm5ObWIzSnRmU0J2ZFhRZ1QzVjBJRzlpYW1WamRDQjBieUJ6ZEc5eVpTQjBhR1VnWTI5dVkyRjBJSEpsYzNWc2RGeHlYRzRnS2lCQWNHRnlZVzBnZTBGbVptbHVaVlJ5WVc1elptOXliWDBnZERFZ1ZHaGxJR1pwY25OMElIUnlZVzV6Wm05eWJTQnZZbXBsWTNRdVhISmNiaUFxSUVCd1lYSmhiU0I3UVdabWFXNWxWSEpoYm5ObWIzSnRmU0IwTWlCVWFHVWdkSEpoYm5ObWIzSnRJRzlpYW1WamRDQjBieUJqYjI1allYUmxibUYwWlM1Y2NseHVJQ29nUUhKbGRIVnliaUI3UVdabWFXNWxWSEpoYm5ObWIzSnRmU0JQZFhRZ2IySnFaV04wSUhkcGRHZ2dkR2hsSUhKbGMzVnNkQ0J2WmlCamIyNWpZWFJsYm1GMGFXOXVMbHh5WEc0Z0tpOWNjbHh1UVdabWFXNWxWSEpoYm5ObWIzSnRMbU52Ym1OaGRDQTlJR1oxYm1OMGFXOXVJQ2h2ZFhRc0lIUXhMQ0IwTWlrZ2UxeHlYRzRnSUNBZ2RtRnlJR0VnUFNCME1TNWhMQ0JpSUQwZ2RERXVZaXdnWXlBOUlIUXhMbU1zSUdRZ1BTQjBNUzVrTENCMGVDQTlJSFF4TG5SNExDQjBlU0E5SUhReExuUjVPMXh5WEc0Z0lDQWdiM1YwTG1FZ1BTQmhJQ29nZERJdVlTQXJJR0lnS2lCME1pNWpPMXh5WEc0Z0lDQWdiM1YwTG1JZ1BTQmhJQ29nZERJdVlpQXJJR0lnS2lCME1pNWtPMXh5WEc0Z0lDQWdiM1YwTG1NZ1BTQmpJQ29nZERJdVlTQXJJR1FnS2lCME1pNWpPMXh5WEc0Z0lDQWdiM1YwTG1RZ1BTQmpJQ29nZERJdVlpQXJJR1FnS2lCME1pNWtPMXh5WEc0Z0lDQWdiM1YwTG5SNElEMGdkSGdnS2lCME1pNWhJQ3NnZEhrZ0tpQjBNaTVqSUNzZ2RESXVkSGc3WEhKY2JpQWdJQ0J2ZFhRdWRIa2dQU0IwZUNBcUlIUXlMbUlnS3lCMGVTQXFJSFF5TG1RZ0t5QjBNaTUwZVR0Y2NseHVJQ0FnSUhKbGRIVnliaUJ2ZFhRN1hISmNibjA3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nSVNObGJpQkhaWFFnZEdobElHbHVkbVZ5ZENCMGNtRnVjMlp2Y20wZ2IyWWdZVzRnUVdabWFXNWxWSEpoYm5ObWIzSnRJRzlpYW1WamRDNWNjbHh1SUNvZ1ZHaHBjeUJtZFc1amRHbHZiaUJwY3lCdFpXMXZjbmtnWm5KbFpTd2dlVzkxSUhOb2IzVnNaQ0JqY21WaGRHVWdkR2hsSUc5MWRIQjFkQ0JoWm1acGJtVWdkSEpoYm5ObWIzSnRJR0o1SUhsdmRYSnpaV3htSUdGdVpDQnRZVzVoWjJVZ2FYUnpJRzFsYlc5eWVTNWNjbHh1SUNvZ0lTTjZhQ0Rtc1lMcGdJYm5uNm5wbUxYamdJTG92NW5rdUtybGg3M21sYkRrdUkzbGlKdmx1N3JrdTd2a3ZaWGxob1hsclpqdnZJemt2YURwbklEb3BvSGxoWWpsaUp2bHU3b2dRV1ptYVc1bFZISmhibk5tYjNKdElPV3Z1ZWl4b2VlVXFPYWRwZVd0bU9XQ3FPZTdrK2Flbk8rOGpPVzV0dVM5bk9TNHV1ZXNyT1M0Z09TNHF1V1BndWFWc09TOG9PV0ZwZVdIdmVhVnNPT0FnbHh5WEc0Z0tpQkFiV1YwYUc5a0lHbHVkbVZ5ZEZ4eVhHNGdLaUJBYzNSaGRHbGpYSEpjYmlBcUlFQndZWEpoYlNCN1FXWm1hVzVsVkhKaGJuTm1iM0p0ZlNCdmRYUmNjbHh1SUNvZ1FIQmhjbUZ0SUh0QlptWnBibVZVY21GdWMyWnZjbTE5SUhSY2NseHVJQ29nUUhKbGRIVnliaUI3UVdabWFXNWxWSEpoYm5ObWIzSnRmU0JQZFhRZ2IySnFaV04wSUhkcGRHZ2dhVzUyWlhKMFpXUWdjbVZ6ZFd4MExseHlYRzRnS2k5Y2NseHVRV1ptYVc1bFZISmhibk5tYjNKdExtbHVkbVZ5ZENBOUlHWjFibU4wYVc5dUlDaHZkWFFzSUhRcElIdGNjbHh1SUNBZ0lIWmhjaUJoSUQwZ2RDNWhMQ0JpSUQwZ2RDNWlMQ0JqSUQwZ2RDNWpMQ0JrSUQwZ2RDNWtPMXh5WEc0Z0lDQWdkbUZ5SUdSbGRHVnliV2x1WVc1MElEMGdNU0F2SUNoaElDb2daQ0F0SUdJZ0tpQmpLVHRjY2x4dUlDQWdJSFpoY2lCMGVDQTlJSFF1ZEhnc0lIUjVJRDBnZEM1MGVUdGNjbHh1SUNBZ0lHOTFkQzVoSUQwZ1pHVjBaWEp0YVc1aGJuUWdLaUJrTzF4eVhHNGdJQ0FnYjNWMExtSWdQU0F0WkdWMFpYSnRhVzVoYm5RZ0tpQmlPMXh5WEc0Z0lDQWdiM1YwTG1NZ1BTQXRaR1YwWlhKdGFXNWhiblFnS2lCak8xeHlYRzRnSUNBZ2IzVjBMbVFnUFNCa1pYUmxjbTFwYm1GdWRDQXFJR0U3WEhKY2JpQWdJQ0J2ZFhRdWRIZ2dQU0JrWlhSbGNtMXBibUZ1ZENBcUlDaGpJQ29nZEhrZ0xTQmtJQ29nZEhncE8xeHlYRzRnSUNBZ2IzVjBMblI1SUQwZ1pHVjBaWEp0YVc1aGJuUWdLaUFvWWlBcUlIUjRJQzBnWVNBcUlIUjVLVHRjY2x4dUlDQWdJSEpsZEhWeWJpQnZkWFE3WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmlCSFpYUWdZVzRnUVdabWFXNWxWSEpoYm5ObWIzSnRJRzlpYW1WamRDQm1jbTl0SUdFZ1oybDJaVzRnYldGMGNtbDRJRFI0TkM1Y2NseHVJQ29nVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUJ0WlcxdmNua2dabkpsWlN3Z2VXOTFJSE5vYjNWc1pDQmpjbVZoZEdVZ2RHaGxJRzkxZEhCMWRDQmhabVpwYm1VZ2RISmhibk5tYjNKdElHSjVJSGx2ZFhKelpXeG1JR0Z1WkNCdFlXNWhaMlVnYVhSeklHMWxiVzl5ZVM1Y2NseHVJQ29nSVNONmFDRGt1NDdrdUlEa3VLb2dOSGcwSUUxaGRISnBlQ0RvanJmbGo1WWdRV1ptYVc1bFZISmhibk5tYjNKdElPV3Z1ZWl4b2VPQWd1aS9tZVM0cXVXSHZlYVZzT1M0amVXSW0rVzd1dVM3dStTOWxlV0doZVd0bU8rOGpPUzlvT21jZ09pbWdlV0ZpT1dJbStXN3VpQkJabVpwYm1WVWNtRnVjMlp2Y20wZzVhKzU2TEdoNTVTbzVwMmw1YTJZNVlLbzU3dVQ1cDZjNzd5TTVibTI1TDJjNUxpNjU2eXM1TGlBNUxpcTVZK0M1cFd3NUx5ZzVZV2w1WWU5NXBXdzQ0Q0NYSEpjYmlBcUlFQnRaWFJvYjJRZ2FXNTJaWEowWEhKY2JpQXFJRUJ6ZEdGMGFXTmNjbHh1SUNvZ1FIQmhjbUZ0SUh0QlptWnBibVZVY21GdWMyWnZjbTE5SUc5MWRGeHlYRzRnS2lCQWNHRnlZVzBnZTAxaGREUjlJRzFoZEZ4eVhHNGdLaUJBY21WMGRYSnVJSHRCWm1acGJtVlVjbUZ1YzJadmNtMTlJRTkxZENCdlltcGxZM1FnZDJsMGFDQnBiblpsY25SbFpDQnlaWE4xYkhRdVhISmNiaUFxTDF4eVhHNUJabVpwYm1WVWNtRnVjMlp2Y20wdVpuSnZiVTFoZERRZ1BTQm1kVzVqZEdsdmJpQW9iM1YwTENCdFlYUXBJSHRjY2x4dUlDQWdJRzkxZEM1aElEMGdiV0YwTG0wd01EdGNjbHh1SUNBZ0lHOTFkQzVpSUQwZ2JXRjBMbTB3TVR0Y2NseHVJQ0FnSUc5MWRDNWpJRDBnYldGMExtMHdORHRjY2x4dUlDQWdJRzkxZEM1a0lEMGdiV0YwTG0wd05UdGNjbHh1SUNBZ0lHOTFkQzUwZUNBOUlHMWhkQzV0TVRJN1hISmNiaUFnSUNCdmRYUXVkSGtnUFNCdFlYUXViVEV6TzF4eVhHNGdJQ0FnY21WMGRYSnVJRzkxZER0Y2NseHVmVHRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdUlFRndjR3g1SUhSb1pTQmhabVpwYm1VZ2RISmhibk5tYjNKdFlYUnBiMjRnYjI0Z1lTQndiMmx1ZEM1Y2NseHVJQ29nVkdocGN5Qm1kVzVqZEdsdmJpQnBjeUJ0WlcxdmNua2dabkpsWlN3Z2VXOTFJSE5vYjNWc1pDQmpjbVZoZEdVZ2RHaGxJRzkxZEhCMWRDQldaV015SUdKNUlIbHZkWEp6Wld4bUlHRnVaQ0J0WVc1aFoyVWdhWFJ6SUcxbGJXOXllUzVjY2x4dUlDb2dJU042YUNEbHI3bmt1SURrdUtybmdybmx1cFRubEtqbm42bnBtTFhsajVqbWphTGpnSUxvdjVua3VLcmxoNzNtbGJEa3VJM2xpSnZsdTdya3U3dmt2WlhsaG9YbHJaanZ2SXprdmFEcG5JRG9wb0hsaFlqbGlKdmx1N3JrdUlEa3VLb2dWbVZqTWlEbHI3bm9zYUhubEtqbW5hWGxyWmpsZ3FqbnU1UG1ucHp2dkl6bHViYmt2WnprdUxybnJLemt1SURrdUtybGo0TG1sYkRrdktEbGhhWGxoNzNtbGJEamdJSmNjbHh1SUNvZ1FHMWxkR2h2WkNCMGNtRnVjMlp2Y20xV1pXTXlYSEpjYmlBcUlFQnpkR0YwYVdOY2NseHVJQ29nUUhCaGNtRnRJSHRXWldNeWZTQnZkWFFnVkdobElHOTFkSEIxZENCd2IybHVkQ0IwYnlCemRHOXlaU0IwYUdVZ2NtVnpkV3gwWEhKY2JpQXFJRUJ3WVhKaGJTQjdWbVZqTW54T2RXMWlaWEo5SUhCdmFXNTBJRkJ2YVc1MElIUnZJR0Z3Y0d4NUlIUnlZVzV6Wm05eWJTQnZjaUI0TGx4eVhHNGdLaUJBY0dGeVlXMGdlMEZtWm1sdVpWUnlZVzV6Wm05eWJYeE9kVzFpWlhKOUlIUnlZVzV6VDNKWklIUnlZVzV6Wm05eWJTQnRZWFJ5YVhnZ2IzSWdlUzVjY2x4dUlDb2dRSEJoY21GdElIdEJabVpwYm1WVWNtRnVjMlp2Y20xOUlGdDBYU0IwY21GdWMyWnZjbTBnYldGMGNtbDRMbHh5WEc0Z0tpQkFjbVYwZFhKdUlIdFdaV015ZlZ4eVhHNGdLaTljY2x4dVFXWm1hVzVsVkhKaGJuTm1iM0p0TG5SeVlXNXpabTl5YlZabFl6SWdQU0JtZFc1amRHbHZiaUFvYjNWMExDQndiMmx1ZEN3Z2RISmhibk5QY2xrc0lIUXBJSHRjY2x4dUlDQWdJSFpoY2lCNExDQjVPMXh5WEc0Z0lDQWdhV1lnS0hRZ1BUMDlJSFZ1WkdWbWFXNWxaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUWdQU0IwY21GdWMwOXlXVHRjY2x4dUlDQWdJQ0FnSUNCNElEMGdjRzlwYm5RdWVEdGNjbHh1SUNBZ0lDQWdJQ0I1SUQwZ2NHOXBiblF1ZVR0Y2NseHVJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2VDQTlJSEJ2YVc1ME8xeHlYRzRnSUNBZ0lDQWdJSGtnUFNCMGNtRnVjMDl5V1R0Y2NseHVJQ0FnSUgxY2NseHVJQ0FnSUc5MWRDNTRJRDBnZEM1aElDb2dlQ0FySUhRdVl5QXFJSGtnS3lCMExuUjRPMXh5WEc0Z0lDQWdiM1YwTG5rZ1BTQjBMbUlnS2lCNElDc2dkQzVrSUNvZ2VTQXJJSFF1ZEhrN1hISmNiaUFnSUNCeVpYUjFjbTRnYjNWME8xeHlYRzU5TzF4eVhHNWNjbHh1THlvcVhISmNiaUFxSUNFalpXNGdRWEJ3YkhrZ2RHaGxJR0ZtWm1sdVpTQjBjbUZ1YzJadmNtMWhkR2x2YmlCdmJpQmhJSE5wZW1VdVhISmNiaUFxSUZSb2FYTWdablZ1WTNScGIyNGdhWE1nYldWdGIzSjVJR1p5WldVc0lIbHZkU0J6YUc5MWJHUWdZM0psWVhSbElIUm9aU0J2ZFhSd2RYUWdVMmw2WlNCaWVTQjViM1Z5YzJWc1ppQmhibVFnYldGdVlXZGxJR2wwY3lCdFpXMXZjbmt1WEhKY2JpQXFJQ0VqZW1nZzVicVU1NVNvNUx1LzViQ0U1WStZNW8yaTU1K3A2WmkxNVlpd0lGTnBlbVVnNUxpSzQ0Q0M2TCtaNUxpcTVZZTk1cFd3NUxpTjVZaWI1YnU2NUx1NzVMMlY1WWFGNWEyWTc3eU01TDJnNlp5QTZLYUI1WVdJNVlpYjVidTY1TGlBNUxpcUlGTnBlbVVnNWErNTZMR2g1NVNvNXAybDVhMlk1WUtvNTd1VDVwNmM3N3lNNWJtMjVMMmM1TGk2NTZ5czVMaUE1TGlxNVkrQzVwV3c1THlnNVlXbDVZZTk1cFd3NDRDQ1hISmNiaUFxSUVCdFpYUm9iMlFnZEhKaGJuTm1iM0p0VTJsNlpWeHlYRzRnS2lCQWMzUmhkR2xqWEhKY2JpQXFJRUJ3WVhKaGJTQjdVMmw2WlgwZ2IzVjBJRlJvWlNCdmRYUndkWFFnY0c5cGJuUWdkRzhnYzNSdmNtVWdkR2hsSUhKbGMzVnNkRnh5WEc0Z0tpQkFjR0Z5WVcwZ2UxTnBlbVY5SUhOcGVtVmNjbHh1SUNvZ1FIQmhjbUZ0SUh0QlptWnBibVZVY21GdWMyWnZjbTE5SUhSY2NseHVJQ29nUUhKbGRIVnliaUI3VTJsNlpYMWNjbHh1SUNvdlhISmNia0ZtWm1sdVpWUnlZVzV6Wm05eWJTNTBjbUZ1YzJadmNtMVRhWHBsSUQwZ1puVnVZM1JwYjI0Z0tHOTFkQ3dnYzJsNlpTd2dkQ2tnZTF4eVhHNGdJQ0FnYjNWMExuZHBaSFJvSUQwZ2RDNWhJQ29nYzJsNlpTNTNhV1IwYUNBcklIUXVZeUFxSUhOcGVtVXVhR1ZwWjJoME8xeHlYRzRnSUNBZ2IzVjBMbWhsYVdkb2RDQTlJSFF1WWlBcUlITnBlbVV1ZDJsa2RHZ2dLeUIwTG1RZ0tpQnphWHBsTG1obGFXZG9kRHRjY2x4dUlDQWdJSEpsZEhWeWJpQnZkWFE3WEhKY2JuMDdYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dJU05sYmlCQmNIQnNlU0IwYUdVZ1lXWm1hVzVsSUhSeVlXNXpabTl5YldGMGFXOXVJRzl1SUdFZ2NtVmpkQzVjY2x4dUlDb2dWR2hwY3lCbWRXNWpkR2x2YmlCcGN5QnRaVzF2Y25rZ1puSmxaU3dnZVc5MUlITm9iM1ZzWkNCamNtVmhkR1VnZEdobElHOTFkSEIxZENCU1pXTjBJR0o1SUhsdmRYSnpaV3htSUdGdVpDQnRZVzVoWjJVZ2FYUnpJRzFsYlc5eWVTNWNjbHh1SUNvZ0lTTjZhQ0RsdXBUbmxLamt1Ny9sc0lUbGo1am1qYUxubjZucG1MWGxpTEFnVW1WamRDRGt1SXJqZ0lMb3Y1bmt1S3JsaDczbWxiRGt1STNsaUp2bHU3cmt1N3ZrdlpYbGhvWGxyWmp2dkl6a3ZhRHBuSURvcG9IbGhZamxpSnZsdTdya3VJRGt1S29nVW1WamRDRGxyN25vc2FIbmxLam1uYVhsclpqbGdxam51NVBtbnB6dnZJemx1YmJrdlp6a3VMcm5yS3prdUlEa3VLcmxqNExtbGJEa3ZLRGxoYVhsaDczbWxiRGpnSUpjY2x4dUlDb2dRRzFsZEdodlpDQjBjbUZ1YzJadmNtMVNaV04wWEhKY2JpQXFJRUJ6ZEdGMGFXTmNjbHh1SUNvZ1FIQmhjbUZ0SUh0U1pXTjBmU0J2ZFhSY2NseHVJQ29nUUhCaGNtRnRJSHRTWldOMGZTQnlaV04wWEhKY2JpQXFJRUJ3WVhKaGJTQjdRV1ptYVc1bFZISmhibk5tYjNKdGZTQmhia0ZtWm1sdVpWUnlZVzV6Wm05eWJWeHlYRzRnS2lCQWNtVjBkWEp1SUh0U1pXTjBmVnh5WEc0Z0tpOWNjbHh1UVdabWFXNWxWSEpoYm5ObWIzSnRMblJ5WVc1elptOXliVkpsWTNRZ1BTQm1kVzVqZEdsdmJpaHZkWFFzSUhKbFkzUXNJSFFwZTF4eVhHNGdJQ0FnZG1GeUlHOXNJRDBnY21WamRDNTRPMXh5WEc0Z0lDQWdkbUZ5SUc5aUlEMGdjbVZqZEM1NU8xeHlYRzRnSUNBZ2RtRnlJRzl5SUQwZ2Iyd2dLeUJ5WldOMExuZHBaSFJvTzF4eVhHNGdJQ0FnZG1GeUlHOTBJRDBnYjJJZ0t5QnlaV04wTG1obGFXZG9kRHRjY2x4dUlDQWdJSFpoY2lCc1luZ2dQU0IwTG1FZ0tpQnZiQ0FySUhRdVl5QXFJRzlpSUNzZ2RDNTBlRHRjY2x4dUlDQWdJSFpoY2lCc1lua2dQU0IwTG1JZ0tpQnZiQ0FySUhRdVpDQXFJRzlpSUNzZ2RDNTBlVHRjY2x4dUlDQWdJSFpoY2lCeVluZ2dQU0IwTG1FZ0tpQnZjaUFySUhRdVl5QXFJRzlpSUNzZ2RDNTBlRHRjY2x4dUlDQWdJSFpoY2lCeVlua2dQU0IwTG1JZ0tpQnZjaUFySUhRdVpDQXFJRzlpSUNzZ2RDNTBlVHRjY2x4dUlDQWdJSFpoY2lCc2RIZ2dQU0IwTG1FZ0tpQnZiQ0FySUhRdVl5QXFJRzkwSUNzZ2RDNTBlRHRjY2x4dUlDQWdJSFpoY2lCc2RIa2dQU0IwTG1JZ0tpQnZiQ0FySUhRdVpDQXFJRzkwSUNzZ2RDNTBlVHRjY2x4dUlDQWdJSFpoY2lCeWRIZ2dQU0IwTG1FZ0tpQnZjaUFySUhRdVl5QXFJRzkwSUNzZ2RDNTBlRHRjY2x4dUlDQWdJSFpoY2lCeWRIa2dQU0IwTG1JZ0tpQnZjaUFySUhRdVpDQXFJRzkwSUNzZ2RDNTBlVHRjY2x4dVhISmNiaUFnSUNCMllYSWdiV2x1V0NBOUlFMWhkR2d1YldsdUtHeGllQ3dnY21KNExDQnNkSGdzSUhKMGVDazdYSEpjYmlBZ0lDQjJZWElnYldGNFdDQTlJRTFoZEdndWJXRjRLR3hpZUN3Z2NtSjRMQ0JzZEhnc0lISjBlQ2s3WEhKY2JpQWdJQ0IyWVhJZ2JXbHVXU0E5SUUxaGRHZ3ViV2x1S0d4aWVTd2djbUo1TENCc2RIa3NJSEowZVNrN1hISmNiaUFnSUNCMllYSWdiV0Y0V1NBOUlFMWhkR2d1YldGNEtHeGllU3dnY21KNUxDQnNkSGtzSUhKMGVTazdYSEpjYmx4eVhHNGdJQ0FnYjNWMExuZ2dQU0J0YVc1WU8xeHlYRzRnSUNBZ2IzVjBMbmtnUFNCdGFXNVpPMXh5WEc0Z0lDQWdiM1YwTG5kcFpIUm9JRDBnYldGNFdDQXRJRzFwYmxnN1hISmNiaUFnSUNCdmRYUXVhR1ZwWjJoMElEMGdiV0Y0V1NBdElHMXBibGs3WEhKY2JpQWdJQ0J5WlhSMWNtNGdiM1YwTzF4eVhHNTlPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc0Z1FYQndiSGtnZEdobElHRm1abWx1WlNCMGNtRnVjMlp2Y20xaGRHbHZiaUJ2YmlCaElISmxZM1FzSUdGdVpDQjBjblZ1Y3lCMGJ5QmhiaUJQY21sbGJuUmxaQ0JDYjNWdVpHbHVaeUJDYjNndVhISmNiaUFxSUZSb2FYTWdablZ1WTNScGIyNGdhWE1nYldWdGIzSjVJR1p5WldVc0lIbHZkU0J6YUc5MWJHUWdZM0psWVhSbElIUm9aU0J2ZFhSd2RYUWdkbVZqZEc5eWN5QmllU0I1YjNWeWMyVnNaaUJoYm1RZ2JXRnVZV2RsSUhSb1pXbHlJRzFsYlc5eWVTNWNjbHh1SUNvZ0lTTjZhQ0RsdXBUbmxLamt1Ny9sc0lUbGo1am1qYUxubjZucG1MWGxpTEFnVW1WamRDRGt1SW9zSU9XNXR1aTlyT2FOb3VTNHV1YWNpZVdRa2VXTWhlV2J0T2Via3VPQWd1aS9tZVM0cXVXSHZlYVZzT1M0amVXSW0rVzd1dVM3dStTOWxlV0doZVd0bU8rOGpPUzlvT21jZ09pbWdlV0ZpT1dJbStXN3V1V01oZVdidE9lYmt1ZWFoT1dibStTNHFpQldaV04wYjNJZzVhKzU2TEdoNTVTbzVwMmw1YTJZNVlLbzU3dVQ1cDZjNzd5TTVibTI1TDJjNUxpNjVZbU41WnViNUxpcTVZK0M1cFd3NUx5ZzVZV2w1WWU5NXBXdzQ0Q0NYSEpjYmlBcUlFQnRaWFJvYjJRZ2RISmhibk5tYjNKdFQySmlYSEpjYmlBcUlFQnpkR0YwYVdOY2NseHVJQ29nUUhCaGNtRnRJSHRXWldNeWZTQnZkWFJmWW14Y2NseHVJQ29nUUhCaGNtRnRJSHRXWldNeWZTQnZkWFJmZEd4Y2NseHVJQ29nUUhCaGNtRnRJSHRXWldNeWZTQnZkWFJmZEhKY2NseHVJQ29nUUhCaGNtRnRJSHRXWldNeWZTQnZkWFJmWW5KY2NseHVJQ29nUUhCaGNtRnRJSHRTWldOMGZTQnlaV04wWEhKY2JpQXFJRUJ3WVhKaGJTQjdRV1ptYVc1bFZISmhibk5tYjNKdGZTQmhia0ZtWm1sdVpWUnlZVzV6Wm05eWJWeHlYRzRnS2k5Y2NseHVRV1ptYVc1bFZISmhibk5tYjNKdExuUnlZVzV6Wm05eWJVOWlZaUE5SUdaMWJtTjBhVzl1SUNodmRYUmZZbXdzSUc5MWRGOTBiQ3dnYjNWMFgzUnlMQ0J2ZFhSZlluSXNJSEpsWTNRc0lHRnVRV1ptYVc1bFZISmhibk5tYjNKdEtTQjdYSEpjYmlBZ0lDQjJZWElnZUNBOUlISmxZM1F1ZUR0Y2NseHVJQ0FnSUhaaGNpQjVJRDBnY21WamRDNTVPMXh5WEc0Z0lDQWdkbUZ5SUhkcFpIUm9JRDBnY21WamRDNTNhV1IwYUR0Y2NseHVJQ0FnSUhaaGNpQm9aV2xuYUhRZ1BTQnlaV04wTG1obGFXZG9kRHRjY2x4dVhISmNiaUFnSUNCMllYSWdkSGdnUFNCaGJrRm1abWx1WlZSeVlXNXpabTl5YlM1aElDb2dlQ0FySUdGdVFXWm1hVzVsVkhKaGJuTm1iM0p0TG1NZ0tpQjVJQ3NnWVc1QlptWnBibVZVY21GdWMyWnZjbTB1ZEhnN1hISmNiaUFnSUNCMllYSWdkSGtnUFNCaGJrRm1abWx1WlZSeVlXNXpabTl5YlM1aUlDb2dlQ0FySUdGdVFXWm1hVzVsVkhKaGJuTm1iM0p0TG1RZ0tpQjVJQ3NnWVc1QlptWnBibVZVY21GdWMyWnZjbTB1ZEhrN1hISmNiaUFnSUNCMllYSWdlR0VnUFNCaGJrRm1abWx1WlZSeVlXNXpabTl5YlM1aElDb2dkMmxrZEdnN1hISmNiaUFnSUNCMllYSWdlR0lnUFNCaGJrRm1abWx1WlZSeVlXNXpabTl5YlM1aUlDb2dkMmxrZEdnN1hISmNiaUFnSUNCMllYSWdlV01nUFNCaGJrRm1abWx1WlZSeVlXNXpabTl5YlM1aklDb2dhR1ZwWjJoME8xeHlYRzRnSUNBZ2RtRnlJSGxrSUQwZ1lXNUJabVpwYm1WVWNtRnVjMlp2Y20wdVpDQXFJR2hsYVdkb2REdGNjbHh1WEhKY2JpQWdJQ0J2ZFhSZmRHd3VlQ0E5SUhSNE8xeHlYRzRnSUNBZ2IzVjBYM1JzTG5rZ1BTQjBlVHRjY2x4dUlDQWdJRzkxZEY5MGNpNTRJRDBnZUdFZ0t5QjBlRHRjY2x4dUlDQWdJRzkxZEY5MGNpNTVJRDBnZUdJZ0t5QjBlVHRjY2x4dUlDQWdJRzkxZEY5aWJDNTRJRDBnZVdNZ0t5QjBlRHRjY2x4dUlDQWdJRzkxZEY5aWJDNTVJRDBnZVdRZ0t5QjBlVHRjY2x4dUlDQWdJRzkxZEY5aWNpNTRJRDBnZUdFZ0t5QjVZeUFySUhSNE8xeHlYRzRnSUNBZ2IzVjBYMkp5TG5rZ1BTQjRZaUFySUhsa0lDc2dkSGs3WEhKY2JuMDdYSEpjYmx4eVhHNWpZeTVCWm1acGJtVlVjbUZ1YzJadmNtMGdQU0J0YjJSMWJHVXVaWGh3YjNKMGN5QTlJRUZtWm1sdVpWUnlZVzV6Wm05eWJUc2lYWDA9Il19