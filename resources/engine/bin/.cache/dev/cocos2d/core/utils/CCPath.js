(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/CCPath.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('../platform/CCSys');
        var EXTNAME_RE = /(\.[^\.\/\?\\]*)(\?.*)?$/;
        var DIRNAME_RE = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
        var NORMALIZE_RE = /[^\.\/]+\/\.\.\//;
        cc.path = {
            join: function join() {
                var l = arguments.length;
                var result = '';
                for (var i = 0; i < l; i++) {
                    result = (result + (result === '' ? '' : '/') + arguments[i]).replace(/(\/|\\\\)$/, '');
                }
                return result;
            },
            extname: function extname(pathStr) {
                var temp = EXTNAME_RE.exec(pathStr);
                return temp ? temp[1] : '';
            },
            mainFileName: function mainFileName(fileName) {
                if (fileName) {
                    var idx = fileName.lastIndexOf('.');
                    if (idx !== -1)
                        return fileName.substring(0, idx);
                }
                return fileName;
            },
            basename: function basename(pathStr, extname) {
                var index = pathStr.indexOf('?');
                if (index > 0)
                    pathStr = pathStr.substring(0, index);
                var reg = /(\/|\\)([^\/\\]+)$/g;
                var result = reg.exec(pathStr.replace(/(\/|\\)$/, ''));
                if (!result)
                    return null;
                var baseName = result[2];
                if (extname && pathStr.substring(pathStr.length - extname.length).toLowerCase() === extname.toLowerCase())
                    return baseName.substring(0, baseName.length - extname.length);
                return baseName;
            },
            dirname: function dirname(pathStr) {
                var temp = DIRNAME_RE.exec(pathStr);
                return temp ? temp[2] : '';
            },
            changeExtname: function changeExtname(pathStr, extname) {
                extname = extname || '';
                var index = pathStr.indexOf('?');
                var tempStr = '';
                if (index > 0) {
                    tempStr = pathStr.substring(index);
                    pathStr = pathStr.substring(0, index);
                }
                index = pathStr.lastIndexOf('.');
                if (index < 0)
                    return pathStr + extname + tempStr;
                return pathStr.substring(0, index) + extname + tempStr;
            },
            changeBasename: function changeBasename(pathStr, basename, isSameExt) {
                if (basename.indexOf('.') === 0)
                    return this.changeExtname(pathStr, basename);
                var index = pathStr.indexOf('?');
                var tempStr = '';
                var ext = isSameExt ? this.extname(pathStr) : '';
                if (index > 0) {
                    tempStr = pathStr.substring(index);
                    pathStr = pathStr.substring(0, index);
                }
                index = pathStr.lastIndexOf('/');
                index = index <= 0 ? 0 : index + 1;
                return pathStr.substring(0, index) + basename + ext + tempStr;
            },
            _normalize: function _normalize(url) {
                var oldUrl = url = String(url);
                do {
                    oldUrl = url;
                    url = url.replace(NORMALIZE_RE, '');
                } while (oldUrl.length !== url.length);
                return url;
            },
            sep: cc.sys.os === cc.sys.OS_WINDOWS ? '\\' : '/',
            stripSep: function stripSep(path) {
                return path.replace(/[\/\\]$/, '');
            }
        };
        module.exports = cc.path;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUGF0aC5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvY29yZS91dGlscy9DQ1BhdGguanMiXSwibmFtZXMiOlsicmVxdWlyZSIsIkVYVE5BTUVfUkUiLCJESVJOQU1FX1JFIiwiTk9STUFMSVpFX1JFIiwiY2MiLCJwYXRoIiwiam9pbiIsImwiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJyZXN1bHQiLCJpIiwicmVwbGFjZSIsImV4dG5hbWUiLCJwYXRoU3RyIiwidGVtcCIsImV4ZWMiLCJtYWluRmlsZU5hbWUiLCJmaWxlTmFtZSIsImlkeCIsImxhc3RJbmRleE9mIiwic3Vic3RyaW5nIiwiYmFzZW5hbWUiLCJpbmRleCIsImluZGV4T2YiLCJyZWciLCJiYXNlTmFtZSIsInRvTG93ZXJDYXNlIiwiZGlybmFtZSIsImNoYW5nZUV4dG5hbWUiLCJ0ZW1wU3RyIiwiY2hhbmdlQmFzZW5hbWUiLCJpc1NhbWVFeHQiLCJleHQiLCJfbm9ybWFsaXplIiwidXJsIiwib2xkVXJsIiwiU3RyaW5nIiwic2VwIiwic3lzIiwib3MiLCJPU19XSU5ET1dTIiwic3RyaXBTZXAiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkFBLE9BQUFBLENBQVEsbUJBQVJBO1FBRUEsSUFBSUMsVUFBQUEsR0FBYSwwQkFBakI7UUFDQSxJQUFJQyxVQUFBQSxHQUFhLGdDQUFqQjtRQUNBLElBQUlDLFlBQUFBLEdBQWUsa0JBQW5CO1FBUUFDLEVBQUFBLENBQUdDLElBQUhELEdBQWdDO0FBQUEsWUFRNUJFLElBQUFBLEVBQU0sU0FBQSxJQUFBLEdBQVk7QUFBQSxnQkFDZCxJQUFJQyxDQUFBQSxHQUFJQyxTQUFBQSxDQUFVQyxNQUFsQixDQURjO0FBQUEsZ0JBRWQsSUFB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dkIsR0FBRztBQUFBLG9CQUNDRCxNQUFBQSxHQUFTRCxHQUFUQyxDQUREO0FBQUEsb0JBRUNELEdBQUFBLEdBQU1BLEdBQUFBLENBQUl2QixPQUFKdUIsQ0FBWWhDLFlBQVpnQyxFQUEwQixFQUExQkEsQ0FBTkEsQ0FGRDtBQUFBLGlCQUFILFFBR1NDLE1BQUFBLENBQU8zQixNQUFQMkIsS0FBa0JELEdBQUFBLENBQUkxQixNQUgvQixFQUp1QjtBQUFBLGdCQVF2QixPQUFPMEIsR0FBUCxDQVJ1QjtBQUFBLGFBN0hDO0FBQUEsWUF5STVCRyxHQUFBQSxFQUFNbEMsRUFBQUEsQ0FBR21DLEdBQUhuQyxDQUFPb0MsRUFBUHBDLEtBQWNBLEVBQUFBLENBQUdtQyxHQUFIbkMsQ0FBT3FDLFVBQXJCckMsR0FBa0MsSUFBbENBLEdBQXlDLEdBekluQjtBQUFBLFlBNEk1QnNDLFFBQUFBLEVBNUk0QixTQUFBLFFBQUEsQ0E0SWxCckMsSUE1SWtCLEVBNElaO0FBQUEsZ0JBQ1osT0FBT0EsSUFBQUEsQ0FBS08sT0FBTFAsQ0FBYSxTQUFiQSxFQUF3QixFQUF4QkEsQ0FBUCxDQURZO0FBQUEsYUE1SVk7QUFBQSxTQUFoQ0Q7UUFpSkF1QyxNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQnZDLEVBQUFBLENBQUdDLElBQXBCc0MiLCJmaWxlIjoiQ0NQYXRoLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxucmVxdWlyZSgnLi4vcGxhdGZvcm0vQ0NTeXMnKTtcclxuXHJcbnZhciBFWFROQU1FX1JFID0gLyhcXC5bXlxcLlxcL1xcP1xcXFxdKikoXFw/LiopPyQvO1xyXG52YXIgRElSTkFNRV9SRSA9IC8oKC4qKShcXC98XFxcXHxcXFxcXFxcXCkpPyguKj9cXC4uKiQpPy87XHJcbnZhciBOT1JNQUxJWkVfUkUgPSAvW15cXC5cXC9dK1xcL1xcLlxcLlxcLy87XHJcblxyXG4vKipcclxuICogISNlbiBUaGUgbW9kdWxlIHByb3ZpZGVzIHV0aWxpdGllcyBmb3Igd29ya2luZyB3aXRoIGZpbGUgYW5kIGRpcmVjdG9yeSBwYXRoc1xyXG4gKiAhI3poIOeUqOS6juWkhOeQhuaWh+S7tuS4juebruW9leeahOi3r+W+hOeahOaooeWdl1xyXG4gKiBAY2xhc3MgcGF0aFxyXG4gKiBAc3RhdGljXHJcbiAqL1xyXG5jYy5wYXRoID0gLyoqIEBsZW5kcyBjYy5wYXRoIyAqL3tcclxuICAgIC8qKlxyXG4gICAgICogISNlbiBKb2luIHN0cmluZ3MgdG8gYmUgYSBwYXRoLlxyXG4gICAgICogISN6aCDmi7zmjqXlrZfnrKbkuLLkuLogUGF0aFxyXG4gICAgICogQG1ldGhvZCBqb2luXHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL3V0aWxzL0NDUGF0aC9qb2luLmpzfVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgam9pbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gXCJcIjtcclxuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICsgKHJlc3VsdCA9PT0gXCJcIiA/IFwiXCIgOiBcIi9cIikgKyBhcmd1bWVudHNbaV0pLnJlcGxhY2UoLyhcXC98XFxcXFxcXFwpJC8sIFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IHRoZSBleHQgbmFtZSBvZiBhIHBhdGggaW5jbHVkaW5nICcuJywgbGlrZSAnLnBuZycuXHJcbiAgICAgKiAhI3poIOi/lOWbniBQYXRoIOeahOaJqeWxleWQje+8jOWMheaLrCAnLifvvIzkvovlpoIgJy5wbmcn44CCXHJcbiAgICAgKiBAbWV0aG9kIGV4dG5hbWVcclxuICAgICAqIEBleGFtcGxlIHtAbGluayBjb2NvczJkL2NvcmUvdXRpbHMvQ0NQYXRoL2V4dG5hbWUuanN9XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFN0clxyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKi9cclxuICAgIGV4dG5hbWU6IGZ1bmN0aW9uIChwYXRoU3RyKSB7XHJcbiAgICAgICAgdmFyIHRlbXAgPSBFWFROQU1FX1JFLmV4ZWMocGF0aFN0cik7XHJcbiAgICAgICAgcmV0dXJuIHRlbXAgPyB0ZW1wWzFdIDogJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgdGhlIG1haW4gbmFtZSBvZiBhIGZpbGUgbmFtZVxyXG4gICAgICogISN6aCDojrflj5bmlofku7blkI3nmoTkuLvlkI3np7BcclxuICAgICAqIEBtZXRob2QgbWFpbkZpbGVOYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlsZU5hbWVcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICovXHJcbiAgICBtYWluRmlsZU5hbWU6IGZ1bmN0aW9uIChmaWxlTmFtZSkge1xyXG4gICAgICAgIGlmIChmaWxlTmFtZSkge1xyXG4gICAgICAgICAgICB2YXIgaWR4ID0gZmlsZU5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICBpZiAoaWR4ICE9PSAtMSlcclxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlTmFtZS5zdWJzdHJpbmcoMCwgaWR4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZpbGVOYW1lO1xyXG4gICAgfSxcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IHRoZSBmaWxlIG5hbWUgb2YgYSBmaWxlIHBhdGguXHJcbiAgICAgKiAhI3poIOiOt+WPluaWh+S7tui3r+W+hOeahOaWh+S7tuWQjeOAglxyXG4gICAgICogQG1ldGhvZCBiYXNlbmFtZVxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS91dGlscy9DQ1BhdGgvYmFzZW5hbWUuanN9XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFN0clxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtleHRuYW1lXVxyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKi9cclxuICAgIGJhc2VuYW1lOiBmdW5jdGlvbiAocGF0aFN0ciwgZXh0bmFtZSkge1xyXG4gICAgICAgIHZhciBpbmRleCA9IHBhdGhTdHIuaW5kZXhPZihcIj9cIik7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCkgcGF0aFN0ciA9IHBhdGhTdHIuc3Vic3RyaW5nKDAsIGluZGV4KTtcclxuICAgICAgICB2YXIgcmVnID0gLyhcXC98XFxcXCkoW15cXC9cXFxcXSspJC9nO1xyXG4gICAgICAgIHZhciByZXN1bHQgPSByZWcuZXhlYyhwYXRoU3RyLnJlcGxhY2UoLyhcXC98XFxcXCkkLywgXCJcIikpO1xyXG4gICAgICAgIGlmICghcmVzdWx0KSByZXR1cm4gbnVsbDtcclxuICAgICAgICB2YXIgYmFzZU5hbWUgPSByZXN1bHRbMl07XHJcbiAgICAgICAgaWYgKGV4dG5hbWUgJiYgcGF0aFN0ci5zdWJzdHJpbmcocGF0aFN0ci5sZW5ndGggLSBleHRuYW1lLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gZXh0bmFtZS50b0xvd2VyQ2FzZSgpKVxyXG4gICAgICAgICAgICByZXR1cm4gYmFzZU5hbWUuc3Vic3RyaW5nKDAsIGJhc2VOYW1lLmxlbmd0aCAtIGV4dG5hbWUubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gYmFzZU5hbWU7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgZGlybmFtZSBvZiBhIGZpbGUgcGF0aC5cclxuICAgICAqICEjemgg6I635Y+W5paH5Lu26Lev5b6E55qE55uu5b2V5ZCN44CCXHJcbiAgICAgKiBAbWV0aG9kIGRpcm5hbWVcclxuICAgICAqIEBleGFtcGxlIHtAbGluayBjb2NvczJkL2NvcmUvdXRpbHMvQ0NQYXRoL2Rpcm5hbWUuanN9XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFN0clxyXG4gICAgICogQHJldHVybnMgeyp9XHJcbiAgICAgKi9cclxuICAgIGRpcm5hbWU6IGZ1bmN0aW9uIChwYXRoU3RyKSB7XHJcbiAgICAgICAgdmFyIHRlbXAgPSBESVJOQU1FX1JFLmV4ZWMocGF0aFN0cik7XHJcbiAgICAgICAgcmV0dXJuIHRlbXAgPyB0ZW1wWzJdIDogJyc7XHJcbiAgICB9LFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogISNlbiBDaGFuZ2UgZXh0bmFtZSBvZiBhIGZpbGUgcGF0aC5cclxuICAgICAqICEjemgg5pu05pS55paH5Lu26Lev5b6E55qE5omp5bGV5ZCN44CCXHJcbiAgICAgKiBAbWV0aG9kIGNoYW5nZUV4dG5hbWVcclxuICAgICAqIEBleGFtcGxlIHtAbGluayBjb2NvczJkL2NvcmUvdXRpbHMvQ0NQYXRoL2NoYW5nZUV4dG5hbWUuanN9XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFN0clxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IFtleHRuYW1lXVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xyXG4gICAgY2hhbmdlRXh0bmFtZTogZnVuY3Rpb24gKHBhdGhTdHIsIGV4dG5hbWUpIHtcclxuICAgICAgICBleHRuYW1lID0gZXh0bmFtZSB8fCBcIlwiO1xyXG4gICAgICAgIHZhciBpbmRleCA9IHBhdGhTdHIuaW5kZXhPZihcIj9cIik7XHJcbiAgICAgICAgdmFyIHRlbXBTdHIgPSBcIlwiO1xyXG4gICAgICAgIGlmIChpbmRleCA+IDApIHtcclxuICAgICAgICAgICAgdGVtcFN0ciA9IHBhdGhTdHIuc3Vic3RyaW5nKGluZGV4KTtcclxuICAgICAgICAgICAgcGF0aFN0ciA9IHBhdGhTdHIuc3Vic3RyaW5nKDAsIGluZGV4KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaW5kZXggPSBwYXRoU3RyLmxhc3RJbmRleE9mKFwiLlwiKTtcclxuICAgICAgICBpZiAoaW5kZXggPCAwKSByZXR1cm4gcGF0aFN0ciArIGV4dG5hbWUgKyB0ZW1wU3RyO1xyXG4gICAgICAgIHJldHVybiBwYXRoU3RyLnN1YnN0cmluZygwLCBpbmRleCkgKyBleHRuYW1lICsgdGVtcFN0cjtcclxuICAgIH0sXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gQ2hhbmdlIGZpbGUgbmFtZSBvZiBhIGZpbGUgcGF0aC5cclxuICAgICAqICEjemgg5pu05pS55paH5Lu26Lev5b6E55qE5paH5Lu25ZCN44CCXHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL3V0aWxzL0NDUGF0aC9jaGFuZ2VCYXNlbmFtZS5qc31cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoU3RyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gYmFzZW5hbWVcclxuICAgICAqIEBwYXJhbSB7Qm9vbGVhbn0gW2lzU2FtZUV4dF1cclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIGNoYW5nZUJhc2VuYW1lOiBmdW5jdGlvbiAocGF0aFN0ciwgYmFzZW5hbWUsIGlzU2FtZUV4dCkge1xyXG4gICAgICAgIGlmIChiYXNlbmFtZS5pbmRleE9mKFwiLlwiKSA9PT0gMCkgcmV0dXJuIHRoaXMuY2hhbmdlRXh0bmFtZShwYXRoU3RyLCBiYXNlbmFtZSk7XHJcbiAgICAgICAgdmFyIGluZGV4ID0gcGF0aFN0ci5pbmRleE9mKFwiP1wiKTtcclxuICAgICAgICB2YXIgdGVtcFN0ciA9IFwiXCI7XHJcbiAgICAgICAgdmFyIGV4dCA9IGlzU2FtZUV4dCA/IHRoaXMuZXh0bmFtZShwYXRoU3RyKSA6IFwiXCI7XHJcbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xyXG4gICAgICAgICAgICB0ZW1wU3RyID0gcGF0aFN0ci5zdWJzdHJpbmcoaW5kZXgpO1xyXG4gICAgICAgICAgICBwYXRoU3RyID0gcGF0aFN0ci5zdWJzdHJpbmcoMCwgaW5kZXgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpbmRleCA9IHBhdGhTdHIubGFzdEluZGV4T2YoXCIvXCIpO1xyXG4gICAgICAgIGluZGV4ID0gaW5kZXggPD0gMCA/IDAgOiBpbmRleCArIDE7XHJcbiAgICAgICAgcmV0dXJuIHBhdGhTdHIuc3Vic3RyaW5nKDAsIGluZGV4KSArIGJhc2VuYW1lICsgZXh0ICsgdGVtcFN0cjtcclxuICAgIH0sXHJcbiAgICAvL3RvZG8gbWFrZSBwdWJsaWMgYWZ0ZXIgdmVyaWZpY2F0aW9uXHJcbiAgICBfbm9ybWFsaXplOiBmdW5jdGlvbiAodXJsKSB7XHJcbiAgICAgICAgdmFyIG9sZFVybCA9IHVybCA9IFN0cmluZyh1cmwpO1xyXG5cclxuICAgICAgICAvL3JlbW92aW5nIGFsbCAuLi9cclxuICAgICAgICBkbyB7XHJcbiAgICAgICAgICAgIG9sZFVybCA9IHVybDtcclxuICAgICAgICAgICAgdXJsID0gdXJsLnJlcGxhY2UoTk9STUFMSVpFX1JFLCBcIlwiKTtcclxuICAgICAgICB9IHdoaWxlIChvbGRVcmwubGVuZ3RoICE9PSB1cmwubGVuZ3RoKTtcclxuICAgICAgICByZXR1cm4gdXJsO1xyXG4gICAgfSxcclxuXHJcbiAgICAvLyBUaGUgcGxhdGZvcm0tc3BlY2lmaWMgZmlsZSBzZXBhcmF0b3IuICdcXFxcJyBvciAnLycuXHJcbiAgICBzZXA6IChjYy5zeXMub3MgPT09IGNjLnN5cy5PU19XSU5ET1dTID8gJ1xcXFwnIDogJy8nKSxcclxuXHJcbiAgICAvLyBAcGFyYW0ge3N0cmluZ30gcGF0aFxyXG4gICAgc3RyaXBTZXAgKHBhdGgpIHtcclxuICAgICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9bXFwvXFxcXF0kLywgJycpO1xyXG4gICAgfVxyXG59O1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBjYy5wYXRoOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG5cbnJlcXVpcmUoJy4uL3BsYXRmb3JtL0NDU3lzJyk7XG5cbnZhciBFWFROQU1FX1JFID0gLyhcXC5bXlxcLlxcL1xcP1xcXFxdKikoXFw/LiopPyQvO1xudmFyIERJUk5BTUVfUkUgPSAvKCguKikoXFwvfFxcXFx8XFxcXFxcXFwpKT8oLio/XFwuLiokKT8vO1xudmFyIE5PUk1BTElaRV9SRSA9IC9bXlxcLlxcL10rXFwvXFwuXFwuXFwvLztcblxuLyoqXHJcbiAqICEjZW4gVGhlIG1vZHVsZSBwcm92aWRlcyB1dGlsaXRpZXMgZm9yIHdvcmtpbmcgd2l0aCBmaWxlIGFuZCBkaXJlY3RvcnkgcGF0aHNcclxuICogISN6aCDnlKjkuo7lpITnkIbmlofku7bkuI7nm67lvZXnmoTot6/lvoTnmoTmqKHlnZdcclxuICogQGNsYXNzIHBhdGhcclxuICogQHN0YXRpY1xyXG4gKi9cbmNjLnBhdGggPSAvKiogQGxlbmRzIGNjLnBhdGgjICove1xuICAgIC8qKlxyXG4gICAgICogISNlbiBKb2luIHN0cmluZ3MgdG8gYmUgYSBwYXRoLlxyXG4gICAgICogISN6aCDmi7zmjqXlrZfnrKbkuLLkuLogUGF0aFxyXG4gICAgICogQG1ldGhvZCBqb2luXHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL3V0aWxzL0NDUGF0aC9qb2luLmpzfVxyXG4gICAgICogQHJldHVybnMge1N0cmluZ31cclxuICAgICAqL1xuICAgIGpvaW46IGZ1bmN0aW9uIGpvaW4oKSB7XG4gICAgICAgIHZhciBsID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJlc3VsdCA9IFwiXCI7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgPSAocmVzdWx0ICsgKHJlc3VsdCA9PT0gXCJcIiA/IFwiXCIgOiBcIi9cIikgKyBhcmd1bWVudHNbaV0pLnJlcGxhY2UoLyhcXC98XFxcXFxcXFwpJC8sIFwiXCIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgdGhlIGV4dCBuYW1lIG9mIGEgcGF0aCBpbmNsdWRpbmcgJy4nLCBsaWtlICcucG5nJy5cclxuICAgICAqICEjemgg6L+U5ZueIFBhdGgg55qE5omp5bGV5ZCN77yM5YyF5ousICcuJ++8jOS+i+WmgiAnLnBuZyfjgIJcclxuICAgICAqIEBtZXRob2QgZXh0bmFtZVxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS91dGlscy9DQ1BhdGgvZXh0bmFtZS5qc31cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoU3RyXHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqL1xuICAgIGV4dG5hbWU6IGZ1bmN0aW9uIGV4dG5hbWUocGF0aFN0cikge1xuICAgICAgICB2YXIgdGVtcCA9IEVYVE5BTUVfUkUuZXhlYyhwYXRoU3RyKTtcbiAgICAgICAgcmV0dXJuIHRlbXAgPyB0ZW1wWzFdIDogJyc7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgdGhlIG1haW4gbmFtZSBvZiBhIGZpbGUgbmFtZVxyXG4gICAgICogISN6aCDojrflj5bmlofku7blkI3nmoTkuLvlkI3np7BcclxuICAgICAqIEBtZXRob2QgbWFpbkZpbGVOYW1lXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gZmlsZU5hbWVcclxuICAgICAqIEByZXR1cm5zIHtTdHJpbmd9XHJcbiAgICAgKiBAZGVwcmVjYXRlZFxyXG4gICAgICovXG4gICAgbWFpbkZpbGVOYW1lOiBmdW5jdGlvbiBtYWluRmlsZU5hbWUoZmlsZU5hbWUpIHtcbiAgICAgICAgaWYgKGZpbGVOYW1lKSB7XG4gICAgICAgICAgICB2YXIgaWR4ID0gZmlsZU5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xuICAgICAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHJldHVybiBmaWxlTmFtZS5zdWJzdHJpbmcoMCwgaWR4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmlsZU5hbWU7XG4gICAgfSxcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBHZXQgdGhlIGZpbGUgbmFtZSBvZiBhIGZpbGUgcGF0aC5cclxuICAgICAqICEjemgg6I635Y+W5paH5Lu26Lev5b6E55qE5paH5Lu25ZCN44CCXHJcbiAgICAgKiBAbWV0aG9kIGJhc2VuYW1lXHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL3V0aWxzL0NDUGF0aC9iYXNlbmFtZS5qc31cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoU3RyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2V4dG5hbWVdXHJcbiAgICAgKiBAcmV0dXJucyB7Kn1cclxuICAgICAqL1xuICAgIGJhc2VuYW1lOiBmdW5jdGlvbiBiYXNlbmFtZShwYXRoU3RyLCBleHRuYW1lKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHBhdGhTdHIuaW5kZXhPZihcIj9cIik7XG4gICAgICAgIGlmIChpbmRleCA+IDApIHBhdGhTdHIgPSBwYXRoU3RyLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIHZhciByZWcgPSAvKFxcL3xcXFxcKShbXlxcL1xcXFxdKykkL2c7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWcuZXhlYyhwYXRoU3RyLnJlcGxhY2UoLyhcXC98XFxcXCkkLywgXCJcIikpO1xuICAgICAgICBpZiAoIXJlc3VsdCkgcmV0dXJuIG51bGw7XG4gICAgICAgIHZhciBiYXNlTmFtZSA9IHJlc3VsdFsyXTtcbiAgICAgICAgaWYgKGV4dG5hbWUgJiYgcGF0aFN0ci5zdWJzdHJpbmcocGF0aFN0ci5sZW5ndGggLSBleHRuYW1lLmxlbmd0aCkudG9Mb3dlckNhc2UoKSA9PT0gZXh0bmFtZS50b0xvd2VyQ2FzZSgpKSByZXR1cm4gYmFzZU5hbWUuc3Vic3RyaW5nKDAsIGJhc2VOYW1lLmxlbmd0aCAtIGV4dG5hbWUubGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIGJhc2VOYW1lO1xuICAgIH0sXG5cbiAgICAvKipcclxuICAgICAqICEjZW4gR2V0IGRpcm5hbWUgb2YgYSBmaWxlIHBhdGguXHJcbiAgICAgKiAhI3poIOiOt+WPluaWh+S7tui3r+W+hOeahOebruW9leWQjeOAglxyXG4gICAgICogQG1ldGhvZCBkaXJuYW1lXHJcbiAgICAgKiBAZXhhbXBsZSB7QGxpbmsgY29jb3MyZC9jb3JlL3V0aWxzL0NDUGF0aC9kaXJuYW1lLmpzfVxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IHBhdGhTdHJcclxuICAgICAqIEByZXR1cm5zIHsqfVxyXG4gICAgICovXG4gICAgZGlybmFtZTogZnVuY3Rpb24gZGlybmFtZShwYXRoU3RyKSB7XG4gICAgICAgIHZhciB0ZW1wID0gRElSTkFNRV9SRS5leGVjKHBhdGhTdHIpO1xuICAgICAgICByZXR1cm4gdGVtcCA/IHRlbXBbMl0gOiAnJztcbiAgICB9LFxuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIENoYW5nZSBleHRuYW1lIG9mIGEgZmlsZSBwYXRoLlxyXG4gICAgICogISN6aCDmm7TmlLnmlofku7bot6/lvoTnmoTmianlsZXlkI3jgIJcclxuICAgICAqIEBtZXRob2QgY2hhbmdlRXh0bmFtZVxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS91dGlscy9DQ1BhdGgvY2hhbmdlRXh0bmFtZS5qc31cclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBwYXRoU3RyXHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gW2V4dG5hbWVdXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXG4gICAgY2hhbmdlRXh0bmFtZTogZnVuY3Rpb24gY2hhbmdlRXh0bmFtZShwYXRoU3RyLCBleHRuYW1lKSB7XG4gICAgICAgIGV4dG5hbWUgPSBleHRuYW1lIHx8IFwiXCI7XG4gICAgICAgIHZhciBpbmRleCA9IHBhdGhTdHIuaW5kZXhPZihcIj9cIik7XG4gICAgICAgIHZhciB0ZW1wU3RyID0gXCJcIjtcbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgdGVtcFN0ciA9IHBhdGhTdHIuc3Vic3RyaW5nKGluZGV4KTtcbiAgICAgICAgICAgIHBhdGhTdHIgPSBwYXRoU3RyLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBwYXRoU3RyLmxhc3RJbmRleE9mKFwiLlwiKTtcbiAgICAgICAgaWYgKGluZGV4IDwgMCkgcmV0dXJuIHBhdGhTdHIgKyBleHRuYW1lICsgdGVtcFN0cjtcbiAgICAgICAgcmV0dXJuIHBhdGhTdHIuc3Vic3RyaW5nKDAsIGluZGV4KSArIGV4dG5hbWUgKyB0ZW1wU3RyO1xuICAgIH0sXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIENoYW5nZSBmaWxlIG5hbWUgb2YgYSBmaWxlIHBhdGguXHJcbiAgICAgKiAhI3poIOabtOaUueaWh+S7tui3r+W+hOeahOaWh+S7tuWQjeOAglxyXG4gICAgICogQGV4YW1wbGUge0BsaW5rIGNvY29zMmQvY29yZS91dGlscy9DQ1BhdGgvY2hhbmdlQmFzZW5hbWUuanN9XHJcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gcGF0aFN0clxyXG4gICAgICogQHBhcmFtIHtTdHJpbmd9IGJhc2VuYW1lXHJcbiAgICAgKiBAcGFyYW0ge0Jvb2xlYW59IFtpc1NhbWVFeHRdXHJcbiAgICAgKiBAcmV0dXJucyB7U3RyaW5nfVxyXG4gICAgICovXG4gICAgY2hhbmdlQmFzZW5hbWU6IGZ1bmN0aW9uIGNoYW5nZUJhc2VuYW1lKHBhdGhTdHIsIGJhc2VuYW1lLCBpc1NhbWVFeHQpIHtcbiAgICAgICAgaWYgKGJhc2VuYW1lLmluZGV4T2YoXCIuXCIpID09PSAwKSByZXR1cm4gdGhpcy5jaGFuZ2VFeHRuYW1lKHBhdGhTdHIsIGJhc2VuYW1lKTtcbiAgICAgICAgdmFyIGluZGV4ID0gcGF0aFN0ci5pbmRleE9mKFwiP1wiKTtcbiAgICAgICAgdmFyIHRlbXBTdHIgPSBcIlwiO1xuICAgICAgICB2YXIgZXh0ID0gaXNTYW1lRXh0ID8gdGhpcy5leHRuYW1lKHBhdGhTdHIpIDogXCJcIjtcbiAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgdGVtcFN0ciA9IHBhdGhTdHIuc3Vic3RyaW5nKGluZGV4KTtcbiAgICAgICAgICAgIHBhdGhTdHIgPSBwYXRoU3RyLnN1YnN0cmluZygwLCBpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgaW5kZXggPSBwYXRoU3RyLmxhc3RJbmRleE9mKFwiL1wiKTtcbiAgICAgICAgaW5kZXggPSBpbmRleCA8PSAwID8gMCA6IGluZGV4ICsgMTtcbiAgICAgICAgcmV0dXJuIHBhdGhTdHIuc3Vic3RyaW5nKDAsIGluZGV4KSArIGJhc2VuYW1lICsgZXh0ICsgdGVtcFN0cjtcbiAgICB9LFxuICAgIC8vdG9kbyBtYWtlIHB1YmxpYyBhZnRlciB2ZXJpZmljYXRpb25cbiAgICBfbm9ybWFsaXplOiBmdW5jdGlvbiBfbm9ybWFsaXplKHVybCkge1xuICAgICAgICB2YXIgb2xkVXJsID0gdXJsID0gU3RyaW5nKHVybCk7XG5cbiAgICAgICAgLy9yZW1vdmluZyBhbGwgLi4vXG4gICAgICAgIGRvIHtcbiAgICAgICAgICAgIG9sZFVybCA9IHVybDtcbiAgICAgICAgICAgIHVybCA9IHVybC5yZXBsYWNlKE5PUk1BTElaRV9SRSwgXCJcIik7XG4gICAgICAgIH0gd2hpbGUgKG9sZFVybC5sZW5ndGggIT09IHVybC5sZW5ndGgpO1xuICAgICAgICByZXR1cm4gdXJsO1xuICAgIH0sXG5cbiAgICAvLyBUaGUgcGxhdGZvcm0tc3BlY2lmaWMgZmlsZSBzZXBhcmF0b3IuICdcXFxcJyBvciAnLycuXG4gICAgc2VwOiBjYy5zeXMub3MgPT09IGNjLnN5cy5PU19XSU5ET1dTID8gJ1xcXFwnIDogJy8nLFxuXG4gICAgLy8gQHBhcmFtIHtzdHJpbmd9IHBhdGhcbiAgICBzdHJpcFNlcDogZnVuY3Rpb24gc3RyaXBTZXAocGF0aCkge1xuICAgICAgICByZXR1cm4gcGF0aC5yZXBsYWNlKC9bXFwvXFxcXF0kLywgJycpO1xuICAgIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gY2MucGF0aDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxleUoyWlhKemFXOXVJam96TENKemIzVnlZMlZ6SWpwYklrTkRVR0YwYUM1cWN5SmRMQ0p1WVcxbGN5STZXeUp5WlhGMWFYSmxJaXdpUlZoVVRrRk5SVjlTUlNJc0lrUkpVazVCVFVWZlVrVWlMQ0pPVDFKTlFVeEpXa1ZmVWtVaUxDSmpZeUlzSW5CaGRHZ2lMQ0pxYjJsdUlpd2liQ0lzSW1GeVozVnRaVzUwY3lJc0lteGxibWQwYUNJc0luSmxjM1ZzZENJc0lta2lMQ0p5WlhCc1lXTmxJaXdpWlhoMGJtRnRaU0lzSW5CaGRHaFRkSElpTENKMFpXMXdJaXdpWlhobFl5SXNJbTFoYVc1R2FXeGxUbUZ0WlNJc0ltWnBiR1ZPWVcxbElpd2lhV1I0SWl3aWJHRnpkRWx1WkdWNFQyWWlMQ0p6ZFdKemRISnBibWNpTENKaVlYTmxibUZ0WlNJc0ltbHVaR1Y0SWl3aWFXNWtaWGhQWmlJc0luSmxaeUlzSW1KaGMyVk9ZVzFsSWl3aWRHOU1iM2RsY2tOaGMyVWlMQ0prYVhKdVlXMWxJaXdpWTJoaGJtZGxSWGgwYm1GdFpTSXNJblJsYlhCVGRISWlMQ0pqYUdGdVoyVkNZWE5sYm1GdFpTSXNJbWx6VTJGdFpVVjRkQ0lzSW1WNGRDSXNJbDl1YjNKdFlXeHBlbVVpTENKMWNtd2lMQ0p2YkdSVmNtd2lMQ0pUZEhKcGJtY2lMQ0p6WlhBaUxDSnplWE1pTENKdmN5SXNJazlUWDFkSlRrUlBWMU1pTENKemRISnBjRk5sY0NJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJNRUpCUVN4UlFVRlJMRzFDUVVGU096dEJRVVZCTEVsQlFVbERMR0ZCUVdFc01FSkJRV3BDTzBGQlEwRXNTVUZCU1VNc1lVRkJZU3huUTBGQmFrSTdRVUZEUVN4SlFVRkpReXhsUVVGbExHdENRVUZ1UWpzN1FVRkZRVHM3T3pzN08wRkJUVUZETEVkQlFVZERMRWxCUVVnc1IwRkJWU3h6UWtGQmMwSTdRVUZETlVJN096czdPenM3UVVGUFFVTXNWVUZCVFN4blFrRkJXVHRCUVVOa0xGbEJRVWxETEVsQlFVbERMRlZCUVZWRExFMUJRV3hDTzBGQlEwRXNXVUZCU1VNc1UwRkJVeXhGUVVGaU8wRkJRMEVzWVVGQlN5eEpRVUZKUXl4SlFVRkpMRU5CUVdJc1JVRkJaMEpCTEVsQlFVbEtMRU5CUVhCQ0xFVkJRWFZDU1N4SFFVRjJRaXhGUVVFMFFqdEJRVU40UWtRc2NVSkJRVk1zUTBGQlEwRXNWVUZCVlVFc1YwRkJWeXhGUVVGWUxFZEJRV2RDTEVWQlFXaENMRWRCUVhGQ0xFZEJRUzlDTEVsQlFYTkRSaXhWUVVGVlJ5eERRVUZXTEVOQlFYWkRMRVZCUVhGRVF5eFBRVUZ5UkN4RFFVRTJSQ3haUVVFM1JDeEZRVUV5UlN4RlFVRXpSU3hEUVVGVU8wRkJRMGc3UVVGRFJDeGxRVUZQUml4TlFVRlFPMEZCUTBnc1MwRm1Na0k3TzBGQmFVSTFRanM3T3pzN096czdRVUZSUVVjc1lVRkJVeXhwUWtGQlZVTXNUMEZCVml4RlFVRnRRanRCUVVONFFpeFpRVUZKUXl4UFFVRlBaQ3hYUVVGWFpTeEpRVUZZTEVOQlFXZENSaXhQUVVGb1FpeERRVUZZTzBGQlEwRXNaVUZCVDBNc1QwRkJUMEVzUzBGQlN5eERRVUZNTEVOQlFWQXNSMEZCYVVJc1JVRkJlRUk3UVVGRFNDeExRVFZDTWtJN08wRkJPRUkxUWpzN096czdPenM3UVVGUlFVVXNhMEpCUVdNc2MwSkJRVlZETEZGQlFWWXNSVUZCYjBJN1FVRkRPVUlzV1VGQlNVRXNVVUZCU2l4RlFVRmpPMEZCUTFZc1owSkJRVWxETEUxQlFVMUVMRk5CUVZORkxGZEJRVlFzUTBGQmNVSXNSMEZCY2tJc1EwRkJWanRCUVVOQkxHZENRVUZKUkN4UlFVRlJMRU5CUVVNc1EwRkJZaXhGUVVOSkxFOUJRVTlFTEZOQlFWTkhMRk5CUVZRc1EwRkJiVUlzUTBGQmJrSXNSVUZCYzBKR0xFZEJRWFJDTEVOQlFWQTdRVUZEVUR0QlFVTkVMR1ZCUVU5RUxGRkJRVkE3UVVGRFNDeExRVGRETWtJN08wRkJLME0xUWpzN096czdPenM3TzBGQlUwRkpMR05CUVZVc2EwSkJRVlZTTEU5QlFWWXNSVUZCYlVKRUxFOUJRVzVDTEVWQlFUUkNPMEZCUTJ4RExGbEJRVWxWTEZGQlFWRlVMRkZCUVZGVkxFOUJRVklzUTBGQlowSXNSMEZCYUVJc1EwRkJXanRCUVVOQkxGbEJRVWxFTEZGQlFWRXNRMEZCV2l4RlFVRmxWQ3hWUVVGVlFTeFJRVUZSVHl4VFFVRlNMRU5CUVd0Q0xFTkJRV3hDTEVWQlFYRkNSU3hMUVVGeVFpeERRVUZXTzBGQlEyWXNXVUZCU1VVc1RVRkJUU3h4UWtGQlZqdEJRVU5CTEZsQlFVbG1MRk5CUVZObExFbEJRVWxVTEVsQlFVb3NRMEZCVTBZc1VVRkJVVVlzVDBGQlVpeERRVUZuUWl4VlFVRm9RaXhGUVVFMFFpeEZRVUUxUWl4RFFVRlVMRU5CUVdJN1FVRkRRU3haUVVGSkxFTkJRVU5HTEUxQlFVd3NSVUZCWVN4UFFVRlBMRWxCUVZBN1FVRkRZaXhaUVVGSlowSXNWMEZCVjJoQ0xFOUJRVThzUTBGQlVDeERRVUZtTzBGQlEwRXNXVUZCU1Vjc1YwRkJWME1zVVVGQlVVOHNVMEZCVWl4RFFVRnJRbEFzVVVGQlVVd3NUVUZCVWl4SFFVRnBRa2tzVVVGQlVVb3NUVUZCTTBNc1JVRkJiVVJyUWl4WFFVRnVSQ3hQUVVGeFJXUXNVVUZCVVdNc1YwRkJVaXhGUVVGd1JpeEZRVU5KTEU5QlFVOUVMRk5CUVZOTUxGTkJRVlFzUTBGQmJVSXNRMEZCYmtJc1JVRkJjMEpMTEZOQlFWTnFRaXhOUVVGVUxFZEJRV3RDU1N4UlFVRlJTaXhOUVVGb1JDeERRVUZRTzBGQlEwb3NaVUZCVDJsQ0xGRkJRVkE3UVVGRFNDeExRV3hGTWtJN08wRkJiMFUxUWpzN096czdPenM3UVVGUlFVVXNZVUZCVXl4cFFrRkJWV1FzVDBGQlZpeEZRVUZ0UWp0QlFVTjRRaXhaUVVGSlF5eFBRVUZQWWl4WFFVRlhZeXhKUVVGWUxFTkJRV2RDUml4UFFVRm9RaXhEUVVGWU8wRkJRMEVzWlVGQlQwTXNUMEZCVDBFc1MwRkJTeXhEUVVGTUxFTkJRVkFzUjBGQmFVSXNSVUZCZUVJN1FVRkRTQ3hMUVM5Rk1rSTdPMEZCYVVZMVFqczdPenM3T3pzN08wRkJVMEZqTEcxQ1FVRmxMSFZDUVVGVlppeFBRVUZXTEVWQlFXMUNSQ3hQUVVGdVFpeEZRVUUwUWp0QlFVTjJRMEVzYTBKQlFWVkJMRmRCUVZjc1JVRkJja0k3UVVGRFFTeFpRVUZKVlN4UlFVRlJWQ3hSUVVGUlZTeFBRVUZTTEVOQlFXZENMRWRCUVdoQ0xFTkJRVm83UVVGRFFTeFpRVUZKVFN4VlFVRlZMRVZCUVdRN1FVRkRRU3haUVVGSlVDeFJRVUZSTEVOQlFWb3NSVUZCWlR0QlFVTllUeXh6UWtGQlZXaENMRkZCUVZGUExGTkJRVklzUTBGQmEwSkZMRXRCUVd4Q0xFTkJRVlk3UVVGRFFWUXNjMEpCUVZWQkxGRkJRVkZQTEZOQlFWSXNRMEZCYTBJc1EwRkJiRUlzUlVGQmNVSkZMRXRCUVhKQ0xFTkJRVlk3UVVGRFNEdEJRVU5FUVN4blFrRkJVVlFzVVVGQlVVMHNWMEZCVWl4RFFVRnZRaXhIUVVGd1FpeERRVUZTTzBGQlEwRXNXVUZCU1Vjc1VVRkJVU3hEUVVGYUxFVkJRV1VzVDBGQlQxUXNWVUZCVlVRc1QwRkJWaXhIUVVGdlFtbENMRTlCUVROQ08wRkJRMllzWlVGQlQyaENMRkZCUVZGUExGTkJRVklzUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUpGTEV0QlFYSkNMRWxCUVRoQ1ZpeFBRVUU1UWl4SFFVRjNRMmxDTEU5QlFTOURPMEZCUTBnc1MwRnlSekpDTzBGQmMwYzFRanM3T3pzN096czdPMEZCVTBGRExHOUNRVUZuUWl4M1FrRkJWV3BDTEU5QlFWWXNSVUZCYlVKUkxGRkJRVzVDTEVWQlFUWkNWU3hUUVVFM1FpeEZRVUYzUXp0QlFVTndSQ3haUVVGSlZpeFRRVUZUUlN4UFFVRlVMRU5CUVdsQ0xFZEJRV3BDTEUxQlFUQkNMRU5CUVRsQ0xFVkJRV2xETEU5QlFVOHNTMEZCUzBzc1lVRkJUQ3hEUVVGdFFtWXNUMEZCYmtJc1JVRkJORUpSTEZGQlFUVkNMRU5CUVZBN1FVRkRha01zV1VGQlNVTXNVVUZCVVZRc1VVRkJVVlVzVDBGQlVpeERRVUZuUWl4SFFVRm9RaXhEUVVGYU8wRkJRMEVzV1VGQlNVMHNWVUZCVlN4RlFVRmtPMEZCUTBFc1dVRkJTVWNzVFVGQlRVUXNXVUZCV1N4TFFVRkxia0lzVDBGQlRDeERRVUZoUXl4UFFVRmlMRU5CUVZvc1IwRkJiME1zUlVGQk9VTTdRVUZEUVN4WlFVRkpVeXhSUVVGUkxFTkJRVm9zUlVGQlpUdEJRVU5ZVHl4elFrRkJWV2hDTEZGQlFWRlBMRk5CUVZJc1EwRkJhMEpGTEV0QlFXeENMRU5CUVZZN1FVRkRRVlFzYzBKQlFWVkJMRkZCUVZGUExGTkJRVklzUTBGQmEwSXNRMEZCYkVJc1JVRkJjVUpGTEV0QlFYSkNMRU5CUVZZN1FVRkRTRHRCUVVORVFTeG5Ra0ZCVVZRc1VVRkJVVTBzVjBGQlVpeERRVUZ2UWl4SFFVRndRaXhEUVVGU08wRkJRMEZITEdkQ1FVRlJRU3hUUVVGVExFTkJRVlFzUjBGQllTeERRVUZpTEVkQlFXbENRU3hSUVVGUkxFTkJRV3BETzBGQlEwRXNaVUZCVDFRc1VVRkJVVThzVTBGQlVpeERRVUZyUWl4RFFVRnNRaXhGUVVGeFFrVXNTMEZCY2tJc1NVRkJPRUpFTEZGQlFUbENMRWRCUVhsRFZ5eEhRVUY2UXl4SFFVRXJRMGdzVDBGQmRFUTdRVUZEU0N4TFFUTklNa0k3UVVFMFNEVkNPMEZCUTBGSkxHZENRVUZaTEc5Q1FVRlZReXhIUVVGV0xFVkJRV1U3UVVGRGRrSXNXVUZCU1VNc1UwRkJVMFFzVFVGQlRVVXNUMEZCVDBZc1IwRkJVQ3hEUVVGdVFqczdRVUZGUVR0QlFVTkJMRmRCUVVjN1FVRkRRME1zY1VKQlFWTkVMRWRCUVZRN1FVRkRRVUVzYTBKQlFVMUJMRWxCUVVsMlFpeFBRVUZLTEVOQlFWbFVMRmxCUVZvc1JVRkJNRUlzUlVGQk1VSXNRMEZCVGp0QlFVTklMRk5CU0VRc1VVRkhVMmxETEU5QlFVOHpRaXhOUVVGUUxFdEJRV3RDTUVJc1NVRkJTVEZDTEUxQlNDOUNPMEZCU1VFc1pVRkJUekJDTEVkQlFWQTdRVUZEU0N4TFFYUkpNa0k3TzBGQmQwazFRanRCUVVOQlJ5eFRRVUZOYkVNc1IwRkJSMjFETEVkQlFVZ3NRMEZCVDBNc1JVRkJVQ3hMUVVGamNFTXNSMEZCUjIxRExFZEJRVWdzUTBGQlQwVXNWVUZCY2tJc1IwRkJhME1zU1VGQmJFTXNSMEZCZVVNc1IwRjZTVzVDT3p0QlFUSkpOVUk3UVVGRFFVTXNXVUUxU1RSQ0xHOUNRVFJKYkVKeVF5eEpRVFZKYTBJc1JVRTBTVm83UVVGRFdpeGxRVUZQUVN4TFFVRkxUeXhQUVVGTUxFTkJRV0VzVTBGQllpeEZRVUYzUWl4RlFVRjRRaXhEUVVGUU8wRkJRMGc3UVVFNVNUSkNMRU5CUVdoRE96dEJRV2xLUVN0Q0xFOUJRVTlETEU5QlFWQXNSMEZCYVVKNFF5eEhRVUZIUXl4SlFVRndRaUlzSW1acGJHVWlPaUpEUTFCaGRHZ3Vhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh5WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxUSXdNVFlnUTJoMWEyOXVaeUJVWldOb2JtOXNiMmRwWlhNZ1NXNWpMbHh5WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdVhISmNibHh5WEc0Z2FIUjBjSE02THk5M2QzY3VZMjlqYjNNdVkyOXRMMXh5WEc1Y2NseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2NseHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh5WEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjY2x4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hISmNiaUFnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHlYRzRnSUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjY2x4dUlDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjY2x4dVhISmNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh5WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2NseHVYSEpjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYSEpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2NseHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4eVhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHlYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNjbHh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2NseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2NseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhISmNibHh5WEc1eVpYRjFhWEpsS0NjdUxpOXdiR0YwWm05eWJTOURRMU41Y3ljcE8xeHlYRzVjY2x4dWRtRnlJRVZZVkU1QlRVVmZVa1VnUFNBdktGeGNMbHRlWEZ3dVhGd3ZYRncvWEZ4Y1hGMHFLU2hjWEQ4dUtpay9KQzg3WEhKY2JuWmhjaUJFU1ZKT1FVMUZYMUpGSUQwZ0x5Z29MaW9wS0Z4Y0wzeGNYRnhjZkZ4Y1hGeGNYRnhjS1NrL0tDNHFQMXhjTGk0cUpDay9MenRjY2x4dWRtRnlJRTVQVWsxQlRFbGFSVjlTUlNBOUlDOWJYbHhjTGx4Y0wxMHJYRnd2WEZ3dVhGd3VYRnd2THp0Y2NseHVYSEpjYmk4cUtseHlYRzRnS2lBaEkyVnVJRlJvWlNCdGIyUjFiR1VnY0hKdmRtbGtaWE1nZFhScGJHbDBhV1Z6SUdadmNpQjNiM0pyYVc1bklIZHBkR2dnWm1sc1pTQmhibVFnWkdseVpXTjBiM0o1SUhCaGRHaHpYSEpjYmlBcUlDRWplbWdnNTVTbzVMcU81YVNFNTVDRzVwYUg1THUyNUxpTzU1dXU1YjJWNTVxRTZMZXY1YjZFNTVxRTVxaWg1WjJYWEhKY2JpQXFJRUJqYkdGemN5QndZWFJvWEhKY2JpQXFJRUJ6ZEdGMGFXTmNjbHh1SUNvdlhISmNibU5qTG5CaGRHZ2dQU0F2S2lvZ1FHeGxibVJ6SUdOakxuQmhkR2dqSUNvdmUxeHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlFcHZhVzRnYzNSeWFXNW5jeUIwYnlCaVpTQmhJSEJoZEdndVhISmNiaUFnSUNBZ0tpQWhJM3BvSU9hTHZPYU9wZVd0bCtlc3B1UzRzdVM0dWlCUVlYUm9YSEpjYmlBZ0lDQWdLaUJBYldWMGFHOWtJR3B2YVc1Y2NseHVJQ0FnSUNBcUlFQmxlR0Z0Y0d4bElIdEFiR2x1YXlCamIyTnZjekprTDJOdmNtVXZkWFJwYkhNdlEwTlFZWFJvTDJwdmFXNHVhbk45WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UzUnlhVzVuZlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCcWIybHVPaUJtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUd3Z1BTQmhjbWQxYldWdWRITXViR1Z1WjNSb08xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpYTjFiSFFnUFNCY0lsd2lPMXh5WEc0Z0lDQWdJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdPeUJwSUR3Z2JEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGMzVnNkQ0E5SUNoeVpYTjFiSFFnS3lBb2NtVnpkV3gwSUQwOVBTQmNJbHdpSUQ4Z1hDSmNJaUE2SUZ3aUwxd2lLU0FySUdGeVozVnRaVzUwYzF0cFhTa3VjbVZ3YkdGalpTZ3ZLRnhjTDN4Y1hGeGNYRnhjWENra0x5d2dYQ0pjSWlrN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUJ5WlhOMWJIUTdYSEpjYmlBZ0lDQjlMRnh5WEc1Y2NseHVJQ0FnSUM4cUtseHlYRzRnSUNBZ0lDb2dJU05sYmlCSFpYUWdkR2hsSUdWNGRDQnVZVzFsSUc5bUlHRWdjR0YwYUNCcGJtTnNkV1JwYm1jZ0p5NG5MQ0JzYVd0bElDY3VjRzVuSnk1Y2NseHVJQ0FnSUNBcUlDRWplbWdnNkwrVTVadWVJRkJoZEdnZzU1cUU1b21wNWJHVjVaQ043N3lNNVl5RjVvdXNJQ2N1SisrOGpPUytpK1dtZ2lBbkxuQnVaeWZqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1pYaDBibUZ0WlZ4eVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdVZ2UwQnNhVzVySUdOdlkyOXpNbVF2WTI5eVpTOTFkR2xzY3k5RFExQmhkR2d2WlhoMGJtRnRaUzVxYzMxY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd1lYUm9VM1J5WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN0tuMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdaWGgwYm1GdFpUb2dablZ1WTNScGIyNGdLSEJoZEdoVGRISXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdkR1Z0Y0NBOUlFVllWRTVCVFVWZlVrVXVaWGhsWXlod1lYUm9VM1J5S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVnRjQ0EvSUhSbGJYQmJNVjBnT2lBbkp6dGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUVkbGRDQjBhR1VnYldGcGJpQnVZVzFsSUc5bUlHRWdabWxzWlNCdVlXMWxYSEpjYmlBZ0lDQWdLaUFoSTNwb0lPaU90K1dQbHVhV2grUzd0dVdRamVlYWhPUzR1K1dRamVlbnNGeHlYRzRnSUNBZ0lDb2dRRzFsZEdodlpDQnRZV2x1Um1sc1pVNWhiV1ZjY2x4dUlDQWdJQ0FxSUVCd1lYSmhiU0I3VTNSeWFXNW5mU0JtYVd4bFRtRnRaVnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZTFOMGNtbHVaMzFjY2x4dUlDQWdJQ0FxSUVCa1pYQnlaV05oZEdWa1hISmNiaUFnSUNBZ0tpOWNjbHh1SUNBZ0lHMWhhVzVHYVd4bFRtRnRaVG9nWm5WdVkzUnBiMjRnS0dacGJHVk9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dacGJHVk9ZVzFsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhaaGNpQnBaSGdnUFNCbWFXeGxUbUZ0WlM1c1lYTjBTVzVrWlhoUFppaGNJaTVjSWlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDaHBaSGdnSVQwOUlDMHhLVnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnY21WMGRYSnVJR1pwYkdWT1lXMWxMbk4xWW5OMGNtbHVaeWd3TENCcFpIZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z1ptbHNaVTVoYldVN1hISmNiaUFnSUNCOUxGeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJIWlhRZ2RHaGxJR1pwYkdVZ2JtRnRaU0J2WmlCaElHWnBiR1VnY0dGMGFDNWNjbHh1SUNBZ0lDQXFJQ0VqZW1nZzZJNjM1WStXNXBhSDVMdTI2TGV2NWI2RTU1cUU1cGFINUx1MjVaQ040NENDWEhKY2JpQWdJQ0FnS2lCQWJXVjBhRzlrSUdKaGMyVnVZVzFsWEhKY2JpQWdJQ0FnS2lCQVpYaGhiWEJzWlNCN1FHeHBibXNnWTI5amIzTXlaQzlqYjNKbEwzVjBhV3h6TDBORFVHRjBhQzlpWVhObGJtRnRaUzVxYzMxY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd1lYUm9VM1J5WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnVzJWNGRHNWhiV1ZkWEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN0tuMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdZbUZ6Wlc1aGJXVTZJR1oxYm1OMGFXOXVJQ2h3WVhSb1UzUnlMQ0JsZUhSdVlXMWxLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJR2x1WkdWNElEMGdjR0YwYUZOMGNpNXBibVJsZUU5bUtGd2lQMXdpS1R0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQaUF3S1NCd1lYUm9VM1J5SUQwZ2NHRjBhRk4wY2k1emRXSnpkSEpwYm1jb01Dd2dhVzVrWlhncE8xeHlYRzRnSUNBZ0lDQWdJSFpoY2lCeVpXY2dQU0F2S0Z4Y0wzeGNYRnhjS1NoYlhseGNMMXhjWEZ4ZEt5a2tMMmM3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSEpsYzNWc2RDQTlJSEpsWnk1bGVHVmpLSEJoZEdoVGRISXVjbVZ3YkdGalpTZ3ZLRnhjTDN4Y1hGeGNLU1F2TENCY0lsd2lLU2s3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLQ0Z5WlhOMWJIUXBJSEpsZEhWeWJpQnVkV3hzTzF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUJpWVhObFRtRnRaU0E5SUhKbGMzVnNkRnN5WFR0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvWlhoMGJtRnRaU0FtSmlCd1lYUm9VM1J5TG5OMVluTjBjbWx1Wnlod1lYUm9VM1J5TG14bGJtZDBhQ0F0SUdWNGRHNWhiV1V1YkdWdVozUm9LUzUwYjB4dmQyVnlRMkZ6WlNncElEMDlQU0JsZUhSdVlXMWxMblJ2VEc5M1pYSkRZWE5sS0NrcFhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJpWVhObFRtRnRaUzV6ZFdKemRISnBibWNvTUN3Z1ltRnpaVTVoYldVdWJHVnVaM1JvSUMwZ1pYaDBibUZ0WlM1c1pXNW5kR2dwTzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCaVlYTmxUbUZ0WlR0Y2NseHVJQ0FnSUgwc1hISmNibHh5WEc0Z0lDQWdMeW9xWEhKY2JpQWdJQ0FnS2lBaEkyVnVJRWRsZENCa2FYSnVZVzFsSUc5bUlHRWdabWxzWlNCd1lYUm9MbHh5WEc0Z0lDQWdJQ29nSVNONmFDRG9qcmZsajVibWxvZmt1N2JvdDYvbHZvVG5tb1RubTY3bHZaWGxrSTNqZ0lKY2NseHVJQ0FnSUNBcUlFQnRaWFJvYjJRZ1pHbHlibUZ0WlZ4eVhHNGdJQ0FnSUNvZ1FHVjRZVzF3YkdVZ2UwQnNhVzVySUdOdlkyOXpNbVF2WTI5eVpTOTFkR2xzY3k5RFExQmhkR2d2WkdseWJtRnRaUzVxYzMxY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd1lYUm9VM1J5WEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN0tuMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdaR2x5Ym1GdFpUb2dablZ1WTNScGIyNGdLSEJoZEdoVGRISXBJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdkR1Z0Y0NBOUlFUkpVazVCVFVWZlVrVXVaWGhsWXlod1lYUm9VM1J5S1R0Y2NseHVJQ0FnSUNBZ0lDQnlaWFIxY200Z2RHVnRjQ0EvSUhSbGJYQmJNbDBnT2lBbkp6dGNjbHh1SUNBZ0lIMHNYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUVOb1lXNW5aU0JsZUhSdVlXMWxJRzltSUdFZ1ptbHNaU0J3WVhSb0xseHlYRzRnSUNBZ0lDb2dJU042YUNEbW03VG1sTG5tbG9ma3U3Ym90Ni9sdm9Ubm1vVG1pYW5sc1pYbGtJM2pnSUpjY2x4dUlDQWdJQ0FxSUVCdFpYUm9iMlFnWTJoaGJtZGxSWGgwYm1GdFpWeHlYRzRnSUNBZ0lDb2dRR1Y0WVcxd2JHVWdlMEJzYVc1cklHTnZZMjl6TW1RdlkyOXlaUzkxZEdsc2N5OURRMUJoZEdndlkyaGhibWRsUlhoMGJtRnRaUzVxYzMxY2NseHVJQ0FnSUNBcUlFQndZWEpoYlNCN1UzUnlhVzVuZlNCd1lYUm9VM1J5WEhKY2JpQWdJQ0FnS2lCQWNHRnlZVzBnZTFOMGNtbHVaMzBnVzJWNGRHNWhiV1ZkWEhKY2JpQWdJQ0FnS2lCQWNtVjBkWEp1Y3lCN1UzUnlhVzVuZlZ4eVhHNGdJQ0FnSUNvdlhISmNiaUFnSUNCamFHRnVaMlZGZUhSdVlXMWxPaUJtZFc1amRHbHZiaUFvY0dGMGFGTjBjaXdnWlhoMGJtRnRaU2tnZTF4eVhHNGdJQ0FnSUNBZ0lHVjRkRzVoYldVZ1BTQmxlSFJ1WVcxbElIeDhJRndpWENJN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUdsdVpHVjRJRDBnY0dGMGFGTjBjaTVwYm1SbGVFOW1LRndpUDF3aUtUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2RHVnRjRk4wY2lBOUlGd2lYQ0k3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2x1WkdWNElENGdNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwWlcxd1UzUnlJRDBnY0dGMGFGTjBjaTV6ZFdKemRISnBibWNvYVc1a1pYZ3BPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndZWFJvVTNSeUlEMGdjR0YwYUZOMGNpNXpkV0p6ZEhKcGJtY29NQ3dnYVc1a1pYZ3BPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQnBibVJsZUNBOUlIQmhkR2hUZEhJdWJHRnpkRWx1WkdWNFQyWW9YQ0l1WENJcE8xeHlYRzRnSUNBZ0lDQWdJR2xtSUNocGJtUmxlQ0E4SURBcElISmxkSFZ5YmlCd1lYUm9VM1J5SUNzZ1pYaDBibUZ0WlNBcklIUmxiWEJUZEhJN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIQmhkR2hUZEhJdWMzVmljM1J5YVc1bktEQXNJR2x1WkdWNEtTQXJJR1Y0ZEc1aGJXVWdLeUIwWlcxd1UzUnlPMXh5WEc0Z0lDQWdmU3hjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJEYUdGdVoyVWdabWxzWlNCdVlXMWxJRzltSUdFZ1ptbHNaU0J3WVhSb0xseHlYRzRnSUNBZ0lDb2dJU042YUNEbW03VG1sTG5tbG9ma3U3Ym90Ni9sdm9Ubm1vVG1sb2ZrdTdibGtJM2pnSUpjY2x4dUlDQWdJQ0FxSUVCbGVHRnRjR3hsSUh0QWJHbHVheUJqYjJOdmN6SmtMMk52Y21VdmRYUnBiSE12UTBOUVlYUm9MMk5vWVc1blpVSmhjMlZ1WVcxbExtcHpmVnh5WEc0Z0lDQWdJQ29nUUhCaGNtRnRJSHRUZEhKcGJtZDlJSEJoZEdoVGRISmNjbHh1SUNBZ0lDQXFJRUJ3WVhKaGJTQjdVM1J5YVc1bmZTQmlZWE5sYm1GdFpWeHlYRzRnSUNBZ0lDb2dRSEJoY21GdElIdENiMjlzWldGdWZTQmJhWE5UWVcxbFJYaDBYVnh5WEc0Z0lDQWdJQ29nUUhKbGRIVnlibk1nZTFOMGNtbHVaMzFjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnWTJoaGJtZGxRbUZ6Wlc1aGJXVTZJR1oxYm1OMGFXOXVJQ2h3WVhSb1UzUnlMQ0JpWVhObGJtRnRaU3dnYVhOVFlXMWxSWGgwS1NCN1hISmNiaUFnSUNBZ0lDQWdhV1lnS0dKaGMyVnVZVzFsTG1sdVpHVjRUMllvWENJdVhDSXBJRDA5UFNBd0tTQnlaWFIxY200Z2RHaHBjeTVqYUdGdVoyVkZlSFJ1WVcxbEtIQmhkR2hUZEhJc0lHSmhjMlZ1WVcxbEtUdGNjbHh1SUNBZ0lDQWdJQ0IyWVhJZ2FXNWtaWGdnUFNCd1lYUm9VM1J5TG1sdVpHVjRUMllvWENJL1hDSXBPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQjBaVzF3VTNSeUlEMGdYQ0pjSWp0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWlhoMElEMGdhWE5UWVcxbFJYaDBJRDhnZEdocGN5NWxlSFJ1WVcxbEtIQmhkR2hUZEhJcElEb2dYQ0pjSWp0Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvYVc1a1pYZ2dQaUF3S1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSbGJYQlRkSElnUFNCd1lYUm9VM1J5TG5OMVluTjBjbWx1WnlocGJtUmxlQ2s3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEJoZEdoVGRISWdQU0J3WVhSb1UzUnlMbk4xWW5OMGNtbHVaeWd3TENCcGJtUmxlQ2s3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR2x1WkdWNElEMGdjR0YwYUZOMGNpNXNZWE4wU1c1a1pYaFBaaWhjSWk5Y0lpazdYSEpjYmlBZ0lDQWdJQ0FnYVc1a1pYZ2dQU0JwYm1SbGVDQThQU0F3SUQ4Z01DQTZJR2x1WkdWNElDc2dNVHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnY0dGMGFGTjBjaTV6ZFdKemRISnBibWNvTUN3Z2FXNWtaWGdwSUNzZ1ltRnpaVzVoYldVZ0t5QmxlSFFnS3lCMFpXMXdVM1J5TzF4eVhHNGdJQ0FnZlN4Y2NseHVJQ0FnSUM4dmRHOWtieUJ0WVd0bElIQjFZbXhwWXlCaFpuUmxjaUIyWlhKcFptbGpZWFJwYjI1Y2NseHVJQ0FnSUY5dWIzSnRZV3hwZW1VNklHWjFibU4wYVc5dUlDaDFjbXdwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnYjJ4a1ZYSnNJRDBnZFhKc0lEMGdVM1J5YVc1bktIVnliQ2s3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2Y21WdGIzWnBibWNnWVd4c0lDNHVMMXh5WEc0Z0lDQWdJQ0FnSUdSdklIdGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IyeGtWWEpzSUQwZ2RYSnNPMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjFjbXdnUFNCMWNtd3VjbVZ3YkdGalpTaE9UMUpOUVV4SldrVmZVa1VzSUZ3aVhDSXBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ2QyaHBiR1VnS0c5c1pGVnliQzVzWlc1bmRHZ2dJVDA5SUhWeWJDNXNaVzVuZEdncE8xeHlYRzRnSUNBZ0lDQWdJSEpsZEhWeWJpQjFjbXc3WEhKY2JpQWdJQ0I5TEZ4eVhHNWNjbHh1SUNBZ0lDOHZJRlJvWlNCd2JHRjBabTl5YlMxemNHVmphV1pwWXlCbWFXeGxJSE5sY0dGeVlYUnZjaTRnSjF4Y1hGd25JRzl5SUNjdkp5NWNjbHh1SUNBZ0lITmxjRG9nS0dOakxuTjVjeTV2Y3lBOVBUMGdZMk11YzNsekxrOVRYMWRKVGtSUFYxTWdQeUFuWEZ4Y1hDY2dPaUFuTHljcExGeHlYRzVjY2x4dUlDQWdJQzh2SUVCd1lYSmhiU0I3YzNSeWFXNW5mU0J3WVhSb1hISmNiaUFnSUNCemRISnBjRk5sY0NBb2NHRjBhQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCd1lYUm9MbkpsY0d4aFkyVW9MMXRjWEM5Y1hGeGNYU1F2TENBbkp5azdYSEpjYmlBZ0lDQjlYSEpjYm4wN1hISmNibHh5WEc1dGIyUjFiR1V1Wlhod2IzSjBjeUE5SUdOakxuQmhkR2c3SWwxOSJdfQ==