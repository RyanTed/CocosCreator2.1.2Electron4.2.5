(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/utils/blend-func.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var RenderComponent = require('../components/CCRenderComponent');
        var BlendFactor = require('../platform/CCMacro').BlendFactor;
        var gfx = require('../../renderer/gfx');
        var BlendFunc = cc.Class({
            properties: {
                _srcBlendFactor: BlendFactor.SRC_ALPHA,
                _dstBlendFactor: BlendFactor.ONE_MINUS_SRC_ALPHA,
                srcBlendFactor: {
                    get: function get() {
                        return this._srcBlendFactor;
                    },
                    set: function set(value) {
                        if (this._srcBlendFactor === value)
                            return;
                        this._srcBlendFactor = value;
                        this._updateBlendFunc();
                    },
                    animatable: false,
                    type: BlendFactor,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.src_blend_factor',
                    visible: true
                },
                dstBlendFactor: {
                    get: function get() {
                        return this._dstBlendFactor;
                    },
                    set: function set(value) {
                        if (this._dstBlendFactor === value)
                            return;
                        this._dstBlendFactor = value;
                        this._updateBlendFunc();
                    },
                    animatable: false,
                    type: BlendFactor,
                    tooltip: CC_DEV && 'i18n:COMPONENT.sprite.dst_blend_factor',
                    visible: true
                }
            },
            setMaterial: function setMaterial(index, material) {
                RenderComponent.prototype.setMaterial.call(this, index, material);
                if (material) {
                    this._updateMaterialBlendFunc(material);
                }
            },
            _updateBlendFunc: function _updateBlendFunc() {
                var materials = this._materials;
                for (var i = 0; i < materials.length; i++) {
                    var material = materials[i];
                    this._updateMaterialBlendFunc(material);
                }
            },
            _updateMaterialBlendFunc: function _updateMaterialBlendFunc(material) {
                var passes = material._effect.getDefaultTechnique().passes;
                for (var j = 0; j < passes.length; j++) {
                    var pass = passes[j];
                    pass.setBlend(true, gfx.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, gfx.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
                }
                material.setDirty(true);
            }
        });
        module.exports = BlendFunc;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,