(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCBufferAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BufferAsset = cc.Class({
            name: 'cc.BufferAsset',
            extends: cc.Asset,
            ctor: function ctor() {
                this._buffer = null;
            },
            properties: {
                _nativeAsset: {
                    get: function get() {
                        return this._buffer;
                    },
                    set: function set(bin) {
                        this._buffer = bin.buffer || bin;
                    },
                    override: true
                },
                buffer: function buffer() {
                    return this._buffer;
                }
            }
        });
        cc.BufferAsset = module.exports = BufferAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,