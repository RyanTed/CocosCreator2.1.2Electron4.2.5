(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCAudioClip.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Asset = require('./CCAsset');
        var EventTarget = require('../event/event-target');
        var LoadMode = cc.Enum({
            WEB_AUDIO: 0,
            DOM_AUDIO: 1
        });
        var AudioClip = cc.Class({
            name: 'cc.AudioClip',
            extends: Asset,
            mixins: [EventTarget],
            ctor: function ctor() {
                this.loaded = false;
                this._audio = null;
            },
            properties: {
                loadMode: {
                    default: LoadMode.WEB_AUDIO,
                    type: LoadMode
                },
                _nativeAsset: {
                    get: function get() {
                        return this._audio;
                    },
                    set: function set(value) {
                        if (value instanceof cc.AudioClip) {
                            this._audio = value._nativeAsset;
                        } else {
                            this._audio = value;
                        }
                        if (this._audio) {
                            this.loaded = true;
                            this.emit('load');
                        }
                    },
                    override: true
                }
            },
            statics: {
                LoadMode: LoadMode,
                _loadByUrl: function _loadByUrl(url, callback) {
                    var item = cc.loader.getItem(url) || cc.loader.getItem(url + '?useDom=1');
                    if (!item || !item.complete) {
                        cc.loader.load(url, function (error, downloadUrl) {
                            if (error) {
                                return callback(error);
                            }
                            item = cc.loader.getItem(url) || cc.loader.getItem(url + '?useDom=1');
                            callback(null, item.content);
                        });
                    } else {
                        if (item._owner instanceof AudioClip) {
                            callback(null, item._owner);
                        } else {
                            callback(null, item.content);
                        }
                    }
                }
            },
            destroy: function destroy() {
                cc.audioEngine.uncache(this);
                this._super();
            }
        });
        cc.AudioClip = AudioClip;
        module.exports = AudioClip;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,