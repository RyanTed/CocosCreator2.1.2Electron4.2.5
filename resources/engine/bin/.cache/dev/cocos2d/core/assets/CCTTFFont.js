(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCTTFFont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var Font = require('./CCFont');
        var TTFFont = cc.Class({
            name: 'cc.TTFFont',
            extends: Font,
            properties: {
                _fontFamily: null,
                _nativeAsset: {
                    type: cc.String,
                    get: function get() {
                        return this._fontFamily;
                    },
                    set: function set(value) {
                        this._fontFamily = value || 'Arial';
                    },
                    override: true
                }
            }
        });
        cc.TTFFont = module.exports = TTFFont;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDVFRGRm9udC5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvY29yZS9hc3NldHMvQ0NUVEZGb250LmpzIl0sIm5hbWVzIjpbIkZvbnQiLCJyZXF1aXJlIiwiVFRGRm9udCIsImNjIiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsInByb3BlcnRpZXMiLCJfZm9udEZhbWlseSIsIl9uYXRpdmVBc3NldCIsInR5cGUiLCJTdHJpbmciLCJnZXQiLCJzZXQiLCJ2YWx1ZSIsIm92ZXJyaWRlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IjtJQUFBLElBQUEsT0FBQSxHQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUEsSUFBQSxPQUFBLE9BQUEsS0FBQSxXQUFBOzs7Ozs7Ozs7Ozs7O1FBMEJBLElBQU1BLElBQUFBLEdBQU9DLE9BQUFBLENBQVEsVUFBUkEsQ0FBYjtRQVlBLElBQUlDLE9BQUFBLEdBQVVDLEVBQUFBLENBQUdDLEtBQUhELENBQVM7QUFBQSxZQUNuQkUsSUFBQUEsRUFBTSxZQURhO0FBQUEsWUFFbkJDLE9BQUFBLEVBQVNOLElBRlU7QUFBQSxZQUluQk8sVUFBQUEsRUFBWTtBQUFBLGdCQUNSQyxXQUFBQSxFQUFhLElBREw7QUFBQSxnQkFFUkMsWUFBQUEsRUFBYztBQUFBLG9CQUNWQyxJQUFBQSxFQUFNUCxFQUFBQSxDQUFHUSxNQURDO0FBQUEsb0JBRVZDLEdBQUFBLEVBRlUsU0FBQSxHQUFBLEdBRUg7QUFBQSx3QkFDSCxPQUFPLEtBQUtKLFdBQVosQ0FERztBQUFBLHFCQUZHO0FBQUEsb0JBS1ZLLEdBQUFBLEVBTFUsU0FBQSxHQUFBLENBS0xDLEtBTEssRUFLRTtBQUFBLHdCQUNSLEtBQUtOLFdBQUwsR0FBbUJNLEtBQUFBLElBQVMsT0FBNUIsQ0FEUTtBQUFBLHFCQUxGO0FBQUEsb0JBUVZDLFFBQUFBLEVBQVUsSUFSQTtBQUFBLGlCQUZOO0FBQUEsYUFKTztBQUFBLFNBQVRaLENBQWQ7UUFtQkFBLEVBQUFBLENBQUdELE9BQUhDLEdBQWFhLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCZCxPQUE5QkMiLCJmaWxlIjoiQ0NUVEZGb250LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xyXG5cclxuY29uc3QgRm9udCA9IHJlcXVpcmUoJy4vQ0NGb250Jyk7XHJcblxyXG4vKipcclxuICogQG1vZHVsZSBjY1xyXG4gKi9cclxuLyoqXHJcbiAqICEjZW4gQ2xhc3MgZm9yIFRURkZvbnQgaGFuZGxpbmcuXHJcbiAqICEjemggVFRGIOWtl+S9k+i1hOa6kOexu+OAglxyXG4gKiBAY2xhc3MgVFRGRm9udFxyXG4gKiBAZXh0ZW5kcyBGb250XHJcbiAqXHJcbiAqL1xyXG52YXIgVFRGRm9udCA9IGNjLkNsYXNzKHtcclxuICAgIG5hbWU6ICdjYy5UVEZGb250JyxcclxuICAgIGV4dGVuZHM6IEZvbnQsXHJcblxyXG4gICAgcHJvcGVydGllczoge1xyXG4gICAgICAgIF9mb250RmFtaWx5OiBudWxsLFxyXG4gICAgICAgIF9uYXRpdmVBc3NldDoge1xyXG4gICAgICAgICAgICB0eXBlOiBjYy5TdHJpbmcsXHJcbiAgICAgICAgICAgIGdldCAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fZm9udEZhbWlseTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0ICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZm9udEZhbWlseSA9IHZhbHVlIHx8ICdBcmlhbCc7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG92ZXJyaWRlOiB0cnVlXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59KTtcclxuXHJcbmNjLlRURkZvbnQgPSBtb2R1bGUuZXhwb3J0cyA9IFRURkZvbnQ7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgRm9udCA9IHJlcXVpcmUoJy4vQ0NGb250Jyk7XG5cbi8qKlxyXG4gKiBAbW9kdWxlIGNjXHJcbiAqL1xuLyoqXHJcbiAqICEjZW4gQ2xhc3MgZm9yIFRURkZvbnQgaGFuZGxpbmcuXHJcbiAqICEjemggVFRGIOWtl+S9k+i1hOa6kOexu+OAglxyXG4gKiBAY2xhc3MgVFRGRm9udFxyXG4gKiBAZXh0ZW5kcyBGb250XHJcbiAqXHJcbiAqL1xudmFyIFRURkZvbnQgPSBjYy5DbGFzcyh7XG4gIG5hbWU6ICdjYy5UVEZGb250JyxcbiAgZXh0ZW5kczogRm9udCxcblxuICBwcm9wZXJ0aWVzOiB7XG4gICAgX2ZvbnRGYW1pbHk6IG51bGwsXG4gICAgX25hdGl2ZUFzc2V0OiB7XG4gICAgICB0eXBlOiBjYy5TdHJpbmcsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZvbnRGYW1pbHk7XG4gICAgICB9LFxuICAgICAgc2V0OiBmdW5jdGlvbiBzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5fZm9udEZhbWlseSA9IHZhbHVlIHx8ICdBcmlhbCc7XG4gICAgICB9LFxuXG4gICAgICBvdmVycmlkZTogdHJ1ZVxuICAgIH1cbiAgfVxufSk7XG5cbmNjLlRURkZvbnQgPSBtb2R1bGUuZXhwb3J0cyA9IFRURkZvbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJa05EVkZSR1JtOXVkQzVxY3lKZExDSnVZVzFsY3lJNld5SkdiMjUwSWl3aWNtVnhkV2x5WlNJc0lsUlVSa1p2Ym5RaUxDSmpZeUlzSWtOc1lYTnpJaXdpYm1GdFpTSXNJbVY0ZEdWdVpITWlMQ0p3Y205d1pYSjBhV1Z6SWl3aVgyWnZiblJHWVcxcGJIa2lMQ0pmYm1GMGFYWmxRWE56WlhRaUxDSjBlWEJsSWl3aVUzUnlhVzVuSWl3aVoyVjBJaXdpYzJWMElpd2lkbUZzZFdVaUxDSnZkbVZ5Y21sa1pTSXNJbTF2WkhWc1pTSXNJbVY0Y0c5eWRITWlYU3dpYldGd2NHbHVaM01pT2lJN08wRkJRVUU3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCTUVKQkxFbEJRVTFCTEU5QlFVOURMRkZCUVZFc1ZVRkJVaXhEUVVGaU96dEJRVVZCT3pzN1FVRkhRVHM3T3pzN096dEJRVTlCTEVsQlFVbERMRlZCUVZWRExFZEJRVWRETEV0QlFVZ3NRMEZCVXp0QlFVTnVRa01zVVVGQlRTeFpRVVJoTzBGQlJXNUNReXhYUVVGVFRpeEpRVVpWT3p0QlFVbHVRazhzWTBGQldUdEJRVU5TUXl4cFFrRkJZU3hKUVVSTU8wRkJSVkpETEd0Q1FVRmpPMEZCUTFaRExGbEJRVTFRTEVkQlFVZFJMRTFCUkVNN1FVRkZWa01zVTBGR1ZTeHBRa0ZGU0R0QlFVTklMR1ZCUVU4c1MwRkJTMG9zVjBGQldqdEJRVU5JTEU5QlNsTTdRVUZMVmtzc1UwRk1WU3hsUVV0TVF5eExRVXhMTEVWQlMwVTdRVUZEVWl4aFFVRkxUaXhYUVVGTUxFZEJRVzFDVFN4VFFVRlRMRTlCUVRWQ08wRkJRMGdzVDBGUVV6czdRVUZSVmtNc1owSkJRVlU3UVVGU1FUdEJRVVpPTzBGQlNrOHNRMEZCVkN4RFFVRmtPenRCUVcxQ1FWb3NSMEZCUjBRc1QwRkJTQ3hIUVVGaFl5eFBRVUZQUXl4UFFVRlFMRWRCUVdsQ1ppeFBRVUU1UWlJc0ltWnBiR1VpT2lKRFExUlVSa1p2Ym5RdWFuTWlMQ0p6YjNWeVkyVnpRMjl1ZEdWdWRDSTZXeUl2S2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtseHlYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREV6TFRJd01UWWdRMmgxYTI5dVp5QlVaV05vYm05c2IyZHBaWE1nU1c1akxseHlYRzRnUTI5d2VYSnBaMmgwSUNoaktTQXlNREUzTFRJd01UZ2dXR2xoYldWdUlGbGhhbWtnVTI5bWRIZGhjbVVnUTI4dUxDQk1kR1F1WEhKY2JseHlYRzRnYUhSMGNITTZMeTkzZDNjdVkyOWpiM011WTI5dEwxeHlYRzVjY2x4dUlGQmxjbTFwYzNOcGIyNGdhWE1nYUdWeVpXSjVJR2R5WVc1MFpXUXNJR1p5WldVZ2IyWWdZMmhoY21kbExDQjBieUJoYm5rZ2NHVnljMjl1SUc5aWRHRnBibWx1WnlCaElHTnZjSGxjY2x4dUlHOW1JSFJvYVhNZ2MyOW1kSGRoY21VZ1lXNWtJR0Z6YzI5amFXRjBaV1FnWlc1bmFXNWxJSE52ZFhKalpTQmpiMlJsSUNoMGFHVWdYQ0pUYjJaMGQyRnlaVndpS1N3Z1lTQnNhVzFwZEdWa0xGeHlYRzRnSUhkdmNteGtkMmxrWlN3Z2NtOTVZV3gwZVMxbWNtVmxMQ0J1YjI0dFlYTnphV2R1WVdKc1pTd2djbVYyYjJOaFlteGxJR0Z1WkNCdWIyNHRaWGhqYkhWemFYWmxJR3hwWTJWdWMyVmNjbHh1SUhSdklIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZiR1ZzZVNCMGJ5QmtaWFpsYkc5d0lHZGhiV1Z6SUc5dUlIbHZkWElnZEdGeVoyVjBJSEJzWVhSbWIzSnRjeTRnV1c5MUlITm9ZV3hzWEhKY2JpQWdibTkwSUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdlpuUjNZWEpsSUdadmNpQmtaWFpsYkc5d2FXNW5JRzkwYUdWeUlITnZablIzWVhKbElHOXlJSFJ2YjJ4eklIUm9ZWFFuYzF4eVhHNGdJSFZ6WldRZ1ptOXlJR1JsZG1Wc2IzQnBibWNnWjJGdFpYTXVJRmx2ZFNCaGNtVWdibTkwSUdkeVlXNTBaV1FnZEc4Z2NIVmliR2x6YUN3Z1pHbHpkSEpwWW5WMFpTeGNjbHh1SUNCemRXSnNhV05sYm5ObExDQmhibVF2YjNJZ2MyVnNiQ0JqYjNCcFpYTWdiMllnUTI5amIzTWdRM0psWVhSdmNpNWNjbHh1WEhKY2JpQlVhR1VnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nYVc0Z2RHaHBjeUJNYVdObGJuTmxJRUZuY21WbGJXVnVkQ0JoY21VZ2JHbGpaVzV6WldRc0lHNXZkQ0J6YjJ4a0xseHlYRzRnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdUlISmxjMlZ5ZG1WeklHRnNiQ0J5YVdkb2RITWdibTkwSUdWNGNISmxjM05zZVNCbmNtRnVkR1ZrSUhSdklIbHZkUzVjY2x4dVhISmNiaUJVU0VVZ1UwOUdWRmRCVWtVZ1NWTWdVRkpQVmtsRVJVUWdYQ0pCVXlCSlUxd2lMQ0JYU1ZSSVQxVlVJRmRCVWxKQlRsUlpJRTlHSUVGT1dTQkxTVTVFTENCRldGQlNSVk5USUU5U1hISmNiaUJKVFZCTVNVVkVMQ0JKVGtOTVZVUkpUa2NnUWxWVUlFNVBWQ0JNU1UxSlZFVkVJRlJQSUZSSVJTQlhRVkpTUVU1VVNVVlRJRTlHSUUxRlVrTklRVTVVUVVKSlRFbFVXU3hjY2x4dUlFWkpWRTVGVTFNZ1JrOVNJRUVnVUVGU1ZFbERWVXhCVWlCUVZWSlFUMU5GSUVGT1JDQk9UMDVKVGtaU1NVNUhSVTFGVGxRdUlFbE9JRTVQSUVWV1JVNVVJRk5JUVV4TUlGUklSVnh5WEc0Z1FWVlVTRTlTVXlCUFVpQkRUMUJaVWtsSFNGUWdTRTlNUkVWU1V5QkNSU0JNU1VGQ1RFVWdSazlTSUVGT1dTQkRURUZKVFN3Z1JFRk5RVWRGVXlCUFVpQlBWRWhGVWx4eVhHNGdURWxCUWtsTVNWUlpMQ0JYU0VWVVNFVlNJRWxPSUVGT0lFRkRWRWxQVGlCUFJpQkRUMDVVVWtGRFZDd2dWRTlTVkNCUFVpQlBWRWhGVWxkSlUwVXNJRUZTU1ZOSlRrY2dSbEpQVFN4Y2NseHVJRTlWVkNCUFJpQlBVaUJKVGlCRFQwNU9SVU5VU1U5T0lGZEpWRWdnVkVoRklGTlBSbFJYUVZKRklFOVNJRlJJUlNCVlUwVWdUMUlnVDFSSVJWSWdSRVZCVEVsT1IxTWdTVTVjY2x4dUlGUklSU0JUVDBaVVYwRlNSUzVjY2x4dUlDb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW92WEhKY2JseHlYRzVqYjI1emRDQkdiMjUwSUQwZ2NtVnhkV2x5WlNnbkxpOURRMFp2Ym5RbktUdGNjbHh1WEhKY2JpOHFLbHh5WEc0Z0tpQkFiVzlrZFd4bElHTmpYSEpjYmlBcUwxeHlYRzR2S2lwY2NseHVJQ29nSVNObGJpQkRiR0Z6Y3lCbWIzSWdWRlJHUm05dWRDQm9ZVzVrYkdsdVp5NWNjbHh1SUNvZ0lTTjZhQ0JVVkVZZzVhMlg1TDJUNkxXRTVycVE1N0c3NDRDQ1hISmNiaUFxSUVCamJHRnpjeUJVVkVaR2IyNTBYSEpjYmlBcUlFQmxlSFJsYm1SeklFWnZiblJjY2x4dUlDcGNjbHh1SUNvdlhISmNiblpoY2lCVVZFWkdiMjUwSUQwZ1kyTXVRMnhoYzNNb2UxeHlYRzRnSUNBZ2JtRnRaVG9nSjJOakxsUlVSa1p2Ym5RbkxGeHlYRzRnSUNBZ1pYaDBaVzVrY3pvZ1JtOXVkQ3hjY2x4dVhISmNiaUFnSUNCd2NtOXdaWEowYVdWek9pQjdYSEpjYmlBZ0lDQWdJQ0FnWDJadmJuUkdZVzFwYkhrNklHNTFiR3dzWEhKY2JpQWdJQ0FnSUNBZ1gyNWhkR2wyWlVGemMyVjBPaUI3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFI1Y0dVNklHTmpMbE4wY21sdVp5eGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ1oyVjBJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDltYjI1MFJtRnRhV3g1TzF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0I5TEZ4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0J6WlhRZ0tIWmhiSFZsS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5bWIyNTBSbUZ0YVd4NUlEMGdkbUZzZFdVZ2ZId2dKMEZ5YVdGc0p6dGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2ZTeGNjbHh1SUNBZ0lDQWdJQ0FnSUNBZ2IzWmxjbkpwWkdVNklIUnlkV1ZjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibjBwTzF4eVhHNWNjbHh1WTJNdVZGUkdSbTl1ZENBOUlHMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1ZGUkdSbTl1ZER0Y2NseHVJbDE5Il19