(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCRawAsset.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var CCObject = require('../platform/CCObject');
        var js = require('../platform/js');
        cc.RawAsset = cc.Class({
            name: 'cc.RawAsset',
            extends: CCObject,
            ctor: function ctor() {
                Object.defineProperty(this, '_uuid', {
                    value: '',
                    writable: true
                });
            }
        });
        js.value(cc.RawAsset, 'isRawAssetType', function (ctor) {
            return js.isChildClassOf(ctor, cc.RawAsset) && !js.isChildClassOf(ctor, cc.Asset);
        });
        js.value(cc.RawAsset, 'wasRawAssetType', function (ctor) {
            return ctor === cc.Texture2D || ctor === cc.AudioClip || ctor === cc.ParticleAsset || ctor === cc.Asset;
        });
        module.exports = cc.RawAsset;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIkNDUmF3QXNzZXQuanMiLCJDOi9Vc2Vycy9uYW50YXMvZmlyZWJhbGwteC9mYl8yMS1yZWxlYXNlL2VuZ2luZS9jb2NvczJkL2NvcmUvYXNzZXRzL0NDUmF3QXNzZXQuanMiXSwibmFtZXMiOlsiQ0NPYmplY3QiLCJyZXF1aXJlIiwianMiLCJjYyIsIlJhd0Fzc2V0IiwiQ2xhc3MiLCJuYW1lIiwiZXh0ZW5kcyIsImN0b3IiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwid3JpdGFibGUiLCJpc0NoaWxkQ2xhc3NPZiIsIkFzc2V0IiwiVGV4dHVyZTJEIiwiQXVkaW9DbGlwIiwiUGFydGljbGVBc3NldCIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFBLE9BQUEsR0FBQSxPQUFBLE9BQUEsS0FBQSxXQUFBLElBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQTs7Ozs7Ozs7Ozs7OztRQTBCQSxJQUFJQSxRQUFBQSxHQUFXQyxPQUFBQSxDQUFRLHNCQUFSQSxDQUFmO1FBQ0EsSUFBSUMsRUFBQUEsR0FBS0QsT0FBQUEsQ0FBUSxnQkFBUkEsQ0FBVDtRQVdBRSxFQUFBQSxDQUFHQyxRQUFIRCxHQUFjQSxFQUFBQSxDQUFHRSxLQUFIRixDQUFTO0FBQUEsWUFDbkJHLElBQUFBLEVBQU0sYUFEYTtBQUFBLFlBQ0VDLE9BQUFBLEVBQVNQLFFBRFg7QUFBQSxZQUduQlEsSUFBQUEsRUFBTSxTQUFBLElBQUEsR0FBWTtBQUFBLGdCQU1kQyxNQUFBQSxDQUFPQyxjQUFQRCxDQUFzQixJQUF0QkEsRUFBNEIsT0FBNUJBLEVBQXFDO0FBQUEsb0JBQ2pDRSxLQUFBQSxFQUFPLEVBRDBCO0FBQUEsb0JBRWpDQyxRQUFBQSxFQUFVLElBRnVCO0FBQUEsaUJBQXJDSCxFQU5jO0FBQUEsYUFIQztBQUFBLFNBQVROLENBQWRBO1FBd0JBRCxFQUFBQSxDQUFHUyxLQUFIVCxDQUFTQyxFQUFBQSxDQUFHQyxRQUFaRixFQUFzQixnQkFBdEJBLEVBQXdDLFVBQVVNLElBQVYsRUFBZ0I7QUFBQSxZQUNwRCxPQUFPTixFQUFBQSxDQUFHVyxjQUFIWCxDQUFrQk0sSUFBbEJOLEVBQXdCQyxFQUFBQSxDQUFHQyxRQUEzQkYsS0FBd0MsQ0FBQ0EsRUFBQUEsQ0FBR1csY0FBSFgsQ0FBa0JNLElBQWxCTixFQUF3QkMsRUFBQUEsQ0FBR1csS0FBM0JaLENBQWhELENBRG9EO0FBQUEsU0FBeERBO1FBS0FBLEVBQUFBLENBQUdTLEtBQUhULENBQVNDLEVBQUFBLENBQUdDLFFBQVpGLEVBQXNCLGlCQUF0QkEsRUFBeUMsVUFBVU0sSUFBVixFQUFnQjtBQUFBLFlBQ3JELE9BQU9BLElBQUFBLEtBQVNMLEVBQUFBLENBQUdZLFNBQVpQLElBQ0FBLElBQUFBLEtBQVNMLEVBQUFBLENBQUdhLFNBRFpSLElBRUFBLElBQUFBLEtBQVNMLEVBQUFBLENBQUdjLGFBRlpULElBR0FBLElBQUFBLEtBQVNMLEVBQUFBLENBQUdXLEtBSG5CLENBRHFEO0FBQUEsU0FBekRaO1FBT0FnQixNQUFBQSxDQUFPQyxPQUFQRCxHQUFpQmYsRUFBQUEsQ0FBR0MsUUFBcEJjIiwiZmlsZSI6IkNDUmF3QXNzZXQuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDEzLTIwMTYgQ2h1a29uZyBUZWNobm9sb2dpZXMgSW5jLlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiAgbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuICBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG52YXIgQ0NPYmplY3QgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9DQ09iamVjdCcpO1xyXG52YXIganMgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9qcycpO1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogVGhlIGJhc2UgY2xhc3MgZm9yIHJlZ2lzdGVyaW5nIGFzc2V0IHR5cGVzLlxyXG4gKiAhI3poXHJcbiAqIOazqOWGjOeUqOeahOi1hOa6kOWfuuexu+OAglxyXG4gKlxyXG4gKiBAY2xhc3MgUmF3QXNzZXRcclxuICogQGV4dGVuZHMgT2JqZWN0XHJcbiAqL1xyXG5jYy5SYXdBc3NldCA9IGNjLkNsYXNzKHtcclxuICAgIG5hbWU6ICdjYy5SYXdBc3NldCcsIGV4dGVuZHM6IENDT2JqZWN0LFxyXG5cclxuICAgIGN0b3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBAcHJvcGVydHkgX3V1aWRcclxuICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfVxyXG4gICAgICAgICAqIEBwcml2YXRlXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfdXVpZCcsIHtcclxuICAgICAgICAgICAgdmFsdWU6ICcnLFxyXG4gICAgICAgICAgICB3cml0YWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gZW51bWVyYWJsZSBpcyBmYWxzZSBieSBkZWZhdWx0LCB0byBhdm9pZCB1dWlkIGJlaW5nIGFzc2lnbmVkIHRvIGVtcHR5IHN0cmluZyBkdXJpbmcgZGVzdHJveVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxufSk7XHJcblxyXG4vKipcclxuICogQG1ldGhvZCBpc1Jhd0Fzc2V0VHlwZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdG9yXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gKiBAc3RhdGljXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xyXG5qcy52YWx1ZShjYy5SYXdBc3NldCwgJ2lzUmF3QXNzZXRUeXBlJywgZnVuY3Rpb24gKGN0b3IpIHtcclxuICAgIHJldHVybiBqcy5pc0NoaWxkQ2xhc3NPZihjdG9yLCBjYy5SYXdBc3NldCkgJiYgIWpzLmlzQ2hpbGRDbGFzc09mKGN0b3IsIGNjLkFzc2V0KTtcclxufSk7XHJcblxyXG4gLy8gVE9ETyAtIERFTE1FIGFmdGVyIDIuMVxyXG5qcy52YWx1ZShjYy5SYXdBc3NldCwgJ3dhc1Jhd0Fzc2V0VHlwZScsIGZ1bmN0aW9uIChjdG9yKSB7XHJcbiAgICByZXR1cm4gY3RvciA9PT0gY2MuVGV4dHVyZTJEIHx8XHJcbiAgICAgICAgICAgY3RvciA9PT0gY2MuQXVkaW9DbGlwIHx8XHJcbiAgICAgICAgICAgY3RvciA9PT0gY2MuUGFydGljbGVBc3NldCB8fFxyXG4gICAgICAgICAgIGN0b3IgPT09IGNjLkFzc2V0OyAgICAgICAgICAgLy8gc2luY2UgMS4xMCwgYWxsIHJhdyBhc3NldCB3aWxsIGltcG9ydCBhcyBjYy5Bc3NldFxyXG59KTtcclxuXHJcbm1vZHVsZS5leHBvcnRzID0gY2MuUmF3QXNzZXQ7XHJcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxMy0yMDE2IENodWtvbmcgVGVjaG5vbG9naWVzIEluYy5cclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuICB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuICB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiAgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIgQ0NPYmplY3QgPSByZXF1aXJlKCcuLi9wbGF0Zm9ybS9DQ09iamVjdCcpO1xudmFyIGpzID0gcmVxdWlyZSgnLi4vcGxhdGZvcm0vanMnKTtcblxuLyoqXHJcbiAqICEjZW5cclxuICogVGhlIGJhc2UgY2xhc3MgZm9yIHJlZ2lzdGVyaW5nIGFzc2V0IHR5cGVzLlxyXG4gKiAhI3poXHJcbiAqIOazqOWGjOeUqOeahOi1hOa6kOWfuuexu+OAglxyXG4gKlxyXG4gKiBAY2xhc3MgUmF3QXNzZXRcclxuICogQGV4dGVuZHMgT2JqZWN0XHJcbiAqL1xuY2MuUmF3QXNzZXQgPSBjYy5DbGFzcyh7XG4gIG5hbWU6ICdjYy5SYXdBc3NldCcsIGV4dGVuZHM6IENDT2JqZWN0LFxuXG4gIGN0b3I6IGZ1bmN0aW9uIGN0b3IoKSB7XG4gICAgLyoqXHJcbiAgICAgKiBAcHJvcGVydHkgX3V1aWRcclxuICAgICAqIEB0eXBlIHtTdHJpbmd9XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdfdXVpZCcsIHtcbiAgICAgIHZhbHVlOiAnJyxcbiAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbn0pO1xuXG4vKipcclxuICogQG1ldGhvZCBpc1Jhd0Fzc2V0VHlwZVxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdG9yXHJcbiAqIEByZXR1cm5zIHtCb29sZWFufVxyXG4gKiBAc3RhdGljXHJcbiAqIEBwcml2YXRlXHJcbiAqL1xuanMudmFsdWUoY2MuUmF3QXNzZXQsICdpc1Jhd0Fzc2V0VHlwZScsIGZ1bmN0aW9uIChjdG9yKSB7XG4gIHJldHVybiBqcy5pc0NoaWxkQ2xhc3NPZihjdG9yLCBjYy5SYXdBc3NldCkgJiYgIWpzLmlzQ2hpbGRDbGFzc09mKGN0b3IsIGNjLkFzc2V0KTtcbn0pO1xuXG4vLyBUT0RPIC0gREVMTUUgYWZ0ZXIgMi4xXG5qcy52YWx1ZShjYy5SYXdBc3NldCwgJ3dhc1Jhd0Fzc2V0VHlwZScsIGZ1bmN0aW9uIChjdG9yKSB7XG4gIHJldHVybiBjdG9yID09PSBjYy5UZXh0dXJlMkQgfHwgY3RvciA9PT0gY2MuQXVkaW9DbGlwIHx8IGN0b3IgPT09IGNjLlBhcnRpY2xlQXNzZXQgfHwgY3RvciA9PT0gY2MuQXNzZXQ7IC8vIHNpbmNlIDEuMTAsIGFsbCByYXcgYXNzZXQgd2lsbCBpbXBvcnQgYXMgY2MuQXNzZXRcbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNjLlJhd0Fzc2V0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSWtORFVtRjNRWE56WlhRdWFuTWlYU3dpYm1GdFpYTWlPbHNpUTBOUFltcGxZM1FpTENKeVpYRjFhWEpsSWl3aWFuTWlMQ0pqWXlJc0lsSmhkMEZ6YzJWMElpd2lRMnhoYzNNaUxDSnVZVzFsSWl3aVpYaDBaVzVrY3lJc0ltTjBiM0lpTENKUFltcGxZM1FpTENKa1pXWnBibVZRY205d1pYSjBlU0lzSW5aaGJIVmxJaXdpZDNKcGRHRmliR1VpTENKcGMwTm9hV3hrUTJ4aGMzTlBaaUlzSWtGemMyVjBJaXdpVkdWNGRIVnlaVEpFSWl3aVFYVmthVzlEYkdsd0lpd2lVR0Z5ZEdsamJHVkJjM05sZENJc0ltMXZaSFZzWlNJc0ltVjRjRzl5ZEhNaVhTd2liV0Z3Y0dsdVozTWlPaUk3TzBGQlFVRTdPenM3T3pzN096czdPenM3T3pzN096czdPenM3T3pzN08wRkJNRUpCTEVsQlFVbEJMRmRCUVZkRExGRkJRVkVzYzBKQlFWSXNRMEZCWmp0QlFVTkJMRWxCUVVsRExFdEJRVXRFTEZGQlFWRXNaMEpCUVZJc1EwRkJWRHM3UVVGRlFUczdPenM3T3pzN08wRkJVMEZGTEVkQlFVZERMRkZCUVVnc1IwRkJZMFFzUjBGQlIwVXNTMEZCU0N4RFFVRlRPMEZCUTI1Q1F5eFJRVUZOTEdGQlJHRXNSVUZEUlVNc1UwRkJVMUFzVVVGRVdEczdRVUZIYmtKUkxGRkJRVTBzWjBKQlFWazdRVUZEWkRzN096czdRVUZMUVVNc1YwRkJUME1zWTBGQlVDeERRVUZ6UWl4SlFVRjBRaXhGUVVFMFFpeFBRVUUxUWl4RlFVRnhRenRCUVVOcVEwTXNZVUZCVHl4RlFVUXdRanRCUVVWcVEwTXNaMEpCUVZVN1FVRkdkVUlzUzBGQmNrTTdRVUZMU0R0QlFXUnJRaXhEUVVGVUxFTkJRV1E3TzBGQmFVSkJPenM3T3pzN08wRkJUMEZXTEVkQlFVZFRMRXRCUVVnc1EwRkJVMUlzUjBGQlIwTXNVVUZCV2l4RlFVRnpRaXhuUWtGQmRFSXNSVUZCZDBNc1ZVRkJWVWtzU1VGQlZpeEZRVUZuUWp0QlFVTndSQ3hUUVVGUFRpeEhRVUZIVnl4alFVRklMRU5CUVd0Q1RDeEpRVUZzUWl4RlFVRjNRa3dzUjBGQlIwTXNVVUZCTTBJc1MwRkJkME1zUTBGQlEwWXNSMEZCUjFjc1kwRkJTQ3hEUVVGclFrd3NTVUZCYkVJc1JVRkJkMEpNTEVkQlFVZFhMRXRCUVROQ0xFTkJRV2hFTzBGQlEwZ3NRMEZHUkRzN1FVRkpRenRCUVVORVdpeEhRVUZIVXl4TFFVRklMRU5CUVZOU0xFZEJRVWRETEZGQlFWb3NSVUZCYzBJc2FVSkJRWFJDTEVWQlFYbERMRlZCUVZWSkxFbEJRVllzUlVGQlowSTdRVUZEY2tRc1UwRkJUMEVzVTBGQlUwd3NSMEZCUjFrc1UwRkJXaXhKUVVOQlVDeFRRVUZUVEN4SFFVRkhZU3hUUVVSYUxFbEJSVUZTTEZOQlFWTk1MRWRCUVVkakxHRkJSbG9zU1VGSFFWUXNVMEZCVTB3c1IwRkJSMWNzUzBGSWJrSXNRMEZFY1VRc1EwRkpha0k3UVVGRGRrTXNRMEZNUkRzN1FVRlBRVWtzVDBGQlQwTXNUMEZCVUN4SFFVRnBRbWhDTEVkQlFVZERMRkZCUVhCQ0lpd2labWxzWlNJNklrTkRVbUYzUVhOelpYUXVhbk1pTENKemIzVnlZMlZ6UTI5dWRHVnVkQ0k2V3lJdktpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLbHh5WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFekxUSXdNVFlnUTJoMWEyOXVaeUJVWldOb2JtOXNiMmRwWlhNZ1NXNWpMbHh5WEc0Z1EyOXdlWEpwWjJoMElDaGpLU0F5TURFM0xUSXdNVGdnV0dsaGJXVnVJRmxoYW1rZ1UyOW1kSGRoY21VZ1EyOHVMQ0JNZEdRdVhISmNibHh5WEc0Z2FIUjBjSE02THk5M2QzY3VZMjlqYjNNdVkyOXRMMXh5WEc1Y2NseHVJRkJsY20xcGMzTnBiMjRnYVhNZ2FHVnlaV0o1SUdkeVlXNTBaV1FzSUdaeVpXVWdiMllnWTJoaGNtZGxMQ0IwYnlCaGJua2djR1Z5YzI5dUlHOWlkR0ZwYm1sdVp5QmhJR052Y0hsY2NseHVJRzltSUhSb2FYTWdjMjltZEhkaGNtVWdZVzVrSUdGemMyOWphV0YwWldRZ1pXNW5hVzVsSUhOdmRYSmpaU0JqYjJSbElDaDBhR1VnWENKVGIyWjBkMkZ5WlZ3aUtTd2dZU0JzYVcxcGRHVmtMRnh5WEc0Z0lIZHZjbXhrZDJsa1pTd2djbTk1WVd4MGVTMW1jbVZsTENCdWIyNHRZWE56YVdkdVlXSnNaU3dnY21WMmIyTmhZbXhsSUdGdVpDQnViMjR0WlhoamJIVnphWFpsSUd4cFkyVnVjMlZjY2x4dUlIUnZJSFZ6WlNCRGIyTnZjeUJEY21WaGRHOXlJSE52YkdWc2VTQjBieUJrWlhabGJHOXdJR2RoYldWeklHOXVJSGx2ZFhJZ2RHRnlaMlYwSUhCc1lYUm1iM0p0Y3k0Z1dXOTFJSE5vWVd4c1hISmNiaUFnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHlYRzRnSUhWelpXUWdabTl5SUdSbGRtVnNiM0JwYm1jZ1oyRnRaWE11SUZsdmRTQmhjbVVnYm05MElHZHlZVzUwWldRZ2RHOGdjSFZpYkdsemFDd2daR2x6ZEhKcFluVjBaU3hjY2x4dUlDQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjY2x4dVhISmNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh5WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2NseHVYSEpjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYSEpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2NseHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4eVhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHlYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNjbHh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2NseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2NseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhISmNibHh5WEc1MllYSWdRME5QWW1wbFkzUWdQU0J5WlhGMWFYSmxLQ2N1TGk5d2JHRjBabTl5YlM5RFEwOWlhbVZqZENjcE8xeHlYRzUyWVhJZ2FuTWdQU0J5WlhGMWFYSmxLQ2N1TGk5d2JHRjBabTl5YlM5cWN5Y3BPMXh5WEc1Y2NseHVMeW9xWEhKY2JpQXFJQ0VqWlc1Y2NseHVJQ29nVkdobElHSmhjMlVnWTJ4aGMzTWdabTl5SUhKbFoybHpkR1Z5YVc1bklHRnpjMlYwSUhSNWNHVnpMbHh5WEc0Z0tpQWhJM3BvWEhKY2JpQXFJT2F6cU9XR2pPZVVxT2VhaE9pMWhPYTZrT1dmdXVleHUrT0FnbHh5WEc0Z0tseHlYRzRnS2lCQVkyeGhjM01nVW1GM1FYTnpaWFJjY2x4dUlDb2dRR1Y0ZEdWdVpITWdUMkpxWldOMFhISmNiaUFxTDF4eVhHNWpZeTVTWVhkQmMzTmxkQ0E5SUdOakxrTnNZWE56S0h0Y2NseHVJQ0FnSUc1aGJXVTZJQ2RqWXk1U1lYZEJjM05sZENjc0lHVjRkR1Z1WkhNNklFTkRUMkpxWldOMExGeHlYRzVjY2x4dUlDQWdJR04wYjNJNklHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJQ0FnSUNBdktpcGNjbHh1SUNBZ0lDQWdJQ0FnS2lCQWNISnZjR1Z5ZEhrZ1gzVjFhV1JjY2x4dUlDQWdJQ0FnSUNBZ0tpQkFkSGx3WlNCN1UzUnlhVzVuZlZ4eVhHNGdJQ0FnSUNBZ0lDQXFJRUJ3Y21sMllYUmxYSEpjYmlBZ0lDQWdJQ0FnSUNvdlhISmNiaUFnSUNBZ0lDQWdUMkpxWldOMExtUmxabWx1WlZCeWIzQmxjblI1S0hSb2FYTXNJQ2RmZFhWcFpDY3NJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkbUZzZFdVNklDY25MRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjNjbWwwWVdKc1pUb2dkSEoxWlN4Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pXNTFiV1Z5WVdKc1pTQnBjeUJtWVd4elpTQmllU0JrWldaaGRXeDBMQ0IwYnlCaGRtOXBaQ0IxZFdsa0lHSmxhVzVuSUdGemMybG5ibVZrSUhSdklHVnRjSFI1SUhOMGNtbHVaeUJrZFhKcGJtY2daR1Z6ZEhKdmVWeHlYRzRnSUNBZ0lDQWdJSDBwTzF4eVhHNGdJQ0FnZlN4Y2NseHVmU2s3WEhKY2JseHlYRzR2S2lwY2NseHVJQ29nUUcxbGRHaHZaQ0JwYzFKaGQwRnpjMlYwVkhsd1pWeHlYRzRnS2lCQWNHRnlZVzBnZTBaMWJtTjBhVzl1ZlNCamRHOXlYSEpjYmlBcUlFQnlaWFIxY201eklIdENiMjlzWldGdWZWeHlYRzRnS2lCQWMzUmhkR2xqWEhKY2JpQXFJRUJ3Y21sMllYUmxYSEpjYmlBcUwxeHlYRzVxY3k1MllXeDFaU2hqWXk1U1lYZEJjM05sZEN3Z0oybHpVbUYzUVhOelpYUlVlWEJsSnl3Z1puVnVZM1JwYjI0Z0tHTjBiM0lwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUJxY3k1cGMwTm9hV3hrUTJ4aGMzTlBaaWhqZEc5eUxDQmpZeTVTWVhkQmMzTmxkQ2tnSmlZZ0lXcHpMbWx6UTJocGJHUkRiR0Z6YzA5bUtHTjBiM0lzSUdOakxrRnpjMlYwS1R0Y2NseHVmU2s3WEhKY2JseHlYRzRnTHk4Z1ZFOUVUeUF0SUVSRlRFMUZJR0ZtZEdWeUlESXVNVnh5WEc1cWN5NTJZV3gxWlNoall5NVNZWGRCYzNObGRDd2dKM2RoYzFKaGQwRnpjMlYwVkhsd1pTY3NJR1oxYm1OMGFXOXVJQ2hqZEc5eUtTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z1kzUnZjaUE5UFQwZ1kyTXVWR1Y0ZEhWeVpUSkVJSHg4WEhKY2JpQWdJQ0FnSUNBZ0lDQWdZM1J2Y2lBOVBUMGdZMk11UVhWa2FXOURiR2x3SUh4OFhISmNiaUFnSUNBZ0lDQWdJQ0FnWTNSdmNpQTlQVDBnWTJNdVVHRnlkR2xqYkdWQmMzTmxkQ0I4ZkZ4eVhHNGdJQ0FnSUNBZ0lDQWdJR04wYjNJZ1BUMDlJR05qTGtGemMyVjBPeUFnSUNBZ0lDQWdJQ0FnTHk4Z2MybHVZMlVnTVM0eE1Dd2dZV3hzSUhKaGR5QmhjM05sZENCM2FXeHNJR2x0Y0c5eWRDQmhjeUJqWXk1QmMzTmxkRnh5WEc1OUtUdGNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ1kyTXVVbUYzUVhOelpYUTdYSEpjYmlKZGZRPT0iXX0=