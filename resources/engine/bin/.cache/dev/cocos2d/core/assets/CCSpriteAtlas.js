(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCSpriteAtlas.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var SpriteAtlas = cc.Class({
            name: 'cc.SpriteAtlas',
            extends: cc.Asset,
            properties: { _spriteFrames: { default: {} } },
            getTexture: function getTexture() {
                var keys = Object.keys(this._spriteFrames);
                if (keys.length > 0) {
                    var spriteFrame = this._spriteFrames[keys[0]];
                    return spriteFrame ? spriteFrame.getTexture() : null;
                } else {
                    return null;
                }
            },
            getSpriteFrame: function getSpriteFrame(key) {
                var sf = this._spriteFrames[key];
                if (!sf) {
                    return null;
                }
                if (!sf.name) {
                    sf.name = key;
                }
                return sf;
            },
            getSpriteFrames: function getSpriteFrames() {
                var frames = [];
                var spriteFrames = this._spriteFrames;
                for (var key in spriteFrames) {
                    frames.push(this.getSpriteFrame(key));
                }
                return frames;
            }
        });
        cc.SpriteAtlas = SpriteAtlas;
        module.exports = SpriteAtlas;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,