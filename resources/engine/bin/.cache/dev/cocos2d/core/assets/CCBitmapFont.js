(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/assets/CCBitmapFont.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var BitmapFont = cc.Class({
            name: 'cc.BitmapFont',
            extends: cc.Font,
            properties: {
                fntDataStr: { default: '' },
                spriteFrame: {
                    default: null,
                    type: cc.SpriteFrame
                },
                fontSize: { default: -1 },
                _fntConfig: null
            }
        });
        cc.BitmapFont = BitmapFont;
        module.exports = BitmapFont;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,