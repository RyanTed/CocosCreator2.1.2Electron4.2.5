(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/collider/CCBoxCollider.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        cc.Collider.Box = cc.Class({
            properties: {
                _offset: cc.v2(0, 0),
                _size: cc.size(100, 100),
                offset: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.offset',
                    get: function get() {
                        return this._offset;
                    },
                    set: function set(value) {
                        this._offset = value;
                    },
                    type: cc.Vec2
                },
                size: {
                    tooltip: CC_DEV && 'i18n:COMPONENT.physics.physics_collider.size',
                    get: function get() {
                        return this._size;
                    },
                    set: function set(value) {
                        this._size.width = value.width < 0 ? 0 : value.width;
                        this._size.height = value.height < 0 ? 0 : value.height;
                    },
                    type: cc.Size
                }
            },
            resetInEditor: CC_EDITOR && function () {
                var size = this.node.getContentSize();
                if (size.width !== 0 && size.height !== 0) {
                    this.size = cc.size(size);
                    this.offset.x = (0.5 - this.node.anchorX) * size.width;
                    this.offset.y = (0.5 - this.node.anchorY) * size.height;
                }
            }
        });
        var BoxCollider = cc.Class({
            name: 'cc.BoxCollider',
            extends: cc.Collider,
            mixins: [cc.Collider.Box],
            editor: CC_EDITOR && { menu: 'i18n:MAIN_MENU.component.collider/Box Collider' }
        });
        cc.BoxCollider = module.exports = BoxCollider;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,