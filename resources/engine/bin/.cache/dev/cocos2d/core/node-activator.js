(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/core/node-activator.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var CompScheduler = require('./component-scheduler');
        var Flags = require('./platform/CCObject').Flags;
        var js = require('./platform/js');
        var callerFunctor = CC_EDITOR && require('./utils/misc').tryCatchFunctor_EDITOR;
        var MAX_POOL_SIZE = 4;
        var IsPreloadStarted = Flags.IsPreloadStarted;
        var IsOnLoadStarted = Flags.IsOnLoadStarted;
        var IsOnLoadCalled = Flags.IsOnLoadCalled;
        var Deactivating = Flags.Deactivating;
        var callPreloadInTryCatch = CC_EDITOR && callerFunctor('__preload');
        var callOnLoadInTryCatch = CC_EDITOR && callerFunctor('onLoad', null, 'target._objFlags |= ' + IsOnLoadCalled + '; arg(target);', _onLoadInEditor);
        var callOnDestroyInTryCatch = CC_EDITOR && callerFunctor('onDestroy');
        var callResetInTryCatch = CC_EDITOR && callerFunctor('resetInEditor');
        var callOnFocusInTryCatch = CC_EDITOR && callerFunctor('onFocusInEditor');
        var callOnLostFocusInTryCatch = CC_EDITOR && callerFunctor('onLostFocusInEditor');
        var callPreload = CC_SUPPORT_JIT ? 'c.__preload();' : function (c) {
            c.__preload();
        };
        var callOnLoad = CC_SUPPORT_JIT ? 'c.onLoad();c._objFlags|=' + IsOnLoadCalled : function (c) {
            c.onLoad();
            c._objFlags |= IsOnLoadCalled;
        };
        var UnsortedInvoker = cc.Class({
            extends: CompScheduler.LifeCycleInvoker,
            add: function add(comp) {
                this._zero.array.push(comp);
            },
            remove: function remove(comp) {
                this._zero.fastRemove(comp);
            },
            cancelInactive: function cancelInactive(flagToClear) {
                CompScheduler.LifeCycleInvoker.stableRemoveInactive(this._zero, flagToClear);
            },
            invoke: function invoke() {
                this._invoke(this._zero);
                this._zero.array.length = 0;
            }
        });
        var invokePreload = CompScheduler.createInvokeImpl(CC_EDITOR ? callPreloadInTryCatch : callPreload);
        var invokeOnLoad = CompScheduler.createInvokeImpl(CC_EDITOR ? callOnLoadInTryCatch : callOnLoad);
        var activateTasksPool = new js.Pool(MAX_POOL_SIZE);
        activateTasksPool.get = function getActivateTask() {
            var task = this._get() || {
                preload: new UnsortedInvoker(invokePreload),
                onLoad: new CompScheduler.OneOffInvoker(invokeOnLoad),
                onEnable: new CompScheduler.OneOffInvoker(CompScheduler.invokeOnEnable)
            };
            task.preload._zero.i = -1;
            var invoker = task.onLoad;
            invoker._zero.i = -1;
            invoker._neg.i = -1;
            invoker._pos.i = -1;
            invoker = task.onEnable;
            invoker._zero.i = -1;
            invoker._neg.i = -1;
            invoker._pos.i = -1;
            return task;
        };
        function _componentCorrupted(node, comp, index) {
            if (CC_DEV) {
                cc.errorID(3817, node.name, index);
                console.log('Corrupted component value:', comp);
            }
            if (comp) {
                node._removeComponent(comp);
            } else {
                js.array.removeAt(node._components, index);
            }
        }
        function _onLoadInEditor(comp) {
            if (comp.onLoad && !cc.engine._isPlaying) {
                var focused = Editor.Selection.curActivate('node') === comp.node.uuid;
                if (focused) {
                    comp.onFocusInEditor && callOnFocusInTryCatch(comp);
                } else {
                    comp.onLostFocusInEditor && callOnLostFocusInTryCatch(comp);
                }
            }
            if (!CC_TEST) {
                _Scene.AssetsWatcher.start(comp);
            }
        }
        function ctor() {
            this._activatingStack = [];
        }
        var NodeActivator = cc.Class({
            ctor: ctor,
            reset: ctor,
            _activateNodeRecursively: function _activateNodeRecursively(node, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (node._objFlags & Deactivating) {
                    cc.errorID(3816, node.name);
                    return;
                }
                node._activeInHierarchy = true;
                var originCount = node._components.length;
                for (var i = 0; i < originCount; ++i) {
                    var component = node._components[i];
                    if (component instanceof cc.Component) {
                        this.activateComp(component, preloadInvoker, onLoadInvoker, onEnableInvoker);
                    } else {
                        _componentCorrupted(node, component, i);
                        --i;
                        --originCount;
                    }
                }
                node._childArrivalOrder = node._children.length;
                for (var _i = 0, len = node._children.length; _i < len; ++_i) {
                    var child = node._children[_i];
                    child._localZOrder = child._localZOrder & 4294901760 | _i + 1;
                    if (child._active) {
                        this._activateNodeRecursively(child, preloadInvoker, onLoadInvoker, onEnableInvoker);
                    }
                }
                node._onPostActivated(true);
            },
            _deactivateNodeRecursively: function _deactivateNodeRecursively(node) {
                if (CC_DEV) {
                    cc.assert(!(node._objFlags & Deactivating), 'node should not deactivating');
                    cc.assert(node._activeInHierarchy, 'node should not deactivated');
                }
                node._objFlags |= Deactivating;
                node._activeInHierarchy = false;
                var originCount = node._components.length;
                for (var c = 0; c < originCount; ++c) {
                    var component = node._components[c];
                    if (component._enabled) {
                        cc.director._compScheduler.disableComp(component);
                        if (node._activeInHierarchy) {
                            node._objFlags &= ~Deactivating;
                            return;
                        }
                    }
                }
                for (var i = 0, len = node._children.length; i < len; ++i) {
                    var child = node._children[i];
                    if (child._activeInHierarchy) {
                        this._deactivateNodeRecursively(child);
                        if (node._activeInHierarchy) {
                            node._objFlags &= ~Deactivating;
                            return;
                        }
                    }
                }
                node._onPostActivated(false);
                node._objFlags &= ~Deactivating;
            },
            activateNode: function activateNode(node, active) {
                if (active) {
                    var task = activateTasksPool.get();
                    this._activatingStack.push(task);
                    this._activateNodeRecursively(node, task.preload, task.onLoad, task.onEnable);
                    task.preload.invoke();
                    task.onLoad.invoke();
                    task.onEnable.invoke();
                    this._activatingStack.pop();
                    activateTasksPool.put(task);
                } else {
                    this._deactivateNodeRecursively(node);
                    var stack = this._activatingStack;
                    for (var i = 0; i < stack.length; i++) {
                        var lastTask = stack[i];
                        lastTask.preload.cancelInactive(IsPreloadStarted);
                        lastTask.onLoad.cancelInactive(IsOnLoadStarted);
                        lastTask.onEnable.cancelInactive();
                    }
                }
                node.emit('active-in-hierarchy-changed', node);
            },
            activateComp: CC_EDITOR ? function (comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (!cc.isValid(comp, true)) {
                    return;
                }
                if (cc.engine._isPlaying || comp.constructor._executeInEditMode) {
                    if (!(comp._objFlags & IsPreloadStarted)) {
                        comp._objFlags |= IsPreloadStarted;
                        if (comp.__preload) {
                            if (preloadInvoker) {
                                preloadInvoker.add(comp);
                            } else {
                                callPreloadInTryCatch(comp);
                            }
                        }
                    }
                    if (!(comp._objFlags & IsOnLoadStarted)) {
                        comp._objFlags |= IsOnLoadStarted;
                        if (comp.onLoad) {
                            if (onLoadInvoker) {
                                onLoadInvoker.add(comp);
                            } else {
                                callOnLoadInTryCatch(comp);
                            }
                        } else {
                            comp._objFlags |= IsOnLoadCalled;
                            _onLoadInEditor(comp);
                        }
                    }
                }
                if (comp._enabled) {
                    var deactivatedOnLoading = !comp.node._activeInHierarchy;
                    if (deactivatedOnLoading) {
                        return;
                    }
                    cc.director._compScheduler.enableComp(comp, onEnableInvoker);
                }
            } : function (comp, preloadInvoker, onLoadInvoker, onEnableInvoker) {
                if (!cc.isValid(comp, true)) {
                    return;
                }
                if (!(comp._objFlags & IsPreloadStarted)) {
                    comp._objFlags |= IsPreloadStarted;
                    if (comp.__preload) {
                        if (preloadInvoker) {
                            preloadInvoker.add(comp);
                        } else {
                            comp.__preload();
                        }
                    }
                }
                if (!(comp._objFlags & IsOnLoadStarted)) {
                    comp._objFlags |= IsOnLoadStarted;
                    if (comp.onLoad) {
                        if (onLoadInvoker) {
                            onLoadInvoker.add(comp);
                        } else {
                            comp.onLoad();
                            comp._objFlags |= IsOnLoadCalled;
                        }
                    } else {
                        comp._objFlags |= IsOnLoadCalled;
                    }
                }
                if (comp._enabled) {
                    var deactivatedOnLoading = !comp.node._activeInHierarchy;
                    if (deactivatedOnLoading) {
                        return;
                    }
                    cc.director._compScheduler.enableComp(comp, onEnableInvoker);
                }
            },
            destroyComp: CC_EDITOR ? function (comp) {
                cc.director._compScheduler.disableComp(comp);
                if (comp.onDestroy && comp._objFlags & IsOnLoadCalled) {
                    if (cc.engine._isPlaying || comp.constructor._executeInEditMode) {
                        callOnDestroyInTryCatch(comp);
                        comp._objFlags &= ~IsOnLoadCalled;
                    }
                }
            } : function (comp) {
                cc.director._compScheduler.disableComp(comp);
                if (comp.onDestroy && comp._objFlags & IsOnLoadCalled) {
                    comp.onDestroy();
                }
            },
            resetComp: CC_EDITOR && function (comp) {
                if (comp.resetInEditor) {
                    callResetInTryCatch(comp);
                }
            }
        });
        module.exports = NodeActivator;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,