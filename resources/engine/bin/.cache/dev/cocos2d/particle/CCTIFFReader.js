(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/particle/CCTIFFReader.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var debug = require('../core/CCDebug');
        var tiffReader = {
            _littleEndian: false,
            _tiffData: null,
            _fileDirectories: [],
            getUint8: function getUint8(offset) {
                return this._tiffData[offset];
            },
            getUint16: function getUint16(offset) {
                if (this._littleEndian)
                    return this._tiffData[offset + 1] << 8 | this._tiffData[offset];
                else
                    return this._tiffData[offset] << 8 | this._tiffData[offset + 1];
            },
            getUint32: function getUint32(offset) {
                var a = this._tiffData;
                if (this._littleEndian)
                    return a[offset + 3] << 24 | a[offset + 2] << 16 | a[offset + 1] << 8 | a[offset];
                else
                    return a[offset] << 24 | a[offset + 1] << 16 | a[offset + 2] << 8 | a[offset + 3];
            },
            checkLittleEndian: function checkLittleEndian() {
                var BOM = this.getUint16(0);
                if (BOM === 18761) {
                    this.littleEndian = true;
                } else if (BOM === 19789) {
                    this.littleEndian = false;
                } else {
                    console.log(BOM);
                    throw TypeError(debug.getError(6019));
                }
                return this.littleEndian;
            },
            hasTowel: function hasTowel() {
                if (this.getUint16(2) !== 42) {
                    throw RangeError(debug.getError(6020));
                    return false;
                }
                return true;
            },
            getFieldTypeName: function getFieldTypeName(fieldType) {
                var typeNames = this.fieldTypeNames;
                if (fieldType in typeNames) {
                    return typeNames[fieldType];
                }
                return null;
            },
            getFieldTagName: function getFieldTagName(fieldTag) {
                var tagNames = this.fieldTagNames;
                if (fieldTag in tagNames) {
                    return tagNames[fieldTag];
                } else {
                    cc.logID(6021, fieldTag);
                    return 'Tag' + fieldTag;
                }
            },
            getFieldTypeLength: function getFieldTypeLength(fieldTypeName) {
                if ([
                        'BYTE',
                        'ASCII',
                        'SBYTE',
                        'UNDEFINED'
                    ].indexOf(fieldTypeName) !== -1) {
                    return 1;
                } else if ([
                        'SHORT',
                        'SSHORT'
                    ].indexOf(fieldTypeName) !== -1) {
                    return 2;
                } else if ([
                        'LONG',
                        'SLONG',
                        'FLOAT'
                    ].indexOf(fieldTypeName) !== -1) {
                    return 4;
                } else if ([
                        'RATIONAL',
                        'SRATIONAL',
                        'DOUBLE'
                    ].indexOf(fieldTypeName) !== -1) {
                    return 8;
                }
                return null;
            },
            getFieldValues: function getFieldValues(fieldTagName, fieldTypeName, typeCount, valueOffset) {
                var fieldValues = [];
                var fieldTypeLength = this.getFieldTypeLength(fieldTypeName);
                var fieldValueSize = fieldTypeLength * typeCount;
                if (fieldValueSize <= 4) {
                    if (this.littleEndian === false)
                        fieldValues.push(valueOffset >>> (4 - fieldTypeLength) * 8);
                    else
                        fieldValues.push(valueOffset);
                } else {
                    for (var i = 0; i < typeCount; i++) {
                        var indexOffset = fieldTypeLength * i;
                        if (fieldTypeLength >= 8) {
                            if ([
                                    'RATIONAL',
                                    'SRATIONAL'
                                ].indexOf(fieldTypeName) !== -1) {
                                fieldValues.push(this.getUint32(valueOffset + indexOffset));
                                fieldValues.push(this.getUint32(valueOffset + indexOffset + 4));
                            } else {
                                cc.logID(8000);
                            }
                        } else {
                            fieldValues.push(this.getBytes(fieldTypeLength, valueOffset + indexOffset));
                        }
                    }
                }
                if (fieldTypeName === 'ASCII') {
                    fieldValues.forEach(function (e, i, a) {
                        a[i] = String.fromCharCode(e);
                    });
                }
                return fieldValues;
            },
            getBytes: function getBytes(numBytes, offset) {
                if (numBytes <= 0) {
                    cc.logID(8001);
                } else if (numBytes <= 1) {
                    return this.getUint8(offset);
                } else if (numBytes <= 2) {
                    return this.getUint16(offset);
                } else if (numBytes <= 3) {
                    return this.getUint32(offset) >>> 8;
                } else if (numBytes <= 4) {
                    return this.getUint32(offset);
                } else {
                    cc.logID(8002);
                }
            },
            getBits: function getBits(numBits, byteOffset, bitOffset) {
                bitOffset = bitOffset || 0;
                var extraBytes = Math.floor(bitOffset / 8);
                var newByteOffset = byteOffset + extraBytes;
                var totalBits = bitOffset + numBits;
                var shiftRight = 32 - numBits;
                var shiftLeft, rawBits;
                if (totalBits <= 0) {
                    cc.logID(6023);
                } else if (totalBits <= 8) {
                    shiftLeft = 24 + bitOffset;
                    rawBits = this.getUint8(newByteOffset);
                } else if (totalBits <= 16) {
                    shiftLeft = 16 + bitOffset;
                    rawBits = this.getUint16(newByteOffset);
                } else if (totalBits <= 32) {
                    shiftLeft = bitOffset;
                    rawBits = this.getUint32(newByteOffset);
                } else {
                    cc.logID(6022);
                }
                return {
                    'bits': rawBits << shiftLeft >>> shiftRight,
                    'byteOffset': newByteOffset + Math.floor(totalBits / 8),
                    'bitOffset': totalBits % 8
                };
            },
            parseFileDirectory: function parseFileDirectory(byteOffset) {
                var numDirEntries = this.getUint16(byteOffset);
                var tiffFields = [];
                for (var i = byteOffset + 2, entryCount = 0; entryCount < numDirEntries; i += 12, entryCount++) {
                    var fieldTag = this.getUint16(i);
                    var fieldType = this.getUint16(i + 2);
                    var typeCount = this.getUint32(i + 4);
                    var valueOffset = this.getUint32(i + 8);
                    var fieldTagName = this.getFieldTagName(fieldTag);
                    var fieldTypeName = this.getFieldTypeName(fieldType);
                    var fieldValues = this.getFieldValues(fieldTagName, fieldTypeName, typeCount, valueOffset);
                    tiffFields[fieldTagName] = {
                        type: fieldTypeName,
                        values: fieldValues
                    };
                }
                this._fileDirectories.push(tiffFields);
                var nextIFDByteOffset = this.getUint32(i);
                if (nextIFDByteOffset !== 0) {
                    this.parseFileDirectory(nextIFDByteOffset);
                }
            },
            clampColorSample: function clampColorSample(colorSample, bitsPerSample) {
                var multiplier = Math.pow(2, 8 - bitsPerSample);
                return Math.floor(colorSample * multiplier + (multiplier - 1));
            },
            parseTIFF: function parseTIFF(tiffData, canvas) {
                canvas = canvas || document.createElement('canvas');
                this._tiffData = tiffData;
                this.canvas = canvas;
                this.checkLittleEndian();
                if (!this.hasTowel()) {
                    return;
                }
                var firstIFDByteOffset = this.getUint32(4);
                this._fileDirectories.length = 0;
                this.parseFileDirectory(firstIFDByteOffset);
                var fileDirectory = this._fileDirectories[0];
                var imageWidth = fileDirectory['ImageWidth'].values[0];
                var imageLength = fileDirectory['ImageLength'].values[0];
                this.canvas.width = imageWidth;
                this.canvas.height = imageLength;
                var strips = [];
                var compression = fileDirectory['Compression'] ? fileDirectory['Compression'].values[0] : 1;
                var samplesPerPixel = fileDirectory['SamplesPerPixel'].values[0];
                var sampleProperties = [];
                var bitsPerPixel = 0;
                var hasBytesPerPixel = false;
                fileDirectory['BitsPerSample'].values.forEach(function (bitsPerSample, i, bitsPerSampleValues) {
                    sampleProperties[i] = {
                        bitsPerSample: bitsPerSample,
                        hasBytesPerSample: false,
                        bytesPerSample: undefined
                    };
                    if (bitsPerSample % 8 === 0) {
                        sampleProperties[i].hasBytesPerSample = true;
                        sampleProperties[i].bytesPerSample = bitsPerSample / 8;
                    }
                    bitsPerPixel += bitsPerSample;
                }, this);
                if (bitsPerPixel % 8 === 0) {
                    hasBytesPerPixel = true;
                    var bytesPerPixel = bitsPerPixel / 8;
                }
                var stripOffsetValues = fileDirectory['StripOffsets'].values;
                var numStripOffsetValues = stripOffsetValues.length;
                if (fileDirectory['StripByteCounts']) {
                    var stripByteCountValues = fileDirectory['StripByteCounts'].values;
                } else {
                    cc.logID(8003);
                    if (numStripOffsetValues === 1) {
                        var stripByteCountValues = [Math.ceil(imageWidth * imageLength * bitsPerPixel / 8)];
                    } else {
                        throw Error(debug.getError(6024));
                    }
                }
                for (var i = 0; i < numStripOffsetValues; i++) {
                    var stripOffset = stripOffsetValues[i];
                    strips[i] = [];
                    var stripByteCount = stripByteCountValues[i];
                    for (var byteOffset = 0, bitOffset = 0, jIncrement = 1, getHeader = true, pixel = [], numBytes = 0, sample = 0, currentSample = 0; byteOffset < stripByteCount; byteOffset += jIncrement) {
                        switch (compression) {
                        case 1:
                            for (var m = 0, pixel = []; m < samplesPerPixel; m++) {
                                if (sampleProperties[m].hasBytesPerSample) {
                                    var sampleOffset = sampleProperties[m].bytesPerSample * m;
                                    pixel.push(this.getBytes(sampleProperties[m].bytesPerSample, stripOffset + byteOffset + sampleOffset));
                                } else {
                                    var sampleInfo = this.getBits(sampleProperties[m].bitsPerSample, stripOffset + byteOffset, bitOffset);
                                    pixel.push(sampleInfo.bits);
                                    byteOffset = sampleInfo.byteOffset - stripOffset;
                                    bitOffset = sampleInfo.bitOffset;
                                    throw RangeError(debug.getError(6025));
                                }
                            }
                            strips[i].push(pixel);
                            if (hasBytesPerPixel) {
                                jIncrement = bytesPerPixel;
                            } else {
                                jIncrement = 0;
                                throw RangeError(debug.getError(6026));
                            }
                            break;
                        case 2:
                            break;
                        case 3:
                            break;
                        case 4:
                            break;
                        case 5:
                            break;
                        case 6:
                            break;
                        case 7:
                            break;
                        case 32773:
                            if (getHeader) {
                                getHeader = false;
                                var blockLength = 1;
                                var iterations = 1;
                                var header = this.getInt8(stripOffset + byteOffset);
                                if (header >= 0 && header <= 127) {
                                    blockLength = header + 1;
                                } else if (header >= -127 && header <= -1) {
                                    iterations = -header + 1;
                                } else {
                                    getHeader = true;
                                }
                            } else {
                                var currentByte = this.getUint8(stripOffset + byteOffset);
                                for (var m = 0; m < iterations; m++) {
                                    if (sampleProperties[sample].hasBytesPerSample) {
                                        currentSample = currentSample << 8 * numBytes | currentByte;
                                        numBytes++;
                                        if (numBytes === sampleProperties[sample].bytesPerSample) {
                                            pixel.push(currentSample);
                                            currentSample = numBytes = 0;
                                            sample++;
                                        }
                                    } else {
                                        throw RangeError(debug.getError(6025));
                                    }
                                    if (sample === samplesPerPixel) {
                                        strips[i].push(pixel);
                                        pixel = [];
                                        sample = 0;
                                    }
                                }
                                blockLength--;
                                if (blockLength === 0) {
                                    getHeader = true;
                                }
                            }
                            jIncrement = 1;
                            break;
                        default:
                            break;
                        }
                    }
                }
                if (canvas.getContext) {
                    var ctx = this.canvas.getContext('2d');
                    ctx.fillStyle = 'rgba(255, 255, 255, 0)';
                    var rowsPerStrip = fileDirectory['RowsPerStrip'] ? fileDirectory['RowsPerStrip'].values[0] : imageLength;
                    var numStrips = strips.length;
                    var imageLengthModRowsPerStrip = imageLength % rowsPerStrip;
                    var rowsInLastStrip = imageLengthModRowsPerStrip === 0 ? rowsPerStrip : imageLengthModRowsPerStrip;
                    var numRowsInStrip = rowsPerStrip;
                    var numRowsInPreviousStrip = 0;
                    var photometricInterpretation = fileDirectory['PhotometricInterpretation'].values[0];
                    var extraSamplesValues = [];
                    var numExtraSamples = 0;
                    if (fileDirectory['ExtraSamples']) {
                        extraSamplesValues = fileDirectory['ExtraSamples'].values;
                        numExtraSamples = extraSamplesValues.length;
                    }
                    if (fileDirectory['ColorMap']) {
                        var colorMapValues = fileDirectory['ColorMap'].values;
                        var colorMapSampleSize = Math.pow(2, sampleProperties[0].bitsPerSample);
                    }
                    for (var i = 0; i < numStrips; i++) {
                        if (i + 1 === numStrips) {
                            numRowsInStrip = rowsInLastStrip;
                        }
                        var numPixels = strips[i].length;
                        var yPadding = numRowsInPreviousStrip * i;
                        for (var y = 0, j = 0; y < numRowsInStrip, j < numPixels; y++) {
                            for (var x = 0; x < imageWidth; x++, j++) {
                                var pixelSamples = strips[i][j];
                                var red = 0;
                                var green = 0;
                                var blue = 0;
                                var opacity = 1;
                                if (numExtraSamples > 0) {
                                    for (var k = 0; k < numExtraSamples; k++) {
                                        if (extraSamplesValues[k] === 1 || extraSamplesValues[k] === 2) {
                                            opacity = pixelSamples[3 + k] / 256;
                                            break;
                                        }
                                    }
                                }
                                switch (photometricInterpretation) {
                                case 0:
                                    if (sampleProperties[0].hasBytesPerSample) {
                                        var invertValue = Math.pow(16, sampleProperties[0].bytesPerSample * 2);
                                    }
                                    pixelSamples.forEach(function (sample, index, samples) {
                                        samples[index] = invertValue - sample;
                                    });
                                case 1:
                                    red = green = blue = this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);
                                    break;
                                case 2:
                                    red = this.clampColorSample(pixelSamples[0], sampleProperties[0].bitsPerSample);
                                    green = this.clampColorSample(pixelSamples[1], sampleProperties[1].bitsPerSample);
                                    blue = this.clampColorSample(pixelSamples[2], sampleProperties[2].bitsPerSample);
                                    break;
                                case 3:
                                    if (colorMapValues === undefined) {
                                        throw Error(debug.getError(6027));
                                    }
                                    var colorMapIndex = pixelSamples[0];
                                    red = this.clampColorSample(colorMapValues[colorMapIndex], 16);
                                    green = this.clampColorSample(colorMapValues[colorMapSampleSize + colorMapIndex], 16);
                                    blue = this.clampColorSample(colorMapValues[2 * colorMapSampleSize + colorMapIndex], 16);
                                    break;
                                default:
                                    throw RangeError(debug.getError(6028, photometricInterpretation));
                                    break;
                                }
                                ctx.fillStyle = 'rgba(' + red + ', ' + green + ', ' + blue + ', ' + opacity + ')';
                                ctx.fillRect(x, yPadding + y, 1, 1);
                            }
                        }
                        numRowsInPreviousStrip = numRowsInStrip;
                    }
                }
                return this.canvas;
            },
            fieldTagNames: {
                315: 'Artist',
                258: 'BitsPerSample',
                265: 'CellLength',
                264: 'CellWidth',
                320: 'ColorMap',
                259: 'Compression',
                33432: 'Copyright',
                306: 'DateTime',
                338: 'ExtraSamples',
                266: 'FillOrder',
                289: 'FreeByteCounts',
                288: 'FreeOffsets',
                291: 'GrayResponseCurve',
                290: 'GrayResponseUnit',
                316: 'HostComputer',
                270: 'ImageDescription',
                257: 'ImageLength',
                256: 'ImageWidth',
                271: 'Make',
                281: 'MaxSampleValue',
                280: 'MinSampleValue',
                272: 'Model',
                254: 'NewSubfileType',
                274: 'Orientation',
                262: 'PhotometricInterpretation',
                284: 'PlanarConfiguration',
                296: 'ResolutionUnit',
                278: 'RowsPerStrip',
                277: 'SamplesPerPixel',
                305: 'Software',
                279: 'StripByteCounts',
                273: 'StripOffsets',
                255: 'SubfileType',
                263: 'Threshholding',
                282: 'XResolution',
                283: 'YResolution',
                326: 'BadFaxLines',
                327: 'CleanFaxData',
                343: 'ClipPath',
                328: 'ConsecutiveBadFaxLines',
                433: 'Decode',
                434: 'DefaultImageColor',
                269: 'DocumentName',
                336: 'DotRange',
                321: 'HalftoneHints',
                346: 'Indexed',
                347: 'JPEGTables',
                285: 'PageName',
                297: 'PageNumber',
                317: 'Predictor',
                319: 'PrimaryChromaticities',
                532: 'ReferenceBlackWhite',
                339: 'SampleFormat',
                559: 'StripRowCounts',
                330: 'SubIFDs',
                292: 'T4Options',
                293: 'T6Options',
                325: 'TileByteCounts',
                323: 'TileLength',
                324: 'TileOffsets',
                322: 'TileWidth',
                301: 'TransferFunction',
                318: 'WhitePoint',
                344: 'XClipPathUnits',
                286: 'XPosition',
                529: 'YCbCrCoefficients',
                531: 'YCbCrPositioning',
                530: 'YCbCrSubSampling',
                345: 'YClipPathUnits',
                287: 'YPosition',
                37378: 'ApertureValue',
                40961: 'ColorSpace',
                36868: 'DateTimeDigitized',
                36867: 'DateTimeOriginal',
                34665: 'Exif IFD',
                36864: 'ExifVersion',
                33434: 'ExposureTime',
                41728: 'FileSource',
                37385: 'Flash',
                40960: 'FlashpixVersion',
                33437: 'FNumber',
                42016: 'ImageUniqueID',
                37384: 'LightSource',
                37500: 'MakerNote',
                37377: 'ShutterSpeedValue',
                37510: 'UserComment',
                33723: 'IPTC',
                34675: 'ICC Profile',
                700: 'XMP',
                42112: 'GDAL_METADATA',
                42113: 'GDAL_NODATA',
                34377: 'Photoshop'
            },
            fieldTypeNames: {
                1: 'BYTE',
                2: 'ASCII',
                3: 'SHORT',
                4: 'LONG',
                5: 'RATIONAL',
                6: 'SBYTE',
                7: 'UNDEFINED',
                8: 'SSHORT',
                9: 'SLONG',
                10: 'SRATIONAL',
                11: 'FLOAT',
                12: 'DOUBLE'
            }
        };
        module.exports = tiffReader;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,