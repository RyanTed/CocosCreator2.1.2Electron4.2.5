(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/particle/CCParticleSystem.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var macro = require('../core/platform/CCMacro');
        var ParticleAsset = require('./CCParticleAsset');
        var RenderComponent = require('../core/components/CCRenderComponent');
        var codec = require('../compression/ZipUtils');
        var PNGReader = require('./CCPNGReader');
        var tiffReader = require('./CCTIFFReader');
        var textureUtil = require('../core/utils/texture-util');
        var RenderFlow = require('../core/renderer/render-flow');
        var ParticleSimulator = require('./particle-simulator');
        var Material = require('../core/assets/material/CCMaterial');
        var BlendFunc = require('../core/utils/blend-func');
        function getImageFormatByData(imgData) {
            if (imgData.length > 8 && imgData[0] === 137 && imgData[1] === 80 && imgData[2] === 78 && imgData[3] === 71 && imgData[4] === 13 && imgData[5] === 10 && imgData[6] === 26 && imgData[7] === 10) {
                return macro.ImageFormat.PNG;
            }
            if (imgData.length > 2 && (imgData[0] === 73 && imgData[1] === 73 || imgData[0] === 77 && imgData[1] === 77 || imgData[0] === 255 && imgData[1] === 216)) {
                return macro.ImageFormat.TIFF;
            }
            return macro.ImageFormat.UNKNOWN;
        }
        var EmitterMode = cc.Enum({
            GRAVITY: 0,
            RADIUS: 1
        });
        var PositionType = cc.Enum({
            FREE: 0,
            RELATIVE: 1,
            GROUPED: 2
        });
        var properties = {
            preview: {
                default: true,
                editorOnly: true,
                notify: CC_EDITOR && function () {
                    this.resetSystem();
                    if (!this.preview) {
                        this.stopSystem();
                        this.disableRender();
                    }
                    cc.engine.repaintInEditMode();
                },
                animatable: false,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.preview'
            },
            _custom: false,
            custom: {
                get: function get() {
                    return this._custom;
                },
                set: function set(value) {
                    if (CC_EDITOR && !value && !this._file) {
                        return cc.warnID(6000);
                    }
                    if (this._custom !== value) {
                        this._custom = value;
                        this._applyFile();
                        if (CC_EDITOR) {
                            cc.engine.repaintInEditMode();
                        }
                    }
                },
                animatable: false,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.custom'
            },
            _file: {
                default: null,
                type: ParticleAsset
            },
            file: {
                get: function get() {
                    return this._file;
                },
                set: function set(value, force) {
                    if (this._file !== value || CC_EDITOR && force) {
                        this._file = value;
                        if (value) {
                            this._applyFile();
                            if (CC_EDITOR) {
                                cc.engine.repaintInEditMode();
                            }
                        } else {
                            this.custom = true;
                        }
                    }
                },
                animatable: false,
                type: ParticleAsset,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.file'
            },
            _spriteFrame: {
                default: null,
                type: cc.SpriteFrame
            },
            spriteFrame: {
                get: function get() {
                    return this._spriteFrame;
                },
                set: function set(value, force) {
                    var lastSprite = this._renderSpriteFrame;
                    if (CC_EDITOR) {
                        if (!force && lastSprite === value) {
                            return;
                        }
                    } else {
                        if (lastSprite === value) {
                            return;
                        }
                    }
                    this._renderSpriteFrame = value;
                    if (!value || value._uuid) {
                        this._spriteFrame = value;
                    }
                    if ((lastSprite && lastSprite.getTexture()) !== (value && value.getTexture())) {
                        this._texture = null;
                        this._applySpriteFrame(lastSprite);
                    }
                    if (CC_EDITOR) {
                        this.node.emit('spriteframe-changed', this);
                    }
                },
                type: cc.SpriteFrame,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.spriteFrame'
            },
            _texture: {
                default: null,
                type: cc.Texture2D,
                editorOnly: true
            },
            texture: {
                get: function get() {
                    return this._texture;
                },
                set: function set(value) {
                    if (value) {
                        cc.warnID(6017);
                    }
                },
                type: cc.Texture2D,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.texture',
                readonly: true,
                visible: false,
                animatable: false
            },
            particleCount: {
                visible: false,
                get: function get() {
                    return this._simulator.particles.length;
                },
                readonly: true
            },
            _stopped: true,
            stopped: {
                get: function get() {
                    return this._stopped;
                },
                animatable: false,
                visible: false
            },
            playOnLoad: true,
            autoRemoveOnFinish: {
                default: false,
                animatable: false,
                tooltip: CC_DEV && 'i18n:COMPONENT.particle_system.autoRemoveOnFinish'
            },
            active: {
                get: function get() {
                    return this._simulator.active;
                },
                visible: false
            },
            totalParticles: 150,
            duration: -1,
            emissionRate: 10,
            life: 1,
            lifeVar: 0,
            _startColor: null,
            startColor: {
                type: cc.Color,
                get: function get() {
                    return this._startColor;
                },
                set: function set(val) {
                    this._startColor.r = val.r;
                    this._startColor.g = val.g;
                    this._startColor.b = val.b;
                    this._startColor.a = val.a;
                }
            },
            _startColorVar: null,
            startColorVar: {
                type: cc.Color,
                get: function get() {
                    return this._startColorVar;
                },
                set: function set(val) {
                    this._startColorVar.r = val.r;
                    this._startColorVar.g = val.g;
                    this._startColorVar.b = val.b;
                    this._startColorVar.a = val.a;
                }
            },
            _endColor: null,
            endColor: {
                type: cc.Color,
                get: function get() {
                    return this._endColor;
                },
                set: function set(val) {
                    this._endColor.r = val.r;
                    this._endColor.g = val.g;
                    this._endColor.b = val.b;
                    this._endColor.a = val.a;
                }
            },
            _endColorVar: null,
            endColorVar: {
                type: cc.Color,
                get: function get() {
                    return this._endColorVar;
                },
                set: function set(val) {
                    this._endColorVar.r = val.r;
                    this._endColorVar.g = val.g;
                    this._endColorVar.b = val.b;
                    this._endColorVar.a = val.a;
                }
            },
            angle: 90,
            angleVar: 20,
            startSize: 50,
            startSizeVar: 0,
            endSize: 0,
            endSizeVar: 0,
            startSpin: 0,
            startSpinVar: 0,
            endSpin: 0,
            endSpinVar: 0,
            sourcePos: cc.Vec2.ZERO,
            posVar: cc.Vec2.ZERO,
            _positionType: {
                default: PositionType.FREE,
                formerlySerializedAs: 'positionType'
            },
            positionType: {
                type: PositionType,
                get: function get() {
                    return this._positionType;
                },
                set: function set(val) {
                    var material = this.getMaterial(0);
                    if (material) {
                        material.define('_USE_MODEL', val !== PositionType.FREE);
                    }
                    this._positionType = val;
                }
            },
            emitterMode: {
                default: EmitterMode.GRAVITY,
                type: EmitterMode
            },
            gravity: cc.Vec2.ZERO,
            speed: 180,
            speedVar: 50,
            tangentialAccel: 80,
            tangentialAccelVar: 0,
            radialAccel: 0,
            radialAccelVar: 0,
            rotationIsDir: false,
            startRadius: 0,
            startRadiusVar: 0,
            endRadius: 0,
            endRadiusVar: 0,
            rotatePerS: 0,
            rotatePerSVar: 0
        };
        var ParticleSystem = cc.Class({
            name: 'cc.ParticleSystem',
            extends: RenderComponent,
            mixins: [BlendFunc],
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.renderers/ParticleSystem',
                inspector: 'packages://inspector/inspectors/comps/particle-system.js',
                playOnFocus: true,
                executeInEditMode: true
            },
            ctor: function ctor() {
                this._previewTimer = null;
                this._focused = false;
                this._simulator = new ParticleSimulator(this);
                this._startColor = cc.color(255, 255, 255, 255);
                this._startColorVar = cc.color(0, 0, 0, 0);
                this._endColor = cc.color(255, 255, 255, 0);
                this._endColorVar = cc.color(0, 0, 0, 0);
                this._renderSpriteFrame = null;
            },
            properties: properties,
            statics: {
                DURATION_INFINITY: -1,
                START_SIZE_EQUAL_TO_END_SIZE: -1,
                START_RADIUS_EQUAL_TO_END_RADIUS: -1,
                EmitterMode: EmitterMode,
                PositionType: PositionType,
                _PNGReader: PNGReader,
                _TIFFReader: tiffReader
            },
            onFocusInEditor: CC_EDITOR && function () {
                this._focused = true;
                if (this.preview) {
                    this.resetSystem();
                }
            },
            onLostFocusInEditor: CC_EDITOR && function () {
                this._focused = false;
                if (this.preview) {
                    this.resetSystem();
                    this.stopSystem();
                    this.disableRender();
                    cc.engine.repaintInEditMode();
                }
                if (this._previewTimer) {
                    clearInterval(this._previewTimer);
                }
            },
            _convertTextureToSpriteFrame: CC_EDITOR && function () {
                if (this._spriteFrame) {
                    return;
                }
                var texture = this.texture;
                if (!texture || !texture._uuid) {
                    return;
                }
                var _this = this;
                Editor.assetdb.queryMetaInfoByUuid(texture._uuid, function (err, metaInfo) {
                    if (err)
                        return Editor.error(err);
                    var meta = JSON.parse(metaInfo.json);
                    if (meta.type === 'raw') {
                        var NodeUtils = Editor.require('app://editor/page/scene-utils/utils/node');
                        var nodePath = NodeUtils.getNodePath(_this.node);
                        return Editor.warn('The texture ' + metaInfo.assetUrl + ' used by particle ' + nodePath + ' does not contain any SpriteFrame, please set the texture type to Sprite and reassign the SpriteFrame to the particle component.');
                    } else {
                        var Url = require('fire-url');
                        var name = Url.basenameNoExt(metaInfo.assetPath);
                        var uuid = meta.subMetas[name].uuid;
                        cc.AssetLibrary.loadAsset(uuid, function (err, sp) {
                            if (err)
                                return Editor.error(err);
                            _this._texture = null;
                            _this.spriteFrame = sp;
                        });
                    }
                });
            },
            __preload: function __preload() {
                if (CC_EDITOR) {
                    this._convertTextureToSpriteFrame();
                }
                if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {
                    this._applySpriteFrame(this.spriteFrame);
                } else if (this._file) {
                    if (this._custom) {
                        var missCustomTexture = !this._texture;
                        if (missCustomTexture) {
                            this._applyFile();
                        }
                    } else {
                        this._applyFile();
                    }
                }
                if (!CC_EDITOR || cc.engine.isPlaying) {
                    if (this.playOnLoad) {
                        this.resetSystem();
                    }
                }
                if (CC_EDITOR && !(this._startColor instanceof cc.Color)) {
                    this._startColor = cc.color(this._startColor);
                    this._startColorVar = cc.color(this._startColorVar);
                    this._endColor = cc.color(this._endColor);
                    this._endColorVar = cc.color(this._endColorVar);
                }
            },
            onEnable: function onEnable() {
                this._super();
                this.node._renderFlag &= ~RenderFlow.FLAG_RENDER;
                this._activateMaterial();
            },
            onDestroy: function onDestroy() {
                if (this.autoRemoveOnFinish) {
                    this.autoRemoveOnFinish = false;
                }
                if (this._buffer) {
                    this._buffer.destroy();
                    this._buffer = null;
                }
                this._ia = null;
                this._simulator._uvFilled = 0;
                this._super();
            },
            lateUpdate: function lateUpdate(dt) {
                if (!this._simulator.finished && this._ia) {
                    this._simulator.step(dt);
                }
            },
            addParticle: function addParticle() {
            },
            stopSystem: function stopSystem() {
                this._stopped = true;
                this._simulator.stop();
            },
            resetSystem: function resetSystem() {
                this._stopped = false;
                this._simulator.reset();
                this._activateMaterial();
            },
            isFull: function isFull() {
                return this.particleCount >= this.totalParticles;
            },
            setTextureWithRect: function setTextureWithRect(texture, rect) {
                if (texture instanceof cc.Texture2D) {
                    this.spriteFrame = new cc.SpriteFrame(texture, rect);
                }
            },
            _applyFile: function _applyFile() {
                var file = this._file;
                if (file) {
                    var self = this;
                    cc.loader.load(file.nativeUrl, function (err, content) {
                        if (err || !content) {
                            cc.errorID(6029);
                            return;
                        }
                        if (!self.isValid) {
                            return;
                        }
                        self._plistFile = file.nativeUrl;
                        if (!self._custom) {
                            self._initWithDictionary(content);
                        }
                        if (!self._spriteFrame) {
                            if (file.spriteFrame) {
                                self.spriteFrame = file.spriteFrame;
                            } else if (self._custom) {
                                self._initTextureWithDictionary(content);
                            }
                        } else if (!self._renderSpriteFrame && self._spriteFrame) {
                            self._applySpriteFrame(self.spriteFrame);
                        }
                    });
                }
            },
            _initTextureWithDictionary: function _initTextureWithDictionary(dict) {
                var imgPath = cc.path.changeBasename(this._plistFile, dict['textureFileName'] || '');
                if (dict['textureFileName']) {
                    textureUtil.loadImage(imgPath, function (error, texture) {
                        if (error) {
                            dict['textureFileName'] = undefined;
                            this._initTextureWithDictionary(dict);
                        } else {
                            this.spriteFrame = new cc.SpriteFrame(texture);
                        }
                    }, this);
                } else if (dict['textureImageData']) {
                    var textureData = dict['textureImageData'];
                    if (textureData && textureData.length > 0) {
                        var tex = cc.loader.getRes(imgPath);
                        if (!tex) {
                            var buffer = codec.unzipBase64AsArray(textureData, 1);
                            if (!buffer) {
                                cc.logID(6030);
                                return false;
                            }
                            var imageFormat = getImageFormatByData(buffer);
                            if (imageFormat !== macro.ImageFormat.TIFF && imageFormat !== macro.ImageFormat.PNG) {
                                cc.logID(6031);
                                return false;
                            }
                            var canvasObj = document.createElement('canvas');
                            if (imageFormat === macro.ImageFormat.PNG) {
                                var myPngObj = new PNGReader(buffer);
                                myPngObj.render(canvasObj);
                            } else {
                                tiffReader.parseTIFF(buffer, canvasObj);
                            }
                            tex = textureUtil.cacheImage(imgPath, canvasObj);
                        }
                        if (!tex)
                            cc.logID(6032);
                        this.spriteFrame = new cc.SpriteFrame(tex);
                    } else {
                        return false;
                    }
                }
                return true;
            },
            _initWithDictionary: function _initWithDictionary(dict) {
                this.totalParticles = parseInt(dict['maxParticles'] || 0);
                this.life = parseFloat(dict['particleLifespan'] || 0);
                this.lifeVar = parseFloat(dict['particleLifespanVariance'] || 0);
                var _tempEmissionRate = dict['emissionRate'];
                if (_tempEmissionRate) {
                    this.emissionRate = _tempEmissionRate;
                } else {
                    this.emissionRate = Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
                }
                this.duration = parseFloat(dict['duration'] || 0);
                this.srcBlendFactor = parseInt(dict['blendFuncSource'] || macro.SRC_ALPHA);
                this.dstBlendFactor = parseInt(dict['blendFuncDestination'] || macro.ONE_MINUS_SRC_ALPHA);
                var locStartColor = this._startColor;
                locStartColor.r = parseFloat(dict['startColorRed'] || 0) * 255;
                locStartColor.g = parseFloat(dict['startColorGreen'] || 0) * 255;
                locStartColor.b = parseFloat(dict['startColorBlue'] || 0) * 255;
                locStartColor.a = parseFloat(dict['startColorAlpha'] || 0) * 255;
                var locStartColorVar = this._startColorVar;
                locStartColorVar.r = parseFloat(dict['startColorVarianceRed'] || 0) * 255;
                locStartColorVar.g = parseFloat(dict['startColorVarianceGreen'] || 0) * 255;
                locStartColorVar.b = parseFloat(dict['startColorVarianceBlue'] || 0) * 255;
                locStartColorVar.a = parseFloat(dict['startColorVarianceAlpha'] || 0) * 255;
                var locEndColor = this._endColor;
                locEndColor.r = parseFloat(dict['finishColorRed'] || 0) * 255;
                locEndColor.g = parseFloat(dict['finishColorGreen'] || 0) * 255;
                locEndColor.b = parseFloat(dict['finishColorBlue'] || 0) * 255;
                locEndColor.a = parseFloat(dict['finishColorAlpha'] || 0) * 255;
                var locEndColorVar = this._endColorVar;
                locEndColorVar.r = parseFloat(dict['finishColorVarianceRed'] || 0) * 255;
                locEndColorVar.g = parseFloat(dict['finishColorVarianceGreen'] || 0) * 255;
                locEndColorVar.b = parseFloat(dict['finishColorVarianceBlue'] || 0) * 255;
                locEndColorVar.a = parseFloat(dict['finishColorVarianceAlpha'] || 0) * 255;
                this.startSize = parseFloat(dict['startParticleSize'] || 0);
                this.startSizeVar = parseFloat(dict['startParticleSizeVariance'] || 0);
                this.endSize = parseFloat(dict['finishParticleSize'] || 0);
                this.endSizeVar = parseFloat(dict['finishParticleSizeVariance'] || 0);
                this.positionType = parseFloat(dict['positionType'] || PositionType.RELATIVE);
                this.sourcePos.x = 0;
                this.sourcePos.y = 0;
                this.posVar.x = parseFloat(dict['sourcePositionVariancex'] || 0);
                this.posVar.y = parseFloat(dict['sourcePositionVariancey'] || 0);
                this.angle = parseFloat(dict['angle'] || 0);
                this.angleVar = parseFloat(dict['angleVariance'] || 0);
                this.startSpin = parseFloat(dict['rotationStart'] || 0);
                this.startSpinVar = parseFloat(dict['rotationStartVariance'] || 0);
                this.endSpin = parseFloat(dict['rotationEnd'] || 0);
                this.endSpinVar = parseFloat(dict['rotationEndVariance'] || 0);
                this.emitterMode = parseInt(dict['emitterType'] || EmitterMode.GRAVITY);
                if (this.emitterMode === EmitterMode.GRAVITY) {
                    this.gravity.x = parseFloat(dict['gravityx'] || 0);
                    this.gravity.y = parseFloat(dict['gravityy'] || 0);
                    this.speed = parseFloat(dict['speed'] || 0);
                    this.speedVar = parseFloat(dict['speedVariance'] || 0);
                    this.radialAccel = parseFloat(dict['radialAcceleration'] || 0);
                    this.radialAccelVar = parseFloat(dict['radialAccelVariance'] || 0);
                    this.tangentialAccel = parseFloat(dict['tangentialAcceleration'] || 0);
                    this.tangentialAccelVar = parseFloat(dict['tangentialAccelVariance'] || 0);
                    var locRotationIsDir = dict['rotationIsDir'] || '';
                    if (locRotationIsDir !== null) {
                        locRotationIsDir = locRotationIsDir.toString().toLowerCase();
                        this.rotationIsDir = locRotationIsDir === 'true' || locRotationIsDir === '1';
                    } else {
                        this.rotationIsDir = false;
                    }
                } else if (this.emitterMode === EmitterMode.RADIUS) {
                    this.startRadius = parseFloat(dict['maxRadius'] || 0);
                    this.startRadiusVar = parseFloat(dict['maxRadiusVariance'] || 0);
                    this.endRadius = parseFloat(dict['minRadius'] || 0);
                    this.endRadiusVar = parseFloat(dict['minRadiusVariance'] || 0);
                    this.rotatePerS = parseFloat(dict['rotatePerSecond'] || 0);
                    this.rotatePerSVar = parseFloat(dict['rotatePerSecondVariance'] || 0);
                } else {
                    cc.warnID(6009);
                    return false;
                }
                this._initTextureWithDictionary(dict);
                return true;
            },
            _onTextureLoaded: function _onTextureLoaded() {
                this._texture = this._renderSpriteFrame.getTexture();
                this._simulator.updateUVs(true);
                this._activateMaterial();
            },
            _applySpriteFrame: function _applySpriteFrame(oldFrame) {
                if (oldFrame && oldFrame.off) {
                    oldFrame.off('load', this._onTextureLoaded, this);
                }
                var spriteFrame = this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;
                if (spriteFrame) {
                    if (spriteFrame.textureLoaded()) {
                        this._onTextureLoaded(null);
                    } else {
                        spriteFrame.once('load', this._onTextureLoaded, this);
                        spriteFrame.ensureLoadTexture();
                    }
                }
            },
            _activateMaterial: function _activateMaterial() {
                if (!this._texture || !this._texture.loaded) {
                    this.markForCustomIARender(false);
                    if (this._renderSpriteFrame) {
                        this._applySpriteFrame();
                    }
                    return;
                }
                if (!this._ia) {
                    ParticleSystem._assembler.createIA(this);
                }
                var material = this.sharedMaterials[0];
                if (!material) {
                    material = Material.getInstantiatedBuiltinMaterial('2d-sprite', this);
                } else {
                    material = Material.getInstantiatedMaterial(material, this);
                }
                material.define('_USE_MODEL', this._positionType !== PositionType.FREE);
                material.setProperty('texture', this._texture);
                this.setMaterial(0, material);
                this.markForCustomIARender(true);
            },
            _finishedSimulation: function _finishedSimulation() {
                if (CC_EDITOR) {
                    if (this.preview && this._focused && !this.active && !cc.engine.isPlaying) {
                        this.resetSystem();
                    }
                    return;
                }
                this.resetSystem();
                this.stopSystem();
                this.disableRender();
                if (this.autoRemoveOnFinish && this._stopped) {
                    this.node.destroy();
                }
            }
        });
        cc.ParticleSystem = module.exports = ParticleSystem;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,