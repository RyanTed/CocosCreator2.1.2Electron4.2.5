(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/webview/CCWebView.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var WebViewImpl = require('./webview-impl');
        var EventType = WebViewImpl.EventType;
        function emptyCallback() {
        }
        var WebView = cc.Class({
            name: 'cc.WebView',
            extends: cc.Component,
            editor: CC_EDITOR && {
                menu: 'i18n:MAIN_MENU.component.ui/WebView',
                executeInEditMode: true
            },
            properties: {
                _useOriginalSize: true,
                _url: '',
                url: {
                    type: String,
                    tooltip: CC_DEV && 'i18n:COMPONENT.webview.url',
                    get: function get() {
                        return this._url;
                    },
                    set: function set(url) {
                        this._url = url;
                        var impl = this._impl;
                        if (impl) {
                            impl.loadURL(url);
                        }
                    }
                },
                webviewEvents: {
                    default: [],
                    type: cc.Component.EventHandler
                }
            },
            statics: {
                EventType: EventType,
                Impl: WebViewImpl
            },
            ctor: function ctor() {
                this._impl = new WebView.Impl();
            },
            onRestore: function onRestore() {
                if (!this._impl) {
                    this._impl = new WebView.Impl();
                }
            },
            onEnable: function onEnable() {
                var impl = this._impl;
                impl.createDomElementIfNeeded(this.node.width, this.node.height);
                if (!CC_EDITOR) {
                    impl.setEventListener(EventType.LOADED, this._onWebViewLoaded.bind(this));
                    impl.setEventListener(EventType.LOADING, this._onWebViewLoading.bind(this));
                    impl.setEventListener(EventType.ERROR, this._onWebViewLoadError.bind(this));
                }
                impl.loadURL(this._url);
                impl.setVisible(true);
            },
            onDisable: function onDisable() {
                var impl = this._impl;
                impl.setVisible(false);
                if (!CC_EDITOR) {
                    impl.setEventListener(EventType.LOADED, emptyCallback);
                    impl.setEventListener(EventType.LOADING, emptyCallback);
                    impl.setEventListener(EventType.ERROR, emptyCallback);
                }
            },
            onDestroy: function onDestroy() {
                if (this._impl) {
                    this._impl.destroy();
                    this._impl = null;
                }
            },
            update: function update(dt) {
                if (this._impl) {
                    this._impl.updateMatrix(this.node);
                }
            },
            _onWebViewLoaded: function _onWebViewLoaded() {
                cc.Component.EventHandler.emitEvents(this.webviewEvents, this, EventType.LOADED);
                this.node.emit('loaded', this);
            },
            _onWebViewLoading: function _onWebViewLoading() {
                cc.Component.EventHandler.emitEvents(this.webviewEvents, this, EventType.LOADING);
                this.node.emit('loading', this);
                return true;
            },
            _onWebViewLoadError: function _onWebViewLoadError() {
                cc.Component.EventHandler.emitEvents(this.webviewEvents, this, EventType.ERROR);
                this.node.emit('error', this);
            },
            setJavascriptInterfaceScheme: function setJavascriptInterfaceScheme(scheme) {
                if (this._impl) {
                    this._impl.setJavascriptInterfaceScheme(scheme);
                }
            },
            setOnJSCallback: function setOnJSCallback(callback) {
                if (this._impl) {
                    this._impl.setOnJSCallback(callback);
                }
            },
            evaluateJS: function evaluateJS(str) {
                if (this._impl) {
                    this._impl.evaluateJS(str);
                }
            }
        });
        cc.WebView = module.exports = WebView;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,