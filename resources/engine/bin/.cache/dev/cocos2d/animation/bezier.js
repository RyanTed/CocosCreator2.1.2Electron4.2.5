(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/bezier.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        function bezier(C1, C2, C3, C4, t) {
            var t1 = 1 - t;
            return C1 * t1 * t1 * t1 + C2 * 3 * t1 * t1 * t + C3 * 3 * t1 * t * t + C4 * t * t * t;
        }
        var cos = Math.cos, acos = Math.acos, max = Math.max, pi = Math.PI, tau = 2 * pi, sqrt = Math.sqrt;
        function crt(v) {
            if (v < 0) {
                return -Math.pow(-v, 1 / 3);
            } else {
                return Math.pow(v, 1 / 3);
            }
        }
        function cardano(curve, x) {
            var pa = x - 0;
            var pb = x - curve[0];
            var pc = x - curve[2];
            var pd = x - 1;
            var pa3 = pa * 3;
            var pb3 = pb * 3;
            var pc3 = pc * 3;
            var d = -pa + pb3 - pc3 + pd, rd = 1 / d, r3 = 1 / 3, a = (pa3 - 6 * pb + pc3) * rd, a3 = a * r3, b = (-pa3 + pb3) * rd, c = pa * rd, p = (3 * b - a * a) * r3, p3 = p * r3, q = (2 * a * a * a - 9 * a * b + 27 * c) / 27, q2 = q / 2, discriminant = q2 * q2 + p3 * p3 * p3, u1, v1, x1, x2, x3;
            if (discriminant < 0) {
                var mp3 = -p * r3, mp33 = mp3 * mp3 * mp3, r = sqrt(mp33), t = -q / (2 * r), cosphi = t < -1 ? -1 : t > 1 ? 1 : t, phi = acos(cosphi), crtr = crt(r), t1 = 2 * crtr;
                x1 = t1 * cos(phi * r3) - a3;
                x2 = t1 * cos((phi + tau) * r3) - a3;
                x3 = t1 * cos((phi + 2 * tau) * r3) - a3;
                if (0 <= x1 && x1 <= 1) {
                    if (0 <= x2 && x2 <= 1) {
                        if (0 <= x3 && x3 <= 1) {
                            return max(x1, x2, x3);
                        } else {
                            return max(x1, x2);
                        }
                    } else if (0 <= x3 && x3 <= 1) {
                        return max(x1, x3);
                    } else {
                        return x1;
                    }
                } else {
                    if (0 <= x2 && x2 <= 1) {
                        if (0 <= x3 && x3 <= 1) {
                            return max(x2, x3);
                        } else {
                            return x2;
                        }
                    } else {
                        return x3;
                    }
                }
            } else if (discriminant === 0) {
                u1 = q2 < 0 ? crt(-q2) : -crt(q2);
                x1 = 2 * u1 - a3;
                x2 = -u1 - a3;
                if (0 <= x1 && x1 <= 1) {
                    if (0 <= x2 && x2 <= 1) {
                        return max(x1, x2);
                    } else {
                        return x1;
                    }
                } else {
                    return x2;
                }
            } else {
                var sd = sqrt(discriminant);
                u1 = crt(-q2 + sd);
                v1 = crt(q2 + sd);
                x1 = u1 - v1 - a3;
                return x1;
            }
        }
        function bezierByTime(controlPoints, x) {
            var percent = cardano(controlPoints, x);
            var p0y = 0;
            var p1y = controlPoints[1];
            var p2y = controlPoints[3];
            var p3y = 1;
            var t1 = 1 - percent;
            return p0y * t1 * t1 * t1 + p1y * 3 * percent * t1 * t1 + p2y * 3 * percent * percent * t1 + p3y * percent * percent * percent;
        }
        if (CC_TEST) {
            cc._Test.bezier = bezier;
            cc._Test.bezierByTime = bezierByTime;
        }
        module.exports = {
            bezier: bezier,
            bezierByTime: bezierByTime
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImJlemllci5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvYW5pbWF0aW9uL2Jlemllci5qcyJdLCJuYW1lcyI6WyJiZXppZXIiLCJDMSIsIkMyIiwiQzMiLCJDNCIsInQiLCJ0MSIsImNvcyIsIk1hdGgiLCJhY29zIiwibWF4IiwicGkiLCJQSSIsInRhdSIsInNxcnQiLCJjcnQiLCJ2IiwicG93IiwiY2FyZGFubyIsImN1cnZlIiwieCIsInBhIiwicGIiLCJwYyIsInBkIiwicGEzIiwicGIzIiwicGMzIiwiZCIsInJkIiwicjMiLCJhIiwiYTMiLCJiIiwiYyIsInAiLCJwMyIsInEiLCJxMiIsImRpc2NyaW1pbmFudCIsInUxIiwidjEiLCJ4MSIsIngyIiwieDMiLCJtcDMiLCJtcDMzIiwiciIsImNvc3BoaSIsInBoaSIsImNydHIiLCJzZCIsImJlemllckJ5VGltZSIsImNvbnRyb2xQb2ludHMiLCJwZXJjZW50IiwicDB5IiwicDF5IiwicDJ5IiwicDN5IiwiQ0NfVEVTVCIsImNjIiwiX1Rlc3QiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUF5Q0EsU0FBU0EsTUFBVCxDQUFpQkMsRUFBakIsRUFBcUJDLEVBQXJCLEVBQXlCQyxFQUF6QixFQUE2QkMsRUFBN0IsRUFBaUNDLENBQWpDLEVBQW9DO0FBQUEsWUFDakMsSUFBSUMsRUFBQUEsR0FBSyxJQUFJRCxDQUFiLENBRGlDO0FBQUEsWUFFakMsT0FBT0osRUFBQUEsR0FBS0ssRUFBTEwsR0FBVUssRUFBVkwsR0FBZUssRUFBZkwsR0FDQUMsRUFBQUEsR0FBSyxDQUFMQSxHQUFTSSxFQUFUSixHQUFjSSxFQUFkSixHQUFtQkcsQ0FEbkJKLEdBRUFFLEVBQUFBLEdBQUssQ0FBTEEsR0FBU0cs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SHFDO0FBQUEsWUFJckMsSUFBSUksR0FBQUEsR0FBTUosYUFBQUEsQ0FBYyxDQUFkQSxDQUFWLENBSnFDO0FBQUEsWUFLckMsSUFBSUssR0FBQUEsR0FBTSxDQUFWLENBTHFDO0FBQUEsWUFNckMsSUFBSXBELEVBQUFBLEdBQUssSUFBSWdELE9BQWIsQ0FOcUM7QUFBQSxZQU9yQyxPQUFPQyxHQUFBQSxHQUFNakQsRUFBTmlELEdBQVdqRCxFQUFYaUQsR0FBZ0JqRCxFQUFoQmlELEdBQ0FDLEdBQUFBLEdBQU0sQ0FBTkEsR0FBVUYsT0FBVkUsR0FBb0JsRCxFQUFwQmtELEdBQXlCbEQsRUFEekJpRCxHQUVBRSxHQUFBQSxHQUFNLENBQU5BLEdBQVVILE9BQVZHLEdBQW9CSCxPQUFwQkcsR0FBOEJuRCxFQUY5QmlELEdBR0FHLEdBQUFBLEdBQU1KLE9BQU5JLEdBQWdCSixPQUFoQkksR0FBMEJKLE9BSGpDLENBUHFDO0FBQUE7UUFhekMsSUFBSUssT0FBSixFQUFhO0FBQUEsWUFDVEMsRUFBQUEsQ0FBR0MsS0FBSEQsQ0FBUzVELE1BQVQ0RCxHQUFrQjVELE1BQWxCNEQsQ0FEUztBQUFBLFlBRVRBLEVBQUFBLENBQUdDLEtBQUhELENBQVNSLFlBQVRRLEdBQXdCUixZQUF4QlEsQ0FGUztBQUFBO1FBS2JFLE1BQUFBLENBQU9DLE9BQVBELEdBQWlCO0FBQUEsWUFDYjlELE1BQUFBLEVBQVFBLE1BREs7QUFBQSxZQUVib0QsWUFBQUEsRUFBY0EsWUFGRDtBQUFBLFNBQWpCVSIsImZpbGUiOiJiZXppZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cclxuXHJcbi8vdmFyIGJlemllciA9IChmdW5jdGlvbiAoKSB7XHJcbi8vICAgIGZ1bmN0aW9uIEIxICh0KSB7IHJldHVybiAodCAqIHQgKiB0KTsgfVxyXG4vLyAgICBmdW5jdGlvbiBCMiAodCkgeyByZXR1cm4gKDMgKiB0ICogdCAqICgxIC0gdCkpOyB9XHJcbi8vICAgIGZ1bmN0aW9uIEIzICh0KSB7IHJldHVybiAoMyAqIHQgKiAoMSAtIHQpICogKDEgLSB0KSk7IH1cclxuLy8gICAgZnVuY3Rpb24gQjQgKHQpIHsgcmV0dXJuICgoMSAtIHQpICogKDEgLSB0KSAqICgxIC0gdCkpOyB9XHJcbi8vICAgIGZ1bmN0aW9uIGJlemllciAoQzEsIEMyLCBDMywgQzQsIHQpIHtcclxuLy8gICAgICAgIHJldHVybiBDMSAqIEIxKHQpICsgQzIgKiBCMih0KSArIEMzICogQjModCkgKyBDNCAqIEI0KHQpO1xyXG4vLyAgICB9XHJcbi8vXHJcbi8vICAgIC8vZnVuY3Rpb24gYmV6aWVyIChDMSwgQzIsIEMzLCBDNCwgdCwgb3V0KSB7XHJcbi8vICAgIC8vICAgIG91dC54ID0gQzEueCAqIEIxKHQpICsgQzIueCAqIEIyKHQpICsgQzMueCAqIEIzKHQpICsgQzQueCAqIEI0KHQpO1xyXG4vLyAgICAvLyAgICBvdXQueSA9IEMxLnkgKiBCMSh0KSArIEMyLnkgKiBCMih0KSArIEMzLnkgKiBCMyh0KSArIEM0LnkgKiBCNCh0KTtcclxuLy8gICAgLy99XHJcbi8vXHJcbi8vICAgIHJldHVybiBiZXppZXI7XHJcbi8vfSkoKTtcclxuZnVuY3Rpb24gYmV6aWVyIChDMSwgQzIsIEMzLCBDNCwgdCkge1xyXG4gICB2YXIgdDEgPSAxIC0gdDtcclxuICAgcmV0dXJuIEMxICogdDEgKiB0MSAqIHQxICtcclxuICAgICAgICAgIEMyICogMyAqIHQxICogdDEgKiB0ICtcclxuICAgICAgICAgIEMzICogMyAqIHQxICogdCAqIHQgK1xyXG4gICAgICAgICAgQzQgKiB0ICogdCAqIHQ7XHJcbn1cclxuLy9mdW5jdGlvbiBiZXppZXIgKGMwLCBjMSwgYzIsIGMzLCB0KSB7XHJcbi8vICAgIHZhciBjeSA9IDMuMCAqIChjMSk7XHJcbi8vICAgIHZhciBieSA9IDMuMCAqIChjMyAtIGMxKSAtIGN5O1xyXG4vLyAgICB2YXIgYXkgPSAxIC0gY3kgLSBieTtcclxuLy8gICAgcmV0dXJuIChheSAqIHQgKiB0ICogdCkgKyAoYnkgKiB0ICogdCkgKyAoY3kgKiB0KTtcclxuLy99XHJcblxyXG4vL3ZhciBzaW4gPSBNYXRoLnNpbjtcclxudmFyIGNvcyA9IE1hdGguY29zLFxyXG4gICAgYWNvcyA9IE1hdGguYWNvcyxcclxuICAgIG1heCA9IE1hdGgubWF4LFxyXG4gICAgLy9hdGFuMiA9IE1hdGguYXRhbjIsXHJcbiAgICBwaSA9IE1hdGguUEksXHJcbiAgICB0YXUgPSAyICogcGksXHJcbiAgICBzcXJ0ID0gTWF0aC5zcXJ0O1xyXG5cclxuZnVuY3Rpb24gY3J0ICh2KSB7XHJcbiAgICBpZiAodiA8IDApIHtcclxuICAgICAgICByZXR1cm4gLU1hdGgucG93KC12LCAxIC8gMyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5wb3codiwgMSAvIDMpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vL2Z1bmN0aW9uIGFsaWduIChjdXJ2ZSwgbGluZSkge1xyXG4vLyAgICB2YXIgdHggPSBsaW5lLnAxLngsXHJcbi8vICAgICAgICB0eSA9IGxpbmUucDEueSxcclxuLy8gICAgICAgIGEgPSAtYXRhbjIobGluZS5wMi55LXR5LCBsaW5lLnAyLngtdHgpO1xyXG4vLyAgICBjdXJ2ZSA9IFt7eDowLCB5OjF9LCB7eDogY3VydmVbMF0sIHk6IDEtY3VydmVbMV19LCB7eDogY3VydmVbMl0sIHk6IDEtY3VydmVbM119LCB7eDoxLCB5OjB9XTtcclxuLy8gICAgcmV0dXJuIGN1cnZlLm1hcChmdW5jdGlvbih2KSB7XHJcbi8vICAgICAgICByZXR1cm4ge1xyXG4vLyAgICAgICAgICAgIHg6ICh2LngtdHgpKmNvcyhhKSAtICh2LnktdHkpKnNpbihhKSxcclxuLy8gICAgICAgICAgICB5OiAodi54LXR4KSpzaW4oYSkgKyAodi55LXR5KSpjb3MoYSlcclxuLy8gICAgICAgIH07XHJcbi8vICAgIH0pO1xyXG4vL31cclxuXHJcbi8vIE1vZGlmaWVkIGZyb20gaHR0cDovL2pzYmluLmNvbS95aWJpcG9mZXFpLzEvZWRpdCwgb3B0aW1pemVkIGZvciBhbmltYXRpb25zLlxyXG4vLyBUaGUgb3JpZ2luIENhcmRhbm8ncyBhbGdvcml0aG0gaXMgYmFzZWQgb24gaHR0cDovL3d3dy50cmFuczRtaW5kLmNvbS9wZXJzb25hbF9kZXZlbG9wbWVudC9tYXRoZW1hdGljcy9wb2x5bm9taWFscy9jdWJpY0FsZ2VicmEuaHRtXHJcbmZ1bmN0aW9uIGNhcmRhbm8gKGN1cnZlLCB4KSB7XHJcbiAgICAvLyBhbGlnbiBjdXJ2ZSB3aXRoIHRoZSBpbnRlcnNlY3RpbmcgbGluZTpcclxuICAgICAgICAvL3ZhciBsaW5lID0ge3AxOiB7eDogeCwgeTogMH0sIHAyOiB7eDogeCwgeTogMX19O1xyXG4gICAgICAgIC8vdmFyIGFsaWduZWQgPSBhbGlnbihjdXJ2ZSwgbGluZSk7XHJcbiAgICAgICAgLy8vLyBhbmQgcmV3cml0ZSBmcm9tIFthKDEtdCleMyArIDNidCgxLXQpXjIgKyAzYygxLXQpdF4yICsgZHReM10gZm9ybVxyXG4gICAgICAgIC8vICAgIHBhID0gYWxpZ25lZFswXS55LFxyXG4gICAgICAgIC8vICAgIHBiID0gYWxpZ25lZFsxXS55LFxyXG4gICAgICAgIC8vICAgIHBjID0gYWxpZ25lZFsyXS55LFxyXG4gICAgICAgIC8vICAgIHBkID0gYWxpZ25lZFszXS55O1xyXG4gICAgICAgIC8vLy8vLyBjdXJ2ZSA9IFt7eDowLCB5OjF9LCB7eDogY3VydmVbMF0sIHk6IDEtY3VydmVbMV19LCB7eDogY3VydmVbMl0sIHk6IDEtY3VydmVbM119LCB7eDoxLCB5OjB9XTtcclxuICAgIHZhciBwYSA9IHggLSAwO1xyXG4gICAgdmFyIHBiID0geCAtIGN1cnZlWzBdO1xyXG4gICAgdmFyIHBjID0geCAtIGN1cnZlWzJdO1xyXG4gICAgdmFyIHBkID0geCAtIDE7XHJcblxyXG4gICAgLy8gdG8gW3ReMyArIGF0XjIgKyBidCArIGNdIGZvcm06XHJcbiAgICB2YXIgcGEzID0gcGEgKiAzO1xyXG4gICAgdmFyIHBiMyA9IHBiICogMztcclxuICAgIHZhciBwYzMgPSBwYyAqIDM7XHJcbiAgICB2YXIgZCA9ICgtcGEgKyBwYjMgLSBwYzMgKyBwZCksXHJcbiAgICAgICAgcmQgPSAxIC8gZCxcclxuICAgICAgICByMyA9IDEgLyAzLFxyXG4gICAgICAgIGEgPSAocGEzIC0gNiAqIHBiICsgcGMzKSAqIHJkLFxyXG4gICAgICAgIGEzID0gYSAqIHIzLFxyXG4gICAgICAgIGIgPSAoLXBhMyArIHBiMykgKiByZCxcclxuICAgICAgICBjID0gcGEgKiByZCxcclxuICAgIC8vIHRoZW4sIGRldGVybWluZSBwIGFuZCBxOlxyXG4gICAgICAgIHAgPSAoMyAqIGIgLSBhICogYSkgKiByMyxcclxuICAgICAgICBwMyA9IHAgKiByMyxcclxuICAgICAgICBxID0gKDIgKiBhICogYSAqIGEgLSA5ICogYSAqIGIgKyAyNyAqIGMpIC8gMjcsXHJcbiAgICAgICAgcTIgPSBxIC8gMixcclxuICAgIC8vIGFuZCBkZXRlcm1pbmUgdGhlIGRpc2NyaW1pbmFudDpcclxuICAgICAgICBkaXNjcmltaW5hbnQgPSBxMiAqIHEyICsgcDMgKiBwMyAqIHAzLFxyXG4gICAgLy8gYW5kIHNvbWUgcmVzZXJ2ZWQgdmFyaWFibGVzXHJcbiAgICAgICAgdTEsIHYxLCB4MSwgeDIsIHgzO1xyXG5cclxuICAgIC8vIElmIHRoZSBkaXNjcmltaW5hbnQgaXMgbmVnYXRpdmUsIHVzZSBwb2xhciBjb29yZGluYXRlc1xyXG4gICAgLy8gdG8gZ2V0IGFyb3VuZCBzcXVhcmUgcm9vdHMgb2YgbmVnYXRpdmUgbnVtYmVyc1xyXG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDApIHtcclxuICAgICAgICB2YXIgbXAzID0gLXAgKiByMyxcclxuICAgICAgICAgICAgbXAzMyA9IG1wMyAqIG1wMyAqIG1wMyxcclxuICAgICAgICAgICAgciA9IHNxcnQobXAzMyksXHJcbiAgICAgICAgLy8gY29tcHV0ZSBjb3NwaGkgY29ycmVjdGVkIGZvciBJRUVFIGZsb2F0IHJvdW5kaW5nOlxyXG4gICAgICAgICAgICB0ID0gLXEgLyAoMiAqIHIpLFxyXG4gICAgICAgICAgICBjb3NwaGkgPSB0IDwgLTEgPyAtMSA6IHQgPiAxID8gMSA6IHQsXHJcbiAgICAgICAgICAgIHBoaSA9IGFjb3MoY29zcGhpKSxcclxuICAgICAgICAgICAgY3J0ciA9IGNydChyKSxcclxuICAgICAgICAgICAgdDEgPSAyICogY3J0cjtcclxuICAgICAgICB4MSA9IHQxICogY29zKHBoaSAqIHIzKSAtIGEzO1xyXG4gICAgICAgIHgyID0gdDEgKiBjb3MoKHBoaSArIHRhdSkgKiByMykgLSBhMztcclxuICAgICAgICB4MyA9IHQxICogY29zKChwaGkgKyAyICogdGF1KSAqIHIzKSAtIGEzO1xyXG5cclxuICAgICAgICAvLyBjaG9vc2UgYmVzdCBwZXJjZW50YWdlXHJcbiAgICAgICAgaWYgKDAgPD0geDEgJiYgeDEgPD0gMSkge1xyXG4gICAgICAgICAgICBpZiAoMCA8PSB4MiAmJiB4MiA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoMCA8PSB4MyAmJiB4MyA8PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heCh4MSwgeDIsIHgzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXgoeDEsIHgyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgwIDw9IHgzICYmIHgzIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXgoeDEsIHgzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB4MTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKDAgPD0geDIgJiYgeDIgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKDAgPD0geDMgJiYgeDMgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXgoeDIsIHgzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB4MjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB4MztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGRpc2NyaW1pbmFudCA9PT0gMCkge1xyXG4gICAgICAgIHUxID0gcTIgPCAwID8gY3J0KC1xMikgOiAtY3J0KHEyKTtcclxuICAgICAgICB4MSA9IDIgKiB1MSAtIGEzO1xyXG4gICAgICAgIHgyID0gLXUxIC0gYTM7XHJcblxyXG4gICAgICAgIC8vIGNob29zZSBiZXN0IHBlcmNlbnRhZ2VcclxuICAgICAgICBpZiAoMCA8PSB4MSAmJiB4MSA8PSAxKSB7XHJcbiAgICAgICAgICAgIGlmICgwIDw9IHgyICYmIHgyIDw9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXgoeDEsIHgyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB4MTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHgyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIG9uZSByZWFsIHJvb3QsIGFuZCB0d28gaW1hZ2luYXJ5IHJvb3RzXHJcbiAgICBlbHNlIHtcclxuICAgICAgICB2YXIgc2QgPSBzcXJ0KGRpc2NyaW1pbmFudCk7XHJcbiAgICAgICAgdTEgPSBjcnQoLXEyICsgc2QpO1xyXG4gICAgICAgIHYxID0gY3J0KHEyICsgc2QpO1xyXG4gICAgICAgIHgxID0gdTEgLSB2MSAtIGEzO1xyXG4gICAgICAgIHJldHVybiB4MTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gYmV6aWVyQnlUaW1lIChjb250cm9sUG9pbnRzLCB4KSB7XHJcbiAgICB2YXIgcGVyY2VudCA9IGNhcmRhbm8oY29udHJvbFBvaW50cywgeCk7ICAgIC8vIHRcclxuICAgIHZhciBwMHkgPSAwOyAgICAgICAgICAgICAgICAvLyBhXHJcbiAgICB2YXIgcDF5ID0gY29udHJvbFBvaW50c1sxXTsgLy8gYlxyXG4gICAgdmFyIHAyeSA9IGNvbnRyb2xQb2ludHNbM107IC8vIGNcclxuICAgIHZhciBwM3kgPSAxOyAgICAgICAgICAgICAgICAvLyBkXHJcbiAgICB2YXIgdDEgPSAxIC0gcGVyY2VudDtcclxuICAgIHJldHVybiBwMHkgKiB0MSAqIHQxICogdDEgK1xyXG4gICAgICAgICAgIHAxeSAqIDMgKiBwZXJjZW50ICogdDEgKiB0MSArXHJcbiAgICAgICAgICAgcDJ5ICogMyAqIHBlcmNlbnQgKiBwZXJjZW50ICogdDEgK1xyXG4gICAgICAgICAgIHAzeSAqIHBlcmNlbnQgKiBwZXJjZW50ICogcGVyY2VudDtcclxufVxyXG5cclxuaWYgKENDX1RFU1QpIHtcclxuICAgIGNjLl9UZXN0LmJlemllciA9IGJlemllcjtcclxuICAgIGNjLl9UZXN0LmJlemllckJ5VGltZSA9IGJlemllckJ5VGltZTtcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSB7XHJcbiAgICBiZXppZXI6IGJlemllcixcclxuICAgIGJlemllckJ5VGltZTogYmV6aWVyQnlUaW1lXHJcbn07XHJcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG4gQ29weXJpZ2h0IChjKSAyMDE3LTIwMTggWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuXHJcblxyXG4gaHR0cHM6Ly93d3cuY29jb3MuY29tL1xyXG5cclxuIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcclxuIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZW5naW5lIHNvdXJjZSBjb2RlICh0aGUgXCJTb2Z0d2FyZVwiKSwgYSBsaW1pdGVkLFxyXG4gd29ybGR3aWRlLCByb3lhbHR5LWZyZWUsIG5vbi1hc3NpZ25hYmxlLCByZXZvY2FibGUgYW5kIG5vbi1leGNsdXNpdmUgbGljZW5zZVxyXG4gdG8gdXNlIENvY29zIENyZWF0b3Igc29sZWx5IHRvIGRldmVsb3AgZ2FtZXMgb24geW91ciB0YXJnZXQgcGxhdGZvcm1zLiBZb3Ugc2hhbGxcclxuIG5vdCB1c2UgQ29jb3MgQ3JlYXRvciBzb2Z0d2FyZSBmb3IgZGV2ZWxvcGluZyBvdGhlciBzb2Z0d2FyZSBvciB0b29scyB0aGF0J3NcclxuIHVzZWQgZm9yIGRldmVsb3BpbmcgZ2FtZXMuIFlvdSBhcmUgbm90IGdyYW50ZWQgdG8gcHVibGlzaCwgZGlzdHJpYnV0ZSxcclxuIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiBDb2NvcyBDcmVhdG9yLlxyXG5cclxuIFRoZSBzb2Z0d2FyZSBvciB0b29scyBpbiB0aGlzIExpY2Vuc2UgQWdyZWVtZW50IGFyZSBsaWNlbnNlZCwgbm90IHNvbGQuXHJcbiBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC4gcmVzZXJ2ZXMgYWxsIHJpZ2h0cyBub3QgZXhwcmVzc2x5IGdyYW50ZWQgdG8geW91LlxyXG5cclxuIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcclxuIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxyXG4gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXHJcbiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXHJcbiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxyXG4gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxyXG4gVEhFIFNPRlRXQVJFLlxyXG4gKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cblxuLy92YXIgYmV6aWVyID0gKGZ1bmN0aW9uICgpIHtcbi8vICAgIGZ1bmN0aW9uIEIxICh0KSB7IHJldHVybiAodCAqIHQgKiB0KTsgfVxuLy8gICAgZnVuY3Rpb24gQjIgKHQpIHsgcmV0dXJuICgzICogdCAqIHQgKiAoMSAtIHQpKTsgfVxuLy8gICAgZnVuY3Rpb24gQjMgKHQpIHsgcmV0dXJuICgzICogdCAqICgxIC0gdCkgKiAoMSAtIHQpKTsgfVxuLy8gICAgZnVuY3Rpb24gQjQgKHQpIHsgcmV0dXJuICgoMSAtIHQpICogKDEgLSB0KSAqICgxIC0gdCkpOyB9XG4vLyAgICBmdW5jdGlvbiBiZXppZXIgKEMxLCBDMiwgQzMsIEM0LCB0KSB7XG4vLyAgICAgICAgcmV0dXJuIEMxICogQjEodCkgKyBDMiAqIEIyKHQpICsgQzMgKiBCMyh0KSArIEM0ICogQjQodCk7XG4vLyAgICB9XG4vL1xuLy8gICAgLy9mdW5jdGlvbiBiZXppZXIgKEMxLCBDMiwgQzMsIEM0LCB0LCBvdXQpIHtcbi8vICAgIC8vICAgIG91dC54ID0gQzEueCAqIEIxKHQpICsgQzIueCAqIEIyKHQpICsgQzMueCAqIEIzKHQpICsgQzQueCAqIEI0KHQpO1xuLy8gICAgLy8gICAgb3V0LnkgPSBDMS55ICogQjEodCkgKyBDMi55ICogQjIodCkgKyBDMy55ICogQjModCkgKyBDNC55ICogQjQodCk7XG4vLyAgICAvL31cbi8vXG4vLyAgICByZXR1cm4gYmV6aWVyO1xuLy99KSgpO1xuZnVuY3Rpb24gYmV6aWVyKEMxLCBDMiwgQzMsIEM0LCB0KSB7XG4gICAgdmFyIHQxID0gMSAtIHQ7XG4gICAgcmV0dXJuIEMxICogdDEgKiB0MSAqIHQxICsgQzIgKiAzICogdDEgKiB0MSAqIHQgKyBDMyAqIDMgKiB0MSAqIHQgKiB0ICsgQzQgKiB0ICogdCAqIHQ7XG59XG4vL2Z1bmN0aW9uIGJlemllciAoYzAsIGMxLCBjMiwgYzMsIHQpIHtcbi8vICAgIHZhciBjeSA9IDMuMCAqIChjMSk7XG4vLyAgICB2YXIgYnkgPSAzLjAgKiAoYzMgLSBjMSkgLSBjeTtcbi8vICAgIHZhciBheSA9IDEgLSBjeSAtIGJ5O1xuLy8gICAgcmV0dXJuIChheSAqIHQgKiB0ICogdCkgKyAoYnkgKiB0ICogdCkgKyAoY3kgKiB0KTtcbi8vfVxuXG4vL3ZhciBzaW4gPSBNYXRoLnNpbjtcbnZhciBjb3MgPSBNYXRoLmNvcyxcbiAgICBhY29zID0gTWF0aC5hY29zLFxuICAgIG1heCA9IE1hdGgubWF4LFxuXG4vL2F0YW4yID0gTWF0aC5hdGFuMixcbnBpID0gTWF0aC5QSSxcbiAgICB0YXUgPSAyICogcGksXG4gICAgc3FydCA9IE1hdGguc3FydDtcblxuZnVuY3Rpb24gY3J0KHYpIHtcbiAgICBpZiAodiA8IDApIHtcbiAgICAgICAgcmV0dXJuIC1NYXRoLnBvdygtdiwgMSAvIDMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBNYXRoLnBvdyh2LCAxIC8gMyk7XG4gICAgfVxufVxuXG4vL2Z1bmN0aW9uIGFsaWduIChjdXJ2ZSwgbGluZSkge1xuLy8gICAgdmFyIHR4ID0gbGluZS5wMS54LFxuLy8gICAgICAgIHR5ID0gbGluZS5wMS55LFxuLy8gICAgICAgIGEgPSAtYXRhbjIobGluZS5wMi55LXR5LCBsaW5lLnAyLngtdHgpO1xuLy8gICAgY3VydmUgPSBbe3g6MCwgeToxfSwge3g6IGN1cnZlWzBdLCB5OiAxLWN1cnZlWzFdfSwge3g6IGN1cnZlWzJdLCB5OiAxLWN1cnZlWzNdfSwge3g6MSwgeTowfV07XG4vLyAgICByZXR1cm4gY3VydmUubWFwKGZ1bmN0aW9uKHYpIHtcbi8vICAgICAgICByZXR1cm4ge1xuLy8gICAgICAgICAgICB4OiAodi54LXR4KSpjb3MoYSkgLSAodi55LXR5KSpzaW4oYSksXG4vLyAgICAgICAgICAgIHk6ICh2LngtdHgpKnNpbihhKSArICh2LnktdHkpKmNvcyhhKVxuLy8gICAgICAgIH07XG4vLyAgICB9KTtcbi8vfVxuXG4vLyBNb2RpZmllZCBmcm9tIGh0dHA6Ly9qc2Jpbi5jb20veWliaXBvZmVxaS8xL2VkaXQsIG9wdGltaXplZCBmb3IgYW5pbWF0aW9ucy5cbi8vIFRoZSBvcmlnaW4gQ2FyZGFubydzIGFsZ29yaXRobSBpcyBiYXNlZCBvbiBodHRwOi8vd3d3LnRyYW5zNG1pbmQuY29tL3BlcnNvbmFsX2RldmVsb3BtZW50L21hdGhlbWF0aWNzL3BvbHlub21pYWxzL2N1YmljQWxnZWJyYS5odG1cbmZ1bmN0aW9uIGNhcmRhbm8oY3VydmUsIHgpIHtcbiAgICAvLyBhbGlnbiBjdXJ2ZSB3aXRoIHRoZSBpbnRlcnNlY3RpbmcgbGluZTpcbiAgICAvL3ZhciBsaW5lID0ge3AxOiB7eDogeCwgeTogMH0sIHAyOiB7eDogeCwgeTogMX19O1xuICAgIC8vdmFyIGFsaWduZWQgPSBhbGlnbihjdXJ2ZSwgbGluZSk7XG4gICAgLy8vLyBhbmQgcmV3cml0ZSBmcm9tIFthKDEtdCleMyArIDNidCgxLXQpXjIgKyAzYygxLXQpdF4yICsgZHReM10gZm9ybVxuICAgIC8vICAgIHBhID0gYWxpZ25lZFswXS55LFxuICAgIC8vICAgIHBiID0gYWxpZ25lZFsxXS55LFxuICAgIC8vICAgIHBjID0gYWxpZ25lZFsyXS55LFxuICAgIC8vICAgIHBkID0gYWxpZ25lZFszXS55O1xuICAgIC8vLy8vLyBjdXJ2ZSA9IFt7eDowLCB5OjF9LCB7eDogY3VydmVbMF0sIHk6IDEtY3VydmVbMV19LCB7eDogY3VydmVbMl0sIHk6IDEtY3VydmVbM119LCB7eDoxLCB5OjB9XTtcbiAgICB2YXIgcGEgPSB4IC0gMDtcbiAgICB2YXIgcGIgPSB4IC0gY3VydmVbMF07XG4gICAgdmFyIHBjID0geCAtIGN1cnZlWzJdO1xuICAgIHZhciBwZCA9IHggLSAxO1xuXG4gICAgLy8gdG8gW3ReMyArIGF0XjIgKyBidCArIGNdIGZvcm06XG4gICAgdmFyIHBhMyA9IHBhICogMztcbiAgICB2YXIgcGIzID0gcGIgKiAzO1xuICAgIHZhciBwYzMgPSBwYyAqIDM7XG4gICAgdmFyIGQgPSAtcGEgKyBwYjMgLSBwYzMgKyBwZCxcbiAgICAgICAgcmQgPSAxIC8gZCxcbiAgICAgICAgcjMgPSAxIC8gMyxcbiAgICAgICAgYSA9IChwYTMgLSA2ICogcGIgKyBwYzMpICogcmQsXG4gICAgICAgIGEzID0gYSAqIHIzLFxuICAgICAgICBiID0gKC1wYTMgKyBwYjMpICogcmQsXG4gICAgICAgIGMgPSBwYSAqIHJkLFxuXG4gICAgLy8gdGhlbiwgZGV0ZXJtaW5lIHAgYW5kIHE6XG4gICAgcCA9ICgzICogYiAtIGEgKiBhKSAqIHIzLFxuICAgICAgICBwMyA9IHAgKiByMyxcbiAgICAgICAgcSA9ICgyICogYSAqIGEgKiBhIC0gOSAqIGEgKiBiICsgMjcgKiBjKSAvIDI3LFxuICAgICAgICBxMiA9IHEgLyAyLFxuXG4gICAgLy8gYW5kIGRldGVybWluZSB0aGUgZGlzY3JpbWluYW50OlxuICAgIGRpc2NyaW1pbmFudCA9IHEyICogcTIgKyBwMyAqIHAzICogcDMsXG5cbiAgICAvLyBhbmQgc29tZSByZXNlcnZlZCB2YXJpYWJsZXNcbiAgICB1MSxcbiAgICAgICAgdjEsXG4gICAgICAgIHgxLFxuICAgICAgICB4MixcbiAgICAgICAgeDM7XG5cbiAgICAvLyBJZiB0aGUgZGlzY3JpbWluYW50IGlzIG5lZ2F0aXZlLCB1c2UgcG9sYXIgY29vcmRpbmF0ZXNcbiAgICAvLyB0byBnZXQgYXJvdW5kIHNxdWFyZSByb290cyBvZiBuZWdhdGl2ZSBudW1iZXJzXG4gICAgaWYgKGRpc2NyaW1pbmFudCA8IDApIHtcbiAgICAgICAgdmFyIG1wMyA9IC1wICogcjMsXG4gICAgICAgICAgICBtcDMzID0gbXAzICogbXAzICogbXAzLFxuICAgICAgICAgICAgciA9IHNxcnQobXAzMyksXG5cbiAgICAgICAgLy8gY29tcHV0ZSBjb3NwaGkgY29ycmVjdGVkIGZvciBJRUVFIGZsb2F0IHJvdW5kaW5nOlxuICAgICAgICB0ID0gLXEgLyAoMiAqIHIpLFxuICAgICAgICAgICAgY29zcGhpID0gdCA8IC0xID8gLTEgOiB0ID4gMSA/IDEgOiB0LFxuICAgICAgICAgICAgcGhpID0gYWNvcyhjb3NwaGkpLFxuICAgICAgICAgICAgY3J0ciA9IGNydChyKSxcbiAgICAgICAgICAgIHQxID0gMiAqIGNydHI7XG4gICAgICAgIHgxID0gdDEgKiBjb3MocGhpICogcjMpIC0gYTM7XG4gICAgICAgIHgyID0gdDEgKiBjb3MoKHBoaSArIHRhdSkgKiByMykgLSBhMztcbiAgICAgICAgeDMgPSB0MSAqIGNvcygocGhpICsgMiAqIHRhdSkgKiByMykgLSBhMztcblxuICAgICAgICAvLyBjaG9vc2UgYmVzdCBwZXJjZW50YWdlXG4gICAgICAgIGlmICgwIDw9IHgxICYmIHgxIDw9IDEpIHtcbiAgICAgICAgICAgIGlmICgwIDw9IHgyICYmIHgyIDw9IDEpIHtcbiAgICAgICAgICAgICAgICBpZiAoMCA8PSB4MyAmJiB4MyA8PSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXgoeDEsIHgyLCB4Myk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1heCh4MSwgeDIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoMCA8PSB4MyAmJiB4MyA8PSAxKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1heCh4MSwgeDMpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geDE7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoMCA8PSB4MiAmJiB4MiA8PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKDAgPD0geDMgJiYgeDMgPD0gMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWF4KHgyLCB4Myk7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHgyO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgzO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChkaXNjcmltaW5hbnQgPT09IDApIHtcbiAgICAgICAgdTEgPSBxMiA8IDAgPyBjcnQoLXEyKSA6IC1jcnQocTIpO1xuICAgICAgICB4MSA9IDIgKiB1MSAtIGEzO1xuICAgICAgICB4MiA9IC11MSAtIGEzO1xuXG4gICAgICAgIC8vIGNob29zZSBiZXN0IHBlcmNlbnRhZ2VcbiAgICAgICAgaWYgKDAgPD0geDEgJiYgeDEgPD0gMSkge1xuICAgICAgICAgICAgaWYgKDAgPD0geDIgJiYgeDIgPD0gMSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtYXgoeDEsIHgyKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHgxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHgyO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIG9uZSByZWFsIHJvb3QsIGFuZCB0d28gaW1hZ2luYXJ5IHJvb3RzXG4gICAgZWxzZSB7XG4gICAgICAgICAgICB2YXIgc2QgPSBzcXJ0KGRpc2NyaW1pbmFudCk7XG4gICAgICAgICAgICB1MSA9IGNydCgtcTIgKyBzZCk7XG4gICAgICAgICAgICB2MSA9IGNydChxMiArIHNkKTtcbiAgICAgICAgICAgIHgxID0gdTEgLSB2MSAtIGEzO1xuICAgICAgICAgICAgcmV0dXJuIHgxO1xuICAgICAgICB9XG59XG5cbmZ1bmN0aW9uIGJlemllckJ5VGltZShjb250cm9sUG9pbnRzLCB4KSB7XG4gICAgdmFyIHBlcmNlbnQgPSBjYXJkYW5vKGNvbnRyb2xQb2ludHMsIHgpOyAvLyB0XG4gICAgdmFyIHAweSA9IDA7IC8vIGFcbiAgICB2YXIgcDF5ID0gY29udHJvbFBvaW50c1sxXTsgLy8gYlxuICAgIHZhciBwMnkgPSBjb250cm9sUG9pbnRzWzNdOyAvLyBjXG4gICAgdmFyIHAzeSA9IDE7IC8vIGRcbiAgICB2YXIgdDEgPSAxIC0gcGVyY2VudDtcbiAgICByZXR1cm4gcDB5ICogdDEgKiB0MSAqIHQxICsgcDF5ICogMyAqIHBlcmNlbnQgKiB0MSAqIHQxICsgcDJ5ICogMyAqIHBlcmNlbnQgKiBwZXJjZW50ICogdDEgKyBwM3kgKiBwZXJjZW50ICogcGVyY2VudCAqIHBlcmNlbnQ7XG59XG5cbmlmIChDQ19URVNUKSB7XG4gICAgY2MuX1Rlc3QuYmV6aWVyID0gYmV6aWVyO1xuICAgIGNjLl9UZXN0LmJlemllckJ5VGltZSA9IGJlemllckJ5VGltZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgYmV6aWVyOiBiZXppZXIsXG4gICAgYmV6aWVyQnlUaW1lOiBiZXppZXJCeVRpbWVcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbUpsZW1sbGNpNXFjeUpkTENKdVlXMWxjeUk2V3lKaVpYcHBaWElpTENKRE1TSXNJa015SWl3aVF6TWlMQ0pETkNJc0luUWlMQ0owTVNJc0ltTnZjeUlzSWsxaGRHZ2lMQ0poWTI5eklpd2liV0Y0SWl3aWNHa2lMQ0pRU1NJc0luUmhkU0lzSW5OeGNuUWlMQ0pqY25RaUxDSjJJaXdpY0c5M0lpd2lZMkZ5WkdGdWJ5SXNJbU4xY25abElpd2llQ0lzSW5CaElpd2ljR0lpTENKd1l5SXNJbkJrSWl3aWNHRXpJaXdpY0dJeklpd2ljR016SWl3aVpDSXNJbkprSWl3aWNqTWlMQ0poSWl3aVlUTWlMQ0ppSWl3aVl5SXNJbkFpTENKd015SXNJbkVpTENKeE1pSXNJbVJwYzJOeWFXMXBibUZ1ZENJc0luVXhJaXdpZGpFaUxDSjRNU0lzSW5neUlpd2llRE1pTENKdGNETWlMQ0p0Y0RNeklpd2ljaUlzSW1OdmMzQm9hU0lzSW5Cb2FTSXNJbU55ZEhJaUxDSnpaQ0lzSW1KbGVtbGxja0o1VkdsdFpTSXNJbU52Ym5SeWIyeFFiMmx1ZEhNaUxDSndaWEpqWlc1MElpd2ljREI1SWl3aWNERjVJaXdpY0RKNUlpd2ljRE41SWl3aVEwTmZWRVZUVkNJc0ltTmpJaXdpWDFSbGMzUWlMQ0p0YjJSMWJHVWlMQ0psZUhCdmNuUnpJbDBzSW0xaGNIQnBibWR6SWpvaU96dEJRVUZCT3pzN096czdPenM3T3pzN096czdPenM3T3pzN096czdPMEZCZVVKQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFc1UwRkJVMEVzVFVGQlZDeERRVUZwUWtNc1JVRkJha0lzUlVGQmNVSkRMRVZCUVhKQ0xFVkJRWGxDUXl4RlFVRjZRaXhGUVVFMlFrTXNSVUZCTjBJc1JVRkJhVU5ETEVOQlFXcERMRVZCUVc5RE8wRkJRMnBETEZGQlFVbERMRXRCUVVzc1NVRkJTVVFzUTBGQllqdEJRVU5CTEZkQlFVOUtMRXRCUVV0TExFVkJRVXdzUjBGQlZVRXNSVUZCVml4SFFVRmxRU3hGUVVGbUxFZEJRMEZLTEV0QlFVc3NRMEZCVEN4SFFVRlRTU3hGUVVGVUxFZEJRV05CTEVWQlFXUXNSMEZCYlVKRUxFTkJSRzVDTEVkQlJVRkdMRXRCUVVzc1EwRkJUQ3hIUVVGVFJ5eEZRVUZVTEVkQlFXTkVMRU5CUVdRc1IwRkJhMEpCTEVOQlJteENMRWRCUjBGRUxFdEJRVXRETEVOQlFVd3NSMEZCVTBFc1EwRkJWQ3hIUVVGaFFTeERRVWh3UWp0QlFVbEdPMEZCUTBRN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CT3p0QlFVVkJPMEZCUTBFc1NVRkJTVVVzVFVGQlRVTXNTMEZCUzBRc1IwRkJaanRCUVVGQkxFbEJRMGxGTEU5QlFVOUVMRXRCUVV0RExFbEJSR2hDTzBGQlFVRXNTVUZGU1VNc1RVRkJUVVlzUzBGQlMwVXNSMEZHWmpzN1FVRkhTVHRCUVVOQlF5eExRVUZMU0N4TFFVRkxTU3hGUVVwa08wRkJRVUVzU1VGTFNVTXNUVUZCVFN4SlFVRkpSaXhGUVV4a08wRkJRVUVzU1VGTlNVY3NUMEZCVDA0c1MwRkJTMDBzU1VGT2FFSTdPMEZCVVVFc1UwRkJVME1zUjBGQlZDeERRVUZqUXl4RFFVRmtMRVZCUVdsQ08wRkJRMklzVVVGQlNVRXNTVUZCU1N4RFFVRlNMRVZCUVZjN1FVRkRVQ3hsUVVGUExFTkJRVU5TTEV0QlFVdFRMRWRCUVV3c1EwRkJVeXhEUVVGRFJDeERRVUZXTEVWQlFXRXNTVUZCU1N4RFFVRnFRaXhEUVVGU08wRkJRMGdzUzBGR1JDeE5RVWRMTzBGQlEwUXNaVUZCVDFJc1MwRkJTMU1zUjBGQlRDeERRVUZUUkN4RFFVRlVMRVZCUVZrc1NVRkJTU3hEUVVGb1FpeERRVUZRTzBGQlEwZzdRVUZEU2pzN1FVRkZSRHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEUVR0QlFVTkJPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3TzBGQlJVRTdRVUZEUVR0QlFVTkJMRk5CUVZORkxFOUJRVlFzUTBGQmEwSkRMRXRCUVd4Q0xFVkJRWGxDUXl4RFFVRjZRaXhGUVVFMFFqdEJRVU40UWp0QlFVTkpPMEZCUTBFN1FVRkRRVHRCUVVOQk8wRkJRMEU3UVVGRFFUdEJRVU5CTzBGQlEwRTdRVUZEU2l4UlFVRkpReXhMUVVGTFJDeEpRVUZKTEVOQlFXSTdRVUZEUVN4UlFVRkpSU3hMUVVGTFJpeEpRVUZKUkN4TlFVRk5MRU5CUVU0c1EwRkJZanRCUVVOQkxGRkJRVWxKTEV0QlFVdElMRWxCUVVsRUxFMUJRVTBzUTBGQlRpeERRVUZpTzBGQlEwRXNVVUZCU1Vzc1MwRkJTMG9zU1VGQlNTeERRVUZpT3p0QlFVVkJPMEZCUTBFc1VVRkJTVXNzVFVGQlRVb3NTMEZCU3l4RFFVRm1PMEZCUTBFc1VVRkJTVXNzVFVGQlRVb3NTMEZCU3l4RFFVRm1PMEZCUTBFc1VVRkJTVXNzVFVGQlRVb3NTMEZCU3l4RFFVRm1PMEZCUTBFc1VVRkJTVXNzU1VGQlN5eERRVUZEVUN4RlFVRkVMRWRCUVUxTExFZEJRVTRzUjBGQldVTXNSMEZCV2l4SFFVRnJRa2dzUlVGQk0wSTdRVUZCUVN4UlFVTkpTeXhMUVVGTExFbEJRVWxFTEVOQlJHSTdRVUZCUVN4UlFVVkpSU3hMUVVGTExFbEJRVWtzUTBGR1lqdEJRVUZCTEZGQlIwbERMRWxCUVVrc1EwRkJRMDRzVFVGQlRTeEpRVUZKU0N4RlFVRldMRWRCUVdWTExFZEJRV2hDTEVsQlFYVkNSU3hGUVVndlFqdEJRVUZCTEZGQlNVbEhMRXRCUVV0RUxFbEJRVWxFTEVWQlNtSTdRVUZCUVN4UlFVdEpSeXhKUVVGSkxFTkJRVU1zUTBGQlExSXNSMEZCUkN4SFFVRlBReXhIUVVGU0xFbEJRV1ZITEVWQlRIWkNPMEZCUVVFc1VVRk5TVXNzU1VGQlNXSXNTMEZCUzFFc1JVRk9ZanM3UVVGUFFUdEJRVU5KVFN4UlFVRkpMRU5CUVVNc1NVRkJTVVlzUTBGQlNpeEhRVUZSUml4SlFVRkpRU3hEUVVGaUxFbEJRV3RDUkN4RlFWSXhRanRCUVVGQkxGRkJVMGxOTEV0QlFVdEVMRWxCUVVsTUxFVkJWR0k3UVVGQlFTeFJRVlZKVHl4SlFVRkpMRU5CUVVNc1NVRkJTVTRzUTBGQlNpeEhRVUZSUVN4RFFVRlNMRWRCUVZsQkxFTkJRVm9zUjBGQlowSXNTVUZCU1VFc1EwRkJTaXhIUVVGUlJTeERRVUY0UWl4SFFVRTBRaXhMUVVGTFF5eERRVUZzUXl4SlFVRjFReXhGUVZZdlF6dEJRVUZCTEZGQlYwbEpMRXRCUVV0RUxFbEJRVWtzUTBGWVlqczdRVUZaUVR0QlFVTkpSU3h0UWtGQlpVUXNTMEZCUzBFc1JVRkJUQ3hIUVVGVlJpeExRVUZMUVN4RlFVRk1MRWRCUVZWQkxFVkJZblpET3p0QlFXTkJPMEZCUTBsSkxFMUJaa283UVVGQlFTeFJRV1ZSUXl4RlFXWlNPMEZCUVVFc1VVRmxXVU1zUlVGbVdqdEJRVUZCTEZGQlpXZENReXhGUVdab1FqdEJRVUZCTEZGQlpXOUNReXhGUVdad1FqczdRVUZwUWtFN1FVRkRRVHRCUVVOQkxGRkJRVWxNTEdWQlFXVXNRMEZCYmtJc1JVRkJjMEk3UVVGRGJFSXNXVUZCU1Uwc1RVRkJUU3hEUVVGRFZpeERRVUZFTEVkQlFVdE1MRVZCUVdZN1FVRkJRU3haUVVOSlowSXNUMEZCVDBRc1RVRkJUVUVzUjBGQlRpeEhRVUZaUVN4SFFVUjJRanRCUVVGQkxGbEJSVWxGTEVsQlFVbHFReXhMUVVGTFowTXNTVUZCVEN4RFFVWlNPenRCUVVkQk8wRkJRMGw2UXl4WlFVRkpMRU5CUVVOblF5eERRVUZFTEVsQlFVMHNTVUZCU1ZVc1EwRkJWaXhEUVVwU08wRkJRVUVzV1VGTFNVTXNVMEZCVXpORExFbEJRVWtzUTBGQlF5eERRVUZNTEVkQlFWTXNRMEZCUXl4RFFVRldMRWRCUVdOQkxFbEJRVWtzUTBGQlNpeEhRVUZSTEVOQlFWSXNSMEZCV1VFc1EwRk1ka003UVVGQlFTeFpRVTFKTkVNc1RVRkJUWGhETEV0QlFVdDFReXhOUVVGTUxFTkJUbFk3UVVGQlFTeFpRVTlKUlN4UFFVRlBia01zU1VGQlNXZERMRU5CUVVvc1EwRlFXRHRCUVVGQkxGbEJVVWw2UXl4TFFVRkxMRWxCUVVrMFF5eEpRVkppTzBGQlUwRlNMR0ZCUVV0d1F5eExRVUZMUXl4SlFVRkpNRU1zVFVGQlRXNUNMRVZCUVZZc1EwRkJUQ3hIUVVGeFFrVXNSVUZCTVVJN1FVRkRRVmNzWVVGQlMzSkRMRXRCUVV0RExFbEJRVWtzUTBGQlF6QkRMRTFCUVUxd1F5eEhRVUZRTEVsQlFXTnBRaXhGUVVGc1FpeERRVUZNTEVkQlFUWkNSU3hGUVVGc1F6dEJRVU5CV1N4aFFVRkxkRU1zUzBGQlMwTXNTVUZCU1N4RFFVRkRNRU1zVFVGQlRTeEpRVUZKY0VNc1IwRkJXQ3hKUVVGclFtbENMRVZCUVhSQ0xFTkJRVXdzUjBGQmFVTkZMRVZCUVhSRE96dEJRVVZCTzBGQlEwRXNXVUZCU1N4TFFVRkxWU3hGUVVGTUxFbEJRVmRCTEUxQlFVMHNRMEZCY2tJc1JVRkJkMEk3UVVGRGNFSXNaMEpCUVVrc1MwRkJTME1zUlVGQlRDeEpRVUZYUVN4TlFVRk5MRU5CUVhKQ0xFVkJRWGRDTzBGQlEzQkNMRzlDUVVGSkxFdEJRVXRETEVWQlFVd3NTVUZCVjBFc1RVRkJUU3hEUVVGeVFpeEZRVUYzUWp0QlFVTndRaXd5UWtGQlQyeERMRWxCUVVsblF5eEZRVUZLTEVWQlFWRkRMRVZCUVZJc1JVRkJXVU1zUlVGQldpeERRVUZRTzBGQlEwZ3NhVUpCUmtRc1RVRkhTenRCUVVORUxESkNRVUZQYkVNc1NVRkJTV2RETEVWQlFVb3NSVUZCVVVNc1JVRkJVaXhEUVVGUU8wRkJRMGc3UVVGRFNpeGhRVkJFTEUxQlVVc3NTVUZCU1N4TFFVRkxReXhGUVVGTUxFbEJRVmRCTEUxQlFVMHNRMEZCY2tJc1JVRkJkMEk3UVVGRGVrSXNkVUpCUVU5c1F5eEpRVUZKWjBNc1JVRkJTaXhGUVVGUlJTeEZRVUZTTEVOQlFWQTdRVUZEU0N4aFFVWkpMRTFCUjBFN1FVRkRSQ3gxUWtGQlQwWXNSVUZCVUR0QlFVTklPMEZCUTBvc1UwRm1SQ3hOUVdkQ1N6dEJRVU5FTEdkQ1FVRkpMRXRCUVV0RExFVkJRVXdzU1VGQlYwRXNUVUZCVFN4RFFVRnlRaXhGUVVGM1FqdEJRVU53UWl4dlFrRkJTU3hMUVVGTFF5eEZRVUZNTEVsQlFWZEJMRTFCUVUwc1EwRkJja0lzUlVGQmQwSTdRVUZEY0VJc01rSkJRVTlzUXl4SlFVRkphVU1zUlVGQlNpeEZRVUZSUXl4RlFVRlNMRU5CUVZBN1FVRkRTQ3hwUWtGR1JDeE5RVWRMTzBGQlEwUXNNa0pCUVU5RUxFVkJRVkE3UVVGRFNEdEJRVU5LTEdGQlVFUXNUVUZSU3p0QlFVTkVMSFZDUVVGUFF5eEZRVUZRTzBGQlEwZzdRVUZEU2p0QlFVTktMRXRCTlVORUxFMUJOa05MTEVsQlFVbE1MR2xDUVVGcFFpeERRVUZ5UWl4RlFVRjNRanRCUVVONlFrTXNZVUZCUzBZc1MwRkJTeXhEUVVGTUxFZEJRVk4yUWl4SlFVRkpMRU5CUVVOMVFpeEZRVUZNTEVOQlFWUXNSMEZCYjBJc1EwRkJRM1pDTEVsQlFVbDFRaXhGUVVGS0xFTkJRVEZDTzBGQlEwRkpMR0ZCUVVzc1NVRkJTVVlzUlVGQlNpeEhRVUZUVWl4RlFVRmtPMEZCUTBGWExHRkJRVXNzUTBGQlEwZ3NSVUZCUkN4SFFVRk5VaXhGUVVGWU96dEJRVVZCTzBGQlEwRXNXVUZCU1N4TFFVRkxWU3hGUVVGTUxFbEJRVmRCTEUxQlFVMHNRMEZCY2tJc1JVRkJkMEk3UVVGRGNFSXNaMEpCUVVrc1MwRkJTME1zUlVGQlRDeEpRVUZYUVN4TlFVRk5MRU5CUVhKQ0xFVkJRWGRDTzBGQlEzQkNMSFZDUVVGUGFrTXNTVUZCU1dkRExFVkJRVW9zUlVGQlVVTXNSVUZCVWl4RFFVRlFPMEZCUTBnc1lVRkdSQ3hOUVVkTE8wRkJRMFFzZFVKQlFVOUVMRVZCUVZBN1FVRkRTRHRCUVVOS0xGTkJVRVFzVFVGUlN6dEJRVU5FTEcxQ1FVRlBReXhGUVVGUU8wRkJRMGc3UVVGRFNqdEJRVU5FTzBGQmJFSkxMRk5CYlVKQk8wRkJRMFFzWjBKQlFVbFJMRXRCUVV0eVF5eExRVUZMZVVJc1dVRkJUQ3hEUVVGVU8wRkJRMEZETEdsQ1FVRkxla0lzU1VGQlNTeERRVUZEZFVJc1JVRkJSQ3hIUVVGTllTeEZRVUZXTEVOQlFVdzdRVUZEUVZZc2FVSkJRVXN4UWl4SlFVRkpkVUlzUzBGQlMyRXNSVUZCVkN4RFFVRk1PMEZCUTBGVUxHbENRVUZMUml4TFFVRkxReXhGUVVGTUxFZEJRVlZVTEVWQlFXWTdRVUZEUVN4dFFrRkJUMVVzUlVGQlVEdEJRVU5JTzBGQlEwbzdPMEZCUlVRc1UwRkJVMVVzV1VGQlZDeERRVUYxUWtNc1lVRkJka0lzUlVGQmMwTnFReXhEUVVGMFF5eEZRVUY1UXp0QlFVTnlReXhSUVVGSmEwTXNWVUZCVlhCRExGRkJRVkZ0UXl4aFFVRlNMRVZCUVhWQ2FrTXNRMEZCZGtJc1EwRkJaQ3hEUVVSeFF5eERRVU5QTzBGQlF6VkRMRkZCUVVsdFF5eE5RVUZOTEVOQlFWWXNRMEZHY1VNc1EwRkZWRHRCUVVNMVFpeFJRVUZKUXl4TlFVRk5TQ3hqUVVGakxFTkJRV1FzUTBGQlZpeERRVWh4UXl4RFFVZFVPMEZCUXpWQ0xGRkJRVWxKTEUxQlFVMUtMR05CUVdNc1EwRkJaQ3hEUVVGV0xFTkJTbkZETEVOQlNWUTdRVUZETlVJc1VVRkJTVXNzVFVGQlRTeERRVUZXTEVOQlRIRkRMRU5CUzFRN1FVRkROVUlzVVVGQlNYQkVMRXRCUVVzc1NVRkJTV2RFTEU5QlFXSTdRVUZEUVN4WFFVRlBReXhOUVVGTmFrUXNSVUZCVGl4SFFVRlhRU3hGUVVGWUxFZEJRV2RDUVN4RlFVRm9RaXhIUVVOQmEwUXNUVUZCVFN4RFFVRk9MRWRCUVZWR0xFOUJRVllzUjBGQmIwSm9SQ3hGUVVGd1FpeEhRVUY1UWtFc1JVRkVla0lzUjBGRlFXMUVMRTFCUVUwc1EwRkJUaXhIUVVGVlNDeFBRVUZXTEVkQlFXOUNRU3hQUVVGd1FpeEhRVUU0UW1oRUxFVkJSamxDTEVkQlIwRnZSQ3hOUVVGTlNpeFBRVUZPTEVkQlFXZENRU3hQUVVGb1FpeEhRVUV3UWtFc1QwRklha003UVVGSlNEczdRVUZGUkN4SlFVRkpTeXhQUVVGS0xFVkJRV0U3UVVGRFZFTXNUMEZCUjBNc1MwRkJTQ3hEUVVGVE4wUXNUVUZCVkN4SFFVRnJRa0VzVFVGQmJFSTdRVUZEUVRSRUxFOUJRVWRETEV0QlFVZ3NRMEZCVTFRc1dVRkJWQ3hIUVVGM1FrRXNXVUZCZUVJN1FVRkRTRHM3UVVGRlJGVXNUMEZCVDBNc1QwRkJVQ3hIUVVGcFFqdEJRVU5pTDBRc1dVRkJVVUVzVFVGRVN6dEJRVVZpYjBRc2EwSkJRV05CTzBGQlJrUXNRMEZCYWtJaUxDSm1hV3hsSWpvaVltVjZhV1Z5TG1weklpd2ljMjkxY21ObGMwTnZiblJsYm5RaU9sc2lMeW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lwY2NseHVJRU52Y0hseWFXZG9kQ0FvWXlrZ01qQXhOeTB5TURFNElGaHBZVzFsYmlCWllXcHBJRk52Wm5SM1lYSmxJRU52TGl3Z1RIUmtMbHh5WEc1Y2NseHVJR2gwZEhCek9pOHZkM2QzTG1OdlkyOXpMbU52YlM5Y2NseHVYSEpjYmlCUVpYSnRhWE56YVc5dUlHbHpJR2hsY21WaWVTQm5jbUZ1ZEdWa0xDQm1jbVZsSUc5bUlHTm9ZWEpuWlN3Z2RHOGdZVzU1SUhCbGNuTnZiaUJ2WW5SaGFXNXBibWNnWVNCamIzQjVYSEpjYmlCdlppQjBhR2x6SUhOdlpuUjNZWEpsSUdGdVpDQmhjM052WTJsaGRHVmtJR1Z1WjJsdVpTQnpiM1Z5WTJVZ1kyOWtaU0FvZEdobElGd2lVMjltZEhkaGNtVmNJaWtzSUdFZ2JHbHRhWFJsWkN4Y2NseHVJSGR2Y214a2QybGtaU3dnY205NVlXeDBlUzFtY21WbExDQnViMjR0WVhOemFXZHVZV0pzWlN3Z2NtVjJiMk5oWW14bElHRnVaQ0J1YjI0dFpYaGpiSFZ6YVhabElHeHBZMlZ1YzJWY2NseHVJSFJ2SUhWelpTQkRiMk52Y3lCRGNtVmhkRzl5SUhOdmJHVnNlU0IwYnlCa1pYWmxiRzl3SUdkaGJXVnpJRzl1SUhsdmRYSWdkR0Z5WjJWMElIQnNZWFJtYjNKdGN5NGdXVzkxSUhOb1lXeHNYSEpjYmlCdWIzUWdkWE5sSUVOdlkyOXpJRU55WldGMGIzSWdjMjltZEhkaGNtVWdabTl5SUdSbGRtVnNiM0JwYm1jZ2IzUm9aWElnYzI5bWRIZGhjbVVnYjNJZ2RHOXZiSE1nZEdoaGRDZHpYSEpjYmlCMWMyVmtJR1p2Y2lCa1pYWmxiRzl3YVc1bklHZGhiV1Z6TGlCWmIzVWdZWEpsSUc1dmRDQm5jbUZ1ZEdWa0lIUnZJSEIxWW14cGMyZ3NJR1JwYzNSeWFXSjFkR1VzWEhKY2JpQnpkV0pzYVdObGJuTmxMQ0JoYm1RdmIzSWdjMlZzYkNCamIzQnBaWE1nYjJZZ1EyOWpiM01nUTNKbFlYUnZjaTVjY2x4dVhISmNiaUJVYUdVZ2MyOW1kSGRoY21VZ2IzSWdkRzl2YkhNZ2FXNGdkR2hwY3lCTWFXTmxibk5sSUVGbmNtVmxiV1Z1ZENCaGNtVWdiR2xqWlc1elpXUXNJRzV2ZENCemIyeGtMbHh5WEc0Z1dHbGhiV1Z1SUZsaGFta2dVMjltZEhkaGNtVWdRMjh1TENCTWRHUXVJSEpsYzJWeWRtVnpJR0ZzYkNCeWFXZG9kSE1nYm05MElHVjRjSEpsYzNOc2VTQm5jbUZ1ZEdWa0lIUnZJSGx2ZFM1Y2NseHVYSEpjYmlCVVNFVWdVMDlHVkZkQlVrVWdTVk1nVUZKUFZrbEVSVVFnWENKQlV5QkpVMXdpTENCWFNWUklUMVZVSUZkQlVsSkJUbFJaSUU5R0lFRk9XU0JMU1U1RUxDQkZXRkJTUlZOVElFOVNYSEpjYmlCSlRWQk1TVVZFTENCSlRrTk1WVVJKVGtjZ1FsVlVJRTVQVkNCTVNVMUpWRVZFSUZSUElGUklSU0JYUVZKU1FVNVVTVVZUSUU5R0lFMUZVa05JUVU1VVFVSkpURWxVV1N4Y2NseHVJRVpKVkU1RlUxTWdSazlTSUVFZ1VFRlNWRWxEVlV4QlVpQlFWVkpRVDFORklFRk9SQ0JPVDA1SlRrWlNTVTVIUlUxRlRsUXVJRWxPSUU1UElFVldSVTVVSUZOSVFVeE1JRlJJUlZ4eVhHNGdRVlZVU0U5U1V5QlBVaUJEVDFCWlVrbEhTRlFnU0U5TVJFVlNVeUJDUlNCTVNVRkNURVVnUms5U0lFRk9XU0JEVEVGSlRTd2dSRUZOUVVkRlV5QlBVaUJQVkVoRlVseHlYRzRnVEVsQlFrbE1TVlJaTENCWFNFVlVTRVZTSUVsT0lFRk9JRUZEVkVsUFRpQlBSaUJEVDA1VVVrRkRWQ3dnVkU5U1ZDQlBVaUJQVkVoRlVsZEpVMFVzSUVGU1NWTkpUa2NnUmxKUFRTeGNjbHh1SUU5VlZDQlBSaUJQVWlCSlRpQkRUMDVPUlVOVVNVOU9JRmRKVkVnZ1ZFaEZJRk5QUmxSWFFWSkZJRTlTSUZSSVJTQlZVMFVnVDFJZ1QxUklSVklnUkVWQlRFbE9SMU1nU1U1Y2NseHVJRlJJUlNCVFQwWlVWMEZTUlM1Y2NseHVJQ29xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvdlhISmNibHh5WEc0dkwzWmhjaUJpWlhwcFpYSWdQU0FvWm5WdVkzUnBiMjRnS0NrZ2UxeHlYRzR2THlBZ0lDQm1kVzVqZEdsdmJpQkNNU0FvZENrZ2V5QnlaWFIxY200Z0tIUWdLaUIwSUNvZ2RDazdJSDFjY2x4dUx5OGdJQ0FnWm5WdVkzUnBiMjRnUWpJZ0tIUXBJSHNnY21WMGRYSnVJQ2d6SUNvZ2RDQXFJSFFnS2lBb01TQXRJSFFwS1RzZ2ZWeHlYRzR2THlBZ0lDQm1kVzVqZEdsdmJpQkNNeUFvZENrZ2V5QnlaWFIxY200Z0tETWdLaUIwSUNvZ0tERWdMU0IwS1NBcUlDZ3hJQzBnZENrcE95QjlYSEpjYmk4dklDQWdJR1oxYm1OMGFXOXVJRUkwSUNoMEtTQjdJSEpsZEhWeWJpQW9LREVnTFNCMEtTQXFJQ2d4SUMwZ2RDa2dLaUFvTVNBdElIUXBLVHNnZlZ4eVhHNHZMeUFnSUNCbWRXNWpkR2x2YmlCaVpYcHBaWElnS0VNeExDQkRNaXdnUXpNc0lFTTBMQ0IwS1NCN1hISmNiaTh2SUNBZ0lDQWdJQ0J5WlhSMWNtNGdRekVnS2lCQ01TaDBLU0FySUVNeUlDb2dRaklvZENrZ0t5QkRNeUFxSUVJektIUXBJQ3NnUXpRZ0tpQkNOQ2gwS1R0Y2NseHVMeThnSUNBZ2ZWeHlYRzR2TDF4eVhHNHZMeUFnSUNBdkwyWjFibU4wYVc5dUlHSmxlbWxsY2lBb1F6RXNJRU15TENCRE15d2dRelFzSUhRc0lHOTFkQ2tnZTF4eVhHNHZMeUFnSUNBdkx5QWdJQ0J2ZFhRdWVDQTlJRU14TG5nZ0tpQkNNU2gwS1NBcklFTXlMbmdnS2lCQ01paDBLU0FySUVNekxuZ2dLaUJDTXloMEtTQXJJRU0wTG5nZ0tpQkNOQ2gwS1R0Y2NseHVMeThnSUNBZ0x5OGdJQ0FnYjNWMExua2dQU0JETVM1NUlDb2dRakVvZENrZ0t5QkRNaTU1SUNvZ1FqSW9kQ2tnS3lCRE15NTVJQ29nUWpNb2RDa2dLeUJETkM1NUlDb2dRalFvZENrN1hISmNiaTh2SUNBZ0lDOHZmVnh5WEc0dkwxeHlYRzR2THlBZ0lDQnlaWFIxY200Z1ltVjZhV1Z5TzF4eVhHNHZMMzBwS0NrN1hISmNibVoxYm1OMGFXOXVJR0psZW1sbGNpQW9RekVzSUVNeUxDQkRNeXdnUXpRc0lIUXBJSHRjY2x4dUlDQWdkbUZ5SUhReElEMGdNU0F0SUhRN1hISmNiaUFnSUhKbGRIVnliaUJETVNBcUlIUXhJQ29nZERFZ0tpQjBNU0FyWEhKY2JpQWdJQ0FnSUNBZ0lDQkRNaUFxSURNZ0tpQjBNU0FxSUhReElDb2dkQ0FyWEhKY2JpQWdJQ0FnSUNBZ0lDQkRNeUFxSURNZ0tpQjBNU0FxSUhRZ0tpQjBJQ3RjY2x4dUlDQWdJQ0FnSUNBZ0lFTTBJQ29nZENBcUlIUWdLaUIwTzF4eVhHNTlYSEpjYmk4dlpuVnVZM1JwYjI0Z1ltVjZhV1Z5SUNoak1Dd2dZekVzSUdNeUxDQmpNeXdnZENrZ2UxeHlYRzR2THlBZ0lDQjJZWElnWTNrZ1BTQXpMakFnS2lBb1l6RXBPMXh5WEc0dkx5QWdJQ0IyWVhJZ1lua2dQU0F6TGpBZ0tpQW9Zek1nTFNCak1Ta2dMU0JqZVR0Y2NseHVMeThnSUNBZ2RtRnlJR0Y1SUQwZ01TQXRJR041SUMwZ1luazdYSEpjYmk4dklDQWdJSEpsZEhWeWJpQW9ZWGtnS2lCMElDb2dkQ0FxSUhRcElDc2dLR0o1SUNvZ2RDQXFJSFFwSUNzZ0tHTjVJQ29nZENrN1hISmNiaTh2ZlZ4eVhHNWNjbHh1THk5MllYSWdjMmx1SUQwZ1RXRjBhQzV6YVc0N1hISmNiblpoY2lCamIzTWdQU0JOWVhSb0xtTnZjeXhjY2x4dUlDQWdJR0ZqYjNNZ1BTQk5ZWFJvTG1GamIzTXNYSEpjYmlBZ0lDQnRZWGdnUFNCTllYUm9MbTFoZUN4Y2NseHVJQ0FnSUM4dllYUmhiaklnUFNCTllYUm9MbUYwWVc0eUxGeHlYRzRnSUNBZ2NHa2dQU0JOWVhSb0xsQkpMRnh5WEc0Z0lDQWdkR0YxSUQwZ01pQXFJSEJwTEZ4eVhHNGdJQ0FnYzNGeWRDQTlJRTFoZEdndWMzRnlkRHRjY2x4dVhISmNibVoxYm1OMGFXOXVJR055ZENBb2Rpa2dlMXh5WEc0Z0lDQWdhV1lnS0hZZ1BDQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUMxTllYUm9MbkJ2ZHlndGRpd2dNU0F2SURNcE8xeHlYRzRnSUNBZ2ZWeHlYRzRnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ2NtVjBkWEp1SUUxaGRHZ3VjRzkzS0hZc0lERWdMeUF6S1R0Y2NseHVJQ0FnSUgxY2NseHVmVnh5WEc1Y2NseHVMeTltZFc1amRHbHZiaUJoYkdsbmJpQW9ZM1Z5ZG1Vc0lHeHBibVVwSUh0Y2NseHVMeThnSUNBZ2RtRnlJSFI0SUQwZ2JHbHVaUzV3TVM1NExGeHlYRzR2THlBZ0lDQWdJQ0FnZEhrZ1BTQnNhVzVsTG5BeExua3NYSEpjYmk4dklDQWdJQ0FnSUNCaElEMGdMV0YwWVc0eUtHeHBibVV1Y0RJdWVTMTBlU3dnYkdsdVpTNXdNaTU0TFhSNEtUdGNjbHh1THk4Z0lDQWdZM1Z5ZG1VZ1BTQmJlM2c2TUN3Z2VUb3hmU3dnZTNnNklHTjFjblpsV3pCZExDQjVPaUF4TFdOMWNuWmxXekZkZlN3Z2UzZzZJR04xY25abFd6SmRMQ0I1T2lBeExXTjFjblpsV3pOZGZTd2dlM2c2TVN3Z2VUb3dmVjA3WEhKY2JpOHZJQ0FnSUhKbGRIVnliaUJqZFhKMlpTNXRZWEFvWm5WdVkzUnBiMjRvZGlrZ2UxeHlYRzR2THlBZ0lDQWdJQ0FnY21WMGRYSnVJSHRjY2x4dUx5OGdJQ0FnSUNBZ0lDQWdJQ0I0T2lBb2RpNTRMWFI0S1NwamIzTW9ZU2tnTFNBb2RpNTVMWFI1S1NwemFXNG9ZU2tzWEhKY2JpOHZJQ0FnSUNBZ0lDQWdJQ0FnZVRvZ0tIWXVlQzEwZUNrcWMybHVLR0VwSUNzZ0tIWXVlUzEwZVNrcVkyOXpLR0VwWEhKY2JpOHZJQ0FnSUNBZ0lDQjlPMXh5WEc0dkx5QWdJQ0I5S1R0Y2NseHVMeTk5WEhKY2JseHlYRzR2THlCTmIyUnBabWxsWkNCbWNtOXRJR2gwZEhBNkx5OXFjMkpwYmk1amIyMHZlV2xpYVhCdlptVnhhUzh4TDJWa2FYUXNJRzl3ZEdsdGFYcGxaQ0JtYjNJZ1lXNXBiV0YwYVc5dWN5NWNjbHh1THk4Z1ZHaGxJRzl5YVdkcGJpQkRZWEprWVc1dkozTWdZV3huYjNKcGRHaHRJR2x6SUdKaGMyVmtJRzl1SUdoMGRIQTZMeTkzZDNjdWRISmhibk0wYldsdVpDNWpiMjB2Y0dWeWMyOXVZV3hmWkdWMlpXeHZjRzFsYm5RdmJXRjBhR1Z0WVhScFkzTXZjRzlzZVc1dmJXbGhiSE12WTNWaWFXTkJiR2RsWW5KaExtaDBiVnh5WEc1bWRXNWpkR2x2YmlCallYSmtZVzV2SUNoamRYSjJaU3dnZUNrZ2UxeHlYRzRnSUNBZ0x5OGdZV3hwWjI0Z1kzVnlkbVVnZDJsMGFDQjBhR1VnYVc1MFpYSnpaV04wYVc1bklHeHBibVU2WEhKY2JpQWdJQ0FnSUNBZ0x5OTJZWElnYkdsdVpTQTlJSHR3TVRvZ2UzZzZJSGdzSUhrNklEQjlMQ0J3TWpvZ2UzZzZJSGdzSUhrNklERjlmVHRjY2x4dUlDQWdJQ0FnSUNBdkwzWmhjaUJoYkdsbmJtVmtJRDBnWVd4cFoyNG9ZM1Z5ZG1Vc0lHeHBibVVwTzF4eVhHNGdJQ0FnSUNBZ0lDOHZMeThnWVc1a0lISmxkM0pwZEdVZ1puSnZiU0JiWVNneExYUXBYak1nS3lBelluUW9NUzEwS1Y0eUlDc2dNMk1vTVMxMEtYUmVNaUFySUdSMFhqTmRJR1p2Y20xY2NseHVJQ0FnSUNBZ0lDQXZMeUFnSUNCd1lTQTlJR0ZzYVdkdVpXUmJNRjB1ZVN4Y2NseHVJQ0FnSUNBZ0lDQXZMeUFnSUNCd1lpQTlJR0ZzYVdkdVpXUmJNVjB1ZVN4Y2NseHVJQ0FnSUNBZ0lDQXZMeUFnSUNCd1l5QTlJR0ZzYVdkdVpXUmJNbDB1ZVN4Y2NseHVJQ0FnSUNBZ0lDQXZMeUFnSUNCd1pDQTlJR0ZzYVdkdVpXUmJNMTB1ZVR0Y2NseHVJQ0FnSUNBZ0lDQXZMeTh2THk4Z1kzVnlkbVVnUFNCYmUzZzZNQ3dnZVRveGZTd2dlM2c2SUdOMWNuWmxXekJkTENCNU9pQXhMV04xY25abFd6RmRmU3dnZTNnNklHTjFjblpsV3pKZExDQjVPaUF4TFdOMWNuWmxXek5kZlN3Z2UzZzZNU3dnZVRvd2ZWMDdYSEpjYmlBZ0lDQjJZWElnY0dFZ1BTQjRJQzBnTUR0Y2NseHVJQ0FnSUhaaGNpQndZaUE5SUhnZ0xTQmpkWEoyWlZzd1hUdGNjbHh1SUNBZ0lIWmhjaUJ3WXlBOUlIZ2dMU0JqZFhKMlpWc3lYVHRjY2x4dUlDQWdJSFpoY2lCd1pDQTlJSGdnTFNBeE8xeHlYRzVjY2x4dUlDQWdJQzh2SUhSdklGdDBYak1nS3lCaGRGNHlJQ3NnWW5RZ0t5QmpYU0JtYjNKdE9seHlYRzRnSUNBZ2RtRnlJSEJoTXlBOUlIQmhJQ29nTXp0Y2NseHVJQ0FnSUhaaGNpQndZak1nUFNCd1lpQXFJRE03WEhKY2JpQWdJQ0IyWVhJZ2NHTXpJRDBnY0dNZ0tpQXpPMXh5WEc0Z0lDQWdkbUZ5SUdRZ1BTQW9MWEJoSUNzZ2NHSXpJQzBnY0dNeklDc2djR1FwTEZ4eVhHNGdJQ0FnSUNBZ0lISmtJRDBnTVNBdklHUXNYSEpjYmlBZ0lDQWdJQ0FnY2pNZ1BTQXhJQzhnTXl4Y2NseHVJQ0FnSUNBZ0lDQmhJRDBnS0hCaE15QXRJRFlnS2lCd1lpQXJJSEJqTXlrZ0tpQnlaQ3hjY2x4dUlDQWdJQ0FnSUNCaE15QTlJR0VnS2lCeU15eGNjbHh1SUNBZ0lDQWdJQ0JpSUQwZ0tDMXdZVE1nS3lCd1lqTXBJQ29nY21Rc1hISmNiaUFnSUNBZ0lDQWdZeUE5SUhCaElDb2djbVFzWEhKY2JpQWdJQ0F2THlCMGFHVnVMQ0JrWlhSbGNtMXBibVVnY0NCaGJtUWdjVHBjY2x4dUlDQWdJQ0FnSUNCd0lEMGdLRE1nS2lCaUlDMGdZU0FxSUdFcElDb2djak1zWEhKY2JpQWdJQ0FnSUNBZ2NETWdQU0J3SUNvZ2NqTXNYSEpjYmlBZ0lDQWdJQ0FnY1NBOUlDZ3lJQ29nWVNBcUlHRWdLaUJoSUMwZ09TQXFJR0VnS2lCaUlDc2dNamNnS2lCaktTQXZJREkzTEZ4eVhHNGdJQ0FnSUNBZ0lIRXlJRDBnY1NBdklESXNYSEpjYmlBZ0lDQXZMeUJoYm1RZ1pHVjBaWEp0YVc1bElIUm9aU0JrYVhOamNtbHRhVzVoYm5RNlhISmNiaUFnSUNBZ0lDQWdaR2x6WTNKcGJXbHVZVzUwSUQwZ2NUSWdLaUJ4TWlBcklIQXpJQ29nY0RNZ0tpQndNeXhjY2x4dUlDQWdJQzh2SUdGdVpDQnpiMjFsSUhKbGMyVnlkbVZrSUhaaGNtbGhZbXhsYzF4eVhHNGdJQ0FnSUNBZ0lIVXhMQ0IyTVN3Z2VERXNJSGd5TENCNE16dGNjbHh1WEhKY2JpQWdJQ0F2THlCSlppQjBhR1VnWkdselkzSnBiV2x1WVc1MElHbHpJRzVsWjJGMGFYWmxMQ0IxYzJVZ2NHOXNZWElnWTI5dmNtUnBibUYwWlhOY2NseHVJQ0FnSUM4dklIUnZJR2RsZENCaGNtOTFibVFnYzNGMVlYSmxJSEp2YjNSeklHOW1JRzVsWjJGMGFYWmxJRzUxYldKbGNuTmNjbHh1SUNBZ0lHbG1JQ2hrYVhOamNtbHRhVzVoYm5RZ1BDQXdLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJRzF3TXlBOUlDMXdJQ29nY2pNc1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUcxd016TWdQU0J0Y0RNZ0tpQnRjRE1nS2lCdGNETXNYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lISWdQU0J6Y1hKMEtHMXdNek1wTEZ4eVhHNGdJQ0FnSUNBZ0lDOHZJR052YlhCMWRHVWdZMjl6Y0docElHTnZjbkpsWTNSbFpDQm1iM0lnU1VWRlJTQm1iRzloZENCeWIzVnVaR2x1WnpwY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZENBOUlDMXhJQzhnS0RJZ0tpQnlLU3hjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMjl6Y0docElEMGdkQ0E4SUMweElEOGdMVEVnT2lCMElENGdNU0EvSURFZ09pQjBMRnh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQndhR2tnUFNCaFkyOXpLR052YzNCb2FTa3NYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTnlkSElnUFNCamNuUW9jaWtzWEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSFF4SUQwZ01pQXFJR055ZEhJN1hISmNiaUFnSUNBZ0lDQWdlREVnUFNCME1TQXFJR052Y3lod2FHa2dLaUJ5TXlrZ0xTQmhNenRjY2x4dUlDQWdJQ0FnSUNCNE1pQTlJSFF4SUNvZ1kyOXpLQ2h3YUdrZ0t5QjBZWFVwSUNvZ2NqTXBJQzBnWVRNN1hISmNiaUFnSUNBZ0lDQWdlRE1nUFNCME1TQXFJR052Y3lnb2NHaHBJQ3NnTWlBcUlIUmhkU2tnS2lCeU15a2dMU0JoTXp0Y2NseHVYSEpjYmlBZ0lDQWdJQ0FnTHk4Z1kyaHZiM05sSUdKbGMzUWdjR1Z5WTJWdWRHRm5aVnh5WEc0Z0lDQWdJQ0FnSUdsbUlDZ3dJRHc5SUhneElDWW1JSGd4SUR3OUlERXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdhV1lnS0RBZ1BEMGdlRElnSmlZZ2VESWdQRDBnTVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdhV1lnS0RBZ1BEMGdlRE1nSmlZZ2VETWdQRDBnTVNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUhKbGRIVnliaUJ0WVhnb2VERXNJSGd5TENCNE15azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRjRLSGd4TENCNE1pazdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCcFppQW9NQ0E4UFNCNE15QW1KaUI0TXlBOFBTQXhLU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCeVpYUjFjbTRnYldGNEtIZ3hMQ0I0TXlrN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUgxY2NseHVJQ0FnSUNBZ0lDQWdJQ0FnWld4elpTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdlREU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdsbUlDZ3dJRHc5SUhneUlDWW1JSGd5SUR3OUlERXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUdsbUlDZ3dJRHc5SUhneklDWW1JSGd6SUR3OUlERXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2JXRjRLSGd5TENCNE15azdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VESTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VETTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JsYkhObElHbG1JQ2hrYVhOamNtbHRhVzVoYm5RZ1BUMDlJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQjFNU0E5SUhFeUlEd2dNQ0EvSUdOeWRDZ3RjVElwSURvZ0xXTnlkQ2h4TWlrN1hISmNiaUFnSUNBZ0lDQWdlREVnUFNBeUlDb2dkVEVnTFNCaE16dGNjbHh1SUNBZ0lDQWdJQ0I0TWlBOUlDMTFNU0F0SUdFek8xeHlYRzVjY2x4dUlDQWdJQ0FnSUNBdkx5QmphRzl2YzJVZ1ltVnpkQ0J3WlhKalpXNTBZV2RsWEhKY2JpQWdJQ0FnSUNBZ2FXWWdLREFnUEQwZ2VERWdKaVlnZURFZ1BEMGdNU2tnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0JwWmlBb01DQThQU0I0TWlBbUppQjRNaUE4UFNBeEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0J5WlhSMWNtNGdiV0Y0S0hneExDQjRNaWs3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQnlaWFIxY200Z2VERTdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lIMWNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSEpsZEhWeWJpQjRNanRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaUFnSUNBdkx5QnZibVVnY21WaGJDQnliMjkwTENCaGJtUWdkSGR2SUdsdFlXZHBibUZ5ZVNCeWIyOTBjMXh5WEc0Z0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUhOa0lEMGdjM0Z5ZENoa2FYTmpjbWx0YVc1aGJuUXBPMXh5WEc0Z0lDQWdJQ0FnSUhVeElEMGdZM0owS0MxeE1pQXJJSE5rS1R0Y2NseHVJQ0FnSUNBZ0lDQjJNU0E5SUdOeWRDaHhNaUFySUhOa0tUdGNjbHh1SUNBZ0lDQWdJQ0I0TVNBOUlIVXhJQzBnZGpFZ0xTQmhNenRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnZURFN1hISmNiaUFnSUNCOVhISmNibjFjY2x4dVhISmNibVoxYm1OMGFXOXVJR0psZW1sbGNrSjVWR2x0WlNBb1kyOXVkSEp2YkZCdmFXNTBjeXdnZUNrZ2UxeHlYRzRnSUNBZ2RtRnlJSEJsY21ObGJuUWdQU0JqWVhKa1lXNXZLR052Ym5SeWIyeFFiMmx1ZEhNc0lIZ3BPeUFnSUNBdkx5QjBYSEpjYmlBZ0lDQjJZWElnY0RCNUlEMGdNRHNnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdMeThnWVZ4eVhHNGdJQ0FnZG1GeUlIQXhlU0E5SUdOdmJuUnliMnhRYjJsdWRITmJNVjA3SUM4dklHSmNjbHh1SUNBZ0lIWmhjaUJ3TW5rZ1BTQmpiMjUwY205c1VHOXBiblJ6V3pOZE95QXZMeUJqWEhKY2JpQWdJQ0IyWVhJZ2NETjVJRDBnTVRzZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnTHk4Z1pGeHlYRzRnSUNBZ2RtRnlJSFF4SUQwZ01TQXRJSEJsY21ObGJuUTdYSEpjYmlBZ0lDQnlaWFIxY200Z2NEQjVJQ29nZERFZ0tpQjBNU0FxSUhReElDdGNjbHh1SUNBZ0lDQWdJQ0FnSUNCd01Ya2dLaUF6SUNvZ2NHVnlZMlZ1ZENBcUlIUXhJQ29nZERFZ0sxeHlYRzRnSUNBZ0lDQWdJQ0FnSUhBeWVTQXFJRE1nS2lCd1pYSmpaVzUwSUNvZ2NHVnlZMlZ1ZENBcUlIUXhJQ3RjY2x4dUlDQWdJQ0FnSUNBZ0lDQndNM2tnS2lCd1pYSmpaVzUwSUNvZ2NHVnlZMlZ1ZENBcUlIQmxjbU5sYm5RN1hISmNibjFjY2x4dVhISmNibWxtSUNoRFExOVVSVk5VS1NCN1hISmNiaUFnSUNCall5NWZWR1Z6ZEM1aVpYcHBaWElnUFNCaVpYcHBaWEk3WEhKY2JpQWdJQ0JqWXk1ZlZHVnpkQzVpWlhwcFpYSkNlVlJwYldVZ1BTQmlaWHBwWlhKQ2VWUnBiV1U3WEhKY2JuMWNjbHh1WEhKY2JtMXZaSFZzWlM1bGVIQnZjblJ6SUQwZ2UxeHlYRzRnSUNBZ1ltVjZhV1Z5T2lCaVpYcHBaWElzWEhKY2JpQWdJQ0JpWlhwcFpYSkNlVlJwYldVNklHSmxlbWxsY2tKNVZHbHRaVnh5WEc1OU8xeHlYRzRpWFgwPSJdfQ==