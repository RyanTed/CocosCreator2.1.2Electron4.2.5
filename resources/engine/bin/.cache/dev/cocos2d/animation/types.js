(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/types.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var WrapModeMask = {
            Loop: 1 << 1,
            ShouldWrap: 1 << 2,
            PingPong: 1 << 4 | 1 << 1 | 1 << 2,
            Reverse: 1 << 5 | 1 << 2
        };
        var WrapMode = cc.Enum({
            Default: 0,
            Normal: 1,
            Reverse: WrapModeMask.Reverse,
            Loop: WrapModeMask.Loop,
            LoopReverse: WrapModeMask.Loop | WrapModeMask.Reverse,
            PingPong: WrapModeMask.PingPong,
            PingPongReverse: WrapModeMask.PingPong | WrapModeMask.Reverse
        });
        cc.WrapMode = WrapMode;
        function WrappedInfo(info) {
            if (info) {
                this.set(info);
                return;
            }
            this.ratio = 0;
            this.time = 0;
            this.direction = 1;
            this.stopped = true;
            this.iterations = 0;
            this.frameIndex = undefined;
        }
        WrappedInfo.prototype.set = function (info) {
            this.ratio = info.ratio;
            this.time = info.time;
            this.direction = info.direction;
            this.stopped = info.stopped;
            this.iterations = info.iterations;
            this.frameIndex = info.frameIndex;
        };
        module.exports = {
            WrapModeMask: WrapModeMask,
            WrapMode: WrapMode,
            WrappedInfo: WrappedInfo
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,