(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/animation-manager.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        var AnimationManager = cc.Class({
            ctor: function ctor() {
                this._anims = new js.array.MutableForwardIterator([]);
                this._delayEvents = [];
                cc.director._scheduler && cc.director._scheduler.enableForTarget(this);
            },
            update: function update(dt) {
                var iterator = this._anims;
                var array = iterator.array;
                for (iterator.i = 0; iterator.i < array.length; ++iterator.i) {
                    var anim = array[iterator.i];
                    if (anim._isPlaying && !anim._isPaused) {
                        anim.update(dt);
                    }
                }
                var events = this._delayEvents;
                for (var i = 0, l = events.length; i < l; i++) {
                    var event = events[i];
                    event.target[event.func].apply(event.target, event.args);
                }
                events.length = 0;
            },
            destruct: function destruct() {
            },
            addAnimation: function addAnimation(anim) {
                var index = this._anims.array.indexOf(anim);
                if (index === -1) {
                    this._anims.push(anim);
                }
            },
            removeAnimation: function removeAnimation(anim) {
                var index = this._anims.array.indexOf(anim);
                if (index >= 0) {
                    this._anims.fastRemoveAt(index);
                } else {
                    cc.errorID(3907);
                }
            },
            pushDelayEvent: function pushDelayEvent(target, func, args) {
                this._delayEvents.push({
                    target: target,
                    func: func,
                    args: args
                });
            }
        });
        cc.AnimationManager = module.exports = AnimationManager;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,