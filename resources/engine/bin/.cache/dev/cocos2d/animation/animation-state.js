(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/animation-state.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        var Playable = require('./playable');
        var Types = require('./types');
        var WrappedInfo = Types.WrappedInfo;
        var WrapMode = Types.WrapMode;
        var WrapModeMask = Types.WrapModeMask;
        function AnimationState(clip, name) {
            Playable.call(this);
            this._currentFramePlayed = false;
            this._delay = 0;
            this._delayTime = 0;
            this._wrappedInfo = new WrappedInfo();
            this._lastWrappedInfo = null;
            this._process = process;
            this._clip = clip;
            this._name = name || clip && clip.name;
            this.animator = null;
            this.curves = [];
            this.delay = 0;
            this.repeatCount = 1;
            this.duration = 1;
            this.speed = 1;
            this.wrapMode = WrapMode.Normal;
            this.time = 0;
            this._target = null;
            this._lastframeEventOn = false;
            this.emit = function () {
                var args = new Array(arguments.length);
                for (var i = 0, l = args.length; i < l; i++) {
                    args[i] = arguments[i];
                }
                cc.director.getAnimationManager().pushDelayEvent(this, '_emit', args);
            };
        }
        js.extend(AnimationState, Playable);
        var proto = AnimationState.prototype;
        proto._emit = function (type, state) {
            if (this._target && this._target.isValid) {
                this._target.emit(type, type, state);
            }
        };
        proto.on = function (type, callback, target) {
            if (this._target && this._target.isValid) {
                if (type === 'lastframe') {
                    this._lastframeEventOn = true;
                }
                return this._target.on(type, callback, target);
            } else {
                return null;
            }
        };
        proto.once = function (type, callback, target) {
            if (this._target && this._target.isValid) {
                if (type === 'lastframe') {
                    this._lastframeEventOn = true;
                }
                var self = this;
                return this._target.once(type, function (event) {
                    callback.call(target, event);
                    self._lastframeEventOn = false;
                });
            } else {
                return null;
            }
        };
        proto.off = function (type, callback, target) {
            if (this._target && this._target.isValid) {
                if (type === 'lastframe') {
                    if (!this._target.hasEventListener(type)) {
                        this._lastframeEventOn = false;
                    }
                }
                this._target.off(type, callback, target);
            }
        };
        proto._setEventTarget = function (target) {
            this._target = target;
        };
        proto.onPlay = function () {
            this.setTime(0);
            this._delayTime = this._delay;
            cc.director.getAnimationManager().addAnimation(this);
            if (this.animator) {
                this.animator.addAnimation(this);
            }
            this.emit('play', this);
        };
        proto.onStop = function () {
            if (!this.isPaused) {
                cc.director.getAnimationManager().removeAnimation(this);
            }
            if (this.animator) {
                this.animator.removeAnimation(this);
            }
            this.emit('stop', this);
        };
        proto.onResume = function () {
            cc.director.getAnimationManager().addAnimation(this);
            this.emit('resume', this);
        };
        proto.onPause = function () {
            cc.director.getAnimationManager().removeAnimation(this);
            this.emit('pause', this);
        };
        proto.setTime = function (time) {
            this._currentFramePlayed = false;
            this.time = time || 0;
            var curves = this.curves;
            for (var i = 0, l = curves.length; i < l; i++) {
                var curve = curves[i];
                if (curve.onTimeChangedManually) {
                    curve.onTimeChangedManually(time, this);
                }
            }
        };
        function process() {
            var info = this.sample();
            if (this._lastframeEventOn) {
                var lastInfo;
                if (!this._lastWrappedInfo) {
                    lastInfo = this._lastWrappedInfo = new WrappedInfo(info);
                } else {
                    lastInfo = this._lastWrappedInfo;
                }
                if (this.repeatCount > 1 && (info.iterations | 0) > (lastInfo.iterations | 0)) {
                    this.emit('lastframe', this);
                }
                lastInfo.set(info);
            }
            if (info.stopped) {
                this.stop();
                this.emit('finished', this);
            }
        }
        function simpleProcess() {
            var time = this.time;
            var duration = this.duration;
            if (time > duration) {
                time = time % duration;
                if (time === 0)
                    time = duration;
            } else if (time < 0) {
                time = time % duration;
                if (time !== 0)
                    time += duration;
            }
            var ratio = time / duration;
            var curves = this.curves;
            for (var i = 0, len = curves.length; i < len; i++) {
                var curve = curves[i];
                curve.sample(time, ratio, this);
            }
            if (this._lastframeEventOn) {
                if (this._lastIterations === undefined) {
                    this._lastIterations = ratio;
                }
                if (this.time > 0 && this._lastIterations > ratio || this.time < 0 && this._lastIterations < ratio) {
                    this.emit('lastframe', this);
                }
                this._lastIterations = ratio;
            }
        }
        proto.update = function (delta) {
            if (this._delayTime > 0) {
                this._delayTime -= delta;
                if (this._delayTime > 0) {
                    return;
                }
            }
            if (this._currentFramePlayed) {
                this.time += delta * this.speed;
            } else {
                this._currentFramePlayed = true;
            }
            this._process();
        };
        proto._needRevers = function (currentIterations) {
            var wrapMode = this.wrapMode;
            var needRevers = false;
            if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                var isEnd = currentIterations - (currentIterations | 0) === 0;
                if (isEnd && currentIterations > 0) {
                    currentIterations -= 1;
                }
                var isOddIteration = currentIterations & 1;
                if (isOddIteration) {
                    needRevers = !needRevers;
                }
            }
            if ((wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse) {
                needRevers = !needRevers;
            }
            return needRevers;
        };
        proto.getWrappedInfo = function (time, info) {
            info = info || new WrappedInfo();
            var stopped = false;
            var duration = this.duration;
            var repeatCount = this.repeatCount;
            var currentIterations = time > 0 ? time / duration : -(time / duration);
            if (currentIterations >= repeatCount) {
                currentIterations = repeatCount;
                stopped = true;
                var tempRatio = repeatCount - (repeatCount | 0);
                if (tempRatio === 0) {
                    tempRatio = 1;
                }
                time = tempRatio * duration * (time > 0 ? 1 : -1);
            }
            if (time > duration) {
                var tempTime = time % duration;
                time = tempTime === 0 ? duration : tempTime;
            } else if (time < 0) {
                time = time % duration;
                if (time !== 0)
                    time += duration;
            }
            var needRevers = false;
            var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
            if (shouldWrap) {
                needRevers = this._needRevers(currentIterations);
            }
            var direction = needRevers ? -1 : 1;
            if (this.speed < 0) {
                direction *= -1;
            }
            if (shouldWrap && needRevers) {
                time = duration - time;
            }
            info.ratio = time / duration;
            info.time = time;
            info.direction = direction;
            info.stopped = stopped;
            info.iterations = currentIterations;
            return info;
        };
        proto.sample = function () {
            var info = this.getWrappedInfo(this.time, this._wrappedInfo);
            var curves = this.curves;
            for (var i = 0, len = curves.length; i < len; i++) {
                var curve = curves[i];
                curve.sample(info.time, info.ratio, this);
            }
            return info;
        };
        js.get(proto, 'clip', function () {
            return this._clip;
        });
        js.get(proto, 'name', function () {
            return this._name;
        });
        js.obsolete(proto, 'AnimationState.length', 'duration');
        js.getset(proto, 'curveLoaded', function () {
            return this.curves.length > 0;
        }, function () {
            this.curves.length = 0;
        });
        js.getset(proto, 'wrapMode', function () {
            return this._wrapMode;
        }, function (value) {
            this._wrapMode = value;
            if (CC_EDITOR)
                return;
            this.time = 0;
            if (value & WrapModeMask.Loop) {
                this.repeatCount = Infinity;
            } else {
                this.repeatCount = 1;
            }
        });
        js.getset(proto, 'repeatCount', function () {
            return this._repeatCount;
        }, function (value) {
            this._repeatCount = value;
            var shouldWrap = this._wrapMode & WrapModeMask.ShouldWrap;
            var reverse = (this.wrapMode & WrapModeMask.Reverse) === WrapModeMask.Reverse;
            if (value === Infinity && !shouldWrap && !reverse) {
                this._process = simpleProcess;
            } else {
                this._process = process;
            }
        });
        js.getset(proto, 'delay', function () {
            return this._delay;
        }, function (value) {
            this._delayTime = this._delay = value;
        });
        cc.AnimationState = module.exports = AnimationState;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFuaW1hdGlvbi1zdGF0ZS5qcyIsIkM6L1VzZXJzL25hbnRhcy9maXJlYmFsbC14L2ZiXzIxLXJlbGVhc2UvZW5naW5lL2NvY29zMmQvYW5pbWF0aW9uL2FuaW1hdGlvbi1zdGF0ZS5qcyJdLCJuYW1lcyI6WyJqcyIsImNjIiwiUGxheWFibGUiLCJyZXF1aXJlIiwiVHlwZXMiLCJXcmFwcGVkSW5mbyIsIldyYXBNb2RlIiwiV3JhcE1vZGVNYXNrIiwiQW5pbWF0aW9uU3RhdGUiLCJjbGlwIiwibmFtZSIsImNhbGwiLCJfY3VycmVudEZyYW1lUGxheWVkIiwiX2RlbGF5IiwiX2RlbGF5VGltZSIsIl93cmFwcGVkSW5mbyIsIl9sYXN0V3JhcHBlZEluZm8iLCJfcHJvY2VzcyIsInByb2Nlc3MiLCJfY2xpcCIsIl9uYW1lIiwiYW5pbWF0b3IiLCJjdXJ2ZXMiLCJkZWxheSIsInJlcGVhdENvdW50IiwiZHVyYXRpb24iLCJzcGVlZCIsIndyYXBNb2RlIiwiTm9ybWFsIiwidGltZSIsIl90YXJnZXQiLCJfbGFzdGZyYW1lRXZlbnRPbiIsImVtaXQiLCJhcmdzIiwiQXJyYXkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJpIiwibCIsImRpcmVjdG9yIiwiZ2V0QW5pbWF0aW9uTWFuYWdlciIsInB1c2hEZWxheUV2ZW50IiwiZXh0ZW5kIiwicHJvdG8iLCJwcm90b3R5cGUiLCJfZW1pdCIsInR5cGUiLCJzdGF0ZSIsImlzVmFsaWQiLCJvbiIsImNhbGxiYWNrIiwidGFyZ2V0Iiwib25jZSIsInNlbGYiLCJldmVudCIsIm9mZiIsImhhc0V2ZW50TGlzdGVuZXIiLCJfc2V0RXZlbnRUYXJnZXQiLCJvblBsYXkiLCJzZXRUaW1lIiwiYWRkQW5pbWF0aW9uIiwib25TdG9wIiwiaXNQYXVzZWQiLCJyZW1vdmVBbmltYXRpb24iLCJvblJlc3VtZSIsIm9uUGF1c2UiLCJjdXJ2ZSIsIm9uVGltZUNoYW5nZWRNYW51YWxseSIsImluZm8iLCJzYW1wbGUiLCJsYXN0SW5mbyIsIml0ZXJhdGlvbnMiLCJzZXQiLCJzdG9wcGVkIiwic3RvcCIsInNpbXBsZVByb2Nlc3MiLCJyYXRpbyIsImxlbiIsIl9sYXN0SXRlcmF0aW9ucyIsInVuZGVmaW5lZCIsInVwZGF0ZSIsImRlbHRhIiwiX25lZWRSZXZlcnMiLCJjdXJyZW50SXRlcmF0aW9ucyIsIm5lZWRSZXZlcnMiLCJQaW5nUG9uZyIsImlzRW5kIiwiaXNPZGRJdGVyYXRpb24iLCJSZXZlcnNlIiwiZ2V0V3JhcHBlZEluZm8iLCJ0ZW1wUmF0aW8iLCJ0ZW1wVGltZSIsInNob3VsZFdyYXAiLCJfd3JhcE1vZGUiLCJTaG91bGRXcmFwIiwiZGlyZWN0aW9uIiwiZ2V0Iiwib2Jzb2xldGUiLCJnZXRzZXQiLCJ2YWx1ZSIsIkNDX0VESVRPUiIsIkxvb3AiLCJJbmZpbml0eSIsIl9yZXBlYXRDb3VudCIsInJldmVyc2UiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiO0lBQUEsSUFBQSxPQUFBLEdBQUEsT0FBQSxPQUFBLEtBQUEsV0FBQSxJQUFBLE9BQUEsT0FBQSxLQUFBLFdBQUE7Ozs7Ozs7Ozs7Ozs7UUEwQkEsSUFBSUEsRUFBQUEsR0FBS0MsRUFBQUEsQ0FBR0QsRUFBWjtRQUNBLElBQUlFLFFBQUFBLEdBQVdDLE9BQUFBLENBQVEsWUFBUkEsQ0FBZjtRQUVBLElBQUlDLEtBQUFBLEdBQVFELE9BQUFBLENBQVEsU0FBUkEsQ0FBWjtRQUNBLElBQUlFLFdBQUFBLEdBQWNELEtBQUFBLENBQU1DLFdBQXhCO1FBQ0EsSUFBSUMsUUFBQUEsR0FBV0YsS0FBQUEsQ0FBTUUsUUFBckI7UUFDQSxJQUFJQyxZQUFBQSxHQUFlSCxLQUFBQSxDQUFNRyxZQUF6QjtRQW1CQSxTQUFTQyxjQUFULENBQXlCQyxJQUF6QixFQUErQkMsSUFBL0IsRUFBcUM7QUFBQSxZQUNqQ1IsUUFBQUEsQ0FBU1MsSUFBVFQsQ0FBYyxJQUFkQSxFQURpQztBQUFBLFlBS2pDLEtBQUtVLG1CQUFMLEdBQTJCLEtBQTNCLENBTGlDO0FBQUEsWUFPakMsS0FBS0Ms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S0FBVjNDLEVBQWlCLE9BQWpCQSxFQUNJLFlBQVk7QUFBQSxZQUNSLE9BQU8sS0FBS2EsTUFBWixDQURRO0FBQUEsU0FEaEJiLEVBSUksVUFBVW1HLEtBQVYsRUFBaUI7QUFBQSxZQUNiLEtBQUtyRixVQUFMLEdBQWtCLEtBQUtELE1BQUwsR0FBY3NGLEtBQWhDLENBRGE7QUFBQSxTQUpyQm5HO1FBVUFDLEVBQUFBLENBQUdPLGNBQUhQLEdBQW9Cd0csTUFBQUEsQ0FBT0MsT0FBUEQsR0FBaUJqRyxjQUFyQ1AiLCJmaWxlIjoiYW5pbWF0aW9uLXN0YXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcclxuIENvcHlyaWdodCAoYykgMjAxNy0yMDE4IFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLlxyXG5cclxuIGh0dHBzOi8vd3d3LmNvY29zLmNvbS9cclxuXHJcbiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XHJcbiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGVuZ2luZSBzb3VyY2UgY29kZSAodGhlIFwiU29mdHdhcmVcIiksIGEgbGltaXRlZCxcclxuIHdvcmxkd2lkZSwgcm95YWx0eS1mcmVlLCBub24tYXNzaWduYWJsZSwgcmV2b2NhYmxlIGFuZCBub24tZXhjbHVzaXZlIGxpY2Vuc2VcclxuIHRvIHVzZSBDb2NvcyBDcmVhdG9yIHNvbGVseSB0byBkZXZlbG9wIGdhbWVzIG9uIHlvdXIgdGFyZ2V0IHBsYXRmb3Jtcy4gWW91IHNoYWxsXHJcbiBub3QgdXNlIENvY29zIENyZWF0b3Igc29mdHdhcmUgZm9yIGRldmVsb3Bpbmcgb3RoZXIgc29mdHdhcmUgb3IgdG9vbHMgdGhhdCdzXHJcbiB1c2VkIGZvciBkZXZlbG9waW5nIGdhbWVzLiBZb3UgYXJlIG5vdCBncmFudGVkIHRvIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsXHJcbiBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgQ29jb3MgQ3JlYXRvci5cclxuXHJcbiBUaGUgc29mdHdhcmUgb3IgdG9vbHMgaW4gdGhpcyBMaWNlbnNlIEFncmVlbWVudCBhcmUgbGljZW5zZWQsIG5vdCBzb2xkLlxyXG4gWGlhbWVuIFlhamkgU29mdHdhcmUgQ28uLCBMdGQuIHJlc2VydmVzIGFsbCByaWdodHMgbm90IGV4cHJlc3NseSBncmFudGVkIHRvIHlvdS5cclxuXHJcbiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXHJcbiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcclxuIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxyXG4gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxyXG4gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcclxuIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cclxuIFRIRSBTT0ZUV0FSRS5cclxuICoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXHJcblxyXG5cclxudmFyIGpzID0gY2MuanM7XHJcbnZhciBQbGF5YWJsZSA9IHJlcXVpcmUoJy4vcGxheWFibGUnKTtcclxuXHJcbnZhciBUeXBlcyA9IHJlcXVpcmUoJy4vdHlwZXMnKTtcclxudmFyIFdyYXBwZWRJbmZvID0gVHlwZXMuV3JhcHBlZEluZm87XHJcbnZhciBXcmFwTW9kZSA9IFR5cGVzLldyYXBNb2RlO1xyXG52YXIgV3JhcE1vZGVNYXNrID0gVHlwZXMuV3JhcE1vZGVNYXNrO1xyXG5cclxuLyoqXHJcbiAqICEjZW5cclxuICogVGhlIEFuaW1hdGlvblN0YXRlIGdpdmVzIGZ1bGwgY29udHJvbCBvdmVyIGFuaW1hdGlvbiBwbGF5YmFjayBwcm9jZXNzLlxyXG4gKiBJbiBtb3N0IGNhc2VzIHRoZSBBbmltYXRpb24gQ29tcG9uZW50IGlzIHN1ZmZpY2llbnQgYW5kIGVhc2llciB0byB1c2UuIFVzZSB0aGUgQW5pbWF0aW9uU3RhdGUgaWYgeW91IG5lZWQgZnVsbCBjb250cm9sLlxyXG4gKiAhI3poXHJcbiAqIEFuaW1hdGlvblN0YXRlIOWujOWFqOaOp+WItuWKqOeUu+aSreaUvui/h+eoi+OAgjxici8+XHJcbiAqIOWkp+WkmuaVsOaDheWGteS4iyDliqjnlLvnu4Tku7Yg5piv6Laz5aSf5ZKM5piT5LqO5L2/55So55qE44CC5aaC5p6c5oKo6ZyA6KaB5pu05aSa55qE5Yqo55S75o6n5Yi25o6l5Y+j77yM6K+35L2/55SoIEFuaW1hdGlvblN0YXRl44CCXHJcbiAqIEBjbGFzcyBBbmltYXRpb25TdGF0ZVxyXG4gKiBAZXh0ZW5kcyBQbGF5YWJsZVxyXG4gKlxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBAbWV0aG9kIGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7QW5pbWF0aW9uQ2xpcH0gY2xpcFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdXHJcbiAqL1xyXG5mdW5jdGlvbiBBbmltYXRpb25TdGF0ZSAoY2xpcCwgbmFtZSkge1xyXG4gICAgUGxheWFibGUuY2FsbCh0aGlzKTtcclxuICAgIFxyXG4gICAgLy8gTWFyayB3aGV0aGVyIHRoZSBjdXJyZW50IGZyYW1lIGlzIHBsYXllZC5cclxuICAgIC8vIFdoZW4gc2V0IG5ldyB0aW1lIHRvIGFuaW1hdGlvbiBzdGF0ZSwgd2Ugc2hvdWxkIGVuc3VyZSB0aGUgZnJhbWUgYXQgdGhlIHNwZWNpZmllZCB0aW1lIGJlaW5nIHBsYXllZCBhdCBuZXh0IHVwZGF0ZS5cclxuICAgIHRoaXMuX2N1cnJlbnRGcmFtZVBsYXllZCA9IGZhbHNlO1xyXG4gICAgXHJcbiAgICB0aGlzLl9kZWxheSA9IDA7XHJcbiAgICB0aGlzLl9kZWxheVRpbWUgPSAwO1xyXG5cclxuICAgIHRoaXMuX3dyYXBwZWRJbmZvID0gbmV3IFdyYXBwZWRJbmZvKCk7XHJcbiAgICB0aGlzLl9sYXN0V3JhcHBlZEluZm8gPSBudWxsO1xyXG5cclxuICAgIHRoaXMuX3Byb2Nlc3MgPSBwcm9jZXNzO1xyXG5cclxuICAgIHRoaXMuX2NsaXAgPSBjbGlwO1xyXG4gICAgdGhpcy5fbmFtZSA9IG5hbWUgfHwgKGNsaXAgJiYgY2xpcC5uYW1lKTtcclxuXHJcbiAgICAvKipcclxuICAgICAqIEBwcm9wZXJ0eSBhbmltYXRvclxyXG4gICAgICogQHR5cGUge0FuaW1hdGlvbkFuaW1hdG9yfVxyXG4gICAgICovXHJcbiAgICB0aGlzLmFuaW1hdG9yID0gbnVsbDtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gVGhlIGN1cnZlcyBsaXN0LlxyXG4gICAgICogISN6aCDmm7Lnur/liJfooajjgIJcclxuICAgICAqIEBwcm9wZXJ0eSBjdXJ2ZXNcclxuICAgICAqIEB0eXBlIHtPYmplY3RbXX1cclxuICAgICAqL1xyXG4gICAgdGhpcy5jdXJ2ZXMgPSBbXTtcclxuXHJcbiAgICAvLyBodHRwOi8vd3d3LnczLm9yZy9UUi93ZWItYW5pbWF0aW9ucy8jaWRsLWRlZi1BbmltYXRpb25UaW1pbmdcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gVGhlIHN0YXJ0IGRlbGF5IHdoaWNoIHJlcHJlc2VudHMgdGhlIG51bWJlciBvZiBzZWNvbmRzIGZyb20gYW4gYW5pbWF0aW9uJ3Mgc3RhcnQgdGltZSB0byB0aGUgc3RhcnQgb2ZcclxuICAgICAqIHRoZSBhY3RpdmUgaW50ZXJ2YWwuXHJcbiAgICAgKiAhI3poIOW7tui/n+WkmuWwkeenkuaSreaUvuOAglxyXG4gICAgICpcclxuICAgICAqIEBwcm9wZXJ0eSBkZWxheVxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqIEBkZWZhdWx0IDBcclxuICAgICAqL1xyXG4gICAgdGhpcy5kZWxheSA9IDA7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSBhbmltYXRpb24ncyBpdGVyYXRpb24gY291bnQgcHJvcGVydHkuXHJcbiAgICAgKlxyXG4gICAgICogQSByZWFsIG51bWJlciBncmVhdGVyIHRoYW4gb3IgZXF1YWwgdG8gemVybyAoaW5jbHVkaW5nIHBvc2l0aXZlIGluZmluaXR5KSByZXByZXNlbnRpbmcgdGhlIG51bWJlciBvZiB0aW1lc1xyXG4gICAgICogdG8gcmVwZWF0IHRoZSBhbmltYXRpb24gbm9kZS5cclxuICAgICAqXHJcbiAgICAgKiBWYWx1ZXMgbGVzcyB0aGFuIHplcm8gYW5kIE5hTiB2YWx1ZXMgYXJlIHRyZWF0ZWQgYXMgdGhlIHZhbHVlIDEuMCBmb3IgdGhlIHB1cnBvc2Ugb2YgdGltaW5nIG1vZGVsXHJcbiAgICAgKiBjYWxjdWxhdGlvbnMuXHJcbiAgICAgKlxyXG4gICAgICogISN6aCDov63ku6PmrKHmlbDvvIzmjIfliqjnlLvmkq3mlL7lpJrlsJHmrKHlkI7nu5PmnZ8sIG5vcm1hbGl6ZSB0aW1l44CCIOWmgiAyLjXvvIgy5qyh5Y2K77yJXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHJlcGVhdENvdW50XHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICogQGRlZmF1bHQgMVxyXG4gICAgICovXHJcbiAgICB0aGlzLnJlcGVhdENvdW50ID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW4gVGhlIGl0ZXJhdGlvbiBkdXJhdGlvbiBvZiB0aGlzIGFuaW1hdGlvbiBpbiBzZWNvbmRzLiAobGVuZ3RoKVxyXG4gICAgICogISN6aCDljZXmrKHliqjnlLvnmoTmjIHnu63ml7bpl7TvvIznp5LjgIJcclxuICAgICAqXHJcbiAgICAgKiBAcHJvcGVydHkgZHVyYXRpb25cclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKiBAcmVhZE9ubHlcclxuICAgICAqL1xyXG4gICAgdGhpcy5kdXJhdGlvbiA9IDE7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSBhbmltYXRpb24ncyBwbGF5YmFjayBzcGVlZC4gMSBpcyBub3JtYWwgcGxheWJhY2sgc3BlZWQuXHJcbiAgICAgKiAhI3poIOaSreaUvumAn+eOh+OAglxyXG4gICAgICogQHByb3BlcnR5IHNwZWVkXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICogQGRlZmF1bHQ6IDEuMFxyXG4gICAgICovXHJcbiAgICB0aGlzLnNwZWVkID0gMTtcclxuXHJcbiAgICAvKipcclxuICAgICAqICEjZW5cclxuICAgICAqIFdyYXBwaW5nIG1vZGUgb2YgdGhlIHBsYXlpbmcgYW5pbWF0aW9uLlxyXG4gICAgICogTm90aWNlIDogZHluYW1pYyBjaGFuZ2Ugd3JhcE1vZGUgd2lsbCByZXNldCB0aW1lIGFuZCByZXBlYXRDb3VudCBwcm9wZXJ0eVxyXG4gICAgICogISN6aFxyXG4gICAgICog5Yqo55S75b6q546v5pa55byP44CCXHJcbiAgICAgKiDpnIDopoHms6jmhI/nmoTmmK/vvIzliqjmgIHkv67mlLkgd3JhcE1vZGUg5pe277yM5Lya6YeN572uIHRpbWUg5Lul5Y+KIHJlcGVhdENvdW50XHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IHdyYXBNb2RlXHJcbiAgICAgKiBAdHlwZSB7V3JhcE1vZGV9XHJcbiAgICAgKiBAZGVmYXVsdDogV3JhcE1vZGUuTm9ybWFsXHJcbiAgICAgKi9cclxuICAgIHRoaXMud3JhcE1vZGUgPSBXcmFwTW9kZS5Ob3JtYWw7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSBjdXJyZW50IHRpbWUgb2YgdGhpcyBhbmltYXRpb24gaW4gc2Vjb25kcy5cclxuICAgICAqICEjemgg5Yqo55S75b2T5YmN55qE5pe26Ze077yM56eS44CCXHJcbiAgICAgKiBAcHJvcGVydHkgdGltZVxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqIEBkZWZhdWx0IDBcclxuICAgICAqL1xyXG4gICAgdGhpcy50aW1lID0gMDtcclxuXHJcbiAgICAvLyBBbmltYXRpb24gYXMgZXZlbnQgdGFyZ2V0XHJcbiAgICB0aGlzLl90YXJnZXQgPSBudWxsO1xyXG4gICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xyXG4gICAgdGhpcy5lbWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpO1xyXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcclxuICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLnB1c2hEZWxheUV2ZW50KHRoaXMsICdfZW1pdCcsIGFyZ3MpO1xyXG4gICAgfTtcclxufVxyXG5qcy5leHRlbmQoQW5pbWF0aW9uU3RhdGUsIFBsYXlhYmxlKTtcclxuXHJcbnZhciBwcm90byA9IEFuaW1hdGlvblN0YXRlLnByb3RvdHlwZTtcclxuXHJcbnByb3RvLl9lbWl0ID0gZnVuY3Rpb24gKHR5cGUsIHN0YXRlKSB7XHJcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XHJcbiAgICAgICAgdGhpcy5fdGFyZ2V0LmVtaXQodHlwZSwgdHlwZSwgc3RhdGUpO1xyXG4gICAgfVxyXG59O1xyXG5cclxucHJvdG8ub24gPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2ssIHRhcmdldCkge1xyXG4gICAgaWYgKHRoaXMuX3RhcmdldCAmJiB0aGlzLl90YXJnZXQuaXNWYWxpZCkge1xyXG4gICAgICAgIGlmICh0eXBlID09PSAnbGFzdGZyYW1lJykge1xyXG4gICAgICAgICAgICB0aGlzLl9sYXN0ZnJhbWVFdmVudE9uID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldC5vbih0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfVxyXG59O1xyXG5cclxucHJvdG8ub25jZSA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KSB7XHJcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdsYXN0ZnJhbWUnKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2xhc3RmcmFtZUV2ZW50T24gPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldC5vbmNlKHR5cGUsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRhcmdldCwgZXZlbnQpO1xyXG4gICAgICAgICAgICBzZWxmLl9sYXN0ZnJhbWVFdmVudE9uID0gZmFsc2U7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgIH1cclxufTtcclxuXHJcbnByb3RvLm9mZiA9IGZ1bmN0aW9uICh0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KSB7XHJcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XHJcbiAgICAgICAgaWYgKHR5cGUgPT09ICdsYXN0ZnJhbWUnKSB7XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdGFyZ2V0Lmhhc0V2ZW50TGlzdGVuZXIodHlwZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2xhc3RmcmFtZUV2ZW50T24gPSBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl90YXJnZXQub2ZmKHR5cGUsIGNhbGxiYWNrLCB0YXJnZXQpO1xyXG4gICAgfVxyXG59O1xyXG5cclxucHJvdG8uX3NldEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xyXG4gICAgdGhpcy5fdGFyZ2V0ID0gdGFyZ2V0O1xyXG59O1xyXG5cclxucHJvdG8ub25QbGF5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgLy8gcmVwbGF5XHJcbiAgICB0aGlzLnNldFRpbWUoMCk7XHJcbiAgICB0aGlzLl9kZWxheVRpbWUgPSB0aGlzLl9kZWxheTtcclxuICAgIFxyXG4gICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLmFkZEFuaW1hdGlvbih0aGlzKTtcclxuXHJcbiAgICBpZiAodGhpcy5hbmltYXRvcikge1xyXG4gICAgICAgIHRoaXMuYW5pbWF0b3IuYWRkQW5pbWF0aW9uKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLmVtaXQoJ3BsYXknLCB0aGlzKTtcclxufTtcclxuXHJcbnByb3RvLm9uU3RvcCA9IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICghdGhpcy5pc1BhdXNlZCkge1xyXG4gICAgICAgIGNjLmRpcmVjdG9yLmdldEFuaW1hdGlvbk1hbmFnZXIoKS5yZW1vdmVBbmltYXRpb24odGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKHRoaXMuYW5pbWF0b3IpIHtcclxuICAgICAgICB0aGlzLmFuaW1hdG9yLnJlbW92ZUFuaW1hdGlvbih0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmVtaXQoJ3N0b3AnLCB0aGlzKTtcclxufTtcclxuXHJcbnByb3RvLm9uUmVzdW1lID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLmFkZEFuaW1hdGlvbih0aGlzKTtcclxuICAgIHRoaXMuZW1pdCgncmVzdW1lJywgdGhpcyk7XHJcbn07XHJcblxyXG5wcm90by5vblBhdXNlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLnJlbW92ZUFuaW1hdGlvbih0aGlzKTtcclxuICAgIHRoaXMuZW1pdCgncGF1c2UnLCB0aGlzKTtcclxufTtcclxuXHJcbnByb3RvLnNldFRpbWUgPSBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgdGhpcy5fY3VycmVudEZyYW1lUGxheWVkID0gZmFsc2U7XHJcbiAgICB0aGlzLnRpbWUgPSB0aW1lIHx8IDA7XHJcblxyXG4gICAgdmFyIGN1cnZlcyA9IHRoaXMuY3VydmVzO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjdXJ2ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgdmFyIGN1cnZlID0gY3VydmVzW2ldO1xyXG4gICAgICAgIGlmIChjdXJ2ZS5vblRpbWVDaGFuZ2VkTWFudWFsbHkpIHtcclxuICAgICAgICAgICAgY3VydmUub25UaW1lQ2hhbmdlZE1hbnVhbGx5KHRpbWUsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIHByb2Nlc3MgKCkge1xyXG4gICAgLy8gc2FtcGxlXHJcbiAgICB2YXIgaW5mbyA9IHRoaXMuc2FtcGxlKCk7XHJcblxyXG4gICAgaWYgKHRoaXMuX2xhc3RmcmFtZUV2ZW50T24pIHtcclxuICAgICAgICB2YXIgbGFzdEluZm87XHJcbiAgICAgICAgaWYgKCF0aGlzLl9sYXN0V3JhcHBlZEluZm8pIHtcclxuICAgICAgICAgICAgbGFzdEluZm8gPSB0aGlzLl9sYXN0V3JhcHBlZEluZm8gPSBuZXcgV3JhcHBlZEluZm8oaW5mbyk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbGFzdEluZm8gPSB0aGlzLl9sYXN0V3JhcHBlZEluZm87XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5yZXBlYXRDb3VudCA+IDEgJiYgKChpbmZvLml0ZXJhdGlvbnMgfCAwKSA+IChsYXN0SW5mby5pdGVyYXRpb25zIHwgMCkpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZW1pdCgnbGFzdGZyYW1lJywgdGhpcyk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBsYXN0SW5mby5zZXQoaW5mbyk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGluZm8uc3RvcHBlZCkge1xyXG4gICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuZW1pdCgnZmluaXNoZWQnLCB0aGlzKTtcclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gc2ltcGxlUHJvY2VzcyAoKSB7XHJcbiAgICB2YXIgdGltZSA9IHRoaXMudGltZTtcclxuICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XHJcblxyXG4gICAgaWYgKHRpbWUgPiBkdXJhdGlvbikge1xyXG4gICAgICAgIHRpbWUgPSB0aW1lICUgZHVyYXRpb247XHJcbiAgICAgICAgaWYgKHRpbWUgPT09IDApIHRpbWUgPSBkdXJhdGlvbjtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHRpbWUgPCAwKSB7XHJcbiAgICAgICAgdGltZSA9IHRpbWUgJSBkdXJhdGlvbjtcclxuICAgICAgICBpZiAodGltZSAhPT0gMCkgdGltZSArPSBkdXJhdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgcmF0aW8gPSB0aW1lIC8gZHVyYXRpb247XHJcblxyXG4gICAgdmFyIGN1cnZlcyA9IHRoaXMuY3VydmVzO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcclxuICAgICAgICBjdXJ2ZS5zYW1wbGUodGltZSwgcmF0aW8sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICh0aGlzLl9sYXN0ZnJhbWVFdmVudE9uKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2xhc3RJdGVyYXRpb25zID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPSByYXRpbztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICgodGhpcy50aW1lID4gMCAmJiB0aGlzLl9sYXN0SXRlcmF0aW9ucyA+IHJhdGlvKSB8fCAodGhpcy50aW1lIDwgMCAmJiB0aGlzLl9sYXN0SXRlcmF0aW9ucyA8IHJhdGlvKSkge1xyXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2xhc3RmcmFtZScsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPSByYXRpbztcclxuICAgIH1cclxufVxyXG5cclxucHJvdG8udXBkYXRlID0gZnVuY3Rpb24gKGRlbHRhKSB7XHJcbiAgICAvLyBjYWxjdWxhdGUgZGVsYXkgdGltZVxyXG5cclxuICAgIGlmICh0aGlzLl9kZWxheVRpbWUgPiAwKSB7XHJcbiAgICAgICAgdGhpcy5fZGVsYXlUaW1lIC09IGRlbHRhO1xyXG4gICAgICAgIGlmICh0aGlzLl9kZWxheVRpbWUgPiAwKSB7XHJcbiAgICAgICAgICAgIC8vIHN0aWxsIHdhaXRpbmdcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBtYWtlIGZpcnN0IGZyYW1lIHBlcmZlY3RcclxuXHJcbiAgICAvL3ZhciBwbGF5UGVyZmVjdEZpcnN0RnJhbWUgPSAodGhpcy50aW1lID09PSAwKTtcclxuICAgIGlmICh0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQpIHtcclxuICAgICAgICB0aGlzLnRpbWUgKz0gKGRlbHRhICogdGhpcy5zcGVlZCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuX3Byb2Nlc3MoKTtcclxufTtcclxuXHJcbnByb3RvLl9uZWVkUmV2ZXJzID0gZnVuY3Rpb24gKGN1cnJlbnRJdGVyYXRpb25zKSB7XHJcbiAgICB2YXIgd3JhcE1vZGUgPSB0aGlzLndyYXBNb2RlO1xyXG4gICAgdmFyIG5lZWRSZXZlcnMgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoKHdyYXBNb2RlICYgV3JhcE1vZGVNYXNrLlBpbmdQb25nKSA9PT0gV3JhcE1vZGVNYXNrLlBpbmdQb25nKSB7XHJcbiAgICAgICAgdmFyIGlzRW5kID0gY3VycmVudEl0ZXJhdGlvbnMgLSAoY3VycmVudEl0ZXJhdGlvbnMgfCAwKSA9PT0gMDtcclxuICAgICAgICBpZiAoaXNFbmQgJiYgKGN1cnJlbnRJdGVyYXRpb25zID4gMCkpIHtcclxuICAgICAgICAgICAgY3VycmVudEl0ZXJhdGlvbnMgLT0gMTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHZhciBpc09kZEl0ZXJhdGlvbiA9IGN1cnJlbnRJdGVyYXRpb25zICYgMTtcclxuICAgICAgICBpZiAoaXNPZGRJdGVyYXRpb24pIHtcclxuICAgICAgICAgICAgbmVlZFJldmVycyA9ICFuZWVkUmV2ZXJzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICgod3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suUmV2ZXJzZSkgPT09IFdyYXBNb2RlTWFzay5SZXZlcnNlKSB7XHJcbiAgICAgICAgbmVlZFJldmVycyA9ICFuZWVkUmV2ZXJzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5lZWRSZXZlcnM7XHJcbn07XHJcblxyXG5wcm90by5nZXRXcmFwcGVkSW5mbyA9IGZ1bmN0aW9uICh0aW1lLCBpbmZvKSB7XHJcbiAgICBpbmZvID0gaW5mbyB8fCBuZXcgV3JhcHBlZEluZm8oKTtcclxuICAgIFxyXG4gICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcclxuICAgIHZhciBkdXJhdGlvbiA9IHRoaXMuZHVyYXRpb247XHJcbiAgICB2YXIgcmVwZWF0Q291bnQgPSB0aGlzLnJlcGVhdENvdW50O1xyXG5cclxuICAgIHZhciBjdXJyZW50SXRlcmF0aW9ucyA9IHRpbWUgPiAwID8gKHRpbWUgLyBkdXJhdGlvbikgOiAtKHRpbWUgLyBkdXJhdGlvbik7XHJcbiAgICBpZiAoY3VycmVudEl0ZXJhdGlvbnMgPj0gcmVwZWF0Q291bnQpIHtcclxuICAgICAgICBjdXJyZW50SXRlcmF0aW9ucyA9IHJlcGVhdENvdW50O1xyXG5cclxuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcclxuICAgICAgICB2YXIgdGVtcFJhdGlvID0gcmVwZWF0Q291bnQgLSAocmVwZWF0Q291bnQgfCAwKTtcclxuICAgICAgICBpZiAodGVtcFJhdGlvID09PSAwKSB7XHJcbiAgICAgICAgICAgIHRlbXBSYXRpbyA9IDE7ICAvLyDlpoLmnpzmkq3mlL7ov4fvvIzliqjnlLvkuI3lpI3kvY1cclxuICAgICAgICB9XHJcbiAgICAgICAgdGltZSA9IHRlbXBSYXRpbyAqIGR1cmF0aW9uICogKHRpbWUgPiAwID8gMSA6IC0xKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGltZSA+IGR1cmF0aW9uKSB7XHJcbiAgICAgICAgdmFyIHRlbXBUaW1lID0gdGltZSAlIGR1cmF0aW9uO1xyXG4gICAgICAgIHRpbWUgPSB0ZW1wVGltZSA9PT0gMCA/IGR1cmF0aW9uIDogdGVtcFRpbWU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0aW1lIDwgMCkge1xyXG4gICAgICAgIHRpbWUgPSB0aW1lICUgZHVyYXRpb247XHJcbiAgICAgICAgaWYgKHRpbWUgIT09IDAgKSB0aW1lICs9IGR1cmF0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHZhciBuZWVkUmV2ZXJzID0gZmFsc2U7XHJcbiAgICB2YXIgc2hvdWxkV3JhcCA9IHRoaXMuX3dyYXBNb2RlICYgV3JhcE1vZGVNYXNrLlNob3VsZFdyYXA7XHJcbiAgICBpZiAoc2hvdWxkV3JhcCkge1xyXG4gICAgICAgIG5lZWRSZXZlcnMgPSB0aGlzLl9uZWVkUmV2ZXJzKGN1cnJlbnRJdGVyYXRpb25zKTtcclxuICAgIH1cclxuXHJcbiAgICB2YXIgZGlyZWN0aW9uID0gbmVlZFJldmVycyA/IC0xIDogMTtcclxuICAgIGlmICh0aGlzLnNwZWVkIDwgMCkge1xyXG4gICAgICAgIGRpcmVjdGlvbiAqPSAtMTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBjYWxjdWxhdGUgd3JhcHBlZCB0aW1lXHJcbiAgICBpZiAoc2hvdWxkV3JhcCAmJiBuZWVkUmV2ZXJzKSB7XHJcbiAgICAgICAgdGltZSA9IGR1cmF0aW9uIC0gdGltZTtcclxuICAgIH1cclxuXHJcbiAgICBpbmZvLnJhdGlvID0gdGltZSAvIGR1cmF0aW9uO1xyXG4gICAgaW5mby50aW1lID0gdGltZTtcclxuICAgIGluZm8uZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG4gICAgaW5mby5zdG9wcGVkID0gc3RvcHBlZDtcclxuICAgIGluZm8uaXRlcmF0aW9ucyA9IGN1cnJlbnRJdGVyYXRpb25zO1xyXG5cclxuICAgIHJldHVybiBpbmZvO1xyXG59O1xyXG5cclxucHJvdG8uc2FtcGxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgdmFyIGluZm8gPSB0aGlzLmdldFdyYXBwZWRJbmZvKHRoaXMudGltZSwgdGhpcy5fd3JhcHBlZEluZm8pO1xyXG4gICAgdmFyIGN1cnZlcyA9IHRoaXMuY3VydmVzO1xyXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGN1cnZlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xyXG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcclxuICAgICAgICBjdXJ2ZS5zYW1wbGUoaW5mby50aW1lLCBpbmZvLnJhdGlvLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gaW5mbztcclxufTtcclxuXHJcblxyXG4vKipcclxuICogISNlbiBUaGUgY2xpcCB0aGF0IGlzIGJlaW5nIHBsYXllZCBieSB0aGlzIGFuaW1hdGlvbiBzdGF0ZS5cclxuICogISN6aCDmraTliqjnlLvnirbmgIHmraPlnKjmkq3mlL7nmoTliarovpHjgIJcclxuICogQHByb3BlcnR5IGNsaXBcclxuICogQHR5cGUge0FuaW1hdGlvbkNsaXB9XHJcbiAqIEBmaW5hbFxyXG4gKi9cclxuanMuZ2V0KHByb3RvLCAnY2xpcCcsIGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jbGlwO1xyXG59KTtcclxuXHJcbi8qKlxyXG4gKiAhI2VuIFRoZSBuYW1lIG9mIHRoZSBwbGF5aW5nIGFuaW1hdGlvbi5cclxuICogISN6aCDliqjnlLvnmoTlkI3lrZdcclxuICogQHByb3BlcnR5IG5hbWVcclxuICogQHR5cGUge1N0cmluZ31cclxuICogQHJlYWRPbmx5XHJcbiAqL1xyXG5qcy5nZXQocHJvdG8sICduYW1lJywgZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XHJcbn0pO1xyXG5cclxuanMub2Jzb2xldGUocHJvdG8sICdBbmltYXRpb25TdGF0ZS5sZW5ndGgnLCAnZHVyYXRpb24nKTtcclxuXHJcbmpzLmdldHNldChwcm90bywgJ2N1cnZlTG9hZGVkJyxcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5jdXJ2ZXMubGVuZ3RoID4gMDtcclxuICAgIH0sXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5jdXJ2ZXMubGVuZ3RoID0gMDtcclxuICAgIH1cclxuKTtcclxuXHJcblxyXG5qcy5nZXRzZXQocHJvdG8sICd3cmFwTW9kZScsXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dyYXBNb2RlO1xyXG4gICAgfSxcclxuICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX3dyYXBNb2RlID0gdmFsdWU7XHJcblxyXG4gICAgICAgIGlmIChDQ19FRElUT1IpIHJldHVybjtcclxuXHJcbiAgICAgICAgLy8gZHluYW1pYyBjaGFuZ2Ugd3JhcE1vZGUgd2lsbCBuZWVkIHJlc2V0IHRpbWUgdG8gMFxyXG4gICAgICAgIHRoaXMudGltZSA9IDA7XHJcblxyXG4gICAgICAgIGlmICh2YWx1ZSAmIFdyYXBNb2RlTWFzay5Mb29wKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVwZWF0Q291bnQgPSBJbmZpbml0eTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVwZWF0Q291bnQgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgIH1cclxuKTtcclxuXHJcbmpzLmdldHNldChwcm90bywgJ3JlcGVhdENvdW50JyxcclxuICAgIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fcmVwZWF0Q291bnQ7XHJcbiAgICB9LFxyXG4gICAgZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5fcmVwZWF0Q291bnQgPSB2YWx1ZTtcclxuICAgICAgICBcclxuICAgICAgICB2YXIgc2hvdWxkV3JhcCA9IHRoaXMuX3dyYXBNb2RlICYgV3JhcE1vZGVNYXNrLlNob3VsZFdyYXA7XHJcbiAgICAgICAgdmFyIHJldmVyc2UgPSAodGhpcy53cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5SZXZlcnNlKSA9PT0gV3JhcE1vZGVNYXNrLlJldmVyc2U7XHJcbiAgICAgICAgaWYgKHZhbHVlID09PSBJbmZpbml0eSAmJiAhc2hvdWxkV3JhcCAmJiAhcmV2ZXJzZSkge1xyXG4gICAgICAgICAgICB0aGlzLl9wcm9jZXNzID0gc2ltcGxlUHJvY2VzcztcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3Byb2Nlc3MgPSBwcm9jZXNzO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuKTtcclxuXHJcbmpzLmdldHNldChwcm90bywgJ2RlbGF5JywgXHJcbiAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RlbGF5O1xyXG4gICAgfSxcclxuICAgIGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2RlbGF5VGltZSA9IHRoaXMuX2RlbGF5ID0gdmFsdWU7XHJcbiAgICB9XHJcbik7XHJcblxyXG5cclxuY2MuQW5pbWF0aW9uU3RhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGlvblN0YXRlO1xyXG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqXHJcbiBDb3B5cmlnaHQgKGMpIDIwMTctMjAxOCBYaWFtZW4gWWFqaSBTb2Z0d2FyZSBDby4sIEx0ZC5cclxuXHJcbiBodHRwczovL3d3dy5jb2Nvcy5jb20vXHJcblxyXG4gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxyXG4gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBlbmdpbmUgc291cmNlIGNvZGUgKHRoZSBcIlNvZnR3YXJlXCIpLCBhIGxpbWl0ZWQsXHJcbiB3b3JsZHdpZGUsIHJveWFsdHktZnJlZSwgbm9uLWFzc2lnbmFibGUsIHJldm9jYWJsZSBhbmQgbm9uLWV4Y2x1c2l2ZSBsaWNlbnNlXHJcbiB0byB1c2UgQ29jb3MgQ3JlYXRvciBzb2xlbHkgdG8gZGV2ZWxvcCBnYW1lcyBvbiB5b3VyIHRhcmdldCBwbGF0Zm9ybXMuIFlvdSBzaGFsbFxyXG4gbm90IHVzZSBDb2NvcyBDcmVhdG9yIHNvZnR3YXJlIGZvciBkZXZlbG9waW5nIG90aGVyIHNvZnR3YXJlIG9yIHRvb2xzIHRoYXQnc1xyXG4gdXNlZCBmb3IgZGV2ZWxvcGluZyBnYW1lcy4gWW91IGFyZSBub3QgZ3JhbnRlZCB0byBwdWJsaXNoLCBkaXN0cmlidXRlLFxyXG4gc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIENvY29zIENyZWF0b3IuXHJcblxyXG4gVGhlIHNvZnR3YXJlIG9yIHRvb2xzIGluIHRoaXMgTGljZW5zZSBBZ3JlZW1lbnQgYXJlIGxpY2Vuc2VkLCBub3Qgc29sZC5cclxuIFhpYW1lbiBZYWppIFNvZnR3YXJlIENvLiwgTHRkLiByZXNlcnZlcyBhbGwgcmlnaHRzIG5vdCBleHByZXNzbHkgZ3JhbnRlZCB0byB5b3UuXHJcblxyXG4gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxyXG4gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXHJcbiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcclxuIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcclxuIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXHJcbiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXHJcbiBUSEUgU09GVFdBUkUuXHJcbiAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG52YXIganMgPSBjYy5qcztcbnZhciBQbGF5YWJsZSA9IHJlcXVpcmUoJy4vcGxheWFibGUnKTtcblxudmFyIFR5cGVzID0gcmVxdWlyZSgnLi90eXBlcycpO1xudmFyIFdyYXBwZWRJbmZvID0gVHlwZXMuV3JhcHBlZEluZm87XG52YXIgV3JhcE1vZGUgPSBUeXBlcy5XcmFwTW9kZTtcbnZhciBXcmFwTW9kZU1hc2sgPSBUeXBlcy5XcmFwTW9kZU1hc2s7XG5cbi8qKlxyXG4gKiAhI2VuXHJcbiAqIFRoZSBBbmltYXRpb25TdGF0ZSBnaXZlcyBmdWxsIGNvbnRyb2wgb3ZlciBhbmltYXRpb24gcGxheWJhY2sgcHJvY2Vzcy5cclxuICogSW4gbW9zdCBjYXNlcyB0aGUgQW5pbWF0aW9uIENvbXBvbmVudCBpcyBzdWZmaWNpZW50IGFuZCBlYXNpZXIgdG8gdXNlLiBVc2UgdGhlIEFuaW1hdGlvblN0YXRlIGlmIHlvdSBuZWVkIGZ1bGwgY29udHJvbC5cclxuICogISN6aFxyXG4gKiBBbmltYXRpb25TdGF0ZSDlrozlhajmjqfliLbliqjnlLvmkq3mlL7ov4fnqIvjgII8YnIvPlxyXG4gKiDlpKflpJrmlbDmg4XlhrXkuIsg5Yqo55S757uE5Lu2IOaYr+i2s+Wkn+WSjOaYk+S6juS9v+eUqOeahOOAguWmguaenOaCqOmcgOimgeabtOWkmueahOWKqOeUu+aOp+WItuaOpeWPo++8jOivt+S9v+eUqCBBbmltYXRpb25TdGF0ZeOAglxyXG4gKiBAY2xhc3MgQW5pbWF0aW9uU3RhdGVcclxuICogQGV4dGVuZHMgUGxheWFibGVcclxuICpcclxuICovXG5cbi8qKlxyXG4gKiBAbWV0aG9kIGNvbnN0cnVjdG9yXHJcbiAqIEBwYXJhbSB7QW5pbWF0aW9uQ2xpcH0gY2xpcFxyXG4gKiBAcGFyYW0ge1N0cmluZ30gW25hbWVdXHJcbiAqL1xuZnVuY3Rpb24gQW5pbWF0aW9uU3RhdGUoY2xpcCwgbmFtZSkge1xuICAgIFBsYXlhYmxlLmNhbGwodGhpcyk7XG5cbiAgICAvLyBNYXJrIHdoZXRoZXIgdGhlIGN1cnJlbnQgZnJhbWUgaXMgcGxheWVkLlxuICAgIC8vIFdoZW4gc2V0IG5ldyB0aW1lIHRvIGFuaW1hdGlvbiBzdGF0ZSwgd2Ugc2hvdWxkIGVuc3VyZSB0aGUgZnJhbWUgYXQgdGhlIHNwZWNpZmllZCB0aW1lIGJlaW5nIHBsYXllZCBhdCBuZXh0IHVwZGF0ZS5cbiAgICB0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2RlbGF5ID0gMDtcbiAgICB0aGlzLl9kZWxheVRpbWUgPSAwO1xuXG4gICAgdGhpcy5fd3JhcHBlZEluZm8gPSBuZXcgV3JhcHBlZEluZm8oKTtcbiAgICB0aGlzLl9sYXN0V3JhcHBlZEluZm8gPSBudWxsO1xuXG4gICAgdGhpcy5fcHJvY2VzcyA9IHByb2Nlc3M7XG5cbiAgICB0aGlzLl9jbGlwID0gY2xpcDtcbiAgICB0aGlzLl9uYW1lID0gbmFtZSB8fCBjbGlwICYmIGNsaXAubmFtZTtcblxuICAgIC8qKlxyXG4gICAgICogQHByb3BlcnR5IGFuaW1hdG9yXHJcbiAgICAgKiBAdHlwZSB7QW5pbWF0aW9uQW5pbWF0b3J9XHJcbiAgICAgKi9cbiAgICB0aGlzLmFuaW1hdG9yID0gbnVsbDtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUaGUgY3VydmVzIGxpc3QuXHJcbiAgICAgKiAhI3poIOabsue6v+WIl+ihqOOAglxyXG4gICAgICogQHByb3BlcnR5IGN1cnZlc1xyXG4gICAgICogQHR5cGUge09iamVjdFtdfVxyXG4gICAgICovXG4gICAgdGhpcy5jdXJ2ZXMgPSBbXTtcblxuICAgIC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3dlYi1hbmltYXRpb25zLyNpZGwtZGVmLUFuaW1hdGlvblRpbWluZ1xuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSBzdGFydCBkZWxheSB3aGljaCByZXByZXNlbnRzIHRoZSBudW1iZXIgb2Ygc2Vjb25kcyBmcm9tIGFuIGFuaW1hdGlvbidzIHN0YXJ0IHRpbWUgdG8gdGhlIHN0YXJ0IG9mXHJcbiAgICAgKiB0aGUgYWN0aXZlIGludGVydmFsLlxyXG4gICAgICogISN6aCDlu7bov5/lpJrlsJHnp5Lmkq3mlL7jgIJcclxuICAgICAqXHJcbiAgICAgKiBAcHJvcGVydHkgZGVsYXlcclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKiBAZGVmYXVsdCAwXHJcbiAgICAgKi9cbiAgICB0aGlzLmRlbGF5ID0gMDtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUaGUgYW5pbWF0aW9uJ3MgaXRlcmF0aW9uIGNvdW50IHByb3BlcnR5LlxyXG4gICAgICpcclxuICAgICAqIEEgcmVhbCBudW1iZXIgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvIHplcm8gKGluY2x1ZGluZyBwb3NpdGl2ZSBpbmZpbml0eSkgcmVwcmVzZW50aW5nIHRoZSBudW1iZXIgb2YgdGltZXNcclxuICAgICAqIHRvIHJlcGVhdCB0aGUgYW5pbWF0aW9uIG5vZGUuXHJcbiAgICAgKlxyXG4gICAgICogVmFsdWVzIGxlc3MgdGhhbiB6ZXJvIGFuZCBOYU4gdmFsdWVzIGFyZSB0cmVhdGVkIGFzIHRoZSB2YWx1ZSAxLjAgZm9yIHRoZSBwdXJwb3NlIG9mIHRpbWluZyBtb2RlbFxyXG4gICAgICogY2FsY3VsYXRpb25zLlxyXG4gICAgICpcclxuICAgICAqICEjemgg6L+t5Luj5qyh5pWw77yM5oyH5Yqo55S75pKt5pS+5aSa5bCR5qyh5ZCO57uT5p2fLCBub3JtYWxpemUgdGltZeOAgiDlpoIgMi4177yIMuasoeWNiu+8iVxyXG4gICAgICpcclxuICAgICAqIEBwcm9wZXJ0eSByZXBlYXRDb3VudFxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqIEBkZWZhdWx0IDFcclxuICAgICAqL1xuICAgIHRoaXMucmVwZWF0Q291bnQgPSAxO1xuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuIFRoZSBpdGVyYXRpb24gZHVyYXRpb24gb2YgdGhpcyBhbmltYXRpb24gaW4gc2Vjb25kcy4gKGxlbmd0aClcclxuICAgICAqICEjemgg5Y2V5qyh5Yqo55S755qE5oyB57ut5pe26Ze077yM56eS44CCXHJcbiAgICAgKlxyXG4gICAgICogQHByb3BlcnR5IGR1cmF0aW9uXHJcbiAgICAgKiBAdHlwZSB7TnVtYmVyfVxyXG4gICAgICogQHJlYWRPbmx5XHJcbiAgICAgKi9cbiAgICB0aGlzLmR1cmF0aW9uID0gMTtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUaGUgYW5pbWF0aW9uJ3MgcGxheWJhY2sgc3BlZWQuIDEgaXMgbm9ybWFsIHBsYXliYWNrIHNwZWVkLlxyXG4gICAgICogISN6aCDmkq3mlL7pgJ/njofjgIJcclxuICAgICAqIEBwcm9wZXJ0eSBzcGVlZFxyXG4gICAgICogQHR5cGUge051bWJlcn1cclxuICAgICAqIEBkZWZhdWx0OiAxLjBcclxuICAgICAqL1xuICAgIHRoaXMuc3BlZWQgPSAxO1xuXG4gICAgLyoqXHJcbiAgICAgKiAhI2VuXHJcbiAgICAgKiBXcmFwcGluZyBtb2RlIG9mIHRoZSBwbGF5aW5nIGFuaW1hdGlvbi5cclxuICAgICAqIE5vdGljZSA6IGR5bmFtaWMgY2hhbmdlIHdyYXBNb2RlIHdpbGwgcmVzZXQgdGltZSBhbmQgcmVwZWF0Q291bnQgcHJvcGVydHlcclxuICAgICAqICEjemhcclxuICAgICAqIOWKqOeUu+W+queOr+aWueW8j+OAglxyXG4gICAgICog6ZyA6KaB5rOo5oSP55qE5piv77yM5Yqo5oCB5L+u5pS5IHdyYXBNb2RlIOaXtu+8jOS8mumHjee9riB0aW1lIOS7peWPiiByZXBlYXRDb3VudFxyXG4gICAgICpcclxuICAgICAqIEBwcm9wZXJ0eSB3cmFwTW9kZVxyXG4gICAgICogQHR5cGUge1dyYXBNb2RlfVxyXG4gICAgICogQGRlZmF1bHQ6IFdyYXBNb2RlLk5vcm1hbFxyXG4gICAgICovXG4gICAgdGhpcy53cmFwTW9kZSA9IFdyYXBNb2RlLk5vcm1hbDtcblxuICAgIC8qKlxyXG4gICAgICogISNlbiBUaGUgY3VycmVudCB0aW1lIG9mIHRoaXMgYW5pbWF0aW9uIGluIHNlY29uZHMuXHJcbiAgICAgKiAhI3poIOWKqOeUu+W9k+WJjeeahOaXtumXtO+8jOenkuOAglxyXG4gICAgICogQHByb3BlcnR5IHRpbWVcclxuICAgICAqIEB0eXBlIHtOdW1iZXJ9XHJcbiAgICAgKiBAZGVmYXVsdCAwXHJcbiAgICAgKi9cbiAgICB0aGlzLnRpbWUgPSAwO1xuXG4gICAgLy8gQW5pbWF0aW9uIGFzIGV2ZW50IHRhcmdldFxuICAgIHRoaXMuX3RhcmdldCA9IG51bGw7XG4gICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gYXJncy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaV0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIH1cbiAgICAgICAgY2MuZGlyZWN0b3IuZ2V0QW5pbWF0aW9uTWFuYWdlcigpLnB1c2hEZWxheUV2ZW50KHRoaXMsICdfZW1pdCcsIGFyZ3MpO1xuICAgIH07XG59XG5qcy5leHRlbmQoQW5pbWF0aW9uU3RhdGUsIFBsYXlhYmxlKTtcblxudmFyIHByb3RvID0gQW5pbWF0aW9uU3RhdGUucHJvdG90eXBlO1xuXG5wcm90by5fZW1pdCA9IGZ1bmN0aW9uICh0eXBlLCBzdGF0ZSkge1xuICAgIGlmICh0aGlzLl90YXJnZXQgJiYgdGhpcy5fdGFyZ2V0LmlzVmFsaWQpIHtcbiAgICAgICAgdGhpcy5fdGFyZ2V0LmVtaXQodHlwZSwgdHlwZSwgc3RhdGUpO1xuICAgIH1cbn07XG5cbnByb3RvLm9uID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrLCB0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbGFzdGZyYW1lJykge1xuICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuX3RhcmdldC5vbih0eXBlLCBjYWxsYmFjaywgdGFyZ2V0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5wcm90by5vbmNlID0gZnVuY3Rpb24gKHR5cGUsIGNhbGxiYWNrLCB0YXJnZXQpIHtcbiAgICBpZiAodGhpcy5fdGFyZ2V0ICYmIHRoaXMuX3RhcmdldC5pc1ZhbGlkKSB7XG4gICAgICAgIGlmICh0eXBlID09PSAnbGFzdGZyYW1lJykge1xuICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICByZXR1cm4gdGhpcy5fdGFyZ2V0Lm9uY2UodHlwZSwgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICBjYWxsYmFjay5jYWxsKHRhcmdldCwgZXZlbnQpO1xuICAgICAgICAgICAgc2VsZi5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59O1xuXG5wcm90by5vZmYgPSBmdW5jdGlvbiAodHlwZSwgY2FsbGJhY2ssIHRhcmdldCkge1xuICAgIGlmICh0aGlzLl90YXJnZXQgJiYgdGhpcy5fdGFyZ2V0LmlzVmFsaWQpIHtcbiAgICAgICAgaWYgKHR5cGUgPT09ICdsYXN0ZnJhbWUnKSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuX3RhcmdldC5oYXNFdmVudExpc3RlbmVyKHR5cGUpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGFzdGZyYW1lRXZlbnRPbiA9IGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RhcmdldC5vZmYodHlwZSwgY2FsbGJhY2ssIHRhcmdldCk7XG4gICAgfVxufTtcblxucHJvdG8uX3NldEV2ZW50VGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIHRoaXMuX3RhcmdldCA9IHRhcmdldDtcbn07XG5cbnByb3RvLm9uUGxheSA9IGZ1bmN0aW9uICgpIHtcbiAgICAvLyByZXBsYXlcbiAgICB0aGlzLnNldFRpbWUoMCk7XG4gICAgdGhpcy5fZGVsYXlUaW1lID0gdGhpcy5fZGVsYXk7XG5cbiAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkuYWRkQW5pbWF0aW9uKHRoaXMpO1xuXG4gICAgaWYgKHRoaXMuYW5pbWF0b3IpIHtcbiAgICAgICAgdGhpcy5hbmltYXRvci5hZGRBbmltYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KCdwbGF5JywgdGhpcyk7XG59O1xuXG5wcm90by5vblN0b3AgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzUGF1c2VkKSB7XG4gICAgICAgIGNjLmRpcmVjdG9yLmdldEFuaW1hdGlvbk1hbmFnZXIoKS5yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuYW5pbWF0b3IpIHtcbiAgICAgICAgdGhpcy5hbmltYXRvci5yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgfVxuXG4gICAgdGhpcy5lbWl0KCdzdG9wJywgdGhpcyk7XG59O1xuXG5wcm90by5vblJlc3VtZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBjYy5kaXJlY3Rvci5nZXRBbmltYXRpb25NYW5hZ2VyKCkuYWRkQW5pbWF0aW9uKHRoaXMpO1xuICAgIHRoaXMuZW1pdCgncmVzdW1lJywgdGhpcyk7XG59O1xuXG5wcm90by5vblBhdXNlID0gZnVuY3Rpb24gKCkge1xuICAgIGNjLmRpcmVjdG9yLmdldEFuaW1hdGlvbk1hbmFnZXIoKS5yZW1vdmVBbmltYXRpb24odGhpcyk7XG4gICAgdGhpcy5lbWl0KCdwYXVzZScsIHRoaXMpO1xufTtcblxucHJvdG8uc2V0VGltZSA9IGZ1bmN0aW9uICh0aW1lKSB7XG4gICAgdGhpcy5fY3VycmVudEZyYW1lUGxheWVkID0gZmFsc2U7XG4gICAgdGhpcy50aW1lID0gdGltZSB8fCAwO1xuXG4gICAgdmFyIGN1cnZlcyA9IHRoaXMuY3VydmVzO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gY3VydmVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgY3VydmUgPSBjdXJ2ZXNbaV07XG4gICAgICAgIGlmIChjdXJ2ZS5vblRpbWVDaGFuZ2VkTWFudWFsbHkpIHtcbiAgICAgICAgICAgIGN1cnZlLm9uVGltZUNoYW5nZWRNYW51YWxseSh0aW1lLCB0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHByb2Nlc3MoKSB7XG4gICAgLy8gc2FtcGxlXG4gICAgdmFyIGluZm8gPSB0aGlzLnNhbXBsZSgpO1xuXG4gICAgaWYgKHRoaXMuX2xhc3RmcmFtZUV2ZW50T24pIHtcbiAgICAgICAgdmFyIGxhc3RJbmZvO1xuICAgICAgICBpZiAoIXRoaXMuX2xhc3RXcmFwcGVkSW5mbykge1xuICAgICAgICAgICAgbGFzdEluZm8gPSB0aGlzLl9sYXN0V3JhcHBlZEluZm8gPSBuZXcgV3JhcHBlZEluZm8oaW5mbyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsYXN0SW5mbyA9IHRoaXMuX2xhc3RXcmFwcGVkSW5mbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnJlcGVhdENvdW50ID4gMSAmJiAoaW5mby5pdGVyYXRpb25zIHwgMCkgPiAobGFzdEluZm8uaXRlcmF0aW9ucyB8IDApKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2xhc3RmcmFtZScsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgbGFzdEluZm8uc2V0KGluZm8pO1xuICAgIH1cblxuICAgIGlmIChpbmZvLnN0b3BwZWQpIHtcbiAgICAgICAgdGhpcy5zdG9wKCk7XG4gICAgICAgIHRoaXMuZW1pdCgnZmluaXNoZWQnLCB0aGlzKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHNpbXBsZVByb2Nlc3MoKSB7XG4gICAgdmFyIHRpbWUgPSB0aGlzLnRpbWU7XG4gICAgdmFyIGR1cmF0aW9uID0gdGhpcy5kdXJhdGlvbjtcblxuICAgIGlmICh0aW1lID4gZHVyYXRpb24pIHtcbiAgICAgICAgdGltZSA9IHRpbWUgJSBkdXJhdGlvbjtcbiAgICAgICAgaWYgKHRpbWUgPT09IDApIHRpbWUgPSBkdXJhdGlvbjtcbiAgICB9IGVsc2UgaWYgKHRpbWUgPCAwKSB7XG4gICAgICAgIHRpbWUgPSB0aW1lICUgZHVyYXRpb247XG4gICAgICAgIGlmICh0aW1lICE9PSAwKSB0aW1lICs9IGR1cmF0aW9uO1xuICAgIH1cblxuICAgIHZhciByYXRpbyA9IHRpbWUgLyBkdXJhdGlvbjtcblxuICAgIHZhciBjdXJ2ZXMgPSB0aGlzLmN1cnZlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3VydmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcbiAgICAgICAgY3VydmUuc2FtcGxlKHRpbWUsIHJhdGlvLCB0aGlzKTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5fbGFzdGZyYW1lRXZlbnRPbikge1xuICAgICAgICBpZiAodGhpcy5fbGFzdEl0ZXJhdGlvbnMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPSByYXRpbztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLnRpbWUgPiAwICYmIHRoaXMuX2xhc3RJdGVyYXRpb25zID4gcmF0aW8gfHwgdGhpcy50aW1lIDwgMCAmJiB0aGlzLl9sYXN0SXRlcmF0aW9ucyA8IHJhdGlvKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXQoJ2xhc3RmcmFtZScsIHRoaXMpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbGFzdEl0ZXJhdGlvbnMgPSByYXRpbztcbiAgICB9XG59XG5cbnByb3RvLnVwZGF0ZSA9IGZ1bmN0aW9uIChkZWx0YSkge1xuICAgIC8vIGNhbGN1bGF0ZSBkZWxheSB0aW1lXG5cbiAgICBpZiAodGhpcy5fZGVsYXlUaW1lID4gMCkge1xuICAgICAgICB0aGlzLl9kZWxheVRpbWUgLT0gZGVsdGE7XG4gICAgICAgIGlmICh0aGlzLl9kZWxheVRpbWUgPiAwKSB7XG4gICAgICAgICAgICAvLyBzdGlsbCB3YWl0aW5nXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBtYWtlIGZpcnN0IGZyYW1lIHBlcmZlY3RcblxuICAgIC8vdmFyIHBsYXlQZXJmZWN0Rmlyc3RGcmFtZSA9ICh0aGlzLnRpbWUgPT09IDApO1xuICAgIGlmICh0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQpIHtcbiAgICAgICAgdGhpcy50aW1lICs9IGRlbHRhICogdGhpcy5zcGVlZDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9jdXJyZW50RnJhbWVQbGF5ZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHRoaXMuX3Byb2Nlc3MoKTtcbn07XG5cbnByb3RvLl9uZWVkUmV2ZXJzID0gZnVuY3Rpb24gKGN1cnJlbnRJdGVyYXRpb25zKSB7XG4gICAgdmFyIHdyYXBNb2RlID0gdGhpcy53cmFwTW9kZTtcbiAgICB2YXIgbmVlZFJldmVycyA9IGZhbHNlO1xuXG4gICAgaWYgKCh3cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5QaW5nUG9uZykgPT09IFdyYXBNb2RlTWFzay5QaW5nUG9uZykge1xuICAgICAgICB2YXIgaXNFbmQgPSBjdXJyZW50SXRlcmF0aW9ucyAtIChjdXJyZW50SXRlcmF0aW9ucyB8IDApID09PSAwO1xuICAgICAgICBpZiAoaXNFbmQgJiYgY3VycmVudEl0ZXJhdGlvbnMgPiAwKSB7XG4gICAgICAgICAgICBjdXJyZW50SXRlcmF0aW9ucyAtPSAxO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGlzT2RkSXRlcmF0aW9uID0gY3VycmVudEl0ZXJhdGlvbnMgJiAxO1xuICAgICAgICBpZiAoaXNPZGRJdGVyYXRpb24pIHtcbiAgICAgICAgICAgIG5lZWRSZXZlcnMgPSAhbmVlZFJldmVycztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoKHdyYXBNb2RlICYgV3JhcE1vZGVNYXNrLlJldmVyc2UpID09PSBXcmFwTW9kZU1hc2suUmV2ZXJzZSkge1xuICAgICAgICBuZWVkUmV2ZXJzID0gIW5lZWRSZXZlcnM7XG4gICAgfVxuICAgIHJldHVybiBuZWVkUmV2ZXJzO1xufTtcblxucHJvdG8uZ2V0V3JhcHBlZEluZm8gPSBmdW5jdGlvbiAodGltZSwgaW5mbykge1xuICAgIGluZm8gPSBpbmZvIHx8IG5ldyBXcmFwcGVkSW5mbygpO1xuXG4gICAgdmFyIHN0b3BwZWQgPSBmYWxzZTtcbiAgICB2YXIgZHVyYXRpb24gPSB0aGlzLmR1cmF0aW9uO1xuICAgIHZhciByZXBlYXRDb3VudCA9IHRoaXMucmVwZWF0Q291bnQ7XG5cbiAgICB2YXIgY3VycmVudEl0ZXJhdGlvbnMgPSB0aW1lID4gMCA/IHRpbWUgLyBkdXJhdGlvbiA6IC0odGltZSAvIGR1cmF0aW9uKTtcbiAgICBpZiAoY3VycmVudEl0ZXJhdGlvbnMgPj0gcmVwZWF0Q291bnQpIHtcbiAgICAgICAgY3VycmVudEl0ZXJhdGlvbnMgPSByZXBlYXRDb3VudDtcblxuICAgICAgICBzdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgdmFyIHRlbXBSYXRpbyA9IHJlcGVhdENvdW50IC0gKHJlcGVhdENvdW50IHwgMCk7XG4gICAgICAgIGlmICh0ZW1wUmF0aW8gPT09IDApIHtcbiAgICAgICAgICAgIHRlbXBSYXRpbyA9IDE7IC8vIOWmguaenOaSreaUvui/h++8jOWKqOeUu+S4jeWkjeS9jVxuICAgICAgICB9XG4gICAgICAgIHRpbWUgPSB0ZW1wUmF0aW8gKiBkdXJhdGlvbiAqICh0aW1lID4gMCA/IDEgOiAtMSk7XG4gICAgfVxuXG4gICAgaWYgKHRpbWUgPiBkdXJhdGlvbikge1xuICAgICAgICB2YXIgdGVtcFRpbWUgPSB0aW1lICUgZHVyYXRpb247XG4gICAgICAgIHRpbWUgPSB0ZW1wVGltZSA9PT0gMCA/IGR1cmF0aW9uIDogdGVtcFRpbWU7XG4gICAgfSBlbHNlIGlmICh0aW1lIDwgMCkge1xuICAgICAgICB0aW1lID0gdGltZSAlIGR1cmF0aW9uO1xuICAgICAgICBpZiAodGltZSAhPT0gMCkgdGltZSArPSBkdXJhdGlvbjtcbiAgICB9XG5cbiAgICB2YXIgbmVlZFJldmVycyA9IGZhbHNlO1xuICAgIHZhciBzaG91bGRXcmFwID0gdGhpcy5fd3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suU2hvdWxkV3JhcDtcbiAgICBpZiAoc2hvdWxkV3JhcCkge1xuICAgICAgICBuZWVkUmV2ZXJzID0gdGhpcy5fbmVlZFJldmVycyhjdXJyZW50SXRlcmF0aW9ucyk7XG4gICAgfVxuXG4gICAgdmFyIGRpcmVjdGlvbiA9IG5lZWRSZXZlcnMgPyAtMSA6IDE7XG4gICAgaWYgKHRoaXMuc3BlZWQgPCAwKSB7XG4gICAgICAgIGRpcmVjdGlvbiAqPSAtMTtcbiAgICB9XG5cbiAgICAvLyBjYWxjdWxhdGUgd3JhcHBlZCB0aW1lXG4gICAgaWYgKHNob3VsZFdyYXAgJiYgbmVlZFJldmVycykge1xuICAgICAgICB0aW1lID0gZHVyYXRpb24gLSB0aW1lO1xuICAgIH1cblxuICAgIGluZm8ucmF0aW8gPSB0aW1lIC8gZHVyYXRpb247XG4gICAgaW5mby50aW1lID0gdGltZTtcbiAgICBpbmZvLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjtcbiAgICBpbmZvLnN0b3BwZWQgPSBzdG9wcGVkO1xuICAgIGluZm8uaXRlcmF0aW9ucyA9IGN1cnJlbnRJdGVyYXRpb25zO1xuXG4gICAgcmV0dXJuIGluZm87XG59O1xuXG5wcm90by5zYW1wbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGluZm8gPSB0aGlzLmdldFdyYXBwZWRJbmZvKHRoaXMudGltZSwgdGhpcy5fd3JhcHBlZEluZm8pO1xuICAgIHZhciBjdXJ2ZXMgPSB0aGlzLmN1cnZlcztcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY3VydmVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIHZhciBjdXJ2ZSA9IGN1cnZlc1tpXTtcbiAgICAgICAgY3VydmUuc2FtcGxlKGluZm8udGltZSwgaW5mby5yYXRpbywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGluZm87XG59O1xuXG4vKipcclxuICogISNlbiBUaGUgY2xpcCB0aGF0IGlzIGJlaW5nIHBsYXllZCBieSB0aGlzIGFuaW1hdGlvbiBzdGF0ZS5cclxuICogISN6aCDmraTliqjnlLvnirbmgIHmraPlnKjmkq3mlL7nmoTliarovpHjgIJcclxuICogQHByb3BlcnR5IGNsaXBcclxuICogQHR5cGUge0FuaW1hdGlvbkNsaXB9XHJcbiAqIEBmaW5hbFxyXG4gKi9cbmpzLmdldChwcm90bywgJ2NsaXAnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2NsaXA7XG59KTtcblxuLyoqXHJcbiAqICEjZW4gVGhlIG5hbWUgb2YgdGhlIHBsYXlpbmcgYW5pbWF0aW9uLlxyXG4gKiAhI3poIOWKqOeUu+eahOWQjeWtl1xyXG4gKiBAcHJvcGVydHkgbmFtZVxyXG4gKiBAdHlwZSB7U3RyaW5nfVxyXG4gKiBAcmVhZE9ubHlcclxuICovXG5qcy5nZXQocHJvdG8sICduYW1lJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9uYW1lO1xufSk7XG5cbmpzLm9ic29sZXRlKHByb3RvLCAnQW5pbWF0aW9uU3RhdGUubGVuZ3RoJywgJ2R1cmF0aW9uJyk7XG5cbmpzLmdldHNldChwcm90bywgJ2N1cnZlTG9hZGVkJywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmN1cnZlcy5sZW5ndGggPiAwO1xufSwgZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuY3VydmVzLmxlbmd0aCA9IDA7XG59KTtcblxuanMuZ2V0c2V0KHByb3RvLCAnd3JhcE1vZGUnLCBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBNb2RlO1xufSwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgdGhpcy5fd3JhcE1vZGUgPSB2YWx1ZTtcblxuICAgIGlmIChDQ19FRElUT1IpIHJldHVybjtcblxuICAgIC8vIGR5bmFtaWMgY2hhbmdlIHdyYXBNb2RlIHdpbGwgbmVlZCByZXNldCB0aW1lIHRvIDBcbiAgICB0aGlzLnRpbWUgPSAwO1xuXG4gICAgaWYgKHZhbHVlICYgV3JhcE1vZGVNYXNrLkxvb3ApIHtcbiAgICAgICAgdGhpcy5yZXBlYXRDb3VudCA9IEluZmluaXR5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMucmVwZWF0Q291bnQgPSAxO1xuICAgIH1cbn0pO1xuXG5qcy5nZXRzZXQocHJvdG8sICdyZXBlYXRDb3VudCcsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVwZWF0Q291bnQ7XG59LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICB0aGlzLl9yZXBlYXRDb3VudCA9IHZhbHVlO1xuXG4gICAgdmFyIHNob3VsZFdyYXAgPSB0aGlzLl93cmFwTW9kZSAmIFdyYXBNb2RlTWFzay5TaG91bGRXcmFwO1xuICAgIHZhciByZXZlcnNlID0gKHRoaXMud3JhcE1vZGUgJiBXcmFwTW9kZU1hc2suUmV2ZXJzZSkgPT09IFdyYXBNb2RlTWFzay5SZXZlcnNlO1xuICAgIGlmICh2YWx1ZSA9PT0gSW5maW5pdHkgJiYgIXNob3VsZFdyYXAgJiYgIXJldmVyc2UpIHtcbiAgICAgICAgdGhpcy5fcHJvY2VzcyA9IHNpbXBsZVByb2Nlc3M7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJvY2VzcyA9IHByb2Nlc3M7XG4gICAgfVxufSk7XG5cbmpzLmdldHNldChwcm90bywgJ2RlbGF5JywgZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9kZWxheTtcbn0sIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuX2RlbGF5VGltZSA9IHRoaXMuX2RlbGF5ID0gdmFsdWU7XG59KTtcblxuY2MuQW5pbWF0aW9uU3RhdGUgPSBtb2R1bGUuZXhwb3J0cyA9IEFuaW1hdGlvblN0YXRlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LGV5SjJaWEp6YVc5dUlqb3pMQ0p6YjNWeVkyVnpJanBiSW1GdWFXMWhkR2x2YmkxemRHRjBaUzVxY3lKZExDSnVZVzFsY3lJNld5SnFjeUlzSW1Oaklpd2lVR3hoZVdGaWJHVWlMQ0p5WlhGMWFYSmxJaXdpVkhsd1pYTWlMQ0pYY21Gd2NHVmtTVzVtYnlJc0lsZHlZWEJOYjJSbElpd2lWM0poY0UxdlpHVk5ZWE5ySWl3aVFXNXBiV0YwYVc5dVUzUmhkR1VpTENKamJHbHdJaXdpYm1GdFpTSXNJbU5oYkd3aUxDSmZZM1Z5Y21WdWRFWnlZVzFsVUd4aGVXVmtJaXdpWDJSbGJHRjVJaXdpWDJSbGJHRjVWR2x0WlNJc0lsOTNjbUZ3Y0dWa1NXNW1ieUlzSWw5c1lYTjBWM0poY0hCbFpFbHVabThpTENKZmNISnZZMlZ6Y3lJc0luQnliMk5sYzNNaUxDSmZZMnhwY0NJc0lsOXVZVzFsSWl3aVlXNXBiV0YwYjNJaUxDSmpkWEoyWlhNaUxDSmtaV3hoZVNJc0luSmxjR1ZoZEVOdmRXNTBJaXdpWkhWeVlYUnBiMjRpTENKemNHVmxaQ0lzSW5keVlYQk5iMlJsSWl3aVRtOXliV0ZzSWl3aWRHbHRaU0lzSWw5MFlYSm5aWFFpTENKZmJHRnpkR1p5WVcxbFJYWmxiblJQYmlJc0ltVnRhWFFpTENKaGNtZHpJaXdpUVhKeVlYa2lMQ0poY21kMWJXVnVkSE1pTENKc1pXNW5kR2dpTENKcElpd2liQ0lzSW1ScGNtVmpkRzl5SWl3aVoyVjBRVzVwYldGMGFXOXVUV0Z1WVdkbGNpSXNJbkIxYzJoRVpXeGhlVVYyWlc1MElpd2laWGgwWlc1a0lpd2ljSEp2ZEc4aUxDSndjbTkwYjNSNWNHVWlMQ0pmWlcxcGRDSXNJblI1Y0dVaUxDSnpkR0YwWlNJc0ltbHpWbUZzYVdRaUxDSnZiaUlzSW1OaGJHeGlZV05ySWl3aWRHRnlaMlYwSWl3aWIyNWpaU0lzSW5ObGJHWWlMQ0psZG1WdWRDSXNJbTltWmlJc0ltaGhjMFYyWlc1MFRHbHpkR1Z1WlhJaUxDSmZjMlYwUlhabGJuUlVZWEpuWlhRaUxDSnZibEJzWVhraUxDSnpaWFJVYVcxbElpd2lZV1JrUVc1cGJXRjBhVzl1SWl3aWIyNVRkRzl3SWl3aWFYTlFZWFZ6WldRaUxDSnlaVzF2ZG1WQmJtbHRZWFJwYjI0aUxDSnZibEpsYzNWdFpTSXNJbTl1VUdGMWMyVWlMQ0pqZFhKMlpTSXNJbTl1VkdsdFpVTm9ZVzVuWldSTllXNTFZV3hzZVNJc0ltbHVabThpTENKellXMXdiR1VpTENKc1lYTjBTVzVtYnlJc0ltbDBaWEpoZEdsdmJuTWlMQ0p6WlhRaUxDSnpkRzl3Y0dWa0lpd2ljM1J2Y0NJc0luTnBiWEJzWlZCeWIyTmxjM01pTENKeVlYUnBieUlzSW14bGJpSXNJbDlzWVhOMFNYUmxjbUYwYVc5dWN5SXNJblZ1WkdWbWFXNWxaQ0lzSW5Wd1pHRjBaU0lzSW1SbGJIUmhJaXdpWDI1bFpXUlNaWFpsY25NaUxDSmpkWEp5Wlc1MFNYUmxjbUYwYVc5dWN5SXNJbTVsWldSU1pYWmxjbk1pTENKUWFXNW5VRzl1WnlJc0ltbHpSVzVrSWl3aWFYTlBaR1JKZEdWeVlYUnBiMjRpTENKU1pYWmxjbk5sSWl3aVoyVjBWM0poY0hCbFpFbHVabThpTENKMFpXMXdVbUYwYVc4aUxDSjBaVzF3VkdsdFpTSXNJbk5vYjNWc1pGZHlZWEFpTENKZmQzSmhjRTF2WkdVaUxDSlRhRzkxYkdSWGNtRndJaXdpWkdseVpXTjBhVzl1SWl3aVoyVjBJaXdpYjJKemIyeGxkR1VpTENKblpYUnpaWFFpTENKMllXeDFaU0lzSWtORFgwVkVTVlJQVWlJc0lreHZiM0FpTENKSmJtWnBibWwwZVNJc0lsOXlaWEJsWVhSRGIzVnVkQ0lzSW5KbGRtVnljMlVpTENKdGIyUjFiR1VpTENKbGVIQnZjblJ6SWwwc0ltMWhjSEJwYm1keklqb2lPenRCUVVGQk96czdPenM3T3pzN096czdPenM3T3pzN096czdPenM3TzBGQk1FSkJMRWxCUVVsQkxFdEJRVXRETEVkQlFVZEVMRVZCUVZvN1FVRkRRU3hKUVVGSlJTeFhRVUZYUXl4UlFVRlJMRmxCUVZJc1EwRkJaanM3UVVGRlFTeEpRVUZKUXl4UlFVRlJSQ3hSUVVGUkxGTkJRVklzUTBGQldqdEJRVU5CTEVsQlFVbEZMR05CUVdORUxFMUJRVTFETEZkQlFYaENPMEZCUTBFc1NVRkJTVU1zVjBGQlYwWXNUVUZCVFVVc1VVRkJja0k3UVVGRFFTeEpRVUZKUXl4bFFVRmxTQ3hOUVVGTlJ5eFpRVUY2UWpzN1FVRkZRVHM3T3pzN096czdPenM3TzBGQldVRTdPenM3TzBGQlMwRXNVMEZCVTBNc1kwRkJWQ3hEUVVGNVFrTXNTVUZCZWtJc1JVRkJLMEpETEVsQlFTOUNMRVZCUVhGRE8wRkJRMnBEVWl4aFFVRlRVeXhKUVVGVUxFTkJRV01zU1VGQlpEczdRVUZGUVR0QlFVTkJPMEZCUTBFc1UwRkJTME1zYlVKQlFVd3NSMEZCTWtJc1MwRkJNMEk3TzBGQlJVRXNVMEZCUzBNc1RVRkJUQ3hIUVVGakxFTkJRV1E3UVVGRFFTeFRRVUZMUXl4VlFVRk1MRWRCUVd0Q0xFTkJRV3hDT3p0QlFVVkJMRk5CUVV0RExGbEJRVXdzUjBGQmIwSXNTVUZCU1ZZc1YwRkJTaXhGUVVGd1FqdEJRVU5CTEZOQlFVdFhMR2RDUVVGTUxFZEJRWGRDTEVsQlFYaENPenRCUVVWQkxGTkJRVXRETEZGQlFVd3NSMEZCWjBKRExFOUJRV2hDT3p0QlFVVkJMRk5CUVV0RExFdEJRVXdzUjBGQllWWXNTVUZCWWp0QlFVTkJMRk5CUVV0WExFdEJRVXdzUjBGQllWWXNVVUZCVTBRc1VVRkJVVUVzUzBGQlMwTXNTVUZCYmtNN08wRkJSVUU3T3pzN1FVRkpRU3hUUVVGTFZ5eFJRVUZNTEVkQlFXZENMRWxCUVdoQ096dEJRVVZCT3pzN096czdRVUZOUVN4VFFVRkxReXhOUVVGTUxFZEJRV01zUlVGQlpEczdRVUZGUVRzN1FVRkZRVHM3T3pzN096czdPMEZCVTBFc1UwRkJTME1zUzBGQlRDeEhRVUZoTEVOQlFXSTdPMEZCUlVFN096czdPenM3T3pzN096czdPenRCUVdWQkxGTkJRVXRETEZkQlFVd3NSMEZCYlVJc1EwRkJia0k3TzBGQlJVRTdPenM3T3pzN08wRkJVVUVzVTBGQlMwTXNVVUZCVEN4SFFVRm5RaXhEUVVGb1FqczdRVUZGUVRzN096czdPenRCUVU5QkxGTkJRVXRETEV0QlFVd3NSMEZCWVN4RFFVRmlPenRCUVVWQk96czdPenM3T3pzN096czdRVUZaUVN4VFFVRkxReXhSUVVGTUxFZEJRV2RDY2tJc1UwRkJVM05DTEUxQlFYcENPenRCUVVWQk96czdPenM3TzBGQlQwRXNVMEZCUzBNc1NVRkJUQ3hIUVVGWkxFTkJRVm83TzBGQlJVRTdRVUZEUVN4VFFVRkxReXhQUVVGTUxFZEJRV1VzU1VGQlpqdEJRVU5CTEZOQlFVdERMR2xDUVVGTUxFZEJRWGxDTEV0QlFYcENPMEZCUTBFc1UwRkJTME1zU1VGQlRDeEhRVUZaTEZsQlFWazdRVUZEY0VJc1dVRkJTVU1zVDBGQlR5eEpRVUZKUXl4TFFVRktMRU5CUVZWRExGVkJRVlZETEUxQlFYQkNMRU5CUVZnN1FVRkRRU3hoUVVGTExFbEJRVWxETEVsQlFVa3NRMEZCVWl4RlFVRlhReXhKUVVGSlRDeExRVUZMUnl4TlFVRjZRaXhGUVVGcFEwTXNTVUZCU1VNc1EwRkJja01zUlVGQmQwTkVMRWRCUVhoRExFVkJRVFpETzBGQlEzcERTaXhwUWtGQlMwa3NRMEZCVEN4SlFVRlZSaXhWUVVGVlJTeERRVUZXTEVOQlFWWTdRVUZEU0R0QlFVTkVjRU1zVjBGQlIzTkRMRkZCUVVnc1EwRkJXVU1zYlVKQlFWb3NSMEZCYTBORExHTkJRV3hETEVOQlFXbEVMRWxCUVdwRUxFVkJRWFZFTEU5QlFYWkVMRVZCUVdkRlVpeEpRVUZvUlR0QlFVTklMRXRCVGtRN1FVRlBTRHRCUVVORWFrTXNSMEZCUnpCRExFMUJRVWdzUTBGQlZXeERMR05CUVZZc1JVRkJNRUpPTEZGQlFURkNPenRCUVVWQkxFbEJRVWw1UXl4UlFVRlJia01zWlVGQlpXOURMRk5CUVROQ096dEJRVVZCUkN4TlFVRk5SU3hMUVVGT0xFZEJRV01zVlVGQlZVTXNTVUZCVml4RlFVRm5Ra01zUzBGQmFFSXNSVUZCZFVJN1FVRkRha01zVVVGQlNTeExRVUZMYWtJc1QwRkJUQ3hKUVVGblFpeExRVUZMUVN4UFFVRk1MRU5CUVdGclFpeFBRVUZxUXl4RlFVRXdRenRCUVVOMFF5eGhRVUZMYkVJc1QwRkJUQ3hEUVVGaFJTeEpRVUZpTEVOQlFXdENZeXhKUVVGc1FpeEZRVUYzUWtFc1NVRkJlRUlzUlVGQk9FSkRMRXRCUVRsQ08wRkJRMGc3UVVGRFNpeERRVXBFT3p0QlFVMUJTaXhOUVVGTlRTeEZRVUZPTEVkQlFWY3NWVUZCVlVnc1NVRkJWaXhGUVVGblFra3NVVUZCYUVJc1JVRkJNRUpETEUxQlFURkNMRVZCUVd0RE8wRkJRM3BETEZGQlFVa3NTMEZCUzNKQ0xFOUJRVXdzU1VGQlowSXNTMEZCUzBFc1QwRkJUQ3hEUVVGaGEwSXNUMEZCYWtNc1JVRkJNRU03UVVGRGRFTXNXVUZCU1VZc1UwRkJVeXhYUVVGaUxFVkJRVEJDTzBGQlEzUkNMR2xDUVVGTFppeHBRa0ZCVEN4SFFVRjVRaXhKUVVGNlFqdEJRVU5JTzBGQlEwUXNaVUZCVHl4TFFVRkxSQ3hQUVVGTUxFTkJRV0Z0UWl4RlFVRmlMRU5CUVdkQ1NDeEpRVUZvUWl4RlFVRnpRa2tzVVVGQmRFSXNSVUZCWjBORExFMUJRV2hETEVOQlFWQTdRVUZEU0N4TFFVeEVMRTFCVFVzN1FVRkRSQ3hsUVVGUExFbEJRVkE3UVVGRFNEdEJRVU5LTEVOQlZrUTdPMEZCV1VGU0xFMUJRVTFUTEVsQlFVNHNSMEZCWVN4VlFVRlZUaXhKUVVGV0xFVkJRV2RDU1N4UlFVRm9RaXhGUVVFd1FrTXNUVUZCTVVJc1JVRkJhME03UVVGRE0wTXNVVUZCU1N4TFFVRkxja0lzVDBGQlRDeEpRVUZuUWl4TFFVRkxRU3hQUVVGTUxFTkJRV0ZyUWl4UFFVRnFReXhGUVVFd1F6dEJRVU4wUXl4WlFVRkpSaXhUUVVGVExGZEJRV0lzUlVGQk1FSTdRVUZEZEVJc2FVSkJRVXRtTEdsQ1FVRk1MRWRCUVhsQ0xFbEJRWHBDTzBGQlEwZzdRVUZEUkN4WlFVRkpjMElzVDBGQlR5eEpRVUZZTzBGQlEwRXNaVUZCVHl4TFFVRkxka0lzVDBGQlRDeERRVUZoYzBJc1NVRkJZaXhEUVVGclFrNHNTVUZCYkVJc1JVRkJkMElzVlVGQlZWRXNTMEZCVml4RlFVRnBRanRCUVVNMVEwb3NjVUpCUVZOMlF5eEpRVUZVTEVOQlFXTjNReXhOUVVGa0xFVkJRWE5DUnl4TFFVRjBRanRCUVVOQlJDeHBRa0ZCUzNSQ0xHbENRVUZNTEVkQlFYbENMRXRCUVhwQ08wRkJRMGdzVTBGSVRTeERRVUZRTzBGQlNVZ3NTMEZVUkN4TlFWVkxPMEZCUTBRc1pVRkJUeXhKUVVGUU8wRkJRMGc3UVVGRFNpeERRV1JFT3p0QlFXZENRVmtzVFVGQlRWa3NSMEZCVGl4SFFVRlpMRlZCUVZWVUxFbEJRVllzUlVGQlowSkpMRkZCUVdoQ0xFVkJRVEJDUXl4TlFVRXhRaXhGUVVGclF6dEJRVU14UXl4UlFVRkpMRXRCUVV0eVFpeFBRVUZNTEVsQlFXZENMRXRCUVV0QkxFOUJRVXdzUTBGQllXdENMRTlCUVdwRExFVkJRVEJETzBGQlEzUkRMRmxCUVVsR0xGTkJRVk1zVjBGQllpeEZRVUV3UWp0QlFVTjBRaXhuUWtGQlNTeERRVUZETEV0QlFVdG9RaXhQUVVGTUxFTkJRV0V3UWl4blFrRkJZaXhEUVVFNFFsWXNTVUZCT1VJc1EwRkJUQ3hGUVVFd1F6dEJRVU4wUXl4eFFrRkJTMllzYVVKQlFVd3NSMEZCZVVJc1MwRkJla0k3UVVGRFNEdEJRVU5LTzBGQlEwUXNZVUZCUzBRc1QwRkJUQ3hEUVVGaGVVSXNSMEZCWWl4RFFVRnBRbFFzU1VGQmFrSXNSVUZCZFVKSkxGRkJRWFpDTEVWQlFXbERReXhOUVVGcVF6dEJRVU5JTzBGQlEwb3NRMEZVUkRzN1FVRlhRVklzVFVGQlRXTXNaVUZCVGl4SFFVRjNRaXhWUVVGVlRpeE5RVUZXTEVWQlFXdENPMEZCUTNSRExGTkJRVXR5UWl4UFFVRk1MRWRCUVdWeFFpeE5RVUZtTzBGQlEwZ3NRMEZHUkRzN1FVRkpRVklzVFVGQlRXVXNUVUZCVGl4SFFVRmxMRmxCUVZrN1FVRkRka0k3UVVGRFFTeFRRVUZMUXl4UFFVRk1MRU5CUVdFc1EwRkJZanRCUVVOQkxGTkJRVXMzUXl4VlFVRk1MRWRCUVd0Q0xFdEJRVXRFTEUxQlFYWkNPenRCUVVWQldpeFBRVUZIYzBNc1VVRkJTQ3hEUVVGWlF5eHRRa0ZCV2l4SFFVRnJRMjlDTEZsQlFXeERMRU5CUVN0RExFbEJRUzlET3p0QlFVVkJMRkZCUVVrc1MwRkJTM1pETEZGQlFWUXNSVUZCYlVJN1FVRkRaaXhoUVVGTFFTeFJRVUZNTEVOQlFXTjFReXhaUVVGa0xFTkJRVEpDTEVsQlFUTkNPMEZCUTBnN08wRkJSVVFzVTBGQlN6VkNMRWxCUVV3c1EwRkJWU3hOUVVGV0xFVkJRV3RDTEVsQlFXeENPMEZCUTBnc1EwRmFSRHM3UVVGalFWY3NUVUZCVFd0Q0xFMUJRVTRzUjBGQlpTeFpRVUZaTzBGQlEzWkNMRkZCUVVrc1EwRkJReXhMUVVGTFF5eFJRVUZXTEVWQlFXOUNPMEZCUTJoQ04wUXNWMEZCUjNORExGRkJRVWdzUTBGQldVTXNiVUpCUVZvc1IwRkJhME4xUWl4bFFVRnNReXhEUVVGclJDeEpRVUZzUkR0QlFVTklPenRCUVVWRUxGRkJRVWtzUzBGQlN6RkRMRkZCUVZRc1JVRkJiVUk3UVVGRFppeGhRVUZMUVN4UlFVRk1MRU5CUVdNd1F5eGxRVUZrTEVOQlFUaENMRWxCUVRsQ08wRkJRMGc3TzBGQlJVUXNVMEZCU3k5Q0xFbEJRVXdzUTBGQlZTeE5RVUZXTEVWQlFXdENMRWxCUVd4Q08wRkJRMGdzUTBGV1JEczdRVUZaUVZjc1RVRkJUWEZDTEZGQlFVNHNSMEZCYVVJc1dVRkJXVHRCUVVONlFpOUVMRTlCUVVkelF5eFJRVUZJTEVOQlFWbERMRzFDUVVGYUxFZEJRV3REYjBJc1dVRkJiRU1zUTBGQkswTXNTVUZCTDBNN1FVRkRRU3hUUVVGTE5VSXNTVUZCVEN4RFFVRlZMRkZCUVZZc1JVRkJiMElzU1VGQmNFSTdRVUZEU0N4RFFVaEVPenRCUVV0QlZ5eE5RVUZOYzBJc1QwRkJUaXhIUVVGblFpeFpRVUZaTzBGQlEzaENhRVVzVDBGQlIzTkRMRkZCUVVnc1EwRkJXVU1zYlVKQlFWb3NSMEZCYTBOMVFpeGxRVUZzUXl4RFFVRnJSQ3hKUVVGc1JEdEJRVU5CTEZOQlFVc3ZRaXhKUVVGTUxFTkJRVlVzVDBGQlZpeEZRVUZ0UWl4SlFVRnVRanRCUVVOSUxFTkJTRVE3TzBGQlMwRlhMRTFCUVUxblFpeFBRVUZPTEVkQlFXZENMRlZCUVZVNVFpeEpRVUZXTEVWQlFXZENPMEZCUXpWQ0xGTkJRVXRxUWl4dFFrRkJUQ3hIUVVFeVFpeExRVUV6UWp0QlFVTkJMRk5CUVV0cFFpeEpRVUZNTEVkQlFWbEJMRkZCUVZFc1EwRkJjRUk3TzBGQlJVRXNVVUZCU1ZBc1UwRkJVeXhMUVVGTFFTeE5RVUZzUWp0QlFVTkJMRk5CUVVzc1NVRkJTV1VzU1VGQlNTeERRVUZTTEVWQlFWZERMRWxCUVVsb1FpeFBRVUZQWXl4TlFVRXpRaXhGUVVGdFEwTXNTVUZCU1VNc1EwRkJka01zUlVGQk1FTkVMRWRCUVRGRExFVkJRU3RETzBGQlF6TkRMRmxCUVVrMlFpeFJRVUZSTlVNc1QwRkJUMlVzUTBGQlVDeERRVUZhTzBGQlEwRXNXVUZCU1RaQ0xFMUJRVTFETEhGQ1FVRldMRVZCUVdsRE8wRkJRemRDUkN4clFrRkJUVU1zY1VKQlFVNHNRMEZCTkVKMFF5eEpRVUUxUWl4RlFVRnJReXhKUVVGc1F6dEJRVU5JTzBGQlEwbzdRVUZEU2l4RFFWaEVPenRCUVdGQkxGTkJRVk5ZTEU5QlFWUXNSMEZCYjBJN1FVRkRhRUk3UVVGRFFTeFJRVUZKYTBRc1QwRkJUeXhMUVVGTFF5eE5RVUZNTEVWQlFWZzdPMEZCUlVFc1VVRkJTU3hMUVVGTGRFTXNhVUpCUVZRc1JVRkJORUk3UVVGRGVFSXNXVUZCU1hWRExGRkJRVW83UVVGRFFTeFpRVUZKTEVOQlFVTXNTMEZCUzNSRUxHZENRVUZXTEVWQlFUUkNPMEZCUTNoQ2MwUXNkVUpCUVZjc1MwRkJTM1JFTEdkQ1FVRk1MRWRCUVhkQ0xFbEJRVWxZTEZkQlFVb3NRMEZCWjBJclJDeEpRVUZvUWl4RFFVRnVRenRCUVVOSUxGTkJSa1FzVFVGRlR6dEJRVU5JUlN4MVFrRkJWeXhMUVVGTGRFUXNaMEpCUVdoQ08wRkJRMGc3TzBGQlJVUXNXVUZCU1N4TFFVRkxVU3hYUVVGTUxFZEJRVzFDTEVOQlFXNUNMRWxCUVhsQ0xFTkJRVU0wUXl4TFFVRkxSeXhWUVVGTUxFZEJRV3RDTEVOQlFXNUNMRXRCUVhsQ1JDeFRRVUZUUXl4VlFVRlVMRWRCUVhOQ0xFTkJRUzlETEVOQlFUZENMRVZCUVdsR08wRkJRemRGTEdsQ1FVRkxka01zU1VGQlRDeERRVUZWTEZkQlFWWXNSVUZCZFVJc1NVRkJka0k3UVVGRFNEczdRVUZGUkhORExHbENRVUZUUlN4SFFVRlVMRU5CUVdGS0xFbEJRV0k3UVVGRFNEczdRVUZGUkN4UlFVRkpRU3hMUVVGTFN5eFBRVUZVTEVWQlFXdENPMEZCUTJRc1lVRkJTME1zU1VGQlREdEJRVU5CTEdGQlFVc3hReXhKUVVGTUxFTkJRVlVzVlVGQlZpeEZRVUZ6UWl4SlFVRjBRanRCUVVOSU8wRkJRMG83TzBGQlJVUXNVMEZCVXpKRExHRkJRVlFzUjBGQk1FSTdRVUZEZEVJc1VVRkJTVGxETEU5QlFVOHNTMEZCUzBFc1NVRkJhRUk3UVVGRFFTeFJRVUZKU2l4WFFVRlhMRXRCUVV0QkxGRkJRWEJDT3p0QlFVVkJMRkZCUVVsSkxFOUJRVTlLTEZGQlFWZ3NSVUZCY1VJN1FVRkRha0pKTEdWQlFVOUJMRTlCUVU5S0xGRkJRV1E3UVVGRFFTeFpRVUZKU1N4VFFVRlRMRU5CUVdJc1JVRkJaMEpCTEU5QlFVOUtMRkZCUVZBN1FVRkRia0lzUzBGSVJDeE5RVWxMTEVsQlFVbEpMRTlCUVU4c1EwRkJXQ3hGUVVGak8wRkJRMlpCTEdWQlFVOUJMRTlCUVU5S0xGRkJRV1E3UVVGRFFTeFpRVUZKU1N4VFFVRlRMRU5CUVdJc1JVRkJaMEpCTEZGQlFWRktMRkZCUVZJN1FVRkRia0k3TzBGQlJVUXNVVUZCU1cxRUxGRkJRVkV2UXl4UFFVRlBTaXhSUVVGdVFqczdRVUZGUVN4UlFVRkpTQ3hUUVVGVExFdEJRVXRCTEUxQlFXeENPMEZCUTBFc1UwRkJTeXhKUVVGSlpTeEpRVUZKTEVOQlFWSXNSVUZCVjNkRExFMUJRVTEyUkN4UFFVRlBZeXhOUVVFM1FpeEZRVUZ4UTBNc1NVRkJTWGRETEVkQlFYcERMRVZCUVRoRGVFTXNSMEZCT1VNc1JVRkJiVVE3UVVGREwwTXNXVUZCU1RaQ0xGRkJRVkUxUXl4UFFVRlBaU3hEUVVGUUxFTkJRVm83UVVGRFFUWkNMR05CUVUxSExFMUJRVTRzUTBGQllYaERMRWxCUVdJc1JVRkJiVUlyUXl4TFFVRnVRaXhGUVVFd1FpeEpRVUV4UWp0QlFVTklPenRCUVVWRUxGRkJRVWtzUzBGQlN6ZERMR2xDUVVGVUxFVkJRVFJDTzBGQlEzaENMRmxCUVVrc1MwRkJTeXRETEdWQlFVd3NTMEZCZVVKRExGTkJRVGRDTEVWQlFYZERPMEZCUTNCRExHbENRVUZMUkN4bFFVRk1MRWRCUVhWQ1JpeExRVUYyUWp0QlFVTklPenRCUVVWRUxGbEJRVXNzUzBGQlN5OURMRWxCUVV3c1IwRkJXU3hEUVVGYUxFbEJRV2xDTEV0QlFVdHBSQ3hsUVVGTUxFZEJRWFZDUml4TFFVRjZReXhKUVVGdlJDeExRVUZMTDBNc1NVRkJUQ3hIUVVGWkxFTkJRVm9zU1VGQmFVSXNTMEZCUzJsRUxHVkJRVXdzUjBGQmRVSkdMRXRCUVdoSExFVkJRWGRITzBGQlEzQkhMR2xDUVVGTE5VTXNTVUZCVEN4RFFVRlZMRmRCUVZZc1JVRkJkVUlzU1VGQmRrSTdRVUZEU0RzN1FVRkZSQ3hoUVVGTE9FTXNaVUZCVEN4SFFVRjFRa1lzUzBGQmRrSTdRVUZEU0R0QlFVTktPenRCUVVWRWFrTXNUVUZCVFhGRExFMUJRVTRzUjBGQlpTeFZRVUZWUXl4TFFVRldMRVZCUVdsQ08wRkJRelZDT3p0QlFVVkJMRkZCUVVrc1MwRkJTMjVGTEZWQlFVd3NSMEZCYTBJc1EwRkJkRUlzUlVGQmVVSTdRVUZEY2tJc1lVRkJTMEVzVlVGQlRDeEpRVUZ0UW0xRkxFdEJRVzVDTzBGQlEwRXNXVUZCU1N4TFFVRkxia1VzVlVGQlRDeEhRVUZyUWl4RFFVRjBRaXhGUVVGNVFqdEJRVU55UWp0QlFVTkJPMEZCUTBnN1FVRkRTanM3UVVGRlJEczdRVUZGUVR0QlFVTkJMRkZCUVVrc1MwRkJTMFlzYlVKQlFWUXNSVUZCT0VJN1FVRkRNVUlzWVVGQlMybENMRWxCUVV3c1NVRkJZMjlFTEZGQlFWRXNTMEZCUzNaRUxFdEJRVE5DTzBGQlEwZ3NTMEZHUkN4TlFVZExPMEZCUTBRc1lVRkJTMlFzYlVKQlFVd3NSMEZCTWtJc1NVRkJNMEk3UVVGRFNEczdRVUZGUkN4VFFVRkxTeXhSUVVGTU8wRkJRMGdzUTBGMFFrUTdPMEZCZDBKQk1FSXNUVUZCVFhWRExGZEJRVTRzUjBGQmIwSXNWVUZCVlVNc2FVSkJRVllzUlVGQk5rSTdRVUZETjBNc1VVRkJTWGhFTEZkQlFWY3NTMEZCUzBFc1VVRkJjRUk3UVVGRFFTeFJRVUZKZVVRc1lVRkJZU3hMUVVGcVFqczdRVUZGUVN4UlFVRkpMRU5CUVVONlJDeFhRVUZYY0VJc1lVRkJZVGhGTEZGQlFYcENMRTFCUVhWRE9VVXNZVUZCWVRoRkxGRkJRWGhFTEVWQlFXdEZPMEZCUXpsRUxGbEJRVWxETEZGQlFWRklMSEZDUVVGeFFrRXNiMEpCUVc5Q0xFTkJRWHBETEUxQlFXZEVMRU5CUVRWRU8wRkJRMEVzV1VGQlNVY3NVMEZCVlVnc2IwSkJRVzlDTEVOQlFXeERMRVZCUVhORE8wRkJRMnhEUVN4cFEwRkJjVUlzUTBGQmNrSTdRVUZEU0RzN1FVRkZSQ3haUVVGSlNTeHBRa0ZCYVVKS0xHOUNRVUZ2UWl4RFFVRjZRenRCUVVOQkxGbEJRVWxKTEdOQlFVb3NSVUZCYjBJN1FVRkRhRUpJTEhsQ1FVRmhMRU5CUVVOQkxGVkJRV1E3UVVGRFNEdEJRVU5LTzBGQlEwUXNVVUZCU1N4RFFVRkRla1FzVjBGQlYzQkNMR0ZCUVdGcFJpeFBRVUY2UWl4TlFVRnpRMnBHTEdGQlFXRnBSaXhQUVVGMlJDeEZRVUZuUlR0QlFVTTFSRW9zY1VKQlFXRXNRMEZCUTBFc1ZVRkJaRHRCUVVOSU8wRkJRMFFzVjBGQlQwRXNWVUZCVUR0QlFVTklMRU5CYmtKRU96dEJRWEZDUVhwRExFMUJRVTA0UXl4alFVRk9MRWRCUVhWQ0xGVkJRVlUxUkN4SlFVRldMRVZCUVdkQ2RVTXNTVUZCYUVJc1JVRkJjMEk3UVVGRGVrTkJMRmRCUVU5QkxGRkJRVkVzU1VGQlNTOUVMRmRCUVVvc1JVRkJaanM3UVVGRlFTeFJRVUZKYjBVc1ZVRkJWU3hMUVVGa08wRkJRMEVzVVVGQlNXaEVMRmRCUVZjc1MwRkJTMEVzVVVGQmNFSTdRVUZEUVN4UlFVRkpSQ3hqUVVGakxFdEJRVXRCTEZkQlFYWkNPenRCUVVWQkxGRkJRVWt5UkN4dlFrRkJiMEowUkN4UFFVRlBMRU5CUVZBc1IwRkJXVUVzVDBGQlQwb3NVVUZCYmtJc1IwRkJLMElzUlVGQlJVa3NUMEZCVDBvc1VVRkJWQ3hEUVVGMlJEdEJRVU5CTEZGQlFVa3dSQ3h4UWtGQmNVSXpSQ3hYUVVGNlFpeEZRVUZ6UXp0QlFVTnNRekpFTERSQ1FVRnZRak5FTEZkQlFYQkNPenRCUVVWQmFVUXNhMEpCUVZVc1NVRkJWanRCUVVOQkxGbEJRVWxwUWl4WlFVRlpiRVVzWlVGQlpVRXNZMEZCWXl4RFFVRTNRaXhEUVVGb1FqdEJRVU5CTEZsQlFVbHJSU3hqUVVGakxFTkJRV3hDTEVWQlFYRkNPMEZCUTJwQ1FTeDNRa0ZCV1N4RFFVRmFMRU5CUkdsQ0xFTkJRMFE3UVVGRGJrSTdRVUZEUkRkRUxHVkJRVTgyUkN4WlFVRlpha1VzVVVGQldpeEpRVUYzUWtrc1QwRkJUeXhEUVVGUUxFZEJRVmNzUTBGQldDeEhRVUZsTEVOQlFVTXNRMEZCZUVNc1EwRkJVRHRCUVVOSU96dEJRVVZFTEZGQlFVbEJMRTlCUVU5S0xGRkJRVmdzUlVGQmNVSTdRVUZEYWtJc1dVRkJTV3RGTEZkQlFWYzVSQ3hQUVVGUFNpeFJRVUYwUWp0QlFVTkJTU3hsUVVGUE9FUXNZVUZCWVN4RFFVRmlMRWRCUVdsQ2JFVXNVVUZCYWtJc1IwRkJORUpyUlN4UlFVRnVRenRCUVVOSUxFdEJTRVFzVFVGSlN5eEpRVUZKT1VRc1QwRkJUeXhEUVVGWUxFVkJRV003UVVGRFprRXNaVUZCVDBFc1QwRkJUMG9zVVVGQlpEdEJRVU5CTEZsQlFVbEpMRk5CUVZNc1EwRkJZaXhGUVVGcFFrRXNVVUZCVVVvc1VVRkJVanRCUVVOd1FqczdRVUZGUkN4UlFVRkpNa1FzWVVGQllTeExRVUZxUWp0QlFVTkJMRkZCUVVsUkxHRkJRV0VzUzBGQlMwTXNVMEZCVEN4SFFVRnBRblJHTEdGQlFXRjFSaXhWUVVFdlF6dEJRVU5CTEZGQlFVbEdMRlZCUVVvc1JVRkJaMEk3UVVGRFdsSXNjVUpCUVdFc1MwRkJTMFlzVjBGQlRDeERRVUZwUWtNc2FVSkJRV3BDTEVOQlFXSTdRVUZEU0RzN1FVRkZSQ3hSUVVGSldTeFpRVUZaV0N4aFFVRmhMRU5CUVVNc1EwRkJaQ3hIUVVGclFpeERRVUZzUXp0QlFVTkJMRkZCUVVrc1MwRkJTekZFTEV0QlFVd3NSMEZCWVN4RFFVRnFRaXhGUVVGdlFqdEJRVU5vUW5GRkxIRkNRVUZoTEVOQlFVTXNRMEZCWkR0QlFVTklPenRCUVVWRU8wRkJRMEVzVVVGQlNVZ3NZMEZCWTFJc1ZVRkJiRUlzUlVGQk9FSTdRVUZETVVKMlJDeGxRVUZQU2l4WFFVRlhTU3hKUVVGc1FqdEJRVU5JT3p0QlFVVkVkVU1zVTBGQlMxRXNTMEZCVEN4SFFVRmhMME1zVDBGQlQwb3NVVUZCY0VJN1FVRkRRVEpETEZOQlFVdDJReXhKUVVGTUxFZEJRVmxCTEVsQlFWbzdRVUZEUVhWRExGTkJRVXN5UWl4VFFVRk1MRWRCUVdsQ1FTeFRRVUZxUWp0QlFVTkJNMElzVTBGQlMwc3NUMEZCVEN4SFFVRmxRU3hQUVVGbU8wRkJRMEZNTEZOQlFVdEhMRlZCUVV3c1IwRkJhMEpaTEdsQ1FVRnNRanM3UVVGRlFTeFhRVUZQWml4SlFVRlFPMEZCUTBnc1EwRnVSRVE3TzBGQmNVUkJla0lzVFVGQlRUQkNMRTFCUVU0c1IwRkJaU3haUVVGWk8wRkJRM1pDTEZGQlFVbEVMRTlCUVU4c1MwRkJTM0ZDTEdOQlFVd3NRMEZCYjBJc1MwRkJTelZFTEVsQlFYcENMRVZCUVN0Q0xFdEJRVXRrTEZsQlFYQkRMRU5CUVZnN1FVRkRRU3hSUVVGSlR5eFRRVUZUTEV0QlFVdEJMRTFCUVd4Q08wRkJRMEVzVTBGQlN5eEpRVUZKWlN4SlFVRkpMRU5CUVZJc1JVRkJWM2RETEUxQlFVMTJSQ3hQUVVGUFl5eE5RVUUzUWl4RlFVRnhRME1zU1VGQlNYZERMRWRCUVhwRExFVkJRVGhEZUVNc1IwRkJPVU1zUlVGQmJVUTdRVUZETDBNc1dVRkJTVFpDTEZGQlFWRTFReXhQUVVGUFpTeERRVUZRTEVOQlFWbzdRVUZEUVRaQ0xHTkJRVTFITEUxQlFVNHNRMEZCWVVRc1MwRkJTM1pETEVsQlFXeENMRVZCUVhkQ2RVTXNTMEZCUzFFc1MwRkJOMElzUlVGQmIwTXNTVUZCY0VNN1FVRkRTRHM3UVVGRlJDeFhRVUZQVWl4SlFVRlFPMEZCUTBnc1EwRlVSRHM3UVVGWlFUczdPenM3T3p0QlFVOUJjRVVzUjBGQlIyZEhMRWRCUVVnc1EwRkJUM0pFTEV0QlFWQXNSVUZCWXl4TlFVRmtMRVZCUVhOQ0xGbEJRVms3UVVGRE9VSXNWMEZCVHl4TFFVRkxlRUlzUzBGQldqdEJRVU5JTEVOQlJrUTdPMEZCU1VFN096czdPenM3UVVGUFFXNUNMRWRCUVVkblJ5eEhRVUZJTEVOQlFVOXlSQ3hMUVVGUUxFVkJRV01zVFVGQlpDeEZRVUZ6UWl4WlFVRlpPMEZCUXpsQ0xGZEJRVThzUzBGQlMzWkNMRXRCUVZvN1FVRkRTQ3hEUVVaRU96dEJRVWxCY0VJc1IwRkJSMmxITEZGQlFVZ3NRMEZCV1hSRUxFdEJRVm9zUlVGQmJVSXNkVUpCUVc1Q0xFVkJRVFJETEZWQlFUVkRPenRCUVVWQk0wTXNSMEZCUjJ0SExFMUJRVWdzUTBGQlZYWkVMRXRCUVZZc1JVRkJhVUlzWVVGQmFrSXNSVUZEU1N4WlFVRlpPMEZCUTFJc1YwRkJUeXhMUVVGTGNrSXNUVUZCVEN4RFFVRlpZeXhOUVVGYUxFZEJRWEZDTEVOQlFUVkNPMEZCUTBnc1EwRklUQ3hGUVVsSkxGbEJRVms3UVVGRFVpeFRRVUZMWkN4TlFVRk1MRU5CUVZsakxFMUJRVm9zUjBGQmNVSXNRMEZCY2tJN1FVRkRTQ3hEUVU1TU96dEJRVlZCY0VNc1IwRkJSMnRITEUxQlFVZ3NRMEZCVlhaRUxFdEJRVllzUlVGQmFVSXNWVUZCYWtJc1JVRkRTU3haUVVGWk8wRkJRMUlzVjBGQlR5eExRVUZMYTBRc1UwRkJXanRCUVVOSUxFTkJTRXdzUlVGSlNTeFZRVUZWVFN4TFFVRldMRVZCUVdsQ08wRkJRMklzVTBGQlMwNHNVMEZCVEN4SFFVRnBRazBzUzBGQmFrSTdPMEZCUlVFc1VVRkJTVU1zVTBGQlNpeEZRVUZsT3p0QlFVVm1PMEZCUTBFc1UwRkJTM1pGTEVsQlFVd3NSMEZCV1N4RFFVRmFPenRCUVVWQkxGRkJRVWx6UlN4UlFVRlJOVVlzWVVGQllUaEdMRWxCUVhwQ0xFVkJRU3RDTzBGQlF6TkNMR0ZCUVVzM1JTeFhRVUZNTEVkQlFXMUNPRVVzVVVGQmJrSTdRVUZEU0N4TFFVWkVMRTFCUjBzN1FVRkRSQ3hoUVVGTE9VVXNWMEZCVEN4SFFVRnRRaXhEUVVGdVFqdEJRVU5JTzBGQlJVb3NRMEZ1UWt3N08wRkJjMEpCZUVJc1IwRkJSMnRITEUxQlFVZ3NRMEZCVlhaRUxFdEJRVllzUlVGQmFVSXNZVUZCYWtJc1JVRkRTU3haUVVGWk8wRkJRMUlzVjBGQlR5eExRVUZMTkVRc1dVRkJXanRCUVVOSUxFTkJTRXdzUlVGSlNTeFZRVUZWU2l4TFFVRldMRVZCUVdsQ08wRkJRMklzVTBGQlMwa3NXVUZCVEN4SFFVRnZRa29zUzBGQmNFSTdPMEZCUlVFc1VVRkJTVkFzWVVGQllTeExRVUZMUXl4VFFVRk1MRWRCUVdsQ2RFWXNZVUZCWVhWR0xGVkJRUzlETzBGQlEwRXNVVUZCU1ZVc1ZVRkJWU3hEUVVGRExFdEJRVXMzUlN4UlFVRk1MRWRCUVdkQ2NFSXNZVUZCWVdsR0xFOUJRVGxDTEUxQlFUSkRha1lzWVVGQllXbEdMRTlCUVhSRk8wRkJRMEVzVVVGQlNWY3NWVUZCVlVjc1VVRkJWaXhKUVVGelFpeERRVUZEVml4VlFVRjJRaXhKUVVGeFF5eERRVUZEV1N4UFFVRXhReXhGUVVGdFJEdEJRVU12UXl4aFFVRkxka1lzVVVGQlRDeEhRVUZuUWpCRUxHRkJRV2hDTzBGQlEwZ3NTMEZHUkN4TlFVZExPMEZCUTBRc1lVRkJTekZFTEZGQlFVd3NSMEZCWjBKRExFOUJRV2hDTzBGQlEwZzdRVUZEU2l4RFFXWk1PenRCUVd0Q1FXeENMRWRCUVVkclJ5eE5RVUZJTEVOQlFWVjJSQ3hMUVVGV0xFVkJRV2xDTEU5QlFXcENMRVZCUTBrc1dVRkJXVHRCUVVOU0xGZEJRVThzUzBGQlN6bENMRTFCUVZvN1FVRkRTQ3hEUVVoTUxFVkJTVWtzVlVGQlZYTkdMRXRCUVZZc1JVRkJhVUk3UVVGRFlpeFRRVUZMY2tZc1ZVRkJUQ3hIUVVGclFpeExRVUZMUkN4TlFVRk1MRWRCUVdOelJpeExRVUZvUXp0QlFVTklMRU5CVGt3N08wRkJWVUZzUnl4SFFVRkhUeXhqUVVGSUxFZEJRVzlDYVVjc1QwRkJUME1zVDBGQlVDeEhRVUZwUW14SExHTkJRWEpESWl3aVptbHNaU0k2SW1GdWFXMWhkR2x2YmkxemRHRjBaUzVxY3lJc0luTnZkWEpqWlhORGIyNTBaVzUwSWpwYklpOHFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xWEhKY2JpQkRiM0I1Y21sbmFIUWdLR01wSURJd01UY3RNakF4T0NCWWFXRnRaVzRnV1dGcWFTQlRiMlowZDJGeVpTQkRieTRzSUV4MFpDNWNjbHh1WEhKY2JpQm9kSFJ3Y3pvdkwzZDNkeTVqYjJOdmN5NWpiMjB2WEhKY2JseHlYRzRnVUdWeWJXbHpjMmx2YmlCcGN5Qm9aWEpsWW5rZ1ozSmhiblJsWkN3Z1puSmxaU0J2WmlCamFHRnlaMlVzSUhSdklHRnVlU0J3WlhKemIyNGdiMkowWVdsdWFXNW5JR0VnWTI5d2VWeHlYRzRnYjJZZ2RHaHBjeUJ6YjJaMGQyRnlaU0JoYm1RZ1lYTnpiMk5wWVhSbFpDQmxibWRwYm1VZ2MyOTFjbU5sSUdOdlpHVWdLSFJvWlNCY0lsTnZablIzWVhKbFhDSXBMQ0JoSUd4cGJXbDBaV1FzWEhKY2JpQjNiM0pzWkhkcFpHVXNJSEp2ZVdGc2RIa3RabkpsWlN3Z2JtOXVMV0Z6YzJsbmJtRmliR1VzSUhKbGRtOWpZV0pzWlNCaGJtUWdibTl1TFdWNFkyeDFjMmwyWlNCc2FXTmxibk5sWEhKY2JpQjBieUIxYzJVZ1EyOWpiM01nUTNKbFlYUnZjaUJ6YjJ4bGJIa2dkRzhnWkdWMlpXeHZjQ0JuWVcxbGN5QnZiaUI1YjNWeUlIUmhjbWRsZENCd2JHRjBabTl5YlhNdUlGbHZkU0J6YUdGc2JGeHlYRzRnYm05MElIVnpaU0JEYjJOdmN5QkRjbVZoZEc5eUlITnZablIzWVhKbElHWnZjaUJrWlhabGJHOXdhVzVuSUc5MGFHVnlJSE52Wm5SM1lYSmxJRzl5SUhSdmIyeHpJSFJvWVhRbmMxeHlYRzRnZFhObFpDQm1iM0lnWkdWMlpXeHZjR2x1WnlCbllXMWxjeTRnV1c5MUlHRnlaU0J1YjNRZ1ozSmhiblJsWkNCMGJ5QndkV0pzYVhOb0xDQmthWE4wY21saWRYUmxMRnh5WEc0Z2MzVmliR2xqWlc1elpTd2dZVzVrTDI5eUlITmxiR3dnWTI5d2FXVnpJRzltSUVOdlkyOXpJRU55WldGMGIzSXVYSEpjYmx4eVhHNGdWR2hsSUhOdlpuUjNZWEpsSUc5eUlIUnZiMnh6SUdsdUlIUm9hWE1nVEdsalpXNXpaU0JCWjNKbFpXMWxiblFnWVhKbElHeHBZMlZ1YzJWa0xDQnViM1FnYzI5c1pDNWNjbHh1SUZocFlXMWxiaUJaWVdwcElGTnZablIzWVhKbElFTnZMaXdnVEhSa0xpQnlaWE5sY25abGN5QmhiR3dnY21sbmFIUnpJRzV2ZENCbGVIQnlaWE56YkhrZ1ozSmhiblJsWkNCMGJ5QjViM1V1WEhKY2JseHlYRzRnVkVoRklGTlBSbFJYUVZKRklFbFRJRkJTVDFaSlJFVkVJRndpUVZNZ1NWTmNJaXdnVjBsVVNFOVZWQ0JYUVZKU1FVNVVXU0JQUmlCQlRsa2dTMGxPUkN3Z1JWaFFVa1ZUVXlCUFVseHlYRzRnU1UxUVRFbEZSQ3dnU1U1RFRGVkVTVTVISUVKVlZDQk9UMVFnVEVsTlNWUkZSQ0JVVHlCVVNFVWdWMEZTVWtGT1ZFbEZVeUJQUmlCTlJWSkRTRUZPVkVGQ1NVeEpWRmtzWEhKY2JpQkdTVlJPUlZOVElFWlBVaUJCSUZCQlVsUkpRMVZNUVZJZ1VGVlNVRTlUUlNCQlRrUWdUazlPU1U1R1VrbE9SMFZOUlU1VUxpQkpUaUJPVHlCRlZrVk9WQ0JUU0VGTVRDQlVTRVZjY2x4dUlFRlZWRWhQVWxNZ1QxSWdRMDlRV1ZKSlIwaFVJRWhQVEVSRlVsTWdRa1VnVEVsQlFreEZJRVpQVWlCQlRsa2dRMHhCU1Uwc0lFUkJUVUZIUlZNZ1QxSWdUMVJJUlZKY2NseHVJRXhKUVVKSlRFbFVXU3dnVjBoRlZFaEZVaUJKVGlCQlRpQkJRMVJKVDA0Z1QwWWdRMDlPVkZKQlExUXNJRlJQVWxRZ1QxSWdUMVJJUlZKWFNWTkZMQ0JCVWtsVFNVNUhJRVpTVDAwc1hISmNiaUJQVlZRZ1QwWWdUMUlnU1U0Z1EwOU9Ua1ZEVkVsUFRpQlhTVlJJSUZSSVJTQlRUMFpVVjBGU1JTQlBVaUJVU0VVZ1ZWTkZJRTlTSUU5VVNFVlNJRVJGUVV4SlRrZFRJRWxPWEhKY2JpQlVTRVVnVTA5R1ZGZEJVa1V1WEhKY2JpQXFLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xS2lvcUtpb3FLaW9xTDF4eVhHNWNjbHh1WEhKY2JuWmhjaUJxY3lBOUlHTmpMbXB6TzF4eVhHNTJZWElnVUd4aGVXRmliR1VnUFNCeVpYRjFhWEpsS0NjdUwzQnNZWGxoWW14bEp5azdYSEpjYmx4eVhHNTJZWElnVkhsd1pYTWdQU0J5WlhGMWFYSmxLQ2N1TDNSNWNHVnpKeWs3WEhKY2JuWmhjaUJYY21Gd2NHVmtTVzVtYnlBOUlGUjVjR1Z6TGxkeVlYQndaV1JKYm1adk8xeHlYRzUyWVhJZ1YzSmhjRTF2WkdVZ1BTQlVlWEJsY3k1WGNtRndUVzlrWlR0Y2NseHVkbUZ5SUZkeVlYQk5iMlJsVFdGemF5QTlJRlI1Y0dWekxsZHlZWEJOYjJSbFRXRnphenRjY2x4dVhISmNiaThxS2x4eVhHNGdLaUFoSTJWdVhISmNiaUFxSUZSb1pTQkJibWx0WVhScGIyNVRkR0YwWlNCbmFYWmxjeUJtZFd4c0lHTnZiblJ5YjJ3Z2IzWmxjaUJoYm1sdFlYUnBiMjRnY0d4aGVXSmhZMnNnY0hKdlkyVnpjeTVjY2x4dUlDb2dTVzRnYlc5emRDQmpZWE5sY3lCMGFHVWdRVzVwYldGMGFXOXVJRU52YlhCdmJtVnVkQ0JwY3lCemRXWm1hV05wWlc1MElHRnVaQ0JsWVhOcFpYSWdkRzhnZFhObExpQlZjMlVnZEdobElFRnVhVzFoZEdsdmJsTjBZWFJsSUdsbUlIbHZkU0J1WldWa0lHWjFiR3dnWTI5dWRISnZiQzVjY2x4dUlDb2dJU042YUZ4eVhHNGdLaUJCYm1sdFlYUnBiMjVUZEdGMFpTRGxyb3psaGFqbWpxZmxpTGJsaXFqbmxMdm1rcTNtbEw3b3Y0Zm5xSXZqZ0lJOFluSXZQbHh5WEc0Z0tpRGxwS2ZscEpybWxiRG1nNFhsaHJYa3VJc2c1WXFvNTVTNzU3dUU1THUySU9hWXIraTJzK1drbitXU2pPYVlrK1M2anVTOXYrZVVxT2VhaE9PQWd1V21ndWFlbk9hQ3FPbWNnT2ltZ2VhYnRPV2ttdWVhaE9XS3FPZVV1K2FPcCtXSXR1YU9wZVdQbysrOGpPaXZ0K1M5ditlVXFDQkJibWx0WVhScGIyNVRkR0YwWmVPQWdseHlYRzRnS2lCQVkyeGhjM01nUVc1cGJXRjBhVzl1VTNSaGRHVmNjbHh1SUNvZ1FHVjRkR1Z1WkhNZ1VHeGhlV0ZpYkdWY2NseHVJQ3BjY2x4dUlDb3ZYSEpjYmx4eVhHNHZLaXBjY2x4dUlDb2dRRzFsZEdodlpDQmpiMjV6ZEhKMVkzUnZjbHh5WEc0Z0tpQkFjR0Z5WVcwZ2UwRnVhVzFoZEdsdmJrTnNhWEI5SUdOc2FYQmNjbHh1SUNvZ1FIQmhjbUZ0SUh0VGRISnBibWQ5SUZ0dVlXMWxYVnh5WEc0Z0tpOWNjbHh1Wm5WdVkzUnBiMjRnUVc1cGJXRjBhVzl1VTNSaGRHVWdLR05zYVhBc0lHNWhiV1VwSUh0Y2NseHVJQ0FnSUZCc1lYbGhZbXhsTG1OaGJHd29kR2hwY3lrN1hISmNiaUFnSUNCY2NseHVJQ0FnSUM4dklFMWhjbXNnZDJobGRHaGxjaUIwYUdVZ1kzVnljbVZ1ZENCbWNtRnRaU0JwY3lCd2JHRjVaV1F1WEhKY2JpQWdJQ0F2THlCWGFHVnVJSE5sZENCdVpYY2dkR2x0WlNCMGJ5QmhibWx0WVhScGIyNGdjM1JoZEdVc0lIZGxJSE5vYjNWc1pDQmxibk4xY21VZ2RHaGxJR1p5WVcxbElHRjBJSFJvWlNCemNHVmphV1pwWldRZ2RHbHRaU0JpWldsdVp5QndiR0Y1WldRZ1lYUWdibVY0ZENCMWNHUmhkR1V1WEhKY2JpQWdJQ0IwYUdsekxsOWpkWEp5Wlc1MFJuSmhiV1ZRYkdGNVpXUWdQU0JtWVd4elpUdGNjbHh1SUNBZ0lGeHlYRzRnSUNBZ2RHaHBjeTVmWkdWc1lYa2dQU0F3TzF4eVhHNGdJQ0FnZEdocGN5NWZaR1ZzWVhsVWFXMWxJRDBnTUR0Y2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5M2NtRndjR1ZrU1c1bWJ5QTlJRzVsZHlCWGNtRndjR1ZrU1c1bWJ5Z3BPMXh5WEc0Z0lDQWdkR2hwY3k1ZmJHRnpkRmR5WVhCd1pXUkpibVp2SUQwZ2JuVnNiRHRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDl3Y205alpYTnpJRDBnY0hKdlkyVnpjenRjY2x4dVhISmNiaUFnSUNCMGFHbHpMbDlqYkdsd0lEMGdZMnhwY0R0Y2NseHVJQ0FnSUhSb2FYTXVYMjVoYldVZ1BTQnVZVzFsSUh4OElDaGpiR2x3SUNZbUlHTnNhWEF1Ym1GdFpTazdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQkFjSEp2Y0dWeWRIa2dZVzVwYldGMGIzSmNjbHh1SUNBZ0lDQXFJRUIwZVhCbElIdEJibWx0WVhScGIyNUJibWx0WVhSdmNuMWNjbHh1SUNBZ0lDQXFMMXh5WEc0Z0lDQWdkR2hwY3k1aGJtbHRZWFJ2Y2lBOUlHNTFiR3c3WEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0JqZFhKMlpYTWdiR2x6ZEM1Y2NseHVJQ0FnSUNBcUlDRWplbWdnNXB1eTU3cS81WWlYNktHbzQ0Q0NYSEpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWTNWeWRtVnpYSEpjYmlBZ0lDQWdLaUJBZEhsd1pTQjdUMkpxWldOMFcxMTlYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSFJvYVhNdVkzVnlkbVZ6SUQwZ1cxMDdYSEpjYmx4eVhHNGdJQ0FnTHk4Z2FIUjBjRG92TDNkM2R5NTNNeTV2Y21jdlZGSXZkMlZpTFdGdWFXMWhkR2x2Ym5NdkkybGtiQzFrWldZdFFXNXBiV0YwYVc5dVZHbHRhVzVuWEhKY2JseHlYRzRnSUNBZ0x5b3FYSEpjYmlBZ0lDQWdLaUFoSTJWdUlGUm9aU0J6ZEdGeWRDQmtaV3hoZVNCM2FHbGphQ0J5WlhCeVpYTmxiblJ6SUhSb1pTQnVkVzFpWlhJZ2IyWWdjMlZqYjI1a2N5Qm1jbTl0SUdGdUlHRnVhVzFoZEdsdmJpZHpJSE4wWVhKMElIUnBiV1VnZEc4Z2RHaGxJSE4wWVhKMElHOW1YSEpjYmlBZ0lDQWdLaUIwYUdVZ1lXTjBhWFpsSUdsdWRHVnlkbUZzTGx4eVhHNGdJQ0FnSUNvZ0lTTjZhQ0RsdTdib3Y1L2xwSnJsc0pIbnA1TG1rcTNtbEw3amdJSmNjbHh1SUNBZ0lDQXFYSEpjYmlBZ0lDQWdLaUJBY0hKdmNHVnlkSGtnWkdWc1lYbGNjbHh1SUNBZ0lDQXFJRUIwZVhCbElIdE9kVzFpWlhKOVhISmNiaUFnSUNBZ0tpQkFaR1ZtWVhWc2RDQXdYSEpjYmlBZ0lDQWdLaTljY2x4dUlDQWdJSFJvYVhNdVpHVnNZWGtnUFNBd08xeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1lXNXBiV0YwYVc5dUozTWdhWFJsY21GMGFXOXVJR052ZFc1MElIQnliM0JsY25SNUxseHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUVnY21WaGJDQnVkVzFpWlhJZ1ozSmxZWFJsY2lCMGFHRnVJRzl5SUdWeGRXRnNJSFJ2SUhwbGNtOGdLR2x1WTJ4MVpHbHVaeUJ3YjNOcGRHbDJaU0JwYm1acGJtbDBlU2tnY21Wd2NtVnpaVzUwYVc1bklIUm9aU0J1ZFcxaVpYSWdiMllnZEdsdFpYTmNjbHh1SUNBZ0lDQXFJSFJ2SUhKbGNHVmhkQ0IwYUdVZ1lXNXBiV0YwYVc5dUlHNXZaR1V1WEhKY2JpQWdJQ0FnS2x4eVhHNGdJQ0FnSUNvZ1ZtRnNkV1Z6SUd4bGMzTWdkR2hoYmlCNlpYSnZJR0Z1WkNCT1lVNGdkbUZzZFdWeklHRnlaU0IwY21WaGRHVmtJR0Z6SUhSb1pTQjJZV3gxWlNBeExqQWdabTl5SUhSb1pTQndkWEp3YjNObElHOW1JSFJwYldsdVp5QnRiMlJsYkZ4eVhHNGdJQ0FnSUNvZ1kyRnNZM1ZzWVhScGIyNXpMbHh5WEc0Z0lDQWdJQ3BjY2x4dUlDQWdJQ0FxSUNFamVtZ2c2TCt0NUx1ajVxeWg1cFd3Nzd5TTVveUg1WXFvNTVTNzVwS3Q1cFMrNWFTYTViQ1I1cXloNVpDTzU3dVQ1cDJmTENCdWIzSnRZV3hwZW1VZ2RHbHRaZU9BZ2lEbHBvSWdNaTQxNzd5SU11YXNvZVdOaXUrOGlWeHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J5WlhCbFlYUkRiM1Z1ZEZ4eVhHNGdJQ0FnSUNvZ1FIUjVjR1VnZTA1MWJXSmxjbjFjY2x4dUlDQWdJQ0FxSUVCa1pXWmhkV3gwSURGY2NseHVJQ0FnSUNBcUwxeHlYRzRnSUNBZ2RHaHBjeTV5WlhCbFlYUkRiM1Z1ZENBOUlERTdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1SUZSb1pTQnBkR1Z5WVhScGIyNGdaSFZ5WVhScGIyNGdiMllnZEdocGN5QmhibWx0WVhScGIyNGdhVzRnYzJWamIyNWtjeTRnS0d4bGJtZDBhQ2xjY2x4dUlDQWdJQ0FxSUNFamVtZ2c1WTJWNXF5aDVZcW81NVM3NTVxRTVveUI1N3V0NXBlMjZaZTA3N3lNNTZlUzQ0Q0NYSEpjYmlBZ0lDQWdLbHh5WEc0Z0lDQWdJQ29nUUhCeWIzQmxjblI1SUdSMWNtRjBhVzl1WEhKY2JpQWdJQ0FnS2lCQWRIbHdaU0I3VG5WdFltVnlmVnh5WEc0Z0lDQWdJQ29nUUhKbFlXUlBibXg1WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhSb2FYTXVaSFZ5WVhScGIyNGdQU0F4TzF4eVhHNWNjbHh1SUNBZ0lDOHFLbHh5WEc0Z0lDQWdJQ29nSVNObGJpQlVhR1VnWVc1cGJXRjBhVzl1SjNNZ2NHeGhlV0poWTJzZ2MzQmxaV1F1SURFZ2FYTWdibTl5YldGc0lIQnNZWGxpWVdOcklITndaV1ZrTGx4eVhHNGdJQ0FnSUNvZ0lTTjZhQ0Rta3EzbWxMN3BnSi9uam9mamdJSmNjbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0J6Y0dWbFpGeHlYRzRnSUNBZ0lDb2dRSFI1Y0dVZ2UwNTFiV0psY24xY2NseHVJQ0FnSUNBcUlFQmtaV1poZFd4ME9pQXhMakJjY2x4dUlDQWdJQ0FxTDF4eVhHNGdJQ0FnZEdocGN5NXpjR1ZsWkNBOUlERTdYSEpjYmx4eVhHNGdJQ0FnTHlvcVhISmNiaUFnSUNBZ0tpQWhJMlZ1WEhKY2JpQWdJQ0FnS2lCWGNtRndjR2x1WnlCdGIyUmxJRzltSUhSb1pTQndiR0Y1YVc1bklHRnVhVzFoZEdsdmJpNWNjbHh1SUNBZ0lDQXFJRTV2ZEdsalpTQTZJR1I1Ym1GdGFXTWdZMmhoYm1kbElIZHlZWEJOYjJSbElIZHBiR3dnY21WelpYUWdkR2x0WlNCaGJtUWdjbVZ3WldGMFEyOTFiblFnY0hKdmNHVnlkSGxjY2x4dUlDQWdJQ0FxSUNFamVtaGNjbHh1SUNBZ0lDQXFJT1dLcU9lVXUrVytxdWVPcithV3VlVzhqK09BZ2x4eVhHNGdJQ0FnSUNvZzZaeUE2S2FCNXJPbzVvU1A1NXFFNXBpdjc3eU01WXFvNW9DQjVMK3U1cFM1SUhkeVlYQk5iMlJsSU9hWHR1KzhqT1M4bXVtSGplZTlyaUIwYVcxbElPUzdwZVdQaWlCeVpYQmxZWFJEYjNWdWRGeHlYRzRnSUNBZ0lDcGNjbHh1SUNBZ0lDQXFJRUJ3Y205d1pYSjBlU0IzY21Gd1RXOWtaVnh5WEc0Z0lDQWdJQ29nUUhSNWNHVWdlMWR5WVhCTmIyUmxmVnh5WEc0Z0lDQWdJQ29nUUdSbFptRjFiSFE2SUZkeVlYQk5iMlJsTGs1dmNtMWhiRnh5WEc0Z0lDQWdJQ292WEhKY2JpQWdJQ0IwYUdsekxuZHlZWEJOYjJSbElEMGdWM0poY0UxdlpHVXVUbTl5YldGc08xeHlYRzVjY2x4dUlDQWdJQzhxS2x4eVhHNGdJQ0FnSUNvZ0lTTmxiaUJVYUdVZ1kzVnljbVZ1ZENCMGFXMWxJRzltSUhSb2FYTWdZVzVwYldGMGFXOXVJR2x1SUhObFkyOXVaSE11WEhKY2JpQWdJQ0FnS2lBaEkzcG9JT1dLcU9lVXUrVzlrK1dKamVlYWhPYVh0dW1YdE8rOGpPZW5rdU9BZ2x4eVhHNGdJQ0FnSUNvZ1FIQnliM0JsY25SNUlIUnBiV1ZjY2x4dUlDQWdJQ0FxSUVCMGVYQmxJSHRPZFcxaVpYSjlYSEpjYmlBZ0lDQWdLaUJBWkdWbVlYVnNkQ0F3WEhKY2JpQWdJQ0FnS2k5Y2NseHVJQ0FnSUhSb2FYTXVkR2x0WlNBOUlEQTdYSEpjYmx4eVhHNGdJQ0FnTHk4Z1FXNXBiV0YwYVc5dUlHRnpJR1YyWlc1MElIUmhjbWRsZEZ4eVhHNGdJQ0FnZEdocGN5NWZkR0Z5WjJWMElEMGdiblZzYkR0Y2NseHVJQ0FnSUhSb2FYTXVYMnhoYzNSbWNtRnRaVVYyWlc1MFQyNGdQU0JtWVd4elpUdGNjbHh1SUNBZ0lIUm9hWE11WlcxcGRDQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWVhKbmN5QTlJRzVsZHlCQmNuSmhlU2hoY21kMWJXVnVkSE11YkdWdVozUm9LVHRjY2x4dUlDQWdJQ0FnSUNCbWIzSWdLSFpoY2lCcElEMGdNQ3dnYkNBOUlHRnlaM011YkdWdVozUm9PeUJwSUR3Z2JEc2dhU3NyS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUdGeVozTmJhVjBnUFNCaGNtZDFiV1Z1ZEhOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHTmpMbVJwY21WamRHOXlMbWRsZEVGdWFXMWhkR2x2YmsxaGJtRm5aWElvS1M1d2RYTm9SR1ZzWVhsRmRtVnVkQ2gwYUdsekxDQW5YMlZ0YVhRbkxDQmhjbWR6S1R0Y2NseHVJQ0FnSUgwN1hISmNibjFjY2x4dWFuTXVaWGgwWlc1a0tFRnVhVzFoZEdsdmJsTjBZWFJsTENCUWJHRjVZV0pzWlNrN1hISmNibHh5WEc1MllYSWdjSEp2ZEc4Z1BTQkJibWx0WVhScGIyNVRkR0YwWlM1d2NtOTBiM1I1Y0dVN1hISmNibHh5WEc1d2NtOTBieTVmWlcxcGRDQTlJR1oxYm1OMGFXOXVJQ2gwZVhCbExDQnpkR0YwWlNrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzUmhjbWRsZENBbUppQjBhR2x6TGw5MFlYSm5aWFF1YVhOV1lXeHBaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDNSaGNtZGxkQzVsYldsMEtIUjVjR1VzSUhSNWNHVXNJSE4wWVhSbEtUdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVYSEpjYm5CeWIzUnZMbTl1SUQwZ1puVnVZM1JwYjI0Z0tIUjVjR1VzSUdOaGJHeGlZV05yTENCMFlYSm5aWFFwSUh0Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5MFlYSm5aWFFnSmlZZ2RHaHBjeTVmZEdGeVoyVjBMbWx6Vm1Gc2FXUXBJSHRjY2x4dUlDQWdJQ0FnSUNCcFppQW9kSGx3WlNBOVBUMGdKMnhoYzNSbWNtRnRaU2NwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWZiR0Z6ZEdaeVlXMWxSWFpsYm5SUGJpQTlJSFJ5ZFdVN1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc0Z0lDQWdJQ0FnSUhKbGRIVnliaUIwYUdsekxsOTBZWEpuWlhRdWIyNG9kSGx3WlN3Z1kyRnNiR0poWTJzc0lIUmhjbWRsZENrN1hISmNiaUFnSUNCOVhISmNiaUFnSUNCbGJITmxJSHRjY2x4dUlDQWdJQ0FnSUNCeVpYUjFjbTRnYm5Wc2JEdGNjbHh1SUNBZ0lIMWNjbHh1ZlR0Y2NseHVYSEpjYm5CeWIzUnZMbTl1WTJVZ1BTQm1kVzVqZEdsdmJpQW9kSGx3WlN3Z1kyRnNiR0poWTJzc0lIUmhjbWRsZENrZ2UxeHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVgzUmhjbWRsZENBbUppQjBhR2x6TGw5MFlYSm5aWFF1YVhOV1lXeHBaQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwZVhCbElEMDlQU0FuYkdGemRHWnlZVzFsSnlrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDlzWVhOMFpuSmhiV1ZGZG1WdWRFOXVJRDBnZEhKMVpUdGNjbHh1SUNBZ0lDQWdJQ0I5WEhKY2JpQWdJQ0FnSUNBZ2JHVjBJSE5sYkdZZ1BTQjBhR2x6TzF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkwWVhKblpYUXViMjVqWlNoMGVYQmxMQ0JtZFc1amRHbHZiaUFvWlhabGJuUXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdZMkZzYkdKaFkyc3VZMkZzYkNoMFlYSm5aWFFzSUdWMlpXNTBLVHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdjMlZzWmk1ZmJHRnpkR1p5WVcxbFJYWmxiblJQYmlBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnSUNBZ0lIMHBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlHNTFiR3c3WEhKY2JpQWdJQ0I5WEhKY2JuMDdYSEpjYmx4eVhHNXdjbTkwYnk1dlptWWdQU0JtZFc1amRHbHZiaUFvZEhsd1pTd2dZMkZzYkdKaFkyc3NJSFJoY21kbGRDa2dlMXh5WEc0Z0lDQWdhV1lnS0hSb2FYTXVYM1JoY21kbGRDQW1KaUIwYUdsekxsOTBZWEpuWlhRdWFYTldZV3hwWkNrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGVYQmxJRDA5UFNBbmJHRnpkR1p5WVcxbEp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQnBaaUFvSVhSb2FYTXVYM1JoY21kbGRDNW9ZWE5GZG1WdWRFeHBjM1JsYm1WeUtIUjVjR1VwS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TGw5c1lYTjBabkpoYldWRmRtVnVkRTl1SUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJSDFjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZmRHRnlaMlYwTG05bVppaDBlWEJsTENCallXeHNZbUZqYXl3Z2RHRnlaMlYwS1R0Y2NseHVJQ0FnSUgxY2NseHVmVHRjY2x4dVhISmNibkJ5YjNSdkxsOXpaWFJGZG1WdWRGUmhjbWRsZENBOUlHWjFibU4wYVc5dUlDaDBZWEpuWlhRcElIdGNjbHh1SUNBZ0lIUm9hWE11WDNSaGNtZGxkQ0E5SUhSaGNtZGxkRHRjY2x4dWZUdGNjbHh1WEhKY2JuQnliM1J2TG05dVVHeGhlU0E5SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lDOHZJSEpsY0d4aGVWeHlYRzRnSUNBZ2RHaHBjeTV6WlhSVWFXMWxLREFwTzF4eVhHNGdJQ0FnZEdocGN5NWZaR1ZzWVhsVWFXMWxJRDBnZEdocGN5NWZaR1ZzWVhrN1hISmNiaUFnSUNCY2NseHVJQ0FnSUdOakxtUnBjbVZqZEc5eUxtZGxkRUZ1YVcxaGRHbHZiazFoYm1GblpYSW9LUzVoWkdSQmJtbHRZWFJwYjI0b2RHaHBjeWs3WEhKY2JseHlYRzRnSUNBZ2FXWWdLSFJvYVhNdVlXNXBiV0YwYjNJcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxtRnVhVzFoZEc5eUxtRmtaRUZ1YVcxaGRHbHZiaWgwYUdsektUdGNjbHh1SUNBZ0lIMWNjbHh1SUNBZ0lGeHlYRzRnSUNBZ2RHaHBjeTVsYldsMEtDZHdiR0Y1Snl3Z2RHaHBjeWs3WEhKY2JuMDdYSEpjYmx4eVhHNXdjbTkwYnk1dmJsTjBiM0FnUFNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQnBaaUFvSVhSb2FYTXVhWE5RWVhWelpXUXBJSHRjY2x4dUlDQWdJQ0FnSUNCall5NWthWEpsWTNSdmNpNW5aWFJCYm1sdFlYUnBiMjVOWVc1aFoyVnlLQ2t1Y21WdGIzWmxRVzVwYldGMGFXOXVLSFJvYVhNcE8xeHlYRzRnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFHbHpMbUZ1YVcxaGRHOXlLU0I3WEhKY2JpQWdJQ0FnSUNBZ2RHaHBjeTVoYm1sdFlYUnZjaTV5WlcxdmRtVkJibWx0WVhScGIyNG9kR2hwY3lrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdkR2hwY3k1bGJXbDBLQ2R6ZEc5d0p5d2dkR2hwY3lrN1hISmNibjA3WEhKY2JseHlYRzV3Y205MGJ5NXZibEpsYzNWdFpTQTlJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUdOakxtUnBjbVZqZEc5eUxtZGxkRUZ1YVcxaGRHbHZiazFoYm1GblpYSW9LUzVoWkdSQmJtbHRZWFJwYjI0b2RHaHBjeWs3WEhKY2JpQWdJQ0IwYUdsekxtVnRhWFFvSjNKbGMzVnRaU2NzSUhSb2FYTXBPMXh5WEc1OU8xeHlYRzVjY2x4dWNISnZkRzh1YjI1UVlYVnpaU0E5SUdaMWJtTjBhVzl1SUNncElIdGNjbHh1SUNBZ0lHTmpMbVJwY21WamRHOXlMbWRsZEVGdWFXMWhkR2x2YmsxaGJtRm5aWElvS1M1eVpXMXZkbVZCYm1sdFlYUnBiMjRvZEdocGN5azdYSEpjYmlBZ0lDQjBhR2x6TG1WdGFYUW9KM0JoZFhObEp5d2dkR2hwY3lrN1hISmNibjA3WEhKY2JseHlYRzV3Y205MGJ5NXpaWFJVYVcxbElEMGdablZ1WTNScGIyNGdLSFJwYldVcElIdGNjbHh1SUNBZ0lIUm9hWE11WDJOMWNuSmxiblJHY21GdFpWQnNZWGxsWkNBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnZEdocGN5NTBhVzFsSUQwZ2RHbHRaU0I4ZkNBd08xeHlYRzVjY2x4dUlDQWdJSFpoY2lCamRYSjJaWE1nUFNCMGFHbHpMbU4xY25abGN6dGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc0lEMGdZM1Z5ZG1WekxteGxibWQwYURzZ2FTQThJR3c3SUdrckt5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQmpkWEoyWlNBOUlHTjFjblpsYzF0cFhUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb1kzVnlkbVV1YjI1VWFXMWxRMmhoYm1kbFpFMWhiblZoYkd4NUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjblpsTG05dVZHbHRaVU5vWVc1blpXUk5ZVzUxWVd4c2VTaDBhVzFsTENCMGFHbHpLVHRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibjA3WEhKY2JseHlYRzVtZFc1amRHbHZiaUJ3Y205alpYTnpJQ2dwSUh0Y2NseHVJQ0FnSUM4dklITmhiWEJzWlZ4eVhHNGdJQ0FnZG1GeUlHbHVabThnUFNCMGFHbHpMbk5oYlhCc1pTZ3BPMXh5WEc1Y2NseHVJQ0FnSUdsbUlDaDBhR2x6TGw5c1lYTjBabkpoYldWRmRtVnVkRTl1S1NCN1hISmNiaUFnSUNBZ0lDQWdkbUZ5SUd4aGMzUkpibVp2TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2doZEdocGN5NWZiR0Z6ZEZkeVlYQndaV1JKYm1adktTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHeGhjM1JKYm1adklEMGdkR2hwY3k1ZmJHRnpkRmR5WVhCd1pXUkpibVp2SUQwZ2JtVjNJRmR5WVhCd1pXUkpibVp2S0dsdVptOHBPMXh5WEc0Z0lDQWdJQ0FnSUgwZ1pXeHpaU0I3WEhKY2JpQWdJQ0FnSUNBZ0lDQWdJR3hoYzNSSmJtWnZJRDBnZEdocGN5NWZiR0Z6ZEZkeVlYQndaV1JKYm1adk8xeHlYRzRnSUNBZ0lDQWdJSDFjY2x4dVhISmNiaUFnSUNBZ0lDQWdhV1lnS0hSb2FYTXVjbVZ3WldGMFEyOTFiblFnUGlBeElDWW1JQ2dvYVc1bWJ5NXBkR1Z5WVhScGIyNXpJSHdnTUNrZ1BpQW9iR0Z6ZEVsdVptOHVhWFJsY21GMGFXOXVjeUI4SURBcEtTa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KMnhoYzNSbWNtRnRaU2NzSUhSb2FYTXBPMXh5WEc0Z0lDQWdJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQWdJQ0FnYkdGemRFbHVabTh1YzJWMEtHbHVabThwTzF4eVhHNGdJQ0FnZlZ4eVhHNWNjbHh1SUNBZ0lHbG1JQ2hwYm1adkxuTjBiM0J3WldRcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuTjBiM0FvS1R0Y2NseHVJQ0FnSUNBZ0lDQjBhR2x6TG1WdGFYUW9KMlpwYm1semFHVmtKeXdnZEdocGN5azdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm1aMWJtTjBhVzl1SUhOcGJYQnNaVkJ5YjJObGMzTWdLQ2tnZTF4eVhHNGdJQ0FnZG1GeUlIUnBiV1VnUFNCMGFHbHpMblJwYldVN1hISmNiaUFnSUNCMllYSWdaSFZ5WVhScGIyNGdQU0IwYUdsekxtUjFjbUYwYVc5dU8xeHlYRzVjY2x4dUlDQWdJR2xtSUNoMGFXMWxJRDRnWkhWeVlYUnBiMjRwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhVzFsSUQwZ2RHbHRaU0FsSUdSMWNtRjBhVzl1TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYVcxbElEMDlQU0F3S1NCMGFXMWxJRDBnWkhWeVlYUnBiMjQ3WEhKY2JpQWdJQ0I5WEhKY2JpQWdJQ0JsYkhObElHbG1JQ2gwYVcxbElEd2dNQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lIUnBiV1VnUFNCMGFXMWxJQ1VnWkhWeVlYUnBiMjQ3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLSFJwYldVZ0lUMDlJREFwSUhScGJXVWdLejBnWkhWeVlYUnBiMjQ3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnlJSEpoZEdsdklEMGdkR2x0WlNBdklHUjFjbUYwYVc5dU8xeHlYRzVjY2x4dUlDQWdJSFpoY2lCamRYSjJaWE1nUFNCMGFHbHpMbU4xY25abGN6dGNjbHh1SUNBZ0lHWnZjaUFvZG1GeUlHa2dQU0F3TENCc1pXNGdQU0JqZFhKMlpYTXViR1Z1WjNSb095QnBJRHdnYkdWdU95QnBLeXNwSUh0Y2NseHVJQ0FnSUNBZ0lDQjJZWElnWTNWeWRtVWdQU0JqZFhKMlpYTmJhVjA3WEhKY2JpQWdJQ0FnSUNBZ1kzVnlkbVV1YzJGdGNHeGxLSFJwYldVc0lISmhkR2x2TENCMGFHbHpLVHRjY2x4dUlDQWdJSDFjY2x4dVhISmNiaUFnSUNCcFppQW9kR2hwY3k1ZmJHRnpkR1p5WVcxbFJYWmxiblJQYmlrZ2UxeHlYRzRnSUNBZ0lDQWdJR2xtSUNoMGFHbHpMbDlzWVhOMFNYUmxjbUYwYVc5dWN5QTlQVDBnZFc1a1pXWnBibVZrS1NCN1hISmNiaUFnSUNBZ0lDQWdJQ0FnSUhSb2FYTXVYMnhoYzNSSmRHVnlZWFJwYjI1eklEMGdjbUYwYVc4N1hISmNiaUFnSUNBZ0lDQWdmVnh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvS0hSb2FYTXVkR2x0WlNBK0lEQWdKaVlnZEdocGN5NWZiR0Z6ZEVsMFpYSmhkR2x2Ym5NZ1BpQnlZWFJwYnlrZ2ZId2dLSFJvYVhNdWRHbHRaU0E4SURBZ0ppWWdkR2hwY3k1ZmJHRnpkRWwwWlhKaGRHbHZibk1nUENCeVlYUnBieWtwSUh0Y2NseHVJQ0FnSUNBZ0lDQWdJQ0FnZEdocGN5NWxiV2wwS0Nkc1lYTjBabkpoYldVbkxDQjBhR2x6S1R0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnSUNBZ0lIUm9hWE11WDJ4aGMzUkpkR1Z5WVhScGIyNXpJRDBnY21GMGFXODdYSEpjYmlBZ0lDQjlYSEpjYm4xY2NseHVYSEpjYm5CeWIzUnZMblZ3WkdGMFpTQTlJR1oxYm1OMGFXOXVJQ2hrWld4MFlTa2dlMXh5WEc0Z0lDQWdMeThnWTJGc1kzVnNZWFJsSUdSbGJHRjVJSFJwYldWY2NseHVYSEpjYmlBZ0lDQnBaaUFvZEdocGN5NWZaR1ZzWVhsVWFXMWxJRDRnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgyUmxiR0Y1VkdsdFpTQXRQU0JrWld4MFlUdGNjbHh1SUNBZ0lDQWdJQ0JwWmlBb2RHaHBjeTVmWkdWc1lYbFVhVzFsSUQ0Z01Da2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQXZMeUJ6ZEdsc2JDQjNZV2wwYVc1blhISmNiaUFnSUNBZ0lDQWdJQ0FnSUhKbGRIVnlianRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdMeThnYldGclpTQm1hWEp6ZENCbWNtRnRaU0J3WlhKbVpXTjBYSEpjYmx4eVhHNGdJQ0FnTHk5MllYSWdjR3hoZVZCbGNtWmxZM1JHYVhKemRFWnlZVzFsSUQwZ0tIUm9hWE11ZEdsdFpTQTlQVDBnTUNrN1hISmNiaUFnSUNCcFppQW9kR2hwY3k1ZlkzVnljbVZ1ZEVaeVlXMWxVR3hoZVdWa0tTQjdYSEpjYmlBZ0lDQWdJQ0FnZEdocGN5NTBhVzFsSUNzOUlDaGtaV3gwWVNBcUlIUm9hWE11YzNCbFpXUXBPMXh5WEc0Z0lDQWdmVnh5WEc0Z0lDQWdaV3h6WlNCN1hISmNiaUFnSUNBZ0lDQWdkR2hwY3k1ZlkzVnljbVZ1ZEVaeVlXMWxVR3hoZVdWa0lEMGdkSEoxWlR0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjBhR2x6TGw5d2NtOWpaWE56S0NrN1hISmNibjA3WEhKY2JseHlYRzV3Y205MGJ5NWZibVZsWkZKbGRtVnljeUE5SUdaMWJtTjBhVzl1SUNoamRYSnlaVzUwU1hSbGNtRjBhVzl1Y3lrZ2UxeHlYRzRnSUNBZ2RtRnlJSGR5WVhCTmIyUmxJRDBnZEdocGN5NTNjbUZ3VFc5a1pUdGNjbHh1SUNBZ0lIWmhjaUJ1WldWa1VtVjJaWEp6SUQwZ1ptRnNjMlU3WEhKY2JseHlYRzRnSUNBZ2FXWWdLQ2gzY21Gd1RXOWtaU0FtSUZkeVlYQk5iMlJsVFdGemF5NVFhVzVuVUc5dVp5a2dQVDA5SUZkeVlYQk5iMlJsVFdGemF5NVFhVzVuVUc5dVp5a2dlMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnBjMFZ1WkNBOUlHTjFjbkpsYm5SSmRHVnlZWFJwYjI1eklDMGdLR04xY25KbGJuUkpkR1Z5WVhScGIyNXpJSHdnTUNrZ1BUMDlJREE3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6Ulc1a0lDWW1JQ2hqZFhKeVpXNTBTWFJsY21GMGFXOXVjeUErSURBcEtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHTjFjbkpsYm5SSmRHVnlZWFJwYjI1eklDMDlJREU3WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzVjY2x4dUlDQWdJQ0FnSUNCMllYSWdhWE5QWkdSSmRHVnlZWFJwYjI0Z1BTQmpkWEp5Wlc1MFNYUmxjbUYwYVc5dWN5QW1JREU3WEhKY2JpQWdJQ0FnSUNBZ2FXWWdLR2x6VDJSa1NYUmxjbUYwYVc5dUtTQjdYSEpjYmlBZ0lDQWdJQ0FnSUNBZ0lHNWxaV1JTWlhabGNuTWdQU0FoYm1WbFpGSmxkbVZ5Y3p0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQjlYSEpjYmlBZ0lDQnBaaUFvS0hkeVlYQk5iMlJsSUNZZ1YzSmhjRTF2WkdWTllYTnJMbEpsZG1WeWMyVXBJRDA5UFNCWGNtRndUVzlrWlUxaGMyc3VVbVYyWlhKelpTa2dlMXh5WEc0Z0lDQWdJQ0FnSUc1bFpXUlNaWFpsY25NZ1BTQWhibVZsWkZKbGRtVnljenRjY2x4dUlDQWdJSDFjY2x4dUlDQWdJSEpsZEhWeWJpQnVaV1ZrVW1WMlpYSnpPMXh5WEc1OU8xeHlYRzVjY2x4dWNISnZkRzh1WjJWMFYzSmhjSEJsWkVsdVptOGdQU0JtZFc1amRHbHZiaUFvZEdsdFpTd2dhVzVtYnlrZ2UxeHlYRzRnSUNBZ2FXNW1ieUE5SUdsdVptOGdmSHdnYm1WM0lGZHlZWEJ3WldSSmJtWnZLQ2s3WEhKY2JpQWdJQ0JjY2x4dUlDQWdJSFpoY2lCemRHOXdjR1ZrSUQwZ1ptRnNjMlU3WEhKY2JpQWdJQ0IyWVhJZ1pIVnlZWFJwYjI0Z1BTQjBhR2x6TG1SMWNtRjBhVzl1TzF4eVhHNGdJQ0FnZG1GeUlISmxjR1ZoZEVOdmRXNTBJRDBnZEdocGN5NXlaWEJsWVhSRGIzVnVkRHRjY2x4dVhISmNiaUFnSUNCMllYSWdZM1Z5Y21WdWRFbDBaWEpoZEdsdmJuTWdQU0IwYVcxbElENGdNQ0EvSUNoMGFXMWxJQzhnWkhWeVlYUnBiMjRwSURvZ0xTaDBhVzFsSUM4Z1pIVnlZWFJwYjI0cE8xeHlYRzRnSUNBZ2FXWWdLR04xY25KbGJuUkpkR1Z5WVhScGIyNXpJRDQ5SUhKbGNHVmhkRU52ZFc1MEtTQjdYSEpjYmlBZ0lDQWdJQ0FnWTNWeWNtVnVkRWwwWlhKaGRHbHZibk1nUFNCeVpYQmxZWFJEYjNWdWREdGNjbHh1WEhKY2JpQWdJQ0FnSUNBZ2MzUnZjSEJsWkNBOUlIUnlkV1U3WEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSFJsYlhCU1lYUnBieUE5SUhKbGNHVmhkRU52ZFc1MElDMGdLSEpsY0dWaGRFTnZkVzUwSUh3Z01DazdYSEpjYmlBZ0lDQWdJQ0FnYVdZZ0tIUmxiWEJTWVhScGJ5QTlQVDBnTUNrZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMFpXMXdVbUYwYVc4Z1BTQXhPeUFnTHk4ZzVhYUM1cDZjNXBLdDVwUys2TCtINzd5TTVZcW81NVM3NUxpTjVhU041TDJOWEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJSFJwYldVZ1BTQjBaVzF3VW1GMGFXOGdLaUJrZFhKaGRHbHZiaUFxSUNoMGFXMWxJRDRnTUNBL0lERWdPaUF0TVNrN1hISmNiaUFnSUNCOVhISmNibHh5WEc0Z0lDQWdhV1lnS0hScGJXVWdQaUJrZFhKaGRHbHZiaWtnZTF4eVhHNGdJQ0FnSUNBZ0lIWmhjaUIwWlcxd1ZHbHRaU0E5SUhScGJXVWdKU0JrZFhKaGRHbHZianRjY2x4dUlDQWdJQ0FnSUNCMGFXMWxJRDBnZEdWdGNGUnBiV1VnUFQwOUlEQWdQeUJrZFhKaGRHbHZiaUE2SUhSbGJYQlVhVzFsTzF4eVhHNGdJQ0FnZlZ4eVhHNGdJQ0FnWld4elpTQnBaaUFvZEdsdFpTQThJREFwSUh0Y2NseHVJQ0FnSUNBZ0lDQjBhVzFsSUQwZ2RHbHRaU0FsSUdSMWNtRjBhVzl1TzF4eVhHNGdJQ0FnSUNBZ0lHbG1JQ2gwYVcxbElDRTlQU0F3SUNrZ2RHbHRaU0FyUFNCa2RYSmhkR2x2Ymp0Y2NseHVJQ0FnSUgxY2NseHVYSEpjYmlBZ0lDQjJZWElnYm1WbFpGSmxkbVZ5Y3lBOUlHWmhiSE5sTzF4eVhHNGdJQ0FnZG1GeUlITm9iM1ZzWkZkeVlYQWdQU0IwYUdsekxsOTNjbUZ3VFc5a1pTQW1JRmR5WVhCTmIyUmxUV0Z6YXk1VGFHOTFiR1JYY21Gd08xeHlYRzRnSUNBZ2FXWWdLSE5vYjNWc1pGZHlZWEFwSUh0Y2NseHVJQ0FnSUNBZ0lDQnVaV1ZrVW1WMlpYSnpJRDBnZEdocGN5NWZibVZsWkZKbGRtVnljeWhqZFhKeVpXNTBTWFJsY21GMGFXOXVjeWs3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2RtRnlJR1JwY21WamRHbHZiaUE5SUc1bFpXUlNaWFpsY25NZ1B5QXRNU0E2SURFN1hISmNiaUFnSUNCcFppQW9kR2hwY3k1emNHVmxaQ0E4SURBcElIdGNjbHh1SUNBZ0lDQWdJQ0JrYVhKbFkzUnBiMjRnS2owZ0xURTdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnTHk4Z1kyRnNZM1ZzWVhSbElIZHlZWEJ3WldRZ2RHbHRaVnh5WEc0Z0lDQWdhV1lnS0hOb2IzVnNaRmR5WVhBZ0ppWWdibVZsWkZKbGRtVnljeWtnZTF4eVhHNGdJQ0FnSUNBZ0lIUnBiV1VnUFNCa2RYSmhkR2x2YmlBdElIUnBiV1U3WEhKY2JpQWdJQ0I5WEhKY2JseHlYRzRnSUNBZ2FXNW1ieTV5WVhScGJ5QTlJSFJwYldVZ0x5QmtkWEpoZEdsdmJqdGNjbHh1SUNBZ0lHbHVabTh1ZEdsdFpTQTlJSFJwYldVN1hISmNiaUFnSUNCcGJtWnZMbVJwY21WamRHbHZiaUE5SUdScGNtVmpkR2x2Ymp0Y2NseHVJQ0FnSUdsdVptOHVjM1J2Y0hCbFpDQTlJSE4wYjNCd1pXUTdYSEpjYmlBZ0lDQnBibVp2TG1sMFpYSmhkR2x2Ym5NZ1BTQmpkWEp5Wlc1MFNYUmxjbUYwYVc5dWN6dGNjbHh1WEhKY2JpQWdJQ0J5WlhSMWNtNGdhVzVtYnp0Y2NseHVmVHRjY2x4dVhISmNibkJ5YjNSdkxuTmhiWEJzWlNBOUlHWjFibU4wYVc5dUlDZ3BJSHRjY2x4dUlDQWdJSFpoY2lCcGJtWnZJRDBnZEdocGN5NW5aWFJYY21Gd2NHVmtTVzVtYnloMGFHbHpMblJwYldVc0lIUm9hWE11WDNkeVlYQndaV1JKYm1adktUdGNjbHh1SUNBZ0lIWmhjaUJqZFhKMlpYTWdQU0IwYUdsekxtTjFjblpsY3p0Y2NseHVJQ0FnSUdadmNpQW9kbUZ5SUdrZ1BTQXdMQ0JzWlc0Z1BTQmpkWEoyWlhNdWJHVnVaM1JvT3lCcElEd2diR1Z1T3lCcEt5c3BJSHRjY2x4dUlDQWdJQ0FnSUNCMllYSWdZM1Z5ZG1VZ1BTQmpkWEoyWlhOYmFWMDdYSEpjYmlBZ0lDQWdJQ0FnWTNWeWRtVXVjMkZ0Y0d4bEtHbHVabTh1ZEdsdFpTd2dhVzVtYnk1eVlYUnBieXdnZEdocGN5azdYSEpjYmlBZ0lDQjlYSEpjYmx4eVhHNGdJQ0FnY21WMGRYSnVJR2x1Wm04N1hISmNibjA3WEhKY2JseHlYRzVjY2x4dUx5b3FYSEpjYmlBcUlDRWpaVzRnVkdobElHTnNhWEFnZEdoaGRDQnBjeUJpWldsdVp5QndiR0Y1WldRZ1lua2dkR2hwY3lCaGJtbHRZWFJwYjI0Z2MzUmhkR1V1WEhKY2JpQXFJQ0VqZW1nZzVxMms1WXFvNTVTNzU0cTI1b0NCNXEyajVaeW81cEt0NXBTKzU1cUU1WW1xNkw2UjQ0Q0NYSEpjYmlBcUlFQndjbTl3WlhKMGVTQmpiR2x3WEhKY2JpQXFJRUIwZVhCbElIdEJibWx0WVhScGIyNURiR2x3ZlZ4eVhHNGdLaUJBWm1sdVlXeGNjbHh1SUNvdlhISmNibXB6TG1kbGRDaHdjbTkwYnl3Z0oyTnNhWEFuTENCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQnlaWFIxY200Z2RHaHBjeTVmWTJ4cGNEdGNjbHh1ZlNrN1hISmNibHh5WEc0dktpcGNjbHh1SUNvZ0lTTmxiaUJVYUdVZ2JtRnRaU0J2WmlCMGFHVWdjR3hoZVdsdVp5QmhibWx0WVhScGIyNHVYSEpjYmlBcUlDRWplbWdnNVlxbzU1Uzc1NXFFNVpDTjVhMlhYSEpjYmlBcUlFQndjbTl3WlhKMGVTQnVZVzFsWEhKY2JpQXFJRUIwZVhCbElIdFRkSEpwYm1kOVhISmNiaUFxSUVCeVpXRmtUMjVzZVZ4eVhHNGdLaTljY2x4dWFuTXVaMlYwS0hCeWIzUnZMQ0FuYm1GdFpTY3NJR1oxYm1OMGFXOXVJQ2dwSUh0Y2NseHVJQ0FnSUhKbGRIVnliaUIwYUdsekxsOXVZVzFsTzF4eVhHNTlLVHRjY2x4dVhISmNibXB6TG05aWMyOXNaWFJsS0hCeWIzUnZMQ0FuUVc1cGJXRjBhVzl1VTNSaGRHVXViR1Z1WjNSb0p5d2dKMlIxY21GMGFXOXVKeWs3WEhKY2JseHlYRzVxY3k1blpYUnpaWFFvY0hKdmRHOHNJQ2RqZFhKMlpVeHZZV1JsWkNjc1hISmNiaUFnSUNCbWRXNWpkR2x2YmlBb0tTQjdYSEpjYmlBZ0lDQWdJQ0FnY21WMGRYSnVJSFJvYVhNdVkzVnlkbVZ6TG14bGJtZDBhQ0ErSURBN1hISmNiaUFnSUNCOUxGeHlYRzRnSUNBZ1puVnVZM1JwYjI0Z0tDa2dlMXh5WEc0Z0lDQWdJQ0FnSUhSb2FYTXVZM1Z5ZG1WekxteGxibWQwYUNBOUlEQTdYSEpjYmlBZ0lDQjlYSEpjYmlrN1hISmNibHh5WEc1Y2NseHVhbk11WjJWMGMyVjBLSEJ5YjNSdkxDQW5kM0poY0UxdlpHVW5MRnh5WEc0Z0lDQWdablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDkzY21Gd1RXOWtaVHRjY2x4dUlDQWdJSDBzWEhKY2JpQWdJQ0JtZFc1amRHbHZiaUFvZG1Gc2RXVXBJSHRjY2x4dUlDQWdJQ0FnSUNCMGFHbHpMbDkzY21Gd1RXOWtaU0E5SUhaaGJIVmxPMXh5WEc1Y2NseHVJQ0FnSUNBZ0lDQnBaaUFvUTBOZlJVUkpWRTlTS1NCeVpYUjFjbTQ3WEhKY2JseHlYRzRnSUNBZ0lDQWdJQzh2SUdSNWJtRnRhV01nWTJoaGJtZGxJSGR5WVhCTmIyUmxJSGRwYkd3Z2JtVmxaQ0J5WlhObGRDQjBhVzFsSUhSdklEQmNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxuUnBiV1VnUFNBd08xeHlYRzVjY2x4dUlDQWdJQ0FnSUNCcFppQW9kbUZzZFdVZ0ppQlhjbUZ3VFc5a1pVMWhjMnN1VEc5dmNDa2dlMXh5WEc0Z0lDQWdJQ0FnSUNBZ0lDQjBhR2x6TG5KbGNHVmhkRU52ZFc1MElEMGdTVzVtYVc1cGRIazdYSEpjYmlBZ0lDQWdJQ0FnZlZ4eVhHNGdJQ0FnSUNBZ0lHVnNjMlVnZTF4eVhHNGdJQ0FnSUNBZ0lDQWdJQ0IwYUdsekxuSmxjR1ZoZEVOdmRXNTBJRDBnTVR0Y2NseHVJQ0FnSUNBZ0lDQjlYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0I5WEhKY2JpazdYSEpjYmx4eVhHNXFjeTVuWlhSelpYUW9jSEp2ZEc4c0lDZHlaWEJsWVhSRGIzVnVkQ2NzWEhKY2JpQWdJQ0JtZFc1amRHbHZiaUFvS1NCN1hISmNiaUFnSUNBZ0lDQWdjbVYwZFhKdUlIUm9hWE11WDNKbGNHVmhkRU52ZFc1ME8xeHlYRzRnSUNBZ2ZTeGNjbHh1SUNBZ0lHWjFibU4wYVc5dUlDaDJZV3gxWlNrZ2UxeHlYRzRnSUNBZ0lDQWdJSFJvYVhNdVgzSmxjR1ZoZEVOdmRXNTBJRDBnZG1Gc2RXVTdYSEpjYmlBZ0lDQWdJQ0FnWEhKY2JpQWdJQ0FnSUNBZ2RtRnlJSE5vYjNWc1pGZHlZWEFnUFNCMGFHbHpMbDkzY21Gd1RXOWtaU0FtSUZkeVlYQk5iMlJsVFdGemF5NVRhRzkxYkdSWGNtRndPMXh5WEc0Z0lDQWdJQ0FnSUhaaGNpQnlaWFpsY25ObElEMGdLSFJvYVhNdWQzSmhjRTF2WkdVZ0ppQlhjbUZ3VFc5a1pVMWhjMnN1VW1WMlpYSnpaU2tnUFQwOUlGZHlZWEJOYjJSbFRXRnpheTVTWlhabGNuTmxPMXh5WEc0Z0lDQWdJQ0FnSUdsbUlDaDJZV3gxWlNBOVBUMGdTVzVtYVc1cGRIa2dKaVlnSVhOb2IzVnNaRmR5WVhBZ0ppWWdJWEpsZG1WeWMyVXBJSHRjY2x4dUlDQWdJQ0FnSUNBZ0lDQWdkR2hwY3k1ZmNISnZZMlZ6Y3lBOUlITnBiWEJzWlZCeWIyTmxjM003WEhKY2JpQWdJQ0FnSUNBZ2ZWeHlYRzRnSUNBZ0lDQWdJR1ZzYzJVZ2UxeHlYRzRnSUNBZ0lDQWdJQ0FnSUNCMGFHbHpMbDl3Y205alpYTnpJRDBnY0hKdlkyVnpjenRjY2x4dUlDQWdJQ0FnSUNCOVhISmNiaUFnSUNCOVhISmNiaWs3WEhKY2JseHlYRzVxY3k1blpYUnpaWFFvY0hKdmRHOHNJQ2RrWld4aGVTY3NJRnh5WEc0Z0lDQWdablZ1WTNScGIyNGdLQ2tnZTF4eVhHNGdJQ0FnSUNBZ0lISmxkSFZ5YmlCMGFHbHpMbDlrWld4aGVUdGNjbHh1SUNBZ0lIMHNYSEpjYmlBZ0lDQm1kVzVqZEdsdmJpQW9kbUZzZFdVcElIdGNjbHh1SUNBZ0lDQWdJQ0IwYUdsekxsOWtaV3hoZVZScGJXVWdQU0IwYUdsekxsOWtaV3hoZVNBOUlIWmhiSFZsTzF4eVhHNGdJQ0FnZlZ4eVhHNHBPMXh5WEc1Y2NseHVYSEpjYm1OakxrRnVhVzFoZEdsdmJsTjBZWFJsSUQwZ2JXOWtkV3hsTG1WNGNHOXlkSE1nUFNCQmJtbHRZWFJwYjI1VGRHRjBaVHRjY2x4dUlsMTkiXX0=