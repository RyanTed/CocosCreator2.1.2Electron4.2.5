(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/playable.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var js = cc.js;
        var debug = require('../core/CCDebug');
        function Playable() {
            this._isPlaying = false;
            this._isPaused = false;
            this._stepOnce = false;
        }
        var prototype = Playable.prototype;
        js.get(prototype, 'isPlaying', function () {
            return this._isPlaying;
        }, true);
        js.get(prototype, 'isPaused', function () {
            return this._isPaused;
        }, true);
        var virtual = function virtual() {
        };
        prototype.onPlay = virtual;
        prototype.onPause = virtual;
        prototype.onResume = virtual;
        prototype.onStop = virtual;
        prototype.onError = virtual;
        prototype.play = function () {
            if (this._isPlaying) {
                if (this._isPaused) {
                    this._isPaused = false;
                    this.onResume();
                } else {
                    this.onError(debug.getError(3912));
                }
            } else {
                this._isPlaying = true;
                this.onPlay();
            }
        };
        prototype.stop = function () {
            if (this._isPlaying) {
                this._isPlaying = false;
                this.onStop();
                this._isPaused = false;
            }
        };
        prototype.pause = function () {
            if (this._isPlaying && !this._isPaused) {
                this._isPaused = true;
                this.onPause();
            }
        };
        prototype.resume = function () {
            if (this._isPlaying && this._isPaused) {
                this._isPaused = false;
                this.onResume();
            }
        };
        prototype.step = function () {
            this.pause();
            this._stepOnce = true;
            if (!this._isPlaying) {
                this.play();
            }
        };
        module.exports = Playable;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,