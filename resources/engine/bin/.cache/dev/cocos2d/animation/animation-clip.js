(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/animation-clip.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var WrapMode = require('./types').WrapMode;
        var _require = require('./animation-curves'), DynamicAnimCurve = _require.DynamicAnimCurve, quickFindIndex = _require.quickFindIndex;
        var sampleMotionPaths = require('./motion-path-helper').sampleMotionPaths;
        var binarySearch = require('../core/utils/binary-search').binarySearchEpsilon;
        var AnimationClip = cc.Class({
            name: 'cc.AnimationClip',
            extends: cc.Asset,
            properties: {
                _duration: {
                    default: 0,
                    type: 'Float'
                },
                duration: {
                    get: function get() {
                        return this._duration;
                    }
                },
                sample: { default: 60 },
                speed: { default: 1 },
                wrapMode: { default: WrapMode.Normal },
                curveData: {
                    default: {},
                    visible: false
                },
                events: {
                    default: [],
                    visible: false
                }
            },
            statics: {
                createWithSpriteFrames: function createWithSpriteFrames(spriteFrames, sample) {
                    if (!Array.isArray(spriteFrames)) {
                        cc.errorID(3905);
                        return null;
                    }
                    var clip = new AnimationClip();
                    clip.sample = sample || clip.sample;
                    clip._duration = spriteFrames.length / clip.sample;
                    var frames = [];
                    var step = 1 / clip.sample;
                    for (var i = 0, l = spriteFrames.length; i < l; i++) {
                        frames[i] = {
                            frame: i * step,
                            value: spriteFrames[i]
                        };
                    }
                    clip.curveData = { comps: { 'cc.Sprite': { 'spriteFrame': frames } } };
                    return clip;
                }
            },
            onLoad: function onLoad() {
                this._duration = Number.parseFloat(this.duration);
                this.speed = Number.parseFloat(this.speed);
                this.wrapMode = Number.parseInt(this.wrapMode);
                this.frameRate = Number.parseFloat(this.sample);
            },
            createPropCurve: function createPropCurve(target, propPath, keyframes) {
                var motionPaths = [];
                var isMotionPathProp = target instanceof cc.Node && propPath === 'position';
                var curve = new DynamicAnimCurve();
                curve.target = target;
                curve.prop = propPath;
                for (var i = 0, l = keyframes.length; i < l; i++) {
                    var keyframe = keyframes[i];
                    var ratio = keyframe.frame / this.duration;
                    curve.ratios.push(ratio);
                    if (isMotionPathProp) {
                        motionPaths.push(keyframe.motionPath);
                    }
                    var curveValue = keyframe.value;
                    curve.values.push(curveValue);
                    var curveTypes = keyframe.curve;
                    if (curveTypes) {
                        if (typeof curveTypes === 'string') {
                            curve.types.push(curveTypes);
                            continue;
                        } else if (Array.isArray(curveTypes)) {
                            if (curveTypes[0] === curveTypes[1] && curveTypes[2] === curveTypes[3]) {
                                curve.types.push(DynamicAnimCurve.Linear);
                            } else {
                                curve.types.push(DynamicAnimCurve.Bezier(curveTypes));
                            }
                            continue;
                        }
                    }
                    curve.types.push(DynamicAnimCurve.Linear);
                }
                if (isMotionPathProp) {
                    sampleMotionPaths(motionPaths, curve, this.duration, this.sample, target);
                }
                var ratios = curve.ratios;
                var currRatioDif = void 0, lastRatioDif = void 0;
                var canOptimize = true;
                var EPSILON = 0.000001;
                for (var _i = 1, _l = ratios.length; _i < _l; _i++) {
                    currRatioDif = ratios[_i] - ratios[_i - 1];
                    if (_i === 1) {
                        lastRatioDif = currRatioDif;
                    } else if (Math.abs(currRatioDif - lastRatioDif) > EPSILON) {
                        canOptimize = false;
                        break;
                    }
                }
                curve._findFrameIndex = canOptimize ? quickFindIndex : binarySearch;
                var firstValue = curve.values[0];
                if (firstValue !== undefined && firstValue !== null && !curve._lerp) {
                    if (typeof firstValue === 'number') {
                        curve._lerp = DynamicAnimCurve.prototype._lerpNumber;
                    } else if (firstValue instanceof cc.Quat) {
                        curve._lerp = DynamicAnimCurve.prototype._lerpQuat;
                    } else if (firstValue instanceof cc.Vec2 || firstValue instanceof cc.Vec3) {
                        curve._lerp = DynamicAnimCurve.prototype._lerpVector;
                    } else if (firstValue.lerp) {
                        curve._lerp = DynamicAnimCurve.prototype._lerpObject;
                    }
                }
                return curve;
            },
            createTargetCurves: function createTargetCurves(target, curveData, curves) {
                var propsData = curveData.props;
                var compsData = curveData.comps;
                if (propsData) {
                    for (var propPath in propsData) {
                        var data = propsData[propPath];
                        var curve = this.createPropCurve(target, propPath, data);
                        curves.push(curve);
                    }
                }
                if (compsData) {
                    for (var compName in compsData) {
                        var comp = target.getComponent(compName);
                        if (!comp) {
                            continue;
                        }
                        var compData = compsData[compName];
                        for (var _propPath in compData) {
                            var _data = compData[_propPath];
                            var _curve = this.createPropCurve(comp, _propPath, _data);
                            curves.push(_curve);
                        }
                    }
                }
            },
            createCurves: function createCurves(state, root) {
                var curveData = this.curveData;
                var childrenCurveDatas = curveData.paths;
                var curves = [];
                this.createTargetCurves(root, curveData, curves);
                for (var namePath in childrenCurveDatas) {
                    var target = cc.find(namePath, root);
                    if (!target) {
                        continue;
                    }
                    var childCurveDatas = childrenCurveDatas[namePath];
                    this.createTargetCurves(target, childCurveDatas, curves);
                }
                return curves;
            }
        });
        cc.AnimationClip = module.exports = AnimationClip;
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,