(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/cocos2d/animation/animation-curves.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        var bezierByTime = require('./bezier').bezierByTime;
        var binarySearch = require('../core/utils/binary-search').binarySearchEpsilon;
        var WrapModeMask = require('./types').WrapModeMask;
        var WrappedInfo = require('./types').WrappedInfo;
        function computeRatioByType(ratio, type) {
            if (typeof type === 'string') {
                var func = cc.easing[type];
                if (func) {
                    ratio = func(ratio);
                } else {
                    cc.errorID(3906, type);
                }
            } else if (Array.isArray(type)) {
                ratio = bezierByTime(type, ratio);
            }
            return ratio;
        }
        var AnimCurve = cc.Class({
            name: 'cc.AnimCurve',
            sample: function sample(time, ratio, state) {
            },
            onTimeChangedManually: undefined
        });
        function quickFindIndex(ratios, ratio) {
            var length = ratios.length - 1;
            if (length === 0)
                return 0;
            var start = ratios[0];
            if (ratio < start)
                return 0;
            var end = ratios[length];
            if (ratio > end)
                return length;
            ratio = (ratio - start) / (end - start);
            var eachLength = 1 / length;
            var index = ratio / eachLength;
            var floorIndex = index | 0;
            var EPSILON = 0.000001;
            if (index - floorIndex < EPSILON) {
                return floorIndex;
            } else if (floorIndex + 1 - index < EPSILON) {
                return floorIndex + 1;
            }
            return ~(floorIndex + 1);
        }
        var DynamicAnimCurve = cc.Class({
            name: 'cc.DynamicAnimCurve',
            extends: AnimCurve,
            properties: {
                target: null,
                prop: '',
                values: [],
                ratios: [],
                types: []
            },
            _findFrameIndex: binarySearch,
            _lerp: undefined,
            _lerpNumber: function _lerpNumber(from, to, t) {
                return from + (to - from) * t;
            },
            _lerpObject: function _lerpObject(from, to, t) {
                return from.lerp(to, t);
            },
            _lerpQuat: function () {
                var out = cc.quat();
                return function (from, to, t) {
                    return from.lerp(to, t, out);
                };
            }(),
            _lerpVector: function () {
                var out = cc.v3();
                return function (from, to, t) {
                    return from.lerp(to, t, out);
                };
            }(),
            sample: function sample(time, ratio, state) {
                var values = this.values;
                var ratios = this.ratios;
                var frameCount = ratios.length;
                if (frameCount === 0) {
                    return;
                }
                var value;
                var index = this._findFrameIndex(ratios, ratio);
                if (index < 0) {
                    index = ~index;
                    if (index <= 0) {
                        value = values[0];
                    } else if (index >= frameCount) {
                        value = values[frameCount - 1];
                    } else {
                        var fromVal = values[index - 1];
                        if (!this._lerp) {
                            value = fromVal;
                        } else {
                            var fromRatio = ratios[index - 1];
                            var toRatio = ratios[index];
                            var type = this.types[index - 1];
                            var ratioBetweenFrames = (ratio - fromRatio) / (toRatio - fromRatio);
                            if (type) {
                                ratioBetweenFrames = computeRatioByType(ratioBetweenFrames, type);
                            }
                            var toVal = values[index];
                            value = this._lerp(fromVal, toVal, ratioBetweenFrames);
                        }
                    }
                } else {
                    value = values[index];
                }
                this.target[this.prop] = value;
            }
        });
        DynamicAnimCurve.Linear = null;
        DynamicAnimCurve.Bezier = function (controlPoints) {
            return controlPoints;
        };
        var EventInfo = function EventInfo() {
            this.events = [];
        };
        EventInfo.prototype.add = function (func, params) {
            this.events.push({
                func: func || '',
                params: params || []
            });
        };
        var EventAnimCurve = cc.Class({
            name: 'cc.EventAnimCurve',
            extends: AnimCurve,
            properties: {
                target: null,
                ratios: [],
                events: [],
                _wrappedInfo: {
                    default: function _default() {
                        return new WrappedInfo();
                    }
                },
                _lastWrappedInfo: null,
                _ignoreIndex: NaN
            },
            _wrapIterations: function _wrapIterations(iterations) {
                if (iterations - (iterations | 0) === 0)
                    iterations -= 1;
                return iterations | 0;
            },
            sample: function sample(time, ratio, state) {
                var length = this.ratios.length;
                var currentWrappedInfo = state.getWrappedInfo(state.time, this._wrappedInfo);
                var direction = currentWrappedInfo.direction;
                var currentIndex = binarySearch(this.ratios, currentWrappedInfo.ratio);
                if (currentIndex < 0) {
                    currentIndex = ~currentIndex - 1;
                    if (direction < 0)
                        currentIndex += 1;
                }
                if (this._ignoreIndex !== currentIndex) {
                    this._ignoreIndex = NaN;
                }
                currentWrappedInfo.frameIndex = currentIndex;
                if (!this._lastWrappedInfo) {
                    this._fireEvent(currentIndex);
                    this._lastWrappedInfo = new WrappedInfo(currentWrappedInfo);
                    return;
                }
                var wrapMode = state.wrapMode;
                var currentIterations = this._wrapIterations(currentWrappedInfo.iterations);
                var lastWrappedInfo = this._lastWrappedInfo;
                var lastIterations = this._wrapIterations(lastWrappedInfo.iterations);
                var lastIndex = lastWrappedInfo.frameIndex;
                var lastDirection = lastWrappedInfo.direction;
                var interationsChanged = lastIterations !== -1 && currentIterations !== lastIterations;
                if (lastIndex === currentIndex && interationsChanged && length === 1) {
                    this._fireEvent(0);
                } else if (lastIndex !== currentIndex || interationsChanged) {
                    direction = lastDirection;
                    do {
                        if (lastIndex !== currentIndex) {
                            if (direction === -1 && lastIndex === 0 && currentIndex > 0) {
                                if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                                    direction *= -1;
                                } else {
                                    lastIndex = length;
                                }
                                lastIterations++;
                            } else if (direction === 1 && lastIndex === length - 1 && currentIndex < length - 1) {
                                if ((wrapMode & WrapModeMask.PingPong) === WrapModeMask.PingPong) {
                                    direction *= -1;
                                } else {
                                    lastIndex = -1;
                                }
                                lastIterations++;
                            }
                            if (lastIndex === currentIndex)
                                break;
                            if (lastIterations > currentIterations)
                                break;
                        }
                        lastIndex += direction;
                        cc.director.getAnimationManager().pushDelayEvent(this, '_fireEvent', [lastIndex]);
                    } while (lastIndex !== currentIndex && lastIndex > -1 && lastIndex < length);
                }
                this._lastWrappedInfo.set(currentWrappedInfo);
            },
            _fireEvent: function _fireEvent(index) {
                if (index < 0 || index >= this.events.length || this._ignoreIndex === index)
                    return;
                var eventInfo = this.events[index];
                var events = eventInfo.events;
                if (!this.target.isValid) {
                    return;
                }
                var components = this.target._components;
                for (var i = 0; i < events.length; i++) {
                    var event = events[i];
                    var funcName = event.func;
                    for (var j = 0; j < components.length; j++) {
                        var component = components[j];
                        var func = component[funcName];
                        if (func)
                            func.apply(component, event.params);
                    }
                }
            },
            onTimeChangedManually: function onTimeChangedManually(time, state) {
                this._lastWrappedInfo = null;
                this._ignoreIndex = NaN;
                var info = state.getWrappedInfo(time, this._wrappedInfo);
                var direction = info.direction;
                var frameIndex = binarySearch(this.ratios, info.ratio);
                if (frameIndex < 0) {
                    frameIndex = ~frameIndex - 1;
                    if (direction < 0)
                        frameIndex += 1;
                    this._ignoreIndex = frameIndex;
                }
            }
        });
        if (CC_TEST) {
            cc._Test.DynamicAnimCurve = DynamicAnimCurve;
            cc._Test.EventAnimCurve = EventAnimCurve;
            cc._Test.quickFindIndex = quickFindIndex;
        }
        module.exports = {
            AnimCurve: AnimCurve,
            DynamicAnimCurve: DynamicAnimCurve,
            EventAnimCurve: EventAnimCurve,
            EventInfo: EventInfo,
            computeRatioByType: computeRatioByType,
            quickFindIndex: quickFindIndex
        };
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,