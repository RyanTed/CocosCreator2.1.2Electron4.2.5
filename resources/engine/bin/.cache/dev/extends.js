(function () {
    var nodeEnv = typeof require !== 'undefined' && typeof process !== 'undefined';
    var __module = nodeEnv ? module : { exports: {} };
    var __filename = 'engine-dev/extends.js';
    var __require = nodeEnv ? function (request) {
        return require(request);
    } : function (request) {
        return __quick_compile__.require(request, __filename);
    };
    function __define(exports, require, module) {
        if (!nodeEnv) {
            __quick_compile__.registerModule(__filename, module);
        }
                'use strict';
        require('./cocos2d/core');
        require('./cocos2d/animation');
        if (CC_EDITOR && Editor.isMainProcess) {
            require('./cocos2d/particle/CCParticleAsset');
            require('./cocos2d/tilemap/CCTiledMapAsset');
        } else {
            require('./cocos2d/particle');
            require('./cocos2d/tilemap');
            require('./cocos2d/videoplayer/CCVideoPlayer');
            require('./cocos2d/webview/CCWebView');
            require('./cocos2d/core/components/CCStudioComponent');
            require('./extensions/ccpool/CCNodePool');
            require('./cocos2d/actions');
        }
        require('./extensions/spine');
        require('./extensions/dragonbones');
        if (!CC_EDITOR || !Editor.isMainProcess) {
            require('./cocos2d/deprecated');
        }
    }
    if (nodeEnv) {
        __define(__module.exports, __require, __module);
    } else {
        __quick_compile__.registerModuleFunc(__filename, function () {
            __define(__module.exports, __require, __module);
        });
    }
}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,