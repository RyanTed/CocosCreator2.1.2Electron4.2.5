"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _path = _interopRequireDefault(require("path"));

var _fs = _interopRequireDefault(require("fs"));

var _del = _interopRequireDefault(require("del"));

var _zipPlugin = _interopRequireDefault(require("./plugin/zip-plugin"));

var _resourcePlugin = _interopRequireDefault(require("./plugin/resource-plugin"));

var _notifyPlugin = _interopRequireDefault(require("./plugin/notify-plugin"));

var _utils = require("./utils");

var excludeDir = ['.DS_Store', 'Thumbs.db', '.idea', 'build', 'dist', 'sign', 'node_modules']; // 项目路径

var projectPath, manifestJson; // 主包保留名

var MAIN_PKG_NAME = 'base'; // 能使用rpks能力的调试器最低版本

var RPKS_SUPPORT_VERSION_FROM = 1040;
/**
 * @param {Object} options - 命令行参数
 * @param {String} mode - 开发模式['development'|'production']
 * @param {boolean} [options.disableSubpackages=false] - 是否禁止分包
 * @returns {webpackConf, exOptions}
 */

module.exports = function (options, mode) {
  var contentPath = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  projectPath = contentPath || process.cwd(); // 构建目录

  var pathBuild = _path["default"].resolve(projectPath, 'build'); // dist目录


  var pathDist = _path["default"].resolve(projectPath, 'dist'); // manifest.json


  var manifestFile = _path["default"].resolve(projectPath, 'manifest.json');

  manifestJson = getJson(manifestFile);
  var exOptions = {
    appPackageName: manifestJson["package"] // 入口文件

  };

  var entryFilePath = _path["default"].join(projectPath, 'main.js'); // 初始配置检查


  checkConfig(options, manifestJson, entryFilePath); // 应用与页面的脚本文件

  var scriptFileList = findUxFilesByManifest(options.cocosWxGame, manifestJson); // 页面文件

  var uxEntries = buildWebpackEntries(scriptFileList); // 清空build目录文件, 启动server不清空目录

  if (!options.server) {
    _del["default"].sync([pathDist, pathBuild]);
  } // 使用严格模式


  useStrictMode(options.strictMode); // 是否使用release签名

  var isuseReleaseName = mode === 'production';
  var useReleaseName = isuseReleaseName ? 'release' : 'debug';
  var devtoolType = isuseReleaseName ? 'none' : 'source-map';
  var priorities = ['manifest.json', 'main.js'];
  var isWatch = options.watch || false;
  var _manifestJson = manifestJson,
      subpackages = _manifestJson.subpackages;
  var webpackConf = {
    mode: mode,
    entry: uxEntries,
    output: {
      path: pathBuild,
      filename: '[name].js'
    },
    context: contentPath || _path["default"].resolve(__dirname),
    module: {
      rules: []
    },
    watch: isWatch,
    watchOptions: {
      ignored: /node_modules/
    },
    devtool: devtoolType,
    resolve: {
      modules: ['./', 'node_modules']
    },
    node: {
      global: false,
      url: true,
      process: false,
      fs: 'empty',
      Buffer: false
    },
    resolveLoader: {
      modules: [_path["default"].resolve(__dirname, './loaders'), 'node_modules']
    },
    plugins: [new _zipPlugin["default"]({
      name: manifestJson["package"],
      versionCode: manifestJson.versionCode,
      projectPath: projectPath,
      output: pathDist,
      pathBuild: pathBuild,
      sign: useReleaseName,
      priorities: priorities,
      subpackages: subpackages,
      copyRpk: options.copyRpk,
      disableStreamPack: options.disableStreamPack,
      disableSubpackages: options.disableSubpackages
    }), new _resourcePlugin["default"]({
      pathBuild: pathBuild,
      sign: isuseReleaseName,
      projectPath: projectPath,
      ignoreDir: options.ignore,
      cocosWxGame: options.cocosWxGame
    })],
    externals: [function (content, request, callback) {
      // 处理系统模块
      if (request.match(/@\w+(.\w+)+/g)) {
        return callback(null, "$require$(\"@module/".concat(request.slice(1), "\")"));
      }

      callback();
    }] // jest测试模式下不需要通知手机更新

  };

  if (!options.jestMode) {
    webpackConf.plugins.push(new _notifyPlugin["default"]());
  } // 对cocos的微信小游戏兼容


  if (options.cocosWxGame) {
    webpackConf.module.rules.push({
      test: /\.js$/,
      use: {
        loader: 'resolveRequire'
      }
    });
  }

  return {
    webpackConf: webpackConf,
    exOptions: exOptions
  };
};
/**
 * 校验配置入口文件，manifest文件等
 * @param options
 * @param manifestJSON
 */


function checkConfig(options, manifestJSON, entryFilePath) {
  // 校验入口文件
  if (!_fs["default"].existsSync(entryFilePath)) {
    _utils.colorconsole.error("\u9879\u76EE ".concat(entryFilePath, " \u4E0B\u627E\u4E0D\u5230\u5165\u53E3\u6587\u4EF6 main.js"));

    return;
  } // 校验mainifest配置


  validateManifest(options, manifestJSON);
}
/**
 * 验证项目的应用全局配置
 * @param options
 * @param manifestJSON
 */


function validateManifest(options, manifestJSON) {
  if (!manifestJSON['icon']) {
    _utils.colorconsole.error('manifest.json 中未配置图标icon');
  }

  if (!manifestJSON['package']) {
    _utils.colorconsole.error('manifest.json 未定义包名(package)');
  }

  var subpackages = manifestJSON.subpackages; // 验证分包规则

  if (!options.disableSubpackages && subpackages && subpackages.length > 1) {
    validateManifestSubpackages(subpackages);
  }
}
/**
 * 编译代码使用严格模式声明
 * @param {Boolean} strictMode - 使用严格模式
 */


function useStrictMode(strictMode) {
  var packageJsonPath = _path["default"].join(projectPath, 'package.json');

  if (_fs["default"].existsSync(packageJsonPath)) {
    var config = JSON.parse(_fs["default"].readFileSync(packageJsonPath));

    if (strictMode) {
      if (config.babel) {
        delete config.babel;

        _fs["default"].writeFileSync(packageJsonPath, JSON.stringify(config, null, '\t'));

        console.info('编译代码进行严格模式声明："use strict"');
      }
    } else if (!config.babel) {
      // 非严格模式
      config.babel = {
        plugins: ['babel-plugin-transform-remove-strict-mode']
      };

      _fs["default"].writeFileSync(packageJsonPath, JSON.stringify(config, null, '\t'));
    }
  } else {
    console.info("\u8BF7\u67E5\u770B ".concat(packageJsonPath, " \u8DEF\u5F84\u4E0B\u662F\u5426\u5B58\u5728package.json\u6587\u4EF6"));
  }
}
/**
 * 提取其中的应用和页面脚本文件
 * @param {Boolean} cocosWxGame - cocos微信小游戏模式
 * @return {Array}
 */


function findUxFilesByManifest(cocosWxGame, manifestJson) {
  var files = []; // 默认入口文件main.js

  files.push({
    resource: 'main.js'
  }); // 兼容cocos动态require(暂不需要每个文件都作为入口文件)

  if (cocosWxGame) {// collectFiles(projectPath, files)
  }

  var subpackages = manifestJson.subpackages;

  if (manifestJson && subpackages) {
    subpackages.forEach(function (item) {
      files.push(item);
    });
  }

  return files;
}
/**
 * 搜集文件
 * @param {path} dir - 当前文件夹路径
 * @param {Object} files - 搜集文件
 */


function collectFiles(dir, files) {
  var dirPath = _path["default"].resolve(projectPath, dir);

  var regExp = new RegExp("(".concat(excludeDir.join('|'), ")"));

  _fs["default"].readdirSync(dirPath).forEach(function (item) {
    if (!item.match(regExp)) {
      var itemPath = _path["default"].resolve(dirPath, item);

      var stat = _fs["default"].statSync(itemPath);

      if (stat.isFile() && _path["default"].extname(item) === '.js' && !item.match(/cocos.*/g)) {
        itemPath = _path["default"].relative(projectPath, itemPath).replace(/\\/, '/');
        files.push({
          resource: itemPath
        });
      } else if (stat.isDirectory()) {
        collectFiles(itemPath, files);
      }
    }
  });
}
/**
 * 生成多入口文件配置
 * @param {Array} scriptFileList - 脚本文件集合
 */


function buildWebpackEntries(scriptFileList) {
  var uxEntries = {};
  var filePath;
  scriptFileList.forEach(function (item) {
    // 兼容 wxGame 使用root
    var resource = item.resource || item.root;

    var extname = _path["default"].extname(resource);

    var chunckName = resource.replace(extname, '');

    if (extname) {
      var pathName = resource.replace(extname, '');
      filePath = _path["default"].join(projectPath, pathName);
    } else {
      // 默认加载目录下的main.js
      var newResource = resource;

      if (/\.js$/.test(resource)) {
        newResource = resource;
      } else if (/\/$/.test(resource)) {
        newResource = resource + 'main.js';
        chunckName = resource + 'main';
      } else {
        _utils.colorconsole["throw"]("manifest.json\u4E2D\u7684\u6587\u4EF6\u8DEF\u52B2\u914D\u7F6E\u5B58\u5728\u95EE\u9898".concat(resource));
      }

      filePath = _path["default"].join(projectPath, newResource);
    }

    uxEntries[chunckName] = filePath;
  });
  return uxEntries;
}
/**
 * 获取json文件
 * @param pathJson
 */


function getJson(pathJson) {
  var config;

  if (_fs["default"].existsSync(pathJson)) {
    config = JSON.parse(_fs["default"].readFileSync(pathJson));
  }

  return config || {};
}
/**
 * 检查subpackages字段配置。
 * 除subpackages字段指定的文件是打进非主包外，剩余文件都打进主包
 * 主包与是独立包的非主包，都需要manifest文件
 * @param {object[]} subpackages 分包列表: [{ name, resource, standalone }]
 * @param {string} subpackages[].name 分包名字，必填，不能重复，且不能是"base"（这是主包保留名），只能是 数字字母_ 组成
 * @param {string} subpackages[].[resource|root] 分包资源路径，必须为src下文件目录，不能重复，分包间不能有包含关系，只能是 数字字母_ 开头，数字字母_-/ 组成
 * @param {boolean} subpackages[].standalone 是否独立包标识，是独立包则需要manifest文件，缺省为false；
 */


function validateManifestSubpackages(subpackages) {
  // 用以检测分包名是否重复
  var nameList = []; // 用以检测分包资源路径是否重复

  var resList = [];
  var name = '';
  var resource = ''; // 资源路径的具体文件路径

  var resPath = '';
  var index = 0;
  subpackages.forEach(function (subpkg, i) {
    name = subpkg.name;
    resource = subpkg.resource || subpkg.root;
    resPath = resource && _path["default"].join(projectPath, resource);
    index = i + 1;

    if (!name) {
      _utils.colorconsole["throw"]("\u7B2C".concat(index, "\u5206\u5305\u7684\u540D\u5B57\u4E0D\u80FD\u4E3A\u7A7A\uFF0C\u8BF7\u6DFB\u52A0"));
    } else if (name === MAIN_PKG_NAME) {
      _utils.colorconsole["throw"]("\u7B2C".concat(index, "\u5206\u5305\u7684\u540D\u5B57'").concat(name, "'\u662F\u4E3B\u5305\u4FDD\u7559\u540D\uFF0C\u8BF7\u4FEE\u6539"));
    } else if (nameList.indexOf(name) > -1) {
      _utils.colorconsole["throw"]("\u7B2C".concat(index, "\u5206\u5305\u7684\u540D\u5B57'").concat(name, "'\u5DF2\u5B58\u5728\uFF0C\u8BF7\u4FEE\u6539"));
    } else {
      nameList.push(name);
    }

    if (!resource) {
      _utils.colorconsole["throw"]("\u7B2C".concat(index, "\u5206\u5305\u7684\u8D44\u6E90\u540D\u4E0D\u80FD\u4E3A\u7A7A\uFF0C\u8BF7\u6DFB\u52A0"));
    } else if (resList.indexOf(resource) > -1) {
      _utils.colorconsole["throw"]("\u7B2C".concat(index, "\u5206\u5305\u7684\u8D44\u6E90'").concat(resource, "'\u5DF2\u88AB\u4F7F\u7528\uFF0C\u8BF7\u4FEE\u6539"));
    } else if (!_fs["default"].existsSync(resPath)) {
      _utils.colorconsole["throw"]("\u7B2C".concat(index, "\u5206\u5305\u7684\u8D44\u6E90'").concat(resource, "', \u6587\u4EF6\u76EE\u5F55'").concat(resPath, "'\u4E0D\u5B58\u5728\uFF0C\u8BF7\u4FEE\u6539"));
    }
  });
  var _manifestJson2 = manifestJson,
      minPlatformVersion = _manifestJson2.minPlatformVersion;

  if (parseInt(minPlatformVersion) < RPKS_SUPPORT_VERSION_FROM) {
    _utils.colorconsole.warn("\u9879\u76EE\u5DF2\u914D\u7F6E\u5206\u5305\uFF0C\u82E5\u60F3\u4F7F\u7528\u5206\u5305\u529F\u80FD\uFF0C\u8BF7\u786E\u4FDD\u5E73\u53F0\u7248\u672C >= ".concat(RPKS_SUPPORT_VERSION_FROM));
  }
}