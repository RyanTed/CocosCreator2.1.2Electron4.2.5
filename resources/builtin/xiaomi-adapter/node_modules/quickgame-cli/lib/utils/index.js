"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.traverseDirSync = traverseDirSync;
exports.replaceSystemModule = replaceSystemModule;
exports.extend = extend;
exports.merge = merge;
exports.sortFilesBy = sortFilesBy;
exports.logWarn = logWarn;
exports.collectResFile = collectResFile;
exports.updateManifestCont = updateManifestCont;
exports.lsdirdeep = lsdirdeep;
exports.colorconsole = void 0;

var _path = _interopRequireDefault(require("path"));

var _chalk = _interopRequireDefault(require("chalk"));

var _fs = _interopRequireDefault(require("fs"));

/*
 * Copyright (C) 2017, hapjs.org. All rights reserved.
 */

/**
 * 遍历文件夹，收集文件路径
 * @param dir
 * @param files
 */
function traverseDirSync(dir, files) {
  var list = _fs["default"].readdirSync(dir);

  list.forEach(function (file) {
    file = _path["default"].join(dir, file);

    var stat = _fs["default"].statSync(file);

    if (stat && stat.isDirectory()) {
      traverseDirSync(file, files);
    } else {
      files.push(file);
    }
  });
}
/**
 * 转换内部模块
 * @param context
 * @param request
 * @param callback
 * @returns {*}
 */


function replaceSystemModule(context, request, callback) {
  if (request.match(/@\w+(.\w+)+/g)) {
    return callback(null, "$require$(\"@module/".concat(request.slice(1), "\")"));
  }

  return callback();
}
/**
 * 扩展对象属性
 * @param dest
 * @param src
 */


function extend(target) {
  for (var _len = arguments.length, src = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    src[_key - 1] = arguments[_key];
  }

  if (typeof Object.assign === 'function') {
    Object.assign.apply(Object, [target].concat(src));
  } else {
    var first = src.shift(); // 覆盖旧值

    for (var key in first) {
      target[key] = first[key];
    }

    if (src.length) {
      extend.apply(void 0, [target].concat(src));
    }
  }

  return target;
}
/**
 * 合并数组属性
 * @param dest
 * @param src
 */


function merge(target) {
  for (var _len2 = arguments.length, src = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    src[_key2 - 1] = arguments[_key2];
  }

  if (src.length) {
    src.forEach(function (item) {
      target = target.concat(item);
    });
  }

  return target;
}

function predicate(pattern) {
  // f1, f2 will be bound to this
  if (typeof pattern === 'string') {
    return pattern === this.toString();
  } else {
    // RegExp
    return this.match(pattern);
  }
}
/**
 * 根据给定的优先级列表，对文件列表进行排序
 * NOTE 会修改数组本身
 *
 * @param {Array<String>} files - 文件列表
 * @param {Array<String|RegExp>} priorities - 优先级参考列表，可以使用正则表达式
 * @returns {Array<String>} - 排列后的文件列表
 */


function sortFilesBy(files, priorities) {
  // 用于赋值未匹配到的数值
  var MAX = files.length;
  files = files.sort(function (f1, f2) {
    // 对比位于 priorities 中的位置，得出优先关系
    var idx1 = priorities.findIndex(predicate, f1);
    var idx2 = priorities.findIndex(predicate, f2);
    idx1 = idx1 === -1 ? MAX : idx1;
    idx2 = idx2 === -1 ? MAX : idx2;
    return idx1 - idx2;
  });
  return files;
}
/**
 * 打印日志
 * @param loader
 * @param logs
 * @param suppresslog
 */


function logWarn(loader, logs, suppresslog) {
  if (logs && logs.length) {
    logs.forEach(function (log) {
      var logAddr = log.line && log.column ? '\t@' + log.line + ':' + log.column : '';
      if (suppresslog) return;

      if (log.reason.startsWith('ERROR')) {
        colorconsole.error(loader.context, log.reason + logAddr);
      } else {
        colorconsole.warn(loader.context, log.reason + logAddr);
      }
    });
  }
}

var logLevelMap = {};

function prependLevel(levelName, args) {
  !logLevelMap[levelName] && function (levelNameInner) {
    var logLevel = levelNameInner.toUpperCase().substr(0, 4);
    logLevel.paddEnd && logLevel.paddEnd(4);
    logLevelMap[levelName] = logLevel;
  }(levelName);

  if (typeof args[0] === 'string' && args[0].length > 1 && args[0][0] !== '[') {
    args[0] = "[".concat(logLevelMap[levelName], "] ").concat(args[0]);
  }
}
/**
 * 规范日志
 */


var colorconsole = {
  trace: function trace() {
    var _console;

    for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      args[_key3] = arguments[_key3];
    }

    prependLevel('trace', args);

    (_console = console).trace.apply(_console, args);
  },
  log: function log() {
    for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
      args[_key4] = arguments[_key4];
    }

    prependLevel('log', args);
    console.log(_chalk["default"].green.apply(_chalk["default"], args));
  },
  info: function info() {
    for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
      args[_key5] = arguments[_key5];
    }

    prependLevel('info', args);
    console.info(_chalk["default"].green.apply(_chalk["default"], args));
  },
  warn: function warn() {
    var _chalk$yellow;

    for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
      args[_key6] = arguments[_key6];
    }

    prependLevel('warn', args);
    console.warn((_chalk$yellow = _chalk["default"].yellow).bold.apply(_chalk$yellow, args));
  },
  error: function error() {
    var _chalk$red;

    for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      args[_key7] = arguments[_key7];
    }

    prependLevel('error', args);
    console.error((_chalk$red = _chalk["default"].red).bold.apply(_chalk$red, args));
  },
  "throw": function _throw() {
    var _chalk$red2;

    throw new Error((_chalk$red2 = _chalk["default"].red).bold.apply(_chalk$red2, arguments));
  }
};
/**
 * 收集静态资源文件
 * @param {String} projectPath - 源文件目录
 * @param {String} buildDirPath - 编译后的目录
 * @param {Array} FILE_INCLUDE_EXT - 白名单后缀
 * @param {RegExp} RegExcludeDir - 需要排除的文件
 * @param {Array} EXCLUDE_FILES - 补充排除指定文件
 */

exports.colorconsole = colorconsole;

function collectResFile(projectPath, buildDirPath, FILE_INCLUDE_EXT, RegExcludeDir, EXCLUDE_FILES) {
  var resources = {}; // 递归遍历目录

  _fs["default"].readdirSync(projectPath).forEach(function (item) {
    var itemPath = _path["default"].resolve(projectPath, item);

    var stat = _fs["default"].statSync(itemPath);

    if (stat.isFile()) {
      var extName = _path["default"].extname(item);

      var isIncludeFile = FILE_INCLUDE_EXT.includes(extName) && !EXCLUDE_FILES.includes(item);

      if (isIncludeFile) {
        var itemBuildPath = _path["default"].resolve(buildDirPath, item);

        resources[itemBuildPath] = itemPath;
      }
    } else if (stat.isDirectory()) {
      var isExcludeDir = !item.match(RegExcludeDir);

      if (isExcludeDir) {
        // 输出目录加上当前文件夹
        var newbuildPath = _path["default"].resolve(buildDirPath, item);

        var files = collectResFile(itemPath, newbuildPath, FILE_INCLUDE_EXT, RegExcludeDir, EXCLUDE_FILES);
        files && Object.assign(resources, files);
      }
    }
  });

  return resources;
}
/**
 * 更新manifest内容
 * @param manifestCont
 */


function updateManifestCont(manifestCont) {
  var manifestJson = null; // 解析JSON文件

  try {
    manifestJson = JSON.parse(manifestCont);
  } catch (err) {
    colorconsole.error("ERROR: \u89E3\u6790manifest.json\u6587\u4EF6\u51FA\u9519\uFF1A".concat(err.message));
    throw err;
  }

  if (!manifestJson) {
    return;
  } // 设置默认


  if (!manifestJson.minPlatformVersion) {
    manifestJson.minPlatformVersion = 101;
  } // 更新内容


  manifestCont = JSON.stringify(manifestJson, null, 2);
  return {
    manifestCont: manifestCont
  };
}
/**
 * 遍历所有子目录，列出文件
 *
 * @param {String} cwd - 目标目录
 * @param [filesys] - 文件系统，允许 memory-fs
 * @returns {Files} - 基于 cwd 的文件列表
 */


function lsdirdeep(cwd) {
  var filesys = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _fs["default"];

  // 递归函数
  function lsdir(cwd, dir, filesys) {
    var files = [];

    var directory = _path["default"].posix.join(cwd, dir);

    var rawFiles = filesys.readdirSync(directory);
    rawFiles.forEach(function (file) {
      var filepath = _path["default"].posix.join(directory, file);

      var relatpath = _path["default"].posix.join(dir, file);

      var stat = filesys.statSync(filepath);

      if (stat.isFile()) {
        files.push(relatpath);
      } else {
        files = files.concat(lsdir(cwd, relatpath, filesys));
      }
    });
    return files;
  }

  return lsdir(cwd, '.', filesys);
}